// Generated by `wit-bindgen` 0.20.0. DO NOT EDIT!
// Options used:
pub mod component {
    pub mod pulumi_wasm {

        #[allow(clippy::all)]
        pub mod output_interface {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Output {
                handle: _rt::Resource<Output>,
            }

            impl Output {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Output {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]output"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            pub fn describe_outputs() -> _rt::String {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                    extern "C" {
                        #[link_name = "describe-outputs"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<*mut u8>();
                    let l2 = *ptr0.add(4).cast::<usize>();
                    let len3 = l2;
                    let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                    _rt::string_lift(bytes3)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn non_done_exists() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                    extern "C" {
                        #[link_name = "non-done-exists"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn combine_outputs() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                    extern "C" {
                        #[link_name = "combine-outputs"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    _rt::bool_lift(ret as u8)
                }
            }
            impl Output {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(value: &[u8]) -> Self {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]output"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        Output::from_handle(ret as u32)
                    }
                }
            }
            impl Output {
                #[allow(unused_unsafe, clippy::all)]
                pub fn map(&self, function_name: &str) -> Output {
                    unsafe {
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]output.map"]
                            fn wit_import(_: i32, _: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                        Output::from_handle(ret as u32)
                    }
                }
            }
            impl Output {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<_rt::Vec<u8>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]output.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;

                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Output {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_field(&self, field: &str) -> Output {
                    unsafe {
                        let vec0 = field;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]output.get-field"]
                            fn wit_import(_: i32, _: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                        Output::from_handle(ret as u32)
                    }
                }
            }
            impl Output {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_type(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]output.get-type"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Output {
                #[allow(unused_unsafe, clippy::all)]
                pub fn duplicate(&self) -> Output {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]output.duplicate"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Output::from_handle(ret as u32)
                    }
                }
            }
        }

        #[allow(clippy::all)]
        pub mod pulumi_provider_random_interface {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Output = super::super::super::component::pulumi_wasm::output_interface::Output;
            pub struct RandomStringArgs<'a> {
                pub name: _rt::String,
                pub length: &'a Output,
            }
            impl<'a> ::core::fmt::Debug for RandomStringArgs<'a> {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("RandomStringArgs")
                        .field("name", &self.name)
                        .field("length", &self.length)
                        .finish()
                }
            }
            pub struct RandomStringResult {
                pub result: Output,
            }
            impl ::core::fmt::Debug for RandomStringResult {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("RandomStringResult")
                        .field("result", &self.result)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_random_string(args: &RandomStringArgs<'_>) -> RandomStringResult {
                unsafe {
                    let RandomStringArgs {
                        name: name0,
                        length: length0,
                    } = args;
                    let vec1 = name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "component:pulumi-wasm/pulumi-provider-random-interface@0.1.0"
                    )]
                    extern "C" {
                        #[link_name = "create-random-string"]
                        fn wit_import(_: *mut u8, _: usize, _: i32) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: i32) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(ptr1.cast_mut(), len1, (length0).handle() as i32);
                    RandomStringResult{
            result: super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(ret as u32),
          }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn handle_functions() {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "component:pulumi-wasm/pulumi-provider-random-interface@0.1.0"
                    )]
                    extern "C" {
                        #[link_name = "handle-functions"]
                        fn wit_import();
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() {
                        unreachable!()
                    }
                    wit_import();
                }
            }
        }

        #[allow(clippy::all)]
        pub mod function_reverse_callback {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Output = super::super::super::component::pulumi_wasm::output_interface::Output;
            pub struct FunctionInvocationRequest {
                pub id: Output,
                pub function_id: _rt::String,
                pub value: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for FunctionInvocationRequest {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("FunctionInvocationRequest")
                        .field("id", &self.id)
                        .field("function-id", &self.function_id)
                        .field("value", &self.value)
                        .finish()
                }
            }
            pub struct FunctionInvocationResult<'a> {
                pub id: &'a Output,
                pub value: _rt::Vec<u8>,
            }
            impl<'a> ::core::fmt::Debug for FunctionInvocationResult<'a> {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("FunctionInvocationResult")
                        .field("id", &self.id)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_functions(source: &str) -> _rt::Vec<FunctionInvocationRequest> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = source;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "component:pulumi-wasm/function-reverse-callback@0.1.0"
                    )]
                    extern "C" {
                        #[link_name = "get-functions"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let base11 = l2;
                    let len11 = l3;
                    let mut result11 = _rt::Vec::with_capacity(len11);
                    for i in 0..len11 {
                        let base = base11.add(i * 20);
                        let e11 = {
                            let l4 = *base.add(0).cast::<i32>();
                            let l5 = *base.add(4).cast::<*mut u8>();
                            let l6 = *base.add(8).cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            let l8 = *base.add(12).cast::<*mut u8>();
                            let l9 = *base.add(16).cast::<usize>();
                            let len10 = l9;

                            FunctionInvocationRequest{
                id: super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(l4 as u32),
                function_id: _rt::string_lift(bytes7),
                value: _rt::Vec::from_raw_parts(l8.cast(), len10, len10),
              }
                        };
                        result11.push(e11);
                    }
                    _rt::cabi_dealloc(base11, len11 * 20, 4);
                    result11
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_functions(results: &[FunctionInvocationResult<'_>]) {
                unsafe {
                    let vec2 = results;
                    let len2 = vec2.len();
                    let layout2 = _rt::alloc::Layout::from_size_align_unchecked(vec2.len() * 12, 4);
                    let result2 = if layout2.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout2);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec2.into_iter().enumerate() {
                        let base = result2.add(i * 12);
                        {
                            let FunctionInvocationResult {
                                id: id0,
                                value: value0,
                            } = e;
                            *base.add(0).cast::<i32>() = (id0).handle() as i32;
                            let vec1 = value0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base.add(8).cast::<usize>() = len1;
                            *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                        }
                    }

                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "component:pulumi-wasm/function-reverse-callback@0.1.0"
                    )]
                    extern "C" {
                        #[link_name = "set-functions"]
                        fn wit_import(_: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(result2, len2);
                    if layout2.size() != 0 {
                        _rt::alloc::dealloc(result2.cast(), layout2);
                    }
                }
            }
        }

        #[allow(clippy::all)]
        pub mod log {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Level {
                Trace,
                Debug,
                Info,
                Warn,
                Error,
            }
            impl ::core::fmt::Debug for Level {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Level::Trace => f.debug_tuple("Level::Trace").finish(),
                        Level::Debug => f.debug_tuple("Level::Debug").finish(),
                        Level::Info => f.debug_tuple("Level::Info").finish(),
                        Level::Warn => f.debug_tuple("Level::Warn").finish(),
                        Level::Error => f.debug_tuple("Level::Error").finish(),
                    }
                }
            }

            impl Level {
                pub(crate) unsafe fn _lift(val: u8) -> Level {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Level::Trace,
                        1 => Level::Debug,
                        2 => Level::Info,
                        3 => Level::Warn,
                        4 => Level::Error,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct Content {
                pub level: Level,
                pub target: _rt::String,
                pub args: _rt::String,
                pub module_path: Option<_rt::String>,
                pub file: Option<_rt::String>,
                pub line: Option<u32>,
                pub key_values: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for Content {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Content")
                        .field("level", &self.level)
                        .field("target", &self.target)
                        .field("args", &self.args)
                        .field("module-path", &self.module_path)
                        .field("file", &self.file)
                        .field("line", &self.line)
                        .field("key-values", &self.key_values)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn log(content: &Content) {
                unsafe {
                    let Content {
                        level: level0,
                        target: target0,
                        args: args0,
                        module_path: module_path0,
                        file: file0,
                        line: line0,
                        key_values: key_values0,
                    } = content;
                    let vec1 = target0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = args0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let (result4_0, result4_1, result4_2) = match module_path0 {
                        Some(e) => {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();

                            (1i32, ptr3.cast_mut(), len3)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result6_0, result6_1, result6_2) = match file0 {
                        Some(e) => {
                            let vec5 = e;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();

                            (1i32, ptr5.cast_mut(), len5)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result7_0, result7_1) = match line0 {
                        Some(e) => (1i32, _rt::as_i32(e)),
                        None => (0i32, 0i32),
                    };
                    let vec11 = key_values0;
                    let len11 = vec11.len();
                    let layout11 =
                        _rt::alloc::Layout::from_size_align_unchecked(vec11.len() * 16, 4);
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11.add(i * 16);
                        {
                            let (t8_0, t8_1) = e;
                            let vec9 = t8_0;
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            *base.add(4).cast::<usize>() = len9;
                            *base.add(0).cast::<*mut u8>() = ptr9.cast_mut();
                            let vec10 = t8_1;
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            *base.add(12).cast::<usize>() = len10;
                            *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                        }
                    }

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:pulumi-wasm/log@0.1.0")]
                    extern "C" {
                        #[link_name = "log"]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        level0.clone() as i32,
                        ptr1.cast_mut(),
                        len1,
                        ptr2.cast_mut(),
                        len2,
                        result4_0,
                        result4_1,
                        result4_2,
                        result6_0,
                        result6_1,
                        result6_2,
                        result7_0,
                        result7_1,
                        result11,
                        len11,
                    );
                    if layout11.size() != 0 {
                        _rt::alloc::dealloc(result11.cast(), layout11);
                    }
                }
            }
        }
    }
}
pub mod exports {
    pub mod component {
        pub mod pulumi_wasm {

            #[allow(clippy::all)]
            pub mod pulumi_main {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_main_cabi<T: Guest>() {
                    T::main();
                }
                pub trait Guest {
                    fn main();
                }
                #[doc(hidden)]

                macro_rules! __export_component_pulumi_wasm_pulumi_main_0_1_0_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


          #[export_name = "component:pulumi-wasm/pulumi-main@0.1.0#main"]
          unsafe extern "C" fn export_main() {
            $($path_to_types)*::_export_main_cabi::<$ty>()
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_component_pulumi_wasm_pulumi_main_0_1_0_cabi;
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            ::core::mem::transmute::<u8, bool>(val)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::alloc;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_new_main_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::component::pulumi_wasm::pulumi_main::__export_component_pulumi_wasm_pulumi_main_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::component::pulumi_wasm::pulumi_main);
  )
}
#[doc(inline)]
pub(crate) use __export_new_main_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.20.0:new-main:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1364] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd5\x09\x01A\x02\x01\
A\x0b\x01B\x16\x04\0\x06output\x03\x01\x01p}\x01i\0\x01@\x01\x05value\x01\0\x02\x04\
\0\x13[constructor]output\x01\x03\x01h\0\x01@\x02\x04self\x04\x0dfunction-names\0\
\x02\x04\0\x12[method]output.map\x01\x05\x01k\x01\x01@\x01\x04self\x04\0\x06\x04\
\0\x12[method]output.get\x01\x07\x01@\x02\x04self\x04\x05fields\0\x02\x04\0\x18[\
method]output.get-field\x01\x08\x01@\x01\x04self\x04\0s\x04\0\x17[method]output.\
get-type\x01\x09\x01@\x01\x04self\x04\0\x02\x04\0\x18[method]output.duplicate\x01\
\x0a\x01@\0\0s\x04\0\x10describe-outputs\x01\x0b\x01@\0\0\x7f\x04\0\x0fnon-done-\
exists\x01\x0c\x04\0\x0fcombine-outputs\x01\x0c\x03\x01,component:pulumi-wasm/ou\
tput-interface@0.1.0\x05\0\x02\x03\0\0\x06output\x01B\x10\x02\x03\x02\x01\x01\x04\
\0\x06output\x03\0\0\x01ky\x01h\x01\x01k\x03\x01q\x02\x07literal\x01\x02\0\x03re\
s\x01\x04\0\x04\0\x0aeither-u32\x03\0\x05\x01r\x02\x04names\x06length\x03\x04\0\x12\
random-string-args\x03\0\x07\x01i\x01\x01r\x01\x06result\x09\x04\0\x14random-str\
ing-result\x03\0\x0a\x01@\x01\x04args\x08\0\x0b\x04\0\x14create-random-string\x01\
\x0c\x01@\0\x01\0\x04\0\x10handle-functions\x01\x0d\x03\x01<component:pulumi-was\
m/pulumi-provider-random-interface@0.1.0\x05\x02\x01B\x0f\x02\x03\x02\x01\x01\x04\
\0\x06output\x03\0\0\x01i\x01\x01p}\x01r\x03\x02id\x02\x0bfunction-ids\x05value\x03\
\x04\0\x1bfunction-invocation-request\x03\0\x04\x01h\x01\x01r\x02\x02id\x06\x05v\
alue\x03\x04\0\x1afunction-invocation-result\x03\0\x07\x01p\x05\x01@\x01\x06sour\
ces\0\x09\x04\0\x0dget-functions\x01\x0a\x01p\x08\x01@\x01\x07results\x0b\x01\0\x04\
\0\x0dset-functions\x01\x0c\x03\x015component:pulumi-wasm/function-reverse-callb\
ack@0.1.0\x05\x03\x01B\x0a\x01m\x05\x05TRACE\x05DEBUG\x04INFO\x04WARN\x05ERROR\x04\
\0\x05level\x03\0\0\x01ks\x01ky\x01o\x02ss\x01p\x04\x01r\x07\x05level\x01\x06tar\
gets\x04argss\x0bmodule-path\x02\x04file\x02\x04line\x03\x0akey-values\x05\x04\0\
\x07content\x03\0\x06\x01@\x01\x07content\x07\x01\0\x04\0\x03log\x01\x08\x03\x01\
\x1fcomponent:pulumi-wasm/log@0.1.0\x05\x04\x01B\x02\x01@\0\x01\0\x04\0\x04main\x01\
\0\x04\x01'component:pulumi-wasm/pulumi-main@0.1.0\x05\x05\x04\x01$component:pul\
umi-wasm/new-main@0.1.0\x04\0\x0b\x0e\x01\0\x08new-main\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.20.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
