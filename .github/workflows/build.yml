name: Build

on:
  push:
    branches: [ "main", "update_version" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    env:
      RUST_BACKTRACE: "full"

    steps:
#    - uses: actions/checkout@v4
#      with:
#        submodules: true
#    - name: Pull required docker images
#      if: runner.os == 'Linux'
#      run: |
#        docker pull public.ecr.aws/ubuntu/ubuntu:latest
#    - uses: Swatinem/rust-cache@v2
#      with:
#        workspaces: |
#          ./
#          pulumi_wasm_generator_lib/tests/output/pulumi_providers/command/
#          pulumi_wasm_generator_lib/tests/output/pulumi_providers/docker/
#          pulumi_wasm_generator_lib/tests/output/pulumi_providers/random/
#          pulumi_wasm_generator_lib/tests/output/pulumi_tests/cyclic-types/
#          pulumi_wasm_generator_lib/tests/output/pulumi_tests/mini-awsnative/
#    - uses: actions/setup-go@v5
#      with:
#        go-version: '^1.22.0'
#        cache-dependency-path: "**/go.sum"
#    - run: go version
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "25.3"
        repo-token: ${{ secrets.GITHUB_TOKEN }}
#    - run: protoc --version
#    - run: brew install pulumi
#      if: runner.os == 'macOS'
#    - run: pulumi version
#    - run: pulumi login --local
#    - uses: extractions/setup-just@v2
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    - uses: cargo-bins/cargo-binstall@main
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    - name: Regenerate provider list
#      run: just regenerate-provider-list
#    - name: Install requirements
#      run: just install-requirements
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    - name: Check
#      run: just check
#    - name: Build
#      run: just build
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    - name: Test
#      run: just test
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        RUST_BACKTRACE: "full"
#    - uses: actions/upload-artifact@v4
#      with:
#        name: "timings_${{ runner.os }}"
#        path: |
#          target/cargo-timings/cargo-timing-*.html
#          pulumi_wasm_generator_lib/tests/**/target/cargo-timings/cargo-timing-*.html
#    - name: Ensure no files have changed
#      run: git diff --exit-code
#    - uses: benjlevesque/short-sha@v3.0
#      id: short-sha
#      with:
#        length: 7

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: success() && github.ref == 'refs/heads/update_version'
    steps:
#    - uses: actions/download-artifact@v4
#      with:
#        name: wasm_artefacts
#        path: artefacts
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: benjlevesque/short-sha@v3.0
      id: short-sha
      with:
        length: 7

    - uses: extractions/setup-just@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Replace version
      run: just update-version "0.0.0-${{ steps.short-sha.outputs.sha }}"



      #    - name: Pull required docker images
#      if: runner.os == 'Linux'
#      run: |
#        docker pull public.ecr.aws/ubuntu/ubuntu:latest
#    - uses: Swatinem/rust-cache@v2
#      with:
#        workspaces: |
#          ./
#          pulumi_wasm_generator_lib/tests/output/pulumi_providers/command/
#          pulumi_wasm_generator_lib/tests/output/pulumi_providers/docker/
#          pulumi_wasm_generator_lib/tests/output/pulumi_providers/random/
#          pulumi_wasm_generator_lib/tests/output/pulumi_tests/cyclic-types/
#          pulumi_wasm_generator_lib/tests/output/pulumi_tests/mini-awsnative/
#    - uses: actions/setup-go@v5
#      with:
#        go-version: '^1.22.0'
#        cache-dependency-path: "**/go.sum"
#    - run: go version
#    - name: Install Protoc
#      uses: arduino/setup-protoc@v3
#      with:
#        version: "25.3"
#        repo-token: ${{ secrets.GITHUB_TOKEN }}
#    - run: protoc --version
#    - run: brew install pulumi
#      if: runner.os == 'macOS'
#    - run: pulumi version
#    - run: pulumi login --local

#    - uses: cargo-bins/cargo-binstall@main
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    - name: Regenerate provider list
#      run: just regenerate-provider-list
#    - name: Install requirements
#      run: just install-requirements
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    - name: Check
#      run: just check
#    - name: Build
#      run: just build
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    - name: Test
#      run: just test
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        RUST_BACKTRACE: "full"


    - name: Create commit
      run: |
        git config --local user.name "GitHub Actions"
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Release v0.0.0-${{ steps.short-sha.outputs.sha }}"
    - uses: actions/upload-artifact@v4
      with:
        name: "timings_${{ runner.os }}"
        path: |
          target/cargo-timings/cargo-timing-*.html
          pulumi_wasm_generator_lib/tests/**/target/cargo-timings/cargo-timing-*.html
    - name: Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        name: 0.0.0-${{ steps.short-sha.outputs.sha }}
        tag_name: v0.0.0-${{ steps.short-sha.outputs.sha }}
        fail_on_unmatched_files: true
        prerelease: true
        body: ""
        files: |
          artefacts/**/*
    - name: Package language plugin
      if: runner.os == 'Linux'
      run: just package-language-plugin "0.0.0-${{ steps.short-sha.outputs.sha }}"
    - uses: actions/upload-artifact@v4
      if: runner.os == 'Linux'
      with:
        name: wasm_artefacts
#        if-no-files-found: error
        path: |
          pulumi_wasm_generator_lib/**/pulumi_providers/**/wasm32-wasip1/debug/*_provider.wasm
          target/wasm32-wasip1/debug/pulumi_wasm.wasm
          pulumi-language-wasm/*.tar.gz