name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    env:
      RUST_BACKTRACE: "full"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: extractions/setup-just@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: cargo-bins/cargo-binstall@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Install requirements
      run: just install-requirements
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Pull required docker images
      if: runner.os == 'Linux'
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 10
        max_attempts: 10
        command: docker pull public.ecr.aws/ubuntu/ubuntu:latest
    - uses: actions/setup-go@v5
      with:
        go-version: '^1.22.0'
        cache-dependency-path: "**/go.sum"
    - run: go version
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "25.3"
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - run: protoc --version
    - run: brew install pulumi
      if: runner.os == 'macOS'
    - run: pulumi version
    - run: pulumi login --local

    - uses: Swatinem/rust-cache@v2
      with:
        shared-key: build
        workspaces: |
          ./
          pulumi_wasm_generator_lib/tests/output/pulumi_providers/command/
          pulumi_wasm_generator_lib/tests/output/pulumi_providers/docker/
          pulumi_wasm_generator_lib/tests/output/pulumi_providers/random/
          pulumi_wasm_generator_lib/tests/output/pulumi_tests/cyclic-types/
          pulumi_wasm_generator_lib/tests/output/pulumi_tests/mini-awsnative/
    - name: Regenerate provider list
      run: just regenerate-provider-list
    - name: Check
      run: just check
    - name: Build
      run: just build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Test
      run: just test
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Ensure no files have changed
      run: git diff --exit-code

    - uses: actions/upload-artifact@v4
      with:
        name: "timings_${{ runner.os }}"
        path: |
          target/cargo-timings/cargo-timing-*.html
          pulumi_wasm_generator_lib/tests/**/target/cargo-timings/cargo-timing-*.html

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: success() && github.ref == 'refs/heads/main'
    env:
      RUST_BACKTRACE: "full"
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: extractions/setup-just@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: cargo-bins/cargo-binstall@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Install requirements
      run: just install-requirements
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Pull required docker images
      if: runner.os == 'Linux'
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 10
        max_attempts: 10
        command: docker pull public.ecr.aws/ubuntu/ubuntu:latest
    - uses: actions/setup-go@v5
      with:
        go-version: '^1.22.0'
        cache-dependency-path: "**/go.sum"
    - run: go version
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "25.3"
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - run: protoc --version
    - run: brew install pulumi
      if: runner.os == 'macOS'
    - run: pulumi version
    - run: pulumi login --local

    - uses: Swatinem/rust-cache@v2
      with:
        shared-key: build
        save-if: false
        workspaces: |
          ./
          pulumi_wasm_generator_lib/tests/output/pulumi_providers/command/
          pulumi_wasm_generator_lib/tests/output/pulumi_providers/docker/
          pulumi_wasm_generator_lib/tests/output/pulumi_providers/random/
          pulumi_wasm_generator_lib/tests/output/pulumi_tests/cyclic-types/
          pulumi_wasm_generator_lib/tests/output/pulumi_tests/mini-awsnative/

    - uses: benjlevesque/short-sha@v3.0
      id: short-sha
      with:
        length: 7
    - name: Replace version
      run: just update-version "0.0.0-NIGHTLY-${{ steps.short-sha.outputs.sha }}"


    - name: Build
      run: just build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Test
      run: just test
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Create commit
      run: |
        git config --local user.name "GitHub Actions"
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add -A
        git commit -m "Release v0.0.0-NIGHTLY-${{ steps.short-sha.outputs.sha }}"
        git tag "v0.0.0-NIGHTLY-${{ steps.short-sha.outputs.sha }}"
        git push origin "v0.0.0-NIGHTLY-${{ steps.short-sha.outputs.sha }}"
    - uses: actions/upload-artifact@v4
      with:
        name: "timings2_${{ runner.os }}"
        path: |
          target/cargo-timings/cargo-timing-*.html
          pulumi_wasm_generator_lib/tests/**/target/cargo-timings/cargo-timing-*.html
    - name: Package language plugin
      if: runner.os == 'Linux'
      run: just package-language-plugin "0.0.0-NIGHTLY-${{ steps.short-sha.outputs.sha }}"
    - name: Publish to registry
      run: just publish
      env:
        CARGO_REGISTRIES_CLOUDSMITH_TOKEN: ${{ secrets.CLOUDSMITH_API_KEY }}
    - name: Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        name: 0.0.0-NIGHTLY-${{ steps.short-sha.outputs.sha }}
        tag_name: v0.0.0-NIGHTLY-${{ steps.short-sha.outputs.sha }}
        fail_on_unmatched_files: true
        prerelease: true
        body: ""
        files: |
          pulumi_wasm_generator_lib/**/pulumi_providers/**/wasm32-wasip1/debug/*_provider.wasm
          target/wasm32-wasip1/debug/pulumi_wasm.wasm
          pulumi-language-wasm/*.tar.gz
