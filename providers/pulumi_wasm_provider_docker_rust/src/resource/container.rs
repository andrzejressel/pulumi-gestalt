pub struct ContainerArgs {
    pub attach: pulumi_wasm_rust::Output<Option<bool>>,
    pub capabilities: pulumi_wasm_rust::Output<Option<crate::types::ContainerCapabilities>>,
    pub cgroupns_mode: pulumi_wasm_rust::Output<Option<String>>,
    pub command: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub container_read_refresh_timeout_milliseconds: pulumi_wasm_rust::Output<Option<i32>>,
    pub cpu_set: pulumi_wasm_rust::Output<Option<String>>,
    pub cpu_shares: pulumi_wasm_rust::Output<Option<i32>>,
    pub destroy_grace_seconds: pulumi_wasm_rust::Output<Option<i32>>,
    pub devices: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerDevice>>>,
    pub dns: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub dns_opts: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub dns_searches: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub domainname: pulumi_wasm_rust::Output<Option<String>>,
    pub entrypoints: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub envs: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub gpus: pulumi_wasm_rust::Output<Option<String>>,
    pub group_adds: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub healthcheck: pulumi_wasm_rust::Output<Option<crate::types::ContainerHealthcheck>>,
    pub hostname: pulumi_wasm_rust::Output<Option<String>>,
    pub hosts: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerHost>>>,
    pub image: pulumi_wasm_rust::Output<String>,
    pub init: pulumi_wasm_rust::Output<Option<bool>>,
    pub ipc_mode: pulumi_wasm_rust::Output<Option<String>>,
    pub labels: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerLabel>>>,
    pub log_driver: pulumi_wasm_rust::Output<Option<String>>,
    pub log_opts: pulumi_wasm_rust::Output<Option<std::collections::HashMap<String, String>>>,
    pub logs: pulumi_wasm_rust::Output<Option<bool>>,
    pub max_retry_count: pulumi_wasm_rust::Output<Option<i32>>,
    pub memory: pulumi_wasm_rust::Output<Option<i32>>,
    pub memory_swap: pulumi_wasm_rust::Output<Option<i32>>,
    pub mounts: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerMount>>>,
    pub must_run: pulumi_wasm_rust::Output<Option<bool>>,
    pub name: pulumi_wasm_rust::Output<Option<String>>,
    pub network_mode: pulumi_wasm_rust::Output<Option<String>>,
    pub networks_advanced:
        pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerNetworksAdvanced>>>,
    pub pid_mode: pulumi_wasm_rust::Output<Option<String>>,
    pub ports: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerPort>>>,
    pub privileged: pulumi_wasm_rust::Output<Option<bool>>,
    pub publish_all_ports: pulumi_wasm_rust::Output<Option<bool>>,
    pub read_only: pulumi_wasm_rust::Output<Option<bool>>,
    pub remove_volumes: pulumi_wasm_rust::Output<Option<bool>>,
    pub restart: pulumi_wasm_rust::Output<Option<String>>,
    pub rm: pulumi_wasm_rust::Output<Option<bool>>,
    pub runtime: pulumi_wasm_rust::Output<Option<String>>,
    pub security_opts: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub shm_size: pulumi_wasm_rust::Output<Option<i32>>,
    pub start: pulumi_wasm_rust::Output<Option<bool>>,
    pub stdin_open: pulumi_wasm_rust::Output<Option<bool>>,
    pub stop_signal: pulumi_wasm_rust::Output<Option<String>>,
    pub stop_timeout: pulumi_wasm_rust::Output<Option<i32>>,
    pub storage_opts: pulumi_wasm_rust::Output<Option<std::collections::HashMap<String, String>>>,
    pub sysctls: pulumi_wasm_rust::Output<Option<std::collections::HashMap<String, String>>>,
    pub tmpfs: pulumi_wasm_rust::Output<Option<std::collections::HashMap<String, String>>>,
    pub tty: pulumi_wasm_rust::Output<Option<bool>>,
    pub ulimits: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerUlimit>>>,
    pub uploads: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerUpload>>>,
    pub user: pulumi_wasm_rust::Output<Option<String>>,
    pub userns_mode: pulumi_wasm_rust::Output<Option<String>>,
    pub volumes: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerVolume>>>,
    pub wait: pulumi_wasm_rust::Output<Option<bool>>,
    pub wait_timeout: pulumi_wasm_rust::Output<Option<i32>>,
    pub working_dir: pulumi_wasm_rust::Output<Option<String>>,
}

pub struct ContainerResult {
    pub attach: pulumi_wasm_rust::Output<Option<bool>>,
    pub bridge: pulumi_wasm_rust::Output<String>,
    pub capabilities: pulumi_wasm_rust::Output<Option<crate::types::ContainerCapabilities>>,
    pub cgroupns_mode: pulumi_wasm_rust::Output<Option<String>>,
    pub command: pulumi_wasm_rust::Output<Vec<String>>,
    pub container_logs: pulumi_wasm_rust::Output<Option<String>>,
    pub container_read_refresh_timeout_milliseconds: pulumi_wasm_rust::Output<Option<i32>>,
    pub cpu_set: pulumi_wasm_rust::Output<Option<String>>,
    pub cpu_shares: pulumi_wasm_rust::Output<Option<i32>>,
    pub destroy_grace_seconds: pulumi_wasm_rust::Output<Option<i32>>,
    pub devices: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerDevice>>>,
    pub dns: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub dns_opts: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub dns_searches: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub domainname: pulumi_wasm_rust::Output<Option<String>>,
    pub entrypoints: pulumi_wasm_rust::Output<Vec<String>>,
    pub envs: pulumi_wasm_rust::Output<Vec<String>>,
    pub exit_code: pulumi_wasm_rust::Output<i32>,
    pub gpus: pulumi_wasm_rust::Output<Option<String>>,
    pub group_adds: pulumi_wasm_rust::Output<Option<Vec<String>>>,
    pub healthcheck: pulumi_wasm_rust::Output<Option<crate::types::ContainerHealthcheck>>,
    pub hostname: pulumi_wasm_rust::Output<String>,
    pub hosts: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerHost>>>,
    pub image: pulumi_wasm_rust::Output<String>,
    pub init: pulumi_wasm_rust::Output<bool>,
    pub ipc_mode: pulumi_wasm_rust::Output<String>,
    pub labels: pulumi_wasm_rust::Output<Vec<crate::types::ContainerLabel>>,
    pub log_driver: pulumi_wasm_rust::Output<String>,
    pub log_opts: pulumi_wasm_rust::Output<Option<std::collections::HashMap<String, String>>>,
    pub logs: pulumi_wasm_rust::Output<Option<bool>>,
    pub max_retry_count: pulumi_wasm_rust::Output<Option<i32>>,
    pub memory: pulumi_wasm_rust::Output<Option<i32>>,
    pub memory_swap: pulumi_wasm_rust::Output<Option<i32>>,
    pub mounts: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerMount>>>,
    pub must_run: pulumi_wasm_rust::Output<Option<bool>>,
    pub name: pulumi_wasm_rust::Output<String>,
    pub network_datas: pulumi_wasm_rust::Output<Vec<crate::types::ContainerNetworkData>>,
    pub network_mode: pulumi_wasm_rust::Output<Option<String>>,
    pub networks_advanced:
        pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerNetworksAdvanced>>>,
    pub pid_mode: pulumi_wasm_rust::Output<Option<String>>,
    pub ports: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerPort>>>,
    pub privileged: pulumi_wasm_rust::Output<Option<bool>>,
    pub publish_all_ports: pulumi_wasm_rust::Output<Option<bool>>,
    pub read_only: pulumi_wasm_rust::Output<Option<bool>>,
    pub remove_volumes: pulumi_wasm_rust::Output<Option<bool>>,
    pub restart: pulumi_wasm_rust::Output<Option<String>>,
    pub rm: pulumi_wasm_rust::Output<Option<bool>>,
    pub runtime: pulumi_wasm_rust::Output<String>,
    pub security_opts: pulumi_wasm_rust::Output<Vec<String>>,
    pub shm_size: pulumi_wasm_rust::Output<i32>,
    pub start: pulumi_wasm_rust::Output<Option<bool>>,
    pub stdin_open: pulumi_wasm_rust::Output<Option<bool>>,
    pub stop_signal: pulumi_wasm_rust::Output<String>,
    pub stop_timeout: pulumi_wasm_rust::Output<i32>,
    pub storage_opts: pulumi_wasm_rust::Output<Option<std::collections::HashMap<String, String>>>,
    pub sysctls: pulumi_wasm_rust::Output<Option<std::collections::HashMap<String, String>>>,
    pub tmpfs: pulumi_wasm_rust::Output<Option<std::collections::HashMap<String, String>>>,
    pub tty: pulumi_wasm_rust::Output<Option<bool>>,
    pub ulimits: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerUlimit>>>,
    pub uploads: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerUpload>>>,
    pub user: pulumi_wasm_rust::Output<Option<String>>,
    pub userns_mode: pulumi_wasm_rust::Output<Option<String>>,
    pub volumes: pulumi_wasm_rust::Output<Option<Vec<crate::types::ContainerVolume>>>,
    pub wait: pulumi_wasm_rust::Output<Option<bool>>,
    pub wait_timeout: pulumi_wasm_rust::Output<Option<i32>>,
    pub working_dir: pulumi_wasm_rust::Output<Option<String>>,
}

pub fn create(name: &str, args: ContainerArgs) -> ContainerResult {
    let result = crate::bindings::pulumi::docker::container::invoke(
        name,
        &crate::bindings::pulumi::docker::container::Args {
            attach: args.attach.get_inner(),
            capabilities: args.capabilities.get_inner(),
            cgroupns_mode: args.cgroupns_mode.get_inner(),
            command: args.command.get_inner(),
            container_read_refresh_timeout_milliseconds: args
                .container_read_refresh_timeout_milliseconds
                .get_inner(),
            cpu_set: args.cpu_set.get_inner(),
            cpu_shares: args.cpu_shares.get_inner(),
            destroy_grace_seconds: args.destroy_grace_seconds.get_inner(),
            devices: args.devices.get_inner(),
            dns: args.dns.get_inner(),
            dns_opts: args.dns_opts.get_inner(),
            dns_searches: args.dns_searches.get_inner(),
            domainname: args.domainname.get_inner(),
            entrypoints: args.entrypoints.get_inner(),
            envs: args.envs.get_inner(),
            gpus: args.gpus.get_inner(),
            group_adds: args.group_adds.get_inner(),
            healthcheck: args.healthcheck.get_inner(),
            hostname: args.hostname.get_inner(),
            hosts: args.hosts.get_inner(),
            image: args.image.get_inner(),
            init: args.init.get_inner(),
            ipc_mode: args.ipc_mode.get_inner(),
            labels: args.labels.get_inner(),
            log_driver: args.log_driver.get_inner(),
            log_opts: args.log_opts.get_inner(),
            logs: args.logs.get_inner(),
            max_retry_count: args.max_retry_count.get_inner(),
            memory: args.memory.get_inner(),
            memory_swap: args.memory_swap.get_inner(),
            mounts: args.mounts.get_inner(),
            must_run: args.must_run.get_inner(),
            name: args.name.get_inner(),
            network_mode: args.network_mode.get_inner(),
            networks_advanced: args.networks_advanced.get_inner(),
            pid_mode: args.pid_mode.get_inner(),
            ports: args.ports.get_inner(),
            privileged: args.privileged.get_inner(),
            publish_all_ports: args.publish_all_ports.get_inner(),
            read_only: args.read_only.get_inner(),
            remove_volumes: args.remove_volumes.get_inner(),
            restart: args.restart.get_inner(),
            rm: args.rm.get_inner(),
            runtime: args.runtime.get_inner(),
            security_opts: args.security_opts.get_inner(),
            shm_size: args.shm_size.get_inner(),
            start: args.start.get_inner(),
            stdin_open: args.stdin_open.get_inner(),
            stop_signal: args.stop_signal.get_inner(),
            stop_timeout: args.stop_timeout.get_inner(),
            storage_opts: args.storage_opts.get_inner(),
            sysctls: args.sysctls.get_inner(),
            tmpfs: args.tmpfs.get_inner(),
            tty: args.tty.get_inner(),
            ulimits: args.ulimits.get_inner(),
            uploads: args.uploads.get_inner(),
            user: args.user.get_inner(),
            userns_mode: args.userns_mode.get_inner(),
            volumes: args.volumes.get_inner(),
            wait: args.wait.get_inner(),
            wait_timeout: args.wait_timeout.get_inner(),
            working_dir: args.working_dir.get_inner(),
        },
    );

    ContainerResult {
        attach: crate::into_domain(result.attach),
        bridge: crate::into_domain(result.bridge),
        capabilities: crate::into_domain(result.capabilities),
        cgroupns_mode: crate::into_domain(result.cgroupns_mode),
        command: crate::into_domain(result.command),
        container_logs: crate::into_domain(result.container_logs),
        container_read_refresh_timeout_milliseconds: crate::into_domain(
            result.container_read_refresh_timeout_milliseconds,
        ),
        cpu_set: crate::into_domain(result.cpu_set),
        cpu_shares: crate::into_domain(result.cpu_shares),
        destroy_grace_seconds: crate::into_domain(result.destroy_grace_seconds),
        devices: crate::into_domain(result.devices),
        dns: crate::into_domain(result.dns),
        dns_opts: crate::into_domain(result.dns_opts),
        dns_searches: crate::into_domain(result.dns_searches),
        domainname: crate::into_domain(result.domainname),
        entrypoints: crate::into_domain(result.entrypoints),
        envs: crate::into_domain(result.envs),
        exit_code: crate::into_domain(result.exit_code),
        gpus: crate::into_domain(result.gpus),
        group_adds: crate::into_domain(result.group_adds),
        healthcheck: crate::into_domain(result.healthcheck),
        hostname: crate::into_domain(result.hostname),
        hosts: crate::into_domain(result.hosts),
        image: crate::into_domain(result.image),
        init: crate::into_domain(result.init),
        ipc_mode: crate::into_domain(result.ipc_mode),
        labels: crate::into_domain(result.labels),
        log_driver: crate::into_domain(result.log_driver),
        log_opts: crate::into_domain(result.log_opts),
        logs: crate::into_domain(result.logs),
        max_retry_count: crate::into_domain(result.max_retry_count),
        memory: crate::into_domain(result.memory),
        memory_swap: crate::into_domain(result.memory_swap),
        mounts: crate::into_domain(result.mounts),
        must_run: crate::into_domain(result.must_run),
        name: crate::into_domain(result.name),
        network_datas: crate::into_domain(result.network_datas),
        network_mode: crate::into_domain(result.network_mode),
        networks_advanced: crate::into_domain(result.networks_advanced),
        pid_mode: crate::into_domain(result.pid_mode),
        ports: crate::into_domain(result.ports),
        privileged: crate::into_domain(result.privileged),
        publish_all_ports: crate::into_domain(result.publish_all_ports),
        read_only: crate::into_domain(result.read_only),
        remove_volumes: crate::into_domain(result.remove_volumes),
        restart: crate::into_domain(result.restart),
        rm: crate::into_domain(result.rm),
        runtime: crate::into_domain(result.runtime),
        security_opts: crate::into_domain(result.security_opts),
        shm_size: crate::into_domain(result.shm_size),
        start: crate::into_domain(result.start),
        stdin_open: crate::into_domain(result.stdin_open),
        stop_signal: crate::into_domain(result.stop_signal),
        stop_timeout: crate::into_domain(result.stop_timeout),
        storage_opts: crate::into_domain(result.storage_opts),
        sysctls: crate::into_domain(result.sysctls),
        tmpfs: crate::into_domain(result.tmpfs),
        tty: crate::into_domain(result.tty),
        ulimits: crate::into_domain(result.ulimits),
        uploads: crate::into_domain(result.uploads),
        user: crate::into_domain(result.user),
        userns_mode: crate::into_domain(result.userns_mode),
        volumes: crate::into_domain(result.volumes),
        wait: crate::into_domain(result.wait),
        wait_timeout: crate::into_domain(result.wait_timeout),
        working_dir: crate::into_domain(result.working_dir),
    }
}
