//! Cloudflare Access can replace traditional SSH key models with
//! short-lived certificates issued to your users based on the token
//! generated by their Access login.
//! 
//! > It's required that an `account_id` or `zone_id` is provided and in
//!    most cases using either is fine. However, if you're using a scoped
//!    access token, you must provide the argument that matches the token's
//!    scope. For example, an access token that is scoped to the "example.com"
//!    zone needs to use the `zone_id` argument.
//! 
//! ## Example Usage
//! 
//! <!--Start PulumiCodeChooser -->
//! ### Typescript
//! ```typescript
//! import * as pulumi from "@pulumi/pulumi";
//! import * as cloudflare from "@pulumi/cloudflare";
//! 
//! // account level
//! const example = new cloudflare.AccessCaCertificate("example", {
//!     accountId: "f037e56e89293a057740de681ac9abbe",
//!     applicationId: "6cd6cea3-3ef2-4542-9aea-85a0bbcd5414",
//! });
//! // zone level
//! const anotherExample = new cloudflare.AccessCaCertificate("another_example", {
//!     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
//!     applicationId: "fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2",
//! });
//! ```
//! ### Python
//! ```python
//! import pulumi
//! import pulumi_cloudflare as cloudflare
//! 
//! # account level
//! example = cloudflare.AccessCaCertificate("example",
//!     account_id="f037e56e89293a057740de681ac9abbe",
//!     application_id="6cd6cea3-3ef2-4542-9aea-85a0bbcd5414")
//! # zone level
//! another_example = cloudflare.AccessCaCertificate("another_example",
//!     zone_id="0da42c8d2132a9ddaf714f9e7c920711",
//!     application_id="fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2")
//! ```
//! ### C#
//! ```csharp
//! using System.Collections.Generic;
//! using System.Linq;
//! using Pulumi;
//! using Cloudflare = Pulumi.Cloudflare;
//! 
//! return await Deployment.RunAsync(() => 
//! {
//!     // account level
//!     var example = new Cloudflare.AccessCaCertificate("example", new()
//!     {
//!         AccountId = "f037e56e89293a057740de681ac9abbe",
//!         ApplicationId = "6cd6cea3-3ef2-4542-9aea-85a0bbcd5414",
//!     });
//! 
//!     // zone level
//!     var anotherExample = new Cloudflare.AccessCaCertificate("another_example", new()
//!     {
//!         ZoneId = "0da42c8d2132a9ddaf714f9e7c920711",
//!         ApplicationId = "fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2",
//!     });
//! 
//! });
//! ```
//! ### Go
//! ```go
//! package main
//! 
//! import (
//! 	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//! 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//! )
//! 
//! func main() {
//! 	pulumi.Run(func(ctx *pulumi.Context) error {
//! 		// account level
//! 		_, err := cloudflare.NewAccessCaCertificate(ctx, "example", &cloudflare.AccessCaCertificateArgs{
//! 			AccountId:     pulumi.String("f037e56e89293a057740de681ac9abbe"),
//! 			ApplicationId: pulumi.String("6cd6cea3-3ef2-4542-9aea-85a0bbcd5414"),
//! 		})
//! 		if err != nil {
//! 			return err
//! 		}
//! 		// zone level
//! 		_, err = cloudflare.NewAccessCaCertificate(ctx, "another_example", &cloudflare.AccessCaCertificateArgs{
//! 			ZoneId:        pulumi.String("0da42c8d2132a9ddaf714f9e7c920711"),
//! 			ApplicationId: pulumi.String("fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2"),
//! 		})
//! 		if err != nil {
//! 			return err
//! 		}
//! 		return nil
//! 	})
//! }
//! ```
//! ### Java
//! ```java
//! package generated_program;
//! 
//! import com.pulumi.Context;
//! import com.pulumi.Pulumi;
//! import com.pulumi.core.Output;
//! import com.pulumi.cloudflare.AccessCaCertificate;
//! import com.pulumi.cloudflare.AccessCaCertificateArgs;
//! import java.util.List;
//! import java.util.ArrayList;
//! import java.util.Map;
//! import java.io.File;
//! import java.nio.file.Files;
//! import java.nio.file.Paths;
//! 
//! public class App {
//!     public static void main(String[] args) {
//!         Pulumi.run(App::stack);
//!     }
//! 
//!     public static void stack(Context ctx) {
//!         // account level
//!         var example = new AccessCaCertificate("example", AccessCaCertificateArgs.builder()
//!             .accountId("f037e56e89293a057740de681ac9abbe")
//!             .applicationId("6cd6cea3-3ef2-4542-9aea-85a0bbcd5414")
//!             .build());
//! 
//!         // zone level
//!         var anotherExample = new AccessCaCertificate("anotherExample", AccessCaCertificateArgs.builder()
//!             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
//!             .applicationId("fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2")
//!             .build());
//! 
//!     }
//! }
//! ```
//! ### YAML
//! ```yaml
//! resources:
//!   # account level
//!   example:
//!     type: cloudflare:AccessCaCertificate
//!     properties:
//!       accountId: f037e56e89293a057740de681ac9abbe
//!       applicationId: 6cd6cea3-3ef2-4542-9aea-85a0bbcd5414
//!   # zone level
//!   anotherExample:
//!     type: cloudflare:AccessCaCertificate
//!     name: another_example
//!     properties:
//!       zoneId: 0da42c8d2132a9ddaf714f9e7c920711
//!       applicationId: fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2
//! ```
//! <!--End PulumiCodeChooser -->
//! 
//! ## Import
//! 
//! Account level CA certificate import.
//! 
//! ```sh
//! $ pulumi import cloudflare:index/accessCaCertificate:AccessCaCertificate example account/<account_id>/<application_id>
//! ```
//! 
//! Zone level CA certificate import.
//! 
//! ```sh
//! $ pulumi import cloudflare:index/accessCaCertificate:AccessCaCertificate example account/<zone_id>/<application_id>
//! ```
//! 

#[derive(bon::Builder)]
#[builder(finish_fn = build_struct)]
pub struct AccessCaCertificateArgs {
    /// The account identifier to target for the resource. Conflicts with `zone_id`.
    #[builder(into, default = ::pulumi_wasm_rust::Output::empty())]
    pub account_id: pulumi_wasm_rust::Output<Option<String>>,
    /// The Access Application ID to associate with the CA certificate.
    #[builder(into)]
    pub application_id: pulumi_wasm_rust::Output<String>,
    /// The zone identifier to target for the resource. Conflicts with `account_id`.
    #[builder(into, default = ::pulumi_wasm_rust::Output::empty())]
    pub zone_id: pulumi_wasm_rust::Output<Option<String>>,
}

pub struct AccessCaCertificateResult {
    /// The account identifier to target for the resource. Conflicts with `zone_id`.
    pub account_id: pulumi_wasm_rust::Output<String>,
    /// The Access Application ID to associate with the CA certificate.
    pub application_id: pulumi_wasm_rust::Output<String>,
    /// Application Audience (AUD) Tag of the CA certificate.
    pub aud: pulumi_wasm_rust::Output<String>,
    /// Cryptographic public key of the generated CA certificate.
    pub public_key: pulumi_wasm_rust::Output<String>,
    /// The zone identifier to target for the resource. Conflicts with `account_id`.
    pub zone_id: pulumi_wasm_rust::Output<String>,
}

///
/// Registers a new resource with the given unique name and arguments
///
pub fn create(name: &str, args: AccessCaCertificateArgs) -> AccessCaCertificateResult {

    let result = crate::bindings::pulumi::cloudflare::access_ca_certificate::invoke(name, &crate::bindings::pulumi::cloudflare::access_ca_certificate::Args {
        account_id: &args.account_id.get_inner(),
        application_id: &args.application_id.get_inner(),
        zone_id: &args.zone_id.get_inner(),
    });

    AccessCaCertificateResult {
        account_id: crate::into_domain(result.account_id),
        application_id: crate::into_domain(result.application_id),
        aud: crate::into_domain(result.aud),
        public_key: crate::into_domain(result.public_key),
        zone_id: crate::into_domain(result.zone_id),
    }
}
