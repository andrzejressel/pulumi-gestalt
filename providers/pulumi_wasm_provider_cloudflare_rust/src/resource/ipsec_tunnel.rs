pub struct IpsecTunnelArgs {
    pub account_id: pulumi_wasm_rust::Output<Option<String>>,
    pub allow_null_cipher: pulumi_wasm_rust::Output<Option<bool>>,
    pub cloudflare_endpoint: pulumi_wasm_rust::Output<String>,
    pub customer_endpoint: pulumi_wasm_rust::Output<String>,
    pub description: pulumi_wasm_rust::Output<Option<String>>,
    pub fqdn_id: pulumi_wasm_rust::Output<Option<String>>,
    pub health_check_direction: pulumi_wasm_rust::Output<Option<String>>,
    pub health_check_enabled: pulumi_wasm_rust::Output<Option<bool>>,
    pub health_check_rate: pulumi_wasm_rust::Output<Option<String>>,
    pub health_check_target: pulumi_wasm_rust::Output<Option<String>>,
    pub health_check_type: pulumi_wasm_rust::Output<Option<String>>,
    pub hex_id: pulumi_wasm_rust::Output<Option<String>>,
    pub interface_address: pulumi_wasm_rust::Output<String>,
    pub name: pulumi_wasm_rust::Output<String>,
    pub psk: pulumi_wasm_rust::Output<Option<String>>,
    pub remote_id: pulumi_wasm_rust::Output<Option<String>>,
    pub user_id: pulumi_wasm_rust::Output<Option<String>>,
}

pub struct IpsecTunnelResult {
    pub account_id: pulumi_wasm_rust::Output<Option<String>>,
    pub allow_null_cipher: pulumi_wasm_rust::Output<Option<bool>>,
    pub cloudflare_endpoint: pulumi_wasm_rust::Output<String>,
    pub customer_endpoint: pulumi_wasm_rust::Output<String>,
    pub description: pulumi_wasm_rust::Output<Option<String>>,
    pub fqdn_id: pulumi_wasm_rust::Output<String>,
    pub health_check_direction: pulumi_wasm_rust::Output<String>,
    pub health_check_enabled: pulumi_wasm_rust::Output<bool>,
    pub health_check_rate: pulumi_wasm_rust::Output<String>,
    pub health_check_target: pulumi_wasm_rust::Output<String>,
    pub health_check_type: pulumi_wasm_rust::Output<String>,
    pub hex_id: pulumi_wasm_rust::Output<String>,
    pub interface_address: pulumi_wasm_rust::Output<String>,
    pub name: pulumi_wasm_rust::Output<String>,
    pub psk: pulumi_wasm_rust::Output<String>,
    pub remote_id: pulumi_wasm_rust::Output<String>,
    pub user_id: pulumi_wasm_rust::Output<String>,
}

pub fn create(name: &str, args: IpsecTunnelArgs) -> IpsecTunnelResult {
    let result = crate::bindings::pulumi::cloudflare::ipsec_tunnel::invoke(
        name,
        &crate::bindings::pulumi::cloudflare::ipsec_tunnel::Args {
            account_id: args.account_id.get_inner(),
            allow_null_cipher: args.allow_null_cipher.get_inner(),
            cloudflare_endpoint: args.cloudflare_endpoint.get_inner(),
            customer_endpoint: args.customer_endpoint.get_inner(),
            description: args.description.get_inner(),
            fqdn_id: args.fqdn_id.get_inner(),
            health_check_direction: args.health_check_direction.get_inner(),
            health_check_enabled: args.health_check_enabled.get_inner(),
            health_check_rate: args.health_check_rate.get_inner(),
            health_check_target: args.health_check_target.get_inner(),
            health_check_type: args.health_check_type.get_inner(),
            hex_id: args.hex_id.get_inner(),
            interface_address: args.interface_address.get_inner(),
            name: args.name.get_inner(),
            psk: args.psk.get_inner(),
            remote_id: args.remote_id.get_inner(),
            user_id: args.user_id.get_inner(),
        },
    );

    IpsecTunnelResult {
        account_id: crate::into_domain(result.account_id),
        allow_null_cipher: crate::into_domain(result.allow_null_cipher),
        cloudflare_endpoint: crate::into_domain(result.cloudflare_endpoint),
        customer_endpoint: crate::into_domain(result.customer_endpoint),
        description: crate::into_domain(result.description),
        fqdn_id: crate::into_domain(result.fqdn_id),
        health_check_direction: crate::into_domain(result.health_check_direction),
        health_check_enabled: crate::into_domain(result.health_check_enabled),
        health_check_rate: crate::into_domain(result.health_check_rate),
        health_check_target: crate::into_domain(result.health_check_target),
        health_check_type: crate::into_domain(result.health_check_type),
        hex_id: crate::into_domain(result.hex_id),
        interface_address: crate::into_domain(result.interface_address),
        name: crate::into_domain(result.name),
        psk: crate::into_domain(result.psk),
        remote_id: crate::into_domain(result.remote_id),
        user_id: crate::into_domain(result.user_id),
    }
}
