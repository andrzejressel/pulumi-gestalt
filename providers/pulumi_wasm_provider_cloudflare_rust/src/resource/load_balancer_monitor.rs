pub struct LoadBalancerMonitorArgs {
    pub account_id: pulumi_wasm_rust::Output<String>,
    pub allow_insecure: pulumi_wasm_rust::Output<Option<bool>>,
    pub consecutive_down: pulumi_wasm_rust::Output<Option<i32>>,
    pub consecutive_up: pulumi_wasm_rust::Output<Option<i32>>,
    pub description: pulumi_wasm_rust::Output<Option<String>>,
    pub expected_body: pulumi_wasm_rust::Output<Option<String>>,
    pub expected_codes: pulumi_wasm_rust::Output<Option<String>>,
    pub follow_redirects: pulumi_wasm_rust::Output<Option<bool>>,
    pub headers: pulumi_wasm_rust::Output<Option<Vec<crate::types::LoadBalancerMonitorHeader>>>,
    pub interval: pulumi_wasm_rust::Output<Option<i32>>,
    pub method: pulumi_wasm_rust::Output<Option<String>>,
    pub path: pulumi_wasm_rust::Output<Option<String>>,
    pub port: pulumi_wasm_rust::Output<Option<i32>>,
    pub probe_zone: pulumi_wasm_rust::Output<Option<String>>,
    pub retries: pulumi_wasm_rust::Output<Option<i32>>,
    pub timeout: pulumi_wasm_rust::Output<Option<i32>>,
    pub type_: pulumi_wasm_rust::Output<Option<String>>,
}

pub struct LoadBalancerMonitorResult {
    pub account_id: pulumi_wasm_rust::Output<String>,
    pub allow_insecure: pulumi_wasm_rust::Output<Option<bool>>,
    pub consecutive_down: pulumi_wasm_rust::Output<Option<i32>>,
    pub consecutive_up: pulumi_wasm_rust::Output<Option<i32>>,
    pub created_on: pulumi_wasm_rust::Output<String>,
    pub description: pulumi_wasm_rust::Output<Option<String>>,
    pub expected_body: pulumi_wasm_rust::Output<Option<String>>,
    pub expected_codes: pulumi_wasm_rust::Output<Option<String>>,
    pub follow_redirects: pulumi_wasm_rust::Output<Option<bool>>,
    pub headers: pulumi_wasm_rust::Output<Option<Vec<crate::types::LoadBalancerMonitorHeader>>>,
    pub interval: pulumi_wasm_rust::Output<Option<i32>>,
    pub method: pulumi_wasm_rust::Output<String>,
    pub modified_on: pulumi_wasm_rust::Output<String>,
    pub path: pulumi_wasm_rust::Output<String>,
    pub port: pulumi_wasm_rust::Output<Option<i32>>,
    pub probe_zone: pulumi_wasm_rust::Output<Option<String>>,
    pub retries: pulumi_wasm_rust::Output<Option<i32>>,
    pub timeout: pulumi_wasm_rust::Output<Option<i32>>,
    pub type_: pulumi_wasm_rust::Output<Option<String>>,
}

pub fn create(name: &str, args: LoadBalancerMonitorArgs) -> LoadBalancerMonitorResult {
    let result = crate::bindings::pulumi::cloudflare::load_balancer_monitor::invoke(
        name,
        &crate::bindings::pulumi::cloudflare::load_balancer_monitor::Args {
            account_id: args.account_id.get_inner(),
            allow_insecure: args.allow_insecure.get_inner(),
            consecutive_down: args.consecutive_down.get_inner(),
            consecutive_up: args.consecutive_up.get_inner(),
            description: args.description.get_inner(),
            expected_body: args.expected_body.get_inner(),
            expected_codes: args.expected_codes.get_inner(),
            follow_redirects: args.follow_redirects.get_inner(),
            headers: args.headers.get_inner(),
            interval: args.interval.get_inner(),
            method: args.method.get_inner(),
            path: args.path.get_inner(),
            port: args.port.get_inner(),
            probe_zone: args.probe_zone.get_inner(),
            retries: args.retries.get_inner(),
            timeout: args.timeout.get_inner(),
            type_: args.type_.get_inner(),
        },
    );

    LoadBalancerMonitorResult {
        account_id: crate::into_domain(result.account_id),
        allow_insecure: crate::into_domain(result.allow_insecure),
        consecutive_down: crate::into_domain(result.consecutive_down),
        consecutive_up: crate::into_domain(result.consecutive_up),
        created_on: crate::into_domain(result.created_on),
        description: crate::into_domain(result.description),
        expected_body: crate::into_domain(result.expected_body),
        expected_codes: crate::into_domain(result.expected_codes),
        follow_redirects: crate::into_domain(result.follow_redirects),
        headers: crate::into_domain(result.headers),
        interval: crate::into_domain(result.interval),
        method: crate::into_domain(result.method),
        modified_on: crate::into_domain(result.modified_on),
        path: crate::into_domain(result.path),
        port: crate::into_domain(result.port),
        probe_zone: crate::into_domain(result.probe_zone),
        retries: crate::into_domain(result.retries),
        timeout: crate::into_domain(result.timeout),
        type_: crate::into_domain(result.type_),
    }
}
