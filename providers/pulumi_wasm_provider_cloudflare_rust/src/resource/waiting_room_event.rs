pub struct WaitingRoomEventArgs {
    pub custom_page_html: pulumi_wasm_rust::Output<Option<String>>,
    pub description: pulumi_wasm_rust::Output<Option<String>>,
    pub disable_session_renewal: pulumi_wasm_rust::Output<Option<bool>>,
    pub event_end_time: pulumi_wasm_rust::Output<String>,
    pub event_start_time: pulumi_wasm_rust::Output<String>,
    pub name: pulumi_wasm_rust::Output<String>,
    pub new_users_per_minute: pulumi_wasm_rust::Output<Option<i32>>,
    pub prequeue_start_time: pulumi_wasm_rust::Output<Option<String>>,
    pub queueing_method: pulumi_wasm_rust::Output<Option<String>>,
    pub session_duration: pulumi_wasm_rust::Output<Option<i32>>,
    pub shuffle_at_event_start: pulumi_wasm_rust::Output<Option<bool>>,
    pub suspended: pulumi_wasm_rust::Output<Option<bool>>,
    pub total_active_users: pulumi_wasm_rust::Output<Option<i32>>,
    pub waiting_room_id: pulumi_wasm_rust::Output<String>,
    pub zone_id: pulumi_wasm_rust::Output<String>,
}

pub struct WaitingRoomEventResult {
    pub created_on: pulumi_wasm_rust::Output<String>,
    pub custom_page_html: pulumi_wasm_rust::Output<Option<String>>,
    pub description: pulumi_wasm_rust::Output<Option<String>>,
    pub disable_session_renewal: pulumi_wasm_rust::Output<Option<bool>>,
    pub event_end_time: pulumi_wasm_rust::Output<String>,
    pub event_start_time: pulumi_wasm_rust::Output<String>,
    pub modified_on: pulumi_wasm_rust::Output<String>,
    pub name: pulumi_wasm_rust::Output<String>,
    pub new_users_per_minute: pulumi_wasm_rust::Output<Option<i32>>,
    pub prequeue_start_time: pulumi_wasm_rust::Output<Option<String>>,
    pub queueing_method: pulumi_wasm_rust::Output<Option<String>>,
    pub session_duration: pulumi_wasm_rust::Output<Option<i32>>,
    pub shuffle_at_event_start: pulumi_wasm_rust::Output<Option<bool>>,
    pub suspended: pulumi_wasm_rust::Output<Option<bool>>,
    pub total_active_users: pulumi_wasm_rust::Output<Option<i32>>,
    pub waiting_room_id: pulumi_wasm_rust::Output<String>,
    pub zone_id: pulumi_wasm_rust::Output<String>,
}

pub fn create(name: &str, args: WaitingRoomEventArgs) -> WaitingRoomEventResult {
    let result = crate::bindings::pulumi::cloudflare::waiting_room_event::invoke(
        name,
        &crate::bindings::pulumi::cloudflare::waiting_room_event::Args {
            custom_page_html: args.custom_page_html.get_inner(),
            description: args.description.get_inner(),
            disable_session_renewal: args.disable_session_renewal.get_inner(),
            event_end_time: args.event_end_time.get_inner(),
            event_start_time: args.event_start_time.get_inner(),
            name: args.name.get_inner(),
            new_users_per_minute: args.new_users_per_minute.get_inner(),
            prequeue_start_time: args.prequeue_start_time.get_inner(),
            queueing_method: args.queueing_method.get_inner(),
            session_duration: args.session_duration.get_inner(),
            shuffle_at_event_start: args.shuffle_at_event_start.get_inner(),
            suspended: args.suspended.get_inner(),
            total_active_users: args.total_active_users.get_inner(),
            waiting_room_id: args.waiting_room_id.get_inner(),
            zone_id: args.zone_id.get_inner(),
        },
    );

    WaitingRoomEventResult {
        created_on: crate::into_domain(result.created_on),
        custom_page_html: crate::into_domain(result.custom_page_html),
        description: crate::into_domain(result.description),
        disable_session_renewal: crate::into_domain(result.disable_session_renewal),
        event_end_time: crate::into_domain(result.event_end_time),
        event_start_time: crate::into_domain(result.event_start_time),
        modified_on: crate::into_domain(result.modified_on),
        name: crate::into_domain(result.name),
        new_users_per_minute: crate::into_domain(result.new_users_per_minute),
        prequeue_start_time: crate::into_domain(result.prequeue_start_time),
        queueing_method: crate::into_domain(result.queueing_method),
        session_duration: crate::into_domain(result.session_duration),
        shuffle_at_event_start: crate::into_domain(result.shuffle_at_event_start),
        suspended: crate::into_domain(result.suspended),
        total_active_users: crate::into_domain(result.total_active_users),
        waiting_room_id: crate::into_domain(result.waiting_room_id),
        zone_id: crate::into_domain(result.zone_id),
    }
}
