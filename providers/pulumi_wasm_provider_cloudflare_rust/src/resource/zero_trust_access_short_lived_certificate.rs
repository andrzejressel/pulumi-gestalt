//! Cloudflare Access can replace traditional SSH key models with
//! short-lived certificates issued to your users based on the token
//! generated by their Access login.
//! 
//! > It's required that an `account_id` or `zone_id` is provided and in
//!    most cases using either is fine. However, if you're using a scoped
//!    access token, you must provide the argument that matches the token's
//!    scope. For example, an access token that is scoped to the "example.com"
//!    zone needs to use the `zone_id` argument.
//! 
//! ## Example Usage
//! 
//! ```ignore
//! use pulumi_wasm_rust::Output;
//! use pulumi_wasm_rust::{add_export, pulumi_main};
//! #[pulumi_main]
//! fn test_main() -> Result<(), Error> {
//!     let anotherExample = zero_trust_access_short_lived_certificate::create(
//!         "anotherExample",
//!         ZeroTrustAccessShortLivedCertificateArgs::builder()
//!             .application_id("fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2")
//!             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
//!             .build_struct(),
//!     );
//!     let example = zero_trust_access_short_lived_certificate::create(
//!         "example",
//!         ZeroTrustAccessShortLivedCertificateArgs::builder()
//!             .account_id("f037e56e89293a057740de681ac9abbe")
//!             .application_id("6cd6cea3-3ef2-4542-9aea-85a0bbcd5414")
//!             .build_struct(),
//!     );
//! }
//! ```
//! 
//! ## Import
//! 
//! Account level CA certificate import.
//! 
//! ```sh
//! $ pulumi import cloudflare:index/zeroTrustAccessShortLivedCertificate:ZeroTrustAccessShortLivedCertificate example account/<account_id>/<application_id>
//! ```
//! 
//! Zone level CA certificate import.
//! 
//! ```sh
//! $ pulumi import cloudflare:index/zeroTrustAccessShortLivedCertificate:ZeroTrustAccessShortLivedCertificate example account/<zone_id>/<application_id>
//! ```
//! 

#[derive(bon::Builder, Clone)]
#[builder(finish_fn = build_struct)]
pub struct ZeroTrustAccessShortLivedCertificateArgs {
    /// The account identifier to target for the resource. Conflicts with `zone_id`.
    #[builder(into, default = ::pulumi_wasm_rust::Output::empty())]
    pub account_id: pulumi_wasm_rust::Output<Option<String>>,
    /// The Access Application ID to associate with the CA certificate.
    #[builder(into)]
    pub application_id: pulumi_wasm_rust::Output<String>,
    /// The zone identifier to target for the resource. Conflicts with `account_id`.
    #[builder(into, default = ::pulumi_wasm_rust::Output::empty())]
    pub zone_id: pulumi_wasm_rust::Output<Option<String>>,
}

pub struct ZeroTrustAccessShortLivedCertificateResult {
    /// The account identifier to target for the resource. Conflicts with `zone_id`.
    pub account_id: pulumi_wasm_rust::Output<String>,
    /// The Access Application ID to associate with the CA certificate.
    pub application_id: pulumi_wasm_rust::Output<String>,
    /// Application Audience (AUD) Tag of the CA certificate.
    pub aud: pulumi_wasm_rust::Output<String>,
    /// Cryptographic public key of the generated CA certificate.
    pub public_key: pulumi_wasm_rust::Output<String>,
    /// The zone identifier to target for the resource. Conflicts with `account_id`.
    pub zone_id: pulumi_wasm_rust::Output<String>,
}

///
/// Registers a new resource with the given unique name and arguments
///
pub fn create(name: &str, args: ZeroTrustAccessShortLivedCertificateArgs) -> ZeroTrustAccessShortLivedCertificateResult {

    let result = crate::bindings::pulumi::cloudflare::zero_trust_access_short_lived_certificate::invoke(name, &crate::bindings::pulumi::cloudflare::zero_trust_access_short_lived_certificate::Args {
        account_id: &args.account_id.get_inner(),
        application_id: &args.application_id.get_inner(),
        zone_id: &args.zone_id.get_inner(),
    });

    ZeroTrustAccessShortLivedCertificateResult {
        account_id: crate::into_domain(result.account_id),
        application_id: crate::into_domain(result.application_id),
        aud: crate::into_domain(result.aud),
        public_key: crate::into_domain(result.public_key),
        zone_id: crate::into_domain(result.zone_id),
    }
}
