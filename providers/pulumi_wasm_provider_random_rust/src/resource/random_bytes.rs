//! The resource `random.RandomBytes` generates random bytes that are intended to be used as a secret, or key. Use this in preference to `random.RandomId` when the output is considered sensitive, and should not be displayed in the CLI.
//! 
//! ## Example Usage
//! 
//! ```yaml
//! resources:
//!   jwtSecretRandomBytes:
//!     type: random:RandomBytes
//!     properties:
//!       length: 64
//!   jwtSecretSecret:
//!     type: azure:keyvault:Secret
//!     properties:
//!       keyVaultId: some-azure-key-vault-id
//!       value: ${jwtSecretRandomBytes.base64}
//! ```
//! 
//! ## Import
//! 
//! Random bytes can be imported by specifying the value as base64 string.
//! 
//! ```sh
//!  $ pulumi import random:index/randomBytes:RandomBytes basic "8/fu3q+2DcgSJ19i0jZ5Cw=="
//! ```
//! 
//!  

#[derive(bon::Builder)]
#[builder(finish_fn = build_struct)]
pub struct RandomBytesArgs {
    /// Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
    #[builder(into, default = ::pulumi_wasm_rust::Output::empty())]
    pub keepers: pulumi_wasm_rust::Output<Option<std::collections::HashMap<String, String>>>,
    /// The number of bytes requested. The minimum value for length is 1.
    #[builder(into)]
    pub length: pulumi_wasm_rust::Output<i32>,
}

pub struct RandomBytesResult {
    /// The generated bytes presented in base64 string format.
    pub base64: pulumi_wasm_rust::Output<String>,
    /// The generated bytes presented in hex string format.
    pub hex: pulumi_wasm_rust::Output<String>,
    /// Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
    pub keepers: pulumi_wasm_rust::Output<Option<std::collections::HashMap<String, String>>>,
    /// The number of bytes requested. The minimum value for length is 1.
    pub length: pulumi_wasm_rust::Output<i32>,
}

///
/// Registers a new resource with the given unique name and arguments
///
pub fn create(name: &str, args: RandomBytesArgs) -> RandomBytesResult {

    let result = crate::bindings::pulumi::random::random_bytes::invoke(name, &crate::bindings::pulumi::random::random_bytes::Args {
        keepers: &args.keepers.get_inner(),
        length: &args.length.get_inner(),
    });

    RandomBytesResult {
        base64: crate::into_domain(result.base64),
        hex: crate::into_domain(result.hex),
        keepers: crate::into_domain(result.keepers),
        length: crate::into_domain(result.length),
    }
}
