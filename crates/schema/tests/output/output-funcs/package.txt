Package {
    name: "mypkg",
    display_name: None,
    plugin_download_url: None,
    version: "0.0.1",
    resources: {},
    functions: {
        ElementId {
            namespace: [],
            name: "funcWithAllOptionalInputs",
            raw: "mypkg::funcWithAllOptionalInputs",
        }: Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithAllOptionalInputs",
                raw: "mypkg::funcWithAllOptionalInputs",
            },
            description: Some(
                "Check codegen of functions with all optional inputs.",
            ),
            input_properties: [
                InputProperty {
                    name: "a",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "Property A",
                    ),
                },
                InputProperty {
                    name: "b",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "Property B",
                    ),
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "r",
                    type: String,
                    description: None,
                },
            ],
        },
        ElementId {
            namespace: [],
            name: "funcWithConstInput",
            raw: "mypkg::funcWithConstInput",
        }: Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithConstInput",
                raw: "mypkg::funcWithConstInput",
            },
            description: Some(
                "Codegen demo with const inputs",
            ),
            input_properties: [
                InputProperty {
                    name: "plainInput",
                    type: Option(
                        ConstString(
                            "fixed",
                        ),
                    ),
                    description: None,
                },
            ],
            output_properties: [],
        },
        ElementId {
            namespace: [],
            name: "funcWithDefaultValue",
            raw: "mypkg::funcWithDefaultValue",
        }: Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithDefaultValue",
                raw: "mypkg::funcWithDefaultValue",
            },
            description: Some(
                "Check codegen of functions with default values.",
            ),
            input_properties: [
                InputProperty {
                    name: "a",
                    type: String,
                    description: None,
                },
                InputProperty {
                    name: "b",
                    type: Option(
                        String,
                    ),
                    description: None,
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "r",
                    type: String,
                    description: None,
                },
            ],
        },
        ElementId {
            namespace: [],
            name: "funcWithDictParam",
            raw: "mypkg::funcWithDictParam",
        }: Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithDictParam",
                raw: "mypkg::funcWithDictParam",
            },
            description: Some(
                "Check codegen of functions with a Dict<str,str> parameter.",
            ),
            input_properties: [
                InputProperty {
                    name: "a",
                    type: Option(
                        Object(
                            String,
                        ),
                    ),
                    description: None,
                },
                InputProperty {
                    name: "b",
                    type: Option(
                        String,
                    ),
                    description: None,
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "r",
                    type: String,
                    description: None,
                },
            ],
        },
        ElementId {
            namespace: [],
            name: "funcWithEmptyOutputs",
            raw: "mypkg::funcWithEmptyOutputs",
        }: Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithEmptyOutputs",
                raw: "mypkg::funcWithEmptyOutputs",
            },
            description: Some(
                "n/a",
            ),
            input_properties: [
                InputProperty {
                    name: "name",
                    type: String,
                    description: Some(
                        "The Name of the FeatureGroup.",
                    ),
                },
            ],
            output_properties: [],
        },
        ElementId {
            namespace: [],
            name: "funcWithListParam",
            raw: "mypkg::funcWithListParam",
        }: Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithListParam",
                raw: "mypkg::funcWithListParam",
            },
            description: Some(
                "Check codegen of functions with a List parameter.",
            ),
            input_properties: [
                InputProperty {
                    name: "a",
                    type: Option(
                        Array(
                            String,
                        ),
                    ),
                    description: None,
                },
                InputProperty {
                    name: "b",
                    type: Option(
                        String,
                    ),
                    description: None,
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "r",
                    type: String,
                    description: None,
                },
            ],
        },
        ElementId {
            namespace: [],
            name: "getBastionShareableLink",
            raw: "mypkg::getBastionShareableLink",
        }: Function {
            element_id: ElementId {
                namespace: [],
                name: "getBastionShareableLink",
                raw: "mypkg::getBastionShareableLink",
            },
            description: Some(
                "Response for all the Bastion Shareable Link endpoints.\nAPI Version: 2020-11-01.",
            ),
            input_properties: [
                InputProperty {
                    name: "bastionHostName",
                    type: String,
                    description: Some(
                        "The name of the Bastion Host.",
                    ),
                },
                InputProperty {
                    name: "resourceGroupName",
                    type: String,
                    description: Some(
                        "The name of the resource group.",
                    ),
                },
                InputProperty {
                    name: "vms",
                    type: Option(
                        Array(
                            Ref(
                                Type(
                                    ElementId {
                                        namespace: [],
                                        name: "BastionShareableLink",
                                        raw: "mypkg::BastionShareableLink",
                                    },
                                ),
                            ),
                        ),
                    ),
                    description: Some(
                        "List of VM references.",
                    ),
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "nextLink",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "The URL to get the next set of results.",
                    ),
                },
            ],
        },
        ElementId {
            namespace: [],
            name: "getClientConfig",
            raw: "mypkg::getClientConfig",
        }: Function {
            element_id: ElementId {
                namespace: [],
                name: "getClientConfig",
                raw: "mypkg::getClientConfig",
            },
            description: Some(
                "Failing example taken from azure-native. Original doc: Use this function to access the current configuration of the native Azure provider.",
            ),
            input_properties: [],
            output_properties: [
                OutputProperty {
                    name: "clientId",
                    type: String,
                    description: Some(
                        "Azure Client ID (Application Object ID).",
                    ),
                },
                OutputProperty {
                    name: "objectId",
                    type: String,
                    description: Some(
                        "Azure Object ID of the current user or service principal.",
                    ),
                },
                OutputProperty {
                    name: "subscriptionId",
                    type: String,
                    description: Some(
                        "Azure Subscription ID",
                    ),
                },
                OutputProperty {
                    name: "tenantId",
                    type: String,
                    description: Some(
                        "Azure Tenant ID",
                    ),
                },
            ],
        },
        ElementId {
            namespace: [],
            name: "getIntegrationRuntimeObjectMetadatum",
            raw: "mypkg::getIntegrationRuntimeObjectMetadatum",
        }: Function {
            element_id: ElementId {
                namespace: [],
                name: "getIntegrationRuntimeObjectMetadatum",
                raw: "mypkg::getIntegrationRuntimeObjectMetadatum",
            },
            description: Some(
                "Another failing example. A list of SSIS object metadata.\nAPI Version: 2018-06-01.",
            ),
            input_properties: [
                InputProperty {
                    name: "factoryName",
                    type: String,
                    description: Some(
                        "The factory name.",
                    ),
                },
                InputProperty {
                    name: "integrationRuntimeName",
                    type: String,
                    description: Some(
                        "The integration runtime name.",
                    ),
                },
                InputProperty {
                    name: "metadataPath",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "Metadata path.",
                    ),
                },
                InputProperty {
                    name: "resourceGroupName",
                    type: String,
                    description: Some(
                        "The resource group name.",
                    ),
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "nextLink",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "The link to the next page of results, if any remaining results exist.",
                    ),
                },
                OutputProperty {
                    name: "value",
                    type: Option(
                        Array(
                            DiscriminatedUnion(
                                [
                                    Ref(
                                        Type(
                                            ElementId {
                                                namespace: [],
                                                name: "SsisEnvironmentResponse",
                                                raw: "mypkg::SsisEnvironmentResponse",
                                            },
                                        ),
                                    ),
                                    Ref(
                                        Type(
                                            ElementId {
                                                namespace: [],
                                                name: "SsisFolderResponse",
                                                raw: "mypkg::SsisFolderResponse",
                                            },
                                        ),
                                    ),
                                    Ref(
                                        Type(
                                            ElementId {
                                                namespace: [],
                                                name: "SsisPackageResponse",
                                                raw: "mypkg::SsisPackageResponse",
                                            },
                                        ),
                                    ),
                                    Ref(
                                        Type(
                                            ElementId {
                                                namespace: [],
                                                name: "SsisProjectResponse",
                                                raw: "mypkg::SsisProjectResponse",
                                            },
                                        ),
                                    ),
                                ],
                            ),
                        ),
                    ),
                    description: Some(
                        "List of SSIS object metadata.",
                    ),
                },
            ],
        },
        ElementId {
            namespace: [],
            name: "listStorageAccountKeys",
            raw: "mypkg::listStorageAccountKeys",
        }: Function {
            element_id: ElementId {
                namespace: [],
                name: "listStorageAccountKeys",
                raw: "mypkg::listStorageAccountKeys",
            },
            description: Some(
                "The response from the ListKeys operation.\nAPI Version: 2021-02-01.",
            ),
            input_properties: [
                InputProperty {
                    name: "accountName",
                    type: String,
                    description: Some(
                        "The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.",
                    ),
                },
                InputProperty {
                    name: "expand",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "Specifies type of the key to be listed. Possible value is kerb.",
                    ),
                },
                InputProperty {
                    name: "resourceGroupName",
                    type: String,
                    description: Some(
                        "The name of the resource group within the user's subscription. The name is case insensitive.",
                    ),
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "keys",
                    type: Array(
                        Ref(
                            Type(
                                ElementId {
                                    namespace: [],
                                    name: "StorageAccountKeyResponse",
                                    raw: "mypkg::StorageAccountKeyResponse",
                                },
                            ),
                        ),
                    ),
                    description: Some(
                        "Gets the list of storage account keys and their properties for the specified storage account.",
                    ),
                },
            ],
        },
    },
    types: {
        ElementId {
            namespace: [],
            name: "BastionShareableLink",
            raw: "mypkg::BastionShareableLink",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "BastionShareableLink",
                raw: "mypkg::BastionShareableLink",
            },
            value: Object(
                Some(
                    "Bastion Shareable Link.",
                ),
                [
                    GlobalTypeProperty {
                        name: "vm",
                        type: String,
                        description: Some(
                            "Reference of the virtual machine resource.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisEnvironmentReferenceResponse",
            raw: "mypkg::SsisEnvironmentReferenceResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisEnvironmentReferenceResponse",
                raw: "mypkg::SsisEnvironmentReferenceResponse",
            },
            value: Object(
                Some(
                    "Ssis environment reference.",
                ),
                [
                    GlobalTypeProperty {
                        name: "environmentFolderName",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Environment folder name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "environmentName",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Environment name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Environment reference id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "referenceType",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Reference type",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisEnvironmentResponse",
            raw: "mypkg::SsisEnvironmentResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisEnvironmentResponse",
                raw: "mypkg::SsisEnvironmentResponse",
            },
            value: Object(
                Some(
                    "Ssis environment.",
                ),
                [
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "folderId",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Folder id which contains environment.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Metadata id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "type",
                        type: ConstString(
                            "Environment",
                        ),
                        description: Some(
                            "The type of SSIS object metadata.\nExpected value is 'Environment'.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "variables",
                        type: Option(
                            Array(
                                Ref(
                                    Type(
                                        ElementId {
                                            namespace: [],
                                            name: "SsisVariableResponse",
                                            raw: "mypkg::SsisVariableResponse",
                                        },
                                    ),
                                ),
                            ),
                        ),
                        description: Some(
                            "Variable in environment",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisFolderResponse",
            raw: "mypkg::SsisFolderResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisFolderResponse",
                raw: "mypkg::SsisFolderResponse",
            },
            value: Object(
                Some(
                    "Ssis folder.",
                ),
                [
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Metadata id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "type",
                        type: ConstString(
                            "Folder",
                        ),
                        description: Some(
                            "The type of SSIS object metadata.\nExpected value is 'Folder'.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisPackageResponse",
            raw: "mypkg::SsisPackageResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisPackageResponse",
                raw: "mypkg::SsisPackageResponse",
            },
            value: Object(
                Some(
                    "Ssis Package.",
                ),
                [
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "folderId",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Folder id which contains package.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Metadata id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "parameters",
                        type: Option(
                            Array(
                                Ref(
                                    Type(
                                        ElementId {
                                            namespace: [],
                                            name: "SsisParameterResponse",
                                            raw: "mypkg::SsisParameterResponse",
                                        },
                                    ),
                                ),
                            ),
                        ),
                        description: Some(
                            "Parameters in package",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "projectId",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Project id which contains package.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "projectVersion",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Project version which contains package.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "type",
                        type: ConstString(
                            "Package",
                        ),
                        description: Some(
                            "The type of SSIS object metadata.\nExpected value is 'Package'.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisParameterResponse",
            raw: "mypkg::SsisParameterResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisParameterResponse",
                raw: "mypkg::SsisParameterResponse",
            },
            value: Object(
                Some(
                    "Ssis parameter.",
                ),
                [
                    GlobalTypeProperty {
                        name: "dataType",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Parameter type.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "defaultValue",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Default value of parameter.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Parameter description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "designDefaultValue",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Design default value of parameter.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Parameter id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Parameter name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "required",
                        type: Option(
                            Boolean,
                        ),
                        description: Some(
                            "Whether parameter is required.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "sensitive",
                        type: Option(
                            Boolean,
                        ),
                        description: Some(
                            "Whether parameter is sensitive.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "sensitiveDefaultValue",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Default sensitive value of parameter.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "valueSet",
                        type: Option(
                            Boolean,
                        ),
                        description: Some(
                            "Parameter value set.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "valueType",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Parameter value type.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "variable",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Parameter reference variable.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisProjectResponse",
            raw: "mypkg::SsisProjectResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisProjectResponse",
                raw: "mypkg::SsisProjectResponse",
            },
            value: Object(
                Some(
                    "Ssis project.",
                ),
                [
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "environmentRefs",
                        type: Option(
                            Array(
                                Ref(
                                    Type(
                                        ElementId {
                                            namespace: [],
                                            name: "SsisEnvironmentReferenceResponse",
                                            raw: "mypkg::SsisEnvironmentReferenceResponse",
                                        },
                                    ),
                                ),
                            ),
                        ),
                        description: Some(
                            "Environment reference in project",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "folderId",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Folder id which contains project.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Metadata id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "parameters",
                        type: Option(
                            Array(
                                Ref(
                                    Type(
                                        ElementId {
                                            namespace: [],
                                            name: "SsisParameterResponse",
                                            raw: "mypkg::SsisParameterResponse",
                                        },
                                    ),
                                ),
                            ),
                        ),
                        description: Some(
                            "Parameters in project",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "type",
                        type: ConstString(
                            "Project",
                        ),
                        description: Some(
                            "The type of SSIS object metadata.\nExpected value is 'Project'.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "version",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Project version.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisVariableResponse",
            raw: "mypkg::SsisVariableResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisVariableResponse",
                raw: "mypkg::SsisVariableResponse",
            },
            value: Object(
                Some(
                    "Ssis variable.",
                ),
                [
                    GlobalTypeProperty {
                        name: "dataType",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Variable type.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Variable description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Variable id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Variable name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "sensitive",
                        type: Option(
                            Boolean,
                        ),
                        description: Some(
                            "Whether variable is sensitive.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "sensitiveValue",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Variable sensitive value.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "value",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Variable value.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "StorageAccountKeyResponse",
            raw: "mypkg::StorageAccountKeyResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "StorageAccountKeyResponse",
                raw: "mypkg::StorageAccountKeyResponse",
            },
            value: Object(
                Some(
                    "An access key for the storage account.",
                ),
                [
                    GlobalTypeProperty {
                        name: "creationTime",
                        type: String,
                        description: Some(
                            "Creation time of the key, in round trip date format.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "keyName",
                        type: String,
                        description: Some(
                            "Name of the key.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "permissions",
                        type: String,
                        description: Some(
                            "Permissions for the key -- read-only or full permissions.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "value",
                        type: String,
                        description: Some(
                            "Base 64-encoded value of the key.",
                        ),
                    },
                ],
            ),
        },
    },
    resource_name_map: {},
    function_name_map: {
        "mypkg:getBastionShareableLink": Function {
            element_id: ElementId {
                namespace: [],
                name: "getBastionShareableLink",
                raw: "mypkg::getBastionShareableLink",
            },
            description: Some(
                "Response for all the Bastion Shareable Link endpoints.\nAPI Version: 2020-11-01.",
            ),
            input_properties: [
                InputProperty {
                    name: "bastionHostName",
                    type: String,
                    description: Some(
                        "The name of the Bastion Host.",
                    ),
                },
                InputProperty {
                    name: "resourceGroupName",
                    type: String,
                    description: Some(
                        "The name of the resource group.",
                    ),
                },
                InputProperty {
                    name: "vms",
                    type: Option(
                        Array(
                            Ref(
                                Type(
                                    ElementId {
                                        namespace: [],
                                        name: "BastionShareableLink",
                                        raw: "mypkg::BastionShareableLink",
                                    },
                                ),
                            ),
                        ),
                    ),
                    description: Some(
                        "List of VM references.",
                    ),
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "nextLink",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "The URL to get the next set of results.",
                    ),
                },
            ],
        },
        "mypkg:funcWithConstInput": Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithConstInput",
                raw: "mypkg::funcWithConstInput",
            },
            description: Some(
                "Codegen demo with const inputs",
            ),
            input_properties: [
                InputProperty {
                    name: "plainInput",
                    type: Option(
                        ConstString(
                            "fixed",
                        ),
                    ),
                    description: None,
                },
            ],
            output_properties: [],
        },
        "mypkg:listStorageAccountKeys": Function {
            element_id: ElementId {
                namespace: [],
                name: "listStorageAccountKeys",
                raw: "mypkg::listStorageAccountKeys",
            },
            description: Some(
                "The response from the ListKeys operation.\nAPI Version: 2021-02-01.",
            ),
            input_properties: [
                InputProperty {
                    name: "accountName",
                    type: String,
                    description: Some(
                        "The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.",
                    ),
                },
                InputProperty {
                    name: "expand",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "Specifies type of the key to be listed. Possible value is kerb.",
                    ),
                },
                InputProperty {
                    name: "resourceGroupName",
                    type: String,
                    description: Some(
                        "The name of the resource group within the user's subscription. The name is case insensitive.",
                    ),
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "keys",
                    type: Array(
                        Ref(
                            Type(
                                ElementId {
                                    namespace: [],
                                    name: "StorageAccountKeyResponse",
                                    raw: "mypkg::StorageAccountKeyResponse",
                                },
                            ),
                        ),
                    ),
                    description: Some(
                        "Gets the list of storage account keys and their properties for the specified storage account.",
                    ),
                },
            ],
        },
        "mypkg:funcWithAllOptionalInputs": Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithAllOptionalInputs",
                raw: "mypkg::funcWithAllOptionalInputs",
            },
            description: Some(
                "Check codegen of functions with all optional inputs.",
            ),
            input_properties: [
                InputProperty {
                    name: "a",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "Property A",
                    ),
                },
                InputProperty {
                    name: "b",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "Property B",
                    ),
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "r",
                    type: String,
                    description: None,
                },
            ],
        },
        "mypkg:funcWithListParam": Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithListParam",
                raw: "mypkg::funcWithListParam",
            },
            description: Some(
                "Check codegen of functions with a List parameter.",
            ),
            input_properties: [
                InputProperty {
                    name: "a",
                    type: Option(
                        Array(
                            String,
                        ),
                    ),
                    description: None,
                },
                InputProperty {
                    name: "b",
                    type: Option(
                        String,
                    ),
                    description: None,
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "r",
                    type: String,
                    description: None,
                },
            ],
        },
        "mypkg:funcWithDefaultValue": Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithDefaultValue",
                raw: "mypkg::funcWithDefaultValue",
            },
            description: Some(
                "Check codegen of functions with default values.",
            ),
            input_properties: [
                InputProperty {
                    name: "a",
                    type: String,
                    description: None,
                },
                InputProperty {
                    name: "b",
                    type: Option(
                        String,
                    ),
                    description: None,
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "r",
                    type: String,
                    description: None,
                },
            ],
        },
        "mypkg:funcWithEmptyOutputs": Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithEmptyOutputs",
                raw: "mypkg::funcWithEmptyOutputs",
            },
            description: Some(
                "n/a",
            ),
            input_properties: [
                InputProperty {
                    name: "name",
                    type: String,
                    description: Some(
                        "The Name of the FeatureGroup.",
                    ),
                },
            ],
            output_properties: [],
        },
        "mypkg:getClientConfig": Function {
            element_id: ElementId {
                namespace: [],
                name: "getClientConfig",
                raw: "mypkg::getClientConfig",
            },
            description: Some(
                "Failing example taken from azure-native. Original doc: Use this function to access the current configuration of the native Azure provider.",
            ),
            input_properties: [],
            output_properties: [
                OutputProperty {
                    name: "clientId",
                    type: String,
                    description: Some(
                        "Azure Client ID (Application Object ID).",
                    ),
                },
                OutputProperty {
                    name: "objectId",
                    type: String,
                    description: Some(
                        "Azure Object ID of the current user or service principal.",
                    ),
                },
                OutputProperty {
                    name: "subscriptionId",
                    type: String,
                    description: Some(
                        "Azure Subscription ID",
                    ),
                },
                OutputProperty {
                    name: "tenantId",
                    type: String,
                    description: Some(
                        "Azure Tenant ID",
                    ),
                },
            ],
        },
        "mypkg:getIntegrationRuntimeObjectMetadatum": Function {
            element_id: ElementId {
                namespace: [],
                name: "getIntegrationRuntimeObjectMetadatum",
                raw: "mypkg::getIntegrationRuntimeObjectMetadatum",
            },
            description: Some(
                "Another failing example. A list of SSIS object metadata.\nAPI Version: 2018-06-01.",
            ),
            input_properties: [
                InputProperty {
                    name: "factoryName",
                    type: String,
                    description: Some(
                        "The factory name.",
                    ),
                },
                InputProperty {
                    name: "integrationRuntimeName",
                    type: String,
                    description: Some(
                        "The integration runtime name.",
                    ),
                },
                InputProperty {
                    name: "metadataPath",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "Metadata path.",
                    ),
                },
                InputProperty {
                    name: "resourceGroupName",
                    type: String,
                    description: Some(
                        "The resource group name.",
                    ),
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "nextLink",
                    type: Option(
                        String,
                    ),
                    description: Some(
                        "The link to the next page of results, if any remaining results exist.",
                    ),
                },
                OutputProperty {
                    name: "value",
                    type: Option(
                        Array(
                            DiscriminatedUnion(
                                [
                                    Ref(
                                        Type(
                                            ElementId {
                                                namespace: [],
                                                name: "SsisEnvironmentResponse",
                                                raw: "mypkg::SsisEnvironmentResponse",
                                            },
                                        ),
                                    ),
                                    Ref(
                                        Type(
                                            ElementId {
                                                namespace: [],
                                                name: "SsisFolderResponse",
                                                raw: "mypkg::SsisFolderResponse",
                                            },
                                        ),
                                    ),
                                    Ref(
                                        Type(
                                            ElementId {
                                                namespace: [],
                                                name: "SsisPackageResponse",
                                                raw: "mypkg::SsisPackageResponse",
                                            },
                                        ),
                                    ),
                                    Ref(
                                        Type(
                                            ElementId {
                                                namespace: [],
                                                name: "SsisProjectResponse",
                                                raw: "mypkg::SsisProjectResponse",
                                            },
                                        ),
                                    ),
                                ],
                            ),
                        ),
                    ),
                    description: Some(
                        "List of SSIS object metadata.",
                    ),
                },
            ],
        },
        "mypkg:funcWithDictParam": Function {
            element_id: ElementId {
                namespace: [],
                name: "funcWithDictParam",
                raw: "mypkg::funcWithDictParam",
            },
            description: Some(
                "Check codegen of functions with a Dict<str,str> parameter.",
            ),
            input_properties: [
                InputProperty {
                    name: "a",
                    type: Option(
                        Object(
                            String,
                        ),
                    ),
                    description: None,
                },
                InputProperty {
                    name: "b",
                    type: Option(
                        String,
                    ),
                    description: None,
                },
            ],
            output_properties: [
                OutputProperty {
                    name: "r",
                    type: String,
                    description: None,
                },
            ],
        },
    },
    all_types: {
        ElementId {
            namespace: [],
            name: "BastionShareableLink",
            raw: "mypkg::BastionShareableLink",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "BastionShareableLink",
                raw: "mypkg::BastionShareableLink",
            },
            value: Object(
                Some(
                    "Bastion Shareable Link.",
                ),
                [
                    GlobalTypeProperty {
                        name: "vm",
                        type: String,
                        description: Some(
                            "Reference of the virtual machine resource.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisEnvironmentReferenceResponse",
            raw: "mypkg::SsisEnvironmentReferenceResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisEnvironmentReferenceResponse",
                raw: "mypkg::SsisEnvironmentReferenceResponse",
            },
            value: Object(
                Some(
                    "Ssis environment reference.",
                ),
                [
                    GlobalTypeProperty {
                        name: "environmentFolderName",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Environment folder name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "environmentName",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Environment name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Environment reference id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "referenceType",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Reference type",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisEnvironmentResponse",
            raw: "mypkg::SsisEnvironmentResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisEnvironmentResponse",
                raw: "mypkg::SsisEnvironmentResponse",
            },
            value: Object(
                Some(
                    "Ssis environment.",
                ),
                [
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "folderId",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Folder id which contains environment.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Metadata id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "type",
                        type: ConstString(
                            "Environment",
                        ),
                        description: Some(
                            "The type of SSIS object metadata.\nExpected value is 'Environment'.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "variables",
                        type: Option(
                            Array(
                                Ref(
                                    Type(
                                        ElementId {
                                            namespace: [],
                                            name: "SsisVariableResponse",
                                            raw: "mypkg::SsisVariableResponse",
                                        },
                                    ),
                                ),
                            ),
                        ),
                        description: Some(
                            "Variable in environment",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisFolderResponse",
            raw: "mypkg::SsisFolderResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisFolderResponse",
                raw: "mypkg::SsisFolderResponse",
            },
            value: Object(
                Some(
                    "Ssis folder.",
                ),
                [
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Metadata id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "type",
                        type: ConstString(
                            "Folder",
                        ),
                        description: Some(
                            "The type of SSIS object metadata.\nExpected value is 'Folder'.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisPackageResponse",
            raw: "mypkg::SsisPackageResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisPackageResponse",
                raw: "mypkg::SsisPackageResponse",
            },
            value: Object(
                Some(
                    "Ssis Package.",
                ),
                [
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "folderId",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Folder id which contains package.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Metadata id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "parameters",
                        type: Option(
                            Array(
                                Ref(
                                    Type(
                                        ElementId {
                                            namespace: [],
                                            name: "SsisParameterResponse",
                                            raw: "mypkg::SsisParameterResponse",
                                        },
                                    ),
                                ),
                            ),
                        ),
                        description: Some(
                            "Parameters in package",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "projectId",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Project id which contains package.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "projectVersion",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Project version which contains package.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "type",
                        type: ConstString(
                            "Package",
                        ),
                        description: Some(
                            "The type of SSIS object metadata.\nExpected value is 'Package'.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisParameterResponse",
            raw: "mypkg::SsisParameterResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisParameterResponse",
                raw: "mypkg::SsisParameterResponse",
            },
            value: Object(
                Some(
                    "Ssis parameter.",
                ),
                [
                    GlobalTypeProperty {
                        name: "dataType",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Parameter type.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "defaultValue",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Default value of parameter.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Parameter description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "designDefaultValue",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Design default value of parameter.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Parameter id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Parameter name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "required",
                        type: Option(
                            Boolean,
                        ),
                        description: Some(
                            "Whether parameter is required.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "sensitive",
                        type: Option(
                            Boolean,
                        ),
                        description: Some(
                            "Whether parameter is sensitive.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "sensitiveDefaultValue",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Default sensitive value of parameter.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "valueSet",
                        type: Option(
                            Boolean,
                        ),
                        description: Some(
                            "Parameter value set.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "valueType",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Parameter value type.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "variable",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Parameter reference variable.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisProjectResponse",
            raw: "mypkg::SsisProjectResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisProjectResponse",
                raw: "mypkg::SsisProjectResponse",
            },
            value: Object(
                Some(
                    "Ssis project.",
                ),
                [
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "environmentRefs",
                        type: Option(
                            Array(
                                Ref(
                                    Type(
                                        ElementId {
                                            namespace: [],
                                            name: "SsisEnvironmentReferenceResponse",
                                            raw: "mypkg::SsisEnvironmentReferenceResponse",
                                        },
                                    ),
                                ),
                            ),
                        ),
                        description: Some(
                            "Environment reference in project",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "folderId",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Folder id which contains project.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Metadata id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Metadata name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "parameters",
                        type: Option(
                            Array(
                                Ref(
                                    Type(
                                        ElementId {
                                            namespace: [],
                                            name: "SsisParameterResponse",
                                            raw: "mypkg::SsisParameterResponse",
                                        },
                                    ),
                                ),
                            ),
                        ),
                        description: Some(
                            "Parameters in project",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "type",
                        type: ConstString(
                            "Project",
                        ),
                        description: Some(
                            "The type of SSIS object metadata.\nExpected value is 'Project'.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "version",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Project version.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "SsisVariableResponse",
            raw: "mypkg::SsisVariableResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "SsisVariableResponse",
                raw: "mypkg::SsisVariableResponse",
            },
            value: Object(
                Some(
                    "Ssis variable.",
                ),
                [
                    GlobalTypeProperty {
                        name: "dataType",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Variable type.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "description",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Variable description.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "id",
                        type: Option(
                            Number,
                        ),
                        description: Some(
                            "Variable id.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "name",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Variable name.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "sensitive",
                        type: Option(
                            Boolean,
                        ),
                        description: Some(
                            "Whether variable is sensitive.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "sensitiveValue",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Variable sensitive value.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "value",
                        type: Option(
                            String,
                        ),
                        description: Some(
                            "Variable value.",
                        ),
                    },
                ],
            ),
        },
        ElementId {
            namespace: [],
            name: "StorageAccountKeyResponse",
            raw: "mypkg::StorageAccountKeyResponse",
        }: GlobalType {
            element_id: ElementId {
                namespace: [],
                name: "StorageAccountKeyResponse",
                raw: "mypkg::StorageAccountKeyResponse",
            },
            value: Object(
                Some(
                    "An access key for the storage account.",
                ),
                [
                    GlobalTypeProperty {
                        name: "creationTime",
                        type: String,
                        description: Some(
                            "Creation time of the key, in round trip date format.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "keyName",
                        type: String,
                        description: Some(
                            "Name of the key.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "permissions",
                        type: String,
                        description: Some(
                            "Permissions for the key -- read-only or full permissions.",
                        ),
                    },
                    GlobalTypeProperty {
                        name: "value",
                        type: String,
                        description: Some(
                            "Base 64-encoded value of the key.",
                        ),
                    },
                ],
            ),
        },
    },
}