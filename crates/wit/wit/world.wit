package component:pulumi-gestalt@0.0.3;

world pulumi-gestalt {
    import output-interface;
    import types;
    import context;
    export pulumi-main; // Used by macro
}

interface pulumi-main {
    main: func();
}

interface output-interface {

    resource output {
        map: func(function-name: string) -> output;
        clone: func() -> output;
        combine: func(outputs: list<borrow<output>>) -> output;
        add-to-export: func(name: string);
    }

    resource composite-output {
        get-field: func(field-name: string) -> output;
    }
}

interface types {
    use output-interface.{output};

    record function-invocation-request {
        id: output,
        function-name: string,
        value: string,
    }
    record function-invocation-result {
        id: borrow<output>,
        value: string,
    }
    
    record object-field {
        name: string,
        value: borrow<output>
    }

    record register-resource-request {
        %type: string,
        name: string,
        version: string,
        object: list<object-field>,
    }

    record resource-invoke-request {
        token: string,
        version: string,
        object: list<object-field>,
    }
    
    variant config-value {
        plaintext(string),
        secret(output),
    }
    
}

interface context {
    use output-interface.{output, composite-output};
    use types.{register-resource-request, resource-invoke-request, function-invocation-result, function-invocation-request, config-value};

    resource context {
        constructor();
        create-output: func(value: string, secret:bool) -> output;
        register-resource: func(request: register-resource-request) -> composite-output;
        invoke-resource: func(request: resource-invoke-request) -> composite-output;
        finish: func(functions: list<function-invocation-result>) -> list<function-invocation-request>;
        get-config: func(name: option<string>, key: string) -> option<config-value>;
    }
}
