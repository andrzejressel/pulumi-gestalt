/// Provides a resource to manage a GuardDuty malware protection plan.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: aws:guardduty:MalwareProtectionPlan
///     properties:
///       role: ${exampleAwsIamRole.arn}
///       protectedResource:
///         s3Bucket:
///           bucketName: ${exampleAwsS3Bucket.id}
///           objectPrefixes:
///             - example1
///             - example2
///       actions:
///         - tagging:
///             - status: ENABLED
///       tags:
///         Name: example
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import GuardDuty malware protection plans using their IDs. For example:
///
/// ```sh
/// $ pulumi import aws:guardduty/malwareProtectionPlan:MalwareProtectionPlan example 1234567890abcdef0123
/// ```
pub mod malware_protection_plan {
    #[derive(pulumi_wasm_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct MalwareProtectionPlanArgs {
        /// Information about whether the tags will be added to the S3 object after scanning. See `actions` below.
        #[builder(into, default)]
        pub actions: pulumi_wasm_rust::InputOrOutput<
            Option<Vec<super::super::types::guardduty::MalwareProtectionPlanAction>>,
        >,
        /// Information about the protected resource that is associated with the created Malware Protection plan. Presently, S3Bucket is the only supported protected resource. See `protected_resource` below.
        #[builder(into, default)]
        pub protected_resource: pulumi_wasm_rust::InputOrOutput<
            Option<
                super::super::types::guardduty::MalwareProtectionPlanProtectedResource,
            >,
        >,
        /// ARN of IAM role that includes the permissions required to scan and add tags to the associated protected resource.
        #[builder(into)]
        pub role: pulumi_wasm_rust::InputOrOutput<String>,
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        #[builder(into, default)]
        pub tags: pulumi_wasm_rust::InputOrOutput<
            Option<std::collections::HashMap<String, String>>,
        >,
    }
    #[allow(dead_code)]
    pub struct MalwareProtectionPlanResult {
        /// Information about whether the tags will be added to the S3 object after scanning. See `actions` below.
        pub actions: pulumi_wasm_rust::Output<
            Vec<super::super::types::guardduty::MalwareProtectionPlanAction>,
        >,
        /// The ARN of the GuardDuty malware protection plan
        pub arn: pulumi_wasm_rust::Output<String>,
        /// The timestamp when the Malware Protection plan resource was created.
        pub created_at: pulumi_wasm_rust::Output<String>,
        /// Information about the protected resource that is associated with the created Malware Protection plan. Presently, S3Bucket is the only supported protected resource. See `protected_resource` below.
        pub protected_resource: pulumi_wasm_rust::Output<
            Option<
                super::super::types::guardduty::MalwareProtectionPlanProtectedResource,
            >,
        >,
        /// ARN of IAM role that includes the permissions required to scan and add tags to the associated protected resource.
        pub role: pulumi_wasm_rust::Output<String>,
        /// The GuardDuty malware protection plan status. Valid values are `ACTIVE`, `WARNING`, and `ERROR`.
        pub status: pulumi_wasm_rust::Output<String>,
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        pub tags: pulumi_wasm_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        pub tags_all: pulumi_wasm_rust::Output<
            std::collections::HashMap<String, String>,
        >,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_wasm_rust::PulumiContext,
        name: &str,
        args: MalwareProtectionPlanArgs,
    ) -> MalwareProtectionPlanResult {
        use pulumi_wasm_rust::__private::pulumi_gestalt_adapter_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let actions_binding = args.actions.get_output(context).get_inner();
        let protected_resource_binding = args
            .protected_resource
            .get_output(context)
            .get_inner();
        let role_binding = args.role.get_output(context).get_inner();
        let tags_binding = args.tags.get_output(context).get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "aws:guardduty/malwareProtectionPlan:MalwareProtectionPlan".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "actions".into(),
                    value: &actions_binding,
                },
                register_interface::ObjectField {
                    name: "protectedResource".into(),
                    value: &protected_resource_binding,
                },
                register_interface::ObjectField {
                    name: "role".into(),
                    value: &role_binding,
                },
                register_interface::ObjectField {
                    name: "tags".into(),
                    value: &tags_binding,
                },
            ]),
        };
        let o = register_interface::register(context.get_inner(), &request);
        MalwareProtectionPlanResult {
            actions: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("actions"),
            ),
            arn: pulumi_wasm_rust::__private::into_domain(o.extract_field("arn")),
            created_at: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("createdAt"),
            ),
            protected_resource: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("protectedResource"),
            ),
            role: pulumi_wasm_rust::__private::into_domain(o.extract_field("role")),
            status: pulumi_wasm_rust::__private::into_domain(o.extract_field("status")),
            tags: pulumi_wasm_rust::__private::into_domain(o.extract_field("tags")),
            tags_all: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("tagsAll"),
            ),
        }
    }
}
