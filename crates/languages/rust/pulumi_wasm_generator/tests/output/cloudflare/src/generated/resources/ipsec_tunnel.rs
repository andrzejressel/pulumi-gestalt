/// Provides a resource, that manages IPsec tunnels for Magic Transit.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = ipsec_tunnel::create(
///         "example",
///         IpsecTunnelArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .allow_null_cipher(false)
///             .cloudflare_endpoint("203.0.113.1")
///             .customer_endpoint("203.0.113.1")
///             .description("Tunnel for ISP X")
///             .health_check_enabled(true)
///             .health_check_target("203.0.113.1")
///             .health_check_type("reply")
///             .interface_address("192.0.2.0/31")
///             .name("IPsec_1")
///             .psk("asdf12341234")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/ipsecTunnel:IpsecTunnel example <account_id>/<tunnel_id>
/// ```
///
pub mod ipsec_tunnel {
    #[derive(pulumi_wasm_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct IpsecTunnelArgs {
        /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        #[builder(into, default)]
        pub account_id: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
        #[builder(into, default)]
        pub allow_null_cipher: pulumi_wasm_rust::InputOrOutput<Option<bool>>,
        /// IP address assigned to the Cloudflare side of the IPsec tunnel.
        #[builder(into)]
        pub cloudflare_endpoint: pulumi_wasm_rust::InputOrOutput<String>,
        /// IP address assigned to the customer side of the IPsec tunnel.
        #[builder(into)]
        pub customer_endpoint: pulumi_wasm_rust::InputOrOutput<String>,
        /// An optional description of the IPsec tunnel.
        #[builder(into, default)]
        pub description: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// `remote_id` in the form of a fqdn. This value is generated by cloudflare.
        #[builder(into, default)]
        pub fqdn_id: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// Specifies the direction for the health check. Available values: `unidirectional`, `bidirectional` Default: `unidirectional`.
        #[builder(into, default)]
        pub health_check_direction: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// Specifies if ICMP tunnel health checks are enabled. Default: `true`.
        #[builder(into, default)]
        pub health_check_enabled: pulumi_wasm_rust::InputOrOutput<Option<bool>>,
        /// Specifies the ICMP rate for the health check. Available values: `low`, `mid`, `high` Default: `mid`.
        #[builder(into, default)]
        pub health_check_rate: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// The IP address of the customer endpoint that will receive tunnel health checks. Default: `<customer_gre_endpoint>`.
        #[builder(into, default)]
        pub health_check_target: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
        #[builder(into, default)]
        pub health_check_type: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// `remote_id` as a hex string. This value is generated by cloudflare.
        #[builder(into, default)]
        pub hex_id: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        #[builder(into)]
        pub interface_address: pulumi_wasm_rust::InputOrOutput<String>,
        /// Name of the IPsec tunnel.
        #[builder(into)]
        pub name: pulumi_wasm_rust::InputOrOutput<String>,
        /// Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
        #[builder(into, default)]
        pub psk: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
        #[builder(into, default)]
        pub remote_id: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// Specifies if replay protection is enabled. Defaults to `false`.
        #[builder(into, default)]
        pub replay_protection: pulumi_wasm_rust::InputOrOutput<Option<bool>>,
        /// `remote_id` in the form of an email address. This value is generated by cloudflare.
        #[builder(into, default)]
        pub user_id: pulumi_wasm_rust::InputOrOutput<Option<String>>,
    }
    #[allow(dead_code)]
    pub struct IpsecTunnelResult {
        /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        pub account_id: pulumi_wasm_rust::Output<Option<String>>,
        /// Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
        pub allow_null_cipher: pulumi_wasm_rust::Output<Option<bool>>,
        /// IP address assigned to the Cloudflare side of the IPsec tunnel.
        pub cloudflare_endpoint: pulumi_wasm_rust::Output<String>,
        /// IP address assigned to the customer side of the IPsec tunnel.
        pub customer_endpoint: pulumi_wasm_rust::Output<String>,
        /// An optional description of the IPsec tunnel.
        pub description: pulumi_wasm_rust::Output<Option<String>>,
        /// `remote_id` in the form of a fqdn. This value is generated by cloudflare.
        pub fqdn_id: pulumi_wasm_rust::Output<String>,
        /// Specifies the direction for the health check. Available values: `unidirectional`, `bidirectional` Default: `unidirectional`.
        pub health_check_direction: pulumi_wasm_rust::Output<String>,
        /// Specifies if ICMP tunnel health checks are enabled. Default: `true`.
        pub health_check_enabled: pulumi_wasm_rust::Output<bool>,
        /// Specifies the ICMP rate for the health check. Available values: `low`, `mid`, `high` Default: `mid`.
        pub health_check_rate: pulumi_wasm_rust::Output<String>,
        /// The IP address of the customer endpoint that will receive tunnel health checks. Default: `<customer_gre_endpoint>`.
        pub health_check_target: pulumi_wasm_rust::Output<String>,
        /// Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
        pub health_check_type: pulumi_wasm_rust::Output<String>,
        /// `remote_id` as a hex string. This value is generated by cloudflare.
        pub hex_id: pulumi_wasm_rust::Output<String>,
        /// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        pub interface_address: pulumi_wasm_rust::Output<String>,
        /// Name of the IPsec tunnel.
        pub name: pulumi_wasm_rust::Output<String>,
        /// Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
        pub psk: pulumi_wasm_rust::Output<String>,
        /// ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
        pub remote_id: pulumi_wasm_rust::Output<String>,
        /// Specifies if replay protection is enabled. Defaults to `false`.
        pub replay_protection: pulumi_wasm_rust::Output<Option<bool>>,
        /// `remote_id` in the form of an email address. This value is generated by cloudflare.
        pub user_id: pulumi_wasm_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_wasm_rust::PulumiContext,
        name: &str,
        args: IpsecTunnelArgs,
    ) -> IpsecTunnelResult {
        use pulumi_wasm_rust::__private::pulumi_gestalt_adapter_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let account_id_binding = args.account_id.get_output(context).get_inner();
        let allow_null_cipher_binding = args
            .allow_null_cipher
            .get_output(context)
            .get_inner();
        let cloudflare_endpoint_binding = args
            .cloudflare_endpoint
            .get_output(context)
            .get_inner();
        let customer_endpoint_binding = args
            .customer_endpoint
            .get_output(context)
            .get_inner();
        let description_binding = args.description.get_output(context).get_inner();
        let fqdn_id_binding = args.fqdn_id.get_output(context).get_inner();
        let health_check_direction_binding = args
            .health_check_direction
            .get_output(context)
            .get_inner();
        let health_check_enabled_binding = args
            .health_check_enabled
            .get_output(context)
            .get_inner();
        let health_check_rate_binding = args
            .health_check_rate
            .get_output(context)
            .get_inner();
        let health_check_target_binding = args
            .health_check_target
            .get_output(context)
            .get_inner();
        let health_check_type_binding = args
            .health_check_type
            .get_output(context)
            .get_inner();
        let hex_id_binding = args.hex_id.get_output(context).get_inner();
        let interface_address_binding = args
            .interface_address
            .get_output(context)
            .get_inner();
        let name_binding = args.name.get_output(context).get_inner();
        let psk_binding = args.psk.get_output(context).get_inner();
        let remote_id_binding = args.remote_id.get_output(context).get_inner();
        let replay_protection_binding = args
            .replay_protection
            .get_output(context)
            .get_inner();
        let user_id_binding = args.user_id.get_output(context).get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "cloudflare:index/ipsecTunnel:IpsecTunnel".into(),
            name: name.to_string(),
            version: super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "accountId".into(),
                    value: &account_id_binding,
                },
                register_interface::ObjectField {
                    name: "allowNullCipher".into(),
                    value: &allow_null_cipher_binding,
                },
                register_interface::ObjectField {
                    name: "cloudflareEndpoint".into(),
                    value: &cloudflare_endpoint_binding,
                },
                register_interface::ObjectField {
                    name: "customerEndpoint".into(),
                    value: &customer_endpoint_binding,
                },
                register_interface::ObjectField {
                    name: "description".into(),
                    value: &description_binding,
                },
                register_interface::ObjectField {
                    name: "fqdnId".into(),
                    value: &fqdn_id_binding,
                },
                register_interface::ObjectField {
                    name: "healthCheckDirection".into(),
                    value: &health_check_direction_binding,
                },
                register_interface::ObjectField {
                    name: "healthCheckEnabled".into(),
                    value: &health_check_enabled_binding,
                },
                register_interface::ObjectField {
                    name: "healthCheckRate".into(),
                    value: &health_check_rate_binding,
                },
                register_interface::ObjectField {
                    name: "healthCheckTarget".into(),
                    value: &health_check_target_binding,
                },
                register_interface::ObjectField {
                    name: "healthCheckType".into(),
                    value: &health_check_type_binding,
                },
                register_interface::ObjectField {
                    name: "hexId".into(),
                    value: &hex_id_binding,
                },
                register_interface::ObjectField {
                    name: "interfaceAddress".into(),
                    value: &interface_address_binding,
                },
                register_interface::ObjectField {
                    name: "name".into(),
                    value: &name_binding,
                },
                register_interface::ObjectField {
                    name: "psk".into(),
                    value: &psk_binding,
                },
                register_interface::ObjectField {
                    name: "remoteId".into(),
                    value: &remote_id_binding,
                },
                register_interface::ObjectField {
                    name: "replayProtection".into(),
                    value: &replay_protection_binding,
                },
                register_interface::ObjectField {
                    name: "userId".into(),
                    value: &user_id_binding,
                },
            ]),
        };
        let o = register_interface::register(context.get_inner(), &request);
        IpsecTunnelResult {
            account_id: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("accountId"),
            ),
            allow_null_cipher: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("allowNullCipher"),
            ),
            cloudflare_endpoint: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("cloudflareEndpoint"),
            ),
            customer_endpoint: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("customerEndpoint"),
            ),
            description: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("description"),
            ),
            fqdn_id: pulumi_wasm_rust::__private::into_domain(o.extract_field("fqdnId")),
            health_check_direction: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("healthCheckDirection"),
            ),
            health_check_enabled: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("healthCheckEnabled"),
            ),
            health_check_rate: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("healthCheckRate"),
            ),
            health_check_target: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("healthCheckTarget"),
            ),
            health_check_type: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("healthCheckType"),
            ),
            hex_id: pulumi_wasm_rust::__private::into_domain(o.extract_field("hexId")),
            interface_address: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("interfaceAddress"),
            ),
            name: pulumi_wasm_rust::__private::into_domain(o.extract_field("name")),
            psk: pulumi_wasm_rust::__private::into_domain(o.extract_field("psk")),
            remote_id: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("remoteId"),
            ),
            replay_protection: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("replayProtection"),
            ),
            user_id: pulumi_wasm_rust::__private::into_domain(o.extract_field("userId")),
        }
    }
}
