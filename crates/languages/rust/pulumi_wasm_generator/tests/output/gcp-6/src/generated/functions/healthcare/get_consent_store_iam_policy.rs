pub mod get_consent_store_iam_policy {
    #[derive(pulumi_wasm_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct GetConsentStoreIamPolicyArgs {
        /// Used to find the parent resource to bind the IAM policy to
        #[builder(into)]
        pub consent_store_id: pulumi_wasm_rust::InputOrOutput<String>,
        /// Identifies the dataset addressed by this request. Must be in the format
        /// 'projects/{project}/locations/{location}/datasets/{dataset}'
        /// Used to find the parent resource to bind the IAM policy to
        #[builder(into)]
        pub dataset: pulumi_wasm_rust::InputOrOutput<String>,
    }
    #[allow(dead_code)]
    pub struct GetConsentStoreIamPolicyResult {
        pub consent_store_id: pulumi_wasm_rust::Output<String>,
        pub dataset: pulumi_wasm_rust::Output<String>,
        /// (Computed) The etag of the IAM policy.
        pub etag: pulumi_wasm_rust::Output<String>,
        /// The provider-assigned unique ID for this managed resource.
        pub id: pulumi_wasm_rust::Output<String>,
        /// (Required only by `gcp.healthcare.ConsentStoreIamPolicy`) The policy data generated by
        /// a `gcp.organizations.getIAMPolicy` data source.
        pub policy_data: pulumi_wasm_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn invoke(
        context: &pulumi_wasm_rust::PulumiContext,
        args: GetConsentStoreIamPolicyArgs,
    ) -> GetConsentStoreIamPolicyResult {
        use pulumi_wasm_rust::__private::pulumi_gestalt_adapter_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let consent_store_id_binding = args
            .consent_store_id
            .get_output(context)
            .get_inner();
        let dataset_binding = args.dataset.get_output(context).get_inner();
        let request = register_interface::ResourceInvokeRequest {
            token: "gcp:healthcare/getConsentStoreIamPolicy:getConsentStoreIamPolicy"
                .into(),
            version: super::super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "consentStoreId".into(),
                    value: &consent_store_id_binding,
                },
                register_interface::ObjectField {
                    name: "dataset".into(),
                    value: &dataset_binding,
                },
            ]),
        };
        let o = register_interface::invoke(context.get_inner(), &request);
        GetConsentStoreIamPolicyResult {
            consent_store_id: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("consentStoreId"),
            ),
            dataset: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("dataset"),
            ),
            etag: pulumi_wasm_rust::__private::into_domain(o.extract_field("etag")),
            id: pulumi_wasm_rust::__private::into_domain(o.extract_field("id")),
            policy_data: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("policyData"),
            ),
        }
    }
}
