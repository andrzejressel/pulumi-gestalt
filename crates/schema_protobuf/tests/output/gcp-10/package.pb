
gcpGoogle Cloud"8.12.1*░С
+
redisClustergcp:redis/cluster:Clusterнг## Example Usage

### Redis Cluster Ha


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const producerNet = new gcp.compute.Network("producer_net", {
    name: "mynetwork",
    autoCreateSubnetworks: false,
});
const producerSubnet = new gcp.compute.Subnetwork("producer_subnet", {
    name: "mysubnet",
    ipCidrRange: "10.0.0.248/29",
    region: "us-central1",
    network: producerNet.id,
});
const _default = new gcp.networkconnectivity.ServiceConnectionPolicy("default", {
    name: "mypolicy",
    location: "us-central1",
    serviceClass: "gcp-memorystore-redis",
    description: "my basic service connection policy",
    network: producerNet.id,
    pscConfig: {
        subnetworks: [producerSubnet.id],
    },
});
const cluster_ha = new gcp.redis.Cluster("cluster-ha", {
    name: "ha-cluster",
    shardCount: 3,
    pscConfigs: [{
        network: producerNet.id,
    }],
    region: "us-central1",
    replicaCount: 1,
    nodeType: "REDIS_SHARED_CORE_NANO",
    transitEncryptionMode: "TRANSIT_ENCRYPTION_MODE_DISABLED",
    authorizationMode: "AUTH_MODE_DISABLED",
    redisConfigs: {
        "maxmemory-policy": "volatile-ttl",
    },
    deletionProtectionEnabled: true,
    zoneDistributionConfig: {
        mode: "MULTI_ZONE",
    },
    maintenancePolicy: {
        weeklyMaintenanceWindows: [{
            day: "MONDAY",
            startTime: {
                hours: 1,
                minutes: 0,
                seconds: 0,
                nanos: 0,
            },
        }],
    },
}, {
    dependsOn: [_default],
});
```
```python
import pulumi
import pulumi_gcp as gcp

producer_net = gcp.compute.Network("producer_net",
    name="mynetwork",
    auto_create_subnetworks=False)
producer_subnet = gcp.compute.Subnetwork("producer_subnet",
    name="mysubnet",
    ip_cidr_range="10.0.0.248/29",
    region="us-central1",
    network=producer_net.id)
default = gcp.networkconnectivity.ServiceConnectionPolicy("default",
    name="mypolicy",
    location="us-central1",
    service_class="gcp-memorystore-redis",
    description="my basic service connection policy",
    network=producer_net.id,
    psc_config={
        "subnetworks": [producer_subnet.id],
    })
cluster_ha = gcp.redis.Cluster("cluster-ha",
    name="ha-cluster",
    shard_count=3,
    psc_configs=[{
        "network": producer_net.id,
    }],
    region="us-central1",
    replica_count=1,
    node_type="REDIS_SHARED_CORE_NANO",
    transit_encryption_mode="TRANSIT_ENCRYPTION_MODE_DISABLED",
    authorization_mode="AUTH_MODE_DISABLED",
    redis_configs={
        "maxmemory-policy": "volatile-ttl",
    },
    deletion_protection_enabled=True,
    zone_distribution_config={
        "mode": "MULTI_ZONE",
    },
    maintenance_policy={
        "weekly_maintenance_windows": [{
            "day": "MONDAY",
            "start_time": {
                "hours": 1,
                "minutes": 0,
                "seconds": 0,
                "nanos": 0,
            },
        }],
    },
    opts = pulumi.ResourceOptions(depends_on=[default]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var producerNet = new Gcp.Compute.Network("producer_net", new()
    {
        Name = "mynetwork",
        AutoCreateSubnetworks = false,
    });

    var producerSubnet = new Gcp.Compute.Subnetwork("producer_subnet", new()
    {
        Name = "mysubnet",
        IpCidrRange = "10.0.0.248/29",
        Region = "us-central1",
        Network = producerNet.Id,
    });

    var @default = new Gcp.NetworkConnectivity.ServiceConnectionPolicy("default", new()
    {
        Name = "mypolicy",
        Location = "us-central1",
        ServiceClass = "gcp-memorystore-redis",
        Description = "my basic service connection policy",
        Network = producerNet.Id,
        PscConfig = new Gcp.NetworkConnectivity.Inputs.ServiceConnectionPolicyPscConfigArgs
        {
            Subnetworks = new[]
            {
                producerSubnet.Id,
            },
        },
    });

    var cluster_ha = new Gcp.Redis.Cluster("cluster-ha", new()
    {
        Name = "ha-cluster",
        ShardCount = 3,
        PscConfigs = new[]
        {
            new Gcp.Redis.Inputs.ClusterPscConfigArgs
            {
                Network = producerNet.Id,
            },
        },
        Region = "us-central1",
        ReplicaCount = 1,
        NodeType = "REDIS_SHARED_CORE_NANO",
        TransitEncryptionMode = "TRANSIT_ENCRYPTION_MODE_DISABLED",
        AuthorizationMode = "AUTH_MODE_DISABLED",
        RedisConfigs = 
        {
            { "maxmemory-policy", "volatile-ttl" },
        },
        DeletionProtectionEnabled = true,
        ZoneDistributionConfig = new Gcp.Redis.Inputs.ClusterZoneDistributionConfigArgs
        {
            Mode = "MULTI_ZONE",
        },
        MaintenancePolicy = new Gcp.Redis.Inputs.ClusterMaintenancePolicyArgs
        {
            WeeklyMaintenanceWindows = new[]
            {
                new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs
                {
                    Day = "MONDAY",
                    StartTime = new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs
                    {
                        Hours = 1,
                        Minutes = 0,
                        Seconds = 0,
                        Nanos = 0,
                    },
                },
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            @default,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkconnectivity"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		producerNet, err := compute.NewNetwork(ctx, "producer_net", &compute.NetworkArgs{
			Name:                  pulumi.String("mynetwork"),
			AutoCreateSubnetworks: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		producerSubnet, err := compute.NewSubnetwork(ctx, "producer_subnet", &compute.SubnetworkArgs{
			Name:        pulumi.String("mysubnet"),
			IpCidrRange: pulumi.String("10.0.0.248/29"),
			Region:      pulumi.String("us-central1"),
			Network:     producerNet.ID(),
		})
		if err != nil {
			return err
		}
		_, err = networkconnectivity.NewServiceConnectionPolicy(ctx, "default", &networkconnectivity.ServiceConnectionPolicyArgs{
			Name:         pulumi.String("mypolicy"),
			Location:     pulumi.String("us-central1"),
			ServiceClass: pulumi.String("gcp-memorystore-redis"),
			Description:  pulumi.String("my basic service connection policy"),
			Network:      producerNet.ID(),
			PscConfig: &networkconnectivity.ServiceConnectionPolicyPscConfigArgs{
				Subnetworks: pulumi.StringArray{
					producerSubnet.ID(),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = redis.NewCluster(ctx, "cluster-ha", &redis.ClusterArgs{
			Name:       pulumi.String("ha-cluster"),
			ShardCount: pulumi.Int(3),
			PscConfigs: redis.ClusterPscConfigArray{
				&redis.ClusterPscConfigArgs{
					Network: producerNet.ID(),
				},
			},
			Region:                pulumi.String("us-central1"),
			ReplicaCount:          pulumi.Int(1),
			NodeType:              pulumi.String("REDIS_SHARED_CORE_NANO"),
			TransitEncryptionMode: pulumi.String("TRANSIT_ENCRYPTION_MODE_DISABLED"),
			AuthorizationMode:     pulumi.String("AUTH_MODE_DISABLED"),
			RedisConfigs: pulumi.StringMap{
				"maxmemory-policy": pulumi.String("volatile-ttl"),
			},
			DeletionProtectionEnabled: pulumi.Bool(true),
			ZoneDistributionConfig: &redis.ClusterZoneDistributionConfigArgs{
				Mode: pulumi.String("MULTI_ZONE"),
			},
			MaintenancePolicy: &redis.ClusterMaintenancePolicyArgs{
				WeeklyMaintenanceWindows: redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArray{
					&redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs{
						Day: pulumi.String("MONDAY"),
						StartTime: &redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs{
							Hours:   pulumi.Int(1),
							Minutes: pulumi.Int(0),
							Seconds: pulumi.Int(0),
							Nanos:   pulumi.Int(0),
						},
					},
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			_default,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicy;
import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicyArgs;
import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConfigArgs;
import com.pulumi.gcp.redis.Cluster;
import com.pulumi.gcp.redis.ClusterArgs;
import com.pulumi.gcp.redis.inputs.ClusterPscConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterZoneDistributionConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterMaintenancePolicyArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var producerNet = new Network("producerNet", NetworkArgs.builder()
            .name("mynetwork")
            .autoCreateSubnetworks(false)
            .build());

        var producerSubnet = new Subnetwork("producerSubnet", SubnetworkArgs.builder()
            .name("mysubnet")
            .ipCidrRange("10.0.0.248/29")
            .region("us-central1")
            .network(producerNet.id())
            .build());

        var default_ = new ServiceConnectionPolicy("default", ServiceConnectionPolicyArgs.builder()
            .name("mypolicy")
            .location("us-central1")
            .serviceClass("gcp-memorystore-redis")
            .description("my basic service connection policy")
            .network(producerNet.id())
            .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
                .subnetworks(producerSubnet.id())
                .build())
            .build());

        var cluster_ha = new Cluster("cluster-ha", ClusterArgs.builder()
            .name("ha-cluster")
            .shardCount(3)
            .pscConfigs(ClusterPscConfigArgs.builder()
                .network(producerNet.id())
                .build())
            .region("us-central1")
            .replicaCount(1)
            .nodeType("REDIS_SHARED_CORE_NANO")
            .transitEncryptionMode("TRANSIT_ENCRYPTION_MODE_DISABLED")
            .authorizationMode("AUTH_MODE_DISABLED")
            .redisConfigs(Map.of("maxmemory-policy", "volatile-ttl"))
            .deletionProtectionEnabled(true)
            .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
                .mode("MULTI_ZONE")
                .build())
            .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
                .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
                    .day("MONDAY")
                    .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
                        .hours(1)
                        .minutes(0)
                        .seconds(0)
                        .nanos(0)
                        .build())
                    .build())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(default_)
                .build());

    }
}
```
```yaml
resources:
  cluster-ha:
    type: gcp:redis:Cluster
    properties:
      name: ha-cluster
      shardCount: 3
      pscConfigs:
        - network: ${producerNet.id}
      region: us-central1
      replicaCount: 1
      nodeType: REDIS_SHARED_CORE_NANO
      transitEncryptionMode: TRANSIT_ENCRYPTION_MODE_DISABLED
      authorizationMode: AUTH_MODE_DISABLED
      redisConfigs:
        maxmemory-policy: volatile-ttl
      deletionProtectionEnabled: true
      zoneDistributionConfig:
        mode: MULTI_ZONE
      maintenancePolicy:
        weeklyMaintenanceWindows:
          - day: MONDAY
            startTime:
              hours: 1
              minutes: 0
              seconds: 0
              nanos: 0
    options:
      dependsOn:
        - ${default}
  default:
    type: gcp:networkconnectivity:ServiceConnectionPolicy
    properties:
      name: mypolicy
      location: us-central1
      serviceClass: gcp-memorystore-redis
      description: my basic service connection policy
      network: ${producerNet.id}
      pscConfig:
        subnetworks:
          - ${producerSubnet.id}
  producerSubnet:
    type: gcp:compute:Subnetwork
    name: producer_subnet
    properties:
      name: mysubnet
      ipCidrRange: 10.0.0.248/29
      region: us-central1
      network: ${producerNet.id}
  producerNet:
    type: gcp:compute:Network
    name: producer_net
    properties:
      name: mynetwork
      autoCreateSubnetworks: false
```
<!--End PulumiCodeChooser -->
### Redis Cluster Ha Single Zone


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const producerNet = new gcp.compute.Network("producer_net", {
    name: "mynetwork",
    autoCreateSubnetworks: false,
});
const producerSubnet = new gcp.compute.Subnetwork("producer_subnet", {
    name: "mysubnet",
    ipCidrRange: "10.0.0.248/29",
    region: "us-central1",
    network: producerNet.id,
});
const _default = new gcp.networkconnectivity.ServiceConnectionPolicy("default", {
    name: "mypolicy",
    location: "us-central1",
    serviceClass: "gcp-memorystore-redis",
    description: "my basic service connection policy",
    network: producerNet.id,
    pscConfig: {
        subnetworks: [producerSubnet.id],
    },
});
const cluster_ha_single_zone = new gcp.redis.Cluster("cluster-ha-single-zone", {
    name: "ha-cluster-single-zone",
    shardCount: 3,
    pscConfigs: [{
        network: producerNet.id,
    }],
    region: "us-central1",
    zoneDistributionConfig: {
        mode: "SINGLE_ZONE",
        zone: "us-central1-f",
    },
    maintenancePolicy: {
        weeklyMaintenanceWindows: [{
            day: "MONDAY",
            startTime: {
                hours: 1,
                minutes: 0,
                seconds: 0,
                nanos: 0,
            },
        }],
    },
    deletionProtectionEnabled: true,
}, {
    dependsOn: [_default],
});
```
```python
import pulumi
import pulumi_gcp as gcp

producer_net = gcp.compute.Network("producer_net",
    name="mynetwork",
    auto_create_subnetworks=False)
producer_subnet = gcp.compute.Subnetwork("producer_subnet",
    name="mysubnet",
    ip_cidr_range="10.0.0.248/29",
    region="us-central1",
    network=producer_net.id)
default = gcp.networkconnectivity.ServiceConnectionPolicy("default",
    name="mypolicy",
    location="us-central1",
    service_class="gcp-memorystore-redis",
    description="my basic service connection policy",
    network=producer_net.id,
    psc_config={
        "subnetworks": [producer_subnet.id],
    })
cluster_ha_single_zone = gcp.redis.Cluster("cluster-ha-single-zone",
    name="ha-cluster-single-zone",
    shard_count=3,
    psc_configs=[{
        "network": producer_net.id,
    }],
    region="us-central1",
    zone_distribution_config={
        "mode": "SINGLE_ZONE",
        "zone": "us-central1-f",
    },
    maintenance_policy={
        "weekly_maintenance_windows": [{
            "day": "MONDAY",
            "start_time": {
                "hours": 1,
                "minutes": 0,
                "seconds": 0,
                "nanos": 0,
            },
        }],
    },
    deletion_protection_enabled=True,
    opts = pulumi.ResourceOptions(depends_on=[default]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var producerNet = new Gcp.Compute.Network("producer_net", new()
    {
        Name = "mynetwork",
        AutoCreateSubnetworks = false,
    });

    var producerSubnet = new Gcp.Compute.Subnetwork("producer_subnet", new()
    {
        Name = "mysubnet",
        IpCidrRange = "10.0.0.248/29",
        Region = "us-central1",
        Network = producerNet.Id,
    });

    var @default = new Gcp.NetworkConnectivity.ServiceConnectionPolicy("default", new()
    {
        Name = "mypolicy",
        Location = "us-central1",
        ServiceClass = "gcp-memorystore-redis",
        Description = "my basic service connection policy",
        Network = producerNet.Id,
        PscConfig = new Gcp.NetworkConnectivity.Inputs.ServiceConnectionPolicyPscConfigArgs
        {
            Subnetworks = new[]
            {
                producerSubnet.Id,
            },
        },
    });

    var cluster_ha_single_zone = new Gcp.Redis.Cluster("cluster-ha-single-zone", new()
    {
        Name = "ha-cluster-single-zone",
        ShardCount = 3,
        PscConfigs = new[]
        {
            new Gcp.Redis.Inputs.ClusterPscConfigArgs
            {
                Network = producerNet.Id,
            },
        },
        Region = "us-central1",
        ZoneDistributionConfig = new Gcp.Redis.Inputs.ClusterZoneDistributionConfigArgs
        {
            Mode = "SINGLE_ZONE",
            Zone = "us-central1-f",
        },
        MaintenancePolicy = new Gcp.Redis.Inputs.ClusterMaintenancePolicyArgs
        {
            WeeklyMaintenanceWindows = new[]
            {
                new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs
                {
                    Day = "MONDAY",
                    StartTime = new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs
                    {
                        Hours = 1,
                        Minutes = 0,
                        Seconds = 0,
                        Nanos = 0,
                    },
                },
            },
        },
        DeletionProtectionEnabled = true,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            @default,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkconnectivity"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		producerNet, err := compute.NewNetwork(ctx, "producer_net", &compute.NetworkArgs{
			Name:                  pulumi.String("mynetwork"),
			AutoCreateSubnetworks: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		producerSubnet, err := compute.NewSubnetwork(ctx, "producer_subnet", &compute.SubnetworkArgs{
			Name:        pulumi.String("mysubnet"),
			IpCidrRange: pulumi.String("10.0.0.248/29"),
			Region:      pulumi.String("us-central1"),
			Network:     producerNet.ID(),
		})
		if err != nil {
			return err
		}
		_, err = networkconnectivity.NewServiceConnectionPolicy(ctx, "default", &networkconnectivity.ServiceConnectionPolicyArgs{
			Name:         pulumi.String("mypolicy"),
			Location:     pulumi.String("us-central1"),
			ServiceClass: pulumi.String("gcp-memorystore-redis"),
			Description:  pulumi.String("my basic service connection policy"),
			Network:      producerNet.ID(),
			PscConfig: &networkconnectivity.ServiceConnectionPolicyPscConfigArgs{
				Subnetworks: pulumi.StringArray{
					producerSubnet.ID(),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = redis.NewCluster(ctx, "cluster-ha-single-zone", &redis.ClusterArgs{
			Name:       pulumi.String("ha-cluster-single-zone"),
			ShardCount: pulumi.Int(3),
			PscConfigs: redis.ClusterPscConfigArray{
				&redis.ClusterPscConfigArgs{
					Network: producerNet.ID(),
				},
			},
			Region: pulumi.String("us-central1"),
			ZoneDistributionConfig: &redis.ClusterZoneDistributionConfigArgs{
				Mode: pulumi.String("SINGLE_ZONE"),
				Zone: pulumi.String("us-central1-f"),
			},
			MaintenancePolicy: &redis.ClusterMaintenancePolicyArgs{
				WeeklyMaintenanceWindows: redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArray{
					&redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs{
						Day: pulumi.String("MONDAY"),
						StartTime: &redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs{
							Hours:   pulumi.Int(1),
							Minutes: pulumi.Int(0),
							Seconds: pulumi.Int(0),
							Nanos:   pulumi.Int(0),
						},
					},
				},
			},
			DeletionProtectionEnabled: pulumi.Bool(true),
		}, pulumi.DependsOn([]pulumi.Resource{
			_default,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicy;
import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicyArgs;
import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConfigArgs;
import com.pulumi.gcp.redis.Cluster;
import com.pulumi.gcp.redis.ClusterArgs;
import com.pulumi.gcp.redis.inputs.ClusterPscConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterZoneDistributionConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterMaintenancePolicyArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var producerNet = new Network("producerNet", NetworkArgs.builder()
            .name("mynetwork")
            .autoCreateSubnetworks(false)
            .build());

        var producerSubnet = new Subnetwork("producerSubnet", SubnetworkArgs.builder()
            .name("mysubnet")
            .ipCidrRange("10.0.0.248/29")
            .region("us-central1")
            .network(producerNet.id())
            .build());

        var default_ = new ServiceConnectionPolicy("default", ServiceConnectionPolicyArgs.builder()
            .name("mypolicy")
            .location("us-central1")
            .serviceClass("gcp-memorystore-redis")
            .description("my basic service connection policy")
            .network(producerNet.id())
            .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
                .subnetworks(producerSubnet.id())
                .build())
            .build());

        var cluster_ha_single_zone = new Cluster("cluster-ha-single-zone", ClusterArgs.builder()
            .name("ha-cluster-single-zone")
            .shardCount(3)
            .pscConfigs(ClusterPscConfigArgs.builder()
                .network(producerNet.id())
                .build())
            .region("us-central1")
            .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
                .mode("SINGLE_ZONE")
                .zone("us-central1-f")
                .build())
            .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
                .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
                    .day("MONDAY")
                    .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
                        .hours(1)
                        .minutes(0)
                        .seconds(0)
                        .nanos(0)
                        .build())
                    .build())
                .build())
            .deletionProtectionEnabled(true)
            .build(), CustomResourceOptions.builder()
                .dependsOn(default_)
                .build());

    }
}
```
```yaml
resources:
  cluster-ha-single-zone:
    type: gcp:redis:Cluster
    properties:
      name: ha-cluster-single-zone
      shardCount: 3
      pscConfigs:
        - network: ${producerNet.id}
      region: us-central1
      zoneDistributionConfig:
        mode: SINGLE_ZONE
        zone: us-central1-f
      maintenancePolicy:
        weeklyMaintenanceWindows:
          - day: MONDAY
            startTime:
              hours: 1
              minutes: 0
              seconds: 0
              nanos: 0
      deletionProtectionEnabled: true
    options:
      dependsOn:
        - ${default}
  default:
    type: gcp:networkconnectivity:ServiceConnectionPolicy
    properties:
      name: mypolicy
      location: us-central1
      serviceClass: gcp-memorystore-redis
      description: my basic service connection policy
      network: ${producerNet.id}
      pscConfig:
        subnetworks:
          - ${producerSubnet.id}
  producerSubnet:
    type: gcp:compute:Subnetwork
    name: producer_subnet
    properties:
      name: mysubnet
      ipCidrRange: 10.0.0.248/29
      region: us-central1
      network: ${producerNet.id}
  producerNet:
    type: gcp:compute:Network
    name: producer_net
    properties:
      name: mynetwork
      autoCreateSubnetworks: false
```
<!--End PulumiCodeChooser -->
### Redis Cluster Secondary


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const producerNet = new gcp.compute.Network("producer_net", {
    name: "mynetwork",
    autoCreateSubnetworks: false,
});
const primaryClusterProducerSubnet = new gcp.compute.Subnetwork("primary_cluster_producer_subnet", {
    name: "mysubnet-primary-cluster",
    ipCidrRange: "10.0.1.0/29",
    region: "us-east1",
    network: producerNet.id,
});
const primaryClusterRegionScp = new gcp.networkconnectivity.ServiceConnectionPolicy("primary_cluster_region_scp", {
    name: "mypolicy-primary-cluster",
    location: "us-east1",
    serviceClass: "gcp-memorystore-redis",
    description: "Primary cluster service connection policy",
    network: producerNet.id,
    pscConfig: {
        subnetworks: [primaryClusterProducerSubnet.id],
    },
});
// Primary cluster
const primaryCluster = new gcp.redis.Cluster("primary_cluster", {
    name: "my-primary-cluster",
    region: "us-east1",
    pscConfigs: [{
        network: producerNet.id,
    }],
    authorizationMode: "AUTH_MODE_DISABLED",
    transitEncryptionMode: "TRANSIT_ENCRYPTION_MODE_DISABLED",
    shardCount: 3,
    redisConfigs: {
        "maxmemory-policy": "volatile-ttl",
    },
    nodeType: "REDIS_HIGHMEM_MEDIUM",
    persistenceConfig: {
        mode: "RDB",
        rdbConfig: {
            rdbSnapshotPeriod: "ONE_HOUR",
            rdbSnapshotStartTime: "2024-10-02T15:01:23Z",
        },
    },
    zoneDistributionConfig: {
        mode: "MULTI_ZONE",
    },
    replicaCount: 1,
    maintenancePolicy: {
        weeklyMaintenanceWindows: [{
            day: "MONDAY",
            startTime: {
                hours: 1,
                minutes: 0,
                seconds: 0,
                nanos: 0,
            },
        }],
    },
    deletionProtectionEnabled: true,
}, {
    dependsOn: [primaryClusterRegionScp],
});
const secondaryClusterProducerSubnet = new gcp.compute.Subnetwork("secondary_cluster_producer_subnet", {
    name: "mysubnet-secondary-cluster",
    ipCidrRange: "10.0.2.0/29",
    region: "europe-west1",
    network: producerNet.id,
});
const secondaryClusterRegionScp = new gcp.networkconnectivity.ServiceConnectionPolicy("secondary_cluster_region_scp", {
    name: "mypolicy-secondary-cluster",
    location: "europe-west1",
    serviceClass: "gcp-memorystore-redis",
    description: "Secondary cluster service connection policy",
    network: producerNet.id,
    pscConfig: {
        subnetworks: [secondaryClusterProducerSubnet.id],
    },
});
// Secondary cluster
const secondaryCluster = new gcp.redis.Cluster("secondary_cluster", {
    name: "my-secondary-cluster",
    region: "europe-west1",
    pscConfigs: [{
        network: producerNet.id,
    }],
    authorizationMode: "AUTH_MODE_DISABLED",
    transitEncryptionMode: "TRANSIT_ENCRYPTION_MODE_DISABLED",
    shardCount: 3,
    redisConfigs: {
        "maxmemory-policy": "volatile-ttl",
    },
    nodeType: "REDIS_HIGHMEM_MEDIUM",
    persistenceConfig: {
        mode: "RDB",
        rdbConfig: {
            rdbSnapshotPeriod: "ONE_HOUR",
            rdbSnapshotStartTime: "2024-10-02T15:01:23Z",
        },
    },
    zoneDistributionConfig: {
        mode: "MULTI_ZONE",
    },
    replicaCount: 2,
    maintenancePolicy: {
        weeklyMaintenanceWindows: [{
            day: "WEDNESDAY",
            startTime: {
                hours: 1,
                minutes: 0,
                seconds: 0,
                nanos: 0,
            },
        }],
    },
    deletionProtectionEnabled: true,
    crossClusterReplicationConfig: {
        clusterRole: "SECONDARY",
        primaryCluster: {
            cluster: primaryCluster.id,
        },
    },
}, {
    dependsOn: [secondaryClusterRegionScp],
});
```
```python
import pulumi
import pulumi_gcp as gcp

producer_net = gcp.compute.Network("producer_net",
    name="mynetwork",
    auto_create_subnetworks=False)
primary_cluster_producer_subnet = gcp.compute.Subnetwork("primary_cluster_producer_subnet",
    name="mysubnet-primary-cluster",
    ip_cidr_range="10.0.1.0/29",
    region="us-east1",
    network=producer_net.id)
primary_cluster_region_scp = gcp.networkconnectivity.ServiceConnectionPolicy("primary_cluster_region_scp",
    name="mypolicy-primary-cluster",
    location="us-east1",
    service_class="gcp-memorystore-redis",
    description="Primary cluster service connection policy",
    network=producer_net.id,
    psc_config={
        "subnetworks": [primary_cluster_producer_subnet.id],
    })
# Primary cluster
primary_cluster = gcp.redis.Cluster("primary_cluster",
    name="my-primary-cluster",
    region="us-east1",
    psc_configs=[{
        "network": producer_net.id,
    }],
    authorization_mode="AUTH_MODE_DISABLED",
    transit_encryption_mode="TRANSIT_ENCRYPTION_MODE_DISABLED",
    shard_count=3,
    redis_configs={
        "maxmemory-policy": "volatile-ttl",
    },
    node_type="REDIS_HIGHMEM_MEDIUM",
    persistence_config={
        "mode": "RDB",
        "rdb_config": {
            "rdb_snapshot_period": "ONE_HOUR",
            "rdb_snapshot_start_time": "2024-10-02T15:01:23Z",
        },
    },
    zone_distribution_config={
        "mode": "MULTI_ZONE",
    },
    replica_count=1,
    maintenance_policy={
        "weekly_maintenance_windows": [{
            "day": "MONDAY",
            "start_time": {
                "hours": 1,
                "minutes": 0,
                "seconds": 0,
                "nanos": 0,
            },
        }],
    },
    deletion_protection_enabled=True,
    opts = pulumi.ResourceOptions(depends_on=[primary_cluster_region_scp]))
secondary_cluster_producer_subnet = gcp.compute.Subnetwork("secondary_cluster_producer_subnet",
    name="mysubnet-secondary-cluster",
    ip_cidr_range="10.0.2.0/29",
    region="europe-west1",
    network=producer_net.id)
secondary_cluster_region_scp = gcp.networkconnectivity.ServiceConnectionPolicy("secondary_cluster_region_scp",
    name="mypolicy-secondary-cluster",
    location="europe-west1",
    service_class="gcp-memorystore-redis",
    description="Secondary cluster service connection policy",
    network=producer_net.id,
    psc_config={
        "subnetworks": [secondary_cluster_producer_subnet.id],
    })
# Secondary cluster
secondary_cluster = gcp.redis.Cluster("secondary_cluster",
    name="my-secondary-cluster",
    region="europe-west1",
    psc_configs=[{
        "network": producer_net.id,
    }],
    authorization_mode="AUTH_MODE_DISABLED",
    transit_encryption_mode="TRANSIT_ENCRYPTION_MODE_DISABLED",
    shard_count=3,
    redis_configs={
        "maxmemory-policy": "volatile-ttl",
    },
    node_type="REDIS_HIGHMEM_MEDIUM",
    persistence_config={
        "mode": "RDB",
        "rdb_config": {
            "rdb_snapshot_period": "ONE_HOUR",
            "rdb_snapshot_start_time": "2024-10-02T15:01:23Z",
        },
    },
    zone_distribution_config={
        "mode": "MULTI_ZONE",
    },
    replica_count=2,
    maintenance_policy={
        "weekly_maintenance_windows": [{
            "day": "WEDNESDAY",
            "start_time": {
                "hours": 1,
                "minutes": 0,
                "seconds": 0,
                "nanos": 0,
            },
        }],
    },
    deletion_protection_enabled=True,
    cross_cluster_replication_config={
        "cluster_role": "SECONDARY",
        "primary_cluster": {
            "cluster": primary_cluster.id,
        },
    },
    opts = pulumi.ResourceOptions(depends_on=[secondary_cluster_region_scp]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var producerNet = new Gcp.Compute.Network("producer_net", new()
    {
        Name = "mynetwork",
        AutoCreateSubnetworks = false,
    });

    var primaryClusterProducerSubnet = new Gcp.Compute.Subnetwork("primary_cluster_producer_subnet", new()
    {
        Name = "mysubnet-primary-cluster",
        IpCidrRange = "10.0.1.0/29",
        Region = "us-east1",
        Network = producerNet.Id,
    });

    var primaryClusterRegionScp = new Gcp.NetworkConnectivity.ServiceConnectionPolicy("primary_cluster_region_scp", new()
    {
        Name = "mypolicy-primary-cluster",
        Location = "us-east1",
        ServiceClass = "gcp-memorystore-redis",
        Description = "Primary cluster service connection policy",
        Network = producerNet.Id,
        PscConfig = new Gcp.NetworkConnectivity.Inputs.ServiceConnectionPolicyPscConfigArgs
        {
            Subnetworks = new[]
            {
                primaryClusterProducerSubnet.Id,
            },
        },
    });

    // Primary cluster
    var primaryCluster = new Gcp.Redis.Cluster("primary_cluster", new()
    {
        Name = "my-primary-cluster",
        Region = "us-east1",
        PscConfigs = new[]
        {
            new Gcp.Redis.Inputs.ClusterPscConfigArgs
            {
                Network = producerNet.Id,
            },
        },
        AuthorizationMode = "AUTH_MODE_DISABLED",
        TransitEncryptionMode = "TRANSIT_ENCRYPTION_MODE_DISABLED",
        ShardCount = 3,
        RedisConfigs = 
        {
            { "maxmemory-policy", "volatile-ttl" },
        },
        NodeType = "REDIS_HIGHMEM_MEDIUM",
        PersistenceConfig = new Gcp.Redis.Inputs.ClusterPersistenceConfigArgs
        {
            Mode = "RDB",
            RdbConfig = new Gcp.Redis.Inputs.ClusterPersistenceConfigRdbConfigArgs
            {
                RdbSnapshotPeriod = "ONE_HOUR",
                RdbSnapshotStartTime = "2024-10-02T15:01:23Z",
            },
        },
        ZoneDistributionConfig = new Gcp.Redis.Inputs.ClusterZoneDistributionConfigArgs
        {
            Mode = "MULTI_ZONE",
        },
        ReplicaCount = 1,
        MaintenancePolicy = new Gcp.Redis.Inputs.ClusterMaintenancePolicyArgs
        {
            WeeklyMaintenanceWindows = new[]
            {
                new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs
                {
                    Day = "MONDAY",
                    StartTime = new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs
                    {
                        Hours = 1,
                        Minutes = 0,
                        Seconds = 0,
                        Nanos = 0,
                    },
                },
            },
        },
        DeletionProtectionEnabled = true,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            primaryClusterRegionScp,
        },
    });

    var secondaryClusterProducerSubnet = new Gcp.Compute.Subnetwork("secondary_cluster_producer_subnet", new()
    {
        Name = "mysubnet-secondary-cluster",
        IpCidrRange = "10.0.2.0/29",
        Region = "europe-west1",
        Network = producerNet.Id,
    });

    var secondaryClusterRegionScp = new Gcp.NetworkConnectivity.ServiceConnectionPolicy("secondary_cluster_region_scp", new()
    {
        Name = "mypolicy-secondary-cluster",
        Location = "europe-west1",
        ServiceClass = "gcp-memorystore-redis",
        Description = "Secondary cluster service connection policy",
        Network = producerNet.Id,
        PscConfig = new Gcp.NetworkConnectivity.Inputs.ServiceConnectionPolicyPscConfigArgs
        {
            Subnetworks = new[]
            {
                secondaryClusterProducerSubnet.Id,
            },
        },
    });

    // Secondary cluster
    var secondaryCluster = new Gcp.Redis.Cluster("secondary_cluster", new()
    {
        Name = "my-secondary-cluster",
        Region = "europe-west1",
        PscConfigs = new[]
        {
            new Gcp.Redis.Inputs.ClusterPscConfigArgs
            {
                Network = producerNet.Id,
            },
        },
        AuthorizationMode = "AUTH_MODE_DISABLED",
        TransitEncryptionMode = "TRANSIT_ENCRYPTION_MODE_DISABLED",
        ShardCount = 3,
        RedisConfigs = 
        {
            { "maxmemory-policy", "volatile-ttl" },
        },
        NodeType = "REDIS_HIGHMEM_MEDIUM",
        PersistenceConfig = new Gcp.Redis.Inputs.ClusterPersistenceConfigArgs
        {
            Mode = "RDB",
            RdbConfig = new Gcp.Redis.Inputs.ClusterPersistenceConfigRdbConfigArgs
            {
                RdbSnapshotPeriod = "ONE_HOUR",
                RdbSnapshotStartTime = "2024-10-02T15:01:23Z",
            },
        },
        ZoneDistributionConfig = new Gcp.Redis.Inputs.ClusterZoneDistributionConfigArgs
        {
            Mode = "MULTI_ZONE",
        },
        ReplicaCount = 2,
        MaintenancePolicy = new Gcp.Redis.Inputs.ClusterMaintenancePolicyArgs
        {
            WeeklyMaintenanceWindows = new[]
            {
                new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs
                {
                    Day = "WEDNESDAY",
                    StartTime = new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs
                    {
                        Hours = 1,
                        Minutes = 0,
                        Seconds = 0,
                        Nanos = 0,
                    },
                },
            },
        },
        DeletionProtectionEnabled = true,
        CrossClusterReplicationConfig = new Gcp.Redis.Inputs.ClusterCrossClusterReplicationConfigArgs
        {
            ClusterRole = "SECONDARY",
            PrimaryCluster = new Gcp.Redis.Inputs.ClusterCrossClusterReplicationConfigPrimaryClusterArgs
            {
                Cluster = primaryCluster.Id,
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            secondaryClusterRegionScp,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkconnectivity"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		producerNet, err := compute.NewNetwork(ctx, "producer_net", &compute.NetworkArgs{
			Name:                  pulumi.String("mynetwork"),
			AutoCreateSubnetworks: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		primaryClusterProducerSubnet, err := compute.NewSubnetwork(ctx, "primary_cluster_producer_subnet", &compute.SubnetworkArgs{
			Name:        pulumi.String("mysubnet-primary-cluster"),
			IpCidrRange: pulumi.String("10.0.1.0/29"),
			Region:      pulumi.String("us-east1"),
			Network:     producerNet.ID(),
		})
		if err != nil {
			return err
		}
		primaryClusterRegionScp, err := networkconnectivity.NewServiceConnectionPolicy(ctx, "primary_cluster_region_scp", &networkconnectivity.ServiceConnectionPolicyArgs{
			Name:         pulumi.String("mypolicy-primary-cluster"),
			Location:     pulumi.String("us-east1"),
			ServiceClass: pulumi.String("gcp-memorystore-redis"),
			Description:  pulumi.String("Primary cluster service connection policy"),
			Network:      producerNet.ID(),
			PscConfig: &networkconnectivity.ServiceConnectionPolicyPscConfigArgs{
				Subnetworks: pulumi.StringArray{
					primaryClusterProducerSubnet.ID(),
				},
			},
		})
		if err != nil {
			return err
		}
		// Primary cluster
		primaryCluster, err := redis.NewCluster(ctx, "primary_cluster", &redis.ClusterArgs{
			Name:   pulumi.String("my-primary-cluster"),
			Region: pulumi.String("us-east1"),
			PscConfigs: redis.ClusterPscConfigArray{
				&redis.ClusterPscConfigArgs{
					Network: producerNet.ID(),
				},
			},
			AuthorizationMode:     pulumi.String("AUTH_MODE_DISABLED"),
			TransitEncryptionMode: pulumi.String("TRANSIT_ENCRYPTION_MODE_DISABLED"),
			ShardCount:            pulumi.Int(3),
			RedisConfigs: pulumi.StringMap{
				"maxmemory-policy": pulumi.String("volatile-ttl"),
			},
			NodeType: pulumi.String("REDIS_HIGHMEM_MEDIUM"),
			PersistenceConfig: &redis.ClusterPersistenceConfigArgs{
				Mode: pulumi.String("RDB"),
				RdbConfig: &redis.ClusterPersistenceConfigRdbConfigArgs{
					RdbSnapshotPeriod:    pulumi.String("ONE_HOUR"),
					RdbSnapshotStartTime: pulumi.String("2024-10-02T15:01:23Z"),
				},
			},
			ZoneDistributionConfig: &redis.ClusterZoneDistributionConfigArgs{
				Mode: pulumi.String("MULTI_ZONE"),
			},
			ReplicaCount: pulumi.Int(1),
			MaintenancePolicy: &redis.ClusterMaintenancePolicyArgs{
				WeeklyMaintenanceWindows: redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArray{
					&redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs{
						Day: pulumi.String("MONDAY"),
						StartTime: &redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs{
							Hours:   pulumi.Int(1),
							Minutes: pulumi.Int(0),
							Seconds: pulumi.Int(0),
							Nanos:   pulumi.Int(0),
						},
					},
				},
			},
			DeletionProtectionEnabled: pulumi.Bool(true),
		}, pulumi.DependsOn([]pulumi.Resource{
			primaryClusterRegionScp,
		}))
		if err != nil {
			return err
		}
		secondaryClusterProducerSubnet, err := compute.NewSubnetwork(ctx, "secondary_cluster_producer_subnet", &compute.SubnetworkArgs{
			Name:        pulumi.String("mysubnet-secondary-cluster"),
			IpCidrRange: pulumi.String("10.0.2.0/29"),
			Region:      pulumi.String("europe-west1"),
			Network:     producerNet.ID(),
		})
		if err != nil {
			return err
		}
		secondaryClusterRegionScp, err := networkconnectivity.NewServiceConnectionPolicy(ctx, "secondary_cluster_region_scp", &networkconnectivity.ServiceConnectionPolicyArgs{
			Name:         pulumi.String("mypolicy-secondary-cluster"),
			Location:     pulumi.String("europe-west1"),
			ServiceClass: pulumi.String("gcp-memorystore-redis"),
			Description:  pulumi.String("Secondary cluster service connection policy"),
			Network:      producerNet.ID(),
			PscConfig: &networkconnectivity.ServiceConnectionPolicyPscConfigArgs{
				Subnetworks: pulumi.StringArray{
					secondaryClusterProducerSubnet.ID(),
				},
			},
		})
		if err != nil {
			return err
		}
		// Secondary cluster
		_, err = redis.NewCluster(ctx, "secondary_cluster", &redis.ClusterArgs{
			Name:   pulumi.String("my-secondary-cluster"),
			Region: pulumi.String("europe-west1"),
			PscConfigs: redis.ClusterPscConfigArray{
				&redis.ClusterPscConfigArgs{
					Network: producerNet.ID(),
				},
			},
			AuthorizationMode:     pulumi.String("AUTH_MODE_DISABLED"),
			TransitEncryptionMode: pulumi.String("TRANSIT_ENCRYPTION_MODE_DISABLED"),
			ShardCount:            pulumi.Int(3),
			RedisConfigs: pulumi.StringMap{
				"maxmemory-policy": pulumi.String("volatile-ttl"),
			},
			NodeType: pulumi.String("REDIS_HIGHMEM_MEDIUM"),
			PersistenceConfig: &redis.ClusterPersistenceConfigArgs{
				Mode: pulumi.String("RDB"),
				RdbConfig: &redis.ClusterPersistenceConfigRdbConfigArgs{
					RdbSnapshotPeriod:    pulumi.String("ONE_HOUR"),
					RdbSnapshotStartTime: pulumi.String("2024-10-02T15:01:23Z"),
				},
			},
			ZoneDistributionConfig: &redis.ClusterZoneDistributionConfigArgs{
				Mode: pulumi.String("MULTI_ZONE"),
			},
			ReplicaCount: pulumi.Int(2),
			MaintenancePolicy: &redis.ClusterMaintenancePolicyArgs{
				WeeklyMaintenanceWindows: redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArray{
					&redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs{
						Day: pulumi.String("WEDNESDAY"),
						StartTime: &redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs{
							Hours:   pulumi.Int(1),
							Minutes: pulumi.Int(0),
							Seconds: pulumi.Int(0),
							Nanos:   pulumi.Int(0),
						},
					},
				},
			},
			DeletionProtectionEnabled: pulumi.Bool(true),
			CrossClusterReplicationConfig: &redis.ClusterCrossClusterReplicationConfigArgs{
				ClusterRole: pulumi.String("SECONDARY"),
				PrimaryCluster: &redis.ClusterCrossClusterReplicationConfigPrimaryClusterArgs{
					Cluster: primaryCluster.ID(),
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			secondaryClusterRegionScp,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicy;
import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicyArgs;
import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConfigArgs;
import com.pulumi.gcp.redis.Cluster;
import com.pulumi.gcp.redis.ClusterArgs;
import com.pulumi.gcp.redis.inputs.ClusterPscConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigRdbConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterZoneDistributionConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterMaintenancePolicyArgs;
import com.pulumi.gcp.redis.inputs.ClusterCrossClusterReplicationConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterCrossClusterReplicationConfigPrimaryClusterArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var producerNet = new Network("producerNet", NetworkArgs.builder()
            .name("mynetwork")
            .autoCreateSubnetworks(false)
            .build());

        var primaryClusterProducerSubnet = new Subnetwork("primaryClusterProducerSubnet", SubnetworkArgs.builder()
            .name("mysubnet-primary-cluster")
            .ipCidrRange("10.0.1.0/29")
            .region("us-east1")
            .network(producerNet.id())
            .build());

        var primaryClusterRegionScp = new ServiceConnectionPolicy("primaryClusterRegionScp", ServiceConnectionPolicyArgs.builder()
            .name("mypolicy-primary-cluster")
            .location("us-east1")
            .serviceClass("gcp-memorystore-redis")
            .description("Primary cluster service connection policy")
            .network(producerNet.id())
            .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
                .subnetworks(primaryClusterProducerSubnet.id())
                .build())
            .build());

        // Primary cluster
        var primaryCluster = new Cluster("primaryCluster", ClusterArgs.builder()
            .name("my-primary-cluster")
            .region("us-east1")
            .pscConfigs(ClusterPscConfigArgs.builder()
                .network(producerNet.id())
                .build())
            .authorizationMode("AUTH_MODE_DISABLED")
            .transitEncryptionMode("TRANSIT_ENCRYPTION_MODE_DISABLED")
            .shardCount(3)
            .redisConfigs(Map.of("maxmemory-policy", "volatile-ttl"))
            .nodeType("REDIS_HIGHMEM_MEDIUM")
            .persistenceConfig(ClusterPersistenceConfigArgs.builder()
                .mode("RDB")
                .rdbConfig(ClusterPersistenceConfigRdbConfigArgs.builder()
                    .rdbSnapshotPeriod("ONE_HOUR")
                    .rdbSnapshotStartTime("2024-10-02T15:01:23Z")
                    .build())
                .build())
            .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
                .mode("MULTI_ZONE")
                .build())
            .replicaCount(1)
            .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
                .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
                    .day("MONDAY")
                    .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
                        .hours(1)
                        .minutes(0)
                        .seconds(0)
                        .nanos(0)
                        .build())
                    .build())
                .build())
            .deletionProtectionEnabled(true)
            .build(), CustomResourceOptions.builder()
                .dependsOn(primaryClusterRegionScp)
                .build());

        var secondaryClusterProducerSubnet = new Subnetwork("secondaryClusterProducerSubnet", SubnetworkArgs.builder()
            .name("mysubnet-secondary-cluster")
            .ipCidrRange("10.0.2.0/29")
            .region("europe-west1")
            .network(producerNet.id())
            .build());

        var secondaryClusterRegionScp = new ServiceConnectionPolicy("secondaryClusterRegionScp", ServiceConnectionPolicyArgs.builder()
            .name("mypolicy-secondary-cluster")
            .location("europe-west1")
            .serviceClass("gcp-memorystore-redis")
            .description("Secondary cluster service connection policy")
            .network(producerNet.id())
            .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
                .subnetworks(secondaryClusterProducerSubnet.id())
                .build())
            .build());

        // Secondary cluster
        var secondaryCluster = new Cluster("secondaryCluster", ClusterArgs.builder()
            .name("my-secondary-cluster")
            .region("europe-west1")
            .pscConfigs(ClusterPscConfigArgs.builder()
                .network(producerNet.id())
                .build())
            .authorizationMode("AUTH_MODE_DISABLED")
            .transitEncryptionMode("TRANSIT_ENCRYPTION_MODE_DISABLED")
            .shardCount(3)
            .redisConfigs(Map.of("maxmemory-policy", "volatile-ttl"))
            .nodeType("REDIS_HIGHMEM_MEDIUM")
            .persistenceConfig(ClusterPersistenceConfigArgs.builder()
                .mode("RDB")
                .rdbConfig(ClusterPersistenceConfigRdbConfigArgs.builder()
                    .rdbSnapshotPeriod("ONE_HOUR")
                    .rdbSnapshotStartTime("2024-10-02T15:01:23Z")
                    .build())
                .build())
            .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
                .mode("MULTI_ZONE")
                .build())
            .replicaCount(2)
            .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
                .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
                    .day("WEDNESDAY")
                    .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
                        .hours(1)
                        .minutes(0)
                        .seconds(0)
                        .nanos(0)
                        .build())
                    .build())
                .build())
            .deletionProtectionEnabled(true)
            .crossClusterReplicationConfig(ClusterCrossClusterReplicationConfigArgs.builder()
                .clusterRole("SECONDARY")
                .primaryCluster(ClusterCrossClusterReplicationConfigPrimaryClusterArgs.builder()
                    .cluster(primaryCluster.id())
                    .build())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(secondaryClusterRegionScp)
                .build());

    }
}
```
```yaml
resources:
  # Primary cluster
  primaryCluster:
    type: gcp:redis:Cluster
    name: primary_cluster
    properties:
      name: my-primary-cluster
      region: us-east1
      pscConfigs:
        - network: ${producerNet.id}
      authorizationMode: AUTH_MODE_DISABLED
      transitEncryptionMode: TRANSIT_ENCRYPTION_MODE_DISABLED
      shardCount: 3
      redisConfigs:
        maxmemory-policy: volatile-ttl
      nodeType: REDIS_HIGHMEM_MEDIUM
      persistenceConfig:
        mode: RDB
        rdbConfig:
          rdbSnapshotPeriod: ONE_HOUR
          rdbSnapshotStartTime: 2024-10-02T15:01:23Z
      zoneDistributionConfig:
        mode: MULTI_ZONE
      replicaCount: 1
      maintenancePolicy:
        weeklyMaintenanceWindows:
          - day: MONDAY
            startTime:
              hours: 1
              minutes: 0
              seconds: 0
              nanos: 0
      deletionProtectionEnabled: true
    options:
      dependsOn:
        - ${primaryClusterRegionScp}
  # Secondary cluster
  secondaryCluster:
    type: gcp:redis:Cluster
    name: secondary_cluster
    properties:
      name: my-secondary-cluster
      region: europe-west1
      pscConfigs:
        - network: ${producerNet.id}
      authorizationMode: AUTH_MODE_DISABLED
      transitEncryptionMode: TRANSIT_ENCRYPTION_MODE_DISABLED
      shardCount: 3
      redisConfigs:
        maxmemory-policy: volatile-ttl
      nodeType: REDIS_HIGHMEM_MEDIUM
      persistenceConfig:
        mode: RDB
        rdbConfig:
          rdbSnapshotPeriod: ONE_HOUR
          rdbSnapshotStartTime: 2024-10-02T15:01:23Z
      zoneDistributionConfig:
        mode: MULTI_ZONE
      replicaCount: 2
      maintenancePolicy:
        weeklyMaintenanceWindows:
          - day: WEDNESDAY
            startTime:
              hours: 1
              minutes: 0
              seconds: 0
              nanos: 0
      deletionProtectionEnabled: true # Cross cluster replication config
      crossClusterReplicationConfig:
        clusterRole: SECONDARY
        primaryCluster:
          cluster: ${primaryCluster.id}
    options:
      dependsOn:
        - ${secondaryClusterRegionScp}
  primaryClusterRegionScp:
    type: gcp:networkconnectivity:ServiceConnectionPolicy
    name: primary_cluster_region_scp
    properties:
      name: mypolicy-primary-cluster
      location: us-east1
      serviceClass: gcp-memorystore-redis
      description: Primary cluster service connection policy
      network: ${producerNet.id}
      pscConfig:
        subnetworks:
          - ${primaryClusterProducerSubnet.id}
  primaryClusterProducerSubnet:
    type: gcp:compute:Subnetwork
    name: primary_cluster_producer_subnet
    properties:
      name: mysubnet-primary-cluster
      ipCidrRange: 10.0.1.0/29
      region: us-east1
      network: ${producerNet.id}
  secondaryClusterRegionScp:
    type: gcp:networkconnectivity:ServiceConnectionPolicy
    name: secondary_cluster_region_scp
    properties:
      name: mypolicy-secondary-cluster
      location: europe-west1
      serviceClass: gcp-memorystore-redis
      description: Secondary cluster service connection policy
      network: ${producerNet.id}
      pscConfig:
        subnetworks:
          - ${secondaryClusterProducerSubnet.id}
  secondaryClusterProducerSubnet:
    type: gcp:compute:Subnetwork
    name: secondary_cluster_producer_subnet
    properties:
      name: mysubnet-secondary-cluster
      ipCidrRange: 10.0.2.0/29
      region: europe-west1
      network: ${producerNet.id}
  producerNet:
    type: gcp:compute:Network
    name: producer_net
    properties:
      name: mynetwork
      autoCreateSubnetworks: false
```
<!--End PulumiCodeChooser -->
### Redis Cluster Rdb


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const producerNet = new gcp.compute.Network("producer_net", {
    name: "mynetwork",
    autoCreateSubnetworks: false,
});
const producerSubnet = new gcp.compute.Subnetwork("producer_subnet", {
    name: "mysubnet",
    ipCidrRange: "10.0.0.248/29",
    region: "us-central1",
    network: producerNet.id,
});
const _default = new gcp.networkconnectivity.ServiceConnectionPolicy("default", {
    name: "mypolicy",
    location: "us-central1",
    serviceClass: "gcp-memorystore-redis",
    description: "my basic service connection policy",
    network: producerNet.id,
    pscConfig: {
        subnetworks: [producerSubnet.id],
    },
});
const cluster_rdb = new gcp.redis.Cluster("cluster-rdb", {
    name: "rdb-cluster",
    shardCount: 3,
    pscConfigs: [{
        network: producerNet.id,
    }],
    region: "us-central1",
    replicaCount: 0,
    nodeType: "REDIS_SHARED_CORE_NANO",
    transitEncryptionMode: "TRANSIT_ENCRYPTION_MODE_DISABLED",
    authorizationMode: "AUTH_MODE_DISABLED",
    redisConfigs: {
        "maxmemory-policy": "volatile-ttl",
    },
    deletionProtectionEnabled: true,
    zoneDistributionConfig: {
        mode: "MULTI_ZONE",
    },
    maintenancePolicy: {
        weeklyMaintenanceWindows: [{
            day: "MONDAY",
            startTime: {
                hours: 1,
                minutes: 0,
                seconds: 0,
                nanos: 0,
            },
        }],
    },
    persistenceConfig: {
        mode: "RDB",
        rdbConfig: {
            rdbSnapshotPeriod: "ONE_HOUR",
            rdbSnapshotStartTime: "2024-10-02T15:01:23Z",
        },
    },
}, {
    dependsOn: [_default],
});
```
```python
import pulumi
import pulumi_gcp as gcp

producer_net = gcp.compute.Network("producer_net",
    name="mynetwork",
    auto_create_subnetworks=False)
producer_subnet = gcp.compute.Subnetwork("producer_subnet",
    name="mysubnet",
    ip_cidr_range="10.0.0.248/29",
    region="us-central1",
    network=producer_net.id)
default = gcp.networkconnectivity.ServiceConnectionPolicy("default",
    name="mypolicy",
    location="us-central1",
    service_class="gcp-memorystore-redis",
    description="my basic service connection policy",
    network=producer_net.id,
    psc_config={
        "subnetworks": [producer_subnet.id],
    })
cluster_rdb = gcp.redis.Cluster("cluster-rdb",
    name="rdb-cluster",
    shard_count=3,
    psc_configs=[{
        "network": producer_net.id,
    }],
    region="us-central1",
    replica_count=0,
    node_type="REDIS_SHARED_CORE_NANO",
    transit_encryption_mode="TRANSIT_ENCRYPTION_MODE_DISABLED",
    authorization_mode="AUTH_MODE_DISABLED",
    redis_configs={
        "maxmemory-policy": "volatile-ttl",
    },
    deletion_protection_enabled=True,
    zone_distribution_config={
        "mode": "MULTI_ZONE",
    },
    maintenance_policy={
        "weekly_maintenance_windows": [{
            "day": "MONDAY",
            "start_time": {
                "hours": 1,
                "minutes": 0,
                "seconds": 0,
                "nanos": 0,
            },
        }],
    },
    persistence_config={
        "mode": "RDB",
        "rdb_config": {
            "rdb_snapshot_period": "ONE_HOUR",
            "rdb_snapshot_start_time": "2024-10-02T15:01:23Z",
        },
    },
    opts = pulumi.ResourceOptions(depends_on=[default]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var producerNet = new Gcp.Compute.Network("producer_net", new()
    {
        Name = "mynetwork",
        AutoCreateSubnetworks = false,
    });

    var producerSubnet = new Gcp.Compute.Subnetwork("producer_subnet", new()
    {
        Name = "mysubnet",
        IpCidrRange = "10.0.0.248/29",
        Region = "us-central1",
        Network = producerNet.Id,
    });

    var @default = new Gcp.NetworkConnectivity.ServiceConnectionPolicy("default", new()
    {
        Name = "mypolicy",
        Location = "us-central1",
        ServiceClass = "gcp-memorystore-redis",
        Description = "my basic service connection policy",
        Network = producerNet.Id,
        PscConfig = new Gcp.NetworkConnectivity.Inputs.ServiceConnectionPolicyPscConfigArgs
        {
            Subnetworks = new[]
            {
                producerSubnet.Id,
            },
        },
    });

    var cluster_rdb = new Gcp.Redis.Cluster("cluster-rdb", new()
    {
        Name = "rdb-cluster",
        ShardCount = 3,
        PscConfigs = new[]
        {
            new Gcp.Redis.Inputs.ClusterPscConfigArgs
            {
                Network = producerNet.Id,
            },
        },
        Region = "us-central1",
        ReplicaCount = 0,
        NodeType = "REDIS_SHARED_CORE_NANO",
        TransitEncryptionMode = "TRANSIT_ENCRYPTION_MODE_DISABLED",
        AuthorizationMode = "AUTH_MODE_DISABLED",
        RedisConfigs = 
        {
            { "maxmemory-policy", "volatile-ttl" },
        },
        DeletionProtectionEnabled = true,
        ZoneDistributionConfig = new Gcp.Redis.Inputs.ClusterZoneDistributionConfigArgs
        {
            Mode = "MULTI_ZONE",
        },
        MaintenancePolicy = new Gcp.Redis.Inputs.ClusterMaintenancePolicyArgs
        {
            WeeklyMaintenanceWindows = new[]
            {
                new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs
                {
                    Day = "MONDAY",
                    StartTime = new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs
                    {
                        Hours = 1,
                        Minutes = 0,
                        Seconds = 0,
                        Nanos = 0,
                    },
                },
            },
        },
        PersistenceConfig = new Gcp.Redis.Inputs.ClusterPersistenceConfigArgs
        {
            Mode = "RDB",
            RdbConfig = new Gcp.Redis.Inputs.ClusterPersistenceConfigRdbConfigArgs
            {
                RdbSnapshotPeriod = "ONE_HOUR",
                RdbSnapshotStartTime = "2024-10-02T15:01:23Z",
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            @default,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkconnectivity"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		producerNet, err := compute.NewNetwork(ctx, "producer_net", &compute.NetworkArgs{
			Name:                  pulumi.String("mynetwork"),
			AutoCreateSubnetworks: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		producerSubnet, err := compute.NewSubnetwork(ctx, "producer_subnet", &compute.SubnetworkArgs{
			Name:        pulumi.String("mysubnet"),
			IpCidrRange: pulumi.String("10.0.0.248/29"),
			Region:      pulumi.String("us-central1"),
			Network:     producerNet.ID(),
		})
		if err != nil {
			return err
		}
		_, err = networkconnectivity.NewServiceConnectionPolicy(ctx, "default", &networkconnectivity.ServiceConnectionPolicyArgs{
			Name:         pulumi.String("mypolicy"),
			Location:     pulumi.String("us-central1"),
			ServiceClass: pulumi.String("gcp-memorystore-redis"),
			Description:  pulumi.String("my basic service connection policy"),
			Network:      producerNet.ID(),
			PscConfig: &networkconnectivity.ServiceConnectionPolicyPscConfigArgs{
				Subnetworks: pulumi.StringArray{
					producerSubnet.ID(),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = redis.NewCluster(ctx, "cluster-rdb", &redis.ClusterArgs{
			Name:       pulumi.String("rdb-cluster"),
			ShardCount: pulumi.Int(3),
			PscConfigs: redis.ClusterPscConfigArray{
				&redis.ClusterPscConfigArgs{
					Network: producerNet.ID(),
				},
			},
			Region:                pulumi.String("us-central1"),
			ReplicaCount:          pulumi.Int(0),
			NodeType:              pulumi.String("REDIS_SHARED_CORE_NANO"),
			TransitEncryptionMode: pulumi.String("TRANSIT_ENCRYPTION_MODE_DISABLED"),
			AuthorizationMode:     pulumi.String("AUTH_MODE_DISABLED"),
			RedisConfigs: pulumi.StringMap{
				"maxmemory-policy": pulumi.String("volatile-ttl"),
			},
			DeletionProtectionEnabled: pulumi.Bool(true),
			ZoneDistributionConfig: &redis.ClusterZoneDistributionConfigArgs{
				Mode: pulumi.String("MULTI_ZONE"),
			},
			MaintenancePolicy: &redis.ClusterMaintenancePolicyArgs{
				WeeklyMaintenanceWindows: redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArray{
					&redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs{
						Day: pulumi.String("MONDAY"),
						StartTime: &redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs{
							Hours:   pulumi.Int(1),
							Minutes: pulumi.Int(0),
							Seconds: pulumi.Int(0),
							Nanos:   pulumi.Int(0),
						},
					},
				},
			},
			PersistenceConfig: &redis.ClusterPersistenceConfigArgs{
				Mode: pulumi.String("RDB"),
				RdbConfig: &redis.ClusterPersistenceConfigRdbConfigArgs{
					RdbSnapshotPeriod:    pulumi.String("ONE_HOUR"),
					RdbSnapshotStartTime: pulumi.String("2024-10-02T15:01:23Z"),
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			_default,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicy;
import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicyArgs;
import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConfigArgs;
import com.pulumi.gcp.redis.Cluster;
import com.pulumi.gcp.redis.ClusterArgs;
import com.pulumi.gcp.redis.inputs.ClusterPscConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterZoneDistributionConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterMaintenancePolicyArgs;
import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigRdbConfigArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var producerNet = new Network("producerNet", NetworkArgs.builder()
            .name("mynetwork")
            .autoCreateSubnetworks(false)
            .build());

        var producerSubnet = new Subnetwork("producerSubnet", SubnetworkArgs.builder()
            .name("mysubnet")
            .ipCidrRange("10.0.0.248/29")
            .region("us-central1")
            .network(producerNet.id())
            .build());

        var default_ = new ServiceConnectionPolicy("default", ServiceConnectionPolicyArgs.builder()
            .name("mypolicy")
            .location("us-central1")
            .serviceClass("gcp-memorystore-redis")
            .description("my basic service connection policy")
            .network(producerNet.id())
            .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
                .subnetworks(producerSubnet.id())
                .build())
            .build());

        var cluster_rdb = new Cluster("cluster-rdb", ClusterArgs.builder()
            .name("rdb-cluster")
            .shardCount(3)
            .pscConfigs(ClusterPscConfigArgs.builder()
                .network(producerNet.id())
                .build())
            .region("us-central1")
            .replicaCount(0)
            .nodeType("REDIS_SHARED_CORE_NANO")
            .transitEncryptionMode("TRANSIT_ENCRYPTION_MODE_DISABLED")
            .authorizationMode("AUTH_MODE_DISABLED")
            .redisConfigs(Map.of("maxmemory-policy", "volatile-ttl"))
            .deletionProtectionEnabled(true)
            .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
                .mode("MULTI_ZONE")
                .build())
            .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
                .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
                    .day("MONDAY")
                    .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
                        .hours(1)
                        .minutes(0)
                        .seconds(0)
                        .nanos(0)
                        .build())
                    .build())
                .build())
            .persistenceConfig(ClusterPersistenceConfigArgs.builder()
                .mode("RDB")
                .rdbConfig(ClusterPersistenceConfigRdbConfigArgs.builder()
                    .rdbSnapshotPeriod("ONE_HOUR")
                    .rdbSnapshotStartTime("2024-10-02T15:01:23Z")
                    .build())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(default_)
                .build());

    }
}
```
```yaml
resources:
  cluster-rdb:
    type: gcp:redis:Cluster
    properties:
      name: rdb-cluster
      shardCount: 3
      pscConfigs:
        - network: ${producerNet.id}
      region: us-central1
      replicaCount: 0
      nodeType: REDIS_SHARED_CORE_NANO
      transitEncryptionMode: TRANSIT_ENCRYPTION_MODE_DISABLED
      authorizationMode: AUTH_MODE_DISABLED
      redisConfigs:
        maxmemory-policy: volatile-ttl
      deletionProtectionEnabled: true
      zoneDistributionConfig:
        mode: MULTI_ZONE
      maintenancePolicy:
        weeklyMaintenanceWindows:
          - day: MONDAY
            startTime:
              hours: 1
              minutes: 0
              seconds: 0
              nanos: 0
      persistenceConfig:
        mode: RDB
        rdbConfig:
          rdbSnapshotPeriod: ONE_HOUR
          rdbSnapshotStartTime: 2024-10-02T15:01:23Z
    options:
      dependsOn:
        - ${default}
  default:
    type: gcp:networkconnectivity:ServiceConnectionPolicy
    properties:
      name: mypolicy
      location: us-central1
      serviceClass: gcp-memorystore-redis
      description: my basic service connection policy
      network: ${producerNet.id}
      pscConfig:
        subnetworks:
          - ${producerSubnet.id}
  producerSubnet:
    type: gcp:compute:Subnetwork
    name: producer_subnet
    properties:
      name: mysubnet
      ipCidrRange: 10.0.0.248/29
      region: us-central1
      network: ${producerNet.id}
  producerNet:
    type: gcp:compute:Network
    name: producer_net
    properties:
      name: mynetwork
      autoCreateSubnetworks: false
```
<!--End PulumiCodeChooser -->
### Redis Cluster Aof


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const producerNet = new gcp.compute.Network("producer_net", {
    name: "mynetwork",
    autoCreateSubnetworks: false,
});
const producerSubnet = new gcp.compute.Subnetwork("producer_subnet", {
    name: "mysubnet",
    ipCidrRange: "10.0.0.248/29",
    region: "us-central1",
    network: producerNet.id,
});
const _default = new gcp.networkconnectivity.ServiceConnectionPolicy("default", {
    name: "mypolicy",
    location: "us-central1",
    serviceClass: "gcp-memorystore-redis",
    description: "my basic service connection policy",
    network: producerNet.id,
    pscConfig: {
        subnetworks: [producerSubnet.id],
    },
});
const cluster_aof = new gcp.redis.Cluster("cluster-aof", {
    name: "aof-cluster",
    shardCount: 3,
    pscConfigs: [{
        network: producerNet.id,
    }],
    region: "us-central1",
    replicaCount: 0,
    nodeType: "REDIS_SHARED_CORE_NANO",
    transitEncryptionMode: "TRANSIT_ENCRYPTION_MODE_DISABLED",
    authorizationMode: "AUTH_MODE_DISABLED",
    redisConfigs: {
        "maxmemory-policy": "volatile-ttl",
    },
    deletionProtectionEnabled: true,
    zoneDistributionConfig: {
        mode: "MULTI_ZONE",
    },
    maintenancePolicy: {
        weeklyMaintenanceWindows: [{
            day: "MONDAY",
            startTime: {
                hours: 1,
                minutes: 0,
                seconds: 0,
                nanos: 0,
            },
        }],
    },
    persistenceConfig: {
        mode: "AOF",
        aofConfig: {
            appendFsync: "EVERYSEC",
        },
    },
}, {
    dependsOn: [_default],
});
```
```python
import pulumi
import pulumi_gcp as gcp

producer_net = gcp.compute.Network("producer_net",
    name="mynetwork",
    auto_create_subnetworks=False)
producer_subnet = gcp.compute.Subnetwork("producer_subnet",
    name="mysubnet",
    ip_cidr_range="10.0.0.248/29",
    region="us-central1",
    network=producer_net.id)
default = gcp.networkconnectivity.ServiceConnectionPolicy("default",
    name="mypolicy",
    location="us-central1",
    service_class="gcp-memorystore-redis",
    description="my basic service connection policy",
    network=producer_net.id,
    psc_config={
        "subnetworks": [producer_subnet.id],
    })
cluster_aof = gcp.redis.Cluster("cluster-aof",
    name="aof-cluster",
    shard_count=3,
    psc_configs=[{
        "network": producer_net.id,
    }],
    region="us-central1",
    replica_count=0,
    node_type="REDIS_SHARED_CORE_NANO",
    transit_encryption_mode="TRANSIT_ENCRYPTION_MODE_DISABLED",
    authorization_mode="AUTH_MODE_DISABLED",
    redis_configs={
        "maxmemory-policy": "volatile-ttl",
    },
    deletion_protection_enabled=True,
    zone_distribution_config={
        "mode": "MULTI_ZONE",
    },
    maintenance_policy={
        "weekly_maintenance_windows": [{
            "day": "MONDAY",
            "start_time": {
                "hours": 1,
                "minutes": 0,
                "seconds": 0,
                "nanos": 0,
            },
        }],
    },
    persistence_config={
        "mode": "AOF",
        "aof_config": {
            "append_fsync": "EVERYSEC",
        },
    },
    opts = pulumi.ResourceOptions(depends_on=[default]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var producerNet = new Gcp.Compute.Network("producer_net", new()
    {
        Name = "mynetwork",
        AutoCreateSubnetworks = false,
    });

    var producerSubnet = new Gcp.Compute.Subnetwork("producer_subnet", new()
    {
        Name = "mysubnet",
        IpCidrRange = "10.0.0.248/29",
        Region = "us-central1",
        Network = producerNet.Id,
    });

    var @default = new Gcp.NetworkConnectivity.ServiceConnectionPolicy("default", new()
    {
        Name = "mypolicy",
        Location = "us-central1",
        ServiceClass = "gcp-memorystore-redis",
        Description = "my basic service connection policy",
        Network = producerNet.Id,
        PscConfig = new Gcp.NetworkConnectivity.Inputs.ServiceConnectionPolicyPscConfigArgs
        {
            Subnetworks = new[]
            {
                producerSubnet.Id,
            },
        },
    });

    var cluster_aof = new Gcp.Redis.Cluster("cluster-aof", new()
    {
        Name = "aof-cluster",
        ShardCount = 3,
        PscConfigs = new[]
        {
            new Gcp.Redis.Inputs.ClusterPscConfigArgs
            {
                Network = producerNet.Id,
            },
        },
        Region = "us-central1",
        ReplicaCount = 0,
        NodeType = "REDIS_SHARED_CORE_NANO",
        TransitEncryptionMode = "TRANSIT_ENCRYPTION_MODE_DISABLED",
        AuthorizationMode = "AUTH_MODE_DISABLED",
        RedisConfigs = 
        {
            { "maxmemory-policy", "volatile-ttl" },
        },
        DeletionProtectionEnabled = true,
        ZoneDistributionConfig = new Gcp.Redis.Inputs.ClusterZoneDistributionConfigArgs
        {
            Mode = "MULTI_ZONE",
        },
        MaintenancePolicy = new Gcp.Redis.Inputs.ClusterMaintenancePolicyArgs
        {
            WeeklyMaintenanceWindows = new[]
            {
                new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs
                {
                    Day = "MONDAY",
                    StartTime = new Gcp.Redis.Inputs.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs
                    {
                        Hours = 1,
                        Minutes = 0,
                        Seconds = 0,
                        Nanos = 0,
                    },
                },
            },
        },
        PersistenceConfig = new Gcp.Redis.Inputs.ClusterPersistenceConfigArgs
        {
            Mode = "AOF",
            AofConfig = new Gcp.Redis.Inputs.ClusterPersistenceConfigAofConfigArgs
            {
                AppendFsync = "EVERYSEC",
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            @default,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/networkconnectivity"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		producerNet, err := compute.NewNetwork(ctx, "producer_net", &compute.NetworkArgs{
			Name:                  pulumi.String("mynetwork"),
			AutoCreateSubnetworks: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		producerSubnet, err := compute.NewSubnetwork(ctx, "producer_subnet", &compute.SubnetworkArgs{
			Name:        pulumi.String("mysubnet"),
			IpCidrRange: pulumi.String("10.0.0.248/29"),
			Region:      pulumi.String("us-central1"),
			Network:     producerNet.ID(),
		})
		if err != nil {
			return err
		}
		_, err = networkconnectivity.NewServiceConnectionPolicy(ctx, "default", &networkconnectivity.ServiceConnectionPolicyArgs{
			Name:         pulumi.String("mypolicy"),
			Location:     pulumi.String("us-central1"),
			ServiceClass: pulumi.String("gcp-memorystore-redis"),
			Description:  pulumi.String("my basic service connection policy"),
			Network:      producerNet.ID(),
			PscConfig: &networkconnectivity.ServiceConnectionPolicyPscConfigArgs{
				Subnetworks: pulumi.StringArray{
					producerSubnet.ID(),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = redis.NewCluster(ctx, "cluster-aof", &redis.ClusterArgs{
			Name:       pulumi.String("aof-cluster"),
			ShardCount: pulumi.Int(3),
			PscConfigs: redis.ClusterPscConfigArray{
				&redis.ClusterPscConfigArgs{
					Network: producerNet.ID(),
				},
			},
			Region:                pulumi.String("us-central1"),
			ReplicaCount:          pulumi.Int(0),
			NodeType:              pulumi.String("REDIS_SHARED_CORE_NANO"),
			TransitEncryptionMode: pulumi.String("TRANSIT_ENCRYPTION_MODE_DISABLED"),
			AuthorizationMode:     pulumi.String("AUTH_MODE_DISABLED"),
			RedisConfigs: pulumi.StringMap{
				"maxmemory-policy": pulumi.String("volatile-ttl"),
			},
			DeletionProtectionEnabled: pulumi.Bool(true),
			ZoneDistributionConfig: &redis.ClusterZoneDistributionConfigArgs{
				Mode: pulumi.String("MULTI_ZONE"),
			},
			MaintenancePolicy: &redis.ClusterMaintenancePolicyArgs{
				WeeklyMaintenanceWindows: redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArray{
					&redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs{
						Day: pulumi.String("MONDAY"),
						StartTime: &redis.ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs{
							Hours:   pulumi.Int(1),
							Minutes: pulumi.Int(0),
							Seconds: pulumi.Int(0),
							Nanos:   pulumi.Int(0),
						},
					},
				},
			},
			PersistenceConfig: &redis.ClusterPersistenceConfigArgs{
				Mode: pulumi.String("AOF"),
				AofConfig: &redis.ClusterPersistenceConfigAofConfigArgs{
					AppendFsync: pulumi.String("EVERYSEC"),
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			_default,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicy;
import com.pulumi.gcp.networkconnectivity.ServiceConnectionPolicyArgs;
import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConfigArgs;
import com.pulumi.gcp.redis.Cluster;
import com.pulumi.gcp.redis.ClusterArgs;
import com.pulumi.gcp.redis.inputs.ClusterPscConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterZoneDistributionConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterMaintenancePolicyArgs;
import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigArgs;
import com.pulumi.gcp.redis.inputs.ClusterPersistenceConfigAofConfigArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var producerNet = new Network("producerNet", NetworkArgs.builder()
            .name("mynetwork")
            .autoCreateSubnetworks(false)
            .build());

        var producerSubnet = new Subnetwork("producerSubnet", SubnetworkArgs.builder()
            .name("mysubnet")
            .ipCidrRange("10.0.0.248/29")
            .region("us-central1")
            .network(producerNet.id())
            .build());

        var default_ = new ServiceConnectionPolicy("default", ServiceConnectionPolicyArgs.builder()
            .name("mypolicy")
            .location("us-central1")
            .serviceClass("gcp-memorystore-redis")
            .description("my basic service connection policy")
            .network(producerNet.id())
            .pscConfig(ServiceConnectionPolicyPscConfigArgs.builder()
                .subnetworks(producerSubnet.id())
                .build())
            .build());

        var cluster_aof = new Cluster("cluster-aof", ClusterArgs.builder()
            .name("aof-cluster")
            .shardCount(3)
            .pscConfigs(ClusterPscConfigArgs.builder()
                .network(producerNet.id())
                .build())
            .region("us-central1")
            .replicaCount(0)
            .nodeType("REDIS_SHARED_CORE_NANO")
            .transitEncryptionMode("TRANSIT_ENCRYPTION_MODE_DISABLED")
            .authorizationMode("AUTH_MODE_DISABLED")
            .redisConfigs(Map.of("maxmemory-policy", "volatile-ttl"))
            .deletionProtectionEnabled(true)
            .zoneDistributionConfig(ClusterZoneDistributionConfigArgs.builder()
                .mode("MULTI_ZONE")
                .build())
            .maintenancePolicy(ClusterMaintenancePolicyArgs.builder()
                .weeklyMaintenanceWindows(ClusterMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
                    .day("MONDAY")
                    .startTime(ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
                        .hours(1)
                        .minutes(0)
                        .seconds(0)
                        .nanos(0)
                        .build())
                    .build())
                .build())
            .persistenceConfig(ClusterPersistenceConfigArgs.builder()
                .mode("AOF")
                .aofConfig(ClusterPersistenceConfigAofConfigArgs.builder()
                    .appendFsync("EVERYSEC")
                    .build())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(default_)
                .build());

    }
}
```
```yaml
resources:
  cluster-aof:
    type: gcp:redis:Cluster
    properties:
      name: aof-cluster
      shardCount: 3
      pscConfigs:
        - network: ${producerNet.id}
      region: us-central1
      replicaCount: 0
      nodeType: REDIS_SHARED_CORE_NANO
      transitEncryptionMode: TRANSIT_ENCRYPTION_MODE_DISABLED
      authorizationMode: AUTH_MODE_DISABLED
      redisConfigs:
        maxmemory-policy: volatile-ttl
      deletionProtectionEnabled: true
      zoneDistributionConfig:
        mode: MULTI_ZONE
      maintenancePolicy:
        weeklyMaintenanceWindows:
          - day: MONDAY
            startTime:
              hours: 1
              minutes: 0
              seconds: 0
              nanos: 0
      persistenceConfig:
        mode: AOF
        aofConfig:
          appendFsync: EVERYSEC
    options:
      dependsOn:
        - ${default}
  default:
    type: gcp:networkconnectivity:ServiceConnectionPolicy
    properties:
      name: mypolicy
      location: us-central1
      serviceClass: gcp-memorystore-redis
      description: my basic service connection policy
      network: ${producerNet.id}
      pscConfig:
        subnetworks:
          - ${producerSubnet.id}
  producerSubnet:
    type: gcp:compute:Subnetwork
    name: producer_subnet
    properties:
      name: mysubnet
      ipCidrRange: 10.0.0.248/29
      region: us-central1
      network: ${producerNet.id}
  producerNet:
    type: gcp:compute:Network
    name: producer_net
    properties:
      name: mynetwork
      autoCreateSubnetworks: false
```
<!--End PulumiCodeChooser -->

## Import

Cluster can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/clusters/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Cluster can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:redis/cluster:Cluster default projects/{{project}}/locations/{{region}}/clusters/{{name}}
```

```sh
$ pulumi import gcp:redis/cluster:Cluster default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:redis/cluster:Cluster default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:redis/cluster:Cluster default {{name}}
```

Ѕ
authorizationModeB" ьOptional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
Default value: "AUTH_MODE_DISABLED" Possible values: ["AUTH_MODE_UNSPECIFIED", "AUTH_MODE_IAM_AUTH",
"AUTH_MODE_DISABLED"]
л
crossClusterReplicationConfigІBѕ:Ё
ѓ
redis$ClusterCrossClusterReplicationConfigSgcp:redis/ClusterCrossClusterReplicationConfig:ClusterCrossClusterReplicationConfig!Cross cluster replication config
┴
deletionProtectionEnabledB
 ЮOptional. Indicates if the cluster is deletion protected or not. If the value if set to true, any delete cluster
operation will fail. Default value is true.
ю
maintenancePolicydBb:`
^
redisClusterMaintenancePolicy;gcp:redis/ClusterMaintenancePolicy:ClusterMaintenancePolicy!Maintenance policy for a cluster
Е
nameB" џUnique name of the resource in this scope including project and location using the form:
projects/{projectId}/locations/{locationId}/clusters/{clusterId}
ж
nodeTypeB" оThe nodeType for the Redis cluster. If not provided, REDIS_HIGHMEM_MEDIUM will be used as default Possible values:
["REDIS_SHARED_CORE_NANO", "REDIS_HIGHMEM_MEDIUM", "REDIS_HIGHMEM_XLARGE", "REDIS_STANDARD_SMALL"]
ф
persistenceConfigdBb:`
^
redisClusterPersistenceConfig;gcp:redis/ClusterPersistenceConfig:ClusterPersistenceConfig/Persistence config (RDB, AOF) for the cluster.

projectB" ▓

pscConfigsL*J:H
F
redisClusterPscConfig+gcp:redis/ClusterPscConfig:ClusterPscConfigНRequired. Each PscConfig configures the consumer network where two
network addresses will be designated to the cluster for client access.
Currently, only one PscConfig is supported.
Structure is documented below.
ћ
redisConfigsB2" чConfigure Redis Cluster behavior using a subset of native Redis configuration parameters. Please check Memorystore
documentation for the list of supported parameters:
https://cloud.google.com/memorystore/docs/cluster/supported-instance-configurations
=
regionB" -The name of the region of the Redis cluster.
G
replicaCountB 1Optional. The number of replica nodes per shard.
D

shardCount 2Required. Number of shards for the Redis cluster.
н
transitEncryptionModeB" ┤Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
Default value: "TRANSIT_ENCRYPTION_MODE_DISABLED" Possible values: ["TRANSIT_ENCRYPTION_MODE_UNSPECIFIED",
"TRANSIT_ENCRYPTION_MODE_DISABLED", "TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION"]
м
zoneDistributionConfigsBq:o
m
redisClusterZoneDistributionConfigEgcp:redis/ClusterZoneDistributionConfig:ClusterZoneDistributionConfigCImmutable. Zone distribution config for Memorystore Redis cluster.
"Ѕ
authorizationModeB" ьOptional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
Default value: "AUTH_MODE_DISABLED" Possible values: ["AUTH_MODE_UNSPECIFIED", "AUTH_MODE_IAM_AUTH",
"AUTH_MODE_DISABLED"]
"§

createTime" ЖThe timestamp associated with the cluster creation request. A timestamp in
RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional
digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"═
crossClusterReplicationConfigѕ:Ё
ѓ
redis$ClusterCrossClusterReplicationConfigSgcp:redis/ClusterCrossClusterReplicationConfig:ClusterCrossClusterReplicationConfig!Cross cluster replication config
"┴
deletionProtectionEnabledB
 ЮOptional. Indicates if the cluster is deletion protected or not. If the value if set to true, any delete cluster
operation will fail. Default value is true.
"Е
discoveryEndpointsd*b:`
^
redisClusterDiscoveryEndpoint;gcp:redis/ClusterDiscoveryEndpoint:ClusterDiscoveryEndpointгOutput only. Endpoints created on each given network,
for Redis clients to connect to the cluster.
Currently only one endpoint is supported.
Structure is documented below.
"ю
maintenancePolicydBb:`
^
redisClusterMaintenancePolicy;gcp:redis/ClusterMaintenancePolicy:ClusterMaintenancePolicy!Maintenance policy for a cluster
"┬
maintenanceSchedulesj*h:f
d
redisClusterMaintenanceSchedule?gcp:redis/ClusterMaintenanceSchedule:ClusterMaintenanceSchedule>Upcoming maintenance schedule.
Structure is documented below.
"Д
name" џUnique name of the resource in this scope including project and location using the form:
projects/{projectId}/locations/{locationId}/clusters/{clusterId}
"у
nodeType" оThe nodeType for the Redis cluster. If not provided, REDIS_HIGHMEM_MEDIUM will be used as default Possible values:
["REDIS_SHARED_CORE_NANO", "REDIS_HIGHMEM_MEDIUM", "REDIS_HIGHMEM_XLARGE", "REDIS_STANDARD_SMALL"]
"е
persistenceConfigb:`
^
redisClusterPersistenceConfig;gcp:redis/ClusterPersistenceConfig:ClusterPersistenceConfig/Persistence config (RDB, AOF) for the cluster.
"Z
preciseSizeGb EOutput only. Redis memory precise size in GB for the entire cluster.
"
project" "▓

pscConfigsL*J:H
F
redisClusterPscConfig+gcp:redis/ClusterPscConfig:ClusterPscConfigНRequired. Each PscConfig configures the consumer network where two
network addresses will be designated to the cluster for client access.
Currently, only one PscConfig is supported.
Structure is documented below.
"ж
pscConnectionsX*V:T
R
redisClusterPscConnection3gcp:redis/ClusterPscConnection:ClusterPscConnection}Output only. PSC connections for discovery of the cluster topology and accessing the cluster.
Structure is documented below.
"ћ
redisConfigsB2" чConfigure Redis Cluster behavior using a subset of native Redis configuration parameters. Please check Memorystore
documentation for the list of supported parameters:
https://cloud.google.com/memorystore/docs/cluster/supported-instance-configurations
";
region" -The name of the region of the Redis cluster.
"G
replicaCountB 1Optional. The number of replica nodes per shard.
"D

shardCount 2Required. Number of shards for the Redis cluster.
"K
sizeGb =Output only. Redis memory size in GB for the entire cluster.
"i
state" \The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
"К

stateInfosL*J:H
F
redisClusterStateInfo+gcp:redis/ClusterStateInfo:ClusterStateInfokOutput only. Additional information about the current state of the cluster.
Structure is documented below.
"н
transitEncryptionModeB" ┤Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
Default value: "TRANSIT_ENCRYPTION_MODE_DISABLED" Possible values: ["TRANSIT_ENCRYPTION_MODE_UNSPECIFIED",
"TRANSIT_ENCRYPTION_MODE_DISABLED", "TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION"]
"?
uid" 4System assigned, unique identifier for the cluster.
"м
zoneDistributionConfigsBq:o
m
redisClusterZoneDistributionConfigEgcp:redis/ClusterZoneDistributionConfig:ClusterZoneDistributionConfigCImmutable. Zone distribution config for Memorystore Redis cluster.
*БМ
.
redisInstancegcp:redis/instance:InstanceєзA Google Cloud Redis instance.


To get more information about Instance, see:

* [API documentation](https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/memorystore/docs/redis/)

## Example Usage

### Redis Instance Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const cache = new gcp.redis.Instance("cache", {
    name: "memory-cache",
    memorySizeGb: 1,
});
```
```python
import pulumi
import pulumi_gcp as gcp

cache = gcp.redis.Instance("cache",
    name="memory-cache",
    memory_size_gb=1)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var cache = new Gcp.Redis.Instance("cache", new()
    {
        Name = "memory-cache",
        MemorySizeGb = 1,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := redis.NewInstance(ctx, "cache", &redis.InstanceArgs{
			Name:         pulumi.String("memory-cache"),
			MemorySizeGb: pulumi.Int(1),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.redis.Instance;
import com.pulumi.gcp.redis.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var cache = new Instance("cache", InstanceArgs.builder()
            .name("memory-cache")
            .memorySizeGb(1)
            .build());

    }
}
```
```yaml
resources:
  cache:
    type: gcp:redis:Instance
    properties:
      name: memory-cache
      memorySizeGb: 1
```
<!--End PulumiCodeChooser -->
### Redis Instance Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

// This example assumes this network already exists.
// The API creates a tenant network per network authorized for a
// Redis instance and that network is not deleted when the user-created
// network (authorized_network) is deleted, so this prevents issues
// with tenant network quota.
// If this network hasn't been created and you are using this example in your
// config, add an additional network resource or change
// this from "data"to "resource"
const redis-network = gcp.compute.getNetwork({
    name: "redis-test-network",
});
const cache = new gcp.redis.Instance("cache", {
    name: "ha-memory-cache",
    tier: "STANDARD_HA",
    memorySizeGb: 1,
    locationId: "us-central1-a",
    alternativeLocationId: "us-central1-f",
    authorizedNetwork: redis_network.then(redis_network => redis_network.id),
    redisVersion: "REDIS_4_0",
    displayName: "Test Instance",
    reservedIpRange: "192.168.0.0/29",
    labels: {
        my_key: "my_val",
        other_key: "other_val",
    },
    maintenancePolicy: {
        weeklyMaintenanceWindows: [{
            day: "TUESDAY",
            startTime: {
                hours: 0,
                minutes: 30,
                seconds: 0,
                nanos: 0,
            },
        }],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

# This example assumes this network already exists.
# The API creates a tenant network per network authorized for a
# Redis instance and that network is not deleted when the user-created
# network (authorized_network) is deleted, so this prevents issues
# with tenant network quota.
# If this network hasn't been created and you are using this example in your
# config, add an additional network resource or change
# this from "data"to "resource"
redis_network = gcp.compute.get_network(name="redis-test-network")
cache = gcp.redis.Instance("cache",
    name="ha-memory-cache",
    tier="STANDARD_HA",
    memory_size_gb=1,
    location_id="us-central1-a",
    alternative_location_id="us-central1-f",
    authorized_network=redis_network.id,
    redis_version="REDIS_4_0",
    display_name="Test Instance",
    reserved_ip_range="192.168.0.0/29",
    labels={
        "my_key": "my_val",
        "other_key": "other_val",
    },
    maintenance_policy={
        "weekly_maintenance_windows": [{
            "day": "TUESDAY",
            "start_time": {
                "hours": 0,
                "minutes": 30,
                "seconds": 0,
                "nanos": 0,
            },
        }],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    // This example assumes this network already exists.
    // The API creates a tenant network per network authorized for a
    // Redis instance and that network is not deleted when the user-created
    // network (authorized_network) is deleted, so this prevents issues
    // with tenant network quota.
    // If this network hasn't been created and you are using this example in your
    // config, add an additional network resource or change
    // this from "data"to "resource"
    var redis_network = Gcp.Compute.GetNetwork.Invoke(new()
    {
        Name = "redis-test-network",
    });

    var cache = new Gcp.Redis.Instance("cache", new()
    {
        Name = "ha-memory-cache",
        Tier = "STANDARD_HA",
        MemorySizeGb = 1,
        LocationId = "us-central1-a",
        AlternativeLocationId = "us-central1-f",
        AuthorizedNetwork = redis_network.Apply(redis_network => redis_network.Apply(getNetworkResult => getNetworkResult.Id)),
        RedisVersion = "REDIS_4_0",
        DisplayName = "Test Instance",
        ReservedIpRange = "192.168.0.0/29",
        Labels = 
        {
            { "my_key", "my_val" },
            { "other_key", "other_val" },
        },
        MaintenancePolicy = new Gcp.Redis.Inputs.InstanceMaintenancePolicyArgs
        {
            WeeklyMaintenanceWindows = new[]
            {
                new Gcp.Redis.Inputs.InstanceMaintenancePolicyWeeklyMaintenanceWindowArgs
                {
                    Day = "TUESDAY",
                    StartTime = new Gcp.Redis.Inputs.InstanceMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs
                    {
                        Hours = 0,
                        Minutes = 30,
                        Seconds = 0,
                        Nanos = 0,
                    },
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// This example assumes this network already exists.
		// The API creates a tenant network per network authorized for a
		// Redis instance and that network is not deleted when the user-created
		// network (authorized_network) is deleted, so this prevents issues
		// with tenant network quota.
		// If this network hasn't been created and you are using this example in your
		// config, add an additional network resource or change
		// this from "data"to "resource"
		redis_network, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
			Name: "redis-test-network",
		}, nil)
		if err != nil {
			return err
		}
		_, err = redis.NewInstance(ctx, "cache", &redis.InstanceArgs{
			Name:                  pulumi.String("ha-memory-cache"),
			Tier:                  pulumi.String("STANDARD_HA"),
			MemorySizeGb:          pulumi.Int(1),
			LocationId:            pulumi.String("us-central1-a"),
			AlternativeLocationId: pulumi.String("us-central1-f"),
			AuthorizedNetwork:     pulumi.String(redis_network.Id),
			RedisVersion:          pulumi.String("REDIS_4_0"),
			DisplayName:           pulumi.String("Test Instance"),
			ReservedIpRange:       pulumi.String("192.168.0.0/29"),
			Labels: pulumi.StringMap{
				"my_key":    pulumi.String("my_val"),
				"other_key": pulumi.String("other_val"),
			},
			MaintenancePolicy: &redis.InstanceMaintenancePolicyArgs{
				WeeklyMaintenanceWindows: redis.InstanceMaintenancePolicyWeeklyMaintenanceWindowArray{
					&redis.InstanceMaintenancePolicyWeeklyMaintenanceWindowArgs{
						Day: pulumi.String("TUESDAY"),
						StartTime: &redis.InstanceMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs{
							Hours:   pulumi.Int(0),
							Minutes: pulumi.Int(30),
							Seconds: pulumi.Int(0),
							Nanos:   pulumi.Int(0),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.ComputeFunctions;
import com.pulumi.gcp.compute.inputs.GetNetworkArgs;
import com.pulumi.gcp.redis.Instance;
import com.pulumi.gcp.redis.InstanceArgs;
import com.pulumi.gcp.redis.inputs.InstanceMaintenancePolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        // This example assumes this network already exists.
        // The API creates a tenant network per network authorized for a
        // Redis instance and that network is not deleted when the user-created
        // network (authorized_network) is deleted, so this prevents issues
        // with tenant network quota.
        // If this network hasn't been created and you are using this example in your
        // config, add an additional network resource or change
        // this from "data"to "resource"
        final var redis-network = ComputeFunctions.getNetwork(GetNetworkArgs.builder()
            .name("redis-test-network")
            .build());

        var cache = new Instance("cache", InstanceArgs.builder()
            .name("ha-memory-cache")
            .tier("STANDARD_HA")
            .memorySizeGb(1)
            .locationId("us-central1-a")
            .alternativeLocationId("us-central1-f")
            .authorizedNetwork(redis_network.id())
            .redisVersion("REDIS_4_0")
            .displayName("Test Instance")
            .reservedIpRange("192.168.0.0/29")
            .labels(Map.ofEntries(
                Map.entry("my_key", "my_val"),
                Map.entry("other_key", "other_val")
            ))
            .maintenancePolicy(InstanceMaintenancePolicyArgs.builder()
                .weeklyMaintenanceWindows(InstanceMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
                    .day("TUESDAY")
                    .startTime(InstanceMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
                        .hours(0)
                        .minutes(30)
                        .seconds(0)
                        .nanos(0)
                        .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  cache:
    type: gcp:redis:Instance
    properties:
      name: ha-memory-cache
      tier: STANDARD_HA
      memorySizeGb: 1
      locationId: us-central1-a
      alternativeLocationId: us-central1-f
      authorizedNetwork: ${["redis-network"].id}
      redisVersion: REDIS_4_0
      displayName: Test Instance
      reservedIpRange: 192.168.0.0/29
      labels:
        my_key: my_val
        other_key: other_val
      maintenancePolicy:
        weeklyMaintenanceWindows:
          - day: TUESDAY
            startTime:
              hours: 0
              minutes: 30
              seconds: 0
              nanos: 0
variables:
  # This example assumes this network already exists.
  # // The API creates a tenant network per network authorized for a
  # // Redis instance and that network is not deleted when the user-created
  # // network (authorized_network) is deleted, so this prevents issues
  # // with tenant network quota.
  # // If this network hasn't been created and you are using this example in your
  # // config, add an additional network resource or change
  # // this from "data"to "resource"
  redis-network:
    fn::invoke:
      function: gcp:compute:getNetwork
      arguments:
        name: redis-test-network
```
<!--End PulumiCodeChooser -->
### Redis Instance Full With Persistence Config


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const cache_persis = new gcp.redis.Instance("cache-persis", {
    name: "ha-memory-cache-persis",
    tier: "STANDARD_HA",
    memorySizeGb: 1,
    locationId: "us-central1-a",
    alternativeLocationId: "us-central1-f",
    persistenceConfig: {
        persistenceMode: "RDB",
        rdbSnapshotPeriod: "TWELVE_HOURS",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

cache_persis = gcp.redis.Instance("cache-persis",
    name="ha-memory-cache-persis",
    tier="STANDARD_HA",
    memory_size_gb=1,
    location_id="us-central1-a",
    alternative_location_id="us-central1-f",
    persistence_config={
        "persistence_mode": "RDB",
        "rdb_snapshot_period": "TWELVE_HOURS",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var cache_persis = new Gcp.Redis.Instance("cache-persis", new()
    {
        Name = "ha-memory-cache-persis",
        Tier = "STANDARD_HA",
        MemorySizeGb = 1,
        LocationId = "us-central1-a",
        AlternativeLocationId = "us-central1-f",
        PersistenceConfig = new Gcp.Redis.Inputs.InstancePersistenceConfigArgs
        {
            PersistenceMode = "RDB",
            RdbSnapshotPeriod = "TWELVE_HOURS",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := redis.NewInstance(ctx, "cache-persis", &redis.InstanceArgs{
			Name:                  pulumi.String("ha-memory-cache-persis"),
			Tier:                  pulumi.String("STANDARD_HA"),
			MemorySizeGb:          pulumi.Int(1),
			LocationId:            pulumi.String("us-central1-a"),
			AlternativeLocationId: pulumi.String("us-central1-f"),
			PersistenceConfig: &redis.InstancePersistenceConfigArgs{
				PersistenceMode:   pulumi.String("RDB"),
				RdbSnapshotPeriod: pulumi.String("TWELVE_HOURS"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.redis.Instance;
import com.pulumi.gcp.redis.InstanceArgs;
import com.pulumi.gcp.redis.inputs.InstancePersistenceConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var cache_persis = new Instance("cache-persis", InstanceArgs.builder()
            .name("ha-memory-cache-persis")
            .tier("STANDARD_HA")
            .memorySizeGb(1)
            .locationId("us-central1-a")
            .alternativeLocationId("us-central1-f")
            .persistenceConfig(InstancePersistenceConfigArgs.builder()
                .persistenceMode("RDB")
                .rdbSnapshotPeriod("TWELVE_HOURS")
                .build())
            .build());

    }
}
```
```yaml
resources:
  cache-persis:
    type: gcp:redis:Instance
    properties:
      name: ha-memory-cache-persis
      tier: STANDARD_HA
      memorySizeGb: 1
      locationId: us-central1-a
      alternativeLocationId: us-central1-f
      persistenceConfig:
        persistenceMode: RDB
        rdbSnapshotPeriod: TWELVE_HOURS
```
<!--End PulumiCodeChooser -->
### Redis Instance Private Service


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

// This example assumes this network already exists.
// The API creates a tenant network per network authorized for a
// Redis instance and that network is not deleted when the user-created
// network (authorized_network) is deleted, so this prevents issues
// with tenant network quota.
// If this network hasn't been created and you are using this example in your
// config, add an additional network resource or change
// this from "data"to "resource"
const redis_network = new gcp.compute.Network("redis-network", {name: "redis-test-network"});
const serviceRange = new gcp.compute.GlobalAddress("service_range", {
    name: "address",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: redis_network.id,
});
const privateServiceConnection = new gcp.servicenetworking.Connection("private_service_connection", {
    network: redis_network.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [serviceRange.name],
});
const cache = new gcp.redis.Instance("cache", {
    name: "private-cache",
    tier: "STANDARD_HA",
    memorySizeGb: 1,
    locationId: "us-central1-a",
    alternativeLocationId: "us-central1-f",
    authorizedNetwork: redis_network.id,
    connectMode: "PRIVATE_SERVICE_ACCESS",
    redisVersion: "REDIS_4_0",
    displayName: "Test Instance",
}, {
    dependsOn: [privateServiceConnection],
});
```
```python
import pulumi
import pulumi_gcp as gcp

# This example assumes this network already exists.
# The API creates a tenant network per network authorized for a
# Redis instance and that network is not deleted when the user-created
# network (authorized_network) is deleted, so this prevents issues
# with tenant network quota.
# If this network hasn't been created and you are using this example in your
# config, add an additional network resource or change
# this from "data"to "resource"
redis_network = gcp.compute.Network("redis-network", name="redis-test-network")
service_range = gcp.compute.GlobalAddress("service_range",
    name="address",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=redis_network.id)
private_service_connection = gcp.servicenetworking.Connection("private_service_connection",
    network=redis_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[service_range.name])
cache = gcp.redis.Instance("cache",
    name="private-cache",
    tier="STANDARD_HA",
    memory_size_gb=1,
    location_id="us-central1-a",
    alternative_location_id="us-central1-f",
    authorized_network=redis_network.id,
    connect_mode="PRIVATE_SERVICE_ACCESS",
    redis_version="REDIS_4_0",
    display_name="Test Instance",
    opts = pulumi.ResourceOptions(depends_on=[private_service_connection]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    // This example assumes this network already exists.
    // The API creates a tenant network per network authorized for a
    // Redis instance and that network is not deleted when the user-created
    // network (authorized_network) is deleted, so this prevents issues
    // with tenant network quota.
    // If this network hasn't been created and you are using this example in your
    // config, add an additional network resource or change
    // this from "data"to "resource"
    var redis_network = new Gcp.Compute.Network("redis-network", new()
    {
        Name = "redis-test-network",
    });

    var serviceRange = new Gcp.Compute.GlobalAddress("service_range", new()
    {
        Name = "address",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = redis_network.Id,
    });

    var privateServiceConnection = new Gcp.ServiceNetworking.Connection("private_service_connection", new()
    {
        Network = redis_network.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            serviceRange.Name,
        },
    });

    var cache = new Gcp.Redis.Instance("cache", new()
    {
        Name = "private-cache",
        Tier = "STANDARD_HA",
        MemorySizeGb = 1,
        LocationId = "us-central1-a",
        AlternativeLocationId = "us-central1-f",
        AuthorizedNetwork = redis_network.Id,
        ConnectMode = "PRIVATE_SERVICE_ACCESS",
        RedisVersion = "REDIS_4_0",
        DisplayName = "Test Instance",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            privateServiceConnection,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// This example assumes this network already exists.
		// The API creates a tenant network per network authorized for a
		// Redis instance and that network is not deleted when the user-created
		// network (authorized_network) is deleted, so this prevents issues
		// with tenant network quota.
		// If this network hasn't been created and you are using this example in your
		// config, add an additional network resource or change
		// this from "data"to "resource"
		_, err := compute.NewNetwork(ctx, "redis-network", &compute.NetworkArgs{
			Name: pulumi.String("redis-test-network"),
		})
		if err != nil {
			return err
		}
		serviceRange, err := compute.NewGlobalAddress(ctx, "service_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("address"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      redis_network.ID(),
		})
		if err != nil {
			return err
		}
		privateServiceConnection, err := servicenetworking.NewConnection(ctx, "private_service_connection", &servicenetworking.ConnectionArgs{
			Network: redis_network.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				serviceRange.Name,
			},
		})
		if err != nil {
			return err
		}
		_, err = redis.NewInstance(ctx, "cache", &redis.InstanceArgs{
			Name:                  pulumi.String("private-cache"),
			Tier:                  pulumi.String("STANDARD_HA"),
			MemorySizeGb:          pulumi.Int(1),
			LocationId:            pulumi.String("us-central1-a"),
			AlternativeLocationId: pulumi.String("us-central1-f"),
			AuthorizedNetwork:     redis_network.ID(),
			ConnectMode:           pulumi.String("PRIVATE_SERVICE_ACCESS"),
			RedisVersion:          pulumi.String("REDIS_4_0"),
			DisplayName:           pulumi.String("Test Instance"),
		}, pulumi.DependsOn([]pulumi.Resource{
			privateServiceConnection,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.redis.Instance;
import com.pulumi.gcp.redis.InstanceArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        // This example assumes this network already exists.
        // The API creates a tenant network per network authorized for a
        // Redis instance and that network is not deleted when the user-created
        // network (authorized_network) is deleted, so this prevents issues
        // with tenant network quota.
        // If this network hasn't been created and you are using this example in your
        // config, add an additional network resource or change
        // this from "data"to "resource"
        var redis_network = new Network("redis-network", NetworkArgs.builder()
            .name("redis-test-network")
            .build());

        var serviceRange = new GlobalAddress("serviceRange", GlobalAddressArgs.builder()
            .name("address")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(redis_network.id())
            .build());

        var privateServiceConnection = new Connection("privateServiceConnection", ConnectionArgs.builder()
            .network(redis_network.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(serviceRange.name())
            .build());

        var cache = new Instance("cache", InstanceArgs.builder()
            .name("private-cache")
            .tier("STANDARD_HA")
            .memorySizeGb(1)
            .locationId("us-central1-a")
            .alternativeLocationId("us-central1-f")
            .authorizedNetwork(redis_network.id())
            .connectMode("PRIVATE_SERVICE_ACCESS")
            .redisVersion("REDIS_4_0")
            .displayName("Test Instance")
            .build(), CustomResourceOptions.builder()
                .dependsOn(privateServiceConnection)
                .build());

    }
}
```
```yaml
resources:
  # This example assumes this network already exists.
  # // The API creates a tenant network per network authorized for a
  # // Redis instance and that network is not deleted when the user-created
  # // network (authorized_network) is deleted, so this prevents issues
  # // with tenant network quota.
  # // If this network hasn't been created and you are using this example in your
  # // config, add an additional network resource or change
  # // this from "data"to "resource"
  redis-network:
    type: gcp:compute:Network
    properties:
      name: redis-test-network
  serviceRange:
    type: gcp:compute:GlobalAddress
    name: service_range
    properties:
      name: address
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${["redis-network"].id}
  privateServiceConnection:
    type: gcp:servicenetworking:Connection
    name: private_service_connection
    properties:
      network: ${["redis-network"].id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${serviceRange.name}
  cache:
    type: gcp:redis:Instance
    properties:
      name: private-cache
      tier: STANDARD_HA
      memorySizeGb: 1
      locationId: us-central1-a
      alternativeLocationId: us-central1-f
      authorizedNetwork: ${["redis-network"].id}
      connectMode: PRIVATE_SERVICE_ACCESS
      redisVersion: REDIS_4_0
      displayName: Test Instance
    options:
      dependsOn:
        - ${privateServiceConnection}
```
<!--End PulumiCodeChooser -->
### Redis Instance Mrr


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

// This example assumes this network already exists.
// The API creates a tenant network per network authorized for a
// Redis instance and that network is not deleted when the user-created
// network (authorized_network) is deleted, so this prevents issues
// with tenant network quota.
// If this network hasn't been created and you are using this example in your
// config, add an additional network resource or change
// this from "data"to "resource"
const redis-network = gcp.compute.getNetwork({
    name: "redis-test-network",
});
const cache = new gcp.redis.Instance("cache", {
    name: "mrr-memory-cache",
    tier: "STANDARD_HA",
    memorySizeGb: 5,
    locationId: "us-central1-a",
    alternativeLocationId: "us-central1-f",
    authorizedNetwork: redis_network.then(redis_network => redis_network.id),
    redisVersion: "REDIS_6_X",
    displayName: "Terraform Test Instance",
    reservedIpRange: "192.168.0.0/28",
    replicaCount: 5,
    readReplicasMode: "READ_REPLICAS_ENABLED",
    labels: {
        my_key: "my_val",
        other_key: "other_val",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

# This example assumes this network already exists.
# The API creates a tenant network per network authorized for a
# Redis instance and that network is not deleted when the user-created
# network (authorized_network) is deleted, so this prevents issues
# with tenant network quota.
# If this network hasn't been created and you are using this example in your
# config, add an additional network resource or change
# this from "data"to "resource"
redis_network = gcp.compute.get_network(name="redis-test-network")
cache = gcp.redis.Instance("cache",
    name="mrr-memory-cache",
    tier="STANDARD_HA",
    memory_size_gb=5,
    location_id="us-central1-a",
    alternative_location_id="us-central1-f",
    authorized_network=redis_network.id,
    redis_version="REDIS_6_X",
    display_name="Terraform Test Instance",
    reserved_ip_range="192.168.0.0/28",
    replica_count=5,
    read_replicas_mode="READ_REPLICAS_ENABLED",
    labels={
        "my_key": "my_val",
        "other_key": "other_val",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    // This example assumes this network already exists.
    // The API creates a tenant network per network authorized for a
    // Redis instance and that network is not deleted when the user-created
    // network (authorized_network) is deleted, so this prevents issues
    // with tenant network quota.
    // If this network hasn't been created and you are using this example in your
    // config, add an additional network resource or change
    // this from "data"to "resource"
    var redis_network = Gcp.Compute.GetNetwork.Invoke(new()
    {
        Name = "redis-test-network",
    });

    var cache = new Gcp.Redis.Instance("cache", new()
    {
        Name = "mrr-memory-cache",
        Tier = "STANDARD_HA",
        MemorySizeGb = 5,
        LocationId = "us-central1-a",
        AlternativeLocationId = "us-central1-f",
        AuthorizedNetwork = redis_network.Apply(redis_network => redis_network.Apply(getNetworkResult => getNetworkResult.Id)),
        RedisVersion = "REDIS_6_X",
        DisplayName = "Terraform Test Instance",
        ReservedIpRange = "192.168.0.0/28",
        ReplicaCount = 5,
        ReadReplicasMode = "READ_REPLICAS_ENABLED",
        Labels = 
        {
            { "my_key", "my_val" },
            { "other_key", "other_val" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// This example assumes this network already exists.
		// The API creates a tenant network per network authorized for a
		// Redis instance and that network is not deleted when the user-created
		// network (authorized_network) is deleted, so this prevents issues
		// with tenant network quota.
		// If this network hasn't been created and you are using this example in your
		// config, add an additional network resource or change
		// this from "data"to "resource"
		redis_network, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
			Name: "redis-test-network",
		}, nil)
		if err != nil {
			return err
		}
		_, err = redis.NewInstance(ctx, "cache", &redis.InstanceArgs{
			Name:                  pulumi.String("mrr-memory-cache"),
			Tier:                  pulumi.String("STANDARD_HA"),
			MemorySizeGb:          pulumi.Int(5),
			LocationId:            pulumi.String("us-central1-a"),
			AlternativeLocationId: pulumi.String("us-central1-f"),
			AuthorizedNetwork:     pulumi.String(redis_network.Id),
			RedisVersion:          pulumi.String("REDIS_6_X"),
			DisplayName:           pulumi.String("Terraform Test Instance"),
			ReservedIpRange:       pulumi.String("192.168.0.0/28"),
			ReplicaCount:          pulumi.Int(5),
			ReadReplicasMode:      pulumi.String("READ_REPLICAS_ENABLED"),
			Labels: pulumi.StringMap{
				"my_key":    pulumi.String("my_val"),
				"other_key": pulumi.String("other_val"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.ComputeFunctions;
import com.pulumi.gcp.compute.inputs.GetNetworkArgs;
import com.pulumi.gcp.redis.Instance;
import com.pulumi.gcp.redis.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        // This example assumes this network already exists.
        // The API creates a tenant network per network authorized for a
        // Redis instance and that network is not deleted when the user-created
        // network (authorized_network) is deleted, so this prevents issues
        // with tenant network quota.
        // If this network hasn't been created and you are using this example in your
        // config, add an additional network resource or change
        // this from "data"to "resource"
        final var redis-network = ComputeFunctions.getNetwork(GetNetworkArgs.builder()
            .name("redis-test-network")
            .build());

        var cache = new Instance("cache", InstanceArgs.builder()
            .name("mrr-memory-cache")
            .tier("STANDARD_HA")
            .memorySizeGb(5)
            .locationId("us-central1-a")
            .alternativeLocationId("us-central1-f")
            .authorizedNetwork(redis_network.id())
            .redisVersion("REDIS_6_X")
            .displayName("Terraform Test Instance")
            .reservedIpRange("192.168.0.0/28")
            .replicaCount(5)
            .readReplicasMode("READ_REPLICAS_ENABLED")
            .labels(Map.ofEntries(
                Map.entry("my_key", "my_val"),
                Map.entry("other_key", "other_val")
            ))
            .build());

    }
}
```
```yaml
resources:
  cache:
    type: gcp:redis:Instance
    properties:
      name: mrr-memory-cache
      tier: STANDARD_HA
      memorySizeGb: 5
      locationId: us-central1-a
      alternativeLocationId: us-central1-f
      authorizedNetwork: ${["redis-network"].id}
      redisVersion: REDIS_6_X
      displayName: Terraform Test Instance
      reservedIpRange: 192.168.0.0/28
      replicaCount: 5
      readReplicasMode: READ_REPLICAS_ENABLED
      labels:
        my_key: my_val
        other_key: other_val
variables:
  # This example assumes this network already exists.
  # // The API creates a tenant network per network authorized for a
  # // Redis instance and that network is not deleted when the user-created
  # // network (authorized_network) is deleted, so this prevents issues
  # // with tenant network quota.
  # // If this network hasn't been created and you are using this example in your
  # // config, add an additional network resource or change
  # // this from "data"to "resource"
  redis-network:
    fn::invoke:
      function: gcp:compute:getNetwork
      arguments:
        name: redis-test-network
```
<!--End PulumiCodeChooser -->
### Redis Instance Cmek


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const redisKeyring = new gcp.kms.KeyRing("redis_keyring", {
    name: "redis-keyring",
    location: "us-central1",
});
const redisKey = new gcp.kms.CryptoKey("redis_key", {
    name: "redis-key",
    keyRing: redisKeyring.id,
});
// This example assumes this network already exists.
// The API creates a tenant network per network authorized for a
// Redis instance and that network is not deleted when the user-created
// network (authorized_network) is deleted, so this prevents issues
// with tenant network quota.
// If this network hasn't been created and you are using this example in your
// config, add an additional network resource or change
// this from "data"to "resource"
const redis-network = gcp.compute.getNetwork({
    name: "redis-test-network",
});
const cache = new gcp.redis.Instance("cache", {
    name: "cmek-memory-cache",
    tier: "STANDARD_HA",
    memorySizeGb: 1,
    locationId: "us-central1-a",
    alternativeLocationId: "us-central1-f",
    authorizedNetwork: redis_network.then(redis_network => redis_network.id),
    redisVersion: "REDIS_6_X",
    displayName: "Terraform Test Instance",
    reservedIpRange: "192.168.0.0/29",
    labels: {
        my_key: "my_val",
        other_key: "other_val",
    },
    customerManagedKey: redisKey.id,
});
```
```python
import pulumi
import pulumi_gcp as gcp

redis_keyring = gcp.kms.KeyRing("redis_keyring",
    name="redis-keyring",
    location="us-central1")
redis_key = gcp.kms.CryptoKey("redis_key",
    name="redis-key",
    key_ring=redis_keyring.id)
# This example assumes this network already exists.
# The API creates a tenant network per network authorized for a
# Redis instance and that network is not deleted when the user-created
# network (authorized_network) is deleted, so this prevents issues
# with tenant network quota.
# If this network hasn't been created and you are using this example in your
# config, add an additional network resource or change
# this from "data"to "resource"
redis_network = gcp.compute.get_network(name="redis-test-network")
cache = gcp.redis.Instance("cache",
    name="cmek-memory-cache",
    tier="STANDARD_HA",
    memory_size_gb=1,
    location_id="us-central1-a",
    alternative_location_id="us-central1-f",
    authorized_network=redis_network.id,
    redis_version="REDIS_6_X",
    display_name="Terraform Test Instance",
    reserved_ip_range="192.168.0.0/29",
    labels={
        "my_key": "my_val",
        "other_key": "other_val",
    },
    customer_managed_key=redis_key.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var redisKeyring = new Gcp.Kms.KeyRing("redis_keyring", new()
    {
        Name = "redis-keyring",
        Location = "us-central1",
    });

    var redisKey = new Gcp.Kms.CryptoKey("redis_key", new()
    {
        Name = "redis-key",
        KeyRing = redisKeyring.Id,
    });

    // This example assumes this network already exists.
    // The API creates a tenant network per network authorized for a
    // Redis instance and that network is not deleted when the user-created
    // network (authorized_network) is deleted, so this prevents issues
    // with tenant network quota.
    // If this network hasn't been created and you are using this example in your
    // config, add an additional network resource or change
    // this from "data"to "resource"
    var redis_network = Gcp.Compute.GetNetwork.Invoke(new()
    {
        Name = "redis-test-network",
    });

    var cache = new Gcp.Redis.Instance("cache", new()
    {
        Name = "cmek-memory-cache",
        Tier = "STANDARD_HA",
        MemorySizeGb = 1,
        LocationId = "us-central1-a",
        AlternativeLocationId = "us-central1-f",
        AuthorizedNetwork = redis_network.Apply(redis_network => redis_network.Apply(getNetworkResult => getNetworkResult.Id)),
        RedisVersion = "REDIS_6_X",
        DisplayName = "Terraform Test Instance",
        ReservedIpRange = "192.168.0.0/29",
        Labels = 
        {
            { "my_key", "my_val" },
            { "other_key", "other_val" },
        },
        CustomerManagedKey = redisKey.Id,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		redisKeyring, err := kms.NewKeyRing(ctx, "redis_keyring", &kms.KeyRingArgs{
			Name:     pulumi.String("redis-keyring"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		redisKey, err := kms.NewCryptoKey(ctx, "redis_key", &kms.CryptoKeyArgs{
			Name:    pulumi.String("redis-key"),
			KeyRing: redisKeyring.ID(),
		})
		if err != nil {
			return err
		}
		// This example assumes this network already exists.
		// The API creates a tenant network per network authorized for a
		// Redis instance and that network is not deleted when the user-created
		// network (authorized_network) is deleted, so this prevents issues
		// with tenant network quota.
		// If this network hasn't been created and you are using this example in your
		// config, add an additional network resource or change
		// this from "data"to "resource"
		redis_network, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
			Name: "redis-test-network",
		}, nil)
		if err != nil {
			return err
		}
		_, err = redis.NewInstance(ctx, "cache", &redis.InstanceArgs{
			Name:                  pulumi.String("cmek-memory-cache"),
			Tier:                  pulumi.String("STANDARD_HA"),
			MemorySizeGb:          pulumi.Int(1),
			LocationId:            pulumi.String("us-central1-a"),
			AlternativeLocationId: pulumi.String("us-central1-f"),
			AuthorizedNetwork:     pulumi.String(redis_network.Id),
			RedisVersion:          pulumi.String("REDIS_6_X"),
			DisplayName:           pulumi.String("Terraform Test Instance"),
			ReservedIpRange:       pulumi.String("192.168.0.0/29"),
			Labels: pulumi.StringMap{
				"my_key":    pulumi.String("my_val"),
				"other_key": pulumi.String("other_val"),
			},
			CustomerManagedKey: redisKey.ID(),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.kms.KeyRing;
import com.pulumi.gcp.kms.KeyRingArgs;
import com.pulumi.gcp.kms.CryptoKey;
import com.pulumi.gcp.kms.CryptoKeyArgs;
import com.pulumi.gcp.compute.ComputeFunctions;
import com.pulumi.gcp.compute.inputs.GetNetworkArgs;
import com.pulumi.gcp.redis.Instance;
import com.pulumi.gcp.redis.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var redisKeyring = new KeyRing("redisKeyring", KeyRingArgs.builder()
            .name("redis-keyring")
            .location("us-central1")
            .build());

        var redisKey = new CryptoKey("redisKey", CryptoKeyArgs.builder()
            .name("redis-key")
            .keyRing(redisKeyring.id())
            .build());

        // This example assumes this network already exists.
        // The API creates a tenant network per network authorized for a
        // Redis instance and that network is not deleted when the user-created
        // network (authorized_network) is deleted, so this prevents issues
        // with tenant network quota.
        // If this network hasn't been created and you are using this example in your
        // config, add an additional network resource or change
        // this from "data"to "resource"
        final var redis-network = ComputeFunctions.getNetwork(GetNetworkArgs.builder()
            .name("redis-test-network")
            .build());

        var cache = new Instance("cache", InstanceArgs.builder()
            .name("cmek-memory-cache")
            .tier("STANDARD_HA")
            .memorySizeGb(1)
            .locationId("us-central1-a")
            .alternativeLocationId("us-central1-f")
            .authorizedNetwork(redis_network.id())
            .redisVersion("REDIS_6_X")
            .displayName("Terraform Test Instance")
            .reservedIpRange("192.168.0.0/29")
            .labels(Map.ofEntries(
                Map.entry("my_key", "my_val"),
                Map.entry("other_key", "other_val")
            ))
            .customerManagedKey(redisKey.id())
            .build());

    }
}
```
```yaml
resources:
  cache:
    type: gcp:redis:Instance
    properties:
      name: cmek-memory-cache
      tier: STANDARD_HA
      memorySizeGb: 1
      locationId: us-central1-a
      alternativeLocationId: us-central1-f
      authorizedNetwork: ${["redis-network"].id}
      redisVersion: REDIS_6_X
      displayName: Terraform Test Instance
      reservedIpRange: 192.168.0.0/29
      labels:
        my_key: my_val
        other_key: other_val
      customerManagedKey: ${redisKey.id}
  redisKeyring:
    type: gcp:kms:KeyRing
    name: redis_keyring
    properties:
      name: redis-keyring
      location: us-central1
  redisKey:
    type: gcp:kms:CryptoKey
    name: redis_key
    properties:
      name: redis-key
      keyRing: ${redisKeyring.id}
variables:
  # This example assumes this network already exists.
  # // The API creates a tenant network per network authorized for a
  # // Redis instance and that network is not deleted when the user-created
  # // network (authorized_network) is deleted, so this prevents issues
  # // with tenant network quota.
  # // If this network hasn't been created and you are using this example in your
  # // config, add an additional network resource or change
  # // this from "data"to "resource"
  redis-network:
    fn::invoke:
      function: gcp:compute:getNetwork
      arguments:
        name: redis-test-network
```
<!--End PulumiCodeChooser -->

## Import

Instance can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/instances/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:redis/instance:Instance default projects/{{project}}/locations/{{region}}/instances/{{name}}
```

```sh
$ pulumi import gcp:redis/instance:Instance default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:redis/instance:Instance default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:redis/instance:Instance default {{name}}
```

В
alternativeLocationIdB" ╠Only applicable to STANDARD_HA tier which protects the instance
against zonal failures by provisioning it across two zones.
If provided, it must be a different zone from the one provided in
[locationId].
├
authEnabledB
 ГOptional. Indicates whether OSS Redis AUTH is enabled for the
instance. If set to "true" AUTH is enabled on the instance.
Default value is "false" meaning AUTH is disabled.
ф
authorizedNetworkB" јThe full name of the Google Compute Engine network to which the
instance is connected. If left unspecified, the default network
will be used.
Ц
connectModeB" ЈThe connection mode of the Redis instance.
Default value is `DIRECT_PEERING`.
Possible values are: `DIRECT_PEERING`, `PRIVATE_SERVICE_ACCESS`.
Г
customerManagedKeyB" љOptional. The KMS key reference that you want to use to encrypt the data at rest for this Redis
instance. If this is provided, CMEK is enabled.
T
displayNameB" ?An arbitrary and optional user-provided name for the instance.
ј
labelsB2" чResource labels to represent user provided metadata.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
┼

locationIdB" ░The zone where the instance will be provisioned. If not provided,
the service will choose a zone for the instance. For STANDARD_HA tier,
instances will be created across two zones for protection against
zonal failures. If [alternativeLocationId] is also provided, it must
be different from [locationId].
┴
maintenancePolicygBe:c
a
redisInstanceMaintenancePolicy=gcp:redis/InstanceMaintenancePolicy:InstanceMaintenancePolicyCMaintenance policy for an instance.
Structure is documented below.
I
maintenanceVersionB" -The self service update maintenance version.
6
memorySizeGb "Redis memory size in GiB.


- - -
W
nameB" IThe ID of the instance or a fully qualified identifier for the instance.
╚
persistenceConfiggBe:c
a
redisInstancePersistenceConfig=gcp:redis/InstancePersistenceConfig:InstancePersistenceConfigJPersistence configuration for an instance.
Structure is documented below.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
ќ
readReplicasModeB" чOptional. Read replica mode. Can only be specified when trying to create the instance.
If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
- READ_REPLICAS_DISABLED: If disabled, read endpoint will not be provided and the
instance cannot scale up or down the number of replicas.
- READ_REPLICAS_ENABLED: If enabled, read endpoint will be provided and the instance
can scale up and down the number of replicas.
Possible values are: `READ_REPLICAS_DISABLED`, `READ_REPLICAS_ENABLED`.
»
redisConfigsB2" ќRedis configuration parameters, according to http://redis.io/topics/config.
Please check Memorystore documentation for the list of supported parameters:
https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
└
redisVersionB" ЕThe version of Redis software. If not provided, latest supported
version will be used. Please check the API documentation linked
at the top for the latest valid values.
>
regionB" .The name of the Redis region of the instance.
╔
replicaCountB ▓Optional. The number of replica nodes. The valid range for the Standard Tier with
read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
for a Standard Tier instance, the only valid value is 1 and the default is 1.
The valid value for basic tier is 0 and the default is also 0.
е
reservedIpRangeB" јThe CIDR range of internal addresses that are reserved for this
instance. If not provided, the service will choose an unused /29
block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
unique and non-overlapping with existing subnets in an authorized
network.
ь
secondaryIpRangeB" мOptional. Additional IP range for node placement. Required when enabling read replicas on
an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
"auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
range associated with the private service access connection, or "auto".
В
tierB" ПThe service tier of the instance. Must be one of these values:
- BASIC: standalone instance
- STANDARD_HA: highly available primary/replica instances
Default value is `BASIC`.
Possible values are: `BASIC`, `STANDARD_HA`.
«
transitEncryptionModeB" јThe TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
- SERVER_AUTHENTICATION: Client to Server traffic encryption enabled with server authentication
Default value is `DISABLED`.
Possible values are: `SERVER_AUTHENTICATION`, `DISABLED`.
"Ж
alternativeLocationId" ╠Only applicable to STANDARD_HA tier which protects the instance
against zonal failures by provisioning it across two zones.
If provided, it must be a different zone from the one provided in
[locationId].
"├
authEnabledB
 ГOptional. Indicates whether OSS Redis AUTH is enabled for the
instance. If set to "true" AUTH is enabled on the instance.
Default value is "false" meaning AUTH is disabled.
"n

authString" \AUTH String set on the instance. This field will only be populated if auth_enabled is true.
"е
authorizedNetwork" јThe full name of the Google Compute Engine network to which the
instance is connected. If left unspecified, the default network
will be used.
"Ц
connectModeB" ЈThe connection mode of the Redis instance.
Default value is `DIRECT_PEERING`.
Possible values are: `DIRECT_PEERING`, `PRIVATE_SERVICE_ACCESS`.
"F

createTime" 4(Output)
The time when the certificate was created.
"└
currentLocationId" дThe current zone where the Redis endpoint is placed.
For Basic Tier instances, this will always be the same as the
[locationId] provided by the user at creation time. For Standard Tier
instances, this can be either [locationId] or [alternativeLocationId]
and can change after a failover event.
"Г
customerManagedKeyB" љOptional. The KMS key reference that you want to use to encrypt the data at rest for this Redis
instance. If this is provided, CMEK is enabled.
"T
displayNameB" ?An arbitrary and optional user-provided name for the instance.
"д
effectiveLabels2" їAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"l
host" `Hostname or IP address of the exposed Redis endpoint used by clients
to connect to the service.
"ј
labelsB2" чResource labels to represent user provided metadata.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"├

locationId" ░The zone where the instance will be provisioned. If not provided,
the service will choose a zone for the instance. For STANDARD_HA tier,
instances will be created across two zones for protection against
zonal failures. If [alternativeLocationId] is also provided, it must
be different from [locationId].
"┴
maintenancePolicygBe:c
a
redisInstanceMaintenancePolicy=gcp:redis/InstanceMaintenancePolicy:InstanceMaintenancePolicyCMaintenance policy for an instance.
Structure is documented below.
"┼
maintenanceSchedulesm*k:i
g
redisInstanceMaintenanceScheduleAgcp:redis/InstanceMaintenanceSchedule:InstanceMaintenanceSchedule>Upcoming maintenance schedule.
Structure is documented below.
"G
maintenanceVersion" -The self service update maintenance version.
"6
memorySizeGb "Redis memory size in GiB.


- - -
"U
name" IThe ID of the instance or a fully qualified identifier for the instance.
"є
nodes@*>:<
:
redisInstanceNode#gcp:redis/InstanceNode:InstanceNode;Output only. Info per node.
Structure is documented below.
"к
persistenceConfige:c
a
redisInstancePersistenceConfig=gcp:redis/InstancePersistenceConfig:InstancePersistenceConfigJPersistence configuration for an instance.
Structure is documented below.
"Ћ
persistenceIamIdentity" ШOutput only. Cloud IAM identity used by import / export operations
to transfer data to/from Cloud Storage. Format is "serviceAccount:".
The value may change over time for a given instance so should be
checked before each import/export operation.
";
port /The port number of the exposed Redis endpoint.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Ѓ
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"Ъ
readEndpoint" іOutput only. Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only.
Targets all healthy replica nodes in instance. Replication is asynchronous and replica nodes
will exhibit some lag behind the primary. Write requests must target 'host'.
"ќ
readEndpointPort ~Output only. The port number of the exposed readonly redis endpoint. Standard tier only.
Write requests should target 'port'.
"ћ
readReplicasMode" чOptional. Read replica mode. Can only be specified when trying to create the instance.
If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
- READ_REPLICAS_DISABLED: If disabled, read endpoint will not be provided and the
instance cannot scale up or down the number of replicas.
- READ_REPLICAS_ENABLED: If enabled, read endpoint will be provided and the instance
can scale up and down the number of replicas.
Possible values are: `READ_REPLICAS_DISABLED`, `READ_REPLICAS_ENABLED`.
"»
redisConfigsB2" ќRedis configuration parameters, according to http://redis.io/topics/config.
Please check Memorystore documentation for the list of supported parameters:
https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
"Й
redisVersion" ЕThe version of Redis software. If not provided, latest supported
version will be used. Please check the API documentation linked
at the top for the latest valid values.
"<
region" .The name of the Redis region of the instance.
"К
replicaCount ▓Optional. The number of replica nodes. The valid range for the Standard Tier with
read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
for a Standard Tier instance, the only valid value is 1 and the default is 1.
The valid value for basic tier is 0 and the default is also 0.
"д
reservedIpRange" јThe CIDR range of internal addresses that are reserved for this
instance. If not provided, the service will choose an unused /29
block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
unique and non-overlapping with existing subnets in an authorized
network.
"в
secondaryIpRange" мOptional. Additional IP range for node placement. Required when enabling read replicas on
an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
"auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
range associated with the private service access connection, or "auto".
"╗
serverCaCertsX*V:T
R
redisInstanceServerCaCert3gcp:redis/InstanceServerCaCert:InstanceServerCaCertPList of server CA certificates for the instance.
Structure is documented below.
"В
tierB" ПThe service tier of the instance. Must be one of these values:
- BASIC: standalone instance
- STANDARD_HA: highly available primary/replica instances
Default value is `BASIC`.
Possible values are: `BASIC`, `STANDARD_HA`.
"«
transitEncryptionModeB" јThe TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
- SERVER_AUTHENTICATION: Client to Server traffic encryption enabled with server authentication
Default value is `DISABLED`.
Possible values are: `SERVER_AUTHENTICATION`, `DISABLED`.
*э5
6
resourcemanagerLiengcp:resourcemanager/lien:LienЌ&A Lien represents an encumbrance on the actions that can be performed on a resource.



## Example Usage

### Resource Manager Lien


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = new gcp.organizations.Project("project", {
    projectId: "staging-project",
    name: "A very important project!",
    deletionPolicy: "DELETE",
});
const lien = new gcp.resourcemanager.Lien("lien", {
    parent: pulumi.interpolate`projects/${project.number}`,
    restrictions: ["resourcemanager.projects.delete"],
    origin: "machine-readable-explanation",
    reason: "This project is an important environment",
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.Project("project",
    project_id="staging-project",
    name="A very important project!",
    deletion_policy="DELETE")
lien = gcp.resourcemanager.Lien("lien",
    parent=project.number.apply(lambda number: f"projects/{number}"),
    restrictions=["resourcemanager.projects.delete"],
    origin="machine-readable-explanation",
    reason="This project is an important environment")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = new Gcp.Organizations.Project("project", new()
    {
        ProjectId = "staging-project",
        Name = "A very important project!",
        DeletionPolicy = "DELETE",
    });

    var lien = new Gcp.ResourceManager.Lien("lien", new()
    {
        Parent = project.Number.Apply(number => $"projects/{number}"),
        Restrictions = new[]
        {
            "resourcemanager.projects.delete",
        },
        Origin = "machine-readable-explanation",
        Reason = "This project is an important environment",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/resourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
			ProjectId:      pulumi.String("staging-project"),
			Name:           pulumi.String("A very important project!"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		_, err = resourcemanager.NewLien(ctx, "lien", &resourcemanager.LienArgs{
			Parent: project.Number.ApplyT(func(number string) (string, error) {
				return fmt.Sprintf("projects/%v", number), nil
			}).(pulumi.StringOutput),
			Restrictions: pulumi.StringArray{
				pulumi.String("resourcemanager.projects.delete"),
			},
			Origin: pulumi.String("machine-readable-explanation"),
			Reason: pulumi.String("This project is an important environment"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.resourcemanager.Lien;
import com.pulumi.gcp.resourcemanager.LienArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var project = new Project("project", ProjectArgs.builder()
            .projectId("staging-project")
            .name("A very important project!")
            .deletionPolicy("DELETE")
            .build());

        var lien = new Lien("lien", LienArgs.builder()
            .parent(project.number().applyValue(number -> String.format("projects/%s", number)))
            .restrictions("resourcemanager.projects.delete")
            .origin("machine-readable-explanation")
            .reason("This project is an important environment")
            .build());

    }
}
```
```yaml
resources:
  lien:
    type: gcp:resourcemanager:Lien
    properties:
      parent: projects/${project.number}
      restrictions:
        - resourcemanager.projects.delete
      origin: machine-readable-explanation
      reason: This project is an important environment
  project:
    type: gcp:organizations:Project
    properties:
      projectId: staging-project
      name: A very important project!
      deletionPolicy: DELETE
```
<!--End PulumiCodeChooser -->

## Import

Lien can be imported using any of these accepted formats:

* `{{parent}}/{{name}}`

When using the `pulumi import` command, Lien can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:resourcemanager/lien:Lien default {{parent}}/{{name}}
```

Е
origin" џA stable, user-visible/meaningful string identifying the origin
of the Lien, intended to be inspected programmatically. Maximum length of
200 characters.
њ
parent" ЃA reference to the resource this Lien is attached to.
The server will validate the parent against those for which Liens are supported.
Since a variety of objects can have Liens against them, you must provide the type
prefix (e.g. "projects/my-project-name").
Ѕ
reason" {Concise user-visible strings indicating why an action cannot be performed
on a resource. Maximum length of 200 characters.
¤
restrictions*" ИThe types of operations which should be blocked as a result of this Lien.
Each value should correspond to an IAM permission. The server will validate
the permissions against those for which Liens are supported.  An empty
list is meaningless and will be rejected.
e.g. ['resourcemanager.projects.delete']


- - -
"#

createTime" Time of creation
"@
name" 4A system-generated unique identifier for this Lien.
"Е
origin" џA stable, user-visible/meaningful string identifying the origin
of the Lien, intended to be inspected programmatically. Maximum length of
200 characters.
"њ
parent" ЃA reference to the resource this Lien is attached to.
The server will validate the parent against those for which Liens are supported.
Since a variety of objects can have Liens against them, you must provide the type
prefix (e.g. "projects/my-project-name").
"Ѕ
reason" {Concise user-visible strings indicating why an action cannot be performed
on a resource. Maximum length of 200 characters.
"¤
restrictions*" ИThe types of operations which should be blocked as a result of this Lien.
Each value should correspond to an IAM permission. The server will validate
the permissions against those for which Liens are supported.  An empty
list is meaningless and will be rejected.
e.g. ['resourcemanager.projects.delete']


- - -
*й
8
runtimeconfigConfiggcp:runtimeconfig/config:Configѓ## Example Usage

Example creating a RuntimeConfig resource.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_runtime_config = new gcp.runtimeconfig.Config("my-runtime-config", {
    name: "my-service-runtime-config",
    description: "Runtime configuration values for my service",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_runtime_config = gcp.runtimeconfig.Config("my-runtime-config",
    name="my-service-runtime-config",
    description="Runtime configuration values for my service")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_runtime_config = new Gcp.RuntimeConfig.Config("my-runtime-config", new()
    {
        Name = "my-service-runtime-config",
        Description = "Runtime configuration values for my service",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/runtimeconfig"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := runtimeconfig.NewConfig(ctx, "my-runtime-config", &runtimeconfig.ConfigArgs{
			Name:        pulumi.String("my-service-runtime-config"),
			Description: pulumi.String("Runtime configuration values for my service"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.runtimeconfig.Config;
import com.pulumi.gcp.runtimeconfig.ConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_runtime_config = new Config("my-runtime-config", ConfigArgs.builder()
            .name("my-service-runtime-config")
            .description("Runtime configuration values for my service")
            .build());

    }
}
```
```yaml
resources:
  my-runtime-config:
    type: gcp:runtimeconfig:Config
    properties:
      name: my-service-runtime-config
      description: Runtime configuration values for my service
```
<!--End PulumiCodeChooser -->

## Import

Runtime Configs can be imported using the `name` or full config name, e.g.

* `projects/{{project_id}}/configs/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Runtime Configs can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:runtimeconfig/config:Config default projects/{{project_id}}/configs/{{name}}
```

```sh
$ pulumi import gcp:runtimeconfig/config:Config default {{name}}
```

When importing using only the name, the provider project must be set.

K
descriptionB" 6The description to associate with the runtime
config.
5
nameB" 'The name of the runtime config.

- - -
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"K
descriptionB" 6The description to associate with the runtime
config.
"3
name" 'The name of the runtime config.

- - -
"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
*в)
V
runtimeconfigConfigIamBinding3gcp:runtimeconfig/configIamBinding:ConfigIamBindingЪ


## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/configs/{{config}}

* {{project}}/{{config}}

* {{config}}

Any variables not passed in the import command will be taken from the provider configuration.

Runtime Configurator config IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:runtimeconfig/configIamBinding:ConfigIamBinding editor "projects/{{project}}/configs/{{config}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:runtimeconfig/configIamBinding:ConfigIamBinding editor "projects/{{project}}/configs/{{config}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:runtimeconfig/configIamBinding:ConfigIamBinding editor projects/{{project}}/configs/{{config}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

ё
	conditionwBu:s
q
runtimeconfigConfigIamBindingConditionEgcp:runtimeconfig/ConfigIamBindingCondition:ConfigIamBindingConditionI
config" ;Used to find the parent resource to bind the IAM policy to
о	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
█
role" ╬The role that should be applied. Only one
`gcp.runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"ё
	conditionwBu:s
q
runtimeconfigConfigIamBindingConditionEgcp:runtimeconfig/ConfigIamBindingCondition:ConfigIamBindingCondition"I
config" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"о	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"█
role" ╬The role that should be applied. Only one
`gcp.runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*о)
S
runtimeconfigConfigIamMember1gcp:runtimeconfig/configIamMember:ConfigIamMemberЎ


## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/configs/{{config}}

* {{project}}/{{config}}

* {{config}}

Any variables not passed in the import command will be taken from the provider configuration.

Runtime Configurator config IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:runtimeconfig/configIamMember:ConfigIamMember editor "projects/{{project}}/configs/{{config}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:runtimeconfig/configIamMember:ConfigIamMember editor "projects/{{project}}/configs/{{config}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:runtimeconfig/configIamMember:ConfigIamMember editor projects/{{project}}/configs/{{config}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

Ђ
	conditiontBr:p
n
runtimeconfigConfigIamMemberConditionCgcp:runtimeconfig/ConfigIamMemberCondition:ConfigIamMemberConditionI
config" ;Used to find the parent resource to bind the IAM policy to
М	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
█
role" ╬The role that should be applied. Only one
`gcp.runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"Ђ
	conditiontBr:p
n
runtimeconfigConfigIamMemberConditionCgcp:runtimeconfig/ConfigIamMemberCondition:ConfigIamMemberCondition"I
config" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"М	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"█
role" ╬The role that should be applied. Only one
`gcp.runtimeconfig.ConfigIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*е
S
runtimeconfigConfigIamPolicy1gcp:runtimeconfig/configIamPolicy:ConfigIamPolicyЎ


## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/configs/{{config}}

* {{project}}/{{config}}

* {{config}}

Any variables not passed in the import command will be taken from the provider configuration.

Runtime Configurator config IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:runtimeconfig/configIamPolicy:ConfigIamPolicy editor "projects/{{project}}/configs/{{config}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:runtimeconfig/configIamPolicy:ConfigIamPolicy editor "projects/{{project}}/configs/{{config}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:runtimeconfig/configIamPolicy:ConfigIamPolicy editor projects/{{project}}/configs/{{config}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

I
config" ;Used to find the parent resource to bind the IAM policy to
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"I
config" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
*ФQ
>
runtimeconfigVariable#gcp:runtimeconfig/variable:Variable╝D## Example Usage

Example creating a RuntimeConfig variable.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_runtime_config = new gcp.runtimeconfig.Config("my-runtime-config", {
    name: "my-service-runtime-config",
    description: "Runtime configuration values for my service",
});
const environment = new gcp.runtimeconfig.Variable("environment", {
    parent: my_runtime_config.name,
    name: "prod-variables/hostname",
    text: "example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_runtime_config = gcp.runtimeconfig.Config("my-runtime-config",
    name="my-service-runtime-config",
    description="Runtime configuration values for my service")
environment = gcp.runtimeconfig.Variable("environment",
    parent=my_runtime_config.name,
    name="prod-variables/hostname",
    text="example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_runtime_config = new Gcp.RuntimeConfig.Config("my-runtime-config", new()
    {
        Name = "my-service-runtime-config",
        Description = "Runtime configuration values for my service",
    });

    var environment = new Gcp.RuntimeConfig.Variable("environment", new()
    {
        Parent = my_runtime_config.Name,
        Name = "prod-variables/hostname",
        Text = "example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/runtimeconfig"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := runtimeconfig.NewConfig(ctx, "my-runtime-config", &runtimeconfig.ConfigArgs{
			Name:        pulumi.String("my-service-runtime-config"),
			Description: pulumi.String("Runtime configuration values for my service"),
		})
		if err != nil {
			return err
		}
		_, err = runtimeconfig.NewVariable(ctx, "environment", &runtimeconfig.VariableArgs{
			Parent: my_runtime_config.Name,
			Name:   pulumi.String("prod-variables/hostname"),
			Text:   pulumi.String("example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.runtimeconfig.Config;
import com.pulumi.gcp.runtimeconfig.ConfigArgs;
import com.pulumi.gcp.runtimeconfig.Variable;
import com.pulumi.gcp.runtimeconfig.VariableArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_runtime_config = new Config("my-runtime-config", ConfigArgs.builder()
            .name("my-service-runtime-config")
            .description("Runtime configuration values for my service")
            .build());

        var environment = new Variable("environment", VariableArgs.builder()
            .parent(my_runtime_config.name())
            .name("prod-variables/hostname")
            .text("example.com")
            .build());

    }
}
```
```yaml
resources:
  my-runtime-config:
    type: gcp:runtimeconfig:Config
    properties:
      name: my-service-runtime-config
      description: Runtime configuration values for my service
  environment:
    type: gcp:runtimeconfig:Variable
    properties:
      parent: ${["my-runtime-config"].name}
      name: prod-variables/hostname
      text: example.com
```
<!--End PulumiCodeChooser -->

You can also encode binary content using the `value` argument instead. The
value must be base64 encoded.

Example of using the `value` argument.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as std from "@pulumi/std";

const my_runtime_config = new gcp.runtimeconfig.Config("my-runtime-config", {
    name: "my-service-runtime-config",
    description: "Runtime configuration values for my service",
});
const my_secret = new gcp.runtimeconfig.Variable("my-secret", {
    parent: my_runtime_config.name,
    name: "secret",
    value: std.filebase64({
        input: "my-encrypted-secret.dat",
    }).then(invoke => invoke.result),
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_std as std

my_runtime_config = gcp.runtimeconfig.Config("my-runtime-config",
    name="my-service-runtime-config",
    description="Runtime configuration values for my service")
my_secret = gcp.runtimeconfig.Variable("my-secret",
    parent=my_runtime_config.name,
    name="secret",
    value=std.filebase64(input="my-encrypted-secret.dat").result)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var my_runtime_config = new Gcp.RuntimeConfig.Config("my-runtime-config", new()
    {
        Name = "my-service-runtime-config",
        Description = "Runtime configuration values for my service",
    });

    var my_secret = new Gcp.RuntimeConfig.Variable("my-secret", new()
    {
        Parent = my_runtime_config.Name,
        Name = "secret",
        Value = Std.Filebase64.Invoke(new()
        {
            Input = "my-encrypted-secret.dat",
        }).Apply(invoke => invoke.Result),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/runtimeconfig"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := runtimeconfig.NewConfig(ctx, "my-runtime-config", &runtimeconfig.ConfigArgs{
			Name:        pulumi.String("my-service-runtime-config"),
			Description: pulumi.String("Runtime configuration values for my service"),
		})
		if err != nil {
			return err
		}
		invokeFilebase64, err := std.Filebase64(ctx, &std.Filebase64Args{
			Input: "my-encrypted-secret.dat",
		}, nil)
		if err != nil {
			return err
		}
		_, err = runtimeconfig.NewVariable(ctx, "my-secret", &runtimeconfig.VariableArgs{
			Parent: my_runtime_config.Name,
			Name:   pulumi.String("secret"),
			Value:  pulumi.String(invokeFilebase64.Result),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.runtimeconfig.Config;
import com.pulumi.gcp.runtimeconfig.ConfigArgs;
import com.pulumi.gcp.runtimeconfig.Variable;
import com.pulumi.gcp.runtimeconfig.VariableArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_runtime_config = new Config("my-runtime-config", ConfigArgs.builder()
            .name("my-service-runtime-config")
            .description("Runtime configuration values for my service")
            .build());

        var my_secret = new Variable("my-secret", VariableArgs.builder()
            .parent(my_runtime_config.name())
            .name("secret")
            .value(StdFunctions.filebase64(Filebase64Args.builder()
                .input("my-encrypted-secret.dat")
                .build()).result())
            .build());

    }
}
```
```yaml
resources:
  my-runtime-config:
    type: gcp:runtimeconfig:Config
    properties:
      name: my-service-runtime-config
      description: Runtime configuration values for my service
  my-secret:
    type: gcp:runtimeconfig:Variable
    properties:
      parent: ${["my-runtime-config"].name}
      name: secret
      value:
        fn::invoke:
          function: std:filebase64
          arguments:
            input: my-encrypted-secret.dat
          return: result
```
<!--End PulumiCodeChooser -->

## Import

Runtime Config Variables can be imported using the `name` or full variable name, e.g.

* `projects/my-gcp-project/configs/{{config_id}}/variables/{{name}}`

* `{{config_id}}/{{name}}`

When using the `pulumi import` command, Runtime Config Variables can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:runtimeconfig/variable:Variable default projects/my-gcp-project/configs/{{config_id}}/variables/{{name}}
```

```sh
$ pulumi import gcp:runtimeconfig/variable:Variable default {{config_id}}/{{name}}
```

When importing using only the name, the provider project must be set.

љ
nameB" ЂThe name of the variable to manage. Note that variable
names can be hierarchical using slashes (e.g. "prod-variables/hostname").
O
parent" AThe name of the RuntimeConfig resource containing this
variable.
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
─
textB" хor `value` - (Required) The content to associate with the variable.
Exactly one of `text` or `variable` must be specified. If `text` is specified,
it must be a valid UTF-8 string and less than 4096 bytes in length. If `value`
is specified, it must be base64 encoded and less than 4096 bytes in length.

- - -

valueB" "ј
name" ЂThe name of the variable to manage. Note that variable
names can be hierarchical using slashes (e.g. "prod-variables/hostname").
"O
parent" AThe name of the RuntimeConfig resource containing this
variable.
"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"─
textB" хor `value` - (Required) The content to associate with the variable.
Exactly one of `text` or `variable` must be specified. If `text` is specified,
it must be a valid UTF-8 string and less than 4096 bytes in length. If `value`
is specified, it must be base64 encoded and less than 4096 bytes in length.

- - -
"┐

updateTime" г(Computed) The timestamp in RFC3339 UTC "Zulu" format,
accurate to nanoseconds, representing when the variable was last updated.
Example: "2016-10-09T12:33:37.578138407Z".
"
valueB" *У«
P
secretmanagerRegionalSecret/gcp:secretmanager/regionalSecret:RegionalSecretЏтA Regional Secret is a logical secret whose value and versions can be created and accessed within a region only.


To get more information about RegionalSecret, see:

* [API documentation](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.locations.secrets)

## Example Usage

### Regional Secret Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const regional_secret_basic = new gcp.secretmanager.RegionalSecret("regional-secret-basic", {
    secretId: "tf-reg-secret",
    location: "us-central1",
    labels: {
        label: "my-label",
    },
    annotations: {
        key1: "value1",
        key2: "value2",
        key3: "value3",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

regional_secret_basic = gcp.secretmanager.RegionalSecret("regional-secret-basic",
    secret_id="tf-reg-secret",
    location="us-central1",
    labels={
        "label": "my-label",
    },
    annotations={
        "key1": "value1",
        "key2": "value2",
        "key3": "value3",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var regional_secret_basic = new Gcp.SecretManager.RegionalSecret("regional-secret-basic", new()
    {
        SecretId = "tf-reg-secret",
        Location = "us-central1",
        Labels = 
        {
            { "label", "my-label" },
        },
        Annotations = 
        {
            { "key1", "value1" },
            { "key2", "value2" },
            { "key3", "value3" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecret(ctx, "regional-secret-basic", &secretmanager.RegionalSecretArgs{
			SecretId: pulumi.String("tf-reg-secret"),
			Location: pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label": pulumi.String("my-label"),
			},
			Annotations: pulumi.StringMap{
				"key1": pulumi.String("value1"),
				"key2": pulumi.String("value2"),
				"key3": pulumi.String("value3"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecret;
import com.pulumi.gcp.secretmanager.RegionalSecretArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var regional_secret_basic = new RegionalSecret("regional-secret-basic", RegionalSecretArgs.builder()
            .secretId("tf-reg-secret")
            .location("us-central1")
            .labels(Map.of("label", "my-label"))
            .annotations(Map.ofEntries(
                Map.entry("key1", "value1"),
                Map.entry("key2", "value2"),
                Map.entry("key3", "value3")
            ))
            .build());

    }
}
```
```yaml
resources:
  regional-secret-basic:
    type: gcp:secretmanager:RegionalSecret
    properties:
      secretId: tf-reg-secret
      location: us-central1
      labels:
        label: my-label
      annotations:
        key1: value1
        key2: value2
        key3: value3
```
<!--End PulumiCodeChooser -->
### Regional Secret With Cmek


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const kms_secret_binding = new gcp.kms.CryptoKeyIAMMember("kms-secret-binding", {
    cryptoKeyId: "kms-key",
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-secretmanager.iam.gserviceaccount.com`),
});
const regional_secret_with_cmek = new gcp.secretmanager.RegionalSecret("regional-secret-with-cmek", {
    secretId: "tf-reg-secret",
    location: "us-central1",
    customerManagedEncryption: {
        kmsKeyName: "kms-key",
    },
}, {
    dependsOn: [kms_secret_binding],
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
kms_secret_binding = gcp.kms.CryptoKeyIAMMember("kms-secret-binding",
    crypto_key_id="kms-key",
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=f"serviceAccount:service-{project.number}@gcp-sa-secretmanager.iam.gserviceaccount.com")
regional_secret_with_cmek = gcp.secretmanager.RegionalSecret("regional-secret-with-cmek",
    secret_id="tf-reg-secret",
    location="us-central1",
    customer_managed_encryption={
        "kms_key_name": "kms-key",
    },
    opts = pulumi.ResourceOptions(depends_on=[kms_secret_binding]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var kms_secret_binding = new Gcp.Kms.CryptoKeyIAMMember("kms-secret-binding", new()
    {
        CryptoKeyId = "kms-key",
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-secretmanager.iam.gserviceaccount.com",
    });

    var regional_secret_with_cmek = new Gcp.SecretManager.RegionalSecret("regional-secret-with-cmek", new()
    {
        SecretId = "tf-reg-secret",
        Location = "us-central1",
        CustomerManagedEncryption = new Gcp.SecretManager.Inputs.RegionalSecretCustomerManagedEncryptionArgs
        {
            KmsKeyName = "kms-key",
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            kms_secret_binding,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = kms.NewCryptoKeyIAMMember(ctx, "kms-secret-binding", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: pulumi.String("kms-key"),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-secretmanager.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecret(ctx, "regional-secret-with-cmek", &secretmanager.RegionalSecretArgs{
			SecretId: pulumi.String("tf-reg-secret"),
			Location: pulumi.String("us-central1"),
			CustomerManagedEncryption: &secretmanager.RegionalSecretCustomerManagedEncryptionArgs{
				KmsKeyName: pulumi.String("kms-key"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			kms_secret_binding,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.secretmanager.RegionalSecret;
import com.pulumi.gcp.secretmanager.RegionalSecretArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretCustomerManagedEncryptionArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var kms_secret_binding = new CryptoKeyIAMMember("kms-secret-binding", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId("kms-key")
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(String.format("serviceAccount:service-%s@gcp-sa-secretmanager.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var regional_secret_with_cmek = new RegionalSecret("regional-secret-with-cmek", RegionalSecretArgs.builder()
            .secretId("tf-reg-secret")
            .location("us-central1")
            .customerManagedEncryption(RegionalSecretCustomerManagedEncryptionArgs.builder()
                .kmsKeyName("kms-key")
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(kms_secret_binding)
                .build());

    }
}
```
```yaml
resources:
  kms-secret-binding:
    type: gcp:kms:CryptoKeyIAMMember
    properties:
      cryptoKeyId: kms-key
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: serviceAccount:service-${project.number}@gcp-sa-secretmanager.iam.gserviceaccount.com
  regional-secret-with-cmek:
    type: gcp:secretmanager:RegionalSecret
    properties:
      secretId: tf-reg-secret
      location: us-central1
      customerManagedEncryption:
        kmsKeyName: kms-key
    options:
      dependsOn:
        - ${["kms-secret-binding"]}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Regional Secret With Rotation


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const topic = new gcp.pubsub.Topic("topic", {name: "tf-topic"});
const secretsManagerAccess = new gcp.pubsub.TopicIAMMember("secrets_manager_access", {
    topic: topic.name,
    role: "roles/pubsub.publisher",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-secretmanager.iam.gserviceaccount.com`),
});
const regional_secret_with_rotation = new gcp.secretmanager.RegionalSecret("regional-secret-with-rotation", {
    secretId: "tf-reg-secret",
    location: "us-central1",
    topics: [{
        name: topic.id,
    }],
    rotation: {
        rotationPeriod: "3600s",
        nextRotationTime: "2045-11-30T00:00:00Z",
    },
}, {
    dependsOn: [secretsManagerAccess],
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
topic = gcp.pubsub.Topic("topic", name="tf-topic")
secrets_manager_access = gcp.pubsub.TopicIAMMember("secrets_manager_access",
    topic=topic.name,
    role="roles/pubsub.publisher",
    member=f"serviceAccount:service-{project.number}@gcp-sa-secretmanager.iam.gserviceaccount.com")
regional_secret_with_rotation = gcp.secretmanager.RegionalSecret("regional-secret-with-rotation",
    secret_id="tf-reg-secret",
    location="us-central1",
    topics=[{
        "name": topic.id,
    }],
    rotation={
        "rotation_period": "3600s",
        "next_rotation_time": "2045-11-30T00:00:00Z",
    },
    opts = pulumi.ResourceOptions(depends_on=[secrets_manager_access]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var topic = new Gcp.PubSub.Topic("topic", new()
    {
        Name = "tf-topic",
    });

    var secretsManagerAccess = new Gcp.PubSub.TopicIAMMember("secrets_manager_access", new()
    {
        Topic = topic.Name,
        Role = "roles/pubsub.publisher",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-secretmanager.iam.gserviceaccount.com",
    });

    var regional_secret_with_rotation = new Gcp.SecretManager.RegionalSecret("regional-secret-with-rotation", new()
    {
        SecretId = "tf-reg-secret",
        Location = "us-central1",
        Topics = new[]
        {
            new Gcp.SecretManager.Inputs.RegionalSecretTopicArgs
            {
                Name = topic.Id,
            },
        },
        Rotation = new Gcp.SecretManager.Inputs.RegionalSecretRotationArgs
        {
            RotationPeriod = "3600s",
            NextRotationTime = "2045-11-30T00:00:00Z",
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            secretsManagerAccess,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		topic, err := pubsub.NewTopic(ctx, "topic", &pubsub.TopicArgs{
			Name: pulumi.String("tf-topic"),
		})
		if err != nil {
			return err
		}
		secretsManagerAccess, err := pubsub.NewTopicIAMMember(ctx, "secrets_manager_access", &pubsub.TopicIAMMemberArgs{
			Topic:  topic.Name,
			Role:   pulumi.String("roles/pubsub.publisher"),
			Member: pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-secretmanager.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecret(ctx, "regional-secret-with-rotation", &secretmanager.RegionalSecretArgs{
			SecretId: pulumi.String("tf-reg-secret"),
			Location: pulumi.String("us-central1"),
			Topics: secretmanager.RegionalSecretTopicArray{
				&secretmanager.RegionalSecretTopicArgs{
					Name: topic.ID(),
				},
			},
			Rotation: &secretmanager.RegionalSecretRotationArgs{
				RotationPeriod:   pulumi.String("3600s"),
				NextRotationTime: pulumi.String("2045-11-30T00:00:00Z"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			secretsManagerAccess,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.pubsub.TopicIAMMember;
import com.pulumi.gcp.pubsub.TopicIAMMemberArgs;
import com.pulumi.gcp.secretmanager.RegionalSecret;
import com.pulumi.gcp.secretmanager.RegionalSecretArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretTopicArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretRotationArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var topic = new Topic("topic", TopicArgs.builder()
            .name("tf-topic")
            .build());

        var secretsManagerAccess = new TopicIAMMember("secretsManagerAccess", TopicIAMMemberArgs.builder()
            .topic(topic.name())
            .role("roles/pubsub.publisher")
            .member(String.format("serviceAccount:service-%s@gcp-sa-secretmanager.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var regional_secret_with_rotation = new RegionalSecret("regional-secret-with-rotation", RegionalSecretArgs.builder()
            .secretId("tf-reg-secret")
            .location("us-central1")
            .topics(RegionalSecretTopicArgs.builder()
                .name(topic.id())
                .build())
            .rotation(RegionalSecretRotationArgs.builder()
                .rotationPeriod("3600s")
                .nextRotationTime("2045-11-30T00:00:00Z")
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(secretsManagerAccess)
                .build());

    }
}
```
```yaml
resources:
  topic:
    type: gcp:pubsub:Topic
    properties:
      name: tf-topic
  secretsManagerAccess:
    type: gcp:pubsub:TopicIAMMember
    name: secrets_manager_access
    properties:
      topic: ${topic.name}
      role: roles/pubsub.publisher
      member: serviceAccount:service-${project.number}@gcp-sa-secretmanager.iam.gserviceaccount.com
  regional-secret-with-rotation:
    type: gcp:secretmanager:RegionalSecret
    properties:
      secretId: tf-reg-secret
      location: us-central1
      topics:
        - name: ${topic.id}
      rotation:
        rotationPeriod: 3600s
        nextRotationTime: 2045-11-30T00:00:00Z
    options:
      dependsOn:
        - ${secretsManagerAccess}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Regional Secret With Ttl


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const regional_secret_with_ttl = new gcp.secretmanager.RegionalSecret("regional-secret-with-ttl", {
    secretId: "tf-reg-secret",
    location: "us-central1",
    labels: {
        label: "my-label",
    },
    annotations: {
        key1: "value1",
        key2: "value2",
        key3: "value3",
    },
    ttl: "36000s",
});
```
```python
import pulumi
import pulumi_gcp as gcp

regional_secret_with_ttl = gcp.secretmanager.RegionalSecret("regional-secret-with-ttl",
    secret_id="tf-reg-secret",
    location="us-central1",
    labels={
        "label": "my-label",
    },
    annotations={
        "key1": "value1",
        "key2": "value2",
        "key3": "value3",
    },
    ttl="36000s")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var regional_secret_with_ttl = new Gcp.SecretManager.RegionalSecret("regional-secret-with-ttl", new()
    {
        SecretId = "tf-reg-secret",
        Location = "us-central1",
        Labels = 
        {
            { "label", "my-label" },
        },
        Annotations = 
        {
            { "key1", "value1" },
            { "key2", "value2" },
            { "key3", "value3" },
        },
        Ttl = "36000s",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecret(ctx, "regional-secret-with-ttl", &secretmanager.RegionalSecretArgs{
			SecretId: pulumi.String("tf-reg-secret"),
			Location: pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label": pulumi.String("my-label"),
			},
			Annotations: pulumi.StringMap{
				"key1": pulumi.String("value1"),
				"key2": pulumi.String("value2"),
				"key3": pulumi.String("value3"),
			},
			Ttl: pulumi.String("36000s"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecret;
import com.pulumi.gcp.secretmanager.RegionalSecretArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var regional_secret_with_ttl = new RegionalSecret("regional-secret-with-ttl", RegionalSecretArgs.builder()
            .secretId("tf-reg-secret")
            .location("us-central1")
            .labels(Map.of("label", "my-label"))
            .annotations(Map.ofEntries(
                Map.entry("key1", "value1"),
                Map.entry("key2", "value2"),
                Map.entry("key3", "value3")
            ))
            .ttl("36000s")
            .build());

    }
}
```
```yaml
resources:
  regional-secret-with-ttl:
    type: gcp:secretmanager:RegionalSecret
    properties:
      secretId: tf-reg-secret
      location: us-central1
      labels:
        label: my-label
      annotations:
        key1: value1
        key2: value2
        key3: value3
      ttl: 36000s
```
<!--End PulumiCodeChooser -->
### Regional Secret With Expire Time


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const regional_secret_with_expire_time = new gcp.secretmanager.RegionalSecret("regional-secret-with-expire-time", {
    secretId: "tf-reg-secret",
    location: "us-central1",
    labels: {
        label: "my-label",
    },
    annotations: {
        key1: "value1",
        key2: "value2",
        key3: "value3",
    },
    expireTime: "2055-11-30T00:00:00Z",
});
```
```python
import pulumi
import pulumi_gcp as gcp

regional_secret_with_expire_time = gcp.secretmanager.RegionalSecret("regional-secret-with-expire-time",
    secret_id="tf-reg-secret",
    location="us-central1",
    labels={
        "label": "my-label",
    },
    annotations={
        "key1": "value1",
        "key2": "value2",
        "key3": "value3",
    },
    expire_time="2055-11-30T00:00:00Z")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var regional_secret_with_expire_time = new Gcp.SecretManager.RegionalSecret("regional-secret-with-expire-time", new()
    {
        SecretId = "tf-reg-secret",
        Location = "us-central1",
        Labels = 
        {
            { "label", "my-label" },
        },
        Annotations = 
        {
            { "key1", "value1" },
            { "key2", "value2" },
            { "key3", "value3" },
        },
        ExpireTime = "2055-11-30T00:00:00Z",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecret(ctx, "regional-secret-with-expire-time", &secretmanager.RegionalSecretArgs{
			SecretId: pulumi.String("tf-reg-secret"),
			Location: pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label": pulumi.String("my-label"),
			},
			Annotations: pulumi.StringMap{
				"key1": pulumi.String("value1"),
				"key2": pulumi.String("value2"),
				"key3": pulumi.String("value3"),
			},
			ExpireTime: pulumi.String("2055-11-30T00:00:00Z"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecret;
import com.pulumi.gcp.secretmanager.RegionalSecretArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var regional_secret_with_expire_time = new RegionalSecret("regional-secret-with-expire-time", RegionalSecretArgs.builder()
            .secretId("tf-reg-secret")
            .location("us-central1")
            .labels(Map.of("label", "my-label"))
            .annotations(Map.ofEntries(
                Map.entry("key1", "value1"),
                Map.entry("key2", "value2"),
                Map.entry("key3", "value3")
            ))
            .expireTime("2055-11-30T00:00:00Z")
            .build());

    }
}
```
```yaml
resources:
  regional-secret-with-expire-time:
    type: gcp:secretmanager:RegionalSecret
    properties:
      secretId: tf-reg-secret
      location: us-central1
      labels:
        label: my-label
      annotations:
        key1: value1
        key2: value2
        key3: value3
      expireTime: 2055-11-30T00:00:00Z
```
<!--End PulumiCodeChooser -->
### Regional Secret With Version Destroy Ttl


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const regional_secret_with_version_destroy_ttl = new gcp.secretmanager.RegionalSecret("regional-secret-with-version-destroy-ttl", {
    secretId: "tf-reg-secret",
    location: "us-central1",
    labels: {
        label: "my-label",
    },
    annotations: {
        key1: "value1",
        key2: "value2",
        key3: "value3",
    },
    versionDestroyTtl: "86400s",
});
```
```python
import pulumi
import pulumi_gcp as gcp

regional_secret_with_version_destroy_ttl = gcp.secretmanager.RegionalSecret("regional-secret-with-version-destroy-ttl",
    secret_id="tf-reg-secret",
    location="us-central1",
    labels={
        "label": "my-label",
    },
    annotations={
        "key1": "value1",
        "key2": "value2",
        "key3": "value3",
    },
    version_destroy_ttl="86400s")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var regional_secret_with_version_destroy_ttl = new Gcp.SecretManager.RegionalSecret("regional-secret-with-version-destroy-ttl", new()
    {
        SecretId = "tf-reg-secret",
        Location = "us-central1",
        Labels = 
        {
            { "label", "my-label" },
        },
        Annotations = 
        {
            { "key1", "value1" },
            { "key2", "value2" },
            { "key3", "value3" },
        },
        VersionDestroyTtl = "86400s",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecret(ctx, "regional-secret-with-version-destroy-ttl", &secretmanager.RegionalSecretArgs{
			SecretId: pulumi.String("tf-reg-secret"),
			Location: pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label": pulumi.String("my-label"),
			},
			Annotations: pulumi.StringMap{
				"key1": pulumi.String("value1"),
				"key2": pulumi.String("value2"),
				"key3": pulumi.String("value3"),
			},
			VersionDestroyTtl: pulumi.String("86400s"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecret;
import com.pulumi.gcp.secretmanager.RegionalSecretArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var regional_secret_with_version_destroy_ttl = new RegionalSecret("regional-secret-with-version-destroy-ttl", RegionalSecretArgs.builder()
            .secretId("tf-reg-secret")
            .location("us-central1")
            .labels(Map.of("label", "my-label"))
            .annotations(Map.ofEntries(
                Map.entry("key1", "value1"),
                Map.entry("key2", "value2"),
                Map.entry("key3", "value3")
            ))
            .versionDestroyTtl("86400s")
            .build());

    }
}
```
```yaml
resources:
  regional-secret-with-version-destroy-ttl:
    type: gcp:secretmanager:RegionalSecret
    properties:
      secretId: tf-reg-secret
      location: us-central1
      labels:
        label: my-label
      annotations:
        key1: value1
        key2: value2
        key3: value3
      versionDestroyTtl: 86400s
```
<!--End PulumiCodeChooser -->

## Import

RegionalSecret can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}`

* `{{project}}/{{location}}/{{secret_id}}`

* `{{location}}/{{secret_id}}`

When using the `pulumi import` command, RegionalSecret can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:secretmanager/regionalSecret:RegionalSecret default projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}
```

```sh
$ pulumi import gcp:secretmanager/regionalSecret:RegionalSecret default {{project}}/{{location}}/{{secret_id}}
```

```sh
$ pulumi import gcp:secretmanager/regionalSecret:RegionalSecret default {{location}}/{{secret_id}}
```

З
annotationsB2" ▄Custom metadata about the regional secret.
Annotations are distinct from various forms of labels. Annotations exist to allow
client tools to store their own state information without requiring a database.
Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
symbols.
The total size of annotation keys and values must be less than 16KiB.
An object containing a list of "key": value pairs. Example:
{ "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field `effective_annotations` for all of the annotations present on the resource.
Е
customerManagedEncryptionцBА:ъ
Џ
secretmanager'RegionalSecretCustomerManagedEncryptionagcp:secretmanager/RegionalSecretCustomerManagedEncryption:RegionalSecretCustomerManagedEncryptioneThe customer-managed encryption configuration of the regional secret.
Structure is documented below.
ѓ

expireTimeB" ьTimestamp in UTC when the regional secret is scheduled to expire. This is always provided on
output, regardless of what was sent on input. A timestamp in RFC3339 UTC "Zulu" format, with
nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
"2014-10-02T15:01:23.045123456Z". Only one of `expire_time` or `ttl` can be provided.
┤
labelsB2" АThe labels assigned to this regional secret.
Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
No more than 64 labels can be assigned to a given resource.
An object containing a list of "key": value pairs. Example:
{ "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
D
location" 4The location of the regional secret. eg us-central1
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
ь
rotationnBl:j
h
secretmanagerRegionalSecretRotation?gcp:secretmanager/RegionalSecretRotation:RegionalSecretRotation­The rotation time and period for a regional secret. At `next_rotation_time`, Secret Manager
will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
set to configure rotation.
Structure is documented below.
@
secretId" 0This must be unique within the project.


- - -
д
topicsgBe*c:a
_
secretmanagerRegionalSecretTopic9gcp:secretmanager/RegionalSecretTopic:RegionalSecretTopic▓A list of up to 10 Pub/Sub topics to which messages are published when control plane
operations are called on the regional secret or its versions.
Structure is documented below.
└
ttlB" ▓The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
terminated by 's'. Example: "3.5s". Only one of `ttl` or `expire_time` can be provided.
Щ
versionAliasesB2" ▀Mapping from version alias to version name.
A version alias is a string with a maximum length of 63 characters and can contain
uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_')
characters. An alias string must start with a letter and cannot be the string
'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret.
An object containing a list of "key": value pairs. Example:
{ "name": "wrench", "mass": "1.3kg", "count": "3" }.
ы
versionDestroyTtlB" НSecret Version TTL after destruction request.
This is a part of the delayed delete feature on Secret Version.
For secret with versionDestroyTtl>0, version destruction doesn't happen immediately
on calling destroy instead the version goes to a disabled state and
the actual destruction happens after this TTL expires. It must be atleast 24h.
"З
annotationsB2" ▄Custom metadata about the regional secret.
Annotations are distinct from various forms of labels. Annotations exist to allow
client tools to store their own state information without requiring a database.
Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
symbols.
The total size of annotation keys and values must be less than 16KiB.
An object containing a list of "key": value pairs. Example:
{ "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field `effective_annotations` for all of the annotations present on the resource.
"E

createTime" 3The time at which the regional secret was created.
"Е
customerManagedEncryptionцBА:ъ
Џ
secretmanager'RegionalSecretCustomerManagedEncryptionagcp:secretmanager/RegionalSecretCustomerManagedEncryption:RegionalSecretCustomerManagedEncryptioneThe customer-managed encryption configuration of the regional secret.
Structure is documented below.
"
effectiveAnnotations2" "д
effectiveLabels2" їAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"ђ

expireTime" ьTimestamp in UTC when the regional secret is scheduled to expire. This is always provided on
output, regardless of what was sent on input. A timestamp in RFC3339 UTC "Zulu" format, with
nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
"2014-10-02T15:01:23.045123456Z". Only one of `expire_time` or `ttl` can be provided.
"┤
labelsB2" АThe labels assigned to this regional secret.
Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
No more than 64 labels can be assigned to a given resource.
An object containing a list of "key": value pairs. Example:
{ "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"D
location" 4The location of the regional secret. eg us-central1
"ѓ
name" vThe resource name of the regional secret. Format:
`projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}`
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Ѓ
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"ь
rotationnBl:j
h
secretmanagerRegionalSecretRotation?gcp:secretmanager/RegionalSecretRotation:RegionalSecretRotation­The rotation time and period for a regional secret. At `next_rotation_time`, Secret Manager
will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
set to configure rotation.
Structure is documented below.
"@
secretId" 0This must be unique within the project.


- - -
"д
topicsgBe*c:a
_
secretmanagerRegionalSecretTopic9gcp:secretmanager/RegionalSecretTopic:RegionalSecretTopic▓A list of up to 10 Pub/Sub topics to which messages are published when control plane
operations are called on the regional secret or its versions.
Structure is documented below.
"└
ttlB" ▓The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
terminated by 's'. Example: "3.5s". Only one of `ttl` or `expire_time` can be provided.
"Щ
versionAliasesB2" ▀Mapping from version alias to version name.
A version alias is a string with a maximum length of 63 characters and can contain
uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_')
characters. An alias string must start with a letter and cannot be the string
'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret.
An object containing a list of "key": value pairs. Example:
{ "name": "wrench", "mass": "1.3kg", "count": "3" }.
"ы
versionDestroyTtlB" НSecret Version TTL after destruction request.
This is a part of the delayed delete feature on Secret Version.
For secret with versionDestroyTtl>0, version destruction doesn't happen immediately
on calling destroy instead the version goes to a disabled state and
the actual destruction happens after this TTL expires. It must be atleast 24h.
*лч
n
secretmanagerRegionalSecretIamBindingCgcp:secretmanager/regionalSecretIamBinding:RegionalSecretIamBindingснThree different resources help you manage your IAM policy for Secret Manager RegionalSecret. Each of these resources serves a different use case:

* `gcp.secretmanager.RegionalSecretIamPolicy`: Authoritative. Sets the IAM policy for the regionalsecret and replaces any existing policy already attached.
* `gcp.secretmanager.RegionalSecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionalsecret are preserved.
* `gcp.secretmanager.RegionalSecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionalsecret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.RegionalSecretIamPolicy`: Retrieves the IAM policy for the regionalsecret

> **Note:** `gcp.secretmanager.RegionalSecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.RegionalSecretIamBinding` and `gcp.secretmanager.RegionalSecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.RegionalSecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.RegionalSecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.RegionalSecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.RegionalSecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(RegionalSecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.RegionalSecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(RegionalSecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## This resource supports User Project Overrides.

-

# IAM policy for Secret Manager RegionalSecret
Three different resources help you manage your IAM policy for Secret Manager RegionalSecret. Each of these resources serves a different use case:

* `gcp.secretmanager.RegionalSecretIamPolicy`: Authoritative. Sets the IAM policy for the regionalsecret and replaces any existing policy already attached.
* `gcp.secretmanager.RegionalSecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionalsecret are preserved.
* `gcp.secretmanager.RegionalSecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionalsecret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.RegionalSecretIamPolicy`: Retrieves the IAM policy for the regionalsecret

> **Note:** `gcp.secretmanager.RegionalSecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.RegionalSecretIamBinding` and `gcp.secretmanager.RegionalSecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.RegionalSecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.RegionalSecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.RegionalSecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.RegionalSecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(RegionalSecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.RegionalSecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(RegionalSecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}

* {{project}}/{{location}}/{{secret_id}}

* {{location}}/{{secret_id}}

* {{secret_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Secret Manager regionalsecret IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:secretmanager/regionalSecretIamBinding:RegionalSecretIamBinding editor "projects/{{project}}/locations/{{location}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:secretmanager/regionalSecretIamBinding:RegionalSecretIamBinding editor "projects/{{project}}/locations/{{location}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:secretmanager/regionalSecretIamBinding:RegionalSecretIamBinding editor projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

а
	conditionњBЈ:ї
Ѕ
secretmanager!RegionalSecretIamBindingConditionUgcp:secretmanager/RegionalSecretIamBindingCondition:RegionalSecretIamBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
┘
locationB" кThe location of the regional secret. eg us-central1
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
о	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
с
role" оThe role that should be applied. Only one
`gcp.secretmanager.RegionalSecretIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.

secretId" "а
	conditionњBЈ:ї
Ѕ
secretmanager!RegionalSecretIamBindingConditionUgcp:secretmanager/RegionalSecretIamBindingCondition:RegionalSecretIamBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"3
etag" '(Computed) The etag of the IAM policy.
"О
location" кThe location of the regional secret. eg us-central1
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
"о	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"с
role" оThe role that should be applied. Only one
`gcp.secretmanager.RegionalSecretIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"
secretId" *╗ч
k
secretmanagerRegionalSecretIamMemberAgcp:secretmanager/regionalSecretIamMember:RegionalSecretIamMemberПнThree different resources help you manage your IAM policy for Secret Manager RegionalSecret. Each of these resources serves a different use case:

* `gcp.secretmanager.RegionalSecretIamPolicy`: Authoritative. Sets the IAM policy for the regionalsecret and replaces any existing policy already attached.
* `gcp.secretmanager.RegionalSecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionalsecret are preserved.
* `gcp.secretmanager.RegionalSecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionalsecret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.RegionalSecretIamPolicy`: Retrieves the IAM policy for the regionalsecret

> **Note:** `gcp.secretmanager.RegionalSecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.RegionalSecretIamBinding` and `gcp.secretmanager.RegionalSecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.RegionalSecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.RegionalSecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.RegionalSecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.RegionalSecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(RegionalSecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.RegionalSecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(RegionalSecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## This resource supports User Project Overrides.

-

# IAM policy for Secret Manager RegionalSecret
Three different resources help you manage your IAM policy for Secret Manager RegionalSecret. Each of these resources serves a different use case:

* `gcp.secretmanager.RegionalSecretIamPolicy`: Authoritative. Sets the IAM policy for the regionalsecret and replaces any existing policy already attached.
* `gcp.secretmanager.RegionalSecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionalsecret are preserved.
* `gcp.secretmanager.RegionalSecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionalsecret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.RegionalSecretIamPolicy`: Retrieves the IAM policy for the regionalsecret

> **Note:** `gcp.secretmanager.RegionalSecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.RegionalSecretIamBinding` and `gcp.secretmanager.RegionalSecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.RegionalSecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.RegionalSecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.RegionalSecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.RegionalSecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(RegionalSecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.RegionalSecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(RegionalSecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}

* {{project}}/{{location}}/{{secret_id}}

* {{location}}/{{secret_id}}

* {{secret_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Secret Manager regionalsecret IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:secretmanager/regionalSecretIamMember:RegionalSecretIamMember editor "projects/{{project}}/locations/{{location}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:secretmanager/regionalSecretIamMember:RegionalSecretIamMember editor "projects/{{project}}/locations/{{location}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:secretmanager/regionalSecretIamMember:RegionalSecretIamMember editor projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

Ю
	conditionЈBї:Ѕ
є
secretmanager RegionalSecretIamMemberConditionSgcp:secretmanager/RegionalSecretIamMemberCondition:RegionalSecretIamMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
┘
locationB" кThe location of the regional secret. eg us-central1
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
М	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
с
role" оThe role that should be applied. Only one
`gcp.secretmanager.RegionalSecretIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.

secretId" "Ю
	conditionЈBї:Ѕ
є
secretmanager RegionalSecretIamMemberConditionSgcp:secretmanager/RegionalSecretIamMemberCondition:RegionalSecretIamMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"3
etag" '(Computed) The etag of the IAM policy.
"О
location" кThe location of the regional secret. eg us-central1
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
"М	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"с
role" оThe role that should be applied. Only one
`gcp.secretmanager.RegionalSecretIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"
secretId" *┼р
k
secretmanagerRegionalSecretIamPolicyAgcp:secretmanager/regionalSecretIamPolicy:RegionalSecretIamPolicyПнThree different resources help you manage your IAM policy for Secret Manager RegionalSecret. Each of these resources serves a different use case:

* `gcp.secretmanager.RegionalSecretIamPolicy`: Authoritative. Sets the IAM policy for the regionalsecret and replaces any existing policy already attached.
* `gcp.secretmanager.RegionalSecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionalsecret are preserved.
* `gcp.secretmanager.RegionalSecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionalsecret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.RegionalSecretIamPolicy`: Retrieves the IAM policy for the regionalsecret

> **Note:** `gcp.secretmanager.RegionalSecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.RegionalSecretIamBinding` and `gcp.secretmanager.RegionalSecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.RegionalSecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.RegionalSecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.RegionalSecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.RegionalSecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(RegionalSecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.RegionalSecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(RegionalSecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## This resource supports User Project Overrides.

-

# IAM policy for Secret Manager RegionalSecret
Three different resources help you manage your IAM policy for Secret Manager RegionalSecret. Each of these resources serves a different use case:

* `gcp.secretmanager.RegionalSecretIamPolicy`: Authoritative. Sets the IAM policy for the regionalsecret and replaces any existing policy already attached.
* `gcp.secretmanager.RegionalSecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the regionalsecret are preserved.
* `gcp.secretmanager.RegionalSecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the regionalsecret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.RegionalSecretIamPolicy`: Retrieves the IAM policy for the regionalsecret

> **Note:** `gcp.secretmanager.RegionalSecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.RegionalSecretIamBinding` and `gcp.secretmanager.RegionalSecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.RegionalSecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.RegionalSecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.RegionalSecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.RegionalSecretIamPolicy("policy", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.RegionalSecretIamPolicy("policy",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.RegionalSecretIamPolicy("policy", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretIamPolicy(ctx, "policy", &secretmanager.RegionalSecretIamPolicyArgs{
			Project:    pulumi.Any(regional_secret_basic.Project),
			Location:   pulumi.Any(regional_secret_basic.Location),
			SecretId:   pulumi.Any(regional_secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicy;
import com.pulumi.gcp.secretmanager.RegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new RegionalSecretIamPolicy("policy", RegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:RegionalSecretIamPolicy
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.RegionalSecretIamBinding("binding", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.RegionalSecretIamBinding("binding",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.RegionalSecretIamBinding("binding", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamBinding(ctx, "binding", &secretmanager.RegionalSecretIamBindingArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.RegionalSecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBinding;
import com.pulumi.gcp.secretmanager.RegionalSecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RegionalSecretIamBinding("binding", RegionalSecretIamBindingArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(RegionalSecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:RegionalSecretIamBinding
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.RegionalSecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.RegionalSecretIamMember("member", {
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.RegionalSecretIamMember("member",
    project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.RegionalSecretIamMember("member", new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.RegionalSecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecretIamMember(ctx, "member", &secretmanager.RegionalSecretIamMemberArgs{
			Project:  pulumi.Any(regional_secret_basic.Project),
			Location: pulumi.Any(regional_secret_basic.Location),
			SecretId: pulumi.Any(regional_secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.RegionalSecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMember;
import com.pulumi.gcp.secretmanager.RegionalSecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RegionalSecretIamMember("member", RegionalSecretIamMemberArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(RegionalSecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:RegionalSecretIamMember
    properties:
      project: ${["regional-secret-basic"].project}
      location: ${["regional-secret-basic"].location}
      secretId: ${["regional-secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}

* {{project}}/{{location}}/{{secret_id}}

* {{location}}/{{secret_id}}

* {{secret_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Secret Manager regionalsecret IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:secretmanager/regionalSecretIamPolicy:RegionalSecretIamPolicy editor "projects/{{project}}/locations/{{location}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:secretmanager/regionalSecretIamPolicy:RegionalSecretIamPolicy editor "projects/{{project}}/locations/{{location}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:secretmanager/regionalSecretIamPolicy:RegionalSecretIamPolicy editor projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

┘
locationB" кThe location of the regional secret. eg us-central1
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.

secretId" "3
etag" '(Computed) The etag of the IAM policy.
"О
location" кThe location of the regional secret. eg us-central1
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"
secretId" *┘«
e
secretmanagerRegionalSecretVersion=gcp:secretmanager/regionalSecretVersion:RegionalSecretVersion└юA regional secret version resource.





## Example Usage

### Regional Secret Version Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secret_basic = new gcp.secretmanager.RegionalSecret("secret-basic", {
    secretId: "secret-version",
    location: "us-central1",
});
const regionalSecretVersionBasic = new gcp.secretmanager.RegionalSecretVersion("regional_secret_version_basic", {
    secret: secret_basic.id,
    secretData: "secret-data",
});
```
```python
import pulumi
import pulumi_gcp as gcp

secret_basic = gcp.secretmanager.RegionalSecret("secret-basic",
    secret_id="secret-version",
    location="us-central1")
regional_secret_version_basic = gcp.secretmanager.RegionalSecretVersion("regional_secret_version_basic",
    secret=secret_basic.id,
    secret_data="secret-data")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secret_basic = new Gcp.SecretManager.RegionalSecret("secret-basic", new()
    {
        SecretId = "secret-version",
        Location = "us-central1",
    });

    var regionalSecretVersionBasic = new Gcp.SecretManager.RegionalSecretVersion("regional_secret_version_basic", new()
    {
        Secret = secret_basic.Id,
        SecretData = "secret-data",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecret(ctx, "secret-basic", &secretmanager.RegionalSecretArgs{
			SecretId: pulumi.String("secret-version"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretVersion(ctx, "regional_secret_version_basic", &secretmanager.RegionalSecretVersionArgs{
			Secret:     secret_basic.ID(),
			SecretData: pulumi.String("secret-data"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecret;
import com.pulumi.gcp.secretmanager.RegionalSecretArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretVersion;
import com.pulumi.gcp.secretmanager.RegionalSecretVersionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_basic = new RegionalSecret("secret-basic", RegionalSecretArgs.builder()
            .secretId("secret-version")
            .location("us-central1")
            .build());

        var regionalSecretVersionBasic = new RegionalSecretVersion("regionalSecretVersionBasic", RegionalSecretVersionArgs.builder()
            .secret(secret_basic.id())
            .secretData("secret-data")
            .build());

    }
}
```
```yaml
resources:
  secret-basic:
    type: gcp:secretmanager:RegionalSecret
    properties:
      secretId: secret-version
      location: us-central1
  regionalSecretVersionBasic:
    type: gcp:secretmanager:RegionalSecretVersion
    name: regional_secret_version_basic
    properties:
      secret: ${["secret-basic"].id}
      secretData: secret-data
```
<!--End PulumiCodeChooser -->
### Regional Secret Version With Base64 Data


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as std from "@pulumi/std";

const secret_basic = new gcp.secretmanager.RegionalSecret("secret-basic", {
    secretId: "secret-version",
    location: "us-central1",
});
const regionalSecretVersionBase64 = new gcp.secretmanager.RegionalSecretVersion("regional_secret_version_base64", {
    secret: secret_basic.id,
    secretData: std.filebase64({
        input: "secret-data.pfx",
    }).then(invoke => invoke.result),
    isSecretDataBase64: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_std as std

secret_basic = gcp.secretmanager.RegionalSecret("secret-basic",
    secret_id="secret-version",
    location="us-central1")
regional_secret_version_base64 = gcp.secretmanager.RegionalSecretVersion("regional_secret_version_base64",
    secret=secret_basic.id,
    secret_data=std.filebase64(input="secret-data.pfx").result,
    is_secret_data_base64=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var secret_basic = new Gcp.SecretManager.RegionalSecret("secret-basic", new()
    {
        SecretId = "secret-version",
        Location = "us-central1",
    });

    var regionalSecretVersionBase64 = new Gcp.SecretManager.RegionalSecretVersion("regional_secret_version_base64", new()
    {
        Secret = secret_basic.Id,
        SecretData = Std.Filebase64.Invoke(new()
        {
            Input = "secret-data.pfx",
        }).Apply(invoke => invoke.Result),
        IsSecretDataBase64 = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecret(ctx, "secret-basic", &secretmanager.RegionalSecretArgs{
			SecretId: pulumi.String("secret-version"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		invokeFilebase64, err := std.Filebase64(ctx, &std.Filebase64Args{
			Input: "secret-data.pfx",
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretVersion(ctx, "regional_secret_version_base64", &secretmanager.RegionalSecretVersionArgs{
			Secret:             secret_basic.ID(),
			SecretData:         pulumi.String(invokeFilebase64.Result),
			IsSecretDataBase64: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecret;
import com.pulumi.gcp.secretmanager.RegionalSecretArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretVersion;
import com.pulumi.gcp.secretmanager.RegionalSecretVersionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_basic = new RegionalSecret("secret-basic", RegionalSecretArgs.builder()
            .secretId("secret-version")
            .location("us-central1")
            .build());

        var regionalSecretVersionBase64 = new RegionalSecretVersion("regionalSecretVersionBase64", RegionalSecretVersionArgs.builder()
            .secret(secret_basic.id())
            .secretData(StdFunctions.filebase64(Filebase64Args.builder()
                .input("secret-data.pfx")
                .build()).result())
            .isSecretDataBase64(true)
            .build());

    }
}
```
```yaml
resources:
  secret-basic:
    type: gcp:secretmanager:RegionalSecret
    properties:
      secretId: secret-version
      location: us-central1
  regionalSecretVersionBase64:
    type: gcp:secretmanager:RegionalSecretVersion
    name: regional_secret_version_base64
    properties:
      secret: ${["secret-basic"].id}
      secretData:
        fn::invoke:
          function: std:filebase64
          arguments:
            input: secret-data.pfx
          return: result
      isSecretDataBase64: true
```
<!--End PulumiCodeChooser -->
### Regional Secret Version Disabled


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secret_basic = new gcp.secretmanager.RegionalSecret("secret-basic", {
    secretId: "secret-version",
    location: "us-central1",
});
const regionalSecretVersionDisabled = new gcp.secretmanager.RegionalSecretVersion("regional_secret_version_disabled", {
    secret: secret_basic.id,
    secretData: "secret-data",
    enabled: false,
});
```
```python
import pulumi
import pulumi_gcp as gcp

secret_basic = gcp.secretmanager.RegionalSecret("secret-basic",
    secret_id="secret-version",
    location="us-central1")
regional_secret_version_disabled = gcp.secretmanager.RegionalSecretVersion("regional_secret_version_disabled",
    secret=secret_basic.id,
    secret_data="secret-data",
    enabled=False)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secret_basic = new Gcp.SecretManager.RegionalSecret("secret-basic", new()
    {
        SecretId = "secret-version",
        Location = "us-central1",
    });

    var regionalSecretVersionDisabled = new Gcp.SecretManager.RegionalSecretVersion("regional_secret_version_disabled", new()
    {
        Secret = secret_basic.Id,
        SecretData = "secret-data",
        Enabled = false,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecret(ctx, "secret-basic", &secretmanager.RegionalSecretArgs{
			SecretId: pulumi.String("secret-version"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretVersion(ctx, "regional_secret_version_disabled", &secretmanager.RegionalSecretVersionArgs{
			Secret:     secret_basic.ID(),
			SecretData: pulumi.String("secret-data"),
			Enabled:    pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecret;
import com.pulumi.gcp.secretmanager.RegionalSecretArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretVersion;
import com.pulumi.gcp.secretmanager.RegionalSecretVersionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_basic = new RegionalSecret("secret-basic", RegionalSecretArgs.builder()
            .secretId("secret-version")
            .location("us-central1")
            .build());

        var regionalSecretVersionDisabled = new RegionalSecretVersion("regionalSecretVersionDisabled", RegionalSecretVersionArgs.builder()
            .secret(secret_basic.id())
            .secretData("secret-data")
            .enabled(false)
            .build());

    }
}
```
```yaml
resources:
  secret-basic:
    type: gcp:secretmanager:RegionalSecret
    properties:
      secretId: secret-version
      location: us-central1
  regionalSecretVersionDisabled:
    type: gcp:secretmanager:RegionalSecretVersion
    name: regional_secret_version_disabled
    properties:
      secret: ${["secret-basic"].id}
      secretData: secret-data
      enabled: false
```
<!--End PulumiCodeChooser -->
### Regional Secret Version Deletion Policy Abandon


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secret_basic = new gcp.secretmanager.RegionalSecret("secret-basic", {
    secretId: "secret-version",
    location: "us-central1",
});
const regionalSecretVersionDeletionPolicy = new gcp.secretmanager.RegionalSecretVersion("regional_secret_version_deletion_policy", {
    secret: secret_basic.id,
    secretData: "secret-data",
    deletionPolicy: "ABANDON",
});
```
```python
import pulumi
import pulumi_gcp as gcp

secret_basic = gcp.secretmanager.RegionalSecret("secret-basic",
    secret_id="secret-version",
    location="us-central1")
regional_secret_version_deletion_policy = gcp.secretmanager.RegionalSecretVersion("regional_secret_version_deletion_policy",
    secret=secret_basic.id,
    secret_data="secret-data",
    deletion_policy="ABANDON")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secret_basic = new Gcp.SecretManager.RegionalSecret("secret-basic", new()
    {
        SecretId = "secret-version",
        Location = "us-central1",
    });

    var regionalSecretVersionDeletionPolicy = new Gcp.SecretManager.RegionalSecretVersion("regional_secret_version_deletion_policy", new()
    {
        Secret = secret_basic.Id,
        SecretData = "secret-data",
        DeletionPolicy = "ABANDON",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecret(ctx, "secret-basic", &secretmanager.RegionalSecretArgs{
			SecretId: pulumi.String("secret-version"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretVersion(ctx, "regional_secret_version_deletion_policy", &secretmanager.RegionalSecretVersionArgs{
			Secret:         secret_basic.ID(),
			SecretData:     pulumi.String("secret-data"),
			DeletionPolicy: pulumi.String("ABANDON"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecret;
import com.pulumi.gcp.secretmanager.RegionalSecretArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretVersion;
import com.pulumi.gcp.secretmanager.RegionalSecretVersionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_basic = new RegionalSecret("secret-basic", RegionalSecretArgs.builder()
            .secretId("secret-version")
            .location("us-central1")
            .build());

        var regionalSecretVersionDeletionPolicy = new RegionalSecretVersion("regionalSecretVersionDeletionPolicy", RegionalSecretVersionArgs.builder()
            .secret(secret_basic.id())
            .secretData("secret-data")
            .deletionPolicy("ABANDON")
            .build());

    }
}
```
```yaml
resources:
  secret-basic:
    type: gcp:secretmanager:RegionalSecret
    properties:
      secretId: secret-version
      location: us-central1
  regionalSecretVersionDeletionPolicy:
    type: gcp:secretmanager:RegionalSecretVersion
    name: regional_secret_version_deletion_policy
    properties:
      secret: ${["secret-basic"].id}
      secretData: secret-data
      deletionPolicy: ABANDON
```
<!--End PulumiCodeChooser -->
### Regional Secret Version Deletion Policy Disable


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secret_basic = new gcp.secretmanager.RegionalSecret("secret-basic", {
    secretId: "secret-version",
    location: "us-central1",
});
const regionalSecretVersionDeletionPolicy = new gcp.secretmanager.RegionalSecretVersion("regional_secret_version_deletion_policy", {
    secret: secret_basic.id,
    secretData: "secret-data",
    deletionPolicy: "DISABLE",
});
```
```python
import pulumi
import pulumi_gcp as gcp

secret_basic = gcp.secretmanager.RegionalSecret("secret-basic",
    secret_id="secret-version",
    location="us-central1")
regional_secret_version_deletion_policy = gcp.secretmanager.RegionalSecretVersion("regional_secret_version_deletion_policy",
    secret=secret_basic.id,
    secret_data="secret-data",
    deletion_policy="DISABLE")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secret_basic = new Gcp.SecretManager.RegionalSecret("secret-basic", new()
    {
        SecretId = "secret-version",
        Location = "us-central1",
    });

    var regionalSecretVersionDeletionPolicy = new Gcp.SecretManager.RegionalSecretVersion("regional_secret_version_deletion_policy", new()
    {
        Secret = secret_basic.Id,
        SecretData = "secret-data",
        DeletionPolicy = "DISABLE",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewRegionalSecret(ctx, "secret-basic", &secretmanager.RegionalSecretArgs{
			SecretId: pulumi.String("secret-version"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewRegionalSecretVersion(ctx, "regional_secret_version_deletion_policy", &secretmanager.RegionalSecretVersionArgs{
			Secret:         secret_basic.ID(),
			SecretData:     pulumi.String("secret-data"),
			DeletionPolicy: pulumi.String("DISABLE"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.RegionalSecret;
import com.pulumi.gcp.secretmanager.RegionalSecretArgs;
import com.pulumi.gcp.secretmanager.RegionalSecretVersion;
import com.pulumi.gcp.secretmanager.RegionalSecretVersionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_basic = new RegionalSecret("secret-basic", RegionalSecretArgs.builder()
            .secretId("secret-version")
            .location("us-central1")
            .build());

        var regionalSecretVersionDeletionPolicy = new RegionalSecretVersion("regionalSecretVersionDeletionPolicy", RegionalSecretVersionArgs.builder()
            .secret(secret_basic.id())
            .secretData("secret-data")
            .deletionPolicy("DISABLE")
            .build());

    }
}
```
```yaml
resources:
  secret-basic:
    type: gcp:secretmanager:RegionalSecret
    properties:
      secretId: secret-version
      location: us-central1
  regionalSecretVersionDeletionPolicy:
    type: gcp:secretmanager:RegionalSecretVersion
    name: regional_secret_version_deletion_policy
    properties:
      secret: ${["secret-basic"].id}
      secretData: secret-data
      deletionPolicy: DISABLE
```
<!--End PulumiCodeChooser -->

## Import

RegionalSecretVersion can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`

When using the `pulumi import` command, RegionalSecretVersion can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:secretmanager/regionalSecretVersion:RegionalSecretVersion default projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}
```

ф
deletionPolicyB" ЉThe deletion policy for the regional secret version. Setting `ABANDON` allows the resource
to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
disabled rather than deleted. Default is `DELETE`. Possible values are:
* DELETE
* DISABLE
* ABANDON
C
enabledB
 2The current state of the regional secret version.

isSecretDataBase64B
 cIf set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
?
secret" 1Secret Manager regional secret resource.


- - -
Ї

secretData" {The secret data. Must be no larger than 64KiB.
**Note**: This property is sensitive and will not be displayed in the plan.
"M

createTime" ;The time at which the regional secret version was created.
"┐
customerManagedEncryptions╣*Х:│
░
secretmanager.RegionalSecretVersionCustomerManagedEncryptionogcp:secretmanager/RegionalSecretVersionCustomerManagedEncryption:RegionalSecretVersionCustomerManagedEncryptioneThe customer-managed encryption configuration of the regional secret.
Structure is documented below.
"ф
deletionPolicyB" ЉThe deletion policy for the regional secret version. Setting `ABANDON` allows the resource
to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
disabled rather than deleted. Default is `DELETE`. Possible values are:
* DELETE
* DISABLE
* ABANDON
"t
destroyTime" aThe time at which the regional secret version was destroyed. Only present if state is DESTROYED.
"C
enabledB
 2The current state of the regional secret version.
"
isSecretDataBase64B
 cIf set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
"E
location" 5Location of Secret Manager regional secret resource.
"а
name" ЊThe resource name of the regional secret version. Format:
`projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
"?
secret" 1Secret Manager regional secret resource.


- - -
"Ї

secretData" {The secret data. Must be no larger than 64KiB.
**Note**: This property is sensitive and will not be displayed in the plan.
"3
version" $The version of the Regional Secret.
*ъ┘
8
secretmanagerSecretgcp:secretmanager/secret:Secret┼ќA Secret is a logical secret whose value and versions can be accessed.


To get more information about Secret, see:

* [API documentation](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets)

## Example Usage

### Secret Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secret_basic = new gcp.secretmanager.Secret("secret-basic", {
    secretId: "secret",
    labels: {
        label: "my-label",
    },
    replication: {
        userManaged: {
            replicas: [
                {
                    location: "us-central1",
                },
                {
                    location: "us-east1",
                },
            ],
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

secret_basic = gcp.secretmanager.Secret("secret-basic",
    secret_id="secret",
    labels={
        "label": "my-label",
    },
    replication={
        "user_managed": {
            "replicas": [
                {
                    "location": "us-central1",
                },
                {
                    "location": "us-east1",
                },
            ],
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secret_basic = new Gcp.SecretManager.Secret("secret-basic", new()
    {
        SecretId = "secret",
        Labels = 
        {
            { "label", "my-label" },
        },
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            UserManaged = new Gcp.SecretManager.Inputs.SecretReplicationUserManagedArgs
            {
                Replicas = new[]
                {
                    new Gcp.SecretManager.Inputs.SecretReplicationUserManagedReplicaArgs
                    {
                        Location = "us-central1",
                    },
                    new Gcp.SecretManager.Inputs.SecretReplicationUserManagedReplicaArgs
                    {
                        Location = "us-east1",
                    },
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecret(ctx, "secret-basic", &secretmanager.SecretArgs{
			SecretId: pulumi.String("secret"),
			Labels: pulumi.StringMap{
				"label": pulumi.String("my-label"),
			},
			Replication: &secretmanager.SecretReplicationArgs{
				UserManaged: &secretmanager.SecretReplicationUserManagedArgs{
					Replicas: secretmanager.SecretReplicationUserManagedReplicaArray{
						&secretmanager.SecretReplicationUserManagedReplicaArgs{
							Location: pulumi.String("us-central1"),
						},
						&secretmanager.SecretReplicationUserManagedReplicaArgs{
							Location: pulumi.String("us-east1"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationUserManagedArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_basic = new Secret("secret-basic", SecretArgs.builder()
            .secretId("secret")
            .labels(Map.of("label", "my-label"))
            .replication(SecretReplicationArgs.builder()
                .userManaged(SecretReplicationUserManagedArgs.builder()
                    .replicas(                    
                        SecretReplicationUserManagedReplicaArgs.builder()
                            .location("us-central1")
                            .build(),
                        SecretReplicationUserManagedReplicaArgs.builder()
                            .location("us-east1")
                            .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  secret-basic:
    type: gcp:secretmanager:Secret
    properties:
      secretId: secret
      labels:
        label: my-label
      replication:
        userManaged:
          replicas:
            - location: us-central1
            - location: us-east1
```
<!--End PulumiCodeChooser -->
### Secret With Annotations


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secret_with_annotations = new gcp.secretmanager.Secret("secret-with-annotations", {
    secretId: "secret",
    labels: {
        label: "my-label",
    },
    annotations: {
        key1: "someval",
        key2: "someval2",
        key3: "someval3",
        key4: "someval4",
        key5: "someval5",
    },
    replication: {
        auto: {},
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

secret_with_annotations = gcp.secretmanager.Secret("secret-with-annotations",
    secret_id="secret",
    labels={
        "label": "my-label",
    },
    annotations={
        "key1": "someval",
        "key2": "someval2",
        "key3": "someval3",
        "key4": "someval4",
        "key5": "someval5",
    },
    replication={
        "auto": {},
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secret_with_annotations = new Gcp.SecretManager.Secret("secret-with-annotations", new()
    {
        SecretId = "secret",
        Labels = 
        {
            { "label", "my-label" },
        },
        Annotations = 
        {
            { "key1", "someval" },
            { "key2", "someval2" },
            { "key3", "someval3" },
            { "key4", "someval4" },
            { "key5", "someval5" },
        },
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = null,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecret(ctx, "secret-with-annotations", &secretmanager.SecretArgs{
			SecretId: pulumi.String("secret"),
			Labels: pulumi.StringMap{
				"label": pulumi.String("my-label"),
			},
			Annotations: pulumi.StringMap{
				"key1": pulumi.String("someval"),
				"key2": pulumi.String("someval2"),
				"key3": pulumi.String("someval3"),
				"key4": pulumi.String("someval4"),
				"key5": pulumi.String("someval5"),
			},
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_with_annotations = new Secret("secret-with-annotations", SecretArgs.builder()
            .secretId("secret")
            .labels(Map.of("label", "my-label"))
            .annotations(Map.ofEntries(
                Map.entry("key1", "someval"),
                Map.entry("key2", "someval2"),
                Map.entry("key3", "someval3"),
                Map.entry("key4", "someval4"),
                Map.entry("key5", "someval5")
            ))
            .replication(SecretReplicationArgs.builder()
                .auto()
                .build())
            .build());

    }
}
```
```yaml
resources:
  secret-with-annotations:
    type: gcp:secretmanager:Secret
    properties:
      secretId: secret
      labels:
        label: my-label
      annotations:
        key1: someval
        key2: someval2
        key3: someval3
        key4: someval4
        key5: someval5
      replication:
        auto: {}
```
<!--End PulumiCodeChooser -->
### Secret With Version Destroy Ttl


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secret_with_version_destroy_ttl = new gcp.secretmanager.Secret("secret-with-version-destroy-ttl", {
    secretId: "secret",
    versionDestroyTtl: "2592000s",
    replication: {
        auto: {},
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

secret_with_version_destroy_ttl = gcp.secretmanager.Secret("secret-with-version-destroy-ttl",
    secret_id="secret",
    version_destroy_ttl="2592000s",
    replication={
        "auto": {},
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secret_with_version_destroy_ttl = new Gcp.SecretManager.Secret("secret-with-version-destroy-ttl", new()
    {
        SecretId = "secret",
        VersionDestroyTtl = "2592000s",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = null,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecret(ctx, "secret-with-version-destroy-ttl", &secretmanager.SecretArgs{
			SecretId:          pulumi.String("secret"),
			VersionDestroyTtl: pulumi.String("2592000s"),
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_with_version_destroy_ttl = new Secret("secret-with-version-destroy-ttl", SecretArgs.builder()
            .secretId("secret")
            .versionDestroyTtl("2592000s")
            .replication(SecretReplicationArgs.builder()
                .auto()
                .build())
            .build());

    }
}
```
```yaml
resources:
  secret-with-version-destroy-ttl:
    type: gcp:secretmanager:Secret
    properties:
      secretId: secret
      versionDestroyTtl: 2592000s
      replication:
        auto: {}
```
<!--End PulumiCodeChooser -->
### Secret With Automatic Cmek


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const kms_secret_binding = new gcp.kms.CryptoKeyIAMMember("kms-secret-binding", {
    cryptoKeyId: "kms-key",
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-secretmanager.iam.gserviceaccount.com`),
});
const secret_with_automatic_cmek = new gcp.secretmanager.Secret("secret-with-automatic-cmek", {
    secretId: "secret",
    replication: {
        auto: {
            customerManagedEncryption: {
                kmsKeyName: "kms-key",
            },
        },
    },
}, {
    dependsOn: [kms_secret_binding],
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
kms_secret_binding = gcp.kms.CryptoKeyIAMMember("kms-secret-binding",
    crypto_key_id="kms-key",
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=f"serviceAccount:service-{project.number}@gcp-sa-secretmanager.iam.gserviceaccount.com")
secret_with_automatic_cmek = gcp.secretmanager.Secret("secret-with-automatic-cmek",
    secret_id="secret",
    replication={
        "auto": {
            "customer_managed_encryption": {
                "kms_key_name": "kms-key",
            },
        },
    },
    opts = pulumi.ResourceOptions(depends_on=[kms_secret_binding]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var kms_secret_binding = new Gcp.Kms.CryptoKeyIAMMember("kms-secret-binding", new()
    {
        CryptoKeyId = "kms-key",
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-secretmanager.iam.gserviceaccount.com",
    });

    var secret_with_automatic_cmek = new Gcp.SecretManager.Secret("secret-with-automatic-cmek", new()
    {
        SecretId = "secret",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = new Gcp.SecretManager.Inputs.SecretReplicationAutoArgs
            {
                CustomerManagedEncryption = new Gcp.SecretManager.Inputs.SecretReplicationAutoCustomerManagedEncryptionArgs
                {
                    KmsKeyName = "kms-key",
                },
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            kms_secret_binding,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = kms.NewCryptoKeyIAMMember(ctx, "kms-secret-binding", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: pulumi.String("kms-key"),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-secretmanager.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecret(ctx, "secret-with-automatic-cmek", &secretmanager.SecretArgs{
			SecretId: pulumi.String("secret"),
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{
					CustomerManagedEncryption: &secretmanager.SecretReplicationAutoCustomerManagedEncryptionArgs{
						KmsKeyName: pulumi.String("kms-key"),
					},
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			kms_secret_binding,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoCustomerManagedEncryptionArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var kms_secret_binding = new CryptoKeyIAMMember("kms-secret-binding", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId("kms-key")
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(String.format("serviceAccount:service-%s@gcp-sa-secretmanager.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var secret_with_automatic_cmek = new Secret("secret-with-automatic-cmek", SecretArgs.builder()
            .secretId("secret")
            .replication(SecretReplicationArgs.builder()
                .auto(SecretReplicationAutoArgs.builder()
                    .customerManagedEncryption(SecretReplicationAutoCustomerManagedEncryptionArgs.builder()
                        .kmsKeyName("kms-key")
                        .build())
                    .build())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(kms_secret_binding)
                .build());

    }
}
```
```yaml
resources:
  kms-secret-binding:
    type: gcp:kms:CryptoKeyIAMMember
    properties:
      cryptoKeyId: kms-key
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: serviceAccount:service-${project.number}@gcp-sa-secretmanager.iam.gserviceaccount.com
  secret-with-automatic-cmek:
    type: gcp:secretmanager:Secret
    properties:
      secretId: secret
      replication:
        auto:
          customerManagedEncryption:
            kmsKeyName: kms-key
    options:
      dependsOn:
        - ${["kms-secret-binding"]}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Secret can be imported using any of these accepted formats:

* `projects/{{project}}/secrets/{{secret_id}}`

* `{{project}}/{{secret_id}}`

* `{{secret_id}}`

When using the `pulumi import` command, Secret can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:secretmanager/secret:Secret default projects/{{project}}/secrets/{{secret_id}}
```

```sh
$ pulumi import gcp:secretmanager/secret:Secret default {{project}}/{{secret_id}}
```

```sh
$ pulumi import gcp:secretmanager/secret:Secret default {{secret_id}}
```

Ж
annotationsB2" мCustom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow
client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63
characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]),
and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of
annotation keys and values must be less than 16KiB. An object containing a list of "key": value pairs. Example: {
"name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the
annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
present on the resource.
щ

expireTimeB" СTimestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent
on input. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z". Only one of 'expire_time' or 'ttl' can be
provided.
ф
labelsB2" ЌThe labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to
the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be assigned to a given
resource. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3"
}. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
refer to the field 'effective_labels' for all of the labels present on the resource.

projectB" ѕ
replication]:[
Y
secretmanagerSecretReplication5gcp:secretmanager/SecretReplication:SecretReplicationЎThe replication policy of the secret data attached to the Secret. It cannot be changed
after the Secret has been created.
Structure is documented below.
Г
rotationVBT:R
P
secretmanagerSecretRotation/gcp:secretmanager/SecretRotation:SecretRotation╚The rotation time and period for a Secret. At 'next_rotation_time', Secret Manager will send a Pub/Sub notification to
the topics configured on the Secret. 'topics' must be set to configure rotation.
8
secretId" (This must be unique within the project.
Т
topicsOBM*K:I
G
secretmanagerSecretTopic)gcp:secretmanager/SecretTopic:SecretTopicіA list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret
or its versions.
и
ttlB" ЕThe TTL for the Secret. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
Only one of 'ttl' or 'expire_time' can be provided.
Щ
versionAliasesB2" ▀Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can
contain uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_') characters. An alias string
must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given
secret. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
┘
versionDestroyTtlB" йSecret Version TTL after destruction request. This is a part of the delayed delete feature on Secret Version. For secret
with versionDestroyTtl>0, version destruction doesn't happen immediately on calling destroy instead the version goes to
a disabled state and the actual destruction happens after this TTL expires.
"Ж
annotationsB2" мCustom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow
client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63
characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]),
and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of
annotation keys and values must be less than 16KiB. An object containing a list of "key": value pairs. Example: {
"name": "wrench", "mass": "1.3kg", "count": "3" }. **Note**: This field is non-authoritative, and will only manage the
annotations present in your configuration. Please refer to the field 'effective_annotations' for all of the annotations
present on the resource.
"<

createTime" *The time at which the Secret was created.
"
effectiveAnnotations2" "д
effectiveLabels2" їAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"э

expireTime" СTimestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent
on input. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z". Only one of 'expire_time' or 'ttl' can be
provided.
"ф
labelsB2" ЌThe labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of
maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to
the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be assigned to a given
resource. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3"
}. **Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please
refer to the field 'effective_labels' for all of the labels present on the resource.
"b
name" VThe resource name of the Secret. Format:
`projects/{{project}}/secrets/{{secret_id}}`
"
project" "Ѓ
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"ѕ
replication]:[
Y
secretmanagerSecretReplication5gcp:secretmanager/SecretReplication:SecretReplicationЎThe replication policy of the secret data attached to the Secret. It cannot be changed
after the Secret has been created.
Structure is documented below.
"Г
rotationVBT:R
P
secretmanagerSecretRotation/gcp:secretmanager/SecretRotation:SecretRotation╚The rotation time and period for a Secret. At 'next_rotation_time', Secret Manager will send a Pub/Sub notification to
the topics configured on the Secret. 'topics' must be set to configure rotation.
"8
secretId" (This must be unique within the project.
"Т
topicsOBM*K:I
G
secretmanagerSecretTopic)gcp:secretmanager/SecretTopic:SecretTopicіA list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret
or its versions.
"и
ttlB" ЕThe TTL for the Secret. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
Only one of 'ttl' or 'expire_time' can be provided.
"Щ
versionAliasesB2" ▀Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can
contain uppercase and lowercase letters, numerals, and the hyphen (-) and underscore ('_') characters. An alias string
must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given
secret. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
"┘
versionDestroyTtlB" йSecret Version TTL after destruction request. This is a part of the delayed delete feature on Secret Version. For secret
with versionDestroyTtl>0, version destruction doesn't happen immediately on calling destroy instead the version goes to
a disabled state and the actual destruction happens after this TTL expires.
*в┴
V
secretmanagerSecretIamBinding3gcp:secretmanager/secretIamBinding:SecretIamBindingћАThree different resources help you manage your IAM policy for Secret Manager Secret. Each of these resources serves a different use case:

* `gcp.secretmanager.SecretIamPolicy`: Authoritative. Sets the IAM policy for the secret and replaces any existing policy already attached.
* `gcp.secretmanager.SecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the secret are preserved.
* `gcp.secretmanager.SecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the secret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.SecretIamPolicy`: Retrieves the IAM policy for the secret

> **Note:** `gcp.secretmanager.SecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.SecretIamBinding` and `gcp.secretmanager.SecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.SecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.SecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.SecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.SecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.SecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(SecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.SecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.SecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(SecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## This resource supports User Project Overrides.

-

# IAM policy for Secret Manager Secret
Three different resources help you manage your IAM policy for Secret Manager Secret. Each of these resources serves a different use case:

* `gcp.secretmanager.SecretIamPolicy`: Authoritative. Sets the IAM policy for the secret and replaces any existing policy already attached.
* `gcp.secretmanager.SecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the secret are preserved.
* `gcp.secretmanager.SecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the secret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.SecretIamPolicy`: Retrieves the IAM policy for the secret

> **Note:** `gcp.secretmanager.SecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.SecretIamBinding` and `gcp.secretmanager.SecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.SecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.SecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.SecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.SecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.SecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(SecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.SecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.SecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(SecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/secrets/{{secret_id}}

* {{project}}/{{secret_id}}

* {{secret_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Secret Manager secret IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:secretmanager/secretIamBinding:SecretIamBinding editor "projects/{{project}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:secretmanager/secretIamBinding:SecretIamBinding editor "projects/{{project}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:secretmanager/secretIamBinding:SecretIamBinding editor projects/{{project}}/secrets/{{secret_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

ё
	conditionwBu:s
q
secretmanagerSecretIamBindingConditionEgcp:secretmanager/SecretIamBindingCondition:SecretIamBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
о	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
█
role" ╬The role that should be applied. Only one
`gcp.secretmanager.SecretIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.

secretId" "ё
	conditionwBu:s
q
secretmanagerSecretIamBindingConditionEgcp:secretmanager/SecretIamBindingCondition:SecretIamBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"3
etag" '(Computed) The etag of the IAM policy.
"о	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"█
role" ╬The role that should be applied. Only one
`gcp.secretmanager.SecretIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"
secretId" *о┴
S
secretmanagerSecretIamMember1gcp:secretmanager/secretIamMember:SecretIamMemberјАThree different resources help you manage your IAM policy for Secret Manager Secret. Each of these resources serves a different use case:

* `gcp.secretmanager.SecretIamPolicy`: Authoritative. Sets the IAM policy for the secret and replaces any existing policy already attached.
* `gcp.secretmanager.SecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the secret are preserved.
* `gcp.secretmanager.SecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the secret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.SecretIamPolicy`: Retrieves the IAM policy for the secret

> **Note:** `gcp.secretmanager.SecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.SecretIamBinding` and `gcp.secretmanager.SecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.SecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.SecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.SecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.SecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.SecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(SecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.SecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.SecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(SecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## This resource supports User Project Overrides.

-

# IAM policy for Secret Manager Secret
Three different resources help you manage your IAM policy for Secret Manager Secret. Each of these resources serves a different use case:

* `gcp.secretmanager.SecretIamPolicy`: Authoritative. Sets the IAM policy for the secret and replaces any existing policy already attached.
* `gcp.secretmanager.SecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the secret are preserved.
* `gcp.secretmanager.SecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the secret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.SecretIamPolicy`: Retrieves the IAM policy for the secret

> **Note:** `gcp.secretmanager.SecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.SecretIamBinding` and `gcp.secretmanager.SecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.SecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.SecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.SecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.SecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.SecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(SecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.SecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.SecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(SecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/secrets/{{secret_id}}

* {{project}}/{{secret_id}}

* {{secret_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Secret Manager secret IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:secretmanager/secretIamMember:SecretIamMember editor "projects/{{project}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:secretmanager/secretIamMember:SecretIamMember editor "projects/{{project}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:secretmanager/secretIamMember:SecretIamMember editor projects/{{project}}/secrets/{{secret_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

Ђ
	conditiontBr:p
n
secretmanagerSecretIamMemberConditionCgcp:secretmanager/SecretIamMemberCondition:SecretIamMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
М	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
█
role" ╬The role that should be applied. Only one
`gcp.secretmanager.SecretIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.

secretId" "Ђ
	conditiontBr:p
n
secretmanagerSecretIamMemberConditionCgcp:secretmanager/SecretIamMemberCondition:SecretIamMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"3
etag" '(Computed) The etag of the IAM policy.
"М	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"█
role" ╬The role that should be applied. Only one
`gcp.secretmanager.SecretIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"
secretId" *ее
S
secretmanagerSecretIamPolicy1gcp:secretmanager/secretIamPolicy:SecretIamPolicyјАThree different resources help you manage your IAM policy for Secret Manager Secret. Each of these resources serves a different use case:

* `gcp.secretmanager.SecretIamPolicy`: Authoritative. Sets the IAM policy for the secret and replaces any existing policy already attached.
* `gcp.secretmanager.SecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the secret are preserved.
* `gcp.secretmanager.SecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the secret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.SecretIamPolicy`: Retrieves the IAM policy for the secret

> **Note:** `gcp.secretmanager.SecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.SecretIamBinding` and `gcp.secretmanager.SecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.SecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.SecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.SecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.SecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.SecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(SecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.SecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.SecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(SecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## This resource supports User Project Overrides.

-

# IAM policy for Secret Manager Secret
Three different resources help you manage your IAM policy for Secret Manager Secret. Each of these resources serves a different use case:

* `gcp.secretmanager.SecretIamPolicy`: Authoritative. Sets the IAM policy for the secret and replaces any existing policy already attached.
* `gcp.secretmanager.SecretIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the secret are preserved.
* `gcp.secretmanager.SecretIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the secret are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.secretmanager.SecretIamPolicy`: Retrieves the IAM policy for the secret

> **Note:** `gcp.secretmanager.SecretIamPolicy` **cannot** be used in conjunction with `gcp.secretmanager.SecretIamBinding` and `gcp.secretmanager.SecretIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.secretmanager.SecretIamBinding` resources **can be** used in conjunction with `gcp.secretmanager.SecretIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.secretmanager.SecretIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/secretmanager.secretAccessor",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.secretmanager.SecretIamPolicy("policy", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/secretmanager.secretAccessor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.secretmanager.SecretIamPolicy("policy",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/secretmanager.secretAccessor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.SecretManager.SecretIamPolicy("policy", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/secretmanager.secretAccessor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamPolicy(ctx, "policy", &secretmanager.SecretIamPolicyArgs{
			Project:    pulumi.Any(secret_basic.Project),
			SecretId:   pulumi.Any(secret_basic.SecretId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.secretmanager.SecretIamPolicy;
import com.pulumi.gcp.secretmanager.SecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/secretmanager.secretAccessor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new SecretIamPolicy("policy", SecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:secretmanager:SecretIamPolicy
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/secretmanager.secretAccessor
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.secretmanager.SecretIamBinding("binding", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.secretmanager.SecretIamBinding("binding",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecretManager.SecretIamBinding("binding", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.SecretManager.Inputs.SecretIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamBinding(ctx, "binding", &secretmanager.SecretIamBindingArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &secretmanager.SecretIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamBinding;
import com.pulumi.gcp.secretmanager.SecretIamBindingArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new SecretIamBinding("binding", SecretIamBindingArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .members("user:jane@example.com")
            .condition(SecretIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:secretmanager:SecretIamBinding
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.secretmanager.SecretIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.secretmanager.SecretIamMember("member", {
    project: secret_basic.project,
    secretId: secret_basic.secretId,
    role: "roles/secretmanager.secretAccessor",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.secretmanager.SecretIamMember("member",
    project=secret_basic["project"],
    secret_id=secret_basic["secretId"],
    role="roles/secretmanager.secretAccessor",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecretManager.SecretIamMember("member", new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
        Role = "roles/secretmanager.secretAccessor",
        Member = "user:jane@example.com",
        Condition = new Gcp.SecretManager.Inputs.SecretIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecretIamMember(ctx, "member", &secretmanager.SecretIamMemberArgs{
			Project:  pulumi.Any(secret_basic.Project),
			SecretId: pulumi.Any(secret_basic.SecretId),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &secretmanager.SecretIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new SecretIamMember("member", SecretIamMemberArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .role("roles/secretmanager.secretAccessor")
            .member("user:jane@example.com")
            .condition(SecretIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:secretmanager:SecretIamMember
    properties:
      project: ${["secret-basic"].project}
      secretId: ${["secret-basic"].secretId}
      role: roles/secretmanager.secretAccessor
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/secrets/{{secret_id}}

* {{project}}/{{secret_id}}

* {{secret_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Secret Manager secret IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:secretmanager/secretIamPolicy:SecretIamPolicy editor "projects/{{project}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:secretmanager/secretIamPolicy:SecretIamPolicy editor "projects/{{project}}/secrets/{{secret_id}} roles/secretmanager.secretAccessor"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:secretmanager/secretIamPolicy:SecretIamPolicy editor projects/{{project}}/secrets/{{secret_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.

secretId" "3
etag" '(Computed) The etag of the IAM policy.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"
secretId" *љг
M
secretmanagerSecretVersion-gcp:secretmanager/secretVersion:SecretVersionаъA secret version resource.





## Example Usage

### Secret Version Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secret_basic = new gcp.secretmanager.Secret("secret-basic", {
    secretId: "secret-version",
    labels: {
        label: "my-label",
    },
    replication: {
        auto: {},
    },
});
const secret_version_basic = new gcp.secretmanager.SecretVersion("secret-version-basic", {
    secret: secret_basic.id,
    secretData: "secret-data",
});
```
```python
import pulumi
import pulumi_gcp as gcp

secret_basic = gcp.secretmanager.Secret("secret-basic",
    secret_id="secret-version",
    labels={
        "label": "my-label",
    },
    replication={
        "auto": {},
    })
secret_version_basic = gcp.secretmanager.SecretVersion("secret-version-basic",
    secret=secret_basic.id,
    secret_data="secret-data")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secret_basic = new Gcp.SecretManager.Secret("secret-basic", new()
    {
        SecretId = "secret-version",
        Labels = 
        {
            { "label", "my-label" },
        },
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = null,
        },
    });

    var secret_version_basic = new Gcp.SecretManager.SecretVersion("secret-version-basic", new()
    {
        Secret = secret_basic.Id,
        SecretData = "secret-data",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecret(ctx, "secret-basic", &secretmanager.SecretArgs{
			SecretId: pulumi.String("secret-version"),
			Labels: pulumi.StringMap{
				"label": pulumi.String("my-label"),
			},
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{},
			},
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretVersion(ctx, "secret-version-basic", &secretmanager.SecretVersionArgs{
			Secret:     secret_basic.ID(),
			SecretData: pulumi.String("secret-data"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_basic = new Secret("secret-basic", SecretArgs.builder()
            .secretId("secret-version")
            .labels(Map.of("label", "my-label"))
            .replication(SecretReplicationArgs.builder()
                .auto()
                .build())
            .build());

        var secret_version_basic = new SecretVersion("secret-version-basic", SecretVersionArgs.builder()
            .secret(secret_basic.id())
            .secretData("secret-data")
            .build());

    }
}
```
```yaml
resources:
  secret-basic:
    type: gcp:secretmanager:Secret
    properties:
      secretId: secret-version
      labels:
        label: my-label
      replication:
        auto: {}
  secret-version-basic:
    type: gcp:secretmanager:SecretVersion
    properties:
      secret: ${["secret-basic"].id}
      secretData: secret-data
```
<!--End PulumiCodeChooser -->
### Secret Version Deletion Policy Abandon


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secret_basic = new gcp.secretmanager.Secret("secret-basic", {
    secretId: "secret-version",
    replication: {
        userManaged: {
            replicas: [{
                location: "us-central1",
            }],
        },
    },
});
const secret_version_deletion_policy = new gcp.secretmanager.SecretVersion("secret-version-deletion-policy", {
    secret: secret_basic.id,
    secretData: "secret-data",
    deletionPolicy: "ABANDON",
});
```
```python
import pulumi
import pulumi_gcp as gcp

secret_basic = gcp.secretmanager.Secret("secret-basic",
    secret_id="secret-version",
    replication={
        "user_managed": {
            "replicas": [{
                "location": "us-central1",
            }],
        },
    })
secret_version_deletion_policy = gcp.secretmanager.SecretVersion("secret-version-deletion-policy",
    secret=secret_basic.id,
    secret_data="secret-data",
    deletion_policy="ABANDON")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secret_basic = new Gcp.SecretManager.Secret("secret-basic", new()
    {
        SecretId = "secret-version",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            UserManaged = new Gcp.SecretManager.Inputs.SecretReplicationUserManagedArgs
            {
                Replicas = new[]
                {
                    new Gcp.SecretManager.Inputs.SecretReplicationUserManagedReplicaArgs
                    {
                        Location = "us-central1",
                    },
                },
            },
        },
    });

    var secret_version_deletion_policy = new Gcp.SecretManager.SecretVersion("secret-version-deletion-policy", new()
    {
        Secret = secret_basic.Id,
        SecretData = "secret-data",
        DeletionPolicy = "ABANDON",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecret(ctx, "secret-basic", &secretmanager.SecretArgs{
			SecretId: pulumi.String("secret-version"),
			Replication: &secretmanager.SecretReplicationArgs{
				UserManaged: &secretmanager.SecretReplicationUserManagedArgs{
					Replicas: secretmanager.SecretReplicationUserManagedReplicaArray{
						&secretmanager.SecretReplicationUserManagedReplicaArgs{
							Location: pulumi.String("us-central1"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretVersion(ctx, "secret-version-deletion-policy", &secretmanager.SecretVersionArgs{
			Secret:         secret_basic.ID(),
			SecretData:     pulumi.String("secret-data"),
			DeletionPolicy: pulumi.String("ABANDON"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationUserManagedArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_basic = new Secret("secret-basic", SecretArgs.builder()
            .secretId("secret-version")
            .replication(SecretReplicationArgs.builder()
                .userManaged(SecretReplicationUserManagedArgs.builder()
                    .replicas(SecretReplicationUserManagedReplicaArgs.builder()
                        .location("us-central1")
                        .build())
                    .build())
                .build())
            .build());

        var secret_version_deletion_policy = new SecretVersion("secret-version-deletion-policy", SecretVersionArgs.builder()
            .secret(secret_basic.id())
            .secretData("secret-data")
            .deletionPolicy("ABANDON")
            .build());

    }
}
```
```yaml
resources:
  secret-basic:
    type: gcp:secretmanager:Secret
    properties:
      secretId: secret-version
      replication:
        userManaged:
          replicas:
            - location: us-central1
  secret-version-deletion-policy:
    type: gcp:secretmanager:SecretVersion
    properties:
      secret: ${["secret-basic"].id}
      secretData: secret-data
      deletionPolicy: ABANDON
```
<!--End PulumiCodeChooser -->
### Secret Version Deletion Policy Disable


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secret_basic = new gcp.secretmanager.Secret("secret-basic", {
    secretId: "secret-version",
    replication: {
        userManaged: {
            replicas: [{
                location: "us-central1",
            }],
        },
    },
});
const secret_version_deletion_policy = new gcp.secretmanager.SecretVersion("secret-version-deletion-policy", {
    secret: secret_basic.id,
    secretData: "secret-data",
    deletionPolicy: "DISABLE",
});
```
```python
import pulumi
import pulumi_gcp as gcp

secret_basic = gcp.secretmanager.Secret("secret-basic",
    secret_id="secret-version",
    replication={
        "user_managed": {
            "replicas": [{
                "location": "us-central1",
            }],
        },
    })
secret_version_deletion_policy = gcp.secretmanager.SecretVersion("secret-version-deletion-policy",
    secret=secret_basic.id,
    secret_data="secret-data",
    deletion_policy="DISABLE")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secret_basic = new Gcp.SecretManager.Secret("secret-basic", new()
    {
        SecretId = "secret-version",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            UserManaged = new Gcp.SecretManager.Inputs.SecretReplicationUserManagedArgs
            {
                Replicas = new[]
                {
                    new Gcp.SecretManager.Inputs.SecretReplicationUserManagedReplicaArgs
                    {
                        Location = "us-central1",
                    },
                },
            },
        },
    });

    var secret_version_deletion_policy = new Gcp.SecretManager.SecretVersion("secret-version-deletion-policy", new()
    {
        Secret = secret_basic.Id,
        SecretData = "secret-data",
        DeletionPolicy = "DISABLE",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecret(ctx, "secret-basic", &secretmanager.SecretArgs{
			SecretId: pulumi.String("secret-version"),
			Replication: &secretmanager.SecretReplicationArgs{
				UserManaged: &secretmanager.SecretReplicationUserManagedArgs{
					Replicas: secretmanager.SecretReplicationUserManagedReplicaArray{
						&secretmanager.SecretReplicationUserManagedReplicaArgs{
							Location: pulumi.String("us-central1"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretVersion(ctx, "secret-version-deletion-policy", &secretmanager.SecretVersionArgs{
			Secret:         secret_basic.ID(),
			SecretData:     pulumi.String("secret-data"),
			DeletionPolicy: pulumi.String("DISABLE"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationUserManagedArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_basic = new Secret("secret-basic", SecretArgs.builder()
            .secretId("secret-version")
            .replication(SecretReplicationArgs.builder()
                .userManaged(SecretReplicationUserManagedArgs.builder()
                    .replicas(SecretReplicationUserManagedReplicaArgs.builder()
                        .location("us-central1")
                        .build())
                    .build())
                .build())
            .build());

        var secret_version_deletion_policy = new SecretVersion("secret-version-deletion-policy", SecretVersionArgs.builder()
            .secret(secret_basic.id())
            .secretData("secret-data")
            .deletionPolicy("DISABLE")
            .build());

    }
}
```
```yaml
resources:
  secret-basic:
    type: gcp:secretmanager:Secret
    properties:
      secretId: secret-version
      replication:
        userManaged:
          replicas:
            - location: us-central1
  secret-version-deletion-policy:
    type: gcp:secretmanager:SecretVersion
    properties:
      secret: ${["secret-basic"].id}
      secretData: secret-data
      deletionPolicy: DISABLE
```
<!--End PulumiCodeChooser -->
### Secret Version With Base64 String Secret Data


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as std from "@pulumi/std";

const secret_basic = new gcp.secretmanager.Secret("secret-basic", {
    secretId: "secret-version",
    replication: {
        userManaged: {
            replicas: [{
                location: "us-central1",
            }],
        },
    },
});
const secret_version_base64 = new gcp.secretmanager.SecretVersion("secret-version-base64", {
    secret: secret_basic.id,
    isSecretDataBase64: true,
    secretData: std.filebase64({
        input: "secret-data.pfx",
    }).then(invoke => invoke.result),
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_std as std

secret_basic = gcp.secretmanager.Secret("secret-basic",
    secret_id="secret-version",
    replication={
        "user_managed": {
            "replicas": [{
                "location": "us-central1",
            }],
        },
    })
secret_version_base64 = gcp.secretmanager.SecretVersion("secret-version-base64",
    secret=secret_basic.id,
    is_secret_data_base64=True,
    secret_data=std.filebase64(input="secret-data.pfx").result)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var secret_basic = new Gcp.SecretManager.Secret("secret-basic", new()
    {
        SecretId = "secret-version",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            UserManaged = new Gcp.SecretManager.Inputs.SecretReplicationUserManagedArgs
            {
                Replicas = new[]
                {
                    new Gcp.SecretManager.Inputs.SecretReplicationUserManagedReplicaArgs
                    {
                        Location = "us-central1",
                    },
                },
            },
        },
    });

    var secret_version_base64 = new Gcp.SecretManager.SecretVersion("secret-version-base64", new()
    {
        Secret = secret_basic.Id,
        IsSecretDataBase64 = true,
        SecretData = Std.Filebase64.Invoke(new()
        {
            Input = "secret-data.pfx",
        }).Apply(invoke => invoke.Result),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.NewSecret(ctx, "secret-basic", &secretmanager.SecretArgs{
			SecretId: pulumi.String("secret-version"),
			Replication: &secretmanager.SecretReplicationArgs{
				UserManaged: &secretmanager.SecretReplicationUserManagedArgs{
					Replicas: secretmanager.SecretReplicationUserManagedReplicaArray{
						&secretmanager.SecretReplicationUserManagedReplicaArgs{
							Location: pulumi.String("us-central1"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		invokeFilebase64, err := std.Filebase64(ctx, &std.Filebase64Args{
			Input: "secret-data.pfx",
		}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretVersion(ctx, "secret-version-base64", &secretmanager.SecretVersionArgs{
			Secret:             secret_basic.ID(),
			IsSecretDataBase64: pulumi.Bool(true),
			SecretData:         pulumi.String(invokeFilebase64.Result),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationUserManagedArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var secret_basic = new Secret("secret-basic", SecretArgs.builder()
            .secretId("secret-version")
            .replication(SecretReplicationArgs.builder()
                .userManaged(SecretReplicationUserManagedArgs.builder()
                    .replicas(SecretReplicationUserManagedReplicaArgs.builder()
                        .location("us-central1")
                        .build())
                    .build())
                .build())
            .build());

        var secret_version_base64 = new SecretVersion("secret-version-base64", SecretVersionArgs.builder()
            .secret(secret_basic.id())
            .isSecretDataBase64(true)
            .secretData(StdFunctions.filebase64(Filebase64Args.builder()
                .input("secret-data.pfx")
                .build()).result())
            .build());

    }
}
```
```yaml
resources:
  secret-basic:
    type: gcp:secretmanager:Secret
    properties:
      secretId: secret-version
      replication:
        userManaged:
          replicas:
            - location: us-central1
  secret-version-base64:
    type: gcp:secretmanager:SecretVersion
    properties:
      secret: ${["secret-basic"].id}
      isSecretDataBase64: true
      secretData:
        fn::invoke:
          function: std:filebase64
          arguments:
            input: secret-data.pfx
          return: result
```
<!--End PulumiCodeChooser -->

## Import

SecretVersion can be imported using any of these accepted formats:

* `projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}`

When using the `pulumi import` command, SecretVersion can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:secretmanager/secretVersion:SecretVersion default projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}
```

А
deletionPolicyB" ѕThe deletion policy for the secret version. Setting `ABANDON` allows the resource
to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
disabled rather than deleted. Default is `DELETE`. Possible values are:
* DELETE
* DISABLE
* ABANDON
9
enabledB
 (The current state of the SecretVersion.

isSecretDataBase64B
 cIf set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
5
secret" 'Secret Manager secret resource


- - -
Ї

secretData" {The secret data. Must be no larger than 64KiB.
**Note**: This property is sensitive and will not be displayed in the plan.
"<

createTime" *The time at which the Secret was created.
"А
deletionPolicyB" ѕThe deletion policy for the secret version. Setting `ABANDON` allows the resource
to be abandoned rather than deleted. Setting `DISABLE` allows the resource to be
disabled rather than deleted. Default is `DELETE`. Possible values are:
* DELETE
* DISABLE
* ABANDON
"c
destroyTime" PThe time at which the Secret was destroyed. Only present if state is DESTROYED.
"9
enabledB
 (The current state of the SecretVersion.
"
isSecretDataBase64B
 cIf set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.
"~
name" rThe resource name of the SecretVersion. Format:
`projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}`
"5
secret" 'Secret Manager secret resource


- - -
"Ї

secretData" {The secret data. Must be no larger than 64KiB.
**Note**: This property is sensitive and will not be displayed in the plan.
"*
version" The version of the Secret.
*ѓz
P
securesourcemanager
BranchRule-gcp:securesourcemanager/branchRule:BranchRule┐fBranchRule is the protection rule to enforce pre-defined rules on designated branches within a repository.


To get more information about BranchRule, see:
* How-to Guides
    * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)

## Example Usage

### Secure Source Manager Branch Rule Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.securesourcemanager.Instance("instance", {
    location: "us-central1",
    instanceId: "my-basic-instance",
});
const repository = new gcp.securesourcemanager.Repository("repository", {
    repositoryId: "my-basic-repository",
    location: instance.location,
    instance: instance.name,
});
const basic = new gcp.securesourcemanager.BranchRule("basic", {
    branchRuleId: "my-basic-branchrule",
    repositoryId: repository.repositoryId,
    location: repository.location,
    includePattern: "main",
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.securesourcemanager.Instance("instance",
    location="us-central1",
    instance_id="my-basic-instance")
repository = gcp.securesourcemanager.Repository("repository",
    repository_id="my-basic-repository",
    location=instance.location,
    instance=instance.name)
basic = gcp.securesourcemanager.BranchRule("basic",
    branch_rule_id="my-basic-branchrule",
    repository_id=repository.repository_id,
    location=repository.location,
    include_pattern="main")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.SecureSourceManager.Instance("instance", new()
    {
        Location = "us-central1",
        InstanceId = "my-basic-instance",
    });

    var repository = new Gcp.SecureSourceManager.Repository("repository", new()
    {
        RepositoryId = "my-basic-repository",
        Location = instance.Location,
        Instance = instance.Name,
    });

    var basic = new Gcp.SecureSourceManager.BranchRule("basic", new()
    {
        BranchRuleId = "my-basic-branchrule",
        RepositoryId = repository.RepositoryId,
        Location = repository.Location,
        IncludePattern = "main",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		instance, err := securesourcemanager.NewInstance(ctx, "instance", &securesourcemanager.InstanceArgs{
			Location:   pulumi.String("us-central1"),
			InstanceId: pulumi.String("my-basic-instance"),
		})
		if err != nil {
			return err
		}
		repository, err := securesourcemanager.NewRepository(ctx, "repository", &securesourcemanager.RepositoryArgs{
			RepositoryId: pulumi.String("my-basic-repository"),
			Location:     instance.Location,
			Instance:     instance.Name,
		})
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewBranchRule(ctx, "basic", &securesourcemanager.BranchRuleArgs{
			BranchRuleId:   pulumi.String("my-basic-branchrule"),
			RepositoryId:   repository.RepositoryId,
			Location:       repository.Location,
			IncludePattern: pulumi.String("main"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.Instance;
import com.pulumi.gcp.securesourcemanager.InstanceArgs;
import com.pulumi.gcp.securesourcemanager.Repository;
import com.pulumi.gcp.securesourcemanager.RepositoryArgs;
import com.pulumi.gcp.securesourcemanager.BranchRule;
import com.pulumi.gcp.securesourcemanager.BranchRuleArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new Instance("instance", InstanceArgs.builder()
            .location("us-central1")
            .instanceId("my-basic-instance")
            .build());

        var repository = new Repository("repository", RepositoryArgs.builder()
            .repositoryId("my-basic-repository")
            .location(instance.location())
            .instance(instance.name())
            .build());

        var basic = new BranchRule("basic", BranchRuleArgs.builder()
            .branchRuleId("my-basic-branchrule")
            .repositoryId(repository.repositoryId())
            .location(repository.location())
            .includePattern("main")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:securesourcemanager:Instance
    properties:
      location: us-central1
      instanceId: my-basic-instance
  repository:
    type: gcp:securesourcemanager:Repository
    properties:
      repositoryId: my-basic-repository
      location: ${instance.location}
      instance: ${instance.name}
  basic:
    type: gcp:securesourcemanager:BranchRule
    properties:
      branchRuleId: my-basic-branchrule
      repositoryId: ${repository.repositoryId}
      location: ${repository.location}
      includePattern: main
```
<!--End PulumiCodeChooser -->
### Secure Source Manager Branch Rule With Fields


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.securesourcemanager.Instance("instance", {
    location: "us-central1",
    instanceId: "my-initial-instance",
});
const repository = new gcp.securesourcemanager.Repository("repository", {
    repositoryId: "my-initial-repository",
    instance: instance.name,
    location: instance.location,
});
const _default = new gcp.securesourcemanager.BranchRule("default", {
    branchRuleId: "my-initial-branchrule",
    location: repository.location,
    repositoryId: repository.repositoryId,
    includePattern: "test",
    minimumApprovalsCount: 2,
    minimumReviewsCount: 2,
    requireCommentsResolved: true,
    requireLinearHistory: true,
    requirePullRequest: true,
    disabled: false,
    allowStaleReviews: false,
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.securesourcemanager.Instance("instance",
    location="us-central1",
    instance_id="my-initial-instance")
repository = gcp.securesourcemanager.Repository("repository",
    repository_id="my-initial-repository",
    instance=instance.name,
    location=instance.location)
default = gcp.securesourcemanager.BranchRule("default",
    branch_rule_id="my-initial-branchrule",
    location=repository.location,
    repository_id=repository.repository_id,
    include_pattern="test",
    minimum_approvals_count=2,
    minimum_reviews_count=2,
    require_comments_resolved=True,
    require_linear_history=True,
    require_pull_request=True,
    disabled=False,
    allow_stale_reviews=False)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.SecureSourceManager.Instance("instance", new()
    {
        Location = "us-central1",
        InstanceId = "my-initial-instance",
    });

    var repository = new Gcp.SecureSourceManager.Repository("repository", new()
    {
        RepositoryId = "my-initial-repository",
        Instance = instance.Name,
        Location = instance.Location,
    });

    var @default = new Gcp.SecureSourceManager.BranchRule("default", new()
    {
        BranchRuleId = "my-initial-branchrule",
        Location = repository.Location,
        RepositoryId = repository.RepositoryId,
        IncludePattern = "test",
        MinimumApprovalsCount = 2,
        MinimumReviewsCount = 2,
        RequireCommentsResolved = true,
        RequireLinearHistory = true,
        RequirePullRequest = true,
        Disabled = false,
        AllowStaleReviews = false,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		instance, err := securesourcemanager.NewInstance(ctx, "instance", &securesourcemanager.InstanceArgs{
			Location:   pulumi.String("us-central1"),
			InstanceId: pulumi.String("my-initial-instance"),
		})
		if err != nil {
			return err
		}
		repository, err := securesourcemanager.NewRepository(ctx, "repository", &securesourcemanager.RepositoryArgs{
			RepositoryId: pulumi.String("my-initial-repository"),
			Instance:     instance.Name,
			Location:     instance.Location,
		})
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewBranchRule(ctx, "default", &securesourcemanager.BranchRuleArgs{
			BranchRuleId:            pulumi.String("my-initial-branchrule"),
			Location:                repository.Location,
			RepositoryId:            repository.RepositoryId,
			IncludePattern:          pulumi.String("test"),
			MinimumApprovalsCount:   pulumi.Int(2),
			MinimumReviewsCount:     pulumi.Int(2),
			RequireCommentsResolved: pulumi.Bool(true),
			RequireLinearHistory:    pulumi.Bool(true),
			RequirePullRequest:      pulumi.Bool(true),
			Disabled:                pulumi.Bool(false),
			AllowStaleReviews:       pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.Instance;
import com.pulumi.gcp.securesourcemanager.InstanceArgs;
import com.pulumi.gcp.securesourcemanager.Repository;
import com.pulumi.gcp.securesourcemanager.RepositoryArgs;
import com.pulumi.gcp.securesourcemanager.BranchRule;
import com.pulumi.gcp.securesourcemanager.BranchRuleArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new Instance("instance", InstanceArgs.builder()
            .location("us-central1")
            .instanceId("my-initial-instance")
            .build());

        var repository = new Repository("repository", RepositoryArgs.builder()
            .repositoryId("my-initial-repository")
            .instance(instance.name())
            .location(instance.location())
            .build());

        var default_ = new BranchRule("default", BranchRuleArgs.builder()
            .branchRuleId("my-initial-branchrule")
            .location(repository.location())
            .repositoryId(repository.repositoryId())
            .includePattern("test")
            .minimumApprovalsCount(2)
            .minimumReviewsCount(2)
            .requireCommentsResolved(true)
            .requireLinearHistory(true)
            .requirePullRequest(true)
            .disabled(false)
            .allowStaleReviews(false)
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:securesourcemanager:Instance
    properties:
      location: us-central1
      instanceId: my-initial-instance
  repository:
    type: gcp:securesourcemanager:Repository
    properties:
      repositoryId: my-initial-repository
      instance: ${instance.name}
      location: ${instance.location}
  default:
    type: gcp:securesourcemanager:BranchRule
    properties:
      branchRuleId: my-initial-branchrule
      location: ${repository.location}
      repositoryId: ${repository.repositoryId}
      includePattern: test
      minimumApprovalsCount: 2
      minimumReviewsCount: 2
      requireCommentsResolved: true
      requireLinearHistory: true
      requirePullRequest: true
      disabled: false
      allowStaleReviews: false
```
<!--End PulumiCodeChooser -->

## Import

BranchRule can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/branchRules/{{branch_rule_id}}`

* `{{project}}/{{location}}/{{repository_id}}/{{branch_rule_id}}`

* `{{location}}/{{repository_id}}/{{branch_rule_id}}`

* `{{branch_rule_id}}`

When using the `pulumi import` command, BranchRule can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securesourcemanager/branchRule:BranchRule default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/branchRules/{{branch_rule_id}}
```

```sh
$ pulumi import gcp:securesourcemanager/branchRule:BranchRule default {{project}}/{{location}}/{{repository_id}}/{{branch_rule_id}}
```

```sh
$ pulumi import gcp:securesourcemanager/branchRule:BranchRule default {{location}}/{{repository_id}}/{{branch_rule_id}}
```

```sh
$ pulumi import gcp:securesourcemanager/branchRule:BranchRule default {{branch_rule_id}}
```

h
allowStaleReviewsB
 MDetermines if allow stale reviews or approvals before merging to the branch.
/
branchRuleId" The ID for the BranchRule.
D
disabledB
 2Determines if the branch rule is disabled or not.

includePattern" iThe BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
1
location" !The location for the Repository.
k
minimumApprovalsCountB LThe minimum number of approvals required for the branch rule to be matched.
g
minimumReviewsCountB JThe minimum number of reviews required for the branch rule to be matched.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
7
repositoryId" #The ID for the Repository.


- - -
g
requireCommentsResolvedB
 FDetermines if require comments resolved before merging to the branch.
a
requireLinearHistoryB
 CDetermines if require linear history before merging to the branch.
Z
requirePullRequestB
 >Determines if the branch rule requires a pull request or not.
"h
allowStaleReviewsB
 MDetermines if allow stale reviews or approvals before merging to the branch.
"/
branchRuleId" The ID for the BranchRule.
":

createTime" (Time the BranchRule was created in UTC.
"D
disabledB
 2Determines if the branch rule is disabled or not.
"
includePattern" iThe BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
"1
location" !The location for the Repository.
"k
minimumApprovalsCountB LThe minimum number of approvals required for the branch rule to be matched.
"g
minimumReviewsCountB JThe minimum number of reviews required for the branch rule to be matched.
"2
name" &The resource name for the BranchRule.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"7
repositoryId" #The ID for the Repository.


- - -
"g
requireCommentsResolvedB
 FDetermines if require comments resolved before merging to the branch.
"a
requireLinearHistoryB
 CDetermines if require linear history before merging to the branch.
"Z
requirePullRequestB
 >Determines if the branch rule requires a pull request or not.
"0
uid" %Unique identifier of the BranchRule.
":

updateTime" (Time the BranchRule was updated in UTC.
*кЬ
J
securesourcemanagerInstance)gcp:securesourcemanager/instance:InstanceЄНInstances are deployed to an available Google Cloud region and are accessible via their web interface.


To get more information about Instance, see:

* [API documentation](https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.instances)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/create-instance)

## Example Usage

### Secure Source Manager Instance Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.securesourcemanager.Instance("default", {
    location: "us-central1",
    instanceId: "my-instance",
    labels: {
        foo: "bar",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.securesourcemanager.Instance("default",
    location="us-central1",
    instance_id="my-instance",
    labels={
        "foo": "bar",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.SecureSourceManager.Instance("default", new()
    {
        Location = "us-central1",
        InstanceId = "my-instance",
        Labels = 
        {
            { "foo", "bar" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewInstance(ctx, "default", &securesourcemanager.InstanceArgs{
			Location:   pulumi.String("us-central1"),
			InstanceId: pulumi.String("my-instance"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.Instance;
import com.pulumi.gcp.securesourcemanager.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Instance("default", InstanceArgs.builder()
            .location("us-central1")
            .instanceId("my-instance")
            .labels(Map.of("foo", "bar"))
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:securesourcemanager:Instance
    properties:
      location: us-central1
      instanceId: my-instance
      labels:
        foo: bar
```
<!--End PulumiCodeChooser -->
### Secure Source Manager Instance Cmek


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const keyRing = new gcp.kms.KeyRing("key_ring", {
    name: "my-keyring",
    location: "us-central1",
});
const cryptoKey = new gcp.kms.CryptoKey("crypto_key", {
    name: "my-key",
    keyRing: keyRing.id,
});
const project = gcp.organizations.getProject({});
const cryptoKeyBinding = new gcp.kms.CryptoKeyIAMMember("crypto_key_binding", {
    cryptoKeyId: cryptoKey.id,
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com`),
});
const _default = new gcp.securesourcemanager.Instance("default", {
    location: "us-central1",
    instanceId: "my-instance",
    kmsKey: cryptoKey.id,
}, {
    dependsOn: [cryptoKeyBinding],
});
```
```python
import pulumi
import pulumi_gcp as gcp

key_ring = gcp.kms.KeyRing("key_ring",
    name="my-keyring",
    location="us-central1")
crypto_key = gcp.kms.CryptoKey("crypto_key",
    name="my-key",
    key_ring=key_ring.id)
project = gcp.organizations.get_project()
crypto_key_binding = gcp.kms.CryptoKeyIAMMember("crypto_key_binding",
    crypto_key_id=crypto_key.id,
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=f"serviceAccount:service-{project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com")
default = gcp.securesourcemanager.Instance("default",
    location="us-central1",
    instance_id="my-instance",
    kms_key=crypto_key.id,
    opts = pulumi.ResourceOptions(depends_on=[crypto_key_binding]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var keyRing = new Gcp.Kms.KeyRing("key_ring", new()
    {
        Name = "my-keyring",
        Location = "us-central1",
    });

    var cryptoKey = new Gcp.Kms.CryptoKey("crypto_key", new()
    {
        Name = "my-key",
        KeyRing = keyRing.Id,
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    var cryptoKeyBinding = new Gcp.Kms.CryptoKeyIAMMember("crypto_key_binding", new()
    {
        CryptoKeyId = cryptoKey.Id,
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-sourcemanager.iam.gserviceaccount.com",
    });

    var @default = new Gcp.SecureSourceManager.Instance("default", new()
    {
        Location = "us-central1",
        InstanceId = "my-instance",
        KmsKey = cryptoKey.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            cryptoKeyBinding,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		keyRing, err := kms.NewKeyRing(ctx, "key_ring", &kms.KeyRingArgs{
			Name:     pulumi.String("my-keyring"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		cryptoKey, err := kms.NewCryptoKey(ctx, "crypto_key", &kms.CryptoKeyArgs{
			Name:    pulumi.String("my-key"),
			KeyRing: keyRing.ID(),
		})
		if err != nil {
			return err
		}
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		cryptoKeyBinding, err := kms.NewCryptoKeyIAMMember(ctx, "crypto_key_binding", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: cryptoKey.ID(),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-sourcemanager.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewInstance(ctx, "default", &securesourcemanager.InstanceArgs{
			Location:   pulumi.String("us-central1"),
			InstanceId: pulumi.String("my-instance"),
			KmsKey:     cryptoKey.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			cryptoKeyBinding,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.kms.KeyRing;
import com.pulumi.gcp.kms.KeyRingArgs;
import com.pulumi.gcp.kms.CryptoKey;
import com.pulumi.gcp.kms.CryptoKeyArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.securesourcemanager.Instance;
import com.pulumi.gcp.securesourcemanager.InstanceArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var keyRing = new KeyRing("keyRing", KeyRingArgs.builder()
            .name("my-keyring")
            .location("us-central1")
            .build());

        var cryptoKey = new CryptoKey("cryptoKey", CryptoKeyArgs.builder()
            .name("my-key")
            .keyRing(keyRing.id())
            .build());

        final var project = OrganizationsFunctions.getProject();

        var cryptoKeyBinding = new CryptoKeyIAMMember("cryptoKeyBinding", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(cryptoKey.id())
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(String.format("serviceAccount:service-%s@gcp-sa-sourcemanager.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var default_ = new Instance("default", InstanceArgs.builder()
            .location("us-central1")
            .instanceId("my-instance")
            .kmsKey(cryptoKey.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(cryptoKeyBinding)
                .build());

    }
}
```
```yaml
resources:
  keyRing:
    type: gcp:kms:KeyRing
    name: key_ring
    properties:
      name: my-keyring
      location: us-central1
  cryptoKey:
    type: gcp:kms:CryptoKey
    name: crypto_key
    properties:
      name: my-key
      keyRing: ${keyRing.id}
  cryptoKeyBinding:
    type: gcp:kms:CryptoKeyIAMMember
    name: crypto_key_binding
    properties:
      cryptoKeyId: ${cryptoKey.id}
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: serviceAccount:service-${project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com
  default:
    type: gcp:securesourcemanager:Instance
    properties:
      location: us-central1
      instanceId: my-instance
      kmsKey: ${cryptoKey.id}
    options:
      dependsOn:
        - ${cryptoKeyBinding}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Secure Source Manager Instance Private


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as time from "@pulumi/time";

const caPool = new gcp.certificateauthority.CaPool("ca_pool", {
    name: "ca-pool",
    location: "us-central1",
    tier: "ENTERPRISE",
    publishingOptions: {
        publishCaCert: true,
        publishCrl: true,
    },
});
const rootCa = new gcp.certificateauthority.Authority("root_ca", {
    pool: caPool.name,
    certificateAuthorityId: "root-ca",
    location: "us-central1",
    config: {
        subjectConfig: {
            subject: {
                organization: "google",
                commonName: "my-certificate-authority",
            },
        },
        x509Config: {
            caOptions: {
                isCa: true,
            },
            keyUsage: {
                baseKeyUsage: {
                    certSign: true,
                    crlSign: true,
                },
                extendedKeyUsage: {
                    serverAuth: true,
                },
            },
        },
    },
    keySpec: {
        algorithm: "RSA_PKCS1_4096_SHA256",
    },
    deletionProtection: false,
    ignoreActiveCertificatesOnDeletion: true,
    skipGracePeriod: true,
});
const project = gcp.organizations.getProject({});
const caPoolBinding = new gcp.certificateauthority.CaPoolIamBinding("ca_pool_binding", {
    caPool: caPool.id,
    role: "roles/privateca.certificateRequester",
    members: [project.then(project => `serviceAccount:service-${project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com`)],
});
// ca pool IAM permissions can take time to propagate
const wait120Seconds = new time.index.Sleep("wait_120_seconds", {createDuration: "120s"}, {
    dependsOn: [caPoolBinding],
});
const _default = new gcp.securesourcemanager.Instance("default", {
    instanceId: "my-instance",
    location: "us-central1",
    privateConfig: {
        isPrivate: true,
        caPool: caPool.id,
    },
}, {
    dependsOn: [
        rootCa,
        wait120Seconds,
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_time as time

ca_pool = gcp.certificateauthority.CaPool("ca_pool",
    name="ca-pool",
    location="us-central1",
    tier="ENTERPRISE",
    publishing_options={
        "publish_ca_cert": True,
        "publish_crl": True,
    })
root_ca = gcp.certificateauthority.Authority("root_ca",
    pool=ca_pool.name,
    certificate_authority_id="root-ca",
    location="us-central1",
    config={
        "subject_config": {
            "subject": {
                "organization": "google",
                "common_name": "my-certificate-authority",
            },
        },
        "x509_config": {
            "ca_options": {
                "is_ca": True,
            },
            "key_usage": {
                "base_key_usage": {
                    "cert_sign": True,
                    "crl_sign": True,
                },
                "extended_key_usage": {
                    "server_auth": True,
                },
            },
        },
    },
    key_spec={
        "algorithm": "RSA_PKCS1_4096_SHA256",
    },
    deletion_protection=False,
    ignore_active_certificates_on_deletion=True,
    skip_grace_period=True)
project = gcp.organizations.get_project()
ca_pool_binding = gcp.certificateauthority.CaPoolIamBinding("ca_pool_binding",
    ca_pool=ca_pool.id,
    role="roles/privateca.certificateRequester",
    members=[f"serviceAccount:service-{project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com"])
# ca pool IAM permissions can take time to propagate
wait120_seconds = time.index.Sleep("wait_120_seconds", create_duration=120s,
opts = pulumi.ResourceOptions(depends_on=[ca_pool_binding]))
default = gcp.securesourcemanager.Instance("default",
    instance_id="my-instance",
    location="us-central1",
    private_config={
        "is_private": True,
        "ca_pool": ca_pool.id,
    },
    opts = pulumi.ResourceOptions(depends_on=[
            root_ca,
            wait120_seconds,
        ]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Time = Pulumi.Time;

return await Deployment.RunAsync(() => 
{
    var caPool = new Gcp.CertificateAuthority.CaPool("ca_pool", new()
    {
        Name = "ca-pool",
        Location = "us-central1",
        Tier = "ENTERPRISE",
        PublishingOptions = new Gcp.CertificateAuthority.Inputs.CaPoolPublishingOptionsArgs
        {
            PublishCaCert = true,
            PublishCrl = true,
        },
    });

    var rootCa = new Gcp.CertificateAuthority.Authority("root_ca", new()
    {
        Pool = caPool.Name,
        CertificateAuthorityId = "root-ca",
        Location = "us-central1",
        Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
        {
            SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
            {
                Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
                {
                    Organization = "google",
                    CommonName = "my-certificate-authority",
                },
            },
            X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
            {
                CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
                {
                    IsCa = true,
                },
                KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
                {
                    BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
                    {
                        CertSign = true,
                        CrlSign = true,
                    },
                    ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
                    {
                        ServerAuth = true,
                    },
                },
            },
        },
        KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
        {
            Algorithm = "RSA_PKCS1_4096_SHA256",
        },
        DeletionProtection = false,
        IgnoreActiveCertificatesOnDeletion = true,
        SkipGracePeriod = true,
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    var caPoolBinding = new Gcp.CertificateAuthority.CaPoolIamBinding("ca_pool_binding", new()
    {
        CaPool = caPool.Id,
        Role = "roles/privateca.certificateRequester",
        Members = new[]
        {
            $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-sourcemanager.iam.gserviceaccount.com",
        },
    });

    // ca pool IAM permissions can take time to propagate
    var wait120Seconds = new Time.Index.Sleep("wait_120_seconds", new()
    {
        CreateDuration = "120s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            caPoolBinding,
        },
    });

    var @default = new Gcp.SecureSourceManager.Instance("default", new()
    {
        InstanceId = "my-instance",
        Location = "us-central1",
        PrivateConfig = new Gcp.SecureSourceManager.Inputs.InstancePrivateConfigArgs
        {
            IsPrivate = true,
            CaPool = caPool.Id,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            rootCa,
            wait120Seconds,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/certificateauthority"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi-time/sdk/go/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		caPool, err := certificateauthority.NewCaPool(ctx, "ca_pool", &certificateauthority.CaPoolArgs{
			Name:     pulumi.String("ca-pool"),
			Location: pulumi.String("us-central1"),
			Tier:     pulumi.String("ENTERPRISE"),
			PublishingOptions: &certificateauthority.CaPoolPublishingOptionsArgs{
				PublishCaCert: pulumi.Bool(true),
				PublishCrl:    pulumi.Bool(true),
			},
		})
		if err != nil {
			return err
		}
		rootCa, err := certificateauthority.NewAuthority(ctx, "root_ca", &certificateauthority.AuthorityArgs{
			Pool:                   caPool.Name,
			CertificateAuthorityId: pulumi.String("root-ca"),
			Location:               pulumi.String("us-central1"),
			Config: &certificateauthority.AuthorityConfigArgs{
				SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
					Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
						Organization: pulumi.String("google"),
						CommonName:   pulumi.String("my-certificate-authority"),
					},
				},
				X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
					CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
						IsCa: pulumi.Bool(true),
					},
					KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
						BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
							CertSign: pulumi.Bool(true),
							CrlSign:  pulumi.Bool(true),
						},
						ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
							ServerAuth: pulumi.Bool(true),
						},
					},
				},
			},
			KeySpec: &certificateauthority.AuthorityKeySpecArgs{
				Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
			},
			DeletionProtection:                 pulumi.Bool(false),
			IgnoreActiveCertificatesOnDeletion: pulumi.Bool(true),
			SkipGracePeriod:                    pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		caPoolBinding, err := certificateauthority.NewCaPoolIamBinding(ctx, "ca_pool_binding", &certificateauthority.CaPoolIamBindingArgs{
			CaPool: caPool.ID(),
			Role:   pulumi.String("roles/privateca.certificateRequester"),
			Members: pulumi.StringArray{
				pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-sourcemanager.iam.gserviceaccount.com", project.Number),
			},
		})
		if err != nil {
			return err
		}
		// ca pool IAM permissions can take time to propagate
		wait120Seconds, err := time.NewSleep(ctx, "wait_120_seconds", &time.SleepArgs{
			CreateDuration: "120s",
		}, pulumi.DependsOn([]pulumi.Resource{
			caPoolBinding,
		}))
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewInstance(ctx, "default", &securesourcemanager.InstanceArgs{
			InstanceId: pulumi.String("my-instance"),
			Location:   pulumi.String("us-central1"),
			PrivateConfig: &securesourcemanager.InstancePrivateConfigArgs{
				IsPrivate: pulumi.Bool(true),
				CaPool:    caPool.ID(),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			rootCa,
			wait120Seconds,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.certificateauthority.CaPool;
import com.pulumi.gcp.certificateauthority.CaPoolArgs;
import com.pulumi.gcp.certificateauthority.inputs.CaPoolPublishingOptionsArgs;
import com.pulumi.gcp.certificateauthority.Authority;
import com.pulumi.gcp.certificateauthority.AuthorityArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigSubjectArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigCaOptionsArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityKeySpecArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.certificateauthority.CaPoolIamBinding;
import com.pulumi.gcp.certificateauthority.CaPoolIamBindingArgs;
import com.pulumi.time.sleep;
import com.pulumi.time.SleepArgs;
import com.pulumi.gcp.securesourcemanager.Instance;
import com.pulumi.gcp.securesourcemanager.InstanceArgs;
import com.pulumi.gcp.securesourcemanager.inputs.InstancePrivateConfigArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var caPool = new CaPool("caPool", CaPoolArgs.builder()
            .name("ca-pool")
            .location("us-central1")
            .tier("ENTERPRISE")
            .publishingOptions(CaPoolPublishingOptionsArgs.builder()
                .publishCaCert(true)
                .publishCrl(true)
                .build())
            .build());

        var rootCa = new Authority("rootCa", AuthorityArgs.builder()
            .pool(caPool.name())
            .certificateAuthorityId("root-ca")
            .location("us-central1")
            .config(AuthorityConfigArgs.builder()
                .subjectConfig(AuthorityConfigSubjectConfigArgs.builder()
                    .subject(AuthorityConfigSubjectConfigSubjectArgs.builder()
                        .organization("google")
                        .commonName("my-certificate-authority")
                        .build())
                    .build())
                .x509Config(AuthorityConfigX509ConfigArgs.builder()
                    .caOptions(AuthorityConfigX509ConfigCaOptionsArgs.builder()
                        .isCa(true)
                        .build())
                    .keyUsage(AuthorityConfigX509ConfigKeyUsageArgs.builder()
                        .baseKeyUsage(AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs.builder()
                            .certSign(true)
                            .crlSign(true)
                            .build())
                        .extendedKeyUsage(AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs.builder()
                            .serverAuth(true)
                            .build())
                        .build())
                    .build())
                .build())
            .keySpec(AuthorityKeySpecArgs.builder()
                .algorithm("RSA_PKCS1_4096_SHA256")
                .build())
            .deletionProtection(false)
            .ignoreActiveCertificatesOnDeletion(true)
            .skipGracePeriod(true)
            .build());

        final var project = OrganizationsFunctions.getProject();

        var caPoolBinding = new CaPoolIamBinding("caPoolBinding", CaPoolIamBindingArgs.builder()
            .caPool(caPool.id())
            .role("roles/privateca.certificateRequester")
            .members(String.format("serviceAccount:service-%s@gcp-sa-sourcemanager.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        // ca pool IAM permissions can take time to propagate
        var wait120Seconds = new Sleep("wait120Seconds", SleepArgs.builder()
            .createDuration("120s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(caPoolBinding)
                .build());

        var default_ = new Instance("default", InstanceArgs.builder()
            .instanceId("my-instance")
            .location("us-central1")
            .privateConfig(InstancePrivateConfigArgs.builder()
                .isPrivate(true)
                .caPool(caPool.id())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    rootCa,
                    wait120Seconds)
                .build());

    }
}
```
```yaml
resources:
  caPool:
    type: gcp:certificateauthority:CaPool
    name: ca_pool
    properties:
      name: ca-pool
      location: us-central1
      tier: ENTERPRISE
      publishingOptions:
        publishCaCert: true
        publishCrl: true
  rootCa:
    type: gcp:certificateauthority:Authority
    name: root_ca
    properties:
      pool: ${caPool.name}
      certificateAuthorityId: root-ca
      location: us-central1
      config:
        subjectConfig:
          subject:
            organization: google
            commonName: my-certificate-authority
        x509Config:
          caOptions:
            isCa: true
          keyUsage:
            baseKeyUsage:
              certSign: true
              crlSign: true
            extendedKeyUsage:
              serverAuth: true
      keySpec:
        algorithm: RSA_PKCS1_4096_SHA256
      deletionProtection: false
      ignoreActiveCertificatesOnDeletion: true
      skipGracePeriod: true
  caPoolBinding:
    type: gcp:certificateauthority:CaPoolIamBinding
    name: ca_pool_binding
    properties:
      caPool: ${caPool.id}
      role: roles/privateca.certificateRequester
      members:
        - serviceAccount:service-${project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com
  default:
    type: gcp:securesourcemanager:Instance
    properties:
      instanceId: my-instance
      location: us-central1
      privateConfig:
        isPrivate: true
        caPool: ${caPool.id}
    options:
      dependsOn:
        - ${rootCa}
        - ${wait120Seconds}
  # ca pool IAM permissions can take time to propagate
  wait120Seconds:
    type: time:sleep
    name: wait_120_seconds
    properties:
      createDuration: 120s
    options:
      dependsOn:
        - ${caPoolBinding}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Secure Source Manager Instance Private Psc Backend


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as time from "@pulumi/time";

const project = gcp.organizations.getProject({});
const caPool = new gcp.certificateauthority.CaPool("ca_pool", {
    name: "ca-pool",
    location: "us-central1",
    tier: "ENTERPRISE",
    publishingOptions: {
        publishCaCert: true,
        publishCrl: true,
    },
});
const rootCa = new gcp.certificateauthority.Authority("root_ca", {
    pool: caPool.name,
    certificateAuthorityId: "root-ca",
    location: "us-central1",
    config: {
        subjectConfig: {
            subject: {
                organization: "google",
                commonName: "my-certificate-authority",
            },
        },
        x509Config: {
            caOptions: {
                isCa: true,
            },
            keyUsage: {
                baseKeyUsage: {
                    certSign: true,
                    crlSign: true,
                },
                extendedKeyUsage: {
                    serverAuth: true,
                },
            },
        },
    },
    keySpec: {
        algorithm: "RSA_PKCS1_4096_SHA256",
    },
    deletionProtection: false,
    ignoreActiveCertificatesOnDeletion: true,
    skipGracePeriod: true,
});
const caPoolBinding = new gcp.certificateauthority.CaPoolIamBinding("ca_pool_binding", {
    caPool: caPool.id,
    role: "roles/privateca.certificateRequester",
    members: [project.then(project => `serviceAccount:service-${project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com`)],
});
// ca pool IAM permissions can take time to propagate
const wait120Seconds = new time.index.Sleep("wait_120_seconds", {createDuration: "120s"}, {
    dependsOn: [caPoolBinding],
});
// See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
const _default = new gcp.securesourcemanager.Instance("default", {
    instanceId: "my-instance",
    location: "us-central1",
    privateConfig: {
        isPrivate: true,
        caPool: caPool.id,
    },
}, {
    dependsOn: [
        rootCa,
        wait120Seconds,
    ],
});
// Connect SSM private instance with L4 proxy ILB.
const network = new gcp.compute.Network("network", {
    name: "my-network",
    autoCreateSubnetworks: false,
});
const subnet = new gcp.compute.Subnetwork("subnet", {
    name: "my-subnet",
    region: "us-central1",
    network: network.id,
    ipCidrRange: "10.0.1.0/24",
    privateIpGoogleAccess: true,
});
const pscNeg = new gcp.compute.RegionNetworkEndpointGroup("psc_neg", {
    name: "my-neg",
    region: "us-central1",
    networkEndpointType: "PRIVATE_SERVICE_CONNECT",
    pscTargetService: _default.privateConfig.apply(privateConfig => privateConfig?.httpServiceAttachment),
    network: network.id,
    subnetwork: subnet.id,
});
const backendService = new gcp.compute.RegionBackendService("backend_service", {
    name: "my-backend-service",
    region: "us-central1",
    protocol: "TCP",
    loadBalancingScheme: "INTERNAL_MANAGED",
    backends: [{
        group: pscNeg.id,
        balancingMode: "UTILIZATION",
        capacityScaler: 1,
    }],
});
const proxySubnet = new gcp.compute.Subnetwork("proxy_subnet", {
    name: "my-proxy-subnet",
    region: "us-central1",
    network: network.id,
    ipCidrRange: "10.0.2.0/24",
    purpose: "REGIONAL_MANAGED_PROXY",
    role: "ACTIVE",
});
const targetProxy = new gcp.compute.RegionTargetTcpProxy("target_proxy", {
    name: "my-target-proxy",
    region: "us-central1",
    backendService: backendService.id,
});
const fwRuleTargetProxy = new gcp.compute.ForwardingRule("fw_rule_target_proxy", {
    name: "fw-rule-target-proxy",
    region: "us-central1",
    loadBalancingScheme: "INTERNAL_MANAGED",
    ipProtocol: "TCP",
    portRange: "443",
    target: targetProxy.id,
    network: network.id,
    subnetwork: subnet.id,
    networkTier: "PREMIUM",
}, {
    dependsOn: [proxySubnet],
});
const privateZone = new gcp.dns.ManagedZone("private_zone", {
    name: "my-dns-zone",
    dnsName: "p.sourcemanager.dev.",
    visibility: "private",
    privateVisibilityConfig: {
        networks: [{
            networkUrl: network.id,
        }],
    },
});
const ssmInstanceHtmlRecord = new gcp.dns.RecordSet("ssm_instance_html_record", {
    name: _default.hostConfigs.apply(hostConfigs => `${hostConfigs[0].html}.`),
    type: "A",
    ttl: 300,
    managedZone: privateZone.name,
    rrdatas: [fwRuleTargetProxy.ipAddress],
});
const ssmInstanceApiRecord = new gcp.dns.RecordSet("ssm_instance_api_record", {
    name: _default.hostConfigs.apply(hostConfigs => `${hostConfigs[0].api}.`),
    type: "A",
    ttl: 300,
    managedZone: privateZone.name,
    rrdatas: [fwRuleTargetProxy.ipAddress],
});
const ssmInstanceGitRecord = new gcp.dns.RecordSet("ssm_instance_git_record", {
    name: _default.hostConfigs.apply(hostConfigs => `${hostConfigs[0].gitHttp}.`),
    type: "A",
    ttl: 300,
    managedZone: privateZone.name,
    rrdatas: [fwRuleTargetProxy.ipAddress],
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_time as time

project = gcp.organizations.get_project()
ca_pool = gcp.certificateauthority.CaPool("ca_pool",
    name="ca-pool",
    location="us-central1",
    tier="ENTERPRISE",
    publishing_options={
        "publish_ca_cert": True,
        "publish_crl": True,
    })
root_ca = gcp.certificateauthority.Authority("root_ca",
    pool=ca_pool.name,
    certificate_authority_id="root-ca",
    location="us-central1",
    config={
        "subject_config": {
            "subject": {
                "organization": "google",
                "common_name": "my-certificate-authority",
            },
        },
        "x509_config": {
            "ca_options": {
                "is_ca": True,
            },
            "key_usage": {
                "base_key_usage": {
                    "cert_sign": True,
                    "crl_sign": True,
                },
                "extended_key_usage": {
                    "server_auth": True,
                },
            },
        },
    },
    key_spec={
        "algorithm": "RSA_PKCS1_4096_SHA256",
    },
    deletion_protection=False,
    ignore_active_certificates_on_deletion=True,
    skip_grace_period=True)
ca_pool_binding = gcp.certificateauthority.CaPoolIamBinding("ca_pool_binding",
    ca_pool=ca_pool.id,
    role="roles/privateca.certificateRequester",
    members=[f"serviceAccount:service-{project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com"])
# ca pool IAM permissions can take time to propagate
wait120_seconds = time.index.Sleep("wait_120_seconds", create_duration=120s,
opts = pulumi.ResourceOptions(depends_on=[ca_pool_binding]))
# See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
default = gcp.securesourcemanager.Instance("default",
    instance_id="my-instance",
    location="us-central1",
    private_config={
        "is_private": True,
        "ca_pool": ca_pool.id,
    },
    opts = pulumi.ResourceOptions(depends_on=[
            root_ca,
            wait120_seconds,
        ]))
# Connect SSM private instance with L4 proxy ILB.
network = gcp.compute.Network("network",
    name="my-network",
    auto_create_subnetworks=False)
subnet = gcp.compute.Subnetwork("subnet",
    name="my-subnet",
    region="us-central1",
    network=network.id,
    ip_cidr_range="10.0.1.0/24",
    private_ip_google_access=True)
psc_neg = gcp.compute.RegionNetworkEndpointGroup("psc_neg",
    name="my-neg",
    region="us-central1",
    network_endpoint_type="PRIVATE_SERVICE_CONNECT",
    psc_target_service=default.private_config.http_service_attachment,
    network=network.id,
    subnetwork=subnet.id)
backend_service = gcp.compute.RegionBackendService("backend_service",
    name="my-backend-service",
    region="us-central1",
    protocol="TCP",
    load_balancing_scheme="INTERNAL_MANAGED",
    backends=[{
        "group": psc_neg.id,
        "balancing_mode": "UTILIZATION",
        "capacity_scaler": 1,
    }])
proxy_subnet = gcp.compute.Subnetwork("proxy_subnet",
    name="my-proxy-subnet",
    region="us-central1",
    network=network.id,
    ip_cidr_range="10.0.2.0/24",
    purpose="REGIONAL_MANAGED_PROXY",
    role="ACTIVE")
target_proxy = gcp.compute.RegionTargetTcpProxy("target_proxy",
    name="my-target-proxy",
    region="us-central1",
    backend_service=backend_service.id)
fw_rule_target_proxy = gcp.compute.ForwardingRule("fw_rule_target_proxy",
    name="fw-rule-target-proxy",
    region="us-central1",
    load_balancing_scheme="INTERNAL_MANAGED",
    ip_protocol="TCP",
    port_range="443",
    target=target_proxy.id,
    network=network.id,
    subnetwork=subnet.id,
    network_tier="PREMIUM",
    opts = pulumi.ResourceOptions(depends_on=[proxy_subnet]))
private_zone = gcp.dns.ManagedZone("private_zone",
    name="my-dns-zone",
    dns_name="p.sourcemanager.dev.",
    visibility="private",
    private_visibility_config={
        "networks": [{
            "network_url": network.id,
        }],
    })
ssm_instance_html_record = gcp.dns.RecordSet("ssm_instance_html_record",
    name=default.host_configs.apply(lambda host_configs: f"{host_configs[0].html}."),
    type="A",
    ttl=300,
    managed_zone=private_zone.name,
    rrdatas=[fw_rule_target_proxy.ip_address])
ssm_instance_api_record = gcp.dns.RecordSet("ssm_instance_api_record",
    name=default.host_configs.apply(lambda host_configs: f"{host_configs[0].api}."),
    type="A",
    ttl=300,
    managed_zone=private_zone.name,
    rrdatas=[fw_rule_target_proxy.ip_address])
ssm_instance_git_record = gcp.dns.RecordSet("ssm_instance_git_record",
    name=default.host_configs.apply(lambda host_configs: f"{host_configs[0].git_http}."),
    type="A",
    ttl=300,
    managed_zone=private_zone.name,
    rrdatas=[fw_rule_target_proxy.ip_address])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Time = Pulumi.Time;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var caPool = new Gcp.CertificateAuthority.CaPool("ca_pool", new()
    {
        Name = "ca-pool",
        Location = "us-central1",
        Tier = "ENTERPRISE",
        PublishingOptions = new Gcp.CertificateAuthority.Inputs.CaPoolPublishingOptionsArgs
        {
            PublishCaCert = true,
            PublishCrl = true,
        },
    });

    var rootCa = new Gcp.CertificateAuthority.Authority("root_ca", new()
    {
        Pool = caPool.Name,
        CertificateAuthorityId = "root-ca",
        Location = "us-central1",
        Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
        {
            SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
            {
                Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
                {
                    Organization = "google",
                    CommonName = "my-certificate-authority",
                },
            },
            X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
            {
                CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
                {
                    IsCa = true,
                },
                KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
                {
                    BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
                    {
                        CertSign = true,
                        CrlSign = true,
                    },
                    ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
                    {
                        ServerAuth = true,
                    },
                },
            },
        },
        KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
        {
            Algorithm = "RSA_PKCS1_4096_SHA256",
        },
        DeletionProtection = false,
        IgnoreActiveCertificatesOnDeletion = true,
        SkipGracePeriod = true,
    });

    var caPoolBinding = new Gcp.CertificateAuthority.CaPoolIamBinding("ca_pool_binding", new()
    {
        CaPool = caPool.Id,
        Role = "roles/privateca.certificateRequester",
        Members = new[]
        {
            $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-sourcemanager.iam.gserviceaccount.com",
        },
    });

    // ca pool IAM permissions can take time to propagate
    var wait120Seconds = new Time.Index.Sleep("wait_120_seconds", new()
    {
        CreateDuration = "120s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            caPoolBinding,
        },
    });

    // See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
    var @default = new Gcp.SecureSourceManager.Instance("default", new()
    {
        InstanceId = "my-instance",
        Location = "us-central1",
        PrivateConfig = new Gcp.SecureSourceManager.Inputs.InstancePrivateConfigArgs
        {
            IsPrivate = true,
            CaPool = caPool.Id,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            rootCa,
            wait120Seconds,
        },
    });

    // Connect SSM private instance with L4 proxy ILB.
    var network = new Gcp.Compute.Network("network", new()
    {
        Name = "my-network",
        AutoCreateSubnetworks = false,
    });

    var subnet = new Gcp.Compute.Subnetwork("subnet", new()
    {
        Name = "my-subnet",
        Region = "us-central1",
        Network = network.Id,
        IpCidrRange = "10.0.1.0/24",
        PrivateIpGoogleAccess = true,
    });

    var pscNeg = new Gcp.Compute.RegionNetworkEndpointGroup("psc_neg", new()
    {
        Name = "my-neg",
        Region = "us-central1",
        NetworkEndpointType = "PRIVATE_SERVICE_CONNECT",
        PscTargetService = @default.PrivateConfig.Apply(privateConfig => privateConfig?.HttpServiceAttachment),
        Network = network.Id,
        Subnetwork = subnet.Id,
    });

    var backendService = new Gcp.Compute.RegionBackendService("backend_service", new()
    {
        Name = "my-backend-service",
        Region = "us-central1",
        Protocol = "TCP",
        LoadBalancingScheme = "INTERNAL_MANAGED",
        Backends = new[]
        {
            new Gcp.Compute.Inputs.RegionBackendServiceBackendArgs
            {
                Group = pscNeg.Id,
                BalancingMode = "UTILIZATION",
                CapacityScaler = 1,
            },
        },
    });

    var proxySubnet = new Gcp.Compute.Subnetwork("proxy_subnet", new()
    {
        Name = "my-proxy-subnet",
        Region = "us-central1",
        Network = network.Id,
        IpCidrRange = "10.0.2.0/24",
        Purpose = "REGIONAL_MANAGED_PROXY",
        Role = "ACTIVE",
    });

    var targetProxy = new Gcp.Compute.RegionTargetTcpProxy("target_proxy", new()
    {
        Name = "my-target-proxy",
        Region = "us-central1",
        BackendService = backendService.Id,
    });

    var fwRuleTargetProxy = new Gcp.Compute.ForwardingRule("fw_rule_target_proxy", new()
    {
        Name = "fw-rule-target-proxy",
        Region = "us-central1",
        LoadBalancingScheme = "INTERNAL_MANAGED",
        IpProtocol = "TCP",
        PortRange = "443",
        Target = targetProxy.Id,
        Network = network.Id,
        Subnetwork = subnet.Id,
        NetworkTier = "PREMIUM",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            proxySubnet,
        },
    });

    var privateZone = new Gcp.Dns.ManagedZone("private_zone", new()
    {
        Name = "my-dns-zone",
        DnsName = "p.sourcemanager.dev.",
        Visibility = "private",
        PrivateVisibilityConfig = new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigArgs
        {
            Networks = new[]
            {
                new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigNetworkArgs
                {
                    NetworkUrl = network.Id,
                },
            },
        },
    });

    var ssmInstanceHtmlRecord = new Gcp.Dns.RecordSet("ssm_instance_html_record", new()
    {
        Name = @default.HostConfigs.Apply(hostConfigs => $"{hostConfigs[0].Html}."),
        Type = "A",
        Ttl = 300,
        ManagedZone = privateZone.Name,
        Rrdatas = new[]
        {
            fwRuleTargetProxy.IpAddress,
        },
    });

    var ssmInstanceApiRecord = new Gcp.Dns.RecordSet("ssm_instance_api_record", new()
    {
        Name = @default.HostConfigs.Apply(hostConfigs => $"{hostConfigs[0].Api}."),
        Type = "A",
        Ttl = 300,
        ManagedZone = privateZone.Name,
        Rrdatas = new[]
        {
            fwRuleTargetProxy.IpAddress,
        },
    });

    var ssmInstanceGitRecord = new Gcp.Dns.RecordSet("ssm_instance_git_record", new()
    {
        Name = @default.HostConfigs.Apply(hostConfigs => $"{hostConfigs[0].GitHttp}."),
        Type = "A",
        Ttl = 300,
        ManagedZone = privateZone.Name,
        Rrdatas = new[]
        {
            fwRuleTargetProxy.IpAddress,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/certificateauthority"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dns"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi-time/sdk/go/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		caPool, err := certificateauthority.NewCaPool(ctx, "ca_pool", &certificateauthority.CaPoolArgs{
			Name:     pulumi.String("ca-pool"),
			Location: pulumi.String("us-central1"),
			Tier:     pulumi.String("ENTERPRISE"),
			PublishingOptions: &certificateauthority.CaPoolPublishingOptionsArgs{
				PublishCaCert: pulumi.Bool(true),
				PublishCrl:    pulumi.Bool(true),
			},
		})
		if err != nil {
			return err
		}
		rootCa, err := certificateauthority.NewAuthority(ctx, "root_ca", &certificateauthority.AuthorityArgs{
			Pool:                   caPool.Name,
			CertificateAuthorityId: pulumi.String("root-ca"),
			Location:               pulumi.String("us-central1"),
			Config: &certificateauthority.AuthorityConfigArgs{
				SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
					Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
						Organization: pulumi.String("google"),
						CommonName:   pulumi.String("my-certificate-authority"),
					},
				},
				X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
					CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
						IsCa: pulumi.Bool(true),
					},
					KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
						BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
							CertSign: pulumi.Bool(true),
							CrlSign:  pulumi.Bool(true),
						},
						ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
							ServerAuth: pulumi.Bool(true),
						},
					},
				},
			},
			KeySpec: &certificateauthority.AuthorityKeySpecArgs{
				Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
			},
			DeletionProtection:                 pulumi.Bool(false),
			IgnoreActiveCertificatesOnDeletion: pulumi.Bool(true),
			SkipGracePeriod:                    pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		caPoolBinding, err := certificateauthority.NewCaPoolIamBinding(ctx, "ca_pool_binding", &certificateauthority.CaPoolIamBindingArgs{
			CaPool: caPool.ID(),
			Role:   pulumi.String("roles/privateca.certificateRequester"),
			Members: pulumi.StringArray{
				pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-sourcemanager.iam.gserviceaccount.com", project.Number),
			},
		})
		if err != nil {
			return err
		}
		// ca pool IAM permissions can take time to propagate
		wait120Seconds, err := time.NewSleep(ctx, "wait_120_seconds", &time.SleepArgs{
			CreateDuration: "120s",
		}, pulumi.DependsOn([]pulumi.Resource{
			caPoolBinding,
		}))
		if err != nil {
			return err
		}
		// See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
		_, err = securesourcemanager.NewInstance(ctx, "default", &securesourcemanager.InstanceArgs{
			InstanceId: pulumi.String("my-instance"),
			Location:   pulumi.String("us-central1"),
			PrivateConfig: &securesourcemanager.InstancePrivateConfigArgs{
				IsPrivate: pulumi.Bool(true),
				CaPool:    caPool.ID(),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			rootCa,
			wait120Seconds,
		}))
		if err != nil {
			return err
		}
		// Connect SSM private instance with L4 proxy ILB.
		network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
			Name:                  pulumi.String("my-network"),
			AutoCreateSubnetworks: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		subnet, err := compute.NewSubnetwork(ctx, "subnet", &compute.SubnetworkArgs{
			Name:                  pulumi.String("my-subnet"),
			Region:                pulumi.String("us-central1"),
			Network:               network.ID(),
			IpCidrRange:           pulumi.String("10.0.1.0/24"),
			PrivateIpGoogleAccess: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		pscNeg, err := compute.NewRegionNetworkEndpointGroup(ctx, "psc_neg", &compute.RegionNetworkEndpointGroupArgs{
			Name:                pulumi.String("my-neg"),
			Region:              pulumi.String("us-central1"),
			NetworkEndpointType: pulumi.String("PRIVATE_SERVICE_CONNECT"),
			PscTargetService: pulumi.String(_default.PrivateConfig.ApplyT(func(privateConfig securesourcemanager.InstancePrivateConfig) (*string, error) {
				return &privateConfig.HttpServiceAttachment, nil
			}).(pulumi.StringPtrOutput)),
			Network:    network.ID(),
			Subnetwork: subnet.ID(),
		})
		if err != nil {
			return err
		}
		backendService, err := compute.NewRegionBackendService(ctx, "backend_service", &compute.RegionBackendServiceArgs{
			Name:                pulumi.String("my-backend-service"),
			Region:              pulumi.String("us-central1"),
			Protocol:            pulumi.String("TCP"),
			LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
			Backends: compute.RegionBackendServiceBackendArray{
				&compute.RegionBackendServiceBackendArgs{
					Group:          pscNeg.ID(),
					BalancingMode:  pulumi.String("UTILIZATION"),
					CapacityScaler: pulumi.Float64(1),
				},
			},
		})
		if err != nil {
			return err
		}
		proxySubnet, err := compute.NewSubnetwork(ctx, "proxy_subnet", &compute.SubnetworkArgs{
			Name:        pulumi.String("my-proxy-subnet"),
			Region:      pulumi.String("us-central1"),
			Network:     network.ID(),
			IpCidrRange: pulumi.String("10.0.2.0/24"),
			Purpose:     pulumi.String("REGIONAL_MANAGED_PROXY"),
			Role:        pulumi.String("ACTIVE"),
		})
		if err != nil {
			return err
		}
		targetProxy, err := compute.NewRegionTargetTcpProxy(ctx, "target_proxy", &compute.RegionTargetTcpProxyArgs{
			Name:           pulumi.String("my-target-proxy"),
			Region:         pulumi.String("us-central1"),
			BackendService: backendService.ID(),
		})
		if err != nil {
			return err
		}
		fwRuleTargetProxy, err := compute.NewForwardingRule(ctx, "fw_rule_target_proxy", &compute.ForwardingRuleArgs{
			Name:                pulumi.String("fw-rule-target-proxy"),
			Region:              pulumi.String("us-central1"),
			LoadBalancingScheme: pulumi.String("INTERNAL_MANAGED"),
			IpProtocol:          pulumi.String("TCP"),
			PortRange:           pulumi.String("443"),
			Target:              targetProxy.ID(),
			Network:             network.ID(),
			Subnetwork:          subnet.ID(),
			NetworkTier:         pulumi.String("PREMIUM"),
		}, pulumi.DependsOn([]pulumi.Resource{
			proxySubnet,
		}))
		if err != nil {
			return err
		}
		privateZone, err := dns.NewManagedZone(ctx, "private_zone", &dns.ManagedZoneArgs{
			Name:       pulumi.String("my-dns-zone"),
			DnsName:    pulumi.String("p.sourcemanager.dev."),
			Visibility: pulumi.String("private"),
			PrivateVisibilityConfig: &dns.ManagedZonePrivateVisibilityConfigArgs{
				Networks: dns.ManagedZonePrivateVisibilityConfigNetworkArray{
					&dns.ManagedZonePrivateVisibilityConfigNetworkArgs{
						NetworkUrl: network.ID(),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = dns.NewRecordSet(ctx, "ssm_instance_html_record", &dns.RecordSetArgs{
			Name: _default.HostConfigs.ApplyT(func(hostConfigs []securesourcemanager.InstanceHostConfig) (string, error) {
				return fmt.Sprintf("%v.", hostConfigs[0].Html), nil
			}).(pulumi.StringOutput),
			Type:        pulumi.String("A"),
			Ttl:         pulumi.Int(300),
			ManagedZone: privateZone.Name,
			Rrdatas: pulumi.StringArray{
				fwRuleTargetProxy.IpAddress,
			},
		})
		if err != nil {
			return err
		}
		_, err = dns.NewRecordSet(ctx, "ssm_instance_api_record", &dns.RecordSetArgs{
			Name: _default.HostConfigs.ApplyT(func(hostConfigs []securesourcemanager.InstanceHostConfig) (string, error) {
				return fmt.Sprintf("%v.", hostConfigs[0].Api), nil
			}).(pulumi.StringOutput),
			Type:        pulumi.String("A"),
			Ttl:         pulumi.Int(300),
			ManagedZone: privateZone.Name,
			Rrdatas: pulumi.StringArray{
				fwRuleTargetProxy.IpAddress,
			},
		})
		if err != nil {
			return err
		}
		_, err = dns.NewRecordSet(ctx, "ssm_instance_git_record", &dns.RecordSetArgs{
			Name: _default.HostConfigs.ApplyT(func(hostConfigs []securesourcemanager.InstanceHostConfig) (string, error) {
				return fmt.Sprintf("%v.", hostConfigs[0].GitHttp), nil
			}).(pulumi.StringOutput),
			Type:        pulumi.String("A"),
			Ttl:         pulumi.Int(300),
			ManagedZone: privateZone.Name,
			Rrdatas: pulumi.StringArray{
				fwRuleTargetProxy.IpAddress,
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.certificateauthority.CaPool;
import com.pulumi.gcp.certificateauthority.CaPoolArgs;
import com.pulumi.gcp.certificateauthority.inputs.CaPoolPublishingOptionsArgs;
import com.pulumi.gcp.certificateauthority.Authority;
import com.pulumi.gcp.certificateauthority.AuthorityArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigSubjectArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigCaOptionsArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityKeySpecArgs;
import com.pulumi.gcp.certificateauthority.CaPoolIamBinding;
import com.pulumi.gcp.certificateauthority.CaPoolIamBindingArgs;
import com.pulumi.time.sleep;
import com.pulumi.time.SleepArgs;
import com.pulumi.gcp.securesourcemanager.Instance;
import com.pulumi.gcp.securesourcemanager.InstanceArgs;
import com.pulumi.gcp.securesourcemanager.inputs.InstancePrivateConfigArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.compute.RegionNetworkEndpointGroup;
import com.pulumi.gcp.compute.RegionNetworkEndpointGroupArgs;
import com.pulumi.gcp.compute.RegionBackendService;
import com.pulumi.gcp.compute.RegionBackendServiceArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceBackendArgs;
import com.pulumi.gcp.compute.RegionTargetTcpProxy;
import com.pulumi.gcp.compute.RegionTargetTcpProxyArgs;
import com.pulumi.gcp.compute.ForwardingRule;
import com.pulumi.gcp.compute.ForwardingRuleArgs;
import com.pulumi.gcp.dns.ManagedZone;
import com.pulumi.gcp.dns.ManagedZoneArgs;
import com.pulumi.gcp.dns.inputs.ManagedZonePrivateVisibilityConfigArgs;
import com.pulumi.gcp.dns.RecordSet;
import com.pulumi.gcp.dns.RecordSetArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var caPool = new CaPool("caPool", CaPoolArgs.builder()
            .name("ca-pool")
            .location("us-central1")
            .tier("ENTERPRISE")
            .publishingOptions(CaPoolPublishingOptionsArgs.builder()
                .publishCaCert(true)
                .publishCrl(true)
                .build())
            .build());

        var rootCa = new Authority("rootCa", AuthorityArgs.builder()
            .pool(caPool.name())
            .certificateAuthorityId("root-ca")
            .location("us-central1")
            .config(AuthorityConfigArgs.builder()
                .subjectConfig(AuthorityConfigSubjectConfigArgs.builder()
                    .subject(AuthorityConfigSubjectConfigSubjectArgs.builder()
                        .organization("google")
                        .commonName("my-certificate-authority")
                        .build())
                    .build())
                .x509Config(AuthorityConfigX509ConfigArgs.builder()
                    .caOptions(AuthorityConfigX509ConfigCaOptionsArgs.builder()
                        .isCa(true)
                        .build())
                    .keyUsage(AuthorityConfigX509ConfigKeyUsageArgs.builder()
                        .baseKeyUsage(AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs.builder()
                            .certSign(true)
                            .crlSign(true)
                            .build())
                        .extendedKeyUsage(AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs.builder()
                            .serverAuth(true)
                            .build())
                        .build())
                    .build())
                .build())
            .keySpec(AuthorityKeySpecArgs.builder()
                .algorithm("RSA_PKCS1_4096_SHA256")
                .build())
            .deletionProtection(false)
            .ignoreActiveCertificatesOnDeletion(true)
            .skipGracePeriod(true)
            .build());

        var caPoolBinding = new CaPoolIamBinding("caPoolBinding", CaPoolIamBindingArgs.builder()
            .caPool(caPool.id())
            .role("roles/privateca.certificateRequester")
            .members(String.format("serviceAccount:service-%s@gcp-sa-sourcemanager.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        // ca pool IAM permissions can take time to propagate
        var wait120Seconds = new Sleep("wait120Seconds", SleepArgs.builder()
            .createDuration("120s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(caPoolBinding)
                .build());

        // See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
        var default_ = new Instance("default", InstanceArgs.builder()
            .instanceId("my-instance")
            .location("us-central1")
            .privateConfig(InstancePrivateConfigArgs.builder()
                .isPrivate(true)
                .caPool(caPool.id())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    rootCa,
                    wait120Seconds)
                .build());

        // Connect SSM private instance with L4 proxy ILB.
        var network = new Network("network", NetworkArgs.builder()
            .name("my-network")
            .autoCreateSubnetworks(false)
            .build());

        var subnet = new Subnetwork("subnet", SubnetworkArgs.builder()
            .name("my-subnet")
            .region("us-central1")
            .network(network.id())
            .ipCidrRange("10.0.1.0/24")
            .privateIpGoogleAccess(true)
            .build());

        var pscNeg = new RegionNetworkEndpointGroup("pscNeg", RegionNetworkEndpointGroupArgs.builder()
            .name("my-neg")
            .region("us-central1")
            .networkEndpointType("PRIVATE_SERVICE_CONNECT")
            .pscTargetService(default_.privateConfig().applyValue(privateConfig -> privateConfig.httpServiceAttachment()))
            .network(network.id())
            .subnetwork(subnet.id())
            .build());

        var backendService = new RegionBackendService("backendService", RegionBackendServiceArgs.builder()
            .name("my-backend-service")
            .region("us-central1")
            .protocol("TCP")
            .loadBalancingScheme("INTERNAL_MANAGED")
            .backends(RegionBackendServiceBackendArgs.builder()
                .group(pscNeg.id())
                .balancingMode("UTILIZATION")
                .capacityScaler(1)
                .build())
            .build());

        var proxySubnet = new Subnetwork("proxySubnet", SubnetworkArgs.builder()
            .name("my-proxy-subnet")
            .region("us-central1")
            .network(network.id())
            .ipCidrRange("10.0.2.0/24")
            .purpose("REGIONAL_MANAGED_PROXY")
            .role("ACTIVE")
            .build());

        var targetProxy = new RegionTargetTcpProxy("targetProxy", RegionTargetTcpProxyArgs.builder()
            .name("my-target-proxy")
            .region("us-central1")
            .backendService(backendService.id())
            .build());

        var fwRuleTargetProxy = new ForwardingRule("fwRuleTargetProxy", ForwardingRuleArgs.builder()
            .name("fw-rule-target-proxy")
            .region("us-central1")
            .loadBalancingScheme("INTERNAL_MANAGED")
            .ipProtocol("TCP")
            .portRange("443")
            .target(targetProxy.id())
            .network(network.id())
            .subnetwork(subnet.id())
            .networkTier("PREMIUM")
            .build(), CustomResourceOptions.builder()
                .dependsOn(proxySubnet)
                .build());

        var privateZone = new ManagedZone("privateZone", ManagedZoneArgs.builder()
            .name("my-dns-zone")
            .dnsName("p.sourcemanager.dev.")
            .visibility("private")
            .privateVisibilityConfig(ManagedZonePrivateVisibilityConfigArgs.builder()
                .networks(ManagedZonePrivateVisibilityConfigNetworkArgs.builder()
                    .networkUrl(network.id())
                    .build())
                .build())
            .build());

        var ssmInstanceHtmlRecord = new RecordSet("ssmInstanceHtmlRecord", RecordSetArgs.builder()
            .name(default_.hostConfigs().applyValue(hostConfigs -> String.format("%s.", hostConfigs[0].html())))
            .type("A")
            .ttl(300)
            .managedZone(privateZone.name())
            .rrdatas(fwRuleTargetProxy.ipAddress())
            .build());

        var ssmInstanceApiRecord = new RecordSet("ssmInstanceApiRecord", RecordSetArgs.builder()
            .name(default_.hostConfigs().applyValue(hostConfigs -> String.format("%s.", hostConfigs[0].api())))
            .type("A")
            .ttl(300)
            .managedZone(privateZone.name())
            .rrdatas(fwRuleTargetProxy.ipAddress())
            .build());

        var ssmInstanceGitRecord = new RecordSet("ssmInstanceGitRecord", RecordSetArgs.builder()
            .name(default_.hostConfigs().applyValue(hostConfigs -> String.format("%s.", hostConfigs[0].gitHttp())))
            .type("A")
            .ttl(300)
            .managedZone(privateZone.name())
            .rrdatas(fwRuleTargetProxy.ipAddress())
            .build());

    }
}
```
```yaml
resources:
  caPool:
    type: gcp:certificateauthority:CaPool
    name: ca_pool
    properties:
      name: ca-pool
      location: us-central1
      tier: ENTERPRISE
      publishingOptions:
        publishCaCert: true
        publishCrl: true
  rootCa:
    type: gcp:certificateauthority:Authority
    name: root_ca
    properties:
      pool: ${caPool.name}
      certificateAuthorityId: root-ca
      location: us-central1
      config:
        subjectConfig:
          subject:
            organization: google
            commonName: my-certificate-authority
        x509Config:
          caOptions:
            isCa: true
          keyUsage:
            baseKeyUsage:
              certSign: true
              crlSign: true
            extendedKeyUsage:
              serverAuth: true
      keySpec:
        algorithm: RSA_PKCS1_4096_SHA256
      deletionProtection: false
      ignoreActiveCertificatesOnDeletion: true
      skipGracePeriod: true
  caPoolBinding:
    type: gcp:certificateauthority:CaPoolIamBinding
    name: ca_pool_binding
    properties:
      caPool: ${caPool.id}
      role: roles/privateca.certificateRequester
      members:
        - serviceAccount:service-${project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com
  # See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
  default:
    type: gcp:securesourcemanager:Instance
    properties:
      instanceId: my-instance
      location: us-central1
      privateConfig:
        isPrivate: true
        caPool: ${caPool.id}
    options:
      dependsOn:
        - ${rootCa}
        - ${wait120Seconds}
  # ca pool IAM permissions can take time to propagate
  wait120Seconds:
    type: time:sleep
    name: wait_120_seconds
    properties:
      createDuration: 120s
    options:
      dependsOn:
        - ${caPoolBinding}
  # Connect SSM private instance with L4 proxy ILB.
  network:
    type: gcp:compute:Network
    properties:
      name: my-network
      autoCreateSubnetworks: false
  subnet:
    type: gcp:compute:Subnetwork
    properties:
      name: my-subnet
      region: us-central1
      network: ${network.id}
      ipCidrRange: 10.0.1.0/24
      privateIpGoogleAccess: true
  pscNeg:
    type: gcp:compute:RegionNetworkEndpointGroup
    name: psc_neg
    properties:
      name: my-neg
      region: us-central1
      networkEndpointType: PRIVATE_SERVICE_CONNECT
      pscTargetService: ${default.privateConfig.httpServiceAttachment}
      network: ${network.id}
      subnetwork: ${subnet.id}
  backendService:
    type: gcp:compute:RegionBackendService
    name: backend_service
    properties:
      name: my-backend-service
      region: us-central1
      protocol: TCP
      loadBalancingScheme: INTERNAL_MANAGED
      backends:
        - group: ${pscNeg.id}
          balancingMode: UTILIZATION
          capacityScaler: 1
  proxySubnet:
    type: gcp:compute:Subnetwork
    name: proxy_subnet
    properties:
      name: my-proxy-subnet
      region: us-central1
      network: ${network.id}
      ipCidrRange: 10.0.2.0/24
      purpose: REGIONAL_MANAGED_PROXY
      role: ACTIVE
  targetProxy:
    type: gcp:compute:RegionTargetTcpProxy
    name: target_proxy
    properties:
      name: my-target-proxy
      region: us-central1
      backendService: ${backendService.id}
  fwRuleTargetProxy:
    type: gcp:compute:ForwardingRule
    name: fw_rule_target_proxy
    properties:
      name: fw-rule-target-proxy
      region: us-central1
      loadBalancingScheme: INTERNAL_MANAGED
      ipProtocol: TCP
      portRange: '443'
      target: ${targetProxy.id}
      network: ${network.id}
      subnetwork: ${subnet.id}
      networkTier: PREMIUM
    options:
      dependsOn:
        - ${proxySubnet}
  privateZone:
    type: gcp:dns:ManagedZone
    name: private_zone
    properties:
      name: my-dns-zone
      dnsName: p.sourcemanager.dev.
      visibility: private
      privateVisibilityConfig:
        networks:
          - networkUrl: ${network.id}
  ssmInstanceHtmlRecord:
    type: gcp:dns:RecordSet
    name: ssm_instance_html_record
    properties:
      name: ${default.hostConfigs[0].html}.
      type: A
      ttl: 300
      managedZone: ${privateZone.name}
      rrdatas:
        - ${fwRuleTargetProxy.ipAddress}
  ssmInstanceApiRecord:
    type: gcp:dns:RecordSet
    name: ssm_instance_api_record
    properties:
      name: ${default.hostConfigs[0].api}.
      type: A
      ttl: 300
      managedZone: ${privateZone.name}
      rrdatas:
        - ${fwRuleTargetProxy.ipAddress}
  ssmInstanceGitRecord:
    type: gcp:dns:RecordSet
    name: ssm_instance_git_record
    properties:
      name: ${default.hostConfigs[0].gitHttp}.
      type: A
      ttl: 300
      managedZone: ${privateZone.name}
      rrdatas:
        - ${fwRuleTargetProxy.ipAddress}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Secure Source Manager Instance Private Psc Endpoint


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as time from "@pulumi/time";

const project = gcp.organizations.getProject({});
const caPool = new gcp.certificateauthority.CaPool("ca_pool", {
    name: "ca-pool",
    location: "us-central1",
    tier: "ENTERPRISE",
    publishingOptions: {
        publishCaCert: true,
        publishCrl: true,
    },
});
const rootCa = new gcp.certificateauthority.Authority("root_ca", {
    pool: caPool.name,
    certificateAuthorityId: "root-ca",
    location: "us-central1",
    config: {
        subjectConfig: {
            subject: {
                organization: "google",
                commonName: "my-certificate-authority",
            },
        },
        x509Config: {
            caOptions: {
                isCa: true,
            },
            keyUsage: {
                baseKeyUsage: {
                    certSign: true,
                    crlSign: true,
                },
                extendedKeyUsage: {
                    serverAuth: true,
                },
            },
        },
    },
    keySpec: {
        algorithm: "RSA_PKCS1_4096_SHA256",
    },
    deletionProtection: false,
    ignoreActiveCertificatesOnDeletion: true,
    skipGracePeriod: true,
});
const caPoolBinding = new gcp.certificateauthority.CaPoolIamBinding("ca_pool_binding", {
    caPool: caPool.id,
    role: "roles/privateca.certificateRequester",
    members: [project.then(project => `serviceAccount:service-${project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com`)],
});
// ca pool IAM permissions can take time to propagate
const wait120Seconds = new time.index.Sleep("wait_120_seconds", {createDuration: "120s"}, {
    dependsOn: [caPoolBinding],
});
// See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
const _default = new gcp.securesourcemanager.Instance("default", {
    instanceId: "my-instance",
    location: "us-central1",
    privateConfig: {
        isPrivate: true,
        caPool: caPool.id,
    },
}, {
    dependsOn: [
        rootCa,
        wait120Seconds,
    ],
});
// Connect SSM private instance with endpoint.
const network = new gcp.compute.Network("network", {
    name: "my-network",
    autoCreateSubnetworks: false,
});
const subnet = new gcp.compute.Subnetwork("subnet", {
    name: "my-subnet",
    region: "us-central1",
    network: network.id,
    ipCidrRange: "10.0.60.0/24",
    privateIpGoogleAccess: true,
});
const address = new gcp.compute.Address("address", {
    name: "my-address",
    region: "us-central1",
    address: "10.0.60.100",
    addressType: "INTERNAL",
    subnetwork: subnet.id,
});
const fwRuleServiceAttachment = new gcp.compute.ForwardingRule("fw_rule_service_attachment", {
    name: "fw-rule-service-attachment",
    region: "us-central1",
    loadBalancingScheme: "",
    ipAddress: address.id,
    network: network.id,
    target: _default.privateConfig.apply(privateConfig => privateConfig?.httpServiceAttachment),
});
const privateZone = new gcp.dns.ManagedZone("private_zone", {
    name: "my-dns-zone",
    dnsName: "p.sourcemanager.dev.",
    visibility: "private",
    privateVisibilityConfig: {
        networks: [{
            networkUrl: network.id,
        }],
    },
});
const ssmInstanceHtmlRecord = new gcp.dns.RecordSet("ssm_instance_html_record", {
    name: _default.hostConfigs.apply(hostConfigs => `${hostConfigs[0].html}.`),
    type: "A",
    ttl: 300,
    managedZone: privateZone.name,
    rrdatas: [fwRuleServiceAttachment.ipAddress],
});
const ssmInstanceApiRecord = new gcp.dns.RecordSet("ssm_instance_api_record", {
    name: _default.hostConfigs.apply(hostConfigs => `${hostConfigs[0].api}.`),
    type: "A",
    ttl: 300,
    managedZone: privateZone.name,
    rrdatas: [fwRuleServiceAttachment.ipAddress],
});
const ssmInstanceGitRecord = new gcp.dns.RecordSet("ssm_instance_git_record", {
    name: _default.hostConfigs.apply(hostConfigs => `${hostConfigs[0].gitHttp}.`),
    type: "A",
    ttl: 300,
    managedZone: privateZone.name,
    rrdatas: [fwRuleServiceAttachment.ipAddress],
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_time as time

project = gcp.organizations.get_project()
ca_pool = gcp.certificateauthority.CaPool("ca_pool",
    name="ca-pool",
    location="us-central1",
    tier="ENTERPRISE",
    publishing_options={
        "publish_ca_cert": True,
        "publish_crl": True,
    })
root_ca = gcp.certificateauthority.Authority("root_ca",
    pool=ca_pool.name,
    certificate_authority_id="root-ca",
    location="us-central1",
    config={
        "subject_config": {
            "subject": {
                "organization": "google",
                "common_name": "my-certificate-authority",
            },
        },
        "x509_config": {
            "ca_options": {
                "is_ca": True,
            },
            "key_usage": {
                "base_key_usage": {
                    "cert_sign": True,
                    "crl_sign": True,
                },
                "extended_key_usage": {
                    "server_auth": True,
                },
            },
        },
    },
    key_spec={
        "algorithm": "RSA_PKCS1_4096_SHA256",
    },
    deletion_protection=False,
    ignore_active_certificates_on_deletion=True,
    skip_grace_period=True)
ca_pool_binding = gcp.certificateauthority.CaPoolIamBinding("ca_pool_binding",
    ca_pool=ca_pool.id,
    role="roles/privateca.certificateRequester",
    members=[f"serviceAccount:service-{project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com"])
# ca pool IAM permissions can take time to propagate
wait120_seconds = time.index.Sleep("wait_120_seconds", create_duration=120s,
opts = pulumi.ResourceOptions(depends_on=[ca_pool_binding]))
# See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
default = gcp.securesourcemanager.Instance("default",
    instance_id="my-instance",
    location="us-central1",
    private_config={
        "is_private": True,
        "ca_pool": ca_pool.id,
    },
    opts = pulumi.ResourceOptions(depends_on=[
            root_ca,
            wait120_seconds,
        ]))
# Connect SSM private instance with endpoint.
network = gcp.compute.Network("network",
    name="my-network",
    auto_create_subnetworks=False)
subnet = gcp.compute.Subnetwork("subnet",
    name="my-subnet",
    region="us-central1",
    network=network.id,
    ip_cidr_range="10.0.60.0/24",
    private_ip_google_access=True)
address = gcp.compute.Address("address",
    name="my-address",
    region="us-central1",
    address="10.0.60.100",
    address_type="INTERNAL",
    subnetwork=subnet.id)
fw_rule_service_attachment = gcp.compute.ForwardingRule("fw_rule_service_attachment",
    name="fw-rule-service-attachment",
    region="us-central1",
    load_balancing_scheme="",
    ip_address=address.id,
    network=network.id,
    target=default.private_config.http_service_attachment)
private_zone = gcp.dns.ManagedZone("private_zone",
    name="my-dns-zone",
    dns_name="p.sourcemanager.dev.",
    visibility="private",
    private_visibility_config={
        "networks": [{
            "network_url": network.id,
        }],
    })
ssm_instance_html_record = gcp.dns.RecordSet("ssm_instance_html_record",
    name=default.host_configs.apply(lambda host_configs: f"{host_configs[0].html}."),
    type="A",
    ttl=300,
    managed_zone=private_zone.name,
    rrdatas=[fw_rule_service_attachment.ip_address])
ssm_instance_api_record = gcp.dns.RecordSet("ssm_instance_api_record",
    name=default.host_configs.apply(lambda host_configs: f"{host_configs[0].api}."),
    type="A",
    ttl=300,
    managed_zone=private_zone.name,
    rrdatas=[fw_rule_service_attachment.ip_address])
ssm_instance_git_record = gcp.dns.RecordSet("ssm_instance_git_record",
    name=default.host_configs.apply(lambda host_configs: f"{host_configs[0].git_http}."),
    type="A",
    ttl=300,
    managed_zone=private_zone.name,
    rrdatas=[fw_rule_service_attachment.ip_address])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Time = Pulumi.Time;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var caPool = new Gcp.CertificateAuthority.CaPool("ca_pool", new()
    {
        Name = "ca-pool",
        Location = "us-central1",
        Tier = "ENTERPRISE",
        PublishingOptions = new Gcp.CertificateAuthority.Inputs.CaPoolPublishingOptionsArgs
        {
            PublishCaCert = true,
            PublishCrl = true,
        },
    });

    var rootCa = new Gcp.CertificateAuthority.Authority("root_ca", new()
    {
        Pool = caPool.Name,
        CertificateAuthorityId = "root-ca",
        Location = "us-central1",
        Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigArgs
        {
            SubjectConfig = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigArgs
            {
                Subject = new Gcp.CertificateAuthority.Inputs.AuthorityConfigSubjectConfigSubjectArgs
                {
                    Organization = "google",
                    CommonName = "my-certificate-authority",
                },
            },
            X509Config = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigArgs
            {
                CaOptions = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigCaOptionsArgs
                {
                    IsCa = true,
                },
                KeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageArgs
                {
                    BaseKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs
                    {
                        CertSign = true,
                        CrlSign = true,
                    },
                    ExtendedKeyUsage = new Gcp.CertificateAuthority.Inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs
                    {
                        ServerAuth = true,
                    },
                },
            },
        },
        KeySpec = new Gcp.CertificateAuthority.Inputs.AuthorityKeySpecArgs
        {
            Algorithm = "RSA_PKCS1_4096_SHA256",
        },
        DeletionProtection = false,
        IgnoreActiveCertificatesOnDeletion = true,
        SkipGracePeriod = true,
    });

    var caPoolBinding = new Gcp.CertificateAuthority.CaPoolIamBinding("ca_pool_binding", new()
    {
        CaPool = caPool.Id,
        Role = "roles/privateca.certificateRequester",
        Members = new[]
        {
            $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-sourcemanager.iam.gserviceaccount.com",
        },
    });

    // ca pool IAM permissions can take time to propagate
    var wait120Seconds = new Time.Index.Sleep("wait_120_seconds", new()
    {
        CreateDuration = "120s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            caPoolBinding,
        },
    });

    // See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
    var @default = new Gcp.SecureSourceManager.Instance("default", new()
    {
        InstanceId = "my-instance",
        Location = "us-central1",
        PrivateConfig = new Gcp.SecureSourceManager.Inputs.InstancePrivateConfigArgs
        {
            IsPrivate = true,
            CaPool = caPool.Id,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            rootCa,
            wait120Seconds,
        },
    });

    // Connect SSM private instance with endpoint.
    var network = new Gcp.Compute.Network("network", new()
    {
        Name = "my-network",
        AutoCreateSubnetworks = false,
    });

    var subnet = new Gcp.Compute.Subnetwork("subnet", new()
    {
        Name = "my-subnet",
        Region = "us-central1",
        Network = network.Id,
        IpCidrRange = "10.0.60.0/24",
        PrivateIpGoogleAccess = true,
    });

    var address = new Gcp.Compute.Address("address", new()
    {
        Name = "my-address",
        Region = "us-central1",
        IPAddress = "10.0.60.100",
        AddressType = "INTERNAL",
        Subnetwork = subnet.Id,
    });

    var fwRuleServiceAttachment = new Gcp.Compute.ForwardingRule("fw_rule_service_attachment", new()
    {
        Name = "fw-rule-service-attachment",
        Region = "us-central1",
        LoadBalancingScheme = "",
        IpAddress = address.Id,
        Network = network.Id,
        Target = @default.PrivateConfig.Apply(privateConfig => privateConfig?.HttpServiceAttachment),
    });

    var privateZone = new Gcp.Dns.ManagedZone("private_zone", new()
    {
        Name = "my-dns-zone",
        DnsName = "p.sourcemanager.dev.",
        Visibility = "private",
        PrivateVisibilityConfig = new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigArgs
        {
            Networks = new[]
            {
                new Gcp.Dns.Inputs.ManagedZonePrivateVisibilityConfigNetworkArgs
                {
                    NetworkUrl = network.Id,
                },
            },
        },
    });

    var ssmInstanceHtmlRecord = new Gcp.Dns.RecordSet("ssm_instance_html_record", new()
    {
        Name = @default.HostConfigs.Apply(hostConfigs => $"{hostConfigs[0].Html}."),
        Type = "A",
        Ttl = 300,
        ManagedZone = privateZone.Name,
        Rrdatas = new[]
        {
            fwRuleServiceAttachment.IpAddress,
        },
    });

    var ssmInstanceApiRecord = new Gcp.Dns.RecordSet("ssm_instance_api_record", new()
    {
        Name = @default.HostConfigs.Apply(hostConfigs => $"{hostConfigs[0].Api}."),
        Type = "A",
        Ttl = 300,
        ManagedZone = privateZone.Name,
        Rrdatas = new[]
        {
            fwRuleServiceAttachment.IpAddress,
        },
    });

    var ssmInstanceGitRecord = new Gcp.Dns.RecordSet("ssm_instance_git_record", new()
    {
        Name = @default.HostConfigs.Apply(hostConfigs => $"{hostConfigs[0].GitHttp}."),
        Type = "A",
        Ttl = 300,
        ManagedZone = privateZone.Name,
        Rrdatas = new[]
        {
            fwRuleServiceAttachment.IpAddress,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/certificateauthority"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dns"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi-time/sdk/go/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		caPool, err := certificateauthority.NewCaPool(ctx, "ca_pool", &certificateauthority.CaPoolArgs{
			Name:     pulumi.String("ca-pool"),
			Location: pulumi.String("us-central1"),
			Tier:     pulumi.String("ENTERPRISE"),
			PublishingOptions: &certificateauthority.CaPoolPublishingOptionsArgs{
				PublishCaCert: pulumi.Bool(true),
				PublishCrl:    pulumi.Bool(true),
			},
		})
		if err != nil {
			return err
		}
		rootCa, err := certificateauthority.NewAuthority(ctx, "root_ca", &certificateauthority.AuthorityArgs{
			Pool:                   caPool.Name,
			CertificateAuthorityId: pulumi.String("root-ca"),
			Location:               pulumi.String("us-central1"),
			Config: &certificateauthority.AuthorityConfigArgs{
				SubjectConfig: &certificateauthority.AuthorityConfigSubjectConfigArgs{
					Subject: &certificateauthority.AuthorityConfigSubjectConfigSubjectArgs{
						Organization: pulumi.String("google"),
						CommonName:   pulumi.String("my-certificate-authority"),
					},
				},
				X509Config: &certificateauthority.AuthorityConfigX509ConfigArgs{
					CaOptions: &certificateauthority.AuthorityConfigX509ConfigCaOptionsArgs{
						IsCa: pulumi.Bool(true),
					},
					KeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageArgs{
						BaseKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs{
							CertSign: pulumi.Bool(true),
							CrlSign:  pulumi.Bool(true),
						},
						ExtendedKeyUsage: &certificateauthority.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs{
							ServerAuth: pulumi.Bool(true),
						},
					},
				},
			},
			KeySpec: &certificateauthority.AuthorityKeySpecArgs{
				Algorithm: pulumi.String("RSA_PKCS1_4096_SHA256"),
			},
			DeletionProtection:                 pulumi.Bool(false),
			IgnoreActiveCertificatesOnDeletion: pulumi.Bool(true),
			SkipGracePeriod:                    pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		caPoolBinding, err := certificateauthority.NewCaPoolIamBinding(ctx, "ca_pool_binding", &certificateauthority.CaPoolIamBindingArgs{
			CaPool: caPool.ID(),
			Role:   pulumi.String("roles/privateca.certificateRequester"),
			Members: pulumi.StringArray{
				pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-sourcemanager.iam.gserviceaccount.com", project.Number),
			},
		})
		if err != nil {
			return err
		}
		// ca pool IAM permissions can take time to propagate
		wait120Seconds, err := time.NewSleep(ctx, "wait_120_seconds", &time.SleepArgs{
			CreateDuration: "120s",
		}, pulumi.DependsOn([]pulumi.Resource{
			caPoolBinding,
		}))
		if err != nil {
			return err
		}
		// See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
		_, err = securesourcemanager.NewInstance(ctx, "default", &securesourcemanager.InstanceArgs{
			InstanceId: pulumi.String("my-instance"),
			Location:   pulumi.String("us-central1"),
			PrivateConfig: &securesourcemanager.InstancePrivateConfigArgs{
				IsPrivate: pulumi.Bool(true),
				CaPool:    caPool.ID(),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			rootCa,
			wait120Seconds,
		}))
		if err != nil {
			return err
		}
		// Connect SSM private instance with endpoint.
		network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
			Name:                  pulumi.String("my-network"),
			AutoCreateSubnetworks: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		subnet, err := compute.NewSubnetwork(ctx, "subnet", &compute.SubnetworkArgs{
			Name:                  pulumi.String("my-subnet"),
			Region:                pulumi.String("us-central1"),
			Network:               network.ID(),
			IpCidrRange:           pulumi.String("10.0.60.0/24"),
			PrivateIpGoogleAccess: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		address, err := compute.NewAddress(ctx, "address", &compute.AddressArgs{
			Name:        pulumi.String("my-address"),
			Region:      pulumi.String("us-central1"),
			Address:     pulumi.String("10.0.60.100"),
			AddressType: pulumi.String("INTERNAL"),
			Subnetwork:  subnet.ID(),
		})
		if err != nil {
			return err
		}
		fwRuleServiceAttachment, err := compute.NewForwardingRule(ctx, "fw_rule_service_attachment", &compute.ForwardingRuleArgs{
			Name:                pulumi.String("fw-rule-service-attachment"),
			Region:              pulumi.String("us-central1"),
			LoadBalancingScheme: pulumi.String(""),
			IpAddress:           address.ID(),
			Network:             network.ID(),
			Target: pulumi.String(_default.PrivateConfig.ApplyT(func(privateConfig securesourcemanager.InstancePrivateConfig) (*string, error) {
				return &privateConfig.HttpServiceAttachment, nil
			}).(pulumi.StringPtrOutput)),
		})
		if err != nil {
			return err
		}
		privateZone, err := dns.NewManagedZone(ctx, "private_zone", &dns.ManagedZoneArgs{
			Name:       pulumi.String("my-dns-zone"),
			DnsName:    pulumi.String("p.sourcemanager.dev."),
			Visibility: pulumi.String("private"),
			PrivateVisibilityConfig: &dns.ManagedZonePrivateVisibilityConfigArgs{
				Networks: dns.ManagedZonePrivateVisibilityConfigNetworkArray{
					&dns.ManagedZonePrivateVisibilityConfigNetworkArgs{
						NetworkUrl: network.ID(),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = dns.NewRecordSet(ctx, "ssm_instance_html_record", &dns.RecordSetArgs{
			Name: _default.HostConfigs.ApplyT(func(hostConfigs []securesourcemanager.InstanceHostConfig) (string, error) {
				return fmt.Sprintf("%v.", hostConfigs[0].Html), nil
			}).(pulumi.StringOutput),
			Type:        pulumi.String("A"),
			Ttl:         pulumi.Int(300),
			ManagedZone: privateZone.Name,
			Rrdatas: pulumi.StringArray{
				fwRuleServiceAttachment.IpAddress,
			},
		})
		if err != nil {
			return err
		}
		_, err = dns.NewRecordSet(ctx, "ssm_instance_api_record", &dns.RecordSetArgs{
			Name: _default.HostConfigs.ApplyT(func(hostConfigs []securesourcemanager.InstanceHostConfig) (string, error) {
				return fmt.Sprintf("%v.", hostConfigs[0].Api), nil
			}).(pulumi.StringOutput),
			Type:        pulumi.String("A"),
			Ttl:         pulumi.Int(300),
			ManagedZone: privateZone.Name,
			Rrdatas: pulumi.StringArray{
				fwRuleServiceAttachment.IpAddress,
			},
		})
		if err != nil {
			return err
		}
		_, err = dns.NewRecordSet(ctx, "ssm_instance_git_record", &dns.RecordSetArgs{
			Name: _default.HostConfigs.ApplyT(func(hostConfigs []securesourcemanager.InstanceHostConfig) (string, error) {
				return fmt.Sprintf("%v.", hostConfigs[0].GitHttp), nil
			}).(pulumi.StringOutput),
			Type:        pulumi.String("A"),
			Ttl:         pulumi.Int(300),
			ManagedZone: privateZone.Name,
			Rrdatas: pulumi.StringArray{
				fwRuleServiceAttachment.IpAddress,
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.certificateauthority.CaPool;
import com.pulumi.gcp.certificateauthority.CaPoolArgs;
import com.pulumi.gcp.certificateauthority.inputs.CaPoolPublishingOptionsArgs;
import com.pulumi.gcp.certificateauthority.Authority;
import com.pulumi.gcp.certificateauthority.AuthorityArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigSubjectConfigSubjectArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigCaOptionsArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs;
import com.pulumi.gcp.certificateauthority.inputs.AuthorityKeySpecArgs;
import com.pulumi.gcp.certificateauthority.CaPoolIamBinding;
import com.pulumi.gcp.certificateauthority.CaPoolIamBindingArgs;
import com.pulumi.time.sleep;
import com.pulumi.time.SleepArgs;
import com.pulumi.gcp.securesourcemanager.Instance;
import com.pulumi.gcp.securesourcemanager.InstanceArgs;
import com.pulumi.gcp.securesourcemanager.inputs.InstancePrivateConfigArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.compute.Address;
import com.pulumi.gcp.compute.AddressArgs;
import com.pulumi.gcp.compute.ForwardingRule;
import com.pulumi.gcp.compute.ForwardingRuleArgs;
import com.pulumi.gcp.dns.ManagedZone;
import com.pulumi.gcp.dns.ManagedZoneArgs;
import com.pulumi.gcp.dns.inputs.ManagedZonePrivateVisibilityConfigArgs;
import com.pulumi.gcp.dns.RecordSet;
import com.pulumi.gcp.dns.RecordSetArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var caPool = new CaPool("caPool", CaPoolArgs.builder()
            .name("ca-pool")
            .location("us-central1")
            .tier("ENTERPRISE")
            .publishingOptions(CaPoolPublishingOptionsArgs.builder()
                .publishCaCert(true)
                .publishCrl(true)
                .build())
            .build());

        var rootCa = new Authority("rootCa", AuthorityArgs.builder()
            .pool(caPool.name())
            .certificateAuthorityId("root-ca")
            .location("us-central1")
            .config(AuthorityConfigArgs.builder()
                .subjectConfig(AuthorityConfigSubjectConfigArgs.builder()
                    .subject(AuthorityConfigSubjectConfigSubjectArgs.builder()
                        .organization("google")
                        .commonName("my-certificate-authority")
                        .build())
                    .build())
                .x509Config(AuthorityConfigX509ConfigArgs.builder()
                    .caOptions(AuthorityConfigX509ConfigCaOptionsArgs.builder()
                        .isCa(true)
                        .build())
                    .keyUsage(AuthorityConfigX509ConfigKeyUsageArgs.builder()
                        .baseKeyUsage(AuthorityConfigX509ConfigKeyUsageBaseKeyUsageArgs.builder()
                            .certSign(true)
                            .crlSign(true)
                            .build())
                        .extendedKeyUsage(AuthorityConfigX509ConfigKeyUsageExtendedKeyUsageArgs.builder()
                            .serverAuth(true)
                            .build())
                        .build())
                    .build())
                .build())
            .keySpec(AuthorityKeySpecArgs.builder()
                .algorithm("RSA_PKCS1_4096_SHA256")
                .build())
            .deletionProtection(false)
            .ignoreActiveCertificatesOnDeletion(true)
            .skipGracePeriod(true)
            .build());

        var caPoolBinding = new CaPoolIamBinding("caPoolBinding", CaPoolIamBindingArgs.builder()
            .caPool(caPool.id())
            .role("roles/privateca.certificateRequester")
            .members(String.format("serviceAccount:service-%s@gcp-sa-sourcemanager.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        // ca pool IAM permissions can take time to propagate
        var wait120Seconds = new Sleep("wait120Seconds", SleepArgs.builder()
            .createDuration("120s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(caPoolBinding)
                .build());

        // See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
        var default_ = new Instance("default", InstanceArgs.builder()
            .instanceId("my-instance")
            .location("us-central1")
            .privateConfig(InstancePrivateConfigArgs.builder()
                .isPrivate(true)
                .caPool(caPool.id())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    rootCa,
                    wait120Seconds)
                .build());

        // Connect SSM private instance with endpoint.
        var network = new Network("network", NetworkArgs.builder()
            .name("my-network")
            .autoCreateSubnetworks(false)
            .build());

        var subnet = new Subnetwork("subnet", SubnetworkArgs.builder()
            .name("my-subnet")
            .region("us-central1")
            .network(network.id())
            .ipCidrRange("10.0.60.0/24")
            .privateIpGoogleAccess(true)
            .build());

        var address = new Address("address", AddressArgs.builder()
            .name("my-address")
            .region("us-central1")
            .address("10.0.60.100")
            .addressType("INTERNAL")
            .subnetwork(subnet.id())
            .build());

        var fwRuleServiceAttachment = new ForwardingRule("fwRuleServiceAttachment", ForwardingRuleArgs.builder()
            .name("fw-rule-service-attachment")
            .region("us-central1")
            .loadBalancingScheme("")
            .ipAddress(address.id())
            .network(network.id())
            .target(default_.privateConfig().applyValue(privateConfig -> privateConfig.httpServiceAttachment()))
            .build());

        var privateZone = new ManagedZone("privateZone", ManagedZoneArgs.builder()
            .name("my-dns-zone")
            .dnsName("p.sourcemanager.dev.")
            .visibility("private")
            .privateVisibilityConfig(ManagedZonePrivateVisibilityConfigArgs.builder()
                .networks(ManagedZonePrivateVisibilityConfigNetworkArgs.builder()
                    .networkUrl(network.id())
                    .build())
                .build())
            .build());

        var ssmInstanceHtmlRecord = new RecordSet("ssmInstanceHtmlRecord", RecordSetArgs.builder()
            .name(default_.hostConfigs().applyValue(hostConfigs -> String.format("%s.", hostConfigs[0].html())))
            .type("A")
            .ttl(300)
            .managedZone(privateZone.name())
            .rrdatas(fwRuleServiceAttachment.ipAddress())
            .build());

        var ssmInstanceApiRecord = new RecordSet("ssmInstanceApiRecord", RecordSetArgs.builder()
            .name(default_.hostConfigs().applyValue(hostConfigs -> String.format("%s.", hostConfigs[0].api())))
            .type("A")
            .ttl(300)
            .managedZone(privateZone.name())
            .rrdatas(fwRuleServiceAttachment.ipAddress())
            .build());

        var ssmInstanceGitRecord = new RecordSet("ssmInstanceGitRecord", RecordSetArgs.builder()
            .name(default_.hostConfigs().applyValue(hostConfigs -> String.format("%s.", hostConfigs[0].gitHttp())))
            .type("A")
            .ttl(300)
            .managedZone(privateZone.name())
            .rrdatas(fwRuleServiceAttachment.ipAddress())
            .build());

    }
}
```
```yaml
resources:
  caPool:
    type: gcp:certificateauthority:CaPool
    name: ca_pool
    properties:
      name: ca-pool
      location: us-central1
      tier: ENTERPRISE
      publishingOptions:
        publishCaCert: true
        publishCrl: true
  rootCa:
    type: gcp:certificateauthority:Authority
    name: root_ca
    properties:
      pool: ${caPool.name}
      certificateAuthorityId: root-ca
      location: us-central1
      config:
        subjectConfig:
          subject:
            organization: google
            commonName: my-certificate-authority
        x509Config:
          caOptions:
            isCa: true
          keyUsage:
            baseKeyUsage:
              certSign: true
              crlSign: true
            extendedKeyUsage:
              serverAuth: true
      keySpec:
        algorithm: RSA_PKCS1_4096_SHA256
      deletionProtection: false
      ignoreActiveCertificatesOnDeletion: true
      skipGracePeriod: true
  caPoolBinding:
    type: gcp:certificateauthority:CaPoolIamBinding
    name: ca_pool_binding
    properties:
      caPool: ${caPool.id}
      role: roles/privateca.certificateRequester
      members:
        - serviceAccount:service-${project.number}@gcp-sa-sourcemanager.iam.gserviceaccount.com
  # See https://cloud.google.com/secure-source-manager/docs/create-private-service-connect-instance#root-ca-api
  default:
    type: gcp:securesourcemanager:Instance
    properties:
      instanceId: my-instance
      location: us-central1
      privateConfig:
        isPrivate: true
        caPool: ${caPool.id}
    options:
      dependsOn:
        - ${rootCa}
        - ${wait120Seconds}
  # ca pool IAM permissions can take time to propagate
  wait120Seconds:
    type: time:sleep
    name: wait_120_seconds
    properties:
      createDuration: 120s
    options:
      dependsOn:
        - ${caPoolBinding}
  # Connect SSM private instance with endpoint.
  network:
    type: gcp:compute:Network
    properties:
      name: my-network
      autoCreateSubnetworks: false
  subnet:
    type: gcp:compute:Subnetwork
    properties:
      name: my-subnet
      region: us-central1
      network: ${network.id}
      ipCidrRange: 10.0.60.0/24
      privateIpGoogleAccess: true
  address:
    type: gcp:compute:Address
    properties:
      name: my-address
      region: us-central1
      address: 10.0.60.100
      addressType: INTERNAL
      subnetwork: ${subnet.id}
  fwRuleServiceAttachment:
    type: gcp:compute:ForwardingRule
    name: fw_rule_service_attachment
    properties:
      name: fw-rule-service-attachment
      region: us-central1
      loadBalancingScheme: ""
      ipAddress: ${address.id}
      network: ${network.id}
      target: ${default.privateConfig.httpServiceAttachment}
  privateZone:
    type: gcp:dns:ManagedZone
    name: private_zone
    properties:
      name: my-dns-zone
      dnsName: p.sourcemanager.dev.
      visibility: private
      privateVisibilityConfig:
        networks:
          - networkUrl: ${network.id}
  ssmInstanceHtmlRecord:
    type: gcp:dns:RecordSet
    name: ssm_instance_html_record
    properties:
      name: ${default.hostConfigs[0].html}.
      type: A
      ttl: 300
      managedZone: ${privateZone.name}
      rrdatas:
        - ${fwRuleServiceAttachment.ipAddress}
  ssmInstanceApiRecord:
    type: gcp:dns:RecordSet
    name: ssm_instance_api_record
    properties:
      name: ${default.hostConfigs[0].api}.
      type: A
      ttl: 300
      managedZone: ${privateZone.name}
      rrdatas:
        - ${fwRuleServiceAttachment.ipAddress}
  ssmInstanceGitRecord:
    type: gcp:dns:RecordSet
    name: ssm_instance_git_record
    properties:
      name: ${default.hostConfigs[0].gitHttp}.
      type: A
      ttl: 300
      managedZone: ${privateZone.name}
      rrdatas:
        - ${fwRuleServiceAttachment.ipAddress}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Secure Source Manager Instance Workforce Identity Federation


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.securesourcemanager.Instance("default", {
    location: "us-central1",
    instanceId: "my-instance",
    workforceIdentityFederationConfig: {
        enabled: true,
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.securesourcemanager.Instance("default",
    location="us-central1",
    instance_id="my-instance",
    workforce_identity_federation_config={
        "enabled": True,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.SecureSourceManager.Instance("default", new()
    {
        Location = "us-central1",
        InstanceId = "my-instance",
        WorkforceIdentityFederationConfig = new Gcp.SecureSourceManager.Inputs.InstanceWorkforceIdentityFederationConfigArgs
        {
            Enabled = true,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewInstance(ctx, "default", &securesourcemanager.InstanceArgs{
			Location:   pulumi.String("us-central1"),
			InstanceId: pulumi.String("my-instance"),
			WorkforceIdentityFederationConfig: &securesourcemanager.InstanceWorkforceIdentityFederationConfigArgs{
				Enabled: pulumi.Bool(true),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.Instance;
import com.pulumi.gcp.securesourcemanager.InstanceArgs;
import com.pulumi.gcp.securesourcemanager.inputs.InstanceWorkforceIdentityFederationConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Instance("default", InstanceArgs.builder()
            .location("us-central1")
            .instanceId("my-instance")
            .workforceIdentityFederationConfig(InstanceWorkforceIdentityFederationConfigArgs.builder()
                .enabled(true)
                .build())
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:securesourcemanager:Instance
    properties:
      location: us-central1
      instanceId: my-instance
      workforceIdentityFederationConfig:
        enabled: true
```
<!--End PulumiCodeChooser -->

## Import

Instance can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/instances/{{instance_id}}`

* `{{project}}/{{location}}/{{instance_id}}`

* `{{location}}/{{instance_id}}`

* `{{instance_id}}`

When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securesourcemanager/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{instance_id}}
```

```sh
$ pulumi import gcp:securesourcemanager/instance:Instance default {{project}}/{{location}}/{{instance_id}}
```

```sh
$ pulumi import gcp:securesourcemanager/instance:Instance default {{location}}/{{instance_id}}
```

```sh
$ pulumi import gcp:securesourcemanager/instance:Instance default {{instance_id}}
```

5

instanceId" #The name for the Instance.


- - -
t
kmsKeyB" dCustomer-managed encryption key name, in the format projects/*/locations/*/keyRings/*/cryptoKeys/*.
ш
labelsB2" РLabels as key value pairs.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
/
location" The location for the Instance.
л
privateConfigwBu:s
q
securesourcemanagerInstancePrivateConfigCgcp:securesourcemanager/InstancePrivateConfig:InstancePrivateConfigFPrivate settings for private instance.
Structure is documented below.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
Ѓ
!workforceIdentityFederationConfigХB│:░
Г
securesourcemanager)InstanceWorkforceIdentityFederationConfigkgcp:securesourcemanager/InstanceWorkforceIdentityFederationConfig:InstanceWorkforceIdentityFederationConfigцConfiguration for Workforce Identity Federation to support third party identity provider.
If unset, defaults to the Google OIDC IdP.
Structure is documented below.
"8

createTime" &Time the Instance was created in UTC.
"д
effectiveLabels2" їAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"┼
hostConfigsn*l:j
h
securesourcemanagerInstanceHostConfig=gcp:securesourcemanager/InstanceHostConfig:InstanceHostConfigFA list of hostnames for this instance.
Structure is documented below.
"5

instanceId" #The name for the Instance.


- - -
"t
kmsKeyB" dCustomer-managed encryption key name, in the format projects/*/locations/*/keyRings/*/cryptoKeys/*.
"ш
labelsB2" РLabels as key value pairs.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"/
location" The location for the Instance.
"0
name" $The resource name for the Instance.
"л
privateConfigwBu:s
q
securesourcemanagerInstancePrivateConfigCgcp:securesourcemanager/InstancePrivateConfig:InstancePrivateConfigFPrivate settings for private instance.
Structure is documented below.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Ѓ
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"0
state" #The current state of the Instance.
"H
	stateNote" 7Provides information about the current instance state.
"8

updateTime" &Time the Instance was updated in UTC.
"Ѓ
!workforceIdentityFederationConfigХB│:░
Г
securesourcemanager)InstanceWorkforceIdentityFederationConfigkgcp:securesourcemanager/InstanceWorkforceIdentityFederationConfig:InstanceWorkforceIdentityFederationConfigцConfiguration for Workforce Identity Federation to support third party identity provider.
If unset, defaults to the Google OIDC IdP.
Structure is documented below.
*л
h
securesourcemanagerInstanceIamBinding=gcp:securesourcemanager/instanceIamBinding:InstanceIamBindingџ
	conditionїBЅ:є
Ѓ
securesourcemanagerInstanceIamBindingConditionOgcp:securesourcemanager/InstanceIamBindingCondition:InstanceIamBindingCondition

instanceId" 
locationB" 
members*" 
projectB" 

role" "џ
	conditionїBЅ:є
Ѓ
securesourcemanagerInstanceIamBindingConditionOgcp:securesourcemanager/InstanceIamBindingCondition:InstanceIamBindingCondition"

etag" "

instanceId" "
location" "
members*" "
project" "

role" *┴
e
securesourcemanagerInstanceIamMember;gcp:securesourcemanager/instanceIamMember:InstanceIamMemberЌ
	conditionЅBє:Ѓ
ђ
securesourcemanagerInstanceIamMemberConditionMgcp:securesourcemanager/InstanceIamMemberCondition:InstanceIamMemberCondition

instanceId" 
locationB" 
member" 
projectB" 

role" "Ќ
	conditionЅBє:Ѓ
ђ
securesourcemanagerInstanceIamMemberConditionMgcp:securesourcemanager/InstanceIamMemberCondition:InstanceIamMemberCondition"

etag" "

instanceId" "
location" "
member" "
project" "

role" *§
e
securesourcemanagerInstanceIamPolicy;gcp:securesourcemanager/instanceIamPolicy:InstanceIamPolicy

instanceId" 
locationB" 

policyData" 
projectB" "

etag" "

instanceId" "
location" "

policyData" "
project" *▄X
P
securesourcemanager
Repository-gcp:securesourcemanager/repository:RepositoryФKRepositories store source code. It supports all Git SCM client commands and has built-in pull requests and issue tracking. Both HTTPS and SSH authentication are supported.


To get more information about Repository, see:
* How-to Guides
    * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)

## Example Usage

### Secure Source Manager Repository Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.securesourcemanager.Instance("instance", {
    location: "us-central1",
    instanceId: "my-instance",
});
const _default = new gcp.securesourcemanager.Repository("default", {
    location: "us-central1",
    repositoryId: "my-repository",
    instance: instance.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.securesourcemanager.Instance("instance",
    location="us-central1",
    instance_id="my-instance")
default = gcp.securesourcemanager.Repository("default",
    location="us-central1",
    repository_id="my-repository",
    instance=instance.name)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.SecureSourceManager.Instance("instance", new()
    {
        Location = "us-central1",
        InstanceId = "my-instance",
    });

    var @default = new Gcp.SecureSourceManager.Repository("default", new()
    {
        Location = "us-central1",
        RepositoryId = "my-repository",
        Instance = instance.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		instance, err := securesourcemanager.NewInstance(ctx, "instance", &securesourcemanager.InstanceArgs{
			Location:   pulumi.String("us-central1"),
			InstanceId: pulumi.String("my-instance"),
		})
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewRepository(ctx, "default", &securesourcemanager.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("my-repository"),
			Instance:     instance.Name,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.Instance;
import com.pulumi.gcp.securesourcemanager.InstanceArgs;
import com.pulumi.gcp.securesourcemanager.Repository;
import com.pulumi.gcp.securesourcemanager.RepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new Instance("instance", InstanceArgs.builder()
            .location("us-central1")
            .instanceId("my-instance")
            .build());

        var default_ = new Repository("default", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("my-repository")
            .instance(instance.name())
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:securesourcemanager:Instance
    properties:
      location: us-central1
      instanceId: my-instance
  default:
    type: gcp:securesourcemanager:Repository
    properties:
      location: us-central1
      repositoryId: my-repository
      instance: ${instance.name}
```
<!--End PulumiCodeChooser -->
### Secure Source Manager Repository Initial Config


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.securesourcemanager.Instance("instance", {
    location: "us-central1",
    instanceId: "my-instance",
});
const _default = new gcp.securesourcemanager.Repository("default", {
    location: "us-central1",
    repositoryId: "my-repository",
    instance: instance.name,
    description: "This is a test repository",
    initialConfig: {
        defaultBranch: "main",
        gitignores: ["python"],
        license: "mit",
        readme: "default",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.securesourcemanager.Instance("instance",
    location="us-central1",
    instance_id="my-instance")
default = gcp.securesourcemanager.Repository("default",
    location="us-central1",
    repository_id="my-repository",
    instance=instance.name,
    description="This is a test repository",
    initial_config={
        "default_branch": "main",
        "gitignores": ["python"],
        "license": "mit",
        "readme": "default",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.SecureSourceManager.Instance("instance", new()
    {
        Location = "us-central1",
        InstanceId = "my-instance",
    });

    var @default = new Gcp.SecureSourceManager.Repository("default", new()
    {
        Location = "us-central1",
        RepositoryId = "my-repository",
        Instance = instance.Name,
        Description = "This is a test repository",
        InitialConfig = new Gcp.SecureSourceManager.Inputs.RepositoryInitialConfigArgs
        {
            DefaultBranch = "main",
            Gitignores = new[]
            {
                "python",
            },
            License = "mit",
            Readme = "default",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		instance, err := securesourcemanager.NewInstance(ctx, "instance", &securesourcemanager.InstanceArgs{
			Location:   pulumi.String("us-central1"),
			InstanceId: pulumi.String("my-instance"),
		})
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewRepository(ctx, "default", &securesourcemanager.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("my-repository"),
			Instance:     instance.Name,
			Description:  pulumi.String("This is a test repository"),
			InitialConfig: &securesourcemanager.RepositoryInitialConfigArgs{
				DefaultBranch: pulumi.String("main"),
				Gitignores: pulumi.StringArray{
					pulumi.String("python"),
				},
				License: pulumi.String("mit"),
				Readme:  pulumi.String("default"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.Instance;
import com.pulumi.gcp.securesourcemanager.InstanceArgs;
import com.pulumi.gcp.securesourcemanager.Repository;
import com.pulumi.gcp.securesourcemanager.RepositoryArgs;
import com.pulumi.gcp.securesourcemanager.inputs.RepositoryInitialConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new Instance("instance", InstanceArgs.builder()
            .location("us-central1")
            .instanceId("my-instance")
            .build());

        var default_ = new Repository("default", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("my-repository")
            .instance(instance.name())
            .description("This is a test repository")
            .initialConfig(RepositoryInitialConfigArgs.builder()
                .defaultBranch("main")
                .gitignores("python")
                .license("mit")
                .readme("default")
                .build())
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:securesourcemanager:Instance
    properties:
      location: us-central1
      instanceId: my-instance
  default:
    type: gcp:securesourcemanager:Repository
    properties:
      location: us-central1
      repositoryId: my-repository
      instance: ${instance.name}
      description: This is a test repository
      initialConfig:
        defaultBranch: main
        gitignores:
          - python
        license: mit
        readme: default
```
<!--End PulumiCodeChooser -->

## Import

Repository can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}`

* `{{project}}/{{location}}/{{repository_id}}`

* `{{location}}/{{repository_id}}`

* `{{repository_id}}`

When using the `pulumi import` command, Repository can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securesourcemanager/repository:Repository default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
```

```sh
$ pulumi import gcp:securesourcemanager/repository:Repository default {{project}}/{{location}}/{{repository_id}}
```

```sh
$ pulumi import gcp:securesourcemanager/repository:Repository default {{location}}/{{repository_id}}
```

```sh
$ pulumi import gcp:securesourcemanager/repository:Repository default {{repository_id}}
```

X
descriptionB" CDescription of the repository, which cannot exceed 500 characters.
┌
initialConfig}B{:y
w
securesourcemanagerRepositoryInitialConfigGgcp:securesourcemanager/RepositoryInitialConfig:RepositoryInitialConfigJInitial configurations for the repository.
Structure is documented below.
L
instance" <The name of the instance in which the repository is hosted.
1
location" !The location for the Repository.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
7
repositoryId" #The ID for the Repository.


- - -
":

createTime" (Time the repository was created in UTC.
"X
descriptionB" CDescription of the repository, which cannot exceed 500 characters.
"┌
initialConfig}B{:y
w
securesourcemanagerRepositoryInitialConfigGgcp:securesourcemanager/RepositoryInitialConfig:RepositoryInitialConfigJInitial configurations for the repository.
Structure is documented below.
"L
instance" <The name of the instance in which the repository is hosted.
"1
location" !The location for the Repository.
"2
name" &The resource name for the Repository.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"7
repositoryId" #The ID for the Repository.


- - -
"0
uid" %Unique identifier of the repository.
":

updateTime" (Time the repository was updated in UTC.
"А
uris_*]:[
Y
securesourcemanagerRepositoryUri3gcp:securesourcemanager/RepositoryUri:RepositoryUri8URIs for the repository.
Structure is documented below.
*ФЗ
n
securesourcemanagerRepositoryIamBindingAgcp:securesourcemanager/repositoryIamBinding:RepositoryIamBindingе╬Three different resources help you manage your IAM policy for Secure Source Manager Repository. Each of these resources serves a different use case:

* `gcp.securesourcemanager.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.securesourcemanager.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.securesourcemanager.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securesourcemanager.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.securesourcemanager.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.securesourcemanager.RepositoryIamBinding` and `gcp.securesourcemanager.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securesourcemanager.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.securesourcemanager.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securesourcemanager.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/securesourcemanager.repoAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securesourcemanager.RepositoryIamPolicy("policy", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/securesourcemanager.repoAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securesourcemanager.RepositoryIamPolicy("policy",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/securesourcemanager.repoAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecureSourceManager.RepositoryIamPolicy("policy", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/securesourcemanager.repoAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewRepositoryIamPolicy(ctx, "policy", &securesourcemanager.RepositoryIamPolicyArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			PolicyData:   pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicy;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/securesourcemanager.repoAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securesourcemanager:RepositoryIamPolicy
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/securesourcemanager.repoAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securesourcemanager.RepositoryIamBinding("binding", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securesourcemanager.RepositoryIamBinding("binding",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecureSourceManager.RepositoryIamBinding("binding", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamBinding(ctx, "binding", &securesourcemanager.RepositoryIamBindingArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBinding;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securesourcemanager:RepositoryIamBinding
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securesourcemanager.RepositoryIamMember("member", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securesourcemanager.RepositoryIamMember("member",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecureSourceManager.RepositoryIamMember("member", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamMember(ctx, "member", &securesourcemanager.RepositoryIamMemberArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Member:       pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMember;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securesourcemanager:RepositoryIamMember
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for Secure Source Manager Repository
Three different resources help you manage your IAM policy for Secure Source Manager Repository. Each of these resources serves a different use case:

* `gcp.securesourcemanager.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.securesourcemanager.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.securesourcemanager.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securesourcemanager.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.securesourcemanager.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.securesourcemanager.RepositoryIamBinding` and `gcp.securesourcemanager.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securesourcemanager.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.securesourcemanager.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securesourcemanager.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/securesourcemanager.repoAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securesourcemanager.RepositoryIamPolicy("policy", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/securesourcemanager.repoAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securesourcemanager.RepositoryIamPolicy("policy",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/securesourcemanager.repoAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecureSourceManager.RepositoryIamPolicy("policy", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/securesourcemanager.repoAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewRepositoryIamPolicy(ctx, "policy", &securesourcemanager.RepositoryIamPolicyArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			PolicyData:   pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicy;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/securesourcemanager.repoAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securesourcemanager:RepositoryIamPolicy
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/securesourcemanager.repoAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securesourcemanager.RepositoryIamBinding("binding", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securesourcemanager.RepositoryIamBinding("binding",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecureSourceManager.RepositoryIamBinding("binding", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamBinding(ctx, "binding", &securesourcemanager.RepositoryIamBindingArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBinding;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securesourcemanager:RepositoryIamBinding
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securesourcemanager.RepositoryIamMember("member", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securesourcemanager.RepositoryIamMember("member",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecureSourceManager.RepositoryIamMember("member", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamMember(ctx, "member", &securesourcemanager.RepositoryIamMemberArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Member:       pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMember;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securesourcemanager:RepositoryIamMember
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}

* {{project}}/{{location}}/{{repository_id}}

* {{location}}/{{repository_id}}

* {{repository_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Secure Source Manager repository IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:securesourcemanager/repositoryIamBinding:RepositoryIamBinding editor "projects/{{project}}/locations/{{location}}/repositories/{{repository_id}} roles/securesourcemanager.repoAdmin user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:securesourcemanager/repositoryIamBinding:RepositoryIamBinding editor "projects/{{project}}/locations/{{location}}/repositories/{{repository_id}} roles/securesourcemanager.repoAdmin"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:securesourcemanager/repositoryIamBinding:RepositoryIamBinding editor projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

а
	conditionњBЈ:ї
Ѕ
securesourcemanagerRepositoryIamBindingConditionSgcp:securesourcemanager/RepositoryIamBindingCondition:RepositoryIamBindingConditionк
locationB" │The location for the Repository.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
о	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
j
repositoryId" VThe ID for the Repository.
Used to find the parent resource to bind the IAM policy to
т
role" пThe role that should be applied. Only one
`gcp.securesourcemanager.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"а
	conditionњBЈ:ї
Ѕ
securesourcemanagerRepositoryIamBindingConditionSgcp:securesourcemanager/RepositoryIamBindingCondition:RepositoryIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"─
location" │The location for the Repository.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
"о	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"j
repositoryId" VThe ID for the Repository.
Used to find the parent resource to bind the IAM policy to
"т
role" пThe role that should be applied. Only one
`gcp.securesourcemanager.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*ќЗ
k
securesourcemanagerRepositoryIamMember?gcp:securesourcemanager/repositoryIamMember:RepositoryIamMemberб╬Three different resources help you manage your IAM policy for Secure Source Manager Repository. Each of these resources serves a different use case:

* `gcp.securesourcemanager.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.securesourcemanager.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.securesourcemanager.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securesourcemanager.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.securesourcemanager.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.securesourcemanager.RepositoryIamBinding` and `gcp.securesourcemanager.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securesourcemanager.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.securesourcemanager.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securesourcemanager.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/securesourcemanager.repoAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securesourcemanager.RepositoryIamPolicy("policy", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/securesourcemanager.repoAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securesourcemanager.RepositoryIamPolicy("policy",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/securesourcemanager.repoAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecureSourceManager.RepositoryIamPolicy("policy", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/securesourcemanager.repoAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewRepositoryIamPolicy(ctx, "policy", &securesourcemanager.RepositoryIamPolicyArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			PolicyData:   pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicy;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/securesourcemanager.repoAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securesourcemanager:RepositoryIamPolicy
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/securesourcemanager.repoAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securesourcemanager.RepositoryIamBinding("binding", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securesourcemanager.RepositoryIamBinding("binding",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecureSourceManager.RepositoryIamBinding("binding", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamBinding(ctx, "binding", &securesourcemanager.RepositoryIamBindingArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBinding;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securesourcemanager:RepositoryIamBinding
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securesourcemanager.RepositoryIamMember("member", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securesourcemanager.RepositoryIamMember("member",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecureSourceManager.RepositoryIamMember("member", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamMember(ctx, "member", &securesourcemanager.RepositoryIamMemberArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Member:       pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMember;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securesourcemanager:RepositoryIamMember
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for Secure Source Manager Repository
Three different resources help you manage your IAM policy for Secure Source Manager Repository. Each of these resources serves a different use case:

* `gcp.securesourcemanager.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.securesourcemanager.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.securesourcemanager.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securesourcemanager.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.securesourcemanager.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.securesourcemanager.RepositoryIamBinding` and `gcp.securesourcemanager.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securesourcemanager.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.securesourcemanager.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securesourcemanager.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/securesourcemanager.repoAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securesourcemanager.RepositoryIamPolicy("policy", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/securesourcemanager.repoAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securesourcemanager.RepositoryIamPolicy("policy",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/securesourcemanager.repoAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecureSourceManager.RepositoryIamPolicy("policy", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/securesourcemanager.repoAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewRepositoryIamPolicy(ctx, "policy", &securesourcemanager.RepositoryIamPolicyArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			PolicyData:   pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicy;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/securesourcemanager.repoAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securesourcemanager:RepositoryIamPolicy
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/securesourcemanager.repoAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securesourcemanager.RepositoryIamBinding("binding", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securesourcemanager.RepositoryIamBinding("binding",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecureSourceManager.RepositoryIamBinding("binding", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamBinding(ctx, "binding", &securesourcemanager.RepositoryIamBindingArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBinding;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securesourcemanager:RepositoryIamBinding
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securesourcemanager.RepositoryIamMember("member", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securesourcemanager.RepositoryIamMember("member",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecureSourceManager.RepositoryIamMember("member", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamMember(ctx, "member", &securesourcemanager.RepositoryIamMemberArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Member:       pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMember;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securesourcemanager:RepositoryIamMember
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}

* {{project}}/{{location}}/{{repository_id}}

* {{location}}/{{repository_id}}

* {{repository_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Secure Source Manager repository IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:securesourcemanager/repositoryIamMember:RepositoryIamMember editor "projects/{{project}}/locations/{{location}}/repositories/{{repository_id}} roles/securesourcemanager.repoAdmin user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:securesourcemanager/repositoryIamMember:RepositoryIamMember editor "projects/{{project}}/locations/{{location}}/repositories/{{repository_id}} roles/securesourcemanager.repoAdmin"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:securesourcemanager/repositoryIamMember:RepositoryIamMember editor projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

Ю
	conditionЈBї:Ѕ
є
securesourcemanagerRepositoryIamMemberConditionQgcp:securesourcemanager/RepositoryIamMemberCondition:RepositoryIamMemberConditionк
locationB" │The location for the Repository.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
М	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
j
repositoryId" VThe ID for the Repository.
Used to find the parent resource to bind the IAM policy to
т
role" пThe role that should be applied. Only one
`gcp.securesourcemanager.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"Ю
	conditionЈBї:Ѕ
є
securesourcemanagerRepositoryIamMemberConditionQgcp:securesourcemanager/RepositoryIamMemberCondition:RepositoryIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"─
location" │The location for the Repository.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
"М	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"j
repositoryId" VThe ID for the Repository.
Used to find the parent resource to bind the IAM policy to
"т
role" пThe role that should be applied. Only one
`gcp.securesourcemanager.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*ю▄
k
securesourcemanagerRepositoryIamPolicy?gcp:securesourcemanager/repositoryIamPolicy:RepositoryIamPolicyб╬Three different resources help you manage your IAM policy for Secure Source Manager Repository. Each of these resources serves a different use case:

* `gcp.securesourcemanager.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.securesourcemanager.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.securesourcemanager.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securesourcemanager.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.securesourcemanager.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.securesourcemanager.RepositoryIamBinding` and `gcp.securesourcemanager.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securesourcemanager.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.securesourcemanager.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securesourcemanager.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/securesourcemanager.repoAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securesourcemanager.RepositoryIamPolicy("policy", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/securesourcemanager.repoAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securesourcemanager.RepositoryIamPolicy("policy",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/securesourcemanager.repoAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecureSourceManager.RepositoryIamPolicy("policy", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/securesourcemanager.repoAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewRepositoryIamPolicy(ctx, "policy", &securesourcemanager.RepositoryIamPolicyArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			PolicyData:   pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicy;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/securesourcemanager.repoAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securesourcemanager:RepositoryIamPolicy
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/securesourcemanager.repoAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securesourcemanager.RepositoryIamBinding("binding", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securesourcemanager.RepositoryIamBinding("binding",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecureSourceManager.RepositoryIamBinding("binding", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamBinding(ctx, "binding", &securesourcemanager.RepositoryIamBindingArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBinding;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securesourcemanager:RepositoryIamBinding
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securesourcemanager.RepositoryIamMember("member", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securesourcemanager.RepositoryIamMember("member",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecureSourceManager.RepositoryIamMember("member", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamMember(ctx, "member", &securesourcemanager.RepositoryIamMemberArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Member:       pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMember;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securesourcemanager:RepositoryIamMember
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for Secure Source Manager Repository
Three different resources help you manage your IAM policy for Secure Source Manager Repository. Each of these resources serves a different use case:

* `gcp.securesourcemanager.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.securesourcemanager.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.securesourcemanager.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securesourcemanager.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.securesourcemanager.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.securesourcemanager.RepositoryIamBinding` and `gcp.securesourcemanager.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securesourcemanager.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.securesourcemanager.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securesourcemanager.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/securesourcemanager.repoAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securesourcemanager.RepositoryIamPolicy("policy", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/securesourcemanager.repoAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securesourcemanager.RepositoryIamPolicy("policy",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/securesourcemanager.repoAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecureSourceManager.RepositoryIamPolicy("policy", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/securesourcemanager.repoAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securesourcemanager.NewRepositoryIamPolicy(ctx, "policy", &securesourcemanager.RepositoryIamPolicyArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			PolicyData:   pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicy;
import com.pulumi.gcp.securesourcemanager.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/securesourcemanager.repoAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securesourcemanager:RepositoryIamPolicy
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/securesourcemanager.repoAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securesourcemanager.RepositoryIamBinding("binding", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securesourcemanager.RepositoryIamBinding("binding",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecureSourceManager.RepositoryIamBinding("binding", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamBinding(ctx, "binding", &securesourcemanager.RepositoryIamBindingArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBinding;
import com.pulumi.gcp.securesourcemanager.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securesourcemanager:RepositoryIamBinding
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securesourcemanager.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securesourcemanager.RepositoryIamMember("member", {
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
    role: "roles/securesourcemanager.repoAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securesourcemanager.RepositoryIamMember("member",
    project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"],
    role="roles/securesourcemanager.repoAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecureSourceManager.RepositoryIamMember("member", new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
        Role = "roles/securesourcemanager.repoAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.NewRepositoryIamMember(ctx, "member", &securesourcemanager.RepositoryIamMemberArgs{
			Project:      pulumi.Any(_default.Project),
			Location:     pulumi.Any(_default.Location),
			RepositoryId: pulumi.Any(_default.RepositoryId),
			Role:         pulumi.String("roles/securesourcemanager.repoAdmin"),
			Member:       pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMember;
import com.pulumi.gcp.securesourcemanager.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .role("roles/securesourcemanager.repoAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securesourcemanager:RepositoryIamMember
    properties:
      project: ${default.project}
      location: ${default.location}
      repositoryId: ${default.repositoryId}
      role: roles/securesourcemanager.repoAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}

* {{project}}/{{location}}/{{repository_id}}

* {{location}}/{{repository_id}}

* {{repository_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Secure Source Manager repository IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:securesourcemanager/repositoryIamPolicy:RepositoryIamPolicy editor "projects/{{project}}/locations/{{location}}/repositories/{{repository_id}} roles/securesourcemanager.repoAdmin user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:securesourcemanager/repositoryIamPolicy:RepositoryIamPolicy editor "projects/{{project}}/locations/{{location}}/repositories/{{repository_id}} roles/securesourcemanager.repoAdmin"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:securesourcemanager/repositoryIamPolicy:RepositoryIamPolicy editor projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

к
locationB" │The location for the Repository.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
j
repositoryId" VThe ID for the Repository.
Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"─
location" │The location for the Repository.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"Љ
project" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"j
repositoryId" VThe ID for the Repository.
Used to find the parent resource to bind the IAM policy to
*и
ѕ
securitycenter EventThreatDetectionCustomModuleTgcp:securitycenter/eventThreatDetectionCustomModule:EventThreatDetectionCustomModuleПRepresents an instance of an Event Threat Detection custom module, including
its full module name, display name, enablement state, andlast updated time.
You can create a custom module at the organization level only.


To get more information about EventThreatDetectionCustomModule, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.eventThreatDetectionSettings.customModules)
* How-to Guides
    * [Overview of custom modules for Event Threat Detection](https://cloud.google.com/security-command-center/docs/custom-modules-etd-overview)

## Example Usage

### Scc Event Threat Detection Custom Module


<!--Start PulumiCodeChooser -->
```yaml
resources:
  example:
    type: gcp:securitycenter:EventThreatDetectionCustomModule
    properties:
      organization: '123456789'
      displayName: basic_custom_module
      enablementState: ENABLED
      type: CONFIGURABLE_BAD_IP
      description: My Event Threat Detection Custom Module
      config:
        fn::toJSON:
          metadata:
            severity: LOW
            description: Flagged by Forcepoint as malicious
            recommendation: Contact the owner of the relevant project.
          ips:
            - 192.0.2.1
            - 192.0.2.0/24
```
<!--End PulumiCodeChooser -->

## Import

EventThreatDetectionCustomModule can be imported using any of these accepted formats:

* `organizations/{{organization}}/eventThreatDetectionSettings/customModules/{{name}}`

* `{{organization}}/{{name}}`

When using the `pulumi import` command, EventThreatDetectionCustomModule can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/eventThreatDetectionCustomModule:EventThreatDetectionCustomModule default organizations/{{organization}}/eventThreatDetectionSettings/customModules/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/eventThreatDetectionCustomModule:EventThreatDetectionCustomModule default {{organization}}/{{name}}
```

╝
config" ГConfig for the module. For the resident module, its config value is defined at this level.
For the inherited module, its config value is inherited from the ancestor module.
M
displayNameB" 8The human readable name to be displayed for the module.
Ј
enablementState" xThe state of enablement for the module at the given level of the hierarchy.
Possible values are: `ENABLED`, `DISABLED`.
E
organization" 1Numerical ID of the parent organization.


- - -
F
type" :Immutable. Type for the module. e.g. CONFIGURABLE_BAD_IP.
"╝
config" ГConfig for the module. For the resident module, its config value is defined at this level.
For the inherited module, its config value is inherited from the ancestor module.
"M
displayNameB" 8The human readable name to be displayed for the module.
"Ј
enablementState" xThe state of enablement for the module at the given level of the hierarchy.
Possible values are: `ENABLED`, `DISABLED`.
"A

lastEditor" /The editor that last updated the custom module
"«
name" АThe resource name of the Event Threat Detection custom module.
Its format is "organizations/{organization}/eventThreatDetectionSettings/customModules/{module}".
"E
organization" 1Numerical ID of the parent organization.


- - -
"F
type" :Immutable. Type for the module. e.g. CONFIGURABLE_BAD_IP.
"э

updateTime" СThe time at which the custom module was last updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*б│
^
securitycenterFolderCustomModule8gcp:securitycenter/folderCustomModule:FolderCustomModuleњаRepresents an instance of a Security Health Analytics custom module, including
its full module name, display name, enablement state, and last updated time.
You can create a custom module at the organization, folder, or project level.
Custom modules that you create at the organization or folder level are inherited
by the child folders and projects.


To get more information about FolderCustomModule, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/folders.securityHealthAnalyticsSettings.customModules)
* How-to Guides
    * [Overview of custom modules for Security Health Analytics](https://cloud.google.com/security-command-center/docs/custom-modules-sha-overview)

## Example Usage

### Scc Folder Custom Module Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const folder = new gcp.organizations.Folder("folder", {
    parent: "organizations/123456789",
    displayName: "folder-name",
    deletionProtection: false,
});
const example = new gcp.securitycenter.FolderCustomModule("example", {
    folder: folder.folderId,
    displayName: "basic_custom_module",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        description: "The rotation period of the identified cryptokey resource exceeds 30 days.",
        recommendation: "Set the rotation period to at most 30 days.",
        severity: "MEDIUM",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

folder = gcp.organizations.Folder("folder",
    parent="organizations/123456789",
    display_name="folder-name",
    deletion_protection=False)
example = gcp.securitycenter.FolderCustomModule("example",
    folder=folder.folder_id,
    display_name="basic_custom_module",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "description": "The rotation period of the identified cryptokey resource exceeds 30 days.",
        "recommendation": "Set the rotation period to at most 30 days.",
        "severity": "MEDIUM",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var folder = new Gcp.Organizations.Folder("folder", new()
    {
        Parent = "organizations/123456789",
        DisplayName = "folder-name",
        DeletionProtection = false,
    });

    var example = new Gcp.SecurityCenter.FolderCustomModule("example", new()
    {
        Folder = folder.FolderId,
        DisplayName = "basic_custom_module",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.FolderCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.FolderCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.FolderCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Description = "The rotation period of the identified cryptokey resource exceeds 30 days.",
            Recommendation = "Set the rotation period to at most 30 days.",
            Severity = "MEDIUM",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		folder, err := organizations.NewFolder(ctx, "folder", &organizations.FolderArgs{
			Parent:             pulumi.String("organizations/123456789"),
			DisplayName:        pulumi.String("folder-name"),
			DeletionProtection: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewFolderCustomModule(ctx, "example", &securitycenter.FolderCustomModuleArgs{
			Folder:          folder.FolderId,
			DisplayName:     pulumi.String("basic_custom_module"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.FolderCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.FolderCustomModuleCustomConfigPredicateArgs{
					Expression: pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
				},
				ResourceSelector: &securitycenter.FolderCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Description:    pulumi.String("The rotation period of the identified cryptokey resource exceeds 30 days."),
				Recommendation: pulumi.String("Set the rotation period to at most 30 days."),
				Severity:       pulumi.String("MEDIUM"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Folder;
import com.pulumi.gcp.organizations.FolderArgs;
import com.pulumi.gcp.securitycenter.FolderCustomModule;
import com.pulumi.gcp.securitycenter.FolderCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.FolderCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.FolderCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.FolderCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var folder = new Folder("folder", FolderArgs.builder()
            .parent("organizations/123456789")
            .displayName("folder-name")
            .deletionProtection(false)
            .build());

        var example = new FolderCustomModule("example", FolderCustomModuleArgs.builder()
            .folder(folder.folderId())
            .displayName("basic_custom_module")
            .enablementState("ENABLED")
            .customConfig(FolderCustomModuleCustomConfigArgs.builder()
                .predicate(FolderCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .build())
                .resourceSelector(FolderCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .description("The rotation period of the identified cryptokey resource exceeds 30 days.")
                .recommendation("Set the rotation period to at most 30 days.")
                .severity("MEDIUM")
                .build())
            .build());

    }
}
```
```yaml
resources:
  folder:
    type: gcp:organizations:Folder
    properties:
      parent: organizations/123456789
      displayName: folder-name
      deletionProtection: false
  example:
    type: gcp:securitycenter:FolderCustomModule
    properties:
      folder: ${folder.folderId}
      displayName: basic_custom_module
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        description: The rotation period of the identified cryptokey resource exceeds 30 days.
        recommendation: Set the rotation period to at most 30 days.
        severity: MEDIUM
```
<!--End PulumiCodeChooser -->
### Scc Folder Custom Module Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const folder = new gcp.organizations.Folder("folder", {
    parent: "organizations/123456789",
    displayName: "folder-name",
    deletionProtection: false,
});
const example = new gcp.securitycenter.FolderCustomModule("example", {
    folder: folder.folderId,
    displayName: "full_custom_module",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
            title: "Purpose of the expression",
            description: "description of the expression",
            location: "location of the expression",
        },
        customOutput: {
            properties: [{
                name: "duration",
                valueExpression: {
                    expression: "resource.rotationPeriod",
                    title: "Purpose of the expression",
                    description: "description of the expression",
                    location: "location of the expression",
                },
            }],
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        severity: "LOW",
        description: "Description of the custom module",
        recommendation: "Steps to resolve violation",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

folder = gcp.organizations.Folder("folder",
    parent="organizations/123456789",
    display_name="folder-name",
    deletion_protection=False)
example = gcp.securitycenter.FolderCustomModule("example",
    folder=folder.folder_id,
    display_name="full_custom_module",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
            "title": "Purpose of the expression",
            "description": "description of the expression",
            "location": "location of the expression",
        },
        "custom_output": {
            "properties": [{
                "name": "duration",
                "value_expression": {
                    "expression": "resource.rotationPeriod",
                    "title": "Purpose of the expression",
                    "description": "description of the expression",
                    "location": "location of the expression",
                },
            }],
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "severity": "LOW",
        "description": "Description of the custom module",
        "recommendation": "Steps to resolve violation",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var folder = new Gcp.Organizations.Folder("folder", new()
    {
        Parent = "organizations/123456789",
        DisplayName = "folder-name",
        DeletionProtection = false,
    });

    var example = new Gcp.SecurityCenter.FolderCustomModule("example", new()
    {
        Folder = folder.FolderId,
        DisplayName = "full_custom_module",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.FolderCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.FolderCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
                Title = "Purpose of the expression",
                Description = "description of the expression",
                Location = "location of the expression",
            },
            CustomOutput = new Gcp.SecurityCenter.Inputs.FolderCustomModuleCustomConfigCustomOutputArgs
            {
                Properties = new[]
                {
                    new Gcp.SecurityCenter.Inputs.FolderCustomModuleCustomConfigCustomOutputPropertyArgs
                    {
                        Name = "duration",
                        ValueExpression = new Gcp.SecurityCenter.Inputs.FolderCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs
                        {
                            Expression = "resource.rotationPeriod",
                            Title = "Purpose of the expression",
                            Description = "description of the expression",
                            Location = "location of the expression",
                        },
                    },
                },
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.FolderCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Severity = "LOW",
            Description = "Description of the custom module",
            Recommendation = "Steps to resolve violation",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		folder, err := organizations.NewFolder(ctx, "folder", &organizations.FolderArgs{
			Parent:             pulumi.String("organizations/123456789"),
			DisplayName:        pulumi.String("folder-name"),
			DeletionProtection: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewFolderCustomModule(ctx, "example", &securitycenter.FolderCustomModuleArgs{
			Folder:          folder.FolderId,
			DisplayName:     pulumi.String("full_custom_module"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.FolderCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.FolderCustomModuleCustomConfigPredicateArgs{
					Expression:  pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
					Title:       pulumi.String("Purpose of the expression"),
					Description: pulumi.String("description of the expression"),
					Location:    pulumi.String("location of the expression"),
				},
				CustomOutput: securitycenter.FolderCustomModuleCustomConfigCustomOutputArgs{
					Properties: securitycenter.FolderCustomModuleCustomConfigCustomOutputPropertyArray{
						&securitycenter.FolderCustomModuleCustomConfigCustomOutputPropertyArgs{
							Name: pulumi.String("duration"),
							ValueExpression: &securitycenter.FolderCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs{
								Expression:  pulumi.String("resource.rotationPeriod"),
								Title:       pulumi.String("Purpose of the expression"),
								Description: pulumi.String("description of the expression"),
								Location:    pulumi.String("location of the expression"),
							},
						},
					},
				},
				ResourceSelector: &securitycenter.FolderCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Severity:       pulumi.String("LOW"),
				Description:    pulumi.String("Description of the custom module"),
				Recommendation: pulumi.String("Steps to resolve violation"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Folder;
import com.pulumi.gcp.organizations.FolderArgs;
import com.pulumi.gcp.securitycenter.FolderCustomModule;
import com.pulumi.gcp.securitycenter.FolderCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.FolderCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.FolderCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.FolderCustomModuleCustomConfigCustomOutputArgs;
import com.pulumi.gcp.securitycenter.inputs.FolderCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var folder = new Folder("folder", FolderArgs.builder()
            .parent("organizations/123456789")
            .displayName("folder-name")
            .deletionProtection(false)
            .build());

        var example = new FolderCustomModule("example", FolderCustomModuleArgs.builder()
            .folder(folder.folderId())
            .displayName("full_custom_module")
            .enablementState("ENABLED")
            .customConfig(FolderCustomModuleCustomConfigArgs.builder()
                .predicate(FolderCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .title("Purpose of the expression")
                    .description("description of the expression")
                    .location("location of the expression")
                    .build())
                .customOutput(FolderCustomModuleCustomConfigCustomOutputArgs.builder()
                    .properties(FolderCustomModuleCustomConfigCustomOutputPropertyArgs.builder()
                        .name("duration")
                        .valueExpression(FolderCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs.builder()
                            .expression("resource.rotationPeriod")
                            .title("Purpose of the expression")
                            .description("description of the expression")
                            .location("location of the expression")
                            .build())
                        .build())
                    .build())
                .resourceSelector(FolderCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .severity("LOW")
                .description("Description of the custom module")
                .recommendation("Steps to resolve violation")
                .build())
            .build());

    }
}
```
```yaml
resources:
  folder:
    type: gcp:organizations:Folder
    properties:
      parent: organizations/123456789
      displayName: folder-name
      deletionProtection: false
  example:
    type: gcp:securitycenter:FolderCustomModule
    properties:
      folder: ${folder.folderId}
      displayName: full_custom_module
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
          title: Purpose of the expression
          description: description of the expression
          location: location of the expression
        customOutput:
          properties:
            - name: duration
              valueExpression:
                expression: resource.rotationPeriod
                title: Purpose of the expression
                description: description of the expression
                location: location of the expression
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        severity: LOW
        description: Description of the custom module
        recommendation: Steps to resolve violation
```
<!--End PulumiCodeChooser -->

## Import

FolderCustomModule can be imported using any of these accepted formats:

* `folders/{{folder}}/securityHealthAnalyticsSettings/customModules/{{name}}`

* `{{folder}}/{{name}}`

When using the `pulumi import` command, FolderCustomModule can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/folderCustomModule:FolderCustomModule default folders/{{folder}}/securityHealthAnalyticsSettings/customModules/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/folderCustomModule:FolderCustomModule default {{folder}}/{{name}}
```

Ы
customConfigѕ:Ё
ѓ
securitycenterFolderCustomModuleCustomConfigPgcp:securitycenter/FolderCustomModuleCustomConfig:FolderCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
═
displayName" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
n
enablementState" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.
1
folder" #Numerical ID of the parent folder.
"Ї
ancestorModule" ШIf empty, indicates that the custom module was created in the organization, folder,
or project in which you are viewing the custom module. Otherwise, ancestor_module
specifies the organization or folder from which the custom module is inherited.
"Ы
customConfigѕ:Ё
ѓ
securitycenterFolderCustomModuleCustomConfigPgcp:securitycenter/FolderCustomModuleCustomConfig:FolderCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
"═
displayName" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
"n
enablementState" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.
"1
folder" #Numerical ID of the parent folder.
"B

lastEditor" 0The editor that last updated the custom module.
"І
name" ■The resource name of the custom module. Its format is "folders/{folder_id}/securityHealthAnalyticsSettings/customModules/{customModule}".
The id {customModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.
"э

updateTime" СThe time at which the custom module was last updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*Я
p
securitycenterFolderNotificationConfigDgcp:securitycenter/folderNotificationConfig:FolderNotificationConfig║A Cloud Security Command Center (Cloud SCC) notification configs. A
notification config is a Cloud SCC resource that contains the
configuration to send notifications for create/update events of
findings, assets and etc.
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about FolderNotificationConfig, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/folders.notificationConfigs)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs)

## Example Usage

### Scc Folder Notification Config Basic


<!--Start PulumiCodeChooser -->
```yaml
resources:
  folder:
    type: gcp:organizations:Folder
    properties:
      parent: organizations/123456789
      displayName: folder-name
  sccFolderNotificationConfig:
    type: gcp:pubsub:Topic
    name: scc_folder_notification_config
    properties:
      name: my-topic
  customNotificationConfig:
    type: gcp:securitycenter:FolderNotificationConfig
    name: custom_notification_config
    properties:
      configId: my-config
      folder: ${folder.folderId}
      location: global
      description: My custom Cloud Security Command Center Finding Notification Configuration
      pubsubTopic: ${sccFolderNotificationConfig.id}
      streamingConfig:
        filter: category = "OPEN_FIREWALL" AND state = "ACTIVE"
```
<!--End PulumiCodeChooser -->

## Import

FolderNotificationConfig can be imported using any of these accepted formats:

* `folders/{{folder}}/notificationConfigs/{{config_id}}`

* `{{folder}}/{{config_id}}`

When using the `pulumi import` command, FolderNotificationConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/folderNotificationConfig:FolderNotificationConfig default folders/{{folder}}/notificationConfigs/{{config_id}}
```

```sh
$ pulumi import gcp:securitycenter/folderNotificationConfig:FolderNotificationConfig default {{folder}}/{{config_id}}
```

=
configId" -This must be unique within the organization.
Z
descriptionB" EThe description of the notification config (max of 1024 characters).
1
folder" #Numerical ID of the parent folder.
u
pubsubTopic" bThe Pub/Sub topic to send notifications to. Its format is
"projects/[project_id]/topics/[topic]".
Љ
streamingConfigБ:а
Ю
securitycenter'FolderNotificationConfigStreamingConfigbgcp:securitycenter/FolderNotificationConfigStreamingConfig:FolderNotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
"=
configId" -This must be unique within the organization.
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"1
folder" #Numerical ID of the parent folder.
"Ђ
name" uThe resource name of this notification config, in the format
`folders/{{folder}}/notificationConfigs/{{config_id}}`.
"u
pubsubTopic" bThe Pub/Sub topic to send notifications to. Its format is
"projects/[project_id]/topics/[topic]".
"y
serviceAccount" cThe service account that needs "pubsub.topics.publish" permission to
publish to the Pub/Sub topic.
"Љ
streamingConfigБ:а
Ю
securitycenter'FolderNotificationConfigStreamingConfigbgcp:securitycenter/FolderNotificationConfigStreamingConfig:FolderNotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
*Ћa
m
securitycenterFolderSccBigQueryExportBgcp:securitycenter/folderSccBigQueryExport:FolderSccBigQueryExport╠CA Cloud Security Command Center (Cloud SCC) Big Query Export Config.
It represents exporting Security Command Center data, including assets, findings, and security marks
to a BigQuery instance.

> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about FolderSccBigQueryExport, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/folders.bigQueryExports)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs/how-to-analyze-findings-in-big-query)

## Example Usage

### Scc Folder Big Query Export Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const folder = new gcp.organizations.Folder("folder", {
    parent: "organizations/123456789",
    displayName: "folder-name",
    deletionProtection: false,
});
const _default = new gcp.bigquery.Dataset("default", {
    datasetId: "my_dataset_id",
    friendlyName: "test",
    description: "This is a test description",
    location: "US",
    defaultTableExpirationMs: 3600000,
    defaultPartitionExpirationMs: undefined,
    labels: {
        env: "default",
    },
});
const customBigQueryExportConfig = new gcp.securitycenter.FolderSccBigQueryExport("custom_big_query_export_config", {
    bigQueryExportId: "my-export",
    folder: folder.folderId,
    dataset: _default.id,
    description: "Cloud Security Command Center Findings Big Query Export Config",
    filter: "state=\"ACTIVE\" AND NOT mute=\"MUTED\"",
});
```
```python
import pulumi
import pulumi_gcp as gcp

folder = gcp.organizations.Folder("folder",
    parent="organizations/123456789",
    display_name="folder-name",
    deletion_protection=False)
default = gcp.bigquery.Dataset("default",
    dataset_id="my_dataset_id",
    friendly_name="test",
    description="This is a test description",
    location="US",
    default_table_expiration_ms=3600000,
    default_partition_expiration_ms=None,
    labels={
        "env": "default",
    })
custom_big_query_export_config = gcp.securitycenter.FolderSccBigQueryExport("custom_big_query_export_config",
    big_query_export_id="my-export",
    folder=folder.folder_id,
    dataset=default.id,
    description="Cloud Security Command Center Findings Big Query Export Config",
    filter="state=\"ACTIVE\" AND NOT mute=\"MUTED\"")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var folder = new Gcp.Organizations.Folder("folder", new()
    {
        Parent = "organizations/123456789",
        DisplayName = "folder-name",
        DeletionProtection = false,
    });

    var @default = new Gcp.BigQuery.Dataset("default", new()
    {
        DatasetId = "my_dataset_id",
        FriendlyName = "test",
        Description = "This is a test description",
        Location = "US",
        DefaultTableExpirationMs = 3600000,
        DefaultPartitionExpirationMs = null,
        Labels = 
        {
            { "env", "default" },
        },
    });

    var customBigQueryExportConfig = new Gcp.SecurityCenter.FolderSccBigQueryExport("custom_big_query_export_config", new()
    {
        BigQueryExportId = "my-export",
        Folder = folder.FolderId,
        Dataset = @default.Id,
        Description = "Cloud Security Command Center Findings Big Query Export Config",
        Filter = "state=\"ACTIVE\" AND NOT mute=\"MUTED\"",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		folder, err := organizations.NewFolder(ctx, "folder", &organizations.FolderArgs{
			Parent:             pulumi.String("organizations/123456789"),
			DisplayName:        pulumi.String("folder-name"),
			DeletionProtection: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		_, err = bigquery.NewDataset(ctx, "default", &bigquery.DatasetArgs{
			DatasetId:                    pulumi.String("my_dataset_id"),
			FriendlyName:                 pulumi.String("test"),
			Description:                  pulumi.String("This is a test description"),
			Location:                     pulumi.String("US"),
			DefaultTableExpirationMs:     pulumi.Int(3600000),
			DefaultPartitionExpirationMs: nil,
			Labels: pulumi.StringMap{
				"env": pulumi.String("default"),
			},
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewFolderSccBigQueryExport(ctx, "custom_big_query_export_config", &securitycenter.FolderSccBigQueryExportArgs{
			BigQueryExportId: pulumi.String("my-export"),
			Folder:           folder.FolderId,
			Dataset:          _default.ID(),
			Description:      pulumi.String("Cloud Security Command Center Findings Big Query Export Config"),
			Filter:           pulumi.String("state=\"ACTIVE\" AND NOT mute=\"MUTED\""),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Folder;
import com.pulumi.gcp.organizations.FolderArgs;
import com.pulumi.gcp.bigquery.Dataset;
import com.pulumi.gcp.bigquery.DatasetArgs;
import com.pulumi.gcp.securitycenter.FolderSccBigQueryExport;
import com.pulumi.gcp.securitycenter.FolderSccBigQueryExportArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var folder = new Folder("folder", FolderArgs.builder()
            .parent("organizations/123456789")
            .displayName("folder-name")
            .deletionProtection(false)
            .build());

        var default_ = new Dataset("default", DatasetArgs.builder()
            .datasetId("my_dataset_id")
            .friendlyName("test")
            .description("This is a test description")
            .location("US")
            .defaultTableExpirationMs(3600000)
            .defaultPartitionExpirationMs(null)
            .labels(Map.of("env", "default"))
            .build());

        var customBigQueryExportConfig = new FolderSccBigQueryExport("customBigQueryExportConfig", FolderSccBigQueryExportArgs.builder()
            .bigQueryExportId("my-export")
            .folder(folder.folderId())
            .dataset(default_.id())
            .description("Cloud Security Command Center Findings Big Query Export Config")
            .filter("state=\"ACTIVE\" AND NOT mute=\"MUTED\"")
            .build());

    }
}
```
```yaml
resources:
  folder:
    type: gcp:organizations:Folder
    properties:
      parent: organizations/123456789
      displayName: folder-name
      deletionProtection: false
  default:
    type: gcp:bigquery:Dataset
    properties:
      datasetId: my_dataset_id
      friendlyName: test
      description: This is a test description
      location: US
      defaultTableExpirationMs: 3.6e+06
      defaultPartitionExpirationMs: null
      labels:
        env: default
  customBigQueryExportConfig:
    type: gcp:securitycenter:FolderSccBigQueryExport
    name: custom_big_query_export_config
    properties:
      bigQueryExportId: my-export
      folder: ${folder.folderId}
      dataset: ${default.id}
      description: Cloud Security Command Center Findings Big Query Export Config
      filter: state="ACTIVE" AND NOT mute="MUTED"
```
<!--End PulumiCodeChooser -->

## Import

FolderSccBigQueryExport can be imported using any of these accepted formats:

* `folders/{{folder}}/bigQueryExports/{{big_query_export_id}}`

* `{{folder}}/{{big_query_export_id}}`

When using the `pulumi import` command, FolderSccBigQueryExport can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/folderSccBigQueryExport:FolderSccBigQueryExport default folders/{{folder}}/bigQueryExports/{{big_query_export_id}}
```

```sh
$ pulumi import gcp:securitycenter/folderSccBigQueryExport:FolderSccBigQueryExport default {{folder}}/{{big_query_export_id}}
```

M
bigQueryExportId" 5This must be unique within the organization.


- - -
С
dataset" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
K
description" 8The description of the export (max of 1024 characters).
ш
filter" ТExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
_
folder" QThe folder where Cloud Security Command Center Big Query Export
Config lives in.
"M
bigQueryExportId" 5This must be unique within the organization.


- - -
"З

createTime" рThe time at which the BigQuery export was created.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"С
dataset" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
"K
description" 8The description of the export (max of 1024 characters).
"ш
filter" ТExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
"_
folder" QThe folder where Cloud Security Command Center Big Query Export
Config lives in.
"W
mostRecentEditor" ?Email address of the user who last edited the BigQuery export.
"М
name" кThe resource name of this export, in the format
`projects/{{project}}/bigQueryExports/{{big_query_export_id}}`.
This field is provided in responses, and is ignored when provided in create requests.
"t
	principal" cThe service account that needs permission to create table and upload data to the BigQuery dataset.
"ђ

updateTime" ьThe most recent time at which the BigQuery export was updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*Вх
^
securitycenterInstanceIamBinding8gcp:securitycenter/instanceIamBinding:InstanceIamBindingі«Represents a Data Fusion instance.


To get more information about Instance, see:

* [API documentation](https://cloud.google.com/data-fusion/docs/reference/rest/v1beta1/projects.locations.instances)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/data-fusion/docs/)

## Example Usage

### Data Fusion Instance Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const basicInstance = new gcp.datafusion.Instance("basic_instance", {
    name: "my-instance",
    region: "us-central1",
    type: "BASIC",
});
```
```python
import pulumi
import pulumi_gcp as gcp

basic_instance = gcp.datafusion.Instance("basic_instance",
    name="my-instance",
    region="us-central1",
    type="BASIC")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var basicInstance = new Gcp.DataFusion.Instance("basic_instance", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "BASIC",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datafusion.NewInstance(ctx, "basic_instance", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Type:   pulumi.String("BASIC"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var basicInstance = new Instance("basicInstance", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("BASIC")
            .build());

    }
}
```
```yaml
resources:
  basicInstance:
    type: gcp:datafusion:Instance
    name: basic_instance
    properties:
      name: my-instance
      region: us-central1
      type: BASIC
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.appengine.getDefaultServiceAccount({});
const network = new gcp.compute.Network("network", {name: "datafusion-full-network"});
const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
    name: "datafusion-ip-alloc",
    addressType: "INTERNAL",
    purpose: "VPC_PEERING",
    prefixLength: 22,
    network: network.id,
});
const extendedInstance = new gcp.datafusion.Instance("extended_instance", {
    name: "my-instance",
    description: "My Data Fusion instance",
    displayName: "My Data Fusion instance",
    region: "us-central1",
    type: "BASIC",
    enableStackdriverLogging: true,
    enableStackdriverMonitoring: true,
    privateInstance: true,
    dataprocServiceAccount: _default.then(_default => _default.email),
    labels: {
        example_key: "example_value",
    },
    networkConfig: {
        network: "default",
        ipAllocation: pulumi.interpolate`${privateIpAlloc.address}/${privateIpAlloc.prefixLength}`,
    },
    accelerators: [{
        acceleratorType: "CDC",
        state: "ENABLED",
    }],
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.appengine.get_default_service_account()
network = gcp.compute.Network("network", name="datafusion-full-network")
private_ip_alloc = gcp.compute.GlobalAddress("private_ip_alloc",
    name="datafusion-ip-alloc",
    address_type="INTERNAL",
    purpose="VPC_PEERING",
    prefix_length=22,
    network=network.id)
extended_instance = gcp.datafusion.Instance("extended_instance",
    name="my-instance",
    description="My Data Fusion instance",
    display_name="My Data Fusion instance",
    region="us-central1",
    type="BASIC",
    enable_stackdriver_logging=True,
    enable_stackdriver_monitoring=True,
    private_instance=True,
    dataproc_service_account=default.email,
    labels={
        "example_key": "example_value",
    },
    network_config={
        "network": "default",
        "ip_allocation": pulumi.Output.all(
            address=private_ip_alloc.address,
            prefix_length=private_ip_alloc.prefix_length
).apply(lambda resolved_outputs: f"{resolved_outputs['address']}/{resolved_outputs['prefix_length']}")
,
    },
    accelerators=[{
        "accelerator_type": "CDC",
        "state": "ENABLED",
    }])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.AppEngine.GetDefaultServiceAccount.Invoke();

    var network = new Gcp.Compute.Network("network", new()
    {
        Name = "datafusion-full-network",
    });

    var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    {
        Name = "datafusion-ip-alloc",
        AddressType = "INTERNAL",
        Purpose = "VPC_PEERING",
        PrefixLength = 22,
        Network = network.Id,
    });

    var extendedInstance = new Gcp.DataFusion.Instance("extended_instance", new()
    {
        Name = "my-instance",
        Description = "My Data Fusion instance",
        DisplayName = "My Data Fusion instance",
        Region = "us-central1",
        Type = "BASIC",
        EnableStackdriverLogging = true,
        EnableStackdriverMonitoring = true,
        PrivateInstance = true,
        DataprocServiceAccount = @default.Apply(@default => @default.Apply(getDefaultServiceAccountResult => getDefaultServiceAccountResult.Email)),
        Labels = 
        {
            { "example_key", "example_value" },
        },
        NetworkConfig = new Gcp.DataFusion.Inputs.InstanceNetworkConfigArgs
        {
            Network = "default",
            IpAllocation = Output.Tuple(privateIpAlloc.Address, privateIpAlloc.PrefixLength).Apply(values =>
            {
                var address = values.Item1;
                var prefixLength = values.Item2;
                return $"{address}/{prefixLength}";
            }),
        },
        Accelerators = new[]
        {
            new Gcp.DataFusion.Inputs.InstanceAcceleratorArgs
            {
                AcceleratorType = "CDC",
                State = "ENABLED",
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/appengine"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := appengine.GetDefaultServiceAccount(ctx, &appengine.GetDefaultServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
			Name: pulumi.String("datafusion-full-network"),
		})
		if err != nil {
			return err
		}
		privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
			Name:         pulumi.String("datafusion-ip-alloc"),
			AddressType:  pulumi.String("INTERNAL"),
			Purpose:      pulumi.String("VPC_PEERING"),
			PrefixLength: pulumi.Int(22),
			Network:      network.ID(),
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "extended_instance", &datafusion.InstanceArgs{
			Name:                        pulumi.String("my-instance"),
			Description:                 pulumi.String("My Data Fusion instance"),
			DisplayName:                 pulumi.String("My Data Fusion instance"),
			Region:                      pulumi.String("us-central1"),
			Type:                        pulumi.String("BASIC"),
			EnableStackdriverLogging:    pulumi.Bool(true),
			EnableStackdriverMonitoring: pulumi.Bool(true),
			PrivateInstance:             pulumi.Bool(true),
			DataprocServiceAccount:      pulumi.String(_default.Email),
			Labels: pulumi.StringMap{
				"example_key": pulumi.String("example_value"),
			},
			NetworkConfig: &datafusion.InstanceNetworkConfigArgs{
				Network: pulumi.String("default"),
				IpAllocation: pulumi.All(privateIpAlloc.Address, privateIpAlloc.PrefixLength).ApplyT(func(_args []interface{}) (string, error) {
					address := _args[0].(string)
					prefixLength := _args[1].(int)
					return fmt.Sprintf("%v/%v", address, prefixLength), nil
				}).(pulumi.StringOutput),
			},
			Accelerators: datafusion.InstanceAcceleratorArray{
				&datafusion.InstanceAcceleratorArgs{
					AcceleratorType: pulumi.String("CDC"),
					State:           pulumi.String("ENABLED"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.appengine.AppengineFunctions;
import com.pulumi.gcp.appengine.inputs.GetDefaultServiceAccountArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceNetworkConfigArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceAcceleratorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = AppengineFunctions.getDefaultServiceAccount();

        var network = new Network("network", NetworkArgs.builder()
            .name("datafusion-full-network")
            .build());

        var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
            .name("datafusion-ip-alloc")
            .addressType("INTERNAL")
            .purpose("VPC_PEERING")
            .prefixLength(22)
            .network(network.id())
            .build());

        var extendedInstance = new Instance("extendedInstance", InstanceArgs.builder()
            .name("my-instance")
            .description("My Data Fusion instance")
            .displayName("My Data Fusion instance")
            .region("us-central1")
            .type("BASIC")
            .enableStackdriverLogging(true)
            .enableStackdriverMonitoring(true)
            .privateInstance(true)
            .dataprocServiceAccount(default_.email())
            .labels(Map.of("example_key", "example_value"))
            .networkConfig(InstanceNetworkConfigArgs.builder()
                .network("default")
                .ipAllocation(Output.tuple(privateIpAlloc.address(), privateIpAlloc.prefixLength()).applyValue(values -> {
                    var address = values.t1;
                    var prefixLength = values.t2;
                    return String.format("%s/%s", address,prefixLength);
                }))
                .build())
            .accelerators(InstanceAcceleratorArgs.builder()
                .acceleratorType("CDC")
                .state("ENABLED")
                .build())
            .build());

    }
}
```
```yaml
resources:
  extendedInstance:
    type: gcp:datafusion:Instance
    name: extended_instance
    properties:
      name: my-instance
      description: My Data Fusion instance
      displayName: My Data Fusion instance
      region: us-central1
      type: BASIC
      enableStackdriverLogging: true
      enableStackdriverMonitoring: true
      privateInstance: true
      dataprocServiceAccount: ${default.email}
      labels:
        example_key: example_value
      networkConfig:
        network: default
        ipAllocation: ${privateIpAlloc.address}/${privateIpAlloc.prefixLength}
      accelerators:
        - acceleratorType: CDC
          state: ENABLED
  network:
    type: gcp:compute:Network
    properties:
      name: datafusion-full-network
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: datafusion-ip-alloc
      addressType: INTERNAL
      purpose: VPC_PEERING
      prefixLength: 22
      network: ${network.id}
variables:
  default:
    fn::invoke:
      function: gcp:appengine:getDefaultServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Psc


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const psc = new gcp.compute.Network("psc", {
    name: "datafusion-psc-network",
    autoCreateSubnetworks: false,
});
const pscSubnetwork = new gcp.compute.Subnetwork("psc", {
    name: "datafusion-psc-subnet",
    region: "us-central1",
    network: psc.id,
    ipCidrRange: "10.0.0.0/16",
});
const pscNetworkAttachment = new gcp.compute.NetworkAttachment("psc", {
    name: "datafusion-psc-attachment",
    region: "us-central1",
    connectionPreference: "ACCEPT_AUTOMATIC",
    subnetworks: [pscSubnetwork.selfLink],
});
const pscInstance = new gcp.datafusion.Instance("psc_instance", {
    name: "psc-instance",
    region: "us-central1",
    type: "BASIC",
    privateInstance: true,
    networkConfig: {
        connectionType: "PRIVATE_SERVICE_CONNECT_INTERFACES",
        privateServiceConnectConfig: {
            networkAttachment: pscNetworkAttachment.id,
            unreachableCidrBlock: "192.168.0.0/25",
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

psc = gcp.compute.Network("psc",
    name="datafusion-psc-network",
    auto_create_subnetworks=False)
psc_subnetwork = gcp.compute.Subnetwork("psc",
    name="datafusion-psc-subnet",
    region="us-central1",
    network=psc.id,
    ip_cidr_range="10.0.0.0/16")
psc_network_attachment = gcp.compute.NetworkAttachment("psc",
    name="datafusion-psc-attachment",
    region="us-central1",
    connection_preference="ACCEPT_AUTOMATIC",
    subnetworks=[psc_subnetwork.self_link])
psc_instance = gcp.datafusion.Instance("psc_instance",
    name="psc-instance",
    region="us-central1",
    type="BASIC",
    private_instance=True,
    network_config={
        "connection_type": "PRIVATE_SERVICE_CONNECT_INTERFACES",
        "private_service_connect_config": {
            "network_attachment": psc_network_attachment.id,
            "unreachable_cidr_block": "192.168.0.0/25",
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var psc = new Gcp.Compute.Network("psc", new()
    {
        Name = "datafusion-psc-network",
        AutoCreateSubnetworks = false,
    });

    var pscSubnetwork = new Gcp.Compute.Subnetwork("psc", new()
    {
        Name = "datafusion-psc-subnet",
        Region = "us-central1",
        Network = psc.Id,
        IpCidrRange = "10.0.0.0/16",
    });

    var pscNetworkAttachment = new Gcp.Compute.NetworkAttachment("psc", new()
    {
        Name = "datafusion-psc-attachment",
        Region = "us-central1",
        ConnectionPreference = "ACCEPT_AUTOMATIC",
        Subnetworks = new[]
        {
            pscSubnetwork.SelfLink,
        },
    });

    var pscInstance = new Gcp.DataFusion.Instance("psc_instance", new()
    {
        Name = "psc-instance",
        Region = "us-central1",
        Type = "BASIC",
        PrivateInstance = true,
        NetworkConfig = new Gcp.DataFusion.Inputs.InstanceNetworkConfigArgs
        {
            ConnectionType = "PRIVATE_SERVICE_CONNECT_INTERFACES",
            PrivateServiceConnectConfig = new Gcp.DataFusion.Inputs.InstanceNetworkConfigPrivateServiceConnectConfigArgs
            {
                NetworkAttachment = pscNetworkAttachment.Id,
                UnreachableCidrBlock = "192.168.0.0/25",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		psc, err := compute.NewNetwork(ctx, "psc", &compute.NetworkArgs{
			Name:                  pulumi.String("datafusion-psc-network"),
			AutoCreateSubnetworks: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		pscSubnetwork, err := compute.NewSubnetwork(ctx, "psc", &compute.SubnetworkArgs{
			Name:        pulumi.String("datafusion-psc-subnet"),
			Region:      pulumi.String("us-central1"),
			Network:     psc.ID(),
			IpCidrRange: pulumi.String("10.0.0.0/16"),
		})
		if err != nil {
			return err
		}
		pscNetworkAttachment, err := compute.NewNetworkAttachment(ctx, "psc", &compute.NetworkAttachmentArgs{
			Name:                 pulumi.String("datafusion-psc-attachment"),
			Region:               pulumi.String("us-central1"),
			ConnectionPreference: pulumi.String("ACCEPT_AUTOMATIC"),
			Subnetworks: pulumi.StringArray{
				pscSubnetwork.SelfLink,
			},
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "psc_instance", &datafusion.InstanceArgs{
			Name:            pulumi.String("psc-instance"),
			Region:          pulumi.String("us-central1"),
			Type:            pulumi.String("BASIC"),
			PrivateInstance: pulumi.Bool(true),
			NetworkConfig: &datafusion.InstanceNetworkConfigArgs{
				ConnectionType: pulumi.String("PRIVATE_SERVICE_CONNECT_INTERFACES"),
				PrivateServiceConnectConfig: &datafusion.InstanceNetworkConfigPrivateServiceConnectConfigArgs{
					NetworkAttachment:    pscNetworkAttachment.ID(),
					UnreachableCidrBlock: pulumi.String("192.168.0.0/25"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.compute.NetworkAttachment;
import com.pulumi.gcp.compute.NetworkAttachmentArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceNetworkConfigArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceNetworkConfigPrivateServiceConnectConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var psc = new Network("psc", NetworkArgs.builder()
            .name("datafusion-psc-network")
            .autoCreateSubnetworks(false)
            .build());

        var pscSubnetwork = new Subnetwork("pscSubnetwork", SubnetworkArgs.builder()
            .name("datafusion-psc-subnet")
            .region("us-central1")
            .network(psc.id())
            .ipCidrRange("10.0.0.0/16")
            .build());

        var pscNetworkAttachment = new NetworkAttachment("pscNetworkAttachment", NetworkAttachmentArgs.builder()
            .name("datafusion-psc-attachment")
            .region("us-central1")
            .connectionPreference("ACCEPT_AUTOMATIC")
            .subnetworks(pscSubnetwork.selfLink())
            .build());

        var pscInstance = new Instance("pscInstance", InstanceArgs.builder()
            .name("psc-instance")
            .region("us-central1")
            .type("BASIC")
            .privateInstance(true)
            .networkConfig(InstanceNetworkConfigArgs.builder()
                .connectionType("PRIVATE_SERVICE_CONNECT_INTERFACES")
                .privateServiceConnectConfig(InstanceNetworkConfigPrivateServiceConnectConfigArgs.builder()
                    .networkAttachment(pscNetworkAttachment.id())
                    .unreachableCidrBlock("192.168.0.0/25")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  pscInstance:
    type: gcp:datafusion:Instance
    name: psc_instance
    properties:
      name: psc-instance
      region: us-central1
      type: BASIC
      privateInstance: true
      networkConfig:
        connectionType: PRIVATE_SERVICE_CONNECT_INTERFACES
        privateServiceConnectConfig:
          networkAttachment: ${pscNetworkAttachment.id}
          unreachableCidrBlock: 192.168.0.0/25
  psc:
    type: gcp:compute:Network
    properties:
      name: datafusion-psc-network
      autoCreateSubnetworks: false
  pscSubnetwork:
    type: gcp:compute:Subnetwork
    name: psc
    properties:
      name: datafusion-psc-subnet
      region: us-central1
      network: ${psc.id}
      ipCidrRange: 10.0.0.0/16
  pscNetworkAttachment:
    type: gcp:compute:NetworkAttachment
    name: psc
    properties:
      name: datafusion-psc-attachment
      region: us-central1
      connectionPreference: ACCEPT_AUTOMATIC
      subnetworks:
        - ${pscSubnetwork.selfLink}
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Cmek


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const keyRing = new gcp.kms.KeyRing("key_ring", {
    name: "my-instance",
    location: "us-central1",
});
const cryptoKey = new gcp.kms.CryptoKey("crypto_key", {
    name: "my-instance",
    keyRing: keyRing.id,
});
const project = gcp.organizations.getProject({});
const cryptoKeyMember = new gcp.kms.CryptoKeyIAMMember("crypto_key_member", {
    cryptoKeyId: cryptoKey.id,
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-datafusion.iam.gserviceaccount.com`),
});
const cmek = new gcp.datafusion.Instance("cmek", {
    name: "my-instance",
    region: "us-central1",
    type: "BASIC",
    cryptoKeyConfig: {
        keyReference: cryptoKey.id,
    },
}, {
    dependsOn: [cryptoKeyMember],
});
```
```python
import pulumi
import pulumi_gcp as gcp

key_ring = gcp.kms.KeyRing("key_ring",
    name="my-instance",
    location="us-central1")
crypto_key = gcp.kms.CryptoKey("crypto_key",
    name="my-instance",
    key_ring=key_ring.id)
project = gcp.organizations.get_project()
crypto_key_member = gcp.kms.CryptoKeyIAMMember("crypto_key_member",
    crypto_key_id=crypto_key.id,
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=f"serviceAccount:service-{project.number}@gcp-sa-datafusion.iam.gserviceaccount.com")
cmek = gcp.datafusion.Instance("cmek",
    name="my-instance",
    region="us-central1",
    type="BASIC",
    crypto_key_config={
        "key_reference": crypto_key.id,
    },
    opts = pulumi.ResourceOptions(depends_on=[crypto_key_member]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var keyRing = new Gcp.Kms.KeyRing("key_ring", new()
    {
        Name = "my-instance",
        Location = "us-central1",
    });

    var cryptoKey = new Gcp.Kms.CryptoKey("crypto_key", new()
    {
        Name = "my-instance",
        KeyRing = keyRing.Id,
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    var cryptoKeyMember = new Gcp.Kms.CryptoKeyIAMMember("crypto_key_member", new()
    {
        CryptoKeyId = cryptoKey.Id,
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-datafusion.iam.gserviceaccount.com",
    });

    var cmek = new Gcp.DataFusion.Instance("cmek", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "BASIC",
        CryptoKeyConfig = new Gcp.DataFusion.Inputs.InstanceCryptoKeyConfigArgs
        {
            KeyReference = cryptoKey.Id,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            cryptoKeyMember,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		keyRing, err := kms.NewKeyRing(ctx, "key_ring", &kms.KeyRingArgs{
			Name:     pulumi.String("my-instance"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		cryptoKey, err := kms.NewCryptoKey(ctx, "crypto_key", &kms.CryptoKeyArgs{
			Name:    pulumi.String("my-instance"),
			KeyRing: keyRing.ID(),
		})
		if err != nil {
			return err
		}
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		cryptoKeyMember, err := kms.NewCryptoKeyIAMMember(ctx, "crypto_key_member", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: cryptoKey.ID(),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-datafusion.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "cmek", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Type:   pulumi.String("BASIC"),
			CryptoKeyConfig: &datafusion.InstanceCryptoKeyConfigArgs{
				KeyReference: cryptoKey.ID(),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			cryptoKeyMember,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.kms.KeyRing;
import com.pulumi.gcp.kms.KeyRingArgs;
import com.pulumi.gcp.kms.CryptoKey;
import com.pulumi.gcp.kms.CryptoKeyArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceCryptoKeyConfigArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var keyRing = new KeyRing("keyRing", KeyRingArgs.builder()
            .name("my-instance")
            .location("us-central1")
            .build());

        var cryptoKey = new CryptoKey("cryptoKey", CryptoKeyArgs.builder()
            .name("my-instance")
            .keyRing(keyRing.id())
            .build());

        final var project = OrganizationsFunctions.getProject();

        var cryptoKeyMember = new CryptoKeyIAMMember("cryptoKeyMember", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(cryptoKey.id())
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(String.format("serviceAccount:service-%s@gcp-sa-datafusion.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var cmek = new Instance("cmek", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("BASIC")
            .cryptoKeyConfig(InstanceCryptoKeyConfigArgs.builder()
                .keyReference(cryptoKey.id())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(cryptoKeyMember)
                .build());

    }
}
```
```yaml
resources:
  cmek:
    type: gcp:datafusion:Instance
    properties:
      name: my-instance
      region: us-central1
      type: BASIC
      cryptoKeyConfig:
        keyReference: ${cryptoKey.id}
    options:
      dependsOn:
        - ${cryptoKeyMember}
  cryptoKey:
    type: gcp:kms:CryptoKey
    name: crypto_key
    properties:
      name: my-instance
      keyRing: ${keyRing.id}
  keyRing:
    type: gcp:kms:KeyRing
    name: key_ring
    properties:
      name: my-instance
      location: us-central1
  cryptoKeyMember:
    type: gcp:kms:CryptoKeyIAMMember
    name: crypto_key_member
    properties:
      cryptoKeyId: ${cryptoKey.id}
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: serviceAccount:service-${project.number}@gcp-sa-datafusion.iam.gserviceaccount.com
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Enterprise


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const enterpriseInstance = new gcp.datafusion.Instance("enterprise_instance", {
    name: "my-instance",
    region: "us-central1",
    type: "ENTERPRISE",
    enableRbac: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

enterprise_instance = gcp.datafusion.Instance("enterprise_instance",
    name="my-instance",
    region="us-central1",
    type="ENTERPRISE",
    enable_rbac=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var enterpriseInstance = new Gcp.DataFusion.Instance("enterprise_instance", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "ENTERPRISE",
        EnableRbac = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datafusion.NewInstance(ctx, "enterprise_instance", &datafusion.InstanceArgs{
			Name:       pulumi.String("my-instance"),
			Region:     pulumi.String("us-central1"),
			Type:       pulumi.String("ENTERPRISE"),
			EnableRbac: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var enterpriseInstance = new Instance("enterpriseInstance", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("ENTERPRISE")
            .enableRbac(true)
            .build());

    }
}
```
```yaml
resources:
  enterpriseInstance:
    type: gcp:datafusion:Instance
    name: enterprise_instance
    properties:
      name: my-instance
      region: us-central1
      type: ENTERPRISE
      enableRbac: true
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Event


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const eventTopic = new gcp.pubsub.Topic("event", {name: "my-instance"});
const event = new gcp.datafusion.Instance("event", {
    name: "my-instance",
    region: "us-central1",
    type: "BASIC",
    eventPublishConfig: {
        enabled: true,
        topic: eventTopic.id,
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

event_topic = gcp.pubsub.Topic("event", name="my-instance")
event = gcp.datafusion.Instance("event",
    name="my-instance",
    region="us-central1",
    type="BASIC",
    event_publish_config={
        "enabled": True,
        "topic": event_topic.id,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var eventTopic = new Gcp.PubSub.Topic("event", new()
    {
        Name = "my-instance",
    });

    var @event = new Gcp.DataFusion.Instance("event", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "BASIC",
        EventPublishConfig = new Gcp.DataFusion.Inputs.InstanceEventPublishConfigArgs
        {
            Enabled = true,
            Topic = eventTopic.Id,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		eventTopic, err := pubsub.NewTopic(ctx, "event", &pubsub.TopicArgs{
			Name: pulumi.String("my-instance"),
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "event", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Type:   pulumi.String("BASIC"),
			EventPublishConfig: &datafusion.InstanceEventPublishConfigArgs{
				Enabled: pulumi.Bool(true),
				Topic:   eventTopic.ID(),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceEventPublishConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var eventTopic = new Topic("eventTopic", TopicArgs.builder()
            .name("my-instance")
            .build());

        var event = new Instance("event", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("BASIC")
            .eventPublishConfig(InstanceEventPublishConfigArgs.builder()
                .enabled(true)
                .topic(eventTopic.id())
                .build())
            .build());

    }
}
```
```yaml
resources:
  event:
    type: gcp:datafusion:Instance
    properties:
      name: my-instance
      region: us-central1
      type: BASIC
      eventPublishConfig:
        enabled: true
        topic: ${eventTopic.id}
  eventTopic:
    type: gcp:pubsub:Topic
    name: event
    properties:
      name: my-instance
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Zone


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const zone = new gcp.datafusion.Instance("zone", {
    name: "my-instance",
    region: "us-central1",
    zone: "us-central1-a",
    type: "DEVELOPER",
});
```
```python
import pulumi
import pulumi_gcp as gcp

zone = gcp.datafusion.Instance("zone",
    name="my-instance",
    region="us-central1",
    zone="us-central1-a",
    type="DEVELOPER")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var zone = new Gcp.DataFusion.Instance("zone", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Zone = "us-central1-a",
        Type = "DEVELOPER",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datafusion.NewInstance(ctx, "zone", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Zone:   pulumi.String("us-central1-a"),
			Type:   pulumi.String("DEVELOPER"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var zone = new Instance("zone", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .zone("us-central1-a")
            .type("DEVELOPER")
            .build());

    }
}
```
```yaml
resources:
  zone:
    type: gcp:datafusion:Instance
    properties:
      name: my-instance
      region: us-central1
      zone: us-central1-a
      type: DEVELOPER
```
<!--End PulumiCodeChooser -->

## Import

Instance can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/instances/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/instanceIamBinding:InstanceIamBinding default projects/{{project}}/locations/{{region}}/instances/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/instanceIamBinding:InstanceIamBinding default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/instanceIamBinding:InstanceIamBinding default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/instanceIamBinding:InstanceIamBinding default {{name}}
```

ї
	conditionB}:{
y
securitycenterInstanceIamBindingConditionJgcp:securitycenter/InstanceIamBindingCondition:InstanceIamBindingCondition
members*" W
nameB" IThe ID of the instance or a fully qualified identifier for the instance.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
8
regionB" (The region of the Data Fusion instance.


role" "ї
	conditionB}:{
y
securitycenterInstanceIamBindingConditionJgcp:securitycenter/InstanceIamBindingCondition:InstanceIamBindingCondition"

etag" "
members*" "U
name" IThe ID of the instance or a fully qualified identifier for the instance.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"6
region" (The region of the Data Fusion instance.
"

role" *Нх
[
securitycenterInstanceIamMember6gcp:securitycenter/instanceIamMember:InstanceIamMemberѓ«Represents a Data Fusion instance.


To get more information about Instance, see:

* [API documentation](https://cloud.google.com/data-fusion/docs/reference/rest/v1beta1/projects.locations.instances)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/data-fusion/docs/)

## Example Usage

### Data Fusion Instance Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const basicInstance = new gcp.datafusion.Instance("basic_instance", {
    name: "my-instance",
    region: "us-central1",
    type: "BASIC",
});
```
```python
import pulumi
import pulumi_gcp as gcp

basic_instance = gcp.datafusion.Instance("basic_instance",
    name="my-instance",
    region="us-central1",
    type="BASIC")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var basicInstance = new Gcp.DataFusion.Instance("basic_instance", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "BASIC",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datafusion.NewInstance(ctx, "basic_instance", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Type:   pulumi.String("BASIC"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var basicInstance = new Instance("basicInstance", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("BASIC")
            .build());

    }
}
```
```yaml
resources:
  basicInstance:
    type: gcp:datafusion:Instance
    name: basic_instance
    properties:
      name: my-instance
      region: us-central1
      type: BASIC
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.appengine.getDefaultServiceAccount({});
const network = new gcp.compute.Network("network", {name: "datafusion-full-network"});
const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
    name: "datafusion-ip-alloc",
    addressType: "INTERNAL",
    purpose: "VPC_PEERING",
    prefixLength: 22,
    network: network.id,
});
const extendedInstance = new gcp.datafusion.Instance("extended_instance", {
    name: "my-instance",
    description: "My Data Fusion instance",
    displayName: "My Data Fusion instance",
    region: "us-central1",
    type: "BASIC",
    enableStackdriverLogging: true,
    enableStackdriverMonitoring: true,
    privateInstance: true,
    dataprocServiceAccount: _default.then(_default => _default.email),
    labels: {
        example_key: "example_value",
    },
    networkConfig: {
        network: "default",
        ipAllocation: pulumi.interpolate`${privateIpAlloc.address}/${privateIpAlloc.prefixLength}`,
    },
    accelerators: [{
        acceleratorType: "CDC",
        state: "ENABLED",
    }],
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.appengine.get_default_service_account()
network = gcp.compute.Network("network", name="datafusion-full-network")
private_ip_alloc = gcp.compute.GlobalAddress("private_ip_alloc",
    name="datafusion-ip-alloc",
    address_type="INTERNAL",
    purpose="VPC_PEERING",
    prefix_length=22,
    network=network.id)
extended_instance = gcp.datafusion.Instance("extended_instance",
    name="my-instance",
    description="My Data Fusion instance",
    display_name="My Data Fusion instance",
    region="us-central1",
    type="BASIC",
    enable_stackdriver_logging=True,
    enable_stackdriver_monitoring=True,
    private_instance=True,
    dataproc_service_account=default.email,
    labels={
        "example_key": "example_value",
    },
    network_config={
        "network": "default",
        "ip_allocation": pulumi.Output.all(
            address=private_ip_alloc.address,
            prefix_length=private_ip_alloc.prefix_length
).apply(lambda resolved_outputs: f"{resolved_outputs['address']}/{resolved_outputs['prefix_length']}")
,
    },
    accelerators=[{
        "accelerator_type": "CDC",
        "state": "ENABLED",
    }])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.AppEngine.GetDefaultServiceAccount.Invoke();

    var network = new Gcp.Compute.Network("network", new()
    {
        Name = "datafusion-full-network",
    });

    var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    {
        Name = "datafusion-ip-alloc",
        AddressType = "INTERNAL",
        Purpose = "VPC_PEERING",
        PrefixLength = 22,
        Network = network.Id,
    });

    var extendedInstance = new Gcp.DataFusion.Instance("extended_instance", new()
    {
        Name = "my-instance",
        Description = "My Data Fusion instance",
        DisplayName = "My Data Fusion instance",
        Region = "us-central1",
        Type = "BASIC",
        EnableStackdriverLogging = true,
        EnableStackdriverMonitoring = true,
        PrivateInstance = true,
        DataprocServiceAccount = @default.Apply(@default => @default.Apply(getDefaultServiceAccountResult => getDefaultServiceAccountResult.Email)),
        Labels = 
        {
            { "example_key", "example_value" },
        },
        NetworkConfig = new Gcp.DataFusion.Inputs.InstanceNetworkConfigArgs
        {
            Network = "default",
            IpAllocation = Output.Tuple(privateIpAlloc.Address, privateIpAlloc.PrefixLength).Apply(values =>
            {
                var address = values.Item1;
                var prefixLength = values.Item2;
                return $"{address}/{prefixLength}";
            }),
        },
        Accelerators = new[]
        {
            new Gcp.DataFusion.Inputs.InstanceAcceleratorArgs
            {
                AcceleratorType = "CDC",
                State = "ENABLED",
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/appengine"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := appengine.GetDefaultServiceAccount(ctx, &appengine.GetDefaultServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
			Name: pulumi.String("datafusion-full-network"),
		})
		if err != nil {
			return err
		}
		privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
			Name:         pulumi.String("datafusion-ip-alloc"),
			AddressType:  pulumi.String("INTERNAL"),
			Purpose:      pulumi.String("VPC_PEERING"),
			PrefixLength: pulumi.Int(22),
			Network:      network.ID(),
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "extended_instance", &datafusion.InstanceArgs{
			Name:                        pulumi.String("my-instance"),
			Description:                 pulumi.String("My Data Fusion instance"),
			DisplayName:                 pulumi.String("My Data Fusion instance"),
			Region:                      pulumi.String("us-central1"),
			Type:                        pulumi.String("BASIC"),
			EnableStackdriverLogging:    pulumi.Bool(true),
			EnableStackdriverMonitoring: pulumi.Bool(true),
			PrivateInstance:             pulumi.Bool(true),
			DataprocServiceAccount:      pulumi.String(_default.Email),
			Labels: pulumi.StringMap{
				"example_key": pulumi.String("example_value"),
			},
			NetworkConfig: &datafusion.InstanceNetworkConfigArgs{
				Network: pulumi.String("default"),
				IpAllocation: pulumi.All(privateIpAlloc.Address, privateIpAlloc.PrefixLength).ApplyT(func(_args []interface{}) (string, error) {
					address := _args[0].(string)
					prefixLength := _args[1].(int)
					return fmt.Sprintf("%v/%v", address, prefixLength), nil
				}).(pulumi.StringOutput),
			},
			Accelerators: datafusion.InstanceAcceleratorArray{
				&datafusion.InstanceAcceleratorArgs{
					AcceleratorType: pulumi.String("CDC"),
					State:           pulumi.String("ENABLED"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.appengine.AppengineFunctions;
import com.pulumi.gcp.appengine.inputs.GetDefaultServiceAccountArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceNetworkConfigArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceAcceleratorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = AppengineFunctions.getDefaultServiceAccount();

        var network = new Network("network", NetworkArgs.builder()
            .name("datafusion-full-network")
            .build());

        var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
            .name("datafusion-ip-alloc")
            .addressType("INTERNAL")
            .purpose("VPC_PEERING")
            .prefixLength(22)
            .network(network.id())
            .build());

        var extendedInstance = new Instance("extendedInstance", InstanceArgs.builder()
            .name("my-instance")
            .description("My Data Fusion instance")
            .displayName("My Data Fusion instance")
            .region("us-central1")
            .type("BASIC")
            .enableStackdriverLogging(true)
            .enableStackdriverMonitoring(true)
            .privateInstance(true)
            .dataprocServiceAccount(default_.email())
            .labels(Map.of("example_key", "example_value"))
            .networkConfig(InstanceNetworkConfigArgs.builder()
                .network("default")
                .ipAllocation(Output.tuple(privateIpAlloc.address(), privateIpAlloc.prefixLength()).applyValue(values -> {
                    var address = values.t1;
                    var prefixLength = values.t2;
                    return String.format("%s/%s", address,prefixLength);
                }))
                .build())
            .accelerators(InstanceAcceleratorArgs.builder()
                .acceleratorType("CDC")
                .state("ENABLED")
                .build())
            .build());

    }
}
```
```yaml
resources:
  extendedInstance:
    type: gcp:datafusion:Instance
    name: extended_instance
    properties:
      name: my-instance
      description: My Data Fusion instance
      displayName: My Data Fusion instance
      region: us-central1
      type: BASIC
      enableStackdriverLogging: true
      enableStackdriverMonitoring: true
      privateInstance: true
      dataprocServiceAccount: ${default.email}
      labels:
        example_key: example_value
      networkConfig:
        network: default
        ipAllocation: ${privateIpAlloc.address}/${privateIpAlloc.prefixLength}
      accelerators:
        - acceleratorType: CDC
          state: ENABLED
  network:
    type: gcp:compute:Network
    properties:
      name: datafusion-full-network
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: datafusion-ip-alloc
      addressType: INTERNAL
      purpose: VPC_PEERING
      prefixLength: 22
      network: ${network.id}
variables:
  default:
    fn::invoke:
      function: gcp:appengine:getDefaultServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Psc


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const psc = new gcp.compute.Network("psc", {
    name: "datafusion-psc-network",
    autoCreateSubnetworks: false,
});
const pscSubnetwork = new gcp.compute.Subnetwork("psc", {
    name: "datafusion-psc-subnet",
    region: "us-central1",
    network: psc.id,
    ipCidrRange: "10.0.0.0/16",
});
const pscNetworkAttachment = new gcp.compute.NetworkAttachment("psc", {
    name: "datafusion-psc-attachment",
    region: "us-central1",
    connectionPreference: "ACCEPT_AUTOMATIC",
    subnetworks: [pscSubnetwork.selfLink],
});
const pscInstance = new gcp.datafusion.Instance("psc_instance", {
    name: "psc-instance",
    region: "us-central1",
    type: "BASIC",
    privateInstance: true,
    networkConfig: {
        connectionType: "PRIVATE_SERVICE_CONNECT_INTERFACES",
        privateServiceConnectConfig: {
            networkAttachment: pscNetworkAttachment.id,
            unreachableCidrBlock: "192.168.0.0/25",
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

psc = gcp.compute.Network("psc",
    name="datafusion-psc-network",
    auto_create_subnetworks=False)
psc_subnetwork = gcp.compute.Subnetwork("psc",
    name="datafusion-psc-subnet",
    region="us-central1",
    network=psc.id,
    ip_cidr_range="10.0.0.0/16")
psc_network_attachment = gcp.compute.NetworkAttachment("psc",
    name="datafusion-psc-attachment",
    region="us-central1",
    connection_preference="ACCEPT_AUTOMATIC",
    subnetworks=[psc_subnetwork.self_link])
psc_instance = gcp.datafusion.Instance("psc_instance",
    name="psc-instance",
    region="us-central1",
    type="BASIC",
    private_instance=True,
    network_config={
        "connection_type": "PRIVATE_SERVICE_CONNECT_INTERFACES",
        "private_service_connect_config": {
            "network_attachment": psc_network_attachment.id,
            "unreachable_cidr_block": "192.168.0.0/25",
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var psc = new Gcp.Compute.Network("psc", new()
    {
        Name = "datafusion-psc-network",
        AutoCreateSubnetworks = false,
    });

    var pscSubnetwork = new Gcp.Compute.Subnetwork("psc", new()
    {
        Name = "datafusion-psc-subnet",
        Region = "us-central1",
        Network = psc.Id,
        IpCidrRange = "10.0.0.0/16",
    });

    var pscNetworkAttachment = new Gcp.Compute.NetworkAttachment("psc", new()
    {
        Name = "datafusion-psc-attachment",
        Region = "us-central1",
        ConnectionPreference = "ACCEPT_AUTOMATIC",
        Subnetworks = new[]
        {
            pscSubnetwork.SelfLink,
        },
    });

    var pscInstance = new Gcp.DataFusion.Instance("psc_instance", new()
    {
        Name = "psc-instance",
        Region = "us-central1",
        Type = "BASIC",
        PrivateInstance = true,
        NetworkConfig = new Gcp.DataFusion.Inputs.InstanceNetworkConfigArgs
        {
            ConnectionType = "PRIVATE_SERVICE_CONNECT_INTERFACES",
            PrivateServiceConnectConfig = new Gcp.DataFusion.Inputs.InstanceNetworkConfigPrivateServiceConnectConfigArgs
            {
                NetworkAttachment = pscNetworkAttachment.Id,
                UnreachableCidrBlock = "192.168.0.0/25",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		psc, err := compute.NewNetwork(ctx, "psc", &compute.NetworkArgs{
			Name:                  pulumi.String("datafusion-psc-network"),
			AutoCreateSubnetworks: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		pscSubnetwork, err := compute.NewSubnetwork(ctx, "psc", &compute.SubnetworkArgs{
			Name:        pulumi.String("datafusion-psc-subnet"),
			Region:      pulumi.String("us-central1"),
			Network:     psc.ID(),
			IpCidrRange: pulumi.String("10.0.0.0/16"),
		})
		if err != nil {
			return err
		}
		pscNetworkAttachment, err := compute.NewNetworkAttachment(ctx, "psc", &compute.NetworkAttachmentArgs{
			Name:                 pulumi.String("datafusion-psc-attachment"),
			Region:               pulumi.String("us-central1"),
			ConnectionPreference: pulumi.String("ACCEPT_AUTOMATIC"),
			Subnetworks: pulumi.StringArray{
				pscSubnetwork.SelfLink,
			},
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "psc_instance", &datafusion.InstanceArgs{
			Name:            pulumi.String("psc-instance"),
			Region:          pulumi.String("us-central1"),
			Type:            pulumi.String("BASIC"),
			PrivateInstance: pulumi.Bool(true),
			NetworkConfig: &datafusion.InstanceNetworkConfigArgs{
				ConnectionType: pulumi.String("PRIVATE_SERVICE_CONNECT_INTERFACES"),
				PrivateServiceConnectConfig: &datafusion.InstanceNetworkConfigPrivateServiceConnectConfigArgs{
					NetworkAttachment:    pscNetworkAttachment.ID(),
					UnreachableCidrBlock: pulumi.String("192.168.0.0/25"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.compute.NetworkAttachment;
import com.pulumi.gcp.compute.NetworkAttachmentArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceNetworkConfigArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceNetworkConfigPrivateServiceConnectConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var psc = new Network("psc", NetworkArgs.builder()
            .name("datafusion-psc-network")
            .autoCreateSubnetworks(false)
            .build());

        var pscSubnetwork = new Subnetwork("pscSubnetwork", SubnetworkArgs.builder()
            .name("datafusion-psc-subnet")
            .region("us-central1")
            .network(psc.id())
            .ipCidrRange("10.0.0.0/16")
            .build());

        var pscNetworkAttachment = new NetworkAttachment("pscNetworkAttachment", NetworkAttachmentArgs.builder()
            .name("datafusion-psc-attachment")
            .region("us-central1")
            .connectionPreference("ACCEPT_AUTOMATIC")
            .subnetworks(pscSubnetwork.selfLink())
            .build());

        var pscInstance = new Instance("pscInstance", InstanceArgs.builder()
            .name("psc-instance")
            .region("us-central1")
            .type("BASIC")
            .privateInstance(true)
            .networkConfig(InstanceNetworkConfigArgs.builder()
                .connectionType("PRIVATE_SERVICE_CONNECT_INTERFACES")
                .privateServiceConnectConfig(InstanceNetworkConfigPrivateServiceConnectConfigArgs.builder()
                    .networkAttachment(pscNetworkAttachment.id())
                    .unreachableCidrBlock("192.168.0.0/25")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  pscInstance:
    type: gcp:datafusion:Instance
    name: psc_instance
    properties:
      name: psc-instance
      region: us-central1
      type: BASIC
      privateInstance: true
      networkConfig:
        connectionType: PRIVATE_SERVICE_CONNECT_INTERFACES
        privateServiceConnectConfig:
          networkAttachment: ${pscNetworkAttachment.id}
          unreachableCidrBlock: 192.168.0.0/25
  psc:
    type: gcp:compute:Network
    properties:
      name: datafusion-psc-network
      autoCreateSubnetworks: false
  pscSubnetwork:
    type: gcp:compute:Subnetwork
    name: psc
    properties:
      name: datafusion-psc-subnet
      region: us-central1
      network: ${psc.id}
      ipCidrRange: 10.0.0.0/16
  pscNetworkAttachment:
    type: gcp:compute:NetworkAttachment
    name: psc
    properties:
      name: datafusion-psc-attachment
      region: us-central1
      connectionPreference: ACCEPT_AUTOMATIC
      subnetworks:
        - ${pscSubnetwork.selfLink}
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Cmek


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const keyRing = new gcp.kms.KeyRing("key_ring", {
    name: "my-instance",
    location: "us-central1",
});
const cryptoKey = new gcp.kms.CryptoKey("crypto_key", {
    name: "my-instance",
    keyRing: keyRing.id,
});
const project = gcp.organizations.getProject({});
const cryptoKeyMember = new gcp.kms.CryptoKeyIAMMember("crypto_key_member", {
    cryptoKeyId: cryptoKey.id,
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-datafusion.iam.gserviceaccount.com`),
});
const cmek = new gcp.datafusion.Instance("cmek", {
    name: "my-instance",
    region: "us-central1",
    type: "BASIC",
    cryptoKeyConfig: {
        keyReference: cryptoKey.id,
    },
}, {
    dependsOn: [cryptoKeyMember],
});
```
```python
import pulumi
import pulumi_gcp as gcp

key_ring = gcp.kms.KeyRing("key_ring",
    name="my-instance",
    location="us-central1")
crypto_key = gcp.kms.CryptoKey("crypto_key",
    name="my-instance",
    key_ring=key_ring.id)
project = gcp.organizations.get_project()
crypto_key_member = gcp.kms.CryptoKeyIAMMember("crypto_key_member",
    crypto_key_id=crypto_key.id,
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=f"serviceAccount:service-{project.number}@gcp-sa-datafusion.iam.gserviceaccount.com")
cmek = gcp.datafusion.Instance("cmek",
    name="my-instance",
    region="us-central1",
    type="BASIC",
    crypto_key_config={
        "key_reference": crypto_key.id,
    },
    opts = pulumi.ResourceOptions(depends_on=[crypto_key_member]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var keyRing = new Gcp.Kms.KeyRing("key_ring", new()
    {
        Name = "my-instance",
        Location = "us-central1",
    });

    var cryptoKey = new Gcp.Kms.CryptoKey("crypto_key", new()
    {
        Name = "my-instance",
        KeyRing = keyRing.Id,
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    var cryptoKeyMember = new Gcp.Kms.CryptoKeyIAMMember("crypto_key_member", new()
    {
        CryptoKeyId = cryptoKey.Id,
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-datafusion.iam.gserviceaccount.com",
    });

    var cmek = new Gcp.DataFusion.Instance("cmek", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "BASIC",
        CryptoKeyConfig = new Gcp.DataFusion.Inputs.InstanceCryptoKeyConfigArgs
        {
            KeyReference = cryptoKey.Id,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            cryptoKeyMember,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		keyRing, err := kms.NewKeyRing(ctx, "key_ring", &kms.KeyRingArgs{
			Name:     pulumi.String("my-instance"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		cryptoKey, err := kms.NewCryptoKey(ctx, "crypto_key", &kms.CryptoKeyArgs{
			Name:    pulumi.String("my-instance"),
			KeyRing: keyRing.ID(),
		})
		if err != nil {
			return err
		}
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		cryptoKeyMember, err := kms.NewCryptoKeyIAMMember(ctx, "crypto_key_member", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: cryptoKey.ID(),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-datafusion.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "cmek", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Type:   pulumi.String("BASIC"),
			CryptoKeyConfig: &datafusion.InstanceCryptoKeyConfigArgs{
				KeyReference: cryptoKey.ID(),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			cryptoKeyMember,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.kms.KeyRing;
import com.pulumi.gcp.kms.KeyRingArgs;
import com.pulumi.gcp.kms.CryptoKey;
import com.pulumi.gcp.kms.CryptoKeyArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceCryptoKeyConfigArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var keyRing = new KeyRing("keyRing", KeyRingArgs.builder()
            .name("my-instance")
            .location("us-central1")
            .build());

        var cryptoKey = new CryptoKey("cryptoKey", CryptoKeyArgs.builder()
            .name("my-instance")
            .keyRing(keyRing.id())
            .build());

        final var project = OrganizationsFunctions.getProject();

        var cryptoKeyMember = new CryptoKeyIAMMember("cryptoKeyMember", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(cryptoKey.id())
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(String.format("serviceAccount:service-%s@gcp-sa-datafusion.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var cmek = new Instance("cmek", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("BASIC")
            .cryptoKeyConfig(InstanceCryptoKeyConfigArgs.builder()
                .keyReference(cryptoKey.id())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(cryptoKeyMember)
                .build());

    }
}
```
```yaml
resources:
  cmek:
    type: gcp:datafusion:Instance
    properties:
      name: my-instance
      region: us-central1
      type: BASIC
      cryptoKeyConfig:
        keyReference: ${cryptoKey.id}
    options:
      dependsOn:
        - ${cryptoKeyMember}
  cryptoKey:
    type: gcp:kms:CryptoKey
    name: crypto_key
    properties:
      name: my-instance
      keyRing: ${keyRing.id}
  keyRing:
    type: gcp:kms:KeyRing
    name: key_ring
    properties:
      name: my-instance
      location: us-central1
  cryptoKeyMember:
    type: gcp:kms:CryptoKeyIAMMember
    name: crypto_key_member
    properties:
      cryptoKeyId: ${cryptoKey.id}
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: serviceAccount:service-${project.number}@gcp-sa-datafusion.iam.gserviceaccount.com
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Enterprise


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const enterpriseInstance = new gcp.datafusion.Instance("enterprise_instance", {
    name: "my-instance",
    region: "us-central1",
    type: "ENTERPRISE",
    enableRbac: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

enterprise_instance = gcp.datafusion.Instance("enterprise_instance",
    name="my-instance",
    region="us-central1",
    type="ENTERPRISE",
    enable_rbac=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var enterpriseInstance = new Gcp.DataFusion.Instance("enterprise_instance", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "ENTERPRISE",
        EnableRbac = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datafusion.NewInstance(ctx, "enterprise_instance", &datafusion.InstanceArgs{
			Name:       pulumi.String("my-instance"),
			Region:     pulumi.String("us-central1"),
			Type:       pulumi.String("ENTERPRISE"),
			EnableRbac: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var enterpriseInstance = new Instance("enterpriseInstance", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("ENTERPRISE")
            .enableRbac(true)
            .build());

    }
}
```
```yaml
resources:
  enterpriseInstance:
    type: gcp:datafusion:Instance
    name: enterprise_instance
    properties:
      name: my-instance
      region: us-central1
      type: ENTERPRISE
      enableRbac: true
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Event


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const eventTopic = new gcp.pubsub.Topic("event", {name: "my-instance"});
const event = new gcp.datafusion.Instance("event", {
    name: "my-instance",
    region: "us-central1",
    type: "BASIC",
    eventPublishConfig: {
        enabled: true,
        topic: eventTopic.id,
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

event_topic = gcp.pubsub.Topic("event", name="my-instance")
event = gcp.datafusion.Instance("event",
    name="my-instance",
    region="us-central1",
    type="BASIC",
    event_publish_config={
        "enabled": True,
        "topic": event_topic.id,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var eventTopic = new Gcp.PubSub.Topic("event", new()
    {
        Name = "my-instance",
    });

    var @event = new Gcp.DataFusion.Instance("event", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "BASIC",
        EventPublishConfig = new Gcp.DataFusion.Inputs.InstanceEventPublishConfigArgs
        {
            Enabled = true,
            Topic = eventTopic.Id,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		eventTopic, err := pubsub.NewTopic(ctx, "event", &pubsub.TopicArgs{
			Name: pulumi.String("my-instance"),
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "event", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Type:   pulumi.String("BASIC"),
			EventPublishConfig: &datafusion.InstanceEventPublishConfigArgs{
				Enabled: pulumi.Bool(true),
				Topic:   eventTopic.ID(),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceEventPublishConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var eventTopic = new Topic("eventTopic", TopicArgs.builder()
            .name("my-instance")
            .build());

        var event = new Instance("event", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("BASIC")
            .eventPublishConfig(InstanceEventPublishConfigArgs.builder()
                .enabled(true)
                .topic(eventTopic.id())
                .build())
            .build());

    }
}
```
```yaml
resources:
  event:
    type: gcp:datafusion:Instance
    properties:
      name: my-instance
      region: us-central1
      type: BASIC
      eventPublishConfig:
        enabled: true
        topic: ${eventTopic.id}
  eventTopic:
    type: gcp:pubsub:Topic
    name: event
    properties:
      name: my-instance
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Zone


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const zone = new gcp.datafusion.Instance("zone", {
    name: "my-instance",
    region: "us-central1",
    zone: "us-central1-a",
    type: "DEVELOPER",
});
```
```python
import pulumi
import pulumi_gcp as gcp

zone = gcp.datafusion.Instance("zone",
    name="my-instance",
    region="us-central1",
    zone="us-central1-a",
    type="DEVELOPER")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var zone = new Gcp.DataFusion.Instance("zone", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Zone = "us-central1-a",
        Type = "DEVELOPER",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datafusion.NewInstance(ctx, "zone", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Zone:   pulumi.String("us-central1-a"),
			Type:   pulumi.String("DEVELOPER"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var zone = new Instance("zone", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .zone("us-central1-a")
            .type("DEVELOPER")
            .build());

    }
}
```
```yaml
resources:
  zone:
    type: gcp:datafusion:Instance
    properties:
      name: my-instance
      region: us-central1
      zone: us-central1-a
      type: DEVELOPER
```
<!--End PulumiCodeChooser -->

## Import

Instance can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/instances/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/instanceIamMember:InstanceIamMember default projects/{{project}}/locations/{{region}}/instances/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/instanceIamMember:InstanceIamMember default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/instanceIamMember:InstanceIamMember default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/instanceIamMember:InstanceIamMember default {{name}}
```

Ѕ
	condition|Bz:x
v
securitycenterInstanceIamMemberConditionHgcp:securitycenter/InstanceIamMemberCondition:InstanceIamMemberCondition
member" W
nameB" IThe ID of the instance or a fully qualified identifier for the instance.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
8
regionB" (The region of the Data Fusion instance.


role" "Ѕ
	condition|Bz:x
v
securitycenterInstanceIamMemberConditionHgcp:securitycenter/InstanceIamMemberCondition:InstanceIamMemberCondition"

etag" "
member" "U
name" IThe ID of the instance or a fully qualified identifier for the instance.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"6
region" (The region of the Data Fusion instance.
"

role" *Г│
[
securitycenterInstanceIamPolicy6gcp:securitycenter/instanceIamPolicy:InstanceIamPolicyѓ«Represents a Data Fusion instance.


To get more information about Instance, see:

* [API documentation](https://cloud.google.com/data-fusion/docs/reference/rest/v1beta1/projects.locations.instances)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/data-fusion/docs/)

## Example Usage

### Data Fusion Instance Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const basicInstance = new gcp.datafusion.Instance("basic_instance", {
    name: "my-instance",
    region: "us-central1",
    type: "BASIC",
});
```
```python
import pulumi
import pulumi_gcp as gcp

basic_instance = gcp.datafusion.Instance("basic_instance",
    name="my-instance",
    region="us-central1",
    type="BASIC")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var basicInstance = new Gcp.DataFusion.Instance("basic_instance", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "BASIC",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datafusion.NewInstance(ctx, "basic_instance", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Type:   pulumi.String("BASIC"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var basicInstance = new Instance("basicInstance", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("BASIC")
            .build());

    }
}
```
```yaml
resources:
  basicInstance:
    type: gcp:datafusion:Instance
    name: basic_instance
    properties:
      name: my-instance
      region: us-central1
      type: BASIC
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.appengine.getDefaultServiceAccount({});
const network = new gcp.compute.Network("network", {name: "datafusion-full-network"});
const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
    name: "datafusion-ip-alloc",
    addressType: "INTERNAL",
    purpose: "VPC_PEERING",
    prefixLength: 22,
    network: network.id,
});
const extendedInstance = new gcp.datafusion.Instance("extended_instance", {
    name: "my-instance",
    description: "My Data Fusion instance",
    displayName: "My Data Fusion instance",
    region: "us-central1",
    type: "BASIC",
    enableStackdriverLogging: true,
    enableStackdriverMonitoring: true,
    privateInstance: true,
    dataprocServiceAccount: _default.then(_default => _default.email),
    labels: {
        example_key: "example_value",
    },
    networkConfig: {
        network: "default",
        ipAllocation: pulumi.interpolate`${privateIpAlloc.address}/${privateIpAlloc.prefixLength}`,
    },
    accelerators: [{
        acceleratorType: "CDC",
        state: "ENABLED",
    }],
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.appengine.get_default_service_account()
network = gcp.compute.Network("network", name="datafusion-full-network")
private_ip_alloc = gcp.compute.GlobalAddress("private_ip_alloc",
    name="datafusion-ip-alloc",
    address_type="INTERNAL",
    purpose="VPC_PEERING",
    prefix_length=22,
    network=network.id)
extended_instance = gcp.datafusion.Instance("extended_instance",
    name="my-instance",
    description="My Data Fusion instance",
    display_name="My Data Fusion instance",
    region="us-central1",
    type="BASIC",
    enable_stackdriver_logging=True,
    enable_stackdriver_monitoring=True,
    private_instance=True,
    dataproc_service_account=default.email,
    labels={
        "example_key": "example_value",
    },
    network_config={
        "network": "default",
        "ip_allocation": pulumi.Output.all(
            address=private_ip_alloc.address,
            prefix_length=private_ip_alloc.prefix_length
).apply(lambda resolved_outputs: f"{resolved_outputs['address']}/{resolved_outputs['prefix_length']}")
,
    },
    accelerators=[{
        "accelerator_type": "CDC",
        "state": "ENABLED",
    }])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.AppEngine.GetDefaultServiceAccount.Invoke();

    var network = new Gcp.Compute.Network("network", new()
    {
        Name = "datafusion-full-network",
    });

    var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    {
        Name = "datafusion-ip-alloc",
        AddressType = "INTERNAL",
        Purpose = "VPC_PEERING",
        PrefixLength = 22,
        Network = network.Id,
    });

    var extendedInstance = new Gcp.DataFusion.Instance("extended_instance", new()
    {
        Name = "my-instance",
        Description = "My Data Fusion instance",
        DisplayName = "My Data Fusion instance",
        Region = "us-central1",
        Type = "BASIC",
        EnableStackdriverLogging = true,
        EnableStackdriverMonitoring = true,
        PrivateInstance = true,
        DataprocServiceAccount = @default.Apply(@default => @default.Apply(getDefaultServiceAccountResult => getDefaultServiceAccountResult.Email)),
        Labels = 
        {
            { "example_key", "example_value" },
        },
        NetworkConfig = new Gcp.DataFusion.Inputs.InstanceNetworkConfigArgs
        {
            Network = "default",
            IpAllocation = Output.Tuple(privateIpAlloc.Address, privateIpAlloc.PrefixLength).Apply(values =>
            {
                var address = values.Item1;
                var prefixLength = values.Item2;
                return $"{address}/{prefixLength}";
            }),
        },
        Accelerators = new[]
        {
            new Gcp.DataFusion.Inputs.InstanceAcceleratorArgs
            {
                AcceleratorType = "CDC",
                State = "ENABLED",
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/appengine"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := appengine.GetDefaultServiceAccount(ctx, &appengine.GetDefaultServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
			Name: pulumi.String("datafusion-full-network"),
		})
		if err != nil {
			return err
		}
		privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
			Name:         pulumi.String("datafusion-ip-alloc"),
			AddressType:  pulumi.String("INTERNAL"),
			Purpose:      pulumi.String("VPC_PEERING"),
			PrefixLength: pulumi.Int(22),
			Network:      network.ID(),
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "extended_instance", &datafusion.InstanceArgs{
			Name:                        pulumi.String("my-instance"),
			Description:                 pulumi.String("My Data Fusion instance"),
			DisplayName:                 pulumi.String("My Data Fusion instance"),
			Region:                      pulumi.String("us-central1"),
			Type:                        pulumi.String("BASIC"),
			EnableStackdriverLogging:    pulumi.Bool(true),
			EnableStackdriverMonitoring: pulumi.Bool(true),
			PrivateInstance:             pulumi.Bool(true),
			DataprocServiceAccount:      pulumi.String(_default.Email),
			Labels: pulumi.StringMap{
				"example_key": pulumi.String("example_value"),
			},
			NetworkConfig: &datafusion.InstanceNetworkConfigArgs{
				Network: pulumi.String("default"),
				IpAllocation: pulumi.All(privateIpAlloc.Address, privateIpAlloc.PrefixLength).ApplyT(func(_args []interface{}) (string, error) {
					address := _args[0].(string)
					prefixLength := _args[1].(int)
					return fmt.Sprintf("%v/%v", address, prefixLength), nil
				}).(pulumi.StringOutput),
			},
			Accelerators: datafusion.InstanceAcceleratorArray{
				&datafusion.InstanceAcceleratorArgs{
					AcceleratorType: pulumi.String("CDC"),
					State:           pulumi.String("ENABLED"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.appengine.AppengineFunctions;
import com.pulumi.gcp.appengine.inputs.GetDefaultServiceAccountArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceNetworkConfigArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceAcceleratorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = AppengineFunctions.getDefaultServiceAccount();

        var network = new Network("network", NetworkArgs.builder()
            .name("datafusion-full-network")
            .build());

        var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
            .name("datafusion-ip-alloc")
            .addressType("INTERNAL")
            .purpose("VPC_PEERING")
            .prefixLength(22)
            .network(network.id())
            .build());

        var extendedInstance = new Instance("extendedInstance", InstanceArgs.builder()
            .name("my-instance")
            .description("My Data Fusion instance")
            .displayName("My Data Fusion instance")
            .region("us-central1")
            .type("BASIC")
            .enableStackdriverLogging(true)
            .enableStackdriverMonitoring(true)
            .privateInstance(true)
            .dataprocServiceAccount(default_.email())
            .labels(Map.of("example_key", "example_value"))
            .networkConfig(InstanceNetworkConfigArgs.builder()
                .network("default")
                .ipAllocation(Output.tuple(privateIpAlloc.address(), privateIpAlloc.prefixLength()).applyValue(values -> {
                    var address = values.t1;
                    var prefixLength = values.t2;
                    return String.format("%s/%s", address,prefixLength);
                }))
                .build())
            .accelerators(InstanceAcceleratorArgs.builder()
                .acceleratorType("CDC")
                .state("ENABLED")
                .build())
            .build());

    }
}
```
```yaml
resources:
  extendedInstance:
    type: gcp:datafusion:Instance
    name: extended_instance
    properties:
      name: my-instance
      description: My Data Fusion instance
      displayName: My Data Fusion instance
      region: us-central1
      type: BASIC
      enableStackdriverLogging: true
      enableStackdriverMonitoring: true
      privateInstance: true
      dataprocServiceAccount: ${default.email}
      labels:
        example_key: example_value
      networkConfig:
        network: default
        ipAllocation: ${privateIpAlloc.address}/${privateIpAlloc.prefixLength}
      accelerators:
        - acceleratorType: CDC
          state: ENABLED
  network:
    type: gcp:compute:Network
    properties:
      name: datafusion-full-network
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: datafusion-ip-alloc
      addressType: INTERNAL
      purpose: VPC_PEERING
      prefixLength: 22
      network: ${network.id}
variables:
  default:
    fn::invoke:
      function: gcp:appengine:getDefaultServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Psc


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const psc = new gcp.compute.Network("psc", {
    name: "datafusion-psc-network",
    autoCreateSubnetworks: false,
});
const pscSubnetwork = new gcp.compute.Subnetwork("psc", {
    name: "datafusion-psc-subnet",
    region: "us-central1",
    network: psc.id,
    ipCidrRange: "10.0.0.0/16",
});
const pscNetworkAttachment = new gcp.compute.NetworkAttachment("psc", {
    name: "datafusion-psc-attachment",
    region: "us-central1",
    connectionPreference: "ACCEPT_AUTOMATIC",
    subnetworks: [pscSubnetwork.selfLink],
});
const pscInstance = new gcp.datafusion.Instance("psc_instance", {
    name: "psc-instance",
    region: "us-central1",
    type: "BASIC",
    privateInstance: true,
    networkConfig: {
        connectionType: "PRIVATE_SERVICE_CONNECT_INTERFACES",
        privateServiceConnectConfig: {
            networkAttachment: pscNetworkAttachment.id,
            unreachableCidrBlock: "192.168.0.0/25",
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

psc = gcp.compute.Network("psc",
    name="datafusion-psc-network",
    auto_create_subnetworks=False)
psc_subnetwork = gcp.compute.Subnetwork("psc",
    name="datafusion-psc-subnet",
    region="us-central1",
    network=psc.id,
    ip_cidr_range="10.0.0.0/16")
psc_network_attachment = gcp.compute.NetworkAttachment("psc",
    name="datafusion-psc-attachment",
    region="us-central1",
    connection_preference="ACCEPT_AUTOMATIC",
    subnetworks=[psc_subnetwork.self_link])
psc_instance = gcp.datafusion.Instance("psc_instance",
    name="psc-instance",
    region="us-central1",
    type="BASIC",
    private_instance=True,
    network_config={
        "connection_type": "PRIVATE_SERVICE_CONNECT_INTERFACES",
        "private_service_connect_config": {
            "network_attachment": psc_network_attachment.id,
            "unreachable_cidr_block": "192.168.0.0/25",
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var psc = new Gcp.Compute.Network("psc", new()
    {
        Name = "datafusion-psc-network",
        AutoCreateSubnetworks = false,
    });

    var pscSubnetwork = new Gcp.Compute.Subnetwork("psc", new()
    {
        Name = "datafusion-psc-subnet",
        Region = "us-central1",
        Network = psc.Id,
        IpCidrRange = "10.0.0.0/16",
    });

    var pscNetworkAttachment = new Gcp.Compute.NetworkAttachment("psc", new()
    {
        Name = "datafusion-psc-attachment",
        Region = "us-central1",
        ConnectionPreference = "ACCEPT_AUTOMATIC",
        Subnetworks = new[]
        {
            pscSubnetwork.SelfLink,
        },
    });

    var pscInstance = new Gcp.DataFusion.Instance("psc_instance", new()
    {
        Name = "psc-instance",
        Region = "us-central1",
        Type = "BASIC",
        PrivateInstance = true,
        NetworkConfig = new Gcp.DataFusion.Inputs.InstanceNetworkConfigArgs
        {
            ConnectionType = "PRIVATE_SERVICE_CONNECT_INTERFACES",
            PrivateServiceConnectConfig = new Gcp.DataFusion.Inputs.InstanceNetworkConfigPrivateServiceConnectConfigArgs
            {
                NetworkAttachment = pscNetworkAttachment.Id,
                UnreachableCidrBlock = "192.168.0.0/25",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		psc, err := compute.NewNetwork(ctx, "psc", &compute.NetworkArgs{
			Name:                  pulumi.String("datafusion-psc-network"),
			AutoCreateSubnetworks: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		pscSubnetwork, err := compute.NewSubnetwork(ctx, "psc", &compute.SubnetworkArgs{
			Name:        pulumi.String("datafusion-psc-subnet"),
			Region:      pulumi.String("us-central1"),
			Network:     psc.ID(),
			IpCidrRange: pulumi.String("10.0.0.0/16"),
		})
		if err != nil {
			return err
		}
		pscNetworkAttachment, err := compute.NewNetworkAttachment(ctx, "psc", &compute.NetworkAttachmentArgs{
			Name:                 pulumi.String("datafusion-psc-attachment"),
			Region:               pulumi.String("us-central1"),
			ConnectionPreference: pulumi.String("ACCEPT_AUTOMATIC"),
			Subnetworks: pulumi.StringArray{
				pscSubnetwork.SelfLink,
			},
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "psc_instance", &datafusion.InstanceArgs{
			Name:            pulumi.String("psc-instance"),
			Region:          pulumi.String("us-central1"),
			Type:            pulumi.String("BASIC"),
			PrivateInstance: pulumi.Bool(true),
			NetworkConfig: &datafusion.InstanceNetworkConfigArgs{
				ConnectionType: pulumi.String("PRIVATE_SERVICE_CONNECT_INTERFACES"),
				PrivateServiceConnectConfig: &datafusion.InstanceNetworkConfigPrivateServiceConnectConfigArgs{
					NetworkAttachment:    pscNetworkAttachment.ID(),
					UnreachableCidrBlock: pulumi.String("192.168.0.0/25"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.compute.NetworkAttachment;
import com.pulumi.gcp.compute.NetworkAttachmentArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceNetworkConfigArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceNetworkConfigPrivateServiceConnectConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var psc = new Network("psc", NetworkArgs.builder()
            .name("datafusion-psc-network")
            .autoCreateSubnetworks(false)
            .build());

        var pscSubnetwork = new Subnetwork("pscSubnetwork", SubnetworkArgs.builder()
            .name("datafusion-psc-subnet")
            .region("us-central1")
            .network(psc.id())
            .ipCidrRange("10.0.0.0/16")
            .build());

        var pscNetworkAttachment = new NetworkAttachment("pscNetworkAttachment", NetworkAttachmentArgs.builder()
            .name("datafusion-psc-attachment")
            .region("us-central1")
            .connectionPreference("ACCEPT_AUTOMATIC")
            .subnetworks(pscSubnetwork.selfLink())
            .build());

        var pscInstance = new Instance("pscInstance", InstanceArgs.builder()
            .name("psc-instance")
            .region("us-central1")
            .type("BASIC")
            .privateInstance(true)
            .networkConfig(InstanceNetworkConfigArgs.builder()
                .connectionType("PRIVATE_SERVICE_CONNECT_INTERFACES")
                .privateServiceConnectConfig(InstanceNetworkConfigPrivateServiceConnectConfigArgs.builder()
                    .networkAttachment(pscNetworkAttachment.id())
                    .unreachableCidrBlock("192.168.0.0/25")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  pscInstance:
    type: gcp:datafusion:Instance
    name: psc_instance
    properties:
      name: psc-instance
      region: us-central1
      type: BASIC
      privateInstance: true
      networkConfig:
        connectionType: PRIVATE_SERVICE_CONNECT_INTERFACES
        privateServiceConnectConfig:
          networkAttachment: ${pscNetworkAttachment.id}
          unreachableCidrBlock: 192.168.0.0/25
  psc:
    type: gcp:compute:Network
    properties:
      name: datafusion-psc-network
      autoCreateSubnetworks: false
  pscSubnetwork:
    type: gcp:compute:Subnetwork
    name: psc
    properties:
      name: datafusion-psc-subnet
      region: us-central1
      network: ${psc.id}
      ipCidrRange: 10.0.0.0/16
  pscNetworkAttachment:
    type: gcp:compute:NetworkAttachment
    name: psc
    properties:
      name: datafusion-psc-attachment
      region: us-central1
      connectionPreference: ACCEPT_AUTOMATIC
      subnetworks:
        - ${pscSubnetwork.selfLink}
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Cmek


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const keyRing = new gcp.kms.KeyRing("key_ring", {
    name: "my-instance",
    location: "us-central1",
});
const cryptoKey = new gcp.kms.CryptoKey("crypto_key", {
    name: "my-instance",
    keyRing: keyRing.id,
});
const project = gcp.organizations.getProject({});
const cryptoKeyMember = new gcp.kms.CryptoKeyIAMMember("crypto_key_member", {
    cryptoKeyId: cryptoKey.id,
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-datafusion.iam.gserviceaccount.com`),
});
const cmek = new gcp.datafusion.Instance("cmek", {
    name: "my-instance",
    region: "us-central1",
    type: "BASIC",
    cryptoKeyConfig: {
        keyReference: cryptoKey.id,
    },
}, {
    dependsOn: [cryptoKeyMember],
});
```
```python
import pulumi
import pulumi_gcp as gcp

key_ring = gcp.kms.KeyRing("key_ring",
    name="my-instance",
    location="us-central1")
crypto_key = gcp.kms.CryptoKey("crypto_key",
    name="my-instance",
    key_ring=key_ring.id)
project = gcp.organizations.get_project()
crypto_key_member = gcp.kms.CryptoKeyIAMMember("crypto_key_member",
    crypto_key_id=crypto_key.id,
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=f"serviceAccount:service-{project.number}@gcp-sa-datafusion.iam.gserviceaccount.com")
cmek = gcp.datafusion.Instance("cmek",
    name="my-instance",
    region="us-central1",
    type="BASIC",
    crypto_key_config={
        "key_reference": crypto_key.id,
    },
    opts = pulumi.ResourceOptions(depends_on=[crypto_key_member]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var keyRing = new Gcp.Kms.KeyRing("key_ring", new()
    {
        Name = "my-instance",
        Location = "us-central1",
    });

    var cryptoKey = new Gcp.Kms.CryptoKey("crypto_key", new()
    {
        Name = "my-instance",
        KeyRing = keyRing.Id,
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    var cryptoKeyMember = new Gcp.Kms.CryptoKeyIAMMember("crypto_key_member", new()
    {
        CryptoKeyId = cryptoKey.Id,
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-datafusion.iam.gserviceaccount.com",
    });

    var cmek = new Gcp.DataFusion.Instance("cmek", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "BASIC",
        CryptoKeyConfig = new Gcp.DataFusion.Inputs.InstanceCryptoKeyConfigArgs
        {
            KeyReference = cryptoKey.Id,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            cryptoKeyMember,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		keyRing, err := kms.NewKeyRing(ctx, "key_ring", &kms.KeyRingArgs{
			Name:     pulumi.String("my-instance"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		cryptoKey, err := kms.NewCryptoKey(ctx, "crypto_key", &kms.CryptoKeyArgs{
			Name:    pulumi.String("my-instance"),
			KeyRing: keyRing.ID(),
		})
		if err != nil {
			return err
		}
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		cryptoKeyMember, err := kms.NewCryptoKeyIAMMember(ctx, "crypto_key_member", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: cryptoKey.ID(),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-datafusion.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "cmek", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Type:   pulumi.String("BASIC"),
			CryptoKeyConfig: &datafusion.InstanceCryptoKeyConfigArgs{
				KeyReference: cryptoKey.ID(),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			cryptoKeyMember,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.kms.KeyRing;
import com.pulumi.gcp.kms.KeyRingArgs;
import com.pulumi.gcp.kms.CryptoKey;
import com.pulumi.gcp.kms.CryptoKeyArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceCryptoKeyConfigArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var keyRing = new KeyRing("keyRing", KeyRingArgs.builder()
            .name("my-instance")
            .location("us-central1")
            .build());

        var cryptoKey = new CryptoKey("cryptoKey", CryptoKeyArgs.builder()
            .name("my-instance")
            .keyRing(keyRing.id())
            .build());

        final var project = OrganizationsFunctions.getProject();

        var cryptoKeyMember = new CryptoKeyIAMMember("cryptoKeyMember", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(cryptoKey.id())
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(String.format("serviceAccount:service-%s@gcp-sa-datafusion.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var cmek = new Instance("cmek", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("BASIC")
            .cryptoKeyConfig(InstanceCryptoKeyConfigArgs.builder()
                .keyReference(cryptoKey.id())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(cryptoKeyMember)
                .build());

    }
}
```
```yaml
resources:
  cmek:
    type: gcp:datafusion:Instance
    properties:
      name: my-instance
      region: us-central1
      type: BASIC
      cryptoKeyConfig:
        keyReference: ${cryptoKey.id}
    options:
      dependsOn:
        - ${cryptoKeyMember}
  cryptoKey:
    type: gcp:kms:CryptoKey
    name: crypto_key
    properties:
      name: my-instance
      keyRing: ${keyRing.id}
  keyRing:
    type: gcp:kms:KeyRing
    name: key_ring
    properties:
      name: my-instance
      location: us-central1
  cryptoKeyMember:
    type: gcp:kms:CryptoKeyIAMMember
    name: crypto_key_member
    properties:
      cryptoKeyId: ${cryptoKey.id}
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: serviceAccount:service-${project.number}@gcp-sa-datafusion.iam.gserviceaccount.com
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Enterprise


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const enterpriseInstance = new gcp.datafusion.Instance("enterprise_instance", {
    name: "my-instance",
    region: "us-central1",
    type: "ENTERPRISE",
    enableRbac: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

enterprise_instance = gcp.datafusion.Instance("enterprise_instance",
    name="my-instance",
    region="us-central1",
    type="ENTERPRISE",
    enable_rbac=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var enterpriseInstance = new Gcp.DataFusion.Instance("enterprise_instance", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "ENTERPRISE",
        EnableRbac = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datafusion.NewInstance(ctx, "enterprise_instance", &datafusion.InstanceArgs{
			Name:       pulumi.String("my-instance"),
			Region:     pulumi.String("us-central1"),
			Type:       pulumi.String("ENTERPRISE"),
			EnableRbac: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var enterpriseInstance = new Instance("enterpriseInstance", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("ENTERPRISE")
            .enableRbac(true)
            .build());

    }
}
```
```yaml
resources:
  enterpriseInstance:
    type: gcp:datafusion:Instance
    name: enterprise_instance
    properties:
      name: my-instance
      region: us-central1
      type: ENTERPRISE
      enableRbac: true
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Event


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const eventTopic = new gcp.pubsub.Topic("event", {name: "my-instance"});
const event = new gcp.datafusion.Instance("event", {
    name: "my-instance",
    region: "us-central1",
    type: "BASIC",
    eventPublishConfig: {
        enabled: true,
        topic: eventTopic.id,
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

event_topic = gcp.pubsub.Topic("event", name="my-instance")
event = gcp.datafusion.Instance("event",
    name="my-instance",
    region="us-central1",
    type="BASIC",
    event_publish_config={
        "enabled": True,
        "topic": event_topic.id,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var eventTopic = new Gcp.PubSub.Topic("event", new()
    {
        Name = "my-instance",
    });

    var @event = new Gcp.DataFusion.Instance("event", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Type = "BASIC",
        EventPublishConfig = new Gcp.DataFusion.Inputs.InstanceEventPublishConfigArgs
        {
            Enabled = true,
            Topic = eventTopic.Id,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		eventTopic, err := pubsub.NewTopic(ctx, "event", &pubsub.TopicArgs{
			Name: pulumi.String("my-instance"),
		})
		if err != nil {
			return err
		}
		_, err = datafusion.NewInstance(ctx, "event", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Type:   pulumi.String("BASIC"),
			EventPublishConfig: &datafusion.InstanceEventPublishConfigArgs{
				Enabled: pulumi.Bool(true),
				Topic:   eventTopic.ID(),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import com.pulumi.gcp.datafusion.inputs.InstanceEventPublishConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var eventTopic = new Topic("eventTopic", TopicArgs.builder()
            .name("my-instance")
            .build());

        var event = new Instance("event", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .type("BASIC")
            .eventPublishConfig(InstanceEventPublishConfigArgs.builder()
                .enabled(true)
                .topic(eventTopic.id())
                .build())
            .build());

    }
}
```
```yaml
resources:
  event:
    type: gcp:datafusion:Instance
    properties:
      name: my-instance
      region: us-central1
      type: BASIC
      eventPublishConfig:
        enabled: true
        topic: ${eventTopic.id}
  eventTopic:
    type: gcp:pubsub:Topic
    name: event
    properties:
      name: my-instance
```
<!--End PulumiCodeChooser -->
### Data Fusion Instance Zone


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const zone = new gcp.datafusion.Instance("zone", {
    name: "my-instance",
    region: "us-central1",
    zone: "us-central1-a",
    type: "DEVELOPER",
});
```
```python
import pulumi
import pulumi_gcp as gcp

zone = gcp.datafusion.Instance("zone",
    name="my-instance",
    region="us-central1",
    zone="us-central1-a",
    type="DEVELOPER")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var zone = new Gcp.DataFusion.Instance("zone", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        Zone = "us-central1-a",
        Type = "DEVELOPER",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/datafusion"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := datafusion.NewInstance(ctx, "zone", &datafusion.InstanceArgs{
			Name:   pulumi.String("my-instance"),
			Region: pulumi.String("us-central1"),
			Zone:   pulumi.String("us-central1-a"),
			Type:   pulumi.String("DEVELOPER"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.datafusion.Instance;
import com.pulumi.gcp.datafusion.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var zone = new Instance("zone", InstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .zone("us-central1-a")
            .type("DEVELOPER")
            .build());

    }
}
```
```yaml
resources:
  zone:
    type: gcp:datafusion:Instance
    properties:
      name: my-instance
      region: us-central1
      zone: us-central1-a
      type: DEVELOPER
```
<!--End PulumiCodeChooser -->

## Import

Instance can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/instances/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/instanceIamPolicy:InstanceIamPolicy default projects/{{project}}/locations/{{region}}/instances/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/instanceIamPolicy:InstanceIamPolicy default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/instanceIamPolicy:InstanceIamPolicy default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/instanceIamPolicy:InstanceIamPolicy default {{name}}
```

W
nameB" IThe ID of the instance or a fully qualified identifier for the instance.


policyData" {
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
8
regionB" (The region of the Data Fusion instance.
"

etag" "U
name" IThe ID of the instance or a fully qualified identifier for the instance.
"

policyData" "y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"6
region" (The region of the Data Fusion instance.
*э╦
┴
securitycenter3ManagementFolderSecurityHealthAnalyticsCustomModulezgcp:securitycenter/managementFolderSecurityHealthAnalyticsCustomModule:ManagementFolderSecurityHealthAnalyticsCustomModuleЬ│Represents an instance of a Security Health Analytics custom module, including
its full module name, display name, enablement state, and last updated time.
You can create a custom module at the organization, folder, or project level.
Custom modules that you create at the organization or folder level are inherited
by the child folders and projects.


To get more information about FolderSecurityHealthAnalyticsCustomModule, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/security-center-management/rest/v1/folders.locations.securityHealthAnalyticsCustomModules)
* How-to Guides
    * [Overview of custom modules for Security Health Analytics](https://cloud.google.com/security-command-center/docs/custom-modules-sha-overview)

## Example Usage

### Scc Management Folder Security Health Analytics Custom Module Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const folder = new gcp.organizations.Folder("folder", {
    parent: "organizations/123456789",
    displayName: "folder-name",
    deletionProtection: false,
});
const example = new gcp.securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModule("example", {
    folder: folder.folderId,
    location: "global",
    displayName: "basic_custom_module",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        description: "The rotation period of the identified cryptokey resource exceeds 30 days.",
        recommendation: "Set the rotation period to at most 30 days.",
        severity: "MEDIUM",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

folder = gcp.organizations.Folder("folder",
    parent="organizations/123456789",
    display_name="folder-name",
    deletion_protection=False)
example = gcp.securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModule("example",
    folder=folder.folder_id,
    location="global",
    display_name="basic_custom_module",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "description": "The rotation period of the identified cryptokey resource exceeds 30 days.",
        "recommendation": "Set the rotation period to at most 30 days.",
        "severity": "MEDIUM",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var folder = new Gcp.Organizations.Folder("folder", new()
    {
        Parent = "organizations/123456789",
        DisplayName = "folder-name",
        DeletionProtection = false,
    });

    var example = new Gcp.SecurityCenter.ManagementFolderSecurityHealthAnalyticsCustomModule("example", new()
    {
        Folder = folder.FolderId,
        Location = "global",
        DisplayName = "basic_custom_module",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Description = "The rotation period of the identified cryptokey resource exceeds 30 days.",
            Recommendation = "Set the rotation period to at most 30 days.",
            Severity = "MEDIUM",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		folder, err := organizations.NewFolder(ctx, "folder", &organizations.FolderArgs{
			Parent:             pulumi.String("organizations/123456789"),
			DisplayName:        pulumi.String("folder-name"),
			DeletionProtection: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewManagementFolderSecurityHealthAnalyticsCustomModule(ctx, "example", &securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleArgs{
			Folder:          folder.FolderId,
			Location:        pulumi.String("global"),
			DisplayName:     pulumi.String("basic_custom_module"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs{
					Expression: pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
				},
				ResourceSelector: &securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Description:    pulumi.String("The rotation period of the identified cryptokey resource exceeds 30 days."),
				Recommendation: pulumi.String("Set the rotation period to at most 30 days."),
				Severity:       pulumi.String("MEDIUM"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Folder;
import com.pulumi.gcp.organizations.FolderArgs;
import com.pulumi.gcp.securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModule;
import com.pulumi.gcp.securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var folder = new Folder("folder", FolderArgs.builder()
            .parent("organizations/123456789")
            .displayName("folder-name")
            .deletionProtection(false)
            .build());

        var example = new ManagementFolderSecurityHealthAnalyticsCustomModule("example", ManagementFolderSecurityHealthAnalyticsCustomModuleArgs.builder()
            .folder(folder.folderId())
            .location("global")
            .displayName("basic_custom_module")
            .enablementState("ENABLED")
            .customConfig(ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigArgs.builder()
                .predicate(ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .build())
                .resourceSelector(ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .description("The rotation period of the identified cryptokey resource exceeds 30 days.")
                .recommendation("Set the rotation period to at most 30 days.")
                .severity("MEDIUM")
                .build())
            .build());

    }
}
```
```yaml
resources:
  folder:
    type: gcp:organizations:Folder
    properties:
      parent: organizations/123456789
      displayName: folder-name
      deletionProtection: false
  example:
    type: gcp:securitycenter:ManagementFolderSecurityHealthAnalyticsCustomModule
    properties:
      folder: ${folder.folderId}
      location: global
      displayName: basic_custom_module
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        description: The rotation period of the identified cryptokey resource exceeds 30 days.
        recommendation: Set the rotation period to at most 30 days.
        severity: MEDIUM
```
<!--End PulumiCodeChooser -->
### Scc Management Folder Security Health Analytics Custom Module Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const folder = new gcp.organizations.Folder("folder", {
    parent: "organizations/123456789",
    displayName: "folder-name",
    deletionProtection: false,
});
const example = new gcp.securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModule("example", {
    folder: folder.folderId,
    location: "global",
    displayName: "full_custom_module",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
            title: "Purpose of the expression",
            description: "description of the expression",
            location: "location of the expression",
        },
        customOutput: {
            properties: [{
                name: "duration",
                valueExpression: {
                    expression: "resource.rotationPeriod",
                    title: "Purpose of the expression",
                    description: "description of the expression",
                    location: "location of the expression",
                },
            }],
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        severity: "LOW",
        description: "Description of the custom module",
        recommendation: "Steps to resolve violation",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

folder = gcp.organizations.Folder("folder",
    parent="organizations/123456789",
    display_name="folder-name",
    deletion_protection=False)
example = gcp.securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModule("example",
    folder=folder.folder_id,
    location="global",
    display_name="full_custom_module",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
            "title": "Purpose of the expression",
            "description": "description of the expression",
            "location": "location of the expression",
        },
        "custom_output": {
            "properties": [{
                "name": "duration",
                "value_expression": {
                    "expression": "resource.rotationPeriod",
                    "title": "Purpose of the expression",
                    "description": "description of the expression",
                    "location": "location of the expression",
                },
            }],
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "severity": "LOW",
        "description": "Description of the custom module",
        "recommendation": "Steps to resolve violation",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var folder = new Gcp.Organizations.Folder("folder", new()
    {
        Parent = "organizations/123456789",
        DisplayName = "folder-name",
        DeletionProtection = false,
    });

    var example = new Gcp.SecurityCenter.ManagementFolderSecurityHealthAnalyticsCustomModule("example", new()
    {
        Folder = folder.FolderId,
        Location = "global",
        DisplayName = "full_custom_module",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
                Title = "Purpose of the expression",
                Description = "description of the expression",
                Location = "location of the expression",
            },
            CustomOutput = new Gcp.SecurityCenter.Inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs
            {
                Properties = new[]
                {
                    new Gcp.SecurityCenter.Inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArgs
                    {
                        Name = "duration",
                        ValueExpression = new Gcp.SecurityCenter.Inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs
                        {
                            Expression = "resource.rotationPeriod",
                            Title = "Purpose of the expression",
                            Description = "description of the expression",
                            Location = "location of the expression",
                        },
                    },
                },
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Severity = "LOW",
            Description = "Description of the custom module",
            Recommendation = "Steps to resolve violation",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		folder, err := organizations.NewFolder(ctx, "folder", &organizations.FolderArgs{
			Parent:             pulumi.String("organizations/123456789"),
			DisplayName:        pulumi.String("folder-name"),
			DeletionProtection: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewManagementFolderSecurityHealthAnalyticsCustomModule(ctx, "example", &securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleArgs{
			Folder:          folder.FolderId,
			Location:        pulumi.String("global"),
			DisplayName:     pulumi.String("full_custom_module"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs{
					Expression:  pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
					Title:       pulumi.String("Purpose of the expression"),
					Description: pulumi.String("description of the expression"),
					Location:    pulumi.String("location of the expression"),
				},
				CustomOutput: securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs{
					Properties: securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArray{
						&securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArgs{
							Name: pulumi.String("duration"),
							ValueExpression: &securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs{
								Expression:  pulumi.String("resource.rotationPeriod"),
								Title:       pulumi.String("Purpose of the expression"),
								Description: pulumi.String("description of the expression"),
								Location:    pulumi.String("location of the expression"),
							},
						},
					},
				},
				ResourceSelector: &securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Severity:       pulumi.String("LOW"),
				Description:    pulumi.String("Description of the custom module"),
				Recommendation: pulumi.String("Steps to resolve violation"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Folder;
import com.pulumi.gcp.organizations.FolderArgs;
import com.pulumi.gcp.securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModule;
import com.pulumi.gcp.securitycenter.ManagementFolderSecurityHealthAnalyticsCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var folder = new Folder("folder", FolderArgs.builder()
            .parent("organizations/123456789")
            .displayName("folder-name")
            .deletionProtection(false)
            .build());

        var example = new ManagementFolderSecurityHealthAnalyticsCustomModule("example", ManagementFolderSecurityHealthAnalyticsCustomModuleArgs.builder()
            .folder(folder.folderId())
            .location("global")
            .displayName("full_custom_module")
            .enablementState("ENABLED")
            .customConfig(ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigArgs.builder()
                .predicate(ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .title("Purpose of the expression")
                    .description("description of the expression")
                    .location("location of the expression")
                    .build())
                .customOutput(ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs.builder()
                    .properties(ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArgs.builder()
                        .name("duration")
                        .valueExpression(ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs.builder()
                            .expression("resource.rotationPeriod")
                            .title("Purpose of the expression")
                            .description("description of the expression")
                            .location("location of the expression")
                            .build())
                        .build())
                    .build())
                .resourceSelector(ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .severity("LOW")
                .description("Description of the custom module")
                .recommendation("Steps to resolve violation")
                .build())
            .build());

    }
}
```
```yaml
resources:
  folder:
    type: gcp:organizations:Folder
    properties:
      parent: organizations/123456789
      displayName: folder-name
      deletionProtection: false
  example:
    type: gcp:securitycenter:ManagementFolderSecurityHealthAnalyticsCustomModule
    properties:
      folder: ${folder.folderId}
      location: global
      displayName: full_custom_module
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
          title: Purpose of the expression
          description: description of the expression
          location: location of the expression
        customOutput:
          properties:
            - name: duration
              valueExpression:
                expression: resource.rotationPeriod
                title: Purpose of the expression
                description: description of the expression
                location: location of the expression
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        severity: LOW
        description: Description of the custom module
        recommendation: Steps to resolve violation
```
<!--End PulumiCodeChooser -->

## Import

FolderSecurityHealthAnalyticsCustomModule can be imported using any of these accepted formats:

* `folders/{{folder}}/locations/{{location}}/securityHealthAnalyticsCustomModules/{{name}}`

* `{{folder}}/{{location}}/{{name}}`

When using the `pulumi import` command, FolderSecurityHealthAnalyticsCustomModule can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/managementFolderSecurityHealthAnalyticsCustomModule:ManagementFolderSecurityHealthAnalyticsCustomModule default folders/{{folder}}/locations/{{location}}/securityHealthAnalyticsCustomModules/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/managementFolderSecurityHealthAnalyticsCustomModule:ManagementFolderSecurityHealthAnalyticsCustomModule default {{folder}}/{{location}}/{{name}}
```

┘
customConfig№BВ:ж
Т
securitycenter?ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigњgcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfig:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
¤
displayNameB" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
p
enablementStateB" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.
9
folder" +Numerical ID of the parent folder.


- - -
z
locationB" hLocation ID of the parent organization. If not provided, 'global' will be used as the default location.
"Ї
ancestorModule" ШIf empty, indicates that the custom module was created in the organization, folder,
or project in which you are viewing the custom module. Otherwise, ancestor_module
specifies the organization or folder from which the custom module is inherited.
"┘
customConfig№BВ:ж
Т
securitycenter?ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigњgcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfig:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
"¤
displayNameB" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
"p
enablementStateB" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.
"9
folder" +Numerical ID of the parent folder.


- - -
"B

lastEditor" 0The editor that last updated the custom module.
"z
locationB" hLocation ID of the parent organization. If not provided, 'global' will be used as the default location.
"┬
name" хThe resource name of the custom module. Its format is "folders/{folder}/locations/{location}/securityHealthAnalyticsCustomModules/{securityHealthAnalyticsCustomModule}".
The id {securityHealthAnalyticsCustomModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.
"э

updateTime" СThe time at which the custom module was last updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*ѕ"
╦
securitycenter6ManagementOrganizationEventThreatDetectionCustomModuleђgcp:securitycenter/managementOrganizationEventThreatDetectionCustomModule:ManagementOrganizationEventThreatDetectionCustomModuleыRepresents an instance of an Event Threat Detection custom module, including
its full module name, display name, enablement state, and last updated time.
You can create a custom module at the organization level only.


To get more information about OrganizationEventThreatDetectionCustomModule, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/security-center-management/rest/v1/organizations.locations.eventThreatDetectionCustomModules)
* How-to Guides
    * [Overview of custom modules for Event Threat Detection](https://cloud.google.com/security-command-center/docs/custom-modules-etd-overview)

## Example Usage

### Scc Management Organization Event Threat Detection Custom Module


<!--Start PulumiCodeChooser -->
```yaml
resources:
  example:
    type: gcp:securitycenter:ManagementOrganizationEventThreatDetectionCustomModule
    properties:
      organization: '123456789'
      location: global
      displayName: basic_custom_module
      enablementState: ENABLED
      type: CONFIGURABLE_BAD_IP
      description: My Event Threat Detection Custom Module
      config:
        fn::toJSON:
          metadata:
            severity: LOW
            description: Flagged by Forcepoint as malicious
            recommendation: Contact the owner of the relevant project.
          ips:
            - 192.0.2.1
            - 192.0.2.0/24
```
<!--End PulumiCodeChooser -->

## Import

OrganizationEventThreatDetectionCustomModule can be imported using any of these accepted formats:

* `organizations/{{organization}}/locations/{{location}}/eventThreatDetectionCustomModules/{{name}}`

* `{{organization}}/{{location}}/{{name}}`

When using the `pulumi import` command, OrganizationEventThreatDetectionCustomModule can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/managementOrganizationEventThreatDetectionCustomModule:ManagementOrganizationEventThreatDetectionCustomModule default organizations/{{organization}}/locations/{{location}}/eventThreatDetectionCustomModules/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/managementOrganizationEventThreatDetectionCustomModule:ManagementOrganizationEventThreatDetectionCustomModule default {{organization}}/{{location}}/{{name}}
```

Й
configB" ГConfig for the module. For the resident module, its config value is defined at this level.
For the inherited module, its config value is inherited from the ancestor module.
M
displayNameB" 8The human readable name to be displayed for the module.
Љ
enablementStateB" xThe state of enablement for the module at the given level of the hierarchy.
Possible values are: `ENABLED`, `DISABLED`.
b
locationB" PLocation ID of the parent organization. Only global is supported at the moment.
E
organization" 1Numerical ID of the parent organization.


- - -
H
typeB" :Immutable. Type for the module. e.g. CONFIGURABLE_BAD_IP.
"Й
configB" ГConfig for the module. For the resident module, its config value is defined at this level.
For the inherited module, its config value is inherited from the ancestor module.
"M
displayNameB" 8The human readable name to be displayed for the module.
"Љ
enablementStateB" xThe state of enablement for the module at the given level of the hierarchy.
Possible values are: `ENABLED`, `DISABLED`.
"A

lastEditor" /The editor that last updated the custom module
"b
locationB" PLocation ID of the parent organization. Only global is supported at the moment.
"н
name" КThe resource name of the Event Threat Detection custom module.
Its format is "organizations/{organization}/locations/{location}/eventThreatDetectionCustomModules/{eventThreatDetectionCustomModule}".
"E
organization" 1Numerical ID of the parent organization.


- - -
"H
typeB" :Immutable. Type for the module. e.g. CONFIGURABLE_BAD_IP.
"э

updateTime" СThe time at which the custom module was last updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*┌╗
н
securitycenter9ManagementOrganizationSecurityHealthAnalyticsCustomModuleєgcp:securitycenter/managementOrganizationSecurityHealthAnalyticsCustomModule:ManagementOrganizationSecurityHealthAnalyticsCustomModuleШбRepresents an instance of a Security Health Analytics custom module, including
its full module name, display name, enablement state, and last updated time.
You can create a custom module at the organization, folder, or project level.
Custom modules that you create at the organization or folder level are inherited
by the child folders and projects.


To get more information about OrganizationSecurityHealthAnalyticsCustomModule, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/security-center-management/rest/v1/organizations.locations.securityHealthAnalyticsCustomModules)
* How-to Guides
    * [Overview of custom modules for Security Health Analytics](https://cloud.google.com/security-command-center/docs/custom-modules-sha-overview)

## Example Usage

### Scc Management Organization Security Health Analytics Custom Module Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModule("example", {
    organization: "123456789",
    displayName: "basic_custom_module",
    location: "global",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        description: "The rotation period of the identified cryptokey resource exceeds 30 days.",
        recommendation: "Set the rotation period to at most 30 days.",
        severity: "MEDIUM",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModule("example",
    organization="123456789",
    display_name="basic_custom_module",
    location="global",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "description": "The rotation period of the identified cryptokey resource exceeds 30 days.",
        "recommendation": "Set the rotation period to at most 30 days.",
        "severity": "MEDIUM",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.SecurityCenter.ManagementOrganizationSecurityHealthAnalyticsCustomModule("example", new()
    {
        Organization = "123456789",
        DisplayName = "basic_custom_module",
        Location = "global",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Description = "The rotation period of the identified cryptokey resource exceeds 30 days.",
            Recommendation = "Set the rotation period to at most 30 days.",
            Severity = "MEDIUM",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewManagementOrganizationSecurityHealthAnalyticsCustomModule(ctx, "example", &securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleArgs{
			Organization:    pulumi.String("123456789"),
			DisplayName:     pulumi.String("basic_custom_module"),
			Location:        pulumi.String("global"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs{
					Expression: pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
				},
				ResourceSelector: &securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Description:    pulumi.String("The rotation period of the identified cryptokey resource exceeds 30 days."),
				Recommendation: pulumi.String("Set the rotation period to at most 30 days."),
				Severity:       pulumi.String("MEDIUM"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModule;
import com.pulumi.gcp.securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ManagementOrganizationSecurityHealthAnalyticsCustomModule("example", ManagementOrganizationSecurityHealthAnalyticsCustomModuleArgs.builder()
            .organization("123456789")
            .displayName("basic_custom_module")
            .location("global")
            .enablementState("ENABLED")
            .customConfig(ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigArgs.builder()
                .predicate(ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .build())
                .resourceSelector(ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .description("The rotation period of the identified cryptokey resource exceeds 30 days.")
                .recommendation("Set the rotation period to at most 30 days.")
                .severity("MEDIUM")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:securitycenter:ManagementOrganizationSecurityHealthAnalyticsCustomModule
    properties:
      organization: '123456789'
      displayName: basic_custom_module
      location: global
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        description: The rotation period of the identified cryptokey resource exceeds 30 days.
        recommendation: Set the rotation period to at most 30 days.
        severity: MEDIUM
```
<!--End PulumiCodeChooser -->
### Scc Management Organization Security Health Analytics Custom Module Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModule("example", {
    organization: "123456789",
    displayName: "full_custom_module",
    location: "global",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
            title: "Purpose of the expression",
            description: "description of the expression",
            location: "location of the expression",
        },
        customOutput: {
            properties: [{
                name: "duration",
                valueExpression: {
                    expression: "resource.rotationPeriod",
                    title: "Purpose of the expression",
                    description: "description of the expression",
                    location: "location of the expression",
                },
            }],
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        severity: "LOW",
        description: "Description of the custom module",
        recommendation: "Steps to resolve violation",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModule("example",
    organization="123456789",
    display_name="full_custom_module",
    location="global",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
            "title": "Purpose of the expression",
            "description": "description of the expression",
            "location": "location of the expression",
        },
        "custom_output": {
            "properties": [{
                "name": "duration",
                "value_expression": {
                    "expression": "resource.rotationPeriod",
                    "title": "Purpose of the expression",
                    "description": "description of the expression",
                    "location": "location of the expression",
                },
            }],
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "severity": "LOW",
        "description": "Description of the custom module",
        "recommendation": "Steps to resolve violation",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.SecurityCenter.ManagementOrganizationSecurityHealthAnalyticsCustomModule("example", new()
    {
        Organization = "123456789",
        DisplayName = "full_custom_module",
        Location = "global",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
                Title = "Purpose of the expression",
                Description = "description of the expression",
                Location = "location of the expression",
            },
            CustomOutput = new Gcp.SecurityCenter.Inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs
            {
                Properties = new[]
                {
                    new Gcp.SecurityCenter.Inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArgs
                    {
                        Name = "duration",
                        ValueExpression = new Gcp.SecurityCenter.Inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs
                        {
                            Expression = "resource.rotationPeriod",
                            Title = "Purpose of the expression",
                            Description = "description of the expression",
                            Location = "location of the expression",
                        },
                    },
                },
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Severity = "LOW",
            Description = "Description of the custom module",
            Recommendation = "Steps to resolve violation",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewManagementOrganizationSecurityHealthAnalyticsCustomModule(ctx, "example", &securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleArgs{
			Organization:    pulumi.String("123456789"),
			DisplayName:     pulumi.String("full_custom_module"),
			Location:        pulumi.String("global"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs{
					Expression:  pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
					Title:       pulumi.String("Purpose of the expression"),
					Description: pulumi.String("description of the expression"),
					Location:    pulumi.String("location of the expression"),
				},
				CustomOutput: securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs{
					Properties: securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArray{
						&securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArgs{
							Name: pulumi.String("duration"),
							ValueExpression: &securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs{
								Expression:  pulumi.String("resource.rotationPeriod"),
								Title:       pulumi.String("Purpose of the expression"),
								Description: pulumi.String("description of the expression"),
								Location:    pulumi.String("location of the expression"),
							},
						},
					},
				},
				ResourceSelector: &securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Severity:       pulumi.String("LOW"),
				Description:    pulumi.String("Description of the custom module"),
				Recommendation: pulumi.String("Steps to resolve violation"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModule;
import com.pulumi.gcp.securitycenter.ManagementOrganizationSecurityHealthAnalyticsCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ManagementOrganizationSecurityHealthAnalyticsCustomModule("example", ManagementOrganizationSecurityHealthAnalyticsCustomModuleArgs.builder()
            .organization("123456789")
            .displayName("full_custom_module")
            .location("global")
            .enablementState("ENABLED")
            .customConfig(ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigArgs.builder()
                .predicate(ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .title("Purpose of the expression")
                    .description("description of the expression")
                    .location("location of the expression")
                    .build())
                .customOutput(ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs.builder()
                    .properties(ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArgs.builder()
                        .name("duration")
                        .valueExpression(ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs.builder()
                            .expression("resource.rotationPeriod")
                            .title("Purpose of the expression")
                            .description("description of the expression")
                            .location("location of the expression")
                            .build())
                        .build())
                    .build())
                .resourceSelector(ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .severity("LOW")
                .description("Description of the custom module")
                .recommendation("Steps to resolve violation")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:securitycenter:ManagementOrganizationSecurityHealthAnalyticsCustomModule
    properties:
      organization: '123456789'
      displayName: full_custom_module
      location: global
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
          title: Purpose of the expression
          description: description of the expression
          location: location of the expression
        customOutput:
          properties:
            - name: duration
              valueExpression:
                expression: resource.rotationPeriod
                title: Purpose of the expression
                description: description of the expression
                location: location of the expression
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        severity: LOW
        description: Description of the custom module
        recommendation: Steps to resolve violation
```
<!--End PulumiCodeChooser -->

## Import

OrganizationSecurityHealthAnalyticsCustomModule can be imported using any of these accepted formats:

* `organizations/{{organization}}/locations/{{location}}/securityHealthAnalyticsCustomModules/{{name}}`

* `{{organization}}/{{location}}/{{name}}`

When using the `pulumi import` command, OrganizationSecurityHealthAnalyticsCustomModule can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/managementOrganizationSecurityHealthAnalyticsCustomModule:ManagementOrganizationSecurityHealthAnalyticsCustomModule default organizations/{{organization}}/locations/{{location}}/securityHealthAnalyticsCustomModules/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/managementOrganizationSecurityHealthAnalyticsCustomModule:ManagementOrganizationSecurityHealthAnalyticsCustomModule default {{organization}}/{{location}}/{{name}}
```

в
customConfigЂB■:ч
Э
securitycenterEManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigъgcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfig:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
¤
displayNameB" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
p
enablementStateB" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.
z
locationB" hLocation ID of the parent organization. If not provided, 'global' will be used as the default location.
E
organization" 1Numerical ID of the parent organization.


- - -
"Ї
ancestorModule" ШIf empty, indicates that the custom module was created in the organization, folder,
or project in which you are viewing the custom module. Otherwise, ancestor_module
specifies the organization or folder from which the custom module is inherited.
"в
customConfigЂB■:ч
Э
securitycenterEManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigъgcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfig:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
"¤
displayNameB" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
"p
enablementStateB" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.
"B

lastEditor" 0The editor that last updated the custom module.
"z
locationB" hLocation ID of the parent organization. If not provided, 'global' will be used as the default location.
"╬
name" ┴The resource name of the custom module. Its format is "organizations/{organization}/locations/{location}/securityHealthAnalyticsCustomModules/{securityHealthAnalyticsCustomModule}".
The id {securityHealthAnalyticsCustomModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.
"E
organization" 1Numerical ID of the parent organization.


- - -
"э

updateTime" СThe time at which the custom module was last updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*си
─
securitycenter4ManagementProjectSecurityHealthAnalyticsCustomModule|gcp:securitycenter/managementProjectSecurityHealthAnalyticsCustomModule:ManagementProjectSecurityHealthAnalyticsCustomModule╬ъRepresents an instance of a Security Health Analytics custom module, including
its full module name, display name, enablement state, and last updated time.
You can create a custom module at the organization, folder, or project level.
Custom modules that you create at the organization or folder level are inherited
by the child folders and projects.


To get more information about ProjectSecurityHealthAnalyticsCustomModule, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/security-center-management/rest/v1/projects.locations.securityHealthAnalyticsCustomModules)
* How-to Guides
    * [Overview of custom modules for Security Health Analytics](https://cloud.google.com/security-command-center/docs/custom-modules-sha-overview)

## Example Usage

### Scc Management Organization Project Security Health Analytics Custom Module Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModule("example", {
    location: "global",
    displayName: "basic_custom_module",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        description: "The rotation period of the identified cryptokey resource exceeds 30 days.",
        recommendation: "Set the rotation period to at most 30 days.",
        severity: "MEDIUM",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModule("example",
    location="global",
    display_name="basic_custom_module",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "description": "The rotation period of the identified cryptokey resource exceeds 30 days.",
        "recommendation": "Set the rotation period to at most 30 days.",
        "severity": "MEDIUM",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.SecurityCenter.ManagementProjectSecurityHealthAnalyticsCustomModule("example", new()
    {
        Location = "global",
        DisplayName = "basic_custom_module",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Description = "The rotation period of the identified cryptokey resource exceeds 30 days.",
            Recommendation = "Set the rotation period to at most 30 days.",
            Severity = "MEDIUM",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewManagementProjectSecurityHealthAnalyticsCustomModule(ctx, "example", &securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleArgs{
			Location:        pulumi.String("global"),
			DisplayName:     pulumi.String("basic_custom_module"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs{
					Expression: pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
				},
				ResourceSelector: &securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Description:    pulumi.String("The rotation period of the identified cryptokey resource exceeds 30 days."),
				Recommendation: pulumi.String("Set the rotation period to at most 30 days."),
				Severity:       pulumi.String("MEDIUM"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModule;
import com.pulumi.gcp.securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ManagementProjectSecurityHealthAnalyticsCustomModule("example", ManagementProjectSecurityHealthAnalyticsCustomModuleArgs.builder()
            .location("global")
            .displayName("basic_custom_module")
            .enablementState("ENABLED")
            .customConfig(ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigArgs.builder()
                .predicate(ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .build())
                .resourceSelector(ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .description("The rotation period of the identified cryptokey resource exceeds 30 days.")
                .recommendation("Set the rotation period to at most 30 days.")
                .severity("MEDIUM")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:securitycenter:ManagementProjectSecurityHealthAnalyticsCustomModule
    properties:
      location: global
      displayName: basic_custom_module
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        description: The rotation period of the identified cryptokey resource exceeds 30 days.
        recommendation: Set the rotation period to at most 30 days.
        severity: MEDIUM
```
<!--End PulumiCodeChooser -->
### Scc Management Organization Project Security Health Analytics Custom Module Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModule("example", {
    location: "global",
    displayName: "full_custom_module",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
            title: "Purpose of the expression",
            description: "description of the expression",
            location: "location of the expression",
        },
        customOutput: {
            properties: [{
                name: "duration",
                valueExpression: {
                    expression: "resource.rotationPeriod",
                    title: "Purpose of the expression",
                    description: "description of the expression",
                    location: "location of the expression",
                },
            }],
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        severity: "LOW",
        description: "Description of the custom module",
        recommendation: "Steps to resolve violation",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModule("example",
    location="global",
    display_name="full_custom_module",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
            "title": "Purpose of the expression",
            "description": "description of the expression",
            "location": "location of the expression",
        },
        "custom_output": {
            "properties": [{
                "name": "duration",
                "value_expression": {
                    "expression": "resource.rotationPeriod",
                    "title": "Purpose of the expression",
                    "description": "description of the expression",
                    "location": "location of the expression",
                },
            }],
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "severity": "LOW",
        "description": "Description of the custom module",
        "recommendation": "Steps to resolve violation",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.SecurityCenter.ManagementProjectSecurityHealthAnalyticsCustomModule("example", new()
    {
        Location = "global",
        DisplayName = "full_custom_module",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
                Title = "Purpose of the expression",
                Description = "description of the expression",
                Location = "location of the expression",
            },
            CustomOutput = new Gcp.SecurityCenter.Inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs
            {
                Properties = new[]
                {
                    new Gcp.SecurityCenter.Inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArgs
                    {
                        Name = "duration",
                        ValueExpression = new Gcp.SecurityCenter.Inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs
                        {
                            Expression = "resource.rotationPeriod",
                            Title = "Purpose of the expression",
                            Description = "description of the expression",
                            Location = "location of the expression",
                        },
                    },
                },
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Severity = "LOW",
            Description = "Description of the custom module",
            Recommendation = "Steps to resolve violation",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewManagementProjectSecurityHealthAnalyticsCustomModule(ctx, "example", &securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleArgs{
			Location:        pulumi.String("global"),
			DisplayName:     pulumi.String("full_custom_module"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs{
					Expression:  pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
					Title:       pulumi.String("Purpose of the expression"),
					Description: pulumi.String("description of the expression"),
					Location:    pulumi.String("location of the expression"),
				},
				CustomOutput: securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs{
					Properties: securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArray{
						&securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArgs{
							Name: pulumi.String("duration"),
							ValueExpression: &securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs{
								Expression:  pulumi.String("resource.rotationPeriod"),
								Title:       pulumi.String("Purpose of the expression"),
								Description: pulumi.String("description of the expression"),
								Location:    pulumi.String("location of the expression"),
							},
						},
					},
				},
				ResourceSelector: &securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Severity:       pulumi.String("LOW"),
				Description:    pulumi.String("Description of the custom module"),
				Recommendation: pulumi.String("Steps to resolve violation"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModule;
import com.pulumi.gcp.securitycenter.ManagementProjectSecurityHealthAnalyticsCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs;
import com.pulumi.gcp.securitycenter.inputs.ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ManagementProjectSecurityHealthAnalyticsCustomModule("example", ManagementProjectSecurityHealthAnalyticsCustomModuleArgs.builder()
            .location("global")
            .displayName("full_custom_module")
            .enablementState("ENABLED")
            .customConfig(ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigArgs.builder()
                .predicate(ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .title("Purpose of the expression")
                    .description("description of the expression")
                    .location("location of the expression")
                    .build())
                .customOutput(ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputArgs.builder()
                    .properties(ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyArgs.builder()
                        .name("duration")
                        .valueExpression(ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs.builder()
                            .expression("resource.rotationPeriod")
                            .title("Purpose of the expression")
                            .description("description of the expression")
                            .location("location of the expression")
                            .build())
                        .build())
                    .build())
                .resourceSelector(ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .severity("LOW")
                .description("Description of the custom module")
                .recommendation("Steps to resolve violation")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:securitycenter:ManagementProjectSecurityHealthAnalyticsCustomModule
    properties:
      location: global
      displayName: full_custom_module
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
          title: Purpose of the expression
          description: description of the expression
          location: location of the expression
        customOutput:
          properties:
            - name: duration
              valueExpression:
                expression: resource.rotationPeriod
                title: Purpose of the expression
                description: description of the expression
                location: location of the expression
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        severity: LOW
        description: Description of the custom module
        recommendation: Steps to resolve violation
```
<!--End PulumiCodeChooser -->

## Import

ProjectSecurityHealthAnalyticsCustomModule can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/securityHealthAnalyticsCustomModules/{{name}}`

* `{{project}}/{{location}}/{{name}}`

* `{{location}}/{{name}}`

When using the `pulumi import` command, ProjectSecurityHealthAnalyticsCustomModule can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/managementProjectSecurityHealthAnalyticsCustomModule:ManagementProjectSecurityHealthAnalyticsCustomModule default projects/{{project}}/locations/{{location}}/securityHealthAnalyticsCustomModules/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/managementProjectSecurityHealthAnalyticsCustomModule:ManagementProjectSecurityHealthAnalyticsCustomModule default {{project}}/{{location}}/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/managementProjectSecurityHealthAnalyticsCustomModule:ManagementProjectSecurityHealthAnalyticsCustomModule default {{location}}/{{name}}
```

▄
customConfigЫB№:В
ж
securitycenter@ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigћgcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfig:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
¤
displayNameB" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
p
enablementStateB" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.
z
locationB" hLocation ID of the parent organization. If not provided, 'global' will be used as the default location.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"ї
ancestorModule" шIf empty, indicates that the custom module was created in the organization,folder,
or project in which you are viewing the custom module. Otherwise, ancestor_module
specifies the organization or folder from which the custom module is inherited.
"▄
customConfigЫB№:В
ж
securitycenter@ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigћgcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfig:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
"¤
displayNameB" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
"p
enablementStateB" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.
"B

lastEditor" 0The editor that last updated the custom module.
"z
locationB" hLocation ID of the parent organization. If not provided, 'global' will be used as the default location.
"─
name" иThe resource name of the custom module. Its format is "projects/{project}/locations/{location}/securityHealthAnalyticsCustomModules/{securityHealthAnalyticsCustomModule}".
The id {securityHealthAnalyticsCustomModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"э

updateTime" СThe time at which the custom module was last updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*З*
F
securitycenter
MuteConfig(gcp:securitycenter/muteConfig:MuteConfig¤Mute Findings is a volume management feature in Security Command Center
that lets you manually or programmatically hide irrelevant findings,
and create filters to automatically silence existing and future
findings based on criteria you specify.


To get more information about MuteConfig, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.muteConfigs)

## Example Usage

### Scc Mute Config


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.securitycenter.MuteConfig("default", {
    muteConfigId: "my-config",
    parent: "organizations/123456789",
    filter: "category: \"OS_VULNERABILITY\"",
    description: "My Mute Config",
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.securitycenter.MuteConfig("default",
    mute_config_id="my-config",
    parent="organizations/123456789",
    filter="category: \"OS_VULNERABILITY\"",
    description="My Mute Config")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.SecurityCenter.MuteConfig("default", new()
    {
        MuteConfigId = "my-config",
        Parent = "organizations/123456789",
        Filter = "category: \"OS_VULNERABILITY\"",
        Description = "My Mute Config",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewMuteConfig(ctx, "default", &securitycenter.MuteConfigArgs{
			MuteConfigId: pulumi.String("my-config"),
			Parent:       pulumi.String("organizations/123456789"),
			Filter:       pulumi.String("category: \"OS_VULNERABILITY\""),
			Description:  pulumi.String("My Mute Config"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.MuteConfig;
import com.pulumi.gcp.securitycenter.MuteConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new MuteConfig("default", MuteConfigArgs.builder()
            .muteConfigId("my-config")
            .parent("organizations/123456789")
            .filter("category: \"OS_VULNERABILITY\"")
            .description("My Mute Config")
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:securitycenter:MuteConfig
    properties:
      muteConfigId: my-config
      parent: organizations/123456789
      filter: 'category: "OS_VULNERABILITY"'
      description: My Mute Config
```
<!--End PulumiCodeChooser -->

## Import

MuteConfig can be imported using any of these accepted formats:

* `{{name}}`

When using the `pulumi import` command, MuteConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/muteConfig:MuteConfig default {{name}}
```

7
descriptionB" "A description of the mute config.
┼
filter" ХAn expression that defines the filter to apply across create/update
events of findings. While creating a filter string, be mindful of
the scope in which the mute configuration is being created. E.g.,
If a filter contains project = X but is created under the
project = Y scope, it might not match any findings.
V
muteConfigId" BUnique identifier provided by the client within the parent scope.
Ф
parent" юResource name of the new mute configs's parent. Its format is
"organizations/[organization_id]", "folders/[folder_id]", or
"projects/[project_id]".


- - -
"ќ

createTime" ЃThe time at which the mute config was created. This field is set by
the server and will be ignored if provided on config creation.
"7
descriptionB" "A description of the mute config.
"┼
filter" ХAn expression that defines the filter to apply across create/update
events of findings. While creating a filter string, be mindful of
the scope in which the mute configuration is being created. E.g.,
If a filter contains project = X but is created under the
project = Y scope, it might not match any findings.
"▓
mostRecentEditor" ЎEmail address of the user who last edited the mute config. This
field is set by the server and will be ignored if provided on
config creation or update.
"V
muteConfigId" BUnique identifier provided by the client within the parent scope.
"┐
name" ▓Name of the mute config. Its format is
organizations/{organization}/muteConfigs/{configId},
folders/{folder}/muteConfigs/{configId},
or projects/{project}/muteConfigs/{configId}
"Ф
parent" юResource name of the new mute configs's parent. Its format is
"organizations/[organization_id]", "folders/[folder_id]", or
"projects/[project_id]".


- - -
"╣

updateTime" дOutput only. The most recent time at which the mute config was
updated. This field is set by the server and will be ignored if
provided on config creation or update.
*ћ<
^
securitycenterNotificationConfig8gcp:securitycenter/notificationConfig:NotificationConfigБ/A Cloud Security Command Center (Cloud SCC) notification configs. A
notification config is a Cloud SCC resource that contains the
configuration to send notifications for create/update events of
findings, assets and etc.
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about NotificationConfig, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.notificationConfigs)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs)

## Example Usage

### Scc Notification Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sccNotification = new gcp.pubsub.Topic("scc_notification", {name: "my-topic"});
const customNotificationConfig = new gcp.securitycenter.NotificationConfig("custom_notification_config", {
    configId: "my-config",
    organization: "123456789",
    description: "My custom Cloud Security Command Center Finding Notification Configuration",
    pubsubTopic: sccNotification.id,
    streamingConfig: {
        filter: "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

scc_notification = gcp.pubsub.Topic("scc_notification", name="my-topic")
custom_notification_config = gcp.securitycenter.NotificationConfig("custom_notification_config",
    config_id="my-config",
    organization="123456789",
    description="My custom Cloud Security Command Center Finding Notification Configuration",
    pubsub_topic=scc_notification.id,
    streaming_config={
        "filter": "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sccNotification = new Gcp.PubSub.Topic("scc_notification", new()
    {
        Name = "my-topic",
    });

    var customNotificationConfig = new Gcp.SecurityCenter.NotificationConfig("custom_notification_config", new()
    {
        ConfigId = "my-config",
        Organization = "123456789",
        Description = "My custom Cloud Security Command Center Finding Notification Configuration",
        PubsubTopic = sccNotification.Id,
        StreamingConfig = new Gcp.SecurityCenter.Inputs.NotificationConfigStreamingConfigArgs
        {
            Filter = "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sccNotification, err := pubsub.NewTopic(ctx, "scc_notification", &pubsub.TopicArgs{
			Name: pulumi.String("my-topic"),
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewNotificationConfig(ctx, "custom_notification_config", &securitycenter.NotificationConfigArgs{
			ConfigId:     pulumi.String("my-config"),
			Organization: pulumi.String("123456789"),
			Description:  pulumi.String("My custom Cloud Security Command Center Finding Notification Configuration"),
			PubsubTopic:  sccNotification.ID(),
			StreamingConfig: &securitycenter.NotificationConfigStreamingConfigArgs{
				Filter: pulumi.String("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\""),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.securitycenter.NotificationConfig;
import com.pulumi.gcp.securitycenter.NotificationConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.NotificationConfigStreamingConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sccNotification = new Topic("sccNotification", TopicArgs.builder()
            .name("my-topic")
            .build());

        var customNotificationConfig = new NotificationConfig("customNotificationConfig", NotificationConfigArgs.builder()
            .configId("my-config")
            .organization("123456789")
            .description("My custom Cloud Security Command Center Finding Notification Configuration")
            .pubsubTopic(sccNotification.id())
            .streamingConfig(NotificationConfigStreamingConfigArgs.builder()
                .filter("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sccNotification:
    type: gcp:pubsub:Topic
    name: scc_notification
    properties:
      name: my-topic
  customNotificationConfig:
    type: gcp:securitycenter:NotificationConfig
    name: custom_notification_config
    properties:
      configId: my-config
      organization: '123456789'
      description: My custom Cloud Security Command Center Finding Notification Configuration
      pubsubTopic: ${sccNotification.id}
      streamingConfig:
        filter: category = "OPEN_FIREWALL" AND state = "ACTIVE"
```
<!--End PulumiCodeChooser -->

## Import

NotificationConfig can be imported using any of these accepted formats:

* `{{name}}`

When using the `pulumi import` command, NotificationConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/notificationConfig:NotificationConfig default {{name}}
```

=
configId" -This must be unique within the organization.
Z
descriptionB" EThe description of the notification config (max of 1024 characters).
k
organization" WThe organization whose Cloud Security Command Center the Notification
Config lives in.
u
pubsubTopic" bThe Pub/Sub topic to send notifications to. Its format is
"projects/[project_id]/topics/[topic]".
 
streamingConfigЉ:ј
І
securitycenter!NotificationConfigStreamingConfigVgcp:securitycenter/NotificationConfigStreamingConfig:NotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
"=
configId" -This must be unique within the organization.
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"ј
name" ЂThe resource name of this notification config, in the format
`organizations/{{organization}}/notificationConfigs/{{config_id}}`.
"k
organization" WThe organization whose Cloud Security Command Center the Notification
Config lives in.
"u
pubsubTopic" bThe Pub/Sub topic to send notifications to. Its format is
"projects/[project_id]/topics/[topic]".
"y
serviceAccount" cThe service account that needs "pubsub.topics.publish" permission to
publish to the Pub/Sub topic.
" 
streamingConfigЉ:ј
І
securitycenter!NotificationConfigStreamingConfigVgcp:securitycenter/NotificationConfigStreamingConfig:NotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
*чб
p
securitycenterOrganizationCustomModuleDgcp:securitycenter/organizationCustomModule:OrganizationCustomModuleџЈRepresents an instance of a Security Health Analytics custom module, including
its full module name, display name, enablement state, and last updated time.
You can create a custom module at the organization, folder, or project level.
Custom modules that you create at the organization or folder level are inherited
by the child folders and projects.


To get more information about OrganizationCustomModule, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.securityHealthAnalyticsSettings.customModules)
* How-to Guides
    * [Overview of custom modules for Security Health Analytics](https://cloud.google.com/security-command-center/docs/custom-modules-sha-overview)

## Example Usage

### Scc Organization Custom Module Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.securitycenter.OrganizationCustomModule("example", {
    organization: "123456789",
    displayName: "basic_custom_module",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        description: "The rotation period of the identified cryptokey resource exceeds 30 days.",
        recommendation: "Set the rotation period to at most 30 days.",
        severity: "MEDIUM",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.securitycenter.OrganizationCustomModule("example",
    organization="123456789",
    display_name="basic_custom_module",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "description": "The rotation period of the identified cryptokey resource exceeds 30 days.",
        "recommendation": "Set the rotation period to at most 30 days.",
        "severity": "MEDIUM",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.SecurityCenter.OrganizationCustomModule("example", new()
    {
        Organization = "123456789",
        DisplayName = "basic_custom_module",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.OrganizationCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.OrganizationCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.OrganizationCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Description = "The rotation period of the identified cryptokey resource exceeds 30 days.",
            Recommendation = "Set the rotation period to at most 30 days.",
            Severity = "MEDIUM",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewOrganizationCustomModule(ctx, "example", &securitycenter.OrganizationCustomModuleArgs{
			Organization:    pulumi.String("123456789"),
			DisplayName:     pulumi.String("basic_custom_module"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.OrganizationCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.OrganizationCustomModuleCustomConfigPredicateArgs{
					Expression: pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
				},
				ResourceSelector: &securitycenter.OrganizationCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Description:    pulumi.String("The rotation period of the identified cryptokey resource exceeds 30 days."),
				Recommendation: pulumi.String("Set the rotation period to at most 30 days."),
				Severity:       pulumi.String("MEDIUM"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.OrganizationCustomModule;
import com.pulumi.gcp.securitycenter.OrganizationCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.OrganizationCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.OrganizationCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.OrganizationCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new OrganizationCustomModule("example", OrganizationCustomModuleArgs.builder()
            .organization("123456789")
            .displayName("basic_custom_module")
            .enablementState("ENABLED")
            .customConfig(OrganizationCustomModuleCustomConfigArgs.builder()
                .predicate(OrganizationCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .build())
                .resourceSelector(OrganizationCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .description("The rotation period of the identified cryptokey resource exceeds 30 days.")
                .recommendation("Set the rotation period to at most 30 days.")
                .severity("MEDIUM")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:securitycenter:OrganizationCustomModule
    properties:
      organization: '123456789'
      displayName: basic_custom_module
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        description: The rotation period of the identified cryptokey resource exceeds 30 days.
        recommendation: Set the rotation period to at most 30 days.
        severity: MEDIUM
```
<!--End PulumiCodeChooser -->
### Scc Organization Custom Module Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.securitycenter.OrganizationCustomModule("example", {
    organization: "123456789",
    displayName: "full_custom_module",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
            title: "Purpose of the expression",
            description: "description of the expression",
            location: "location of the expression",
        },
        customOutput: {
            properties: [{
                name: "duration",
                valueExpression: {
                    expression: "resource.rotationPeriod",
                    title: "Purpose of the expression",
                    description: "description of the expression",
                    location: "location of the expression",
                },
            }],
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        severity: "LOW",
        description: "Description of the custom module",
        recommendation: "Steps to resolve violation",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.securitycenter.OrganizationCustomModule("example",
    organization="123456789",
    display_name="full_custom_module",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
            "title": "Purpose of the expression",
            "description": "description of the expression",
            "location": "location of the expression",
        },
        "custom_output": {
            "properties": [{
                "name": "duration",
                "value_expression": {
                    "expression": "resource.rotationPeriod",
                    "title": "Purpose of the expression",
                    "description": "description of the expression",
                    "location": "location of the expression",
                },
            }],
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "severity": "LOW",
        "description": "Description of the custom module",
        "recommendation": "Steps to resolve violation",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.SecurityCenter.OrganizationCustomModule("example", new()
    {
        Organization = "123456789",
        DisplayName = "full_custom_module",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.OrganizationCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.OrganizationCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
                Title = "Purpose of the expression",
                Description = "description of the expression",
                Location = "location of the expression",
            },
            CustomOutput = new Gcp.SecurityCenter.Inputs.OrganizationCustomModuleCustomConfigCustomOutputArgs
            {
                Properties = new[]
                {
                    new Gcp.SecurityCenter.Inputs.OrganizationCustomModuleCustomConfigCustomOutputPropertyArgs
                    {
                        Name = "duration",
                        ValueExpression = new Gcp.SecurityCenter.Inputs.OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs
                        {
                            Expression = "resource.rotationPeriod",
                            Title = "Purpose of the expression",
                            Description = "description of the expression",
                            Location = "location of the expression",
                        },
                    },
                },
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.OrganizationCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Severity = "LOW",
            Description = "Description of the custom module",
            Recommendation = "Steps to resolve violation",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewOrganizationCustomModule(ctx, "example", &securitycenter.OrganizationCustomModuleArgs{
			Organization:    pulumi.String("123456789"),
			DisplayName:     pulumi.String("full_custom_module"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.OrganizationCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.OrganizationCustomModuleCustomConfigPredicateArgs{
					Expression:  pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
					Title:       pulumi.String("Purpose of the expression"),
					Description: pulumi.String("description of the expression"),
					Location:    pulumi.String("location of the expression"),
				},
				CustomOutput: securitycenter.OrganizationCustomModuleCustomConfigCustomOutputArgs{
					Properties: securitycenter.OrganizationCustomModuleCustomConfigCustomOutputPropertyArray{
						&securitycenter.OrganizationCustomModuleCustomConfigCustomOutputPropertyArgs{
							Name: pulumi.String("duration"),
							ValueExpression: &securitycenter.OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs{
								Expression:  pulumi.String("resource.rotationPeriod"),
								Title:       pulumi.String("Purpose of the expression"),
								Description: pulumi.String("description of the expression"),
								Location:    pulumi.String("location of the expression"),
							},
						},
					},
				},
				ResourceSelector: &securitycenter.OrganizationCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Severity:       pulumi.String("LOW"),
				Description:    pulumi.String("Description of the custom module"),
				Recommendation: pulumi.String("Steps to resolve violation"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.OrganizationCustomModule;
import com.pulumi.gcp.securitycenter.OrganizationCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.OrganizationCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.OrganizationCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.OrganizationCustomModuleCustomConfigCustomOutputArgs;
import com.pulumi.gcp.securitycenter.inputs.OrganizationCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new OrganizationCustomModule("example", OrganizationCustomModuleArgs.builder()
            .organization("123456789")
            .displayName("full_custom_module")
            .enablementState("ENABLED")
            .customConfig(OrganizationCustomModuleCustomConfigArgs.builder()
                .predicate(OrganizationCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .title("Purpose of the expression")
                    .description("description of the expression")
                    .location("location of the expression")
                    .build())
                .customOutput(OrganizationCustomModuleCustomConfigCustomOutputArgs.builder()
                    .properties(OrganizationCustomModuleCustomConfigCustomOutputPropertyArgs.builder()
                        .name("duration")
                        .valueExpression(OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs.builder()
                            .expression("resource.rotationPeriod")
                            .title("Purpose of the expression")
                            .description("description of the expression")
                            .location("location of the expression")
                            .build())
                        .build())
                    .build())
                .resourceSelector(OrganizationCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .severity("LOW")
                .description("Description of the custom module")
                .recommendation("Steps to resolve violation")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:securitycenter:OrganizationCustomModule
    properties:
      organization: '123456789'
      displayName: full_custom_module
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
          title: Purpose of the expression
          description: description of the expression
          location: location of the expression
        customOutput:
          properties:
            - name: duration
              valueExpression:
                expression: resource.rotationPeriod
                title: Purpose of the expression
                description: description of the expression
                location: location of the expression
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        severity: LOW
        description: Description of the custom module
        recommendation: Steps to resolve violation
```
<!--End PulumiCodeChooser -->

## Import

OrganizationCustomModule can be imported using any of these accepted formats:

* `organizations/{{organization}}/securityHealthAnalyticsSettings/customModules/{{name}}`

* `{{organization}}/{{name}}`

When using the `pulumi import` command, OrganizationCustomModule can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/organizationCustomModule:OrganizationCustomModule default organizations/{{organization}}/securityHealthAnalyticsSettings/customModules/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/organizationCustomModule:OrganizationCustomModule default {{organization}}/{{name}}
```

ё
customConfigџ:Ќ
ћ
securitycenter$OrganizationCustomModuleCustomConfig\gcp:securitycenter/OrganizationCustomModuleCustomConfig:OrganizationCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
═
displayName" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
n
enablementState" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.
=
organization" )Numerical ID of the parent organization.
"Ї
ancestorModule" ШIf empty, indicates that the custom module was created in the organization, folder,
or project in which you are viewing the custom module. Otherwise, ancestor_module
specifies the organization or folder from which the custom module is inherited.
"ё
customConfigџ:Ќ
ћ
securitycenter$OrganizationCustomModuleCustomConfig\gcp:securitycenter/OrganizationCustomModuleCustomConfig:OrganizationCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
"═
displayName" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
"n
enablementState" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.
"B

lastEditor" 0The editor that last updated the custom module.
"ј
name" ЂThe resource name of the custom module. Its format is "organizations/{org_id}/securityHealthAnalyticsSettings/customModules/{customModule}".
The id {customModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.
"=
organization" )Numerical ID of the parent organization.
"э

updateTime" СThe time at which the custom module was last updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*О2

securitycenterOrganizationSccBigQueryExportNgcp:securitycenter/organizationSccBigQueryExport:OrganizationSccBigQueryExportЋA Cloud Security Command Center (Cloud SCC) Big Query Export Config.
It represents exporting Security Command Center data, including assets, findings, and security marks
using gcloud scc bqexports
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about OrganizationSccBigQueryExport, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.bigQueryExports)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs/how-to-analyze-findings-in-big-query)

## Example Usage

### Scc Organization Big Query Export Config Basic


<!--Start PulumiCodeChooser -->
```yaml
resources:
  default:
    type: gcp:bigquery:Dataset
    properties:
      datasetId: ""
      friendlyName: test
      description: This is a test description
      location: US
      defaultTableExpirationMs: 3.6e+06
      defaultPartitionExpirationMs: null
      labels:
        env: default
  customBigQueryExportConfig:
    type: gcp:securitycenter:OrganizationSccBigQueryExport
    name: custom_big_query_export_config
    properties:
      name: my-export
      bigQueryExportId: my-export
      organization: '123456789'
      dataset: ${default.id}
      description: Cloud Security Command Center Findings Big Query Export Config
      filter: state="ACTIVE" AND NOT mute="MUTED"
```
<!--End PulumiCodeChooser -->

## Import

OrganizationSccBigQueryExport can be imported using any of these accepted formats:

* `organizations/{{organization}}/bigQueryExports/{{big_query_export_id}}`

* `{{organization}}/{{big_query_export_id}}`

When using the `pulumi import` command, OrganizationSccBigQueryExport can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/organizationSccBigQueryExport:OrganizationSccBigQueryExport default organizations/{{organization}}/bigQueryExports/{{big_query_export_id}}
```

```sh
$ pulumi import gcp:securitycenter/organizationSccBigQueryExport:OrganizationSccBigQueryExport default {{organization}}/{{big_query_export_id}}
```

M
bigQueryExportId" 5This must be unique within the organization.


- - -
Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
Z
descriptionB" EThe description of the notification config (max of 1024 characters).
Э
filterB" уExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* \>, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
o
organization" [The organization whose Cloud Security Command Center the Big Query Export
Config lives in.
"M
bigQueryExportId" 5This must be unique within the organization.


- - -
"╦

createTime" ИThe time at which the BigQuery export was created. This field is set by the server and will be ignored if provided on export on creation.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"Э
filterB" уExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* \>, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
"Х
mostRecentEditor" ЮEmail address of the user who last edited the BigQuery export.
This field is set by the server and will be ignored if provided on export creation or update.
"П
name" лThe resource name of this export, in the format
`organizations/{{organization}}/bigQueryExports/{{big_query_export_id}}`.
This field is provided in responses, and is ignored when provided in create requests.
"o
organization" [The organization whose Cloud Security Command Center the Big Query Export
Config lives in.
"t
	principal" cThe service account that needs permission to create table and upload data to the BigQuery dataset.
"я

updateTime" ╦The most recent time at which the BigQuery export was updated. This field is set by the server and will be ignored if provided on export creation or update.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*═ю
a
securitycenterProjectCustomModule:gcp:securitycenter/projectCustomModule:ProjectCustomModuleЧЅRepresents an instance of a Security Health Analytics custom module, including
its full module name, display name, enablement state, and last updated time.
You can create a custom module at the organization, folder, or project level.
Custom modules that you create at the organization or folder level are inherited
by the child folders and projects.


To get more information about ProjectCustomModule, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/projects.securityHealthAnalyticsSettings.customModules)
* How-to Guides
    * [Overview of custom modules for Security Health Analytics](https://cloud.google.com/security-command-center/docs/custom-modules-sha-overview)

## Example Usage

### Scc Project Custom Module Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.securitycenter.ProjectCustomModule("example", {
    displayName: "basic_custom_module",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        description: "The rotation period of the identified cryptokey resource exceeds 30 days.",
        recommendation: "Set the rotation period to at most 30 days.",
        severity: "MEDIUM",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.securitycenter.ProjectCustomModule("example",
    display_name="basic_custom_module",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "description": "The rotation period of the identified cryptokey resource exceeds 30 days.",
        "recommendation": "Set the rotation period to at most 30 days.",
        "severity": "MEDIUM",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.SecurityCenter.ProjectCustomModule("example", new()
    {
        DisplayName = "basic_custom_module",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.ProjectCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.ProjectCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.ProjectCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Description = "The rotation period of the identified cryptokey resource exceeds 30 days.",
            Recommendation = "Set the rotation period to at most 30 days.",
            Severity = "MEDIUM",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewProjectCustomModule(ctx, "example", &securitycenter.ProjectCustomModuleArgs{
			DisplayName:     pulumi.String("basic_custom_module"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.ProjectCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.ProjectCustomModuleCustomConfigPredicateArgs{
					Expression: pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
				},
				ResourceSelector: &securitycenter.ProjectCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Description:    pulumi.String("The rotation period of the identified cryptokey resource exceeds 30 days."),
				Recommendation: pulumi.String("Set the rotation period to at most 30 days."),
				Severity:       pulumi.String("MEDIUM"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.ProjectCustomModule;
import com.pulumi.gcp.securitycenter.ProjectCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.ProjectCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.ProjectCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.ProjectCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ProjectCustomModule("example", ProjectCustomModuleArgs.builder()
            .displayName("basic_custom_module")
            .enablementState("ENABLED")
            .customConfig(ProjectCustomModuleCustomConfigArgs.builder()
                .predicate(ProjectCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .build())
                .resourceSelector(ProjectCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .description("The rotation period of the identified cryptokey resource exceeds 30 days.")
                .recommendation("Set the rotation period to at most 30 days.")
                .severity("MEDIUM")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:securitycenter:ProjectCustomModule
    properties:
      displayName: basic_custom_module
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        description: The rotation period of the identified cryptokey resource exceeds 30 days.
        recommendation: Set the rotation period to at most 30 days.
        severity: MEDIUM
```
<!--End PulumiCodeChooser -->
### Scc Project Custom Module Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.securitycenter.ProjectCustomModule("example", {
    displayName: "full_custom_module",
    enablementState: "ENABLED",
    customConfig: {
        predicate: {
            expression: "resource.rotationPeriod > duration(\"2592000s\")",
            title: "Purpose of the expression",
            description: "description of the expression",
            location: "location of the expression",
        },
        customOutput: {
            properties: [{
                name: "duration",
                valueExpression: {
                    expression: "resource.rotationPeriod",
                    title: "Purpose of the expression",
                    description: "description of the expression",
                    location: "location of the expression",
                },
            }],
        },
        resourceSelector: {
            resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
        },
        severity: "LOW",
        description: "Description of the custom module",
        recommendation: "Steps to resolve violation",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.securitycenter.ProjectCustomModule("example",
    display_name="full_custom_module",
    enablement_state="ENABLED",
    custom_config={
        "predicate": {
            "expression": "resource.rotationPeriod > duration(\"2592000s\")",
            "title": "Purpose of the expression",
            "description": "description of the expression",
            "location": "location of the expression",
        },
        "custom_output": {
            "properties": [{
                "name": "duration",
                "value_expression": {
                    "expression": "resource.rotationPeriod",
                    "title": "Purpose of the expression",
                    "description": "description of the expression",
                    "location": "location of the expression",
                },
            }],
        },
        "resource_selector": {
            "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
        },
        "severity": "LOW",
        "description": "Description of the custom module",
        "recommendation": "Steps to resolve violation",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.SecurityCenter.ProjectCustomModule("example", new()
    {
        DisplayName = "full_custom_module",
        EnablementState = "ENABLED",
        CustomConfig = new Gcp.SecurityCenter.Inputs.ProjectCustomModuleCustomConfigArgs
        {
            Predicate = new Gcp.SecurityCenter.Inputs.ProjectCustomModuleCustomConfigPredicateArgs
            {
                Expression = "resource.rotationPeriod > duration(\"2592000s\")",
                Title = "Purpose of the expression",
                Description = "description of the expression",
                Location = "location of the expression",
            },
            CustomOutput = new Gcp.SecurityCenter.Inputs.ProjectCustomModuleCustomConfigCustomOutputArgs
            {
                Properties = new[]
                {
                    new Gcp.SecurityCenter.Inputs.ProjectCustomModuleCustomConfigCustomOutputPropertyArgs
                    {
                        Name = "duration",
                        ValueExpression = new Gcp.SecurityCenter.Inputs.ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs
                        {
                            Expression = "resource.rotationPeriod",
                            Title = "Purpose of the expression",
                            Description = "description of the expression",
                            Location = "location of the expression",
                        },
                    },
                },
            },
            ResourceSelector = new Gcp.SecurityCenter.Inputs.ProjectCustomModuleCustomConfigResourceSelectorArgs
            {
                ResourceTypes = new[]
                {
                    "cloudkms.googleapis.com/CryptoKey",
                },
            },
            Severity = "LOW",
            Description = "Description of the custom module",
            Recommendation = "Steps to resolve violation",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewProjectCustomModule(ctx, "example", &securitycenter.ProjectCustomModuleArgs{
			DisplayName:     pulumi.String("full_custom_module"),
			EnablementState: pulumi.String("ENABLED"),
			CustomConfig: &securitycenter.ProjectCustomModuleCustomConfigArgs{
				Predicate: &securitycenter.ProjectCustomModuleCustomConfigPredicateArgs{
					Expression:  pulumi.String("resource.rotationPeriod > duration(\"2592000s\")"),
					Title:       pulumi.String("Purpose of the expression"),
					Description: pulumi.String("description of the expression"),
					Location:    pulumi.String("location of the expression"),
				},
				CustomOutput: securitycenter.ProjectCustomModuleCustomConfigCustomOutputArgs{
					Properties: securitycenter.ProjectCustomModuleCustomConfigCustomOutputPropertyArray{
						&securitycenter.ProjectCustomModuleCustomConfigCustomOutputPropertyArgs{
							Name: pulumi.String("duration"),
							ValueExpression: &securitycenter.ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs{
								Expression:  pulumi.String("resource.rotationPeriod"),
								Title:       pulumi.String("Purpose of the expression"),
								Description: pulumi.String("description of the expression"),
								Location:    pulumi.String("location of the expression"),
							},
						},
					},
				},
				ResourceSelector: &securitycenter.ProjectCustomModuleCustomConfigResourceSelectorArgs{
					ResourceTypes: pulumi.StringArray{
						pulumi.String("cloudkms.googleapis.com/CryptoKey"),
					},
				},
				Severity:       pulumi.String("LOW"),
				Description:    pulumi.String("Description of the custom module"),
				Recommendation: pulumi.String("Steps to resolve violation"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.ProjectCustomModule;
import com.pulumi.gcp.securitycenter.ProjectCustomModuleArgs;
import com.pulumi.gcp.securitycenter.inputs.ProjectCustomModuleCustomConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.ProjectCustomModuleCustomConfigPredicateArgs;
import com.pulumi.gcp.securitycenter.inputs.ProjectCustomModuleCustomConfigCustomOutputArgs;
import com.pulumi.gcp.securitycenter.inputs.ProjectCustomModuleCustomConfigResourceSelectorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ProjectCustomModule("example", ProjectCustomModuleArgs.builder()
            .displayName("full_custom_module")
            .enablementState("ENABLED")
            .customConfig(ProjectCustomModuleCustomConfigArgs.builder()
                .predicate(ProjectCustomModuleCustomConfigPredicateArgs.builder()
                    .expression("resource.rotationPeriod > duration(\"2592000s\")")
                    .title("Purpose of the expression")
                    .description("description of the expression")
                    .location("location of the expression")
                    .build())
                .customOutput(ProjectCustomModuleCustomConfigCustomOutputArgs.builder()
                    .properties(ProjectCustomModuleCustomConfigCustomOutputPropertyArgs.builder()
                        .name("duration")
                        .valueExpression(ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs.builder()
                            .expression("resource.rotationPeriod")
                            .title("Purpose of the expression")
                            .description("description of the expression")
                            .location("location of the expression")
                            .build())
                        .build())
                    .build())
                .resourceSelector(ProjectCustomModuleCustomConfigResourceSelectorArgs.builder()
                    .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                    .build())
                .severity("LOW")
                .description("Description of the custom module")
                .recommendation("Steps to resolve violation")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:securitycenter:ProjectCustomModule
    properties:
      displayName: full_custom_module
      enablementState: ENABLED
      customConfig:
        predicate:
          expression: resource.rotationPeriod > duration("2592000s")
          title: Purpose of the expression
          description: description of the expression
          location: location of the expression
        customOutput:
          properties:
            - name: duration
              valueExpression:
                expression: resource.rotationPeriod
                title: Purpose of the expression
                description: description of the expression
                location: location of the expression
        resourceSelector:
          resourceTypes:
            - cloudkms.googleapis.com/CryptoKey
        severity: LOW
        description: Description of the custom module
        recommendation: Steps to resolve violation
```
<!--End PulumiCodeChooser -->

## Import

ProjectCustomModule can be imported using any of these accepted formats:

* `projects/{{project}}/securityHealthAnalyticsSettings/customModules/{{name}}`

* `{{project}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, ProjectCustomModule can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/projectCustomModule:ProjectCustomModule default projects/{{project}}/securityHealthAnalyticsSettings/customModules/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/projectCustomModule:ProjectCustomModule default {{project}}/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/projectCustomModule:ProjectCustomModule default {{name}}
```

ш
customConfigІ:ѕ
Ё
securitycenterProjectCustomModuleCustomConfigRgcp:securitycenter/ProjectCustomModuleCustomConfig:ProjectCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
═
displayName" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
n
enablementState" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.

projectB" "ї
ancestorModule" шIf empty, indicates that the custom module was created in the organization,folder,
or project in which you are viewing the custom module. Otherwise, ancestor_module
specifies the organization or folder from which the custom module is inherited.
"ш
customConfigІ:ѕ
Ё
securitycenterProjectCustomModuleCustomConfigRgcp:securitycenter/ProjectCustomModuleCustomConfig:ProjectCustomModuleCustomConfigWThe user specified custom configuration for the module.
Structure is documented below.
"═
displayName" ╣The display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module. The display name must be between 1 and
128 characters, start with a lowercase letter, and contain alphanumeric
characters or underscores only.
"n
enablementState" WThe enablement state of the custom module.
Possible values are: `ENABLED`, `DISABLED`.
"B

lastEditor" 0The editor that last updated the custom module.
"і
name" §The resource name of the custom module. Its format is "projects/{project}/securityHealthAnalyticsSettings/customModules/{customModule}".
The id {customModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.
"
project" "э

updateTime" СThe time at which the custom module was last updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*б=
s
securitycenterProjectNotificationConfigFgcp:securitycenter/projectNotificationConfig:ProjectNotificationConfigх1A Cloud Security Command Center (Cloud SCC) notification configs. A
notification config is a Cloud SCC resource that contains the
configuration to send notifications for create/update events of
findings, assets and etc.
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about ProjectNotificationConfig, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/projects.notificationConfigs)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs)

## Example Usage

### Scc Project Notification Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sccProjectNotification = new gcp.pubsub.Topic("scc_project_notification", {name: "my-topic"});
const customNotificationConfig = new gcp.securitycenter.ProjectNotificationConfig("custom_notification_config", {
    configId: "my-config",
    project: "my-project-name",
    description: "My custom Cloud Security Command Center Finding Notification Configuration",
    pubsubTopic: sccProjectNotification.id,
    streamingConfig: {
        filter: "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

scc_project_notification = gcp.pubsub.Topic("scc_project_notification", name="my-topic")
custom_notification_config = gcp.securitycenter.ProjectNotificationConfig("custom_notification_config",
    config_id="my-config",
    project="my-project-name",
    description="My custom Cloud Security Command Center Finding Notification Configuration",
    pubsub_topic=scc_project_notification.id,
    streaming_config={
        "filter": "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sccProjectNotification = new Gcp.PubSub.Topic("scc_project_notification", new()
    {
        Name = "my-topic",
    });

    var customNotificationConfig = new Gcp.SecurityCenter.ProjectNotificationConfig("custom_notification_config", new()
    {
        ConfigId = "my-config",
        Project = "my-project-name",
        Description = "My custom Cloud Security Command Center Finding Notification Configuration",
        PubsubTopic = sccProjectNotification.Id,
        StreamingConfig = new Gcp.SecurityCenter.Inputs.ProjectNotificationConfigStreamingConfigArgs
        {
            Filter = "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sccProjectNotification, err := pubsub.NewTopic(ctx, "scc_project_notification", &pubsub.TopicArgs{
			Name: pulumi.String("my-topic"),
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewProjectNotificationConfig(ctx, "custom_notification_config", &securitycenter.ProjectNotificationConfigArgs{
			ConfigId:    pulumi.String("my-config"),
			Project:     pulumi.String("my-project-name"),
			Description: pulumi.String("My custom Cloud Security Command Center Finding Notification Configuration"),
			PubsubTopic: sccProjectNotification.ID(),
			StreamingConfig: &securitycenter.ProjectNotificationConfigStreamingConfigArgs{
				Filter: pulumi.String("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\""),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.securitycenter.ProjectNotificationConfig;
import com.pulumi.gcp.securitycenter.ProjectNotificationConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.ProjectNotificationConfigStreamingConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sccProjectNotification = new Topic("sccProjectNotification", TopicArgs.builder()
            .name("my-topic")
            .build());

        var customNotificationConfig = new ProjectNotificationConfig("customNotificationConfig", ProjectNotificationConfigArgs.builder()
            .configId("my-config")
            .project("my-project-name")
            .description("My custom Cloud Security Command Center Finding Notification Configuration")
            .pubsubTopic(sccProjectNotification.id())
            .streamingConfig(ProjectNotificationConfigStreamingConfigArgs.builder()
                .filter("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sccProjectNotification:
    type: gcp:pubsub:Topic
    name: scc_project_notification
    properties:
      name: my-topic
  customNotificationConfig:
    type: gcp:securitycenter:ProjectNotificationConfig
    name: custom_notification_config
    properties:
      configId: my-config
      project: my-project-name
      description: My custom Cloud Security Command Center Finding Notification Configuration
      pubsubTopic: ${sccProjectNotification.id}
      streamingConfig:
        filter: category = "OPEN_FIREWALL" AND state = "ACTIVE"
```
<!--End PulumiCodeChooser -->

## Import

ProjectNotificationConfig can be imported using any of these accepted formats:

* `{{name}}`

When using the `pulumi import` command, ProjectNotificationConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/projectNotificationConfig:ProjectNotificationConfig default {{name}}
```

=
configId" -This must be unique within the organization.
Z
descriptionB" EThe description of the notification config (max of 1024 characters).

projectB" u
pubsubTopic" bThe Pub/Sub topic to send notifications to. Its format is
"projects/[project_id]/topics/[topic]".
ћ
streamingConfigд:Б
а
securitycenter(ProjectNotificationConfigStreamingConfigdgcp:securitycenter/ProjectNotificationConfigStreamingConfig:ProjectNotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
"=
configId" -This must be unique within the organization.
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"Ё
name" yThe resource name of this notification config, in the format
`projects/{{projectId}}/notificationConfigs/{{config_id}}`.
"
project" "u
pubsubTopic" bThe Pub/Sub topic to send notifications to. Its format is
"projects/[project_id]/topics/[topic]".
"y
serviceAccount" cThe service account that needs "pubsub.topics.publish" permission to
publish to the Pub/Sub topic.
"ћ
streamingConfigд:Б
а
securitycenter(ProjectNotificationConfigStreamingConfigdgcp:securitycenter/ProjectNotificationConfigStreamingConfig:ProjectNotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
*Ф3
p
securitycenterProjectSccBigQueryExportDgcp:securitycenter/projectSccBigQueryExport:ProjectSccBigQueryExportВA Cloud Security Command Center (Cloud SCC) Big Query Export Config.
It represents exporting Security Command Center data, including assets, findings, and security marks
using gcloud scc bqexports
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about ProjectSccBigQueryExport, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/projects.bigQueryExports)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs/how-to-analyze-findings-in-big-query)

## Example Usage

### Scc Project Big Query Export Config Basic


<!--Start PulumiCodeChooser -->
```yaml
resources:
  default:
    type: gcp:bigquery:Dataset
    properties:
      datasetId: my_dataset_id
      friendlyName: test
      description: This is a test description
      location: US
      defaultTableExpirationMs: 3.6e+06
      defaultPartitionExpirationMs: null
      labels:
        env: default
  customBigQueryExportConfig:
    type: gcp:securitycenter:ProjectSccBigQueryExport
    name: custom_big_query_export_config
    properties:
      name: my-export
      bigQueryExportId: my-export
      project: my-project-name
      dataset: ${default.id}
      description: Cloud Security Command Center Findings Big Query Export Config
      filter: state="ACTIVE" AND NOT mute="MUTED"
```
<!--End PulumiCodeChooser -->

## Import

ProjectSccBigQueryExport can be imported using any of these accepted formats:

* `projects/{{project}}/bigQueryExports/{{big_query_export_id}}`

* `{{project}}/{{big_query_export_id}}`

* `{{big_query_export_id}}`

When using the `pulumi import` command, ProjectSccBigQueryExport can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/projectSccBigQueryExport:ProjectSccBigQueryExport default projects/{{project}}/bigQueryExports/{{big_query_export_id}}
```

```sh
$ pulumi import gcp:securitycenter/projectSccBigQueryExport:ProjectSccBigQueryExport default {{project}}/{{big_query_export_id}}
```

```sh
$ pulumi import gcp:securitycenter/projectSccBigQueryExport:ProjectSccBigQueryExport default {{big_query_export_id}}
```

M
bigQueryExportId" 5This must be unique within the organization.


- - -
Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
Z
descriptionB" EThe description of the notification config (max of 1024 characters).
Э
filterB" уExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* \>, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"M
bigQueryExportId" 5This must be unique within the organization.


- - -
"╦

createTime" ИThe time at which the BigQuery export was created. This field is set by the server and will be ignored if provided on export on creation.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"Э
filterB" уExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* \>, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
"Х
mostRecentEditor" ЮEmail address of the user who last edited the BigQuery export.
This field is set by the server and will be ignored if provided on export creation or update.
"М
name" кThe resource name of this export, in the format
`projects/{{project}}/bigQueryExports/{{big_query_export_id}}`.
This field is provided in responses, and is ignored when provided in create requests.
"t
	principal" cThe service account that needs permission to create table and upload data to the BigQuery dataset.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"я

updateTime" ╦The most recent time at which the BigQuery export was updated. This field is set by the server and will be ignored if provided on export creation or update.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*Ы%
:
securitycenterSource gcp:securitycenter/source:SourceѓA Cloud Security Command Center's (Cloud SCC) finding source. A finding
source is an entity or a mechanism that can produce a finding. A source is
like a container of findings that come from the same scanner, logger,
monitor, etc.


To get more information about Source, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.sources)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs)

## Example Usage

### Scc Source Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const customSource = new gcp.securitycenter.Source("custom_source", {
    displayName: "My Source",
    organization: "123456789",
    description: "My custom Cloud Security Command Center Finding Source",
});
```
```python
import pulumi
import pulumi_gcp as gcp

custom_source = gcp.securitycenter.Source("custom_source",
    display_name="My Source",
    organization="123456789",
    description="My custom Cloud Security Command Center Finding Source")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var customSource = new Gcp.SecurityCenter.Source("custom_source", new()
    {
        DisplayName = "My Source",
        Organization = "123456789",
        Description = "My custom Cloud Security Command Center Finding Source",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewSource(ctx, "custom_source", &securitycenter.SourceArgs{
			DisplayName:  pulumi.String("My Source"),
			Organization: pulumi.String("123456789"),
			Description:  pulumi.String("My custom Cloud Security Command Center Finding Source"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.Source;
import com.pulumi.gcp.securitycenter.SourceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var customSource = new Source("customSource", SourceArgs.builder()
            .displayName("My Source")
            .organization("123456789")
            .description("My custom Cloud Security Command Center Finding Source")
            .build());

    }
}
```
```yaml
resources:
  customSource:
    type: gcp:securitycenter:Source
    name: custom_source
    properties:
      displayName: My Source
      organization: '123456789'
      description: My custom Cloud Security Command Center Finding Source
```
<!--End PulumiCodeChooser -->

## Import

Source can be imported using any of these accepted formats:

* `organizations/{{organization}}/sources/{{name}}`

* `{{organization}}/{{name}}`

When using the `pulumi import` command, Source can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/source:Source default organizations/{{organization}}/sources/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/source:Source default {{organization}}/{{name}}
```

M
descriptionB" 8The description of the source (max of 1024 characters).
т
displayName" ЛThe sourceРђЎs display name. A sourceРђЎs display name must be unique
amongst its siblings, for example, two sources with the same parent
can't share the same display name. The display name must start and end
with a letter or digit, may contain letters, digits, spaces, hyphens,
and underscores, and can be no longer than 32 characters.
f
organization" RThe organization whose Cloud Security Command Center the Source
lives in.


- - -
"M
descriptionB" 8The description of the source (max of 1024 characters).
"т
displayName" ЛThe sourceРђЎs display name. A sourceРђЎs display name must be unique
amongst its siblings, for example, two sources with the same parent
can't share the same display name. The display name must start and end
with a letter or digit, may contain letters, digits, spaces, hyphens,
and underscores, and can be no longer than 32 characters.
"q
name" eThe resource name of this source, in the format
`organizations/{{organization}}/sources/{{source}}`.
"f
organization" RThe organization whose Cloud Security Command Center the Source
lives in.


- - -
*╦!
X
securitycenterSourceIamBinding4gcp:securitycenter/sourceIamBinding:SourceIamBindingфA Cloud Security Command Center's (Cloud SCC) finding source. A finding
source is an entity or a mechanism that can produce a finding. A source is
like a container of findings that come from the same scanner, logger,
monitor, etc.


To get more information about Source, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.sources)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs)

## Example Usage

### Scc Source Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const customSource = new gcp.securitycenter.Source("custom_source", {
    displayName: "My Source",
    organization: "123456789",
    description: "My custom Cloud Security Command Center Finding Source",
});
```
```python
import pulumi
import pulumi_gcp as gcp

custom_source = gcp.securitycenter.Source("custom_source",
    display_name="My Source",
    organization="123456789",
    description="My custom Cloud Security Command Center Finding Source")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var customSource = new Gcp.SecurityCenter.Source("custom_source", new()
    {
        DisplayName = "My Source",
        Organization = "123456789",
        Description = "My custom Cloud Security Command Center Finding Source",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewSource(ctx, "custom_source", &securitycenter.SourceArgs{
			DisplayName:  pulumi.String("My Source"),
			Organization: pulumi.String("123456789"),
			Description:  pulumi.String("My custom Cloud Security Command Center Finding Source"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.Source;
import com.pulumi.gcp.securitycenter.SourceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var customSource = new Source("customSource", SourceArgs.builder()
            .displayName("My Source")
            .organization("123456789")
            .description("My custom Cloud Security Command Center Finding Source")
            .build());

    }
}
```
```yaml
resources:
  customSource:
    type: gcp:securitycenter:Source
    name: custom_source
    properties:
      displayName: My Source
      organization: '123456789'
      description: My custom Cloud Security Command Center Finding Source
```
<!--End PulumiCodeChooser -->

## Import

Source can be imported using any of these accepted formats:

* `organizations/{{organization}}/sources/{{name}}`

* `{{organization}}/{{name}}`

When using the `pulumi import` command, Source can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/sourceIamBinding:SourceIamBinding default organizations/{{organization}}/sources/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/sourceIamBinding:SourceIamBinding default {{organization}}/{{name}}
```

є
	conditionyBw:u
s
securitycenterSourceIamBindingConditionFgcp:securitycenter/SourceIamBindingCondition:SourceIamBindingCondition
members*" f
organization" RThe organization whose Cloud Security Command Center the Source
lives in.


- - -


role" 
source" "є
	conditionyBw:u
s
securitycenterSourceIamBindingConditionFgcp:securitycenter/SourceIamBindingCondition:SourceIamBindingCondition"

etag" "
members*" "f
organization" RThe organization whose Cloud Security Command Center the Source
lives in.


- - -
"

role" "
source" *И!
U
securitycenterSourceIamMember2gcp:securitycenter/sourceIamMember:SourceIamMemberдA Cloud Security Command Center's (Cloud SCC) finding source. A finding
source is an entity or a mechanism that can produce a finding. A source is
like a container of findings that come from the same scanner, logger,
monitor, etc.


To get more information about Source, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.sources)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs)

## Example Usage

### Scc Source Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const customSource = new gcp.securitycenter.Source("custom_source", {
    displayName: "My Source",
    organization: "123456789",
    description: "My custom Cloud Security Command Center Finding Source",
});
```
```python
import pulumi
import pulumi_gcp as gcp

custom_source = gcp.securitycenter.Source("custom_source",
    display_name="My Source",
    organization="123456789",
    description="My custom Cloud Security Command Center Finding Source")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var customSource = new Gcp.SecurityCenter.Source("custom_source", new()
    {
        DisplayName = "My Source",
        Organization = "123456789",
        Description = "My custom Cloud Security Command Center Finding Source",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewSource(ctx, "custom_source", &securitycenter.SourceArgs{
			DisplayName:  pulumi.String("My Source"),
			Organization: pulumi.String("123456789"),
			Description:  pulumi.String("My custom Cloud Security Command Center Finding Source"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.Source;
import com.pulumi.gcp.securitycenter.SourceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var customSource = new Source("customSource", SourceArgs.builder()
            .displayName("My Source")
            .organization("123456789")
            .description("My custom Cloud Security Command Center Finding Source")
            .build());

    }
}
```
```yaml
resources:
  customSource:
    type: gcp:securitycenter:Source
    name: custom_source
    properties:
      displayName: My Source
      organization: '123456789'
      description: My custom Cloud Security Command Center Finding Source
```
<!--End PulumiCodeChooser -->

## Import

Source can be imported using any of these accepted formats:

* `organizations/{{organization}}/sources/{{name}}`

* `{{organization}}/{{name}}`

When using the `pulumi import` command, Source can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/sourceIamMember:SourceIamMember default organizations/{{organization}}/sources/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/sourceIamMember:SourceIamMember default {{organization}}/{{name}}
```

Ѓ
	conditionvBt:r
p
securitycenterSourceIamMemberConditionDgcp:securitycenter/SourceIamMemberCondition:SourceIamMemberCondition
member" f
organization" RThe organization whose Cloud Security Command Center the Source
lives in.


- - -


role" 
source" "Ѓ
	conditionvBt:r
p
securitycenterSourceIamMemberConditionDgcp:securitycenter/SourceIamMemberCondition:SourceIamMemberCondition"

etag" "
member" "f
organization" RThe organization whose Cloud Security Command Center the Source
lives in.


- - -
"

role" "
source" *ю
U
securitycenterSourceIamPolicy2gcp:securitycenter/sourceIamPolicy:SourceIamPolicyдA Cloud Security Command Center's (Cloud SCC) finding source. A finding
source is an entity or a mechanism that can produce a finding. A source is
like a container of findings that come from the same scanner, logger,
monitor, etc.


To get more information about Source, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.sources)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs)

## Example Usage

### Scc Source Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const customSource = new gcp.securitycenter.Source("custom_source", {
    displayName: "My Source",
    organization: "123456789",
    description: "My custom Cloud Security Command Center Finding Source",
});
```
```python
import pulumi
import pulumi_gcp as gcp

custom_source = gcp.securitycenter.Source("custom_source",
    display_name="My Source",
    organization="123456789",
    description="My custom Cloud Security Command Center Finding Source")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var customSource = new Gcp.SecurityCenter.Source("custom_source", new()
    {
        DisplayName = "My Source",
        Organization = "123456789",
        Description = "My custom Cloud Security Command Center Finding Source",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewSource(ctx, "custom_source", &securitycenter.SourceArgs{
			DisplayName:  pulumi.String("My Source"),
			Organization: pulumi.String("123456789"),
			Description:  pulumi.String("My custom Cloud Security Command Center Finding Source"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.Source;
import com.pulumi.gcp.securitycenter.SourceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var customSource = new Source("customSource", SourceArgs.builder()
            .displayName("My Source")
            .organization("123456789")
            .description("My custom Cloud Security Command Center Finding Source")
            .build());

    }
}
```
```yaml
resources:
  customSource:
    type: gcp:securitycenter:Source
    name: custom_source
    properties:
      displayName: My Source
      organization: '123456789'
      description: My custom Cloud Security Command Center Finding Source
```
<!--End PulumiCodeChooser -->

## Import

Source can be imported using any of these accepted formats:

* `organizations/{{organization}}/sources/{{name}}`

* `{{organization}}/{{name}}`

When using the `pulumi import` command, Source can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/sourceIamPolicy:SourceIamPolicy default organizations/{{organization}}/sources/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/sourceIamPolicy:SourceIamPolicy default {{organization}}/{{name}}
```

f
organization" RThe organization whose Cloud Security Command Center the Source
lives in.


- - -


policyData" 
source" "

etag" "f
organization" RThe organization whose Cloud Security Command Center the Source
lives in.


- - -
"

policyData" "
source" *╦<
^
securitycenterV2FolderMuteConfig8gcp:securitycenter/v2FolderMuteConfig:V2FolderMuteConfigр*Mute Findings is a volume management feature in Security Command Center
that lets you manually or programmatically hide irrelevant findings,
and create filters to automatically silence existing and future
findings based on criteria you specify.


To get more information about FolderMuteConfig, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/folders.muteConfigs)

## Example Usage

### Scc V2 Folder Mute Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const folder = new gcp.organizations.Folder("folder", {
    parent: "organizations/123456789",
    displayName: "folder-name",
});
const _default = new gcp.securitycenter.V2FolderMuteConfig("default", {
    muteConfigId: "my-config",
    folder: folder.folderId,
    location: "global",
    description: "My custom Cloud Security Command Center Finding Folder mute Configuration",
    filter: "severity = \"HIGH\"",
    type: "STATIC",
});
```
```python
import pulumi
import pulumi_gcp as gcp

folder = gcp.organizations.Folder("folder",
    parent="organizations/123456789",
    display_name="folder-name")
default = gcp.securitycenter.V2FolderMuteConfig("default",
    mute_config_id="my-config",
    folder=folder.folder_id,
    location="global",
    description="My custom Cloud Security Command Center Finding Folder mute Configuration",
    filter="severity = \"HIGH\"",
    type="STATIC")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var folder = new Gcp.Organizations.Folder("folder", new()
    {
        Parent = "organizations/123456789",
        DisplayName = "folder-name",
    });

    var @default = new Gcp.SecurityCenter.V2FolderMuteConfig("default", new()
    {
        MuteConfigId = "my-config",
        Folder = folder.FolderId,
        Location = "global",
        Description = "My custom Cloud Security Command Center Finding Folder mute Configuration",
        Filter = "severity = \"HIGH\"",
        Type = "STATIC",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		folder, err := organizations.NewFolder(ctx, "folder", &organizations.FolderArgs{
			Parent:      pulumi.String("organizations/123456789"),
			DisplayName: pulumi.String("folder-name"),
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2FolderMuteConfig(ctx, "default", &securitycenter.V2FolderMuteConfigArgs{
			MuteConfigId: pulumi.String("my-config"),
			Folder:       folder.FolderId,
			Location:     pulumi.String("global"),
			Description:  pulumi.String("My custom Cloud Security Command Center Finding Folder mute Configuration"),
			Filter:       pulumi.String("severity = \"HIGH\""),
			Type:         pulumi.String("STATIC"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Folder;
import com.pulumi.gcp.organizations.FolderArgs;
import com.pulumi.gcp.securitycenter.V2FolderMuteConfig;
import com.pulumi.gcp.securitycenter.V2FolderMuteConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var folder = new Folder("folder", FolderArgs.builder()
            .parent("organizations/123456789")
            .displayName("folder-name")
            .build());

        var default_ = new V2FolderMuteConfig("default", V2FolderMuteConfigArgs.builder()
            .muteConfigId("my-config")
            .folder(folder.folderId())
            .location("global")
            .description("My custom Cloud Security Command Center Finding Folder mute Configuration")
            .filter("severity = \"HIGH\"")
            .type("STATIC")
            .build());

    }
}
```
```yaml
resources:
  folder:
    type: gcp:organizations:Folder
    properties:
      parent: organizations/123456789
      displayName: folder-name
  default:
    type: gcp:securitycenter:V2FolderMuteConfig
    properties:
      muteConfigId: my-config
      folder: ${folder.folderId}
      location: global
      description: My custom Cloud Security Command Center Finding Folder mute Configuration
      filter: severity = "HIGH"
      type: STATIC
```
<!--End PulumiCodeChooser -->

## Import

FolderMuteConfig can be imported using any of these accepted formats:

* `folders/{{folder}}/locations/{{location}}/muteConfigs/{{mute_config_id}}`

* `{{folder}}/{{location}}/{{mute_config_id}}`

When using the `pulumi import` command, FolderMuteConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/v2FolderMuteConfig:V2FolderMuteConfig default folders/{{folder}}/locations/{{location}}/muteConfigs/{{mute_config_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2FolderMuteConfig:V2FolderMuteConfig default {{folder}}/{{location}}/{{mute_config_id}}
```

7
descriptionB" "A description of the mute config.
┼
filter" ХAn expression that defines the filter to apply across create/update
events of findings. While creating a filter string, be mindful of
the scope in which the mute configuration is being created. E.g.,
If a filter contains project = X but is created under the
project = Y scope, it might not match any findings.
W
folder" IThe folder whose Cloud Security Command Center the Mute
Config lives in.
]
locationB" Klocation Id is provided by folder. If not provided, Use global as default.
^
muteConfigId" JUnique identifier provided by the client within the parent scope.


- - -
)
type" The type of the mute config.
"ќ

createTime" ЃThe time at which the mute config was created. This field is set by
the server and will be ignored if provided on config creation.
"7
descriptionB" "A description of the mute config.
"┼
filter" ХAn expression that defines the filter to apply across create/update
events of findings. While creating a filter string, be mindful of
the scope in which the mute configuration is being created. E.g.,
If a filter contains project = X but is created under the
project = Y scope, it might not match any findings.
"W
folder" IThe folder whose Cloud Security Command Center the Mute
Config lives in.
"]
locationB" Klocation Id is provided by folder. If not provided, Use global as default.
"▓
mostRecentEditor" ЎEmail address of the user who last edited the mute config. This
field is set by the server and will be ignored if provided on
config creation or update.
"^
muteConfigId" JUnique identifier provided by the client within the parent scope.


- - -
"Ы
name" тName of the mute config. Its format is
organizations/{organization}/locations/global/muteConfigs/{configId},
folders/{folder}/locations/global/muteConfigs/{configId},
or projects/{project}/locations/global/muteConfigs/{configId}
")
type" The type of the mute config.
"╣

updateTime" дOutput only. The most recent time at which the mute config was
updated. This field is set by the server and will be ignored if
provided on config creation or update.
*иM
v
securitycenterV2FolderNotificationConfigHgcp:securitycenter/v2FolderNotificationConfig:V2FolderNotificationConfig№>A Cloud Security Command Center (Cloud SCC) notification configs. A
notification config is a Cloud SCC resource that contains the
configuration to send notifications for create/update events of
findings, assets and etc.
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about FolderNotificationConfig, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/folders.locations.notificationConfigs)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs)

## Example Usage

### Scc V2 Folder Notification Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const folder = new gcp.organizations.Folder("folder", {
    parent: "organizations/123456789",
    displayName: "folder-name",
});
const sccV2FolderNotificationConfig = new gcp.pubsub.Topic("scc_v2_folder_notification_config", {name: "my-topic"});
const customNotificationConfig = new gcp.securitycenter.V2FolderNotificationConfig("custom_notification_config", {
    configId: "my-config",
    folder: folder.folderId,
    location: "global",
    description: "My custom Cloud Security Command Center Finding Notification Configuration",
    pubsubTopic: sccV2FolderNotificationConfig.id,
    streamingConfig: {
        filter: "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

folder = gcp.organizations.Folder("folder",
    parent="organizations/123456789",
    display_name="folder-name")
scc_v2_folder_notification_config = gcp.pubsub.Topic("scc_v2_folder_notification_config", name="my-topic")
custom_notification_config = gcp.securitycenter.V2FolderNotificationConfig("custom_notification_config",
    config_id="my-config",
    folder=folder.folder_id,
    location="global",
    description="My custom Cloud Security Command Center Finding Notification Configuration",
    pubsub_topic=scc_v2_folder_notification_config.id,
    streaming_config={
        "filter": "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var folder = new Gcp.Organizations.Folder("folder", new()
    {
        Parent = "organizations/123456789",
        DisplayName = "folder-name",
    });

    var sccV2FolderNotificationConfig = new Gcp.PubSub.Topic("scc_v2_folder_notification_config", new()
    {
        Name = "my-topic",
    });

    var customNotificationConfig = new Gcp.SecurityCenter.V2FolderNotificationConfig("custom_notification_config", new()
    {
        ConfigId = "my-config",
        Folder = folder.FolderId,
        Location = "global",
        Description = "My custom Cloud Security Command Center Finding Notification Configuration",
        PubsubTopic = sccV2FolderNotificationConfig.Id,
        StreamingConfig = new Gcp.SecurityCenter.Inputs.V2FolderNotificationConfigStreamingConfigArgs
        {
            Filter = "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		folder, err := organizations.NewFolder(ctx, "folder", &organizations.FolderArgs{
			Parent:      pulumi.String("organizations/123456789"),
			DisplayName: pulumi.String("folder-name"),
		})
		if err != nil {
			return err
		}
		sccV2FolderNotificationConfig, err := pubsub.NewTopic(ctx, "scc_v2_folder_notification_config", &pubsub.TopicArgs{
			Name: pulumi.String("my-topic"),
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2FolderNotificationConfig(ctx, "custom_notification_config", &securitycenter.V2FolderNotificationConfigArgs{
			ConfigId:    pulumi.String("my-config"),
			Folder:      folder.FolderId,
			Location:    pulumi.String("global"),
			Description: pulumi.String("My custom Cloud Security Command Center Finding Notification Configuration"),
			PubsubTopic: sccV2FolderNotificationConfig.ID(),
			StreamingConfig: &securitycenter.V2FolderNotificationConfigStreamingConfigArgs{
				Filter: pulumi.String("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\""),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Folder;
import com.pulumi.gcp.organizations.FolderArgs;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.securitycenter.V2FolderNotificationConfig;
import com.pulumi.gcp.securitycenter.V2FolderNotificationConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.V2FolderNotificationConfigStreamingConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var folder = new Folder("folder", FolderArgs.builder()
            .parent("organizations/123456789")
            .displayName("folder-name")
            .build());

        var sccV2FolderNotificationConfig = new Topic("sccV2FolderNotificationConfig", TopicArgs.builder()
            .name("my-topic")
            .build());

        var customNotificationConfig = new V2FolderNotificationConfig("customNotificationConfig", V2FolderNotificationConfigArgs.builder()
            .configId("my-config")
            .folder(folder.folderId())
            .location("global")
            .description("My custom Cloud Security Command Center Finding Notification Configuration")
            .pubsubTopic(sccV2FolderNotificationConfig.id())
            .streamingConfig(V2FolderNotificationConfigStreamingConfigArgs.builder()
                .filter("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"")
                .build())
            .build());

    }
}
```
```yaml
resources:
  folder:
    type: gcp:organizations:Folder
    properties:
      parent: organizations/123456789
      displayName: folder-name
  sccV2FolderNotificationConfig:
    type: gcp:pubsub:Topic
    name: scc_v2_folder_notification_config
    properties:
      name: my-topic
  customNotificationConfig:
    type: gcp:securitycenter:V2FolderNotificationConfig
    name: custom_notification_config
    properties:
      configId: my-config
      folder: ${folder.folderId}
      location: global
      description: My custom Cloud Security Command Center Finding Notification Configuration
      pubsubTopic: ${sccV2FolderNotificationConfig.id}
      streamingConfig:
        filter: category = "OPEN_FIREWALL" AND state = "ACTIVE"
```
<!--End PulumiCodeChooser -->

## Import

FolderNotificationConfig can be imported using any of these accepted formats:

* `folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}`

* `{{folder}}/{{location}}/{{config_id}}`

When using the `pulumi import` command, FolderNotificationConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/v2FolderNotificationConfig:V2FolderNotificationConfig default folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2FolderNotificationConfig:V2FolderNotificationConfig default {{folder}}/{{location}}/{{config_id}}
```

=
configId" -This must be unique within the organization.
Z
descriptionB" EThe description of the notification config (max of 1024 characters).
1
folder" #Numerical ID of the parent folder.
z
locationB" hLocation ID of the parent organization. If not provided, 'global' will be used as the default location.
u
pubsubTopic" bThe Pub/Sub topic to send notifications to. Its format is
"projects/[project_id]/topics/[topic]".
Ќ
streamingConfigЕ:д
Б
securitycenter)V2FolderNotificationConfigStreamingConfigfgcp:securitycenter/V2FolderNotificationConfigStreamingConfig:V2FolderNotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
"=
configId" -This must be unique within the organization.
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"1
folder" #Numerical ID of the parent folder.
"z
locationB" hLocation ID of the parent organization. If not provided, 'global' will be used as the default location.
"Ў
name" їThe resource name of this notification config, in the format
`folders/{{folder}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
"u
pubsubTopic" bThe Pub/Sub topic to send notifications to. Its format is
"projects/[project_id]/topics/[topic]".
"y
serviceAccount" cThe service account that needs "pubsub.topics.publish" permission to
publish to the Pub/Sub topic.
"Ќ
streamingConfigЕ:д
Б
securitycenter)V2FolderNotificationConfigStreamingConfigfgcp:securitycenter/V2FolderNotificationConfigStreamingConfig:V2FolderNotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
*█j
s
securitycenterV2FolderSccBigQueryExportFgcp:securitycenter/v2FolderSccBigQueryExport:V2FolderSccBigQueryExport­EA Cloud Security Command Center (Cloud SCC) Big Query Export Config.
It represents exporting Security Command Center data, including assets, findings, and security marks
using gcloud scc bqexports
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about FolderSccBigQueryExport, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/folders.locations.bigQueryExports)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs/how-to-analyze-findings-in-big-query)

## Example Usage

### Scc V2 Folder Big Query Export Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const folder = new gcp.organizations.Folder("folder", {
    parent: "organizations/123456789",
    displayName: "folder-name",
    deletionProtection: false,
});
const _default = new gcp.bigquery.Dataset("default", {
    datasetId: "my_dataset_id",
    friendlyName: "test",
    description: "This is a test description",
    location: "US",
    defaultTableExpirationMs: 3600000,
    defaultPartitionExpirationMs: undefined,
    labels: {
        env: "default",
    },
});
const customBigQueryExportConfig = new gcp.securitycenter.V2FolderSccBigQueryExport("custom_big_query_export_config", {
    bigQueryExportId: "my-export",
    folder: folder.folderId,
    dataset: _default.id,
    location: "global",
    description: "Cloud Security Command Center Findings Big Query Export Config",
    filter: "state=\"ACTIVE\" AND NOT mute=\"MUTED\"",
});
```
```python
import pulumi
import pulumi_gcp as gcp

folder = gcp.organizations.Folder("folder",
    parent="organizations/123456789",
    display_name="folder-name",
    deletion_protection=False)
default = gcp.bigquery.Dataset("default",
    dataset_id="my_dataset_id",
    friendly_name="test",
    description="This is a test description",
    location="US",
    default_table_expiration_ms=3600000,
    default_partition_expiration_ms=None,
    labels={
        "env": "default",
    })
custom_big_query_export_config = gcp.securitycenter.V2FolderSccBigQueryExport("custom_big_query_export_config",
    big_query_export_id="my-export",
    folder=folder.folder_id,
    dataset=default.id,
    location="global",
    description="Cloud Security Command Center Findings Big Query Export Config",
    filter="state=\"ACTIVE\" AND NOT mute=\"MUTED\"")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var folder = new Gcp.Organizations.Folder("folder", new()
    {
        Parent = "organizations/123456789",
        DisplayName = "folder-name",
        DeletionProtection = false,
    });

    var @default = new Gcp.BigQuery.Dataset("default", new()
    {
        DatasetId = "my_dataset_id",
        FriendlyName = "test",
        Description = "This is a test description",
        Location = "US",
        DefaultTableExpirationMs = 3600000,
        DefaultPartitionExpirationMs = null,
        Labels = 
        {
            { "env", "default" },
        },
    });

    var customBigQueryExportConfig = new Gcp.SecurityCenter.V2FolderSccBigQueryExport("custom_big_query_export_config", new()
    {
        BigQueryExportId = "my-export",
        Folder = folder.FolderId,
        Dataset = @default.Id,
        Location = "global",
        Description = "Cloud Security Command Center Findings Big Query Export Config",
        Filter = "state=\"ACTIVE\" AND NOT mute=\"MUTED\"",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		folder, err := organizations.NewFolder(ctx, "folder", &organizations.FolderArgs{
			Parent:             pulumi.String("organizations/123456789"),
			DisplayName:        pulumi.String("folder-name"),
			DeletionProtection: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		_, err = bigquery.NewDataset(ctx, "default", &bigquery.DatasetArgs{
			DatasetId:                    pulumi.String("my_dataset_id"),
			FriendlyName:                 pulumi.String("test"),
			Description:                  pulumi.String("This is a test description"),
			Location:                     pulumi.String("US"),
			DefaultTableExpirationMs:     pulumi.Int(3600000),
			DefaultPartitionExpirationMs: nil,
			Labels: pulumi.StringMap{
				"env": pulumi.String("default"),
			},
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2FolderSccBigQueryExport(ctx, "custom_big_query_export_config", &securitycenter.V2FolderSccBigQueryExportArgs{
			BigQueryExportId: pulumi.String("my-export"),
			Folder:           folder.FolderId,
			Dataset:          _default.ID(),
			Location:         pulumi.String("global"),
			Description:      pulumi.String("Cloud Security Command Center Findings Big Query Export Config"),
			Filter:           pulumi.String("state=\"ACTIVE\" AND NOT mute=\"MUTED\""),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Folder;
import com.pulumi.gcp.organizations.FolderArgs;
import com.pulumi.gcp.bigquery.Dataset;
import com.pulumi.gcp.bigquery.DatasetArgs;
import com.pulumi.gcp.securitycenter.V2FolderSccBigQueryExport;
import com.pulumi.gcp.securitycenter.V2FolderSccBigQueryExportArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var folder = new Folder("folder", FolderArgs.builder()
            .parent("organizations/123456789")
            .displayName("folder-name")
            .deletionProtection(false)
            .build());

        var default_ = new Dataset("default", DatasetArgs.builder()
            .datasetId("my_dataset_id")
            .friendlyName("test")
            .description("This is a test description")
            .location("US")
            .defaultTableExpirationMs(3600000)
            .defaultPartitionExpirationMs(null)
            .labels(Map.of("env", "default"))
            .build());

        var customBigQueryExportConfig = new V2FolderSccBigQueryExport("customBigQueryExportConfig", V2FolderSccBigQueryExportArgs.builder()
            .bigQueryExportId("my-export")
            .folder(folder.folderId())
            .dataset(default_.id())
            .location("global")
            .description("Cloud Security Command Center Findings Big Query Export Config")
            .filter("state=\"ACTIVE\" AND NOT mute=\"MUTED\"")
            .build());

    }
}
```
```yaml
resources:
  folder:
    type: gcp:organizations:Folder
    properties:
      parent: organizations/123456789
      displayName: folder-name
      deletionProtection: false
  default:
    type: gcp:bigquery:Dataset
    properties:
      datasetId: my_dataset_id
      friendlyName: test
      description: This is a test description
      location: US
      defaultTableExpirationMs: 3.6e+06
      defaultPartitionExpirationMs: null
      labels:
        env: default
  customBigQueryExportConfig:
    type: gcp:securitycenter:V2FolderSccBigQueryExport
    name: custom_big_query_export_config
    properties:
      bigQueryExportId: my-export
      folder: ${folder.folderId}
      dataset: ${default.id}
      location: global
      description: Cloud Security Command Center Findings Big Query Export Config
      filter: state="ACTIVE" AND NOT mute="MUTED"
```
<!--End PulumiCodeChooser -->

## Import

FolderSccBigQueryExport can be imported using any of these accepted formats:

* `folders/{{folder}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}`

* `{{folder}}/{{location}}/{{big_query_export_id}}`

When using the `pulumi import` command, FolderSccBigQueryExport can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/v2FolderSccBigQueryExport:V2FolderSccBigQueryExport default folders/{{folder}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2FolderSccBigQueryExport:V2FolderSccBigQueryExport default {{folder}}/{{location}}/{{big_query_export_id}}
```

Э
bigQueryExportId" ▀This must be unique within the organization.  It must consist of only lowercase letters,
numbers, and hyphens, must start with a letter, must end with either a letter or a number,
and must be 63 characters or less.


- - -
Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
Z
descriptionB" EThe description of the notification config (max of 1024 characters).
э
filterB" ТExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
_
folder" QThe folder where Cloud Security Command Center Big Query Export
Config lives in.
x
locationB" fThe BigQuery export configuration is stored in this location. If not provided, Use global as default.
"Э
bigQueryExportId" ▀This must be unique within the organization.  It must consist of only lowercase letters,
numbers, and hyphens, must start with a letter, must end with either a letter or a number,
and must be 63 characters or less.


- - -
"╦

createTime" ИThe time at which the BigQuery export was created. This field is set by the server and will be ignored if provided on export on creation.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"э
filterB" ТExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
"_
folder" QThe folder where Cloud Security Command Center Big Query Export
Config lives in.
"x
locationB" fThe BigQuery export configuration is stored in this location. If not provided, Use global as default.
"Х
mostRecentEditor" ЮEmail address of the user who last edited the BigQuery export.
This field is set by the server and will be ignored if provided on export creation or update.
"У
name" █The resource name of this export, in the format
`folders/{{folder}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}`.
This field is provided in responses, and is ignored when provided in create requests.
"t
	principal" cThe service account that needs permission to create table and upload data to the BigQuery dataset.
"я

updateTime" ╦The most recent time at which the BigQuery export was updated. This field is set by the server and will be ignored if provided on export creation or update.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*ї6
p
securitycenterV2OrganizationMuteConfigDgcp:securitycenter/v2OrganizationMuteConfig:V2OrganizationMuteConfigВ#Mute Findings is a volume management feature in Security Command Center
that lets you manually or programmatically hide irrelevant findings,
and create filters to automatically silence existing and future
findings based on criteria you specify.


To get more information about OrganizationMuteConfig, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.muteConfigs)

## Example Usage

### Scc V2 Organization Mute Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.securitycenter.V2OrganizationMuteConfig("default", {
    muteConfigId: "my-config",
    organization: "123456789",
    location: "global",
    description: "My custom Cloud Security Command Center Finding Organization mute Configuration",
    filter: "severity = \"HIGH\"",
    type: "STATIC",
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.securitycenter.V2OrganizationMuteConfig("default",
    mute_config_id="my-config",
    organization="123456789",
    location="global",
    description="My custom Cloud Security Command Center Finding Organization mute Configuration",
    filter="severity = \"HIGH\"",
    type="STATIC")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.SecurityCenter.V2OrganizationMuteConfig("default", new()
    {
        MuteConfigId = "my-config",
        Organization = "123456789",
        Location = "global",
        Description = "My custom Cloud Security Command Center Finding Organization mute Configuration",
        Filter = "severity = \"HIGH\"",
        Type = "STATIC",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationMuteConfig(ctx, "default", &securitycenter.V2OrganizationMuteConfigArgs{
			MuteConfigId: pulumi.String("my-config"),
			Organization: pulumi.String("123456789"),
			Location:     pulumi.String("global"),
			Description:  pulumi.String("My custom Cloud Security Command Center Finding Organization mute Configuration"),
			Filter:       pulumi.String("severity = \"HIGH\""),
			Type:         pulumi.String("STATIC"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationMuteConfig;
import com.pulumi.gcp.securitycenter.V2OrganizationMuteConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new V2OrganizationMuteConfig("default", V2OrganizationMuteConfigArgs.builder()
            .muteConfigId("my-config")
            .organization("123456789")
            .location("global")
            .description("My custom Cloud Security Command Center Finding Organization mute Configuration")
            .filter("severity = \"HIGH\"")
            .type("STATIC")
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:securitycenter:V2OrganizationMuteConfig
    properties:
      muteConfigId: my-config
      organization: '123456789'
      location: global
      description: My custom Cloud Security Command Center Finding Organization mute Configuration
      filter: severity = "HIGH"
      type: STATIC
```
<!--End PulumiCodeChooser -->

## Import

OrganizationMuteConfig can be imported using any of these accepted formats:

* `organizations/{{organization}}/locations/{{location}}/muteConfigs/{{mute_config_id}}`

* `{{organization}}/{{location}}/{{mute_config_id}}`

When using the `pulumi import` command, OrganizationMuteConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/v2OrganizationMuteConfig:V2OrganizationMuteConfig default organizations/{{organization}}/locations/{{location}}/muteConfigs/{{mute_config_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2OrganizationMuteConfig:V2OrganizationMuteConfig default {{organization}}/{{location}}/{{mute_config_id}}
```

7
descriptionB" "A description of the mute config.
┼
filter" ХAn expression that defines the filter to apply across create/update
events of findings. While creating a filter string, be mindful of
the scope in which the mute configuration is being created. E.g.,
If a filter contains project = X but is created under the
project = Y scope, it might not match any findings.
c
locationB" Qlocation Id is provided by organization. If not provided, Use global as default.
^
muteConfigId" JUnique identifier provided by the client within the parent scope.


- - -
c
organization" OThe organization whose Cloud Security Command Center the Mute
Config lives in.
)
type" The type of the mute config.
"ќ

createTime" ЃThe time at which the mute config was created. This field is set by
the server and will be ignored if provided on config creation.
"7
descriptionB" "A description of the mute config.
"┼
filter" ХAn expression that defines the filter to apply across create/update
events of findings. While creating a filter string, be mindful of
the scope in which the mute configuration is being created. E.g.,
If a filter contains project = X but is created under the
project = Y scope, it might not match any findings.
"c
locationB" Qlocation Id is provided by organization. If not provided, Use global as default.
"▓
mostRecentEditor" ЎEmail address of the user who last edited the mute config. This
field is set by the server and will be ignored if provided on
config creation or update.
"^
muteConfigId" JUnique identifier provided by the client within the parent scope.


- - -
"Ы
name" тName of the mute config. Its format is
organizations/{organization}/locations/global/muteConfigs/{configId},
folders/{folder}/locations/global/muteConfigs/{configId},
or projects/{project}/locations/global/muteConfigs/{configId}
"c
organization" OThe organization whose Cloud Security Command Center the Mute
Config lives in.
")
type" The type of the mute config.
"╣

updateTime" дOutput only. The most recent time at which the mute config was
updated. This field is set by the server and will be ignored if
provided on config creation or update.
*§F
ѕ
securitycenter V2OrganizationNotificationConfigTgcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig├7A Cloud Security Command Center (Cloud SCC) notification configs. A
notification config is a Cloud SCC resource that contains the
configuration to send notifications for create/update events of
findings, assets and etc.
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about OrganizationNotificationConfig, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.locations.notificationConfigs)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs)

## Example Usage

### Scc V2 Organization Notification Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sccV2OrganizationNotificationConfig = new gcp.pubsub.Topic("scc_v2_organization_notification_config", {name: "my-topic"});
const customOrganizationNotificationConfig = new gcp.securitycenter.V2OrganizationNotificationConfig("custom_organization_notification_config", {
    configId: "my-config",
    organization: "123456789",
    location: "global",
    description: "My custom Cloud Security Command Center Finding Organization Notification Configuration",
    pubsubTopic: sccV2OrganizationNotificationConfig.id,
    streamingConfig: {
        filter: "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

scc_v2_organization_notification_config = gcp.pubsub.Topic("scc_v2_organization_notification_config", name="my-topic")
custom_organization_notification_config = gcp.securitycenter.V2OrganizationNotificationConfig("custom_organization_notification_config",
    config_id="my-config",
    organization="123456789",
    location="global",
    description="My custom Cloud Security Command Center Finding Organization Notification Configuration",
    pubsub_topic=scc_v2_organization_notification_config.id,
    streaming_config={
        "filter": "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sccV2OrganizationNotificationConfig = new Gcp.PubSub.Topic("scc_v2_organization_notification_config", new()
    {
        Name = "my-topic",
    });

    var customOrganizationNotificationConfig = new Gcp.SecurityCenter.V2OrganizationNotificationConfig("custom_organization_notification_config", new()
    {
        ConfigId = "my-config",
        Organization = "123456789",
        Location = "global",
        Description = "My custom Cloud Security Command Center Finding Organization Notification Configuration",
        PubsubTopic = sccV2OrganizationNotificationConfig.Id,
        StreamingConfig = new Gcp.SecurityCenter.Inputs.V2OrganizationNotificationConfigStreamingConfigArgs
        {
            Filter = "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sccV2OrganizationNotificationConfig, err := pubsub.NewTopic(ctx, "scc_v2_organization_notification_config", &pubsub.TopicArgs{
			Name: pulumi.String("my-topic"),
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2OrganizationNotificationConfig(ctx, "custom_organization_notification_config", &securitycenter.V2OrganizationNotificationConfigArgs{
			ConfigId:     pulumi.String("my-config"),
			Organization: pulumi.String("123456789"),
			Location:     pulumi.String("global"),
			Description:  pulumi.String("My custom Cloud Security Command Center Finding Organization Notification Configuration"),
			PubsubTopic:  sccV2OrganizationNotificationConfig.ID(),
			StreamingConfig: &securitycenter.V2OrganizationNotificationConfigStreamingConfigArgs{
				Filter: pulumi.String("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\""),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.securitycenter.V2OrganizationNotificationConfig;
import com.pulumi.gcp.securitycenter.V2OrganizationNotificationConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.V2OrganizationNotificationConfigStreamingConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sccV2OrganizationNotificationConfig = new Topic("sccV2OrganizationNotificationConfig", TopicArgs.builder()
            .name("my-topic")
            .build());

        var customOrganizationNotificationConfig = new V2OrganizationNotificationConfig("customOrganizationNotificationConfig", V2OrganizationNotificationConfigArgs.builder()
            .configId("my-config")
            .organization("123456789")
            .location("global")
            .description("My custom Cloud Security Command Center Finding Organization Notification Configuration")
            .pubsubTopic(sccV2OrganizationNotificationConfig.id())
            .streamingConfig(V2OrganizationNotificationConfigStreamingConfigArgs.builder()
                .filter("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sccV2OrganizationNotificationConfig:
    type: gcp:pubsub:Topic
    name: scc_v2_organization_notification_config
    properties:
      name: my-topic
  customOrganizationNotificationConfig:
    type: gcp:securitycenter:V2OrganizationNotificationConfig
    name: custom_organization_notification_config
    properties:
      configId: my-config
      organization: '123456789'
      location: global
      description: My custom Cloud Security Command Center Finding Organization Notification Configuration
      pubsubTopic: ${sccV2OrganizationNotificationConfig.id}
      streamingConfig:
        filter: category = "OPEN_FIREWALL" AND state = "ACTIVE"
```
<!--End PulumiCodeChooser -->

## Import

OrganizationNotificationConfig can be imported using any of these accepted formats:

* `{{name}}`

When using the `pulumi import` command, OrganizationNotificationConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig default {{name}}
```

=
configId" -This must be unique within the organization.
Z
descriptionB" EThe description of the notification config (max of 1024 characters).
c
locationB" Qlocation Id is provided by organization. If not provided, Use global as default.
k
organization" WThe organization whose Cloud Security Command Center the Notification
Config lives in.
u
pubsubTopic" bThe Pub/Sub topic to send notifications to. Its format is
"projects/[project_id]/topics/[topic]".
Е
streamingConfig╗:И
х
securitycenter/V2OrganizationNotificationConfigStreamingConfigrgcp:securitycenter/V2OrganizationNotificationConfigStreamingConfig:V2OrganizationNotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
"=
configId" -This must be unique within the organization.
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"c
locationB" Qlocation Id is provided by organization. If not provided, Use global as default.
"ј
name" ЂThe resource name of this notification config, in the format
`organizations/{{organization}}/notificationConfigs/{{config_id}}`.
"k
organization" WThe organization whose Cloud Security Command Center the Notification
Config lives in.
"u
pubsubTopic" bThe Pub/Sub topic to send notifications to. Its format is
"projects/[project_id]/topics/[topic]".
"y
serviceAccount" cThe service account that needs "pubsub.topics.publish" permission to
publish to the Pub/Sub topic.
"Е
streamingConfig╗:И
х
securitycenter/V2OrganizationNotificationConfigStreamingConfigrgcp:securitycenter/V2OrganizationNotificationConfigStreamingConfig:V2OrganizationNotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
*щa
Ё
securitycenterV2OrganizationSccBigQueryExportRgcp:securitycenter/v2OrganizationSccBigQueryExport:V2OrganizationSccBigQueryExportп=A Cloud Security Command Center (Cloud SCC) Big Query Export Config.
It represents exporting Security Command Center data, including assets, findings, and security marks
using gcloud scc bqexports
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about OrganizationSccBigQueryExport, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.locations.bigQueryExports)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs/how-to-analyze-findings-in-big-query)

## Example Usage

### Scc V2 Organization Big Query Export Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.bigquery.Dataset("default", {
    datasetId: "",
    friendlyName: "test",
    description: "This is a test description",
    location: "US",
    defaultTableExpirationMs: 3600000,
    defaultPartitionExpirationMs: undefined,
    labels: {
        env: "default",
    },
});
const customBigQueryExportConfig = new gcp.securitycenter.V2OrganizationSccBigQueryExport("custom_big_query_export_config", {
    name: "my-export",
    bigQueryExportId: "my-export",
    organization: "123456789",
    dataset: _default.id,
    location: "global",
    description: "Cloud Security Command Center Findings Big Query Export Config",
    filter: "state=\"ACTIVE\" AND NOT mute=\"MUTED\"",
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.bigquery.Dataset("default",
    dataset_id="",
    friendly_name="test",
    description="This is a test description",
    location="US",
    default_table_expiration_ms=3600000,
    default_partition_expiration_ms=None,
    labels={
        "env": "default",
    })
custom_big_query_export_config = gcp.securitycenter.V2OrganizationSccBigQueryExport("custom_big_query_export_config",
    name="my-export",
    big_query_export_id="my-export",
    organization="123456789",
    dataset=default.id,
    location="global",
    description="Cloud Security Command Center Findings Big Query Export Config",
    filter="state=\"ACTIVE\" AND NOT mute=\"MUTED\"")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.BigQuery.Dataset("default", new()
    {
        DatasetId = "",
        FriendlyName = "test",
        Description = "This is a test description",
        Location = "US",
        DefaultTableExpirationMs = 3600000,
        DefaultPartitionExpirationMs = null,
        Labels = 
        {
            { "env", "default" },
        },
    });

    var customBigQueryExportConfig = new Gcp.SecurityCenter.V2OrganizationSccBigQueryExport("custom_big_query_export_config", new()
    {
        Name = "my-export",
        BigQueryExportId = "my-export",
        Organization = "123456789",
        Dataset = @default.Id,
        Location = "global",
        Description = "Cloud Security Command Center Findings Big Query Export Config",
        Filter = "state=\"ACTIVE\" AND NOT mute=\"MUTED\"",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := bigquery.NewDataset(ctx, "default", &bigquery.DatasetArgs{
			DatasetId:                    pulumi.String(""),
			FriendlyName:                 pulumi.String("test"),
			Description:                  pulumi.String("This is a test description"),
			Location:                     pulumi.String("US"),
			DefaultTableExpirationMs:     pulumi.Int(3600000),
			DefaultPartitionExpirationMs: nil,
			Labels: pulumi.StringMap{
				"env": pulumi.String("default"),
			},
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2OrganizationSccBigQueryExport(ctx, "custom_big_query_export_config", &securitycenter.V2OrganizationSccBigQueryExportArgs{
			Name:             pulumi.String("my-export"),
			BigQueryExportId: pulumi.String("my-export"),
			Organization:     pulumi.String("123456789"),
			Dataset:          _default.ID(),
			Location:         pulumi.String("global"),
			Description:      pulumi.String("Cloud Security Command Center Findings Big Query Export Config"),
			Filter:           pulumi.String("state=\"ACTIVE\" AND NOT mute=\"MUTED\""),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.bigquery.Dataset;
import com.pulumi.gcp.bigquery.DatasetArgs;
import com.pulumi.gcp.securitycenter.V2OrganizationSccBigQueryExport;
import com.pulumi.gcp.securitycenter.V2OrganizationSccBigQueryExportArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Dataset("default", DatasetArgs.builder()
            .datasetId("")
            .friendlyName("test")
            .description("This is a test description")
            .location("US")
            .defaultTableExpirationMs(3600000)
            .defaultPartitionExpirationMs(null)
            .labels(Map.of("env", "default"))
            .build());

        var customBigQueryExportConfig = new V2OrganizationSccBigQueryExport("customBigQueryExportConfig", V2OrganizationSccBigQueryExportArgs.builder()
            .name("my-export")
            .bigQueryExportId("my-export")
            .organization("123456789")
            .dataset(default_.id())
            .location("global")
            .description("Cloud Security Command Center Findings Big Query Export Config")
            .filter("state=\"ACTIVE\" AND NOT mute=\"MUTED\"")
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:bigquery:Dataset
    properties:
      datasetId: ""
      friendlyName: test
      description: This is a test description
      location: US
      defaultTableExpirationMs: 3.6e+06
      defaultPartitionExpirationMs: null
      labels:
        env: default
  customBigQueryExportConfig:
    type: gcp:securitycenter:V2OrganizationSccBigQueryExport
    name: custom_big_query_export_config
    properties:
      name: my-export
      bigQueryExportId: my-export
      organization: '123456789'
      dataset: ${default.id}
      location: global
      description: Cloud Security Command Center Findings Big Query Export Config
      filter: state="ACTIVE" AND NOT mute="MUTED"
```
<!--End PulumiCodeChooser -->

## Import

OrganizationSccBigQueryExport can be imported using any of these accepted formats:

* `organizations/{{organization}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}`

* `{{organization}}/{{location}}/{{big_query_export_id}}`

When using the `pulumi import` command, OrganizationSccBigQueryExport can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSccBigQueryExport:V2OrganizationSccBigQueryExport default organizations/{{organization}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSccBigQueryExport:V2OrganizationSccBigQueryExport default {{organization}}/{{location}}/{{big_query_export_id}}
```

M
bigQueryExportId" 5This must be unique within the organization.


- - -
Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
Z
descriptionB" EThe description of the notification config (max of 1024 characters).
э
filterB" ТExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
c
locationB" Qlocation Id is provided by organization. If not provided, Use global as default.
Ш
nameB" уThe resource name of this export, in the format
`organizations/{{organization}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}`.
This field is provided in responses, and is ignored when provided in create requests.
o
organization" [The organization whose Cloud Security Command Center the Big Query Export
Config lives in.
"M
bigQueryExportId" 5This must be unique within the organization.


- - -
"╦

createTime" ИThe time at which the BigQuery export was created. This field is set by the server and will be ignored if provided on export on creation.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"э
filterB" ТExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
"c
locationB" Qlocation Id is provided by organization. If not provided, Use global as default.
"Х
mostRecentEditor" ЮEmail address of the user who last edited the BigQuery export.
This field is set by the server and will be ignored if provided on export creation or update.
"З
name" уThe resource name of this export, in the format
`organizations/{{organization}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}`.
This field is provided in responses, and is ignored when provided in create requests.
"o
organization" [The organization whose Cloud Security Command Center the Big Query Export
Config lives in.
"t
	principal" cThe service account that needs permission to create table and upload data to the BigQuery dataset.
"я

updateTime" ╦The most recent time at which the BigQuery export was updated. This field is set by the server and will be ignored if provided on export creation or update.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*Мc
ѕ
securitycenter V2OrganizationSccBigQueryExportsTgcp:securitycenter/v2OrganizationSccBigQueryExports:V2OrganizationSccBigQueryExports»?> **Warning:** `gcp.securitycenter.V2OrganizationSccBigQueryExports` is deprecated and will be removed in a future major release. Use `gcp.securitycenter.V2OrganizationSccBigQueryExport` instead.

A Cloud Security Command Center (Cloud SCC) Big Query Export Config.
It represents exporting Security Command Center data, including assets, findings, and security marks
using gcloud scc bqexports
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about OrganizationSccBigQueryExports, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.locations.bigQueryExports)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs/how-to-analyze-findings-in-big-query)

## Example Usage

### Scc V2 Organization Big Query Exports Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.bigquery.Dataset("default", {
    datasetId: "",
    friendlyName: "test",
    description: "This is a test description",
    location: "US",
    defaultTableExpirationMs: 3600000,
    defaultPartitionExpirationMs: undefined,
    labels: {
        env: "default",
    },
});
const customBigQueryExportConfig = new gcp.securitycenter.V2OrganizationSccBigQueryExports("custom_big_query_export_config", {
    name: "my-export",
    bigQueryExportId: "my-export",
    organization: "123456789",
    dataset: _default.id,
    location: "global",
    description: "Cloud Security Command Center Findings Big Query Export Config",
    filter: "state=\"ACTIVE\" AND NOT mute=\"MUTED\"",
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.bigquery.Dataset("default",
    dataset_id="",
    friendly_name="test",
    description="This is a test description",
    location="US",
    default_table_expiration_ms=3600000,
    default_partition_expiration_ms=None,
    labels={
        "env": "default",
    })
custom_big_query_export_config = gcp.securitycenter.V2OrganizationSccBigQueryExports("custom_big_query_export_config",
    name="my-export",
    big_query_export_id="my-export",
    organization="123456789",
    dataset=default.id,
    location="global",
    description="Cloud Security Command Center Findings Big Query Export Config",
    filter="state=\"ACTIVE\" AND NOT mute=\"MUTED\"")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.BigQuery.Dataset("default", new()
    {
        DatasetId = "",
        FriendlyName = "test",
        Description = "This is a test description",
        Location = "US",
        DefaultTableExpirationMs = 3600000,
        DefaultPartitionExpirationMs = null,
        Labels = 
        {
            { "env", "default" },
        },
    });

    var customBigQueryExportConfig = new Gcp.SecurityCenter.V2OrganizationSccBigQueryExports("custom_big_query_export_config", new()
    {
        Name = "my-export",
        BigQueryExportId = "my-export",
        Organization = "123456789",
        Dataset = @default.Id,
        Location = "global",
        Description = "Cloud Security Command Center Findings Big Query Export Config",
        Filter = "state=\"ACTIVE\" AND NOT mute=\"MUTED\"",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := bigquery.NewDataset(ctx, "default", &bigquery.DatasetArgs{
			DatasetId:                    pulumi.String(""),
			FriendlyName:                 pulumi.String("test"),
			Description:                  pulumi.String("This is a test description"),
			Location:                     pulumi.String("US"),
			DefaultTableExpirationMs:     pulumi.Int(3600000),
			DefaultPartitionExpirationMs: nil,
			Labels: pulumi.StringMap{
				"env": pulumi.String("default"),
			},
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2OrganizationSccBigQueryExports(ctx, "custom_big_query_export_config", &securitycenter.V2OrganizationSccBigQueryExportsArgs{
			Name:             pulumi.String("my-export"),
			BigQueryExportId: pulumi.String("my-export"),
			Organization:     pulumi.String("123456789"),
			Dataset:          _default.ID(),
			Location:         pulumi.String("global"),
			Description:      pulumi.String("Cloud Security Command Center Findings Big Query Export Config"),
			Filter:           pulumi.String("state=\"ACTIVE\" AND NOT mute=\"MUTED\""),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.bigquery.Dataset;
import com.pulumi.gcp.bigquery.DatasetArgs;
import com.pulumi.gcp.securitycenter.V2OrganizationSccBigQueryExports;
import com.pulumi.gcp.securitycenter.V2OrganizationSccBigQueryExportsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Dataset("default", DatasetArgs.builder()
            .datasetId("")
            .friendlyName("test")
            .description("This is a test description")
            .location("US")
            .defaultTableExpirationMs(3600000)
            .defaultPartitionExpirationMs(null)
            .labels(Map.of("env", "default"))
            .build());

        var customBigQueryExportConfig = new V2OrganizationSccBigQueryExports("customBigQueryExportConfig", V2OrganizationSccBigQueryExportsArgs.builder()
            .name("my-export")
            .bigQueryExportId("my-export")
            .organization("123456789")
            .dataset(default_.id())
            .location("global")
            .description("Cloud Security Command Center Findings Big Query Export Config")
            .filter("state=\"ACTIVE\" AND NOT mute=\"MUTED\"")
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:bigquery:Dataset
    properties:
      datasetId: ""
      friendlyName: test
      description: This is a test description
      location: US
      defaultTableExpirationMs: 3.6e+06
      defaultPartitionExpirationMs: null
      labels:
        env: default
  customBigQueryExportConfig:
    type: gcp:securitycenter:V2OrganizationSccBigQueryExports
    name: custom_big_query_export_config
    properties:
      name: my-export
      bigQueryExportId: my-export
      organization: '123456789'
      dataset: ${default.id}
      location: global
      description: Cloud Security Command Center Findings Big Query Export Config
      filter: state="ACTIVE" AND NOT mute="MUTED"
```
<!--End PulumiCodeChooser -->

## Import

OrganizationSccBigQueryExports can be imported using any of these accepted formats:

* `organizations/{{organization}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}`

* `{{organization}}/{{location}}/{{big_query_export_id}}`

When using the `pulumi import` command, OrganizationSccBigQueryExports can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSccBigQueryExports:V2OrganizationSccBigQueryExports default organizations/{{organization}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSccBigQueryExports:V2OrganizationSccBigQueryExports default {{organization}}/{{location}}/{{big_query_export_id}}
```

M
bigQueryExportId" 5This must be unique within the organization.


- - -
Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
Z
descriptionB" EThe description of the notification config (max of 1024 characters).
э
filterB" ТExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
c
locationB" Qlocation Id is provided by organization. If not provided, Use global as default.
Ш
nameB" уThe resource name of this export, in the format
`organizations/{{organization}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}`.
This field is provided in responses, and is ignored when provided in create requests.
o
organization" [The organization whose Cloud Security Command Center the Big Query Export
Config lives in.
"M
bigQueryExportId" 5This must be unique within the organization.


- - -
"╦

createTime" ИThe time at which the BigQuery export was created. This field is set by the server and will be ignored if provided on export on creation.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"э
filterB" ТExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
"c
locationB" Qlocation Id is provided by organization. If not provided, Use global as default.
"Х
mostRecentEditor" ЮEmail address of the user who last edited the BigQuery export.
This field is set by the server and will be ignored if provided on export creation or update.
"З
name" уThe resource name of this export, in the format
`organizations/{{organization}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}`.
This field is provided in responses, and is ignored when provided in create requests.
"o
organization" [The organization whose Cloud Security Command Center the Big Query Export
Config lives in.
"t
	principal" cThe service account that needs permission to create table and upload data to the BigQuery dataset.
"я

updateTime" ╦The most recent time at which the BigQuery export was updated. This field is set by the server and will be ignored if provided on export creation or update.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*Э&
d
securitycenterV2OrganizationSource<gcp:securitycenter/v2OrganizationSource:V2OrganizationSourceяA Cloud Security Command Center's (Cloud SCC) finding source. A finding
source is an entity or a mechanism that can produce a finding. A source is
like a container of findings that come from the same scanner, logger,
monitor, etc.


To get more information about OrganizationSource, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.sources)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs)

## Example Usage

### Scc Source Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const customSource = new gcp.securitycenter.Source("custom_source", {
    displayName: "My Source",
    organization: "123456789",
    description: "My custom Cloud Security Command Center Finding Source",
});
```
```python
import pulumi
import pulumi_gcp as gcp

custom_source = gcp.securitycenter.Source("custom_source",
    display_name="My Source",
    organization="123456789",
    description="My custom Cloud Security Command Center Finding Source")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var customSource = new Gcp.SecurityCenter.Source("custom_source", new()
    {
        DisplayName = "My Source",
        Organization = "123456789",
        Description = "My custom Cloud Security Command Center Finding Source",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewSource(ctx, "custom_source", &securitycenter.SourceArgs{
			DisplayName:  pulumi.String("My Source"),
			Organization: pulumi.String("123456789"),
			Description:  pulumi.String("My custom Cloud Security Command Center Finding Source"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.Source;
import com.pulumi.gcp.securitycenter.SourceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var customSource = new Source("customSource", SourceArgs.builder()
            .displayName("My Source")
            .organization("123456789")
            .description("My custom Cloud Security Command Center Finding Source")
            .build());

    }
}
```
```yaml
resources:
  customSource:
    type: gcp:securitycenter:Source
    name: custom_source
    properties:
      displayName: My Source
      organization: '123456789'
      description: My custom Cloud Security Command Center Finding Source
```
<!--End PulumiCodeChooser -->

## Import

OrganizationSource can be imported using any of these accepted formats:

* `organizations/{{organization}}/sources/{{name}}`

* `{{organization}}/{{name}}`

When using the `pulumi import` command, OrganizationSource can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSource:V2OrganizationSource default organizations/{{organization}}/sources/{{name}}
```

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSource:V2OrganizationSource default {{organization}}/{{name}}
```

M
descriptionB" 8The description of the source (max of 1024 characters).
т
displayName" ЛThe sourceРђЎs display name. A sourceРђЎs display name must be unique
amongst its siblings, for example, two sources with the same parent
can't share the same display name. The display name must start and end
with a letter or digit, may contain letters, digits, spaces, hyphens,
and underscores, and can be no longer than 32 characters.
f
organization" RThe organization whose Cloud Security Command Center the Source
lives in.


- - -
"M
descriptionB" 8The description of the source (max of 1024 characters).
"т
displayName" ЛThe sourceРђЎs display name. A sourceРђЎs display name must be unique
amongst its siblings, for example, two sources with the same parent
can't share the same display name. The display name must start and end
with a letter or digit, may contain letters, digits, spaces, hyphens,
and underscores, and can be no longer than 32 characters.
"q
name" eThe resource name of this source, in the format
`organizations/{{organization}}/sources/{{source}}`.
"f
organization" RThe organization whose Cloud Security Command Center the Source
lives in.


- - -
*юЛ
ѓ
securitycenterV2OrganizationSourceIamBindingPgcp:securitycenter/v2OrganizationSourceIamBinding:V2OrganizationSourceIamBindingд┤Three different resources help you manage your IAM policy for Security Command Center (SCC)v2 API OrganizationSource. Each of these resources serves a different use case:

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Authoritative. Sets the IAM policy for the organizationsource and replaces any existing policy already attached.
* `gcp.securitycenter.V2OrganizationSourceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the organizationsource are preserved.
* `gcp.securitycenter.V2OrganizationSourceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the organizationsource are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Retrieves the IAM policy for the organizationsource

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamPolicy` **cannot** be used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamBinding` and `gcp.securitycenter.V2OrganizationSourceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamBinding` resources **can be** used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securitycenter.V2OrganizationSourceIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securitycenter.V2OrganizationSourceIamPolicy("policy", {
    source: customSource.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securitycenter.V2OrganizationSourceIamPolicy("policy",
    source=custom_source["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecurityCenter.V2OrganizationSourceIamPolicy("policy", new()
    {
        Source = customSource.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2OrganizationSourceIamPolicy(ctx, "policy", &securitycenter.V2OrganizationSourceIamPolicyArgs{
			Source:     pulumi.Any(customSource.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicy;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new V2OrganizationSourceIamPolicy("policy", V2OrganizationSourceIamPolicyArgs.builder()
            .source(customSource.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securitycenter:V2OrganizationSourceIamPolicy
    properties:
      source: ${customSource.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securitycenter.V2OrganizationSourceIamBinding("binding", {
    source: customSource.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securitycenter.V2OrganizationSourceIamBinding("binding",
    source=custom_source["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecurityCenter.V2OrganizationSourceIamBinding("binding", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamBinding(ctx, "binding", &securitycenter.V2OrganizationSourceIamBindingArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBinding;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new V2OrganizationSourceIamBinding("binding", V2OrganizationSourceIamBindingArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securitycenter:V2OrganizationSourceIamBinding
    properties:
      source: ${customSource.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securitycenter.V2OrganizationSourceIamMember("member", {
    source: customSource.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securitycenter.V2OrganizationSourceIamMember("member",
    source=custom_source["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecurityCenter.V2OrganizationSourceIamMember("member", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamMember(ctx, "member", &securitycenter.V2OrganizationSourceIamMemberArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMember;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new V2OrganizationSourceIamMember("member", V2OrganizationSourceIamMemberArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securitycenter:V2OrganizationSourceIamMember
    properties:
      source: ${customSource.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Security Command Center (SCC)v2 API OrganizationSource
Three different resources help you manage your IAM policy for Security Command Center (SCC)v2 API OrganizationSource. Each of these resources serves a different use case:

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Authoritative. Sets the IAM policy for the organizationsource and replaces any existing policy already attached.
* `gcp.securitycenter.V2OrganizationSourceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the organizationsource are preserved.
* `gcp.securitycenter.V2OrganizationSourceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the organizationsource are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Retrieves the IAM policy for the organizationsource

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamPolicy` **cannot** be used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamBinding` and `gcp.securitycenter.V2OrganizationSourceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamBinding` resources **can be** used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securitycenter.V2OrganizationSourceIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securitycenter.V2OrganizationSourceIamPolicy("policy", {
    source: customSource.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securitycenter.V2OrganizationSourceIamPolicy("policy",
    source=custom_source["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecurityCenter.V2OrganizationSourceIamPolicy("policy", new()
    {
        Source = customSource.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2OrganizationSourceIamPolicy(ctx, "policy", &securitycenter.V2OrganizationSourceIamPolicyArgs{
			Source:     pulumi.Any(customSource.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicy;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new V2OrganizationSourceIamPolicy("policy", V2OrganizationSourceIamPolicyArgs.builder()
            .source(customSource.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securitycenter:V2OrganizationSourceIamPolicy
    properties:
      source: ${customSource.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securitycenter.V2OrganizationSourceIamBinding("binding", {
    source: customSource.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securitycenter.V2OrganizationSourceIamBinding("binding",
    source=custom_source["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecurityCenter.V2OrganizationSourceIamBinding("binding", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamBinding(ctx, "binding", &securitycenter.V2OrganizationSourceIamBindingArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBinding;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new V2OrganizationSourceIamBinding("binding", V2OrganizationSourceIamBindingArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securitycenter:V2OrganizationSourceIamBinding
    properties:
      source: ${customSource.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securitycenter.V2OrganizationSourceIamMember("member", {
    source: customSource.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securitycenter.V2OrganizationSourceIamMember("member",
    source=custom_source["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecurityCenter.V2OrganizationSourceIamMember("member", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamMember(ctx, "member", &securitycenter.V2OrganizationSourceIamMemberArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMember;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new V2OrganizationSourceIamMember("member", V2OrganizationSourceIamMemberArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securitycenter:V2OrganizationSourceIamMember
    properties:
      source: ${customSource.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* organizations/{{organization}}/sources/{{source}}

* {{organization}}/{{source}}

* {{source}}

Any variables not passed in the import command will be taken from the provider configuration.

Security Command Center (SCC)v2 API organizationsource IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSourceIamBinding:V2OrganizationSourceIamBinding editor "organizations/{{organization}}/sources/{{source}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSourceIamBinding:V2OrganizationSourceIamBinding editor "organizations/{{organization}}/sources/{{source}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSourceIamBinding:V2OrganizationSourceIamBinding editor organizations/{{organization}}/sources/{{source}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

┤
	conditionдBБ:а
Ю
securitycenter'V2OrganizationSourceIamBindingConditionbgcp:securitycenter/V2OrganizationSourceIamBindingCondition:V2OrganizationSourceIamBindingConditionо	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

organization" Ж
role" ПThe role that should be applied. Only one
`gcp.securitycenter.V2OrganizationSourceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
I
source" ;Used to find the parent resource to bind the IAM policy to
"┤
	conditionдBБ:а
Ю
securitycenter'V2OrganizationSourceIamBindingConditionbgcp:securitycenter/V2OrganizationSourceIamBindingCondition:V2OrganizationSourceIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"о	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
organization" "Ж
role" ПThe role that should be applied. Only one
`gcp.securitycenter.V2OrganizationSourceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"I
source" ;Used to find the parent resource to bind the IAM policy to
*єЛ

securitycenterV2OrganizationSourceIamMemberNgcp:securitycenter/v2OrganizationSourceIamMember:V2OrganizationSourceIamMemberа┤Three different resources help you manage your IAM policy for Security Command Center (SCC)v2 API OrganizationSource. Each of these resources serves a different use case:

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Authoritative. Sets the IAM policy for the organizationsource and replaces any existing policy already attached.
* `gcp.securitycenter.V2OrganizationSourceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the organizationsource are preserved.
* `gcp.securitycenter.V2OrganizationSourceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the organizationsource are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Retrieves the IAM policy for the organizationsource

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamPolicy` **cannot** be used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamBinding` and `gcp.securitycenter.V2OrganizationSourceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamBinding` resources **can be** used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securitycenter.V2OrganizationSourceIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securitycenter.V2OrganizationSourceIamPolicy("policy", {
    source: customSource.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securitycenter.V2OrganizationSourceIamPolicy("policy",
    source=custom_source["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecurityCenter.V2OrganizationSourceIamPolicy("policy", new()
    {
        Source = customSource.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2OrganizationSourceIamPolicy(ctx, "policy", &securitycenter.V2OrganizationSourceIamPolicyArgs{
			Source:     pulumi.Any(customSource.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicy;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new V2OrganizationSourceIamPolicy("policy", V2OrganizationSourceIamPolicyArgs.builder()
            .source(customSource.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securitycenter:V2OrganizationSourceIamPolicy
    properties:
      source: ${customSource.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securitycenter.V2OrganizationSourceIamBinding("binding", {
    source: customSource.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securitycenter.V2OrganizationSourceIamBinding("binding",
    source=custom_source["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecurityCenter.V2OrganizationSourceIamBinding("binding", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamBinding(ctx, "binding", &securitycenter.V2OrganizationSourceIamBindingArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBinding;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new V2OrganizationSourceIamBinding("binding", V2OrganizationSourceIamBindingArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securitycenter:V2OrganizationSourceIamBinding
    properties:
      source: ${customSource.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securitycenter.V2OrganizationSourceIamMember("member", {
    source: customSource.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securitycenter.V2OrganizationSourceIamMember("member",
    source=custom_source["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecurityCenter.V2OrganizationSourceIamMember("member", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamMember(ctx, "member", &securitycenter.V2OrganizationSourceIamMemberArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMember;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new V2OrganizationSourceIamMember("member", V2OrganizationSourceIamMemberArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securitycenter:V2OrganizationSourceIamMember
    properties:
      source: ${customSource.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Security Command Center (SCC)v2 API OrganizationSource
Three different resources help you manage your IAM policy for Security Command Center (SCC)v2 API OrganizationSource. Each of these resources serves a different use case:

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Authoritative. Sets the IAM policy for the organizationsource and replaces any existing policy already attached.
* `gcp.securitycenter.V2OrganizationSourceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the organizationsource are preserved.
* `gcp.securitycenter.V2OrganizationSourceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the organizationsource are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Retrieves the IAM policy for the organizationsource

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamPolicy` **cannot** be used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamBinding` and `gcp.securitycenter.V2OrganizationSourceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamBinding` resources **can be** used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securitycenter.V2OrganizationSourceIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securitycenter.V2OrganizationSourceIamPolicy("policy", {
    source: customSource.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securitycenter.V2OrganizationSourceIamPolicy("policy",
    source=custom_source["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecurityCenter.V2OrganizationSourceIamPolicy("policy", new()
    {
        Source = customSource.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2OrganizationSourceIamPolicy(ctx, "policy", &securitycenter.V2OrganizationSourceIamPolicyArgs{
			Source:     pulumi.Any(customSource.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicy;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new V2OrganizationSourceIamPolicy("policy", V2OrganizationSourceIamPolicyArgs.builder()
            .source(customSource.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securitycenter:V2OrganizationSourceIamPolicy
    properties:
      source: ${customSource.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securitycenter.V2OrganizationSourceIamBinding("binding", {
    source: customSource.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securitycenter.V2OrganizationSourceIamBinding("binding",
    source=custom_source["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecurityCenter.V2OrganizationSourceIamBinding("binding", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamBinding(ctx, "binding", &securitycenter.V2OrganizationSourceIamBindingArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBinding;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new V2OrganizationSourceIamBinding("binding", V2OrganizationSourceIamBindingArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securitycenter:V2OrganizationSourceIamBinding
    properties:
      source: ${customSource.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securitycenter.V2OrganizationSourceIamMember("member", {
    source: customSource.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securitycenter.V2OrganizationSourceIamMember("member",
    source=custom_source["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecurityCenter.V2OrganizationSourceIamMember("member", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamMember(ctx, "member", &securitycenter.V2OrganizationSourceIamMemberArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMember;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new V2OrganizationSourceIamMember("member", V2OrganizationSourceIamMemberArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securitycenter:V2OrganizationSourceIamMember
    properties:
      source: ${customSource.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* organizations/{{organization}}/sources/{{source}}

* {{organization}}/{{source}}

* {{source}}

Any variables not passed in the import command will be taken from the provider configuration.

Security Command Center (SCC)v2 API organizationsource IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSourceIamMember:V2OrganizationSourceIamMember editor "organizations/{{organization}}/sources/{{source}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSourceIamMember:V2OrganizationSourceIamMember editor "organizations/{{organization}}/sources/{{source}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSourceIamMember:V2OrganizationSourceIamMember editor organizations/{{organization}}/sources/{{source}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

▒
	conditionБBа:Ю
џ
securitycenter&V2OrganizationSourceIamMemberCondition`gcp:securitycenter/V2OrganizationSourceIamMemberCondition:V2OrganizationSourceIamMemberConditionМ	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

organization" Ж
role" ПThe role that should be applied. Only one
`gcp.securitycenter.V2OrganizationSourceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
I
source" ;Used to find the parent resource to bind the IAM policy to
"▒
	conditionБBа:Ю
џ
securitycenter&V2OrganizationSourceIamMemberCondition`gcp:securitycenter/V2OrganizationSourceIamMemberCondition:V2OrganizationSourceIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"М	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
organization" "Ж
role" ПThe role that should be applied. Only one
`gcp.securitycenter.V2OrganizationSourceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"I
source" ;Used to find the parent resource to bind the IAM policy to
*┌И

securitycenterV2OrganizationSourceIamPolicyNgcp:securitycenter/v2OrganizationSourceIamPolicy:V2OrganizationSourceIamPolicyа┤Three different resources help you manage your IAM policy for Security Command Center (SCC)v2 API OrganizationSource. Each of these resources serves a different use case:

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Authoritative. Sets the IAM policy for the organizationsource and replaces any existing policy already attached.
* `gcp.securitycenter.V2OrganizationSourceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the organizationsource are preserved.
* `gcp.securitycenter.V2OrganizationSourceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the organizationsource are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Retrieves the IAM policy for the organizationsource

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamPolicy` **cannot** be used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamBinding` and `gcp.securitycenter.V2OrganizationSourceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamBinding` resources **can be** used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securitycenter.V2OrganizationSourceIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securitycenter.V2OrganizationSourceIamPolicy("policy", {
    source: customSource.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securitycenter.V2OrganizationSourceIamPolicy("policy",
    source=custom_source["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecurityCenter.V2OrganizationSourceIamPolicy("policy", new()
    {
        Source = customSource.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2OrganizationSourceIamPolicy(ctx, "policy", &securitycenter.V2OrganizationSourceIamPolicyArgs{
			Source:     pulumi.Any(customSource.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicy;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new V2OrganizationSourceIamPolicy("policy", V2OrganizationSourceIamPolicyArgs.builder()
            .source(customSource.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securitycenter:V2OrganizationSourceIamPolicy
    properties:
      source: ${customSource.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securitycenter.V2OrganizationSourceIamBinding("binding", {
    source: customSource.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securitycenter.V2OrganizationSourceIamBinding("binding",
    source=custom_source["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecurityCenter.V2OrganizationSourceIamBinding("binding", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamBinding(ctx, "binding", &securitycenter.V2OrganizationSourceIamBindingArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBinding;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new V2OrganizationSourceIamBinding("binding", V2OrganizationSourceIamBindingArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securitycenter:V2OrganizationSourceIamBinding
    properties:
      source: ${customSource.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securitycenter.V2OrganizationSourceIamMember("member", {
    source: customSource.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securitycenter.V2OrganizationSourceIamMember("member",
    source=custom_source["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecurityCenter.V2OrganizationSourceIamMember("member", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamMember(ctx, "member", &securitycenter.V2OrganizationSourceIamMemberArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMember;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new V2OrganizationSourceIamMember("member", V2OrganizationSourceIamMemberArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securitycenter:V2OrganizationSourceIamMember
    properties:
      source: ${customSource.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Security Command Center (SCC)v2 API OrganizationSource
Three different resources help you manage your IAM policy for Security Command Center (SCC)v2 API OrganizationSource. Each of these resources serves a different use case:

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Authoritative. Sets the IAM policy for the organizationsource and replaces any existing policy already attached.
* `gcp.securitycenter.V2OrganizationSourceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the organizationsource are preserved.
* `gcp.securitycenter.V2OrganizationSourceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the organizationsource are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.securitycenter.V2OrganizationSourceIamPolicy`: Retrieves the IAM policy for the organizationsource

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamPolicy` **cannot** be used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamBinding` and `gcp.securitycenter.V2OrganizationSourceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.securitycenter.V2OrganizationSourceIamBinding` resources **can be** used in conjunction with `gcp.securitycenter.V2OrganizationSourceIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.securitycenter.V2OrganizationSourceIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.securitycenter.V2OrganizationSourceIamPolicy("policy", {
    source: customSource.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.securitycenter.V2OrganizationSourceIamPolicy("policy",
    source=custom_source["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SecurityCenter.V2OrganizationSourceIamPolicy("policy", new()
    {
        Source = customSource.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2OrganizationSourceIamPolicy(ctx, "policy", &securitycenter.V2OrganizationSourceIamPolicyArgs{
			Source:     pulumi.Any(customSource.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicy;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new V2OrganizationSourceIamPolicy("policy", V2OrganizationSourceIamPolicyArgs.builder()
            .source(customSource.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:securitycenter:V2OrganizationSourceIamPolicy
    properties:
      source: ${customSource.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.securitycenter.V2OrganizationSourceIamBinding("binding", {
    source: customSource.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.securitycenter.V2OrganizationSourceIamBinding("binding",
    source=custom_source["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SecurityCenter.V2OrganizationSourceIamBinding("binding", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamBinding(ctx, "binding", &securitycenter.V2OrganizationSourceIamBindingArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBinding;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new V2OrganizationSourceIamBinding("binding", V2OrganizationSourceIamBindingArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:securitycenter:V2OrganizationSourceIamBinding
    properties:
      source: ${customSource.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.securitycenter.V2OrganizationSourceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.securitycenter.V2OrganizationSourceIamMember("member", {
    source: customSource.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.securitycenter.V2OrganizationSourceIamMember("member",
    source=custom_source["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SecurityCenter.V2OrganizationSourceIamMember("member", new()
    {
        Source = customSource.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2OrganizationSourceIamMember(ctx, "member", &securitycenter.V2OrganizationSourceIamMemberArgs{
			Source: pulumi.Any(customSource.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMember;
import com.pulumi.gcp.securitycenter.V2OrganizationSourceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new V2OrganizationSourceIamMember("member", V2OrganizationSourceIamMemberArgs.builder()
            .source(customSource.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:securitycenter:V2OrganizationSourceIamMember
    properties:
      source: ${customSource.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* organizations/{{organization}}/sources/{{source}}

* {{organization}}/{{source}}

* {{source}}

Any variables not passed in the import command will be taken from the provider configuration.

Security Command Center (SCC)v2 API organizationsource IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSourceIamPolicy:V2OrganizationSourceIamPolicy editor "organizations/{{organization}}/sources/{{source}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSourceIamPolicy:V2OrganizationSourceIamPolicy editor "organizations/{{organization}}/sources/{{source}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:securitycenter/v2OrganizationSourceIamPolicy:V2OrganizationSourceIamPolicy editor organizations/{{organization}}/sources/{{source}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.


organization" _

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
I
source" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"
organization" "_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"I
source" ;Used to find the parent resource to bind the IAM policy to
*▓6
a
securitycenterV2ProjectMuteConfig:gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig§#Mute Findings is a volume management feature in Security Command Center
that lets you manually or programmatically hide irrelevant findings,
and create filters to automatically silence existing and future
findings based on criteria you specify.


To get more information about ProjectMuteConfig, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/projects.muteConfigs)

## Example Usage

### Scc V2 Project Mute Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.securitycenter.V2ProjectMuteConfig("default", {
    muteConfigId: "my-config",
    project: "my-project-name",
    location: "global",
    description: "My custom Cloud Security Command Center Finding Project mute Configuration",
    filter: "severity = \"HIGH\"",
    type: "STATIC",
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.securitycenter.V2ProjectMuteConfig("default",
    mute_config_id="my-config",
    project="my-project-name",
    location="global",
    description="My custom Cloud Security Command Center Finding Project mute Configuration",
    filter="severity = \"HIGH\"",
    type="STATIC")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.SecurityCenter.V2ProjectMuteConfig("default", new()
    {
        MuteConfigId = "my-config",
        Project = "my-project-name",
        Location = "global",
        Description = "My custom Cloud Security Command Center Finding Project mute Configuration",
        Filter = "severity = \"HIGH\"",
        Type = "STATIC",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.NewV2ProjectMuteConfig(ctx, "default", &securitycenter.V2ProjectMuteConfigArgs{
			MuteConfigId: pulumi.String("my-config"),
			Project:      pulumi.String("my-project-name"),
			Location:     pulumi.String("global"),
			Description:  pulumi.String("My custom Cloud Security Command Center Finding Project mute Configuration"),
			Filter:       pulumi.String("severity = \"HIGH\""),
			Type:         pulumi.String("STATIC"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.V2ProjectMuteConfig;
import com.pulumi.gcp.securitycenter.V2ProjectMuteConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new V2ProjectMuteConfig("default", V2ProjectMuteConfigArgs.builder()
            .muteConfigId("my-config")
            .project("my-project-name")
            .location("global")
            .description("My custom Cloud Security Command Center Finding Project mute Configuration")
            .filter("severity = \"HIGH\"")
            .type("STATIC")
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:securitycenter:V2ProjectMuteConfig
    properties:
      muteConfigId: my-config
      project: my-project-name
      location: global
      description: My custom Cloud Security Command Center Finding Project mute Configuration
      filter: severity = "HIGH"
      type: STATIC
```
<!--End PulumiCodeChooser -->

## Import

ProjectMuteConfig can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/muteConfigs/{{mute_config_id}}`

* `{{project}}/{{location}}/{{mute_config_id}}`

* `{{location}}/{{mute_config_id}}`

When using the `pulumi import` command, ProjectMuteConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig default projects/{{project}}/locations/{{location}}/muteConfigs/{{mute_config_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig default {{project}}/{{location}}/{{mute_config_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2ProjectMuteConfig:V2ProjectMuteConfig default {{location}}/{{mute_config_id}}
```

7
descriptionB" "A description of the mute config.
┼
filter" ХAn expression that defines the filter to apply across create/update
events of findings. While creating a filter string, be mindful of
the scope in which the mute configuration is being created. E.g.,
If a filter contains project = X but is created under the
project = Y scope, it might not match any findings.
^
locationB" Llocation Id is provided by project. If not provided, Use global as default.
^
muteConfigId" JUnique identifier provided by the client within the parent scope.


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
)
type" The type of the mute config.
"ќ

createTime" ЃThe time at which the mute config was created. This field is set by
the server and will be ignored if provided on config creation.
"7
descriptionB" "A description of the mute config.
"┼
filter" ХAn expression that defines the filter to apply across create/update
events of findings. While creating a filter string, be mindful of
the scope in which the mute configuration is being created. E.g.,
If a filter contains project = X but is created under the
project = Y scope, it might not match any findings.
"^
locationB" Llocation Id is provided by project. If not provided, Use global as default.
"▓
mostRecentEditor" ЎEmail address of the user who last edited the mute config. This
field is set by the server and will be ignored if provided on
config creation or update.
"^
muteConfigId" JUnique identifier provided by the client within the parent scope.


- - -
"Ы
name" тName of the mute config. Its format is
projects/{project}/locations/global/muteConfigs/{configId},
folders/{folder}/locations/global/muteConfigs/{configId},
or organizations/{organization}/locations/global/muteConfigs/{configId}
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
")
type" The type of the mute config.
"╣

updateTime" дOutput only. The most recent time at which the mute config was
updated. This field is set by the server and will be ignored if
provided on config creation or update.
*єE
y
securitycenterV2ProjectNotificationConfigJgcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfigГ7A Cloud Security Command Center (Cloud SCC) notification configs. A
notification config is a Cloud SCC resource that contains the
configuration to send notifications for create/update events of
findings, assets and etc.
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about ProjectNotificationConfig, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/projects.locations.notificationConfigs)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs)

## Example Usage

### Scc V2 Project Notification Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sccV2ProjectNotification = new gcp.pubsub.Topic("scc_v2_project_notification", {name: "my-topic"});
const customNotificationConfig = new gcp.securitycenter.V2ProjectNotificationConfig("custom_notification_config", {
    configId: "my-config",
    project: "my-project-name",
    location: "global",
    description: "My custom Cloud Security Command Center Finding Notification Configuration",
    pubsubTopic: sccV2ProjectNotification.id,
    streamingConfig: {
        filter: "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

scc_v2_project_notification = gcp.pubsub.Topic("scc_v2_project_notification", name="my-topic")
custom_notification_config = gcp.securitycenter.V2ProjectNotificationConfig("custom_notification_config",
    config_id="my-config",
    project="my-project-name",
    location="global",
    description="My custom Cloud Security Command Center Finding Notification Configuration",
    pubsub_topic=scc_v2_project_notification.id,
    streaming_config={
        "filter": "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sccV2ProjectNotification = new Gcp.PubSub.Topic("scc_v2_project_notification", new()
    {
        Name = "my-topic",
    });

    var customNotificationConfig = new Gcp.SecurityCenter.V2ProjectNotificationConfig("custom_notification_config", new()
    {
        ConfigId = "my-config",
        Project = "my-project-name",
        Location = "global",
        Description = "My custom Cloud Security Command Center Finding Notification Configuration",
        PubsubTopic = sccV2ProjectNotification.Id,
        StreamingConfig = new Gcp.SecurityCenter.Inputs.V2ProjectNotificationConfigStreamingConfigArgs
        {
            Filter = "category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sccV2ProjectNotification, err := pubsub.NewTopic(ctx, "scc_v2_project_notification", &pubsub.TopicArgs{
			Name: pulumi.String("my-topic"),
		})
		if err != nil {
			return err
		}
		_, err = securitycenter.NewV2ProjectNotificationConfig(ctx, "custom_notification_config", &securitycenter.V2ProjectNotificationConfigArgs{
			ConfigId:    pulumi.String("my-config"),
			Project:     pulumi.String("my-project-name"),
			Location:    pulumi.String("global"),
			Description: pulumi.String("My custom Cloud Security Command Center Finding Notification Configuration"),
			PubsubTopic: sccV2ProjectNotification.ID(),
			StreamingConfig: &securitycenter.V2ProjectNotificationConfigStreamingConfigArgs{
				Filter: pulumi.String("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\""),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.securitycenter.V2ProjectNotificationConfig;
import com.pulumi.gcp.securitycenter.V2ProjectNotificationConfigArgs;
import com.pulumi.gcp.securitycenter.inputs.V2ProjectNotificationConfigStreamingConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sccV2ProjectNotification = new Topic("sccV2ProjectNotification", TopicArgs.builder()
            .name("my-topic")
            .build());

        var customNotificationConfig = new V2ProjectNotificationConfig("customNotificationConfig", V2ProjectNotificationConfigArgs.builder()
            .configId("my-config")
            .project("my-project-name")
            .location("global")
            .description("My custom Cloud Security Command Center Finding Notification Configuration")
            .pubsubTopic(sccV2ProjectNotification.id())
            .streamingConfig(V2ProjectNotificationConfigStreamingConfigArgs.builder()
                .filter("category = \"OPEN_FIREWALL\" AND state = \"ACTIVE\"")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sccV2ProjectNotification:
    type: gcp:pubsub:Topic
    name: scc_v2_project_notification
    properties:
      name: my-topic
  customNotificationConfig:
    type: gcp:securitycenter:V2ProjectNotificationConfig
    name: custom_notification_config
    properties:
      configId: my-config
      project: my-project-name
      location: global
      description: My custom Cloud Security Command Center Finding Notification Configuration
      pubsubTopic: ${sccV2ProjectNotification.id}
      streamingConfig:
        filter: category = "OPEN_FIREWALL" AND state = "ACTIVE"
```
<!--End PulumiCodeChooser -->

## Import

ProjectNotificationConfig can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/notificationConfigs/{{config_id}}`

* `{{project}}/{{location}}/{{config_id}}`

* `{{location}}/{{config_id}}`

When using the `pulumi import` command, ProjectNotificationConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig default projects/{{project}}/locations/{{location}}/notificationConfigs/{{config_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig default {{project}}/{{location}}/{{config_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2ProjectNotificationConfig:V2ProjectNotificationConfig default {{location}}/{{config_id}}
```

8
configId" (This must be unique within the project.
Z
descriptionB" EThe description of the notification config (max of 1024 characters).
b
locationB" PLocation ID of the parent organization. Only global is supported at the moment.

projectB" w
pubsubTopicB" bThe Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
џ
streamingConfigг:Е
д
securitycenter*V2ProjectNotificationConfigStreamingConfighgcp:securitycenter/V2ProjectNotificationConfigStreamingConfig:V2ProjectNotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
"8
configId" (This must be unique within the project.
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"b
locationB" PLocation ID of the parent organization. Only global is supported at the moment.
"Ю
name" љThe resource name of this notification config, in the format
`projects/{{projectId}}/locations/{{location}}/notificationConfigs/{{config_id}}`.
"
project" "w
pubsubTopicB" bThe Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
"y
serviceAccount" cThe service account that needs "pubsub.topics.publish" permission to
publish to the Pub/Sub topic.
"џ
streamingConfigг:Е
д
securitycenter*V2ProjectNotificationConfigStreamingConfighgcp:securitycenter/V2ProjectNotificationConfigStreamingConfig:V2ProjectNotificationConfigStreamingConfigXThe config for triggering streaming-based notifications.
Structure is documented below.
*ц6
v
securitycenterV2ProjectSccBigQueryExportHgcp:securitycenter/v2ProjectSccBigQueryExport:V2ProjectSccBigQueryExportђA Cloud Security Command Center (Cloud SCC) Big Query Export Config.
It represents exporting Security Command Center data, including assets, findings, and security marks
using gcloud scc bqexports
> **Note:** In order to use Cloud SCC resources, your organization must be enrolled
in [SCC Standard/Premium](https://cloud.google.com/security-command-center/docs/quickstart-security-command-center).
Without doing so, you may run into errors during resource creation.


To get more information about ProjectSccBigQueryExport, see:

* [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v2/projects.locations.bigQueryExports)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/security-command-center/docs/how-to-analyze-findings-in-big-query)

## Example Usage

### Scc V2 Project Big Query Export Config Basic


<!--Start PulumiCodeChooser -->
```yaml
resources:
  default:
    type: gcp:bigquery:Dataset
    properties:
      datasetId: my_dataset_id
      friendlyName: test
      description: This is a test description
      location: US
      defaultTableExpirationMs: 3.6e+06
      defaultPartitionExpirationMs: null
      labels:
        env: default
  customBigQueryExportConfig:
    type: gcp:securitycenter:V2ProjectSccBigQueryExport
    name: custom_big_query_export_config
    properties:
      name: my-export
      bigQueryExportId: my-export
      project: my-project-name
      dataset: ${default.id}
      location: global
      description: Cloud Security Command Center Findings Big Query Export Config
      filter: state="ACTIVE" AND NOT mute="MUTED"
```
<!--End PulumiCodeChooser -->

## Import

ProjectSccBigQueryExport can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}`

* `{{project}}/{{location}}/{{big_query_export_id}}`

* `{{location}}/{{big_query_export_id}}`

When using the `pulumi import` command, ProjectSccBigQueryExport can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securitycenter/v2ProjectSccBigQueryExport:V2ProjectSccBigQueryExport default projects/{{project}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2ProjectSccBigQueryExport:V2ProjectSccBigQueryExport default {{project}}/{{location}}/{{big_query_export_id}}
```

```sh
$ pulumi import gcp:securitycenter/v2ProjectSccBigQueryExport:V2ProjectSccBigQueryExport default {{location}}/{{big_query_export_id}}
```

M
bigQueryExportId" 5This must be unique within the organization.


- - -
Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
Z
descriptionB" EThe description of the notification config (max of 1024 characters).
э
filterB" ТExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
c
locationB" Qlocation Id is provided by organization. If not provided, Use global as default.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"M
bigQueryExportId" 5This must be unique within the organization.


- - -
"╦

createTime" ИThe time at which the BigQuery export was created. This field is set by the server and will be ignored if provided on export on creation.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"Т
datasetB" нThe dataset to write findings' updates to.
Its format is "projects/[projectId]/datasets/[bigquery_dataset_id]".
BigQuery Dataset unique ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
"Z
descriptionB" EThe description of the notification config (max of 1024 characters).
"э
filterB" ТExpression that defines the filter to apply across create/update
events of findings. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.
"c
locationB" Qlocation Id is provided by organization. If not provided, Use global as default.
"Х
mostRecentEditor" ЮEmail address of the user who last edited the BigQuery export.
This field is set by the server and will be ignored if provided on export creation or update.
"Ж
name" ПThe resource name of this export, in the format
`projects/{{project}}/locations/{{location}}/bigQueryExports/{{big_query_export_id}}`.
This field is provided in responses, and is ignored when provided in create requests.
"t
	principal" cThe service account that needs permission to create table and upload data to the BigQuery dataset.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"я

updateTime" ╦The most recent time at which the BigQuery export was updated. This field is set by the server and will be ignored if provided on export creation or update.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*ъ░
?
securityposturePosture#gcp:securityposture/posture:PostureЬбA Posture represents a collection of policy set including its name, state, description
and policy sets. A policy set includes set of policies along with their definition.
A posture can be created at the organization level.
Every update to a deployed posture creates a new posture revision with an updated revision_id.


To get more information about Posture, see:
* How-to Guides
    * [Create and deploy a posture](https://cloud.google.com/security-command-center/docs/how-to-use-security-posture)

## Example Usage

### Securityposture Posture Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const posture1 = new gcp.securityposture.Posture("posture1", {
    postureId: "posture_example",
    parent: "organizations/123456789",
    location: "global",
    state: "ACTIVE",
    description: "a new posture",
    policySets: [
        {
            policySetId: "org_policy_set",
            description: "set of org policies",
            policies: [
                {
                    policyId: "canned_org_policy",
                    constraint: {
                        orgPolicyConstraint: {
                            cannedConstraintId: "storage.uniformBucketLevelAccess",
                            policyRules: [{
                                enforce: true,
                                condition: {
                                    description: "condition description",
                                    expression: "resource.matchTag('org_id/tag_key_short_name,'tag_value_short_name')",
                                    title: "a CEL condition",
                                },
                            }],
                        },
                    },
                },
                {
                    policyId: "custom_org_policy",
                    constraint: {
                        orgPolicyConstraintCustom: {
                            customConstraint: {
                                name: "organizations/123456789/customConstraints/custom.disableGkeAutoUpgrade",
                                displayName: "Disable GKE auto upgrade",
                                description: "Only allow GKE NodePool resource to be created or updated if AutoUpgrade is not enabled where this custom constraint is enforced.",
                                actionType: "ALLOW",
                                condition: "resource.management.autoUpgrade == false",
                                methodTypes: [
                                    "CREATE",
                                    "UPDATE",
                                ],
                                resourceTypes: ["container.googleapis.com/NodePool"],
                            },
                            policyRules: [{
                                enforce: true,
                                condition: {
                                    description: "condition description",
                                    expression: "resource.matchTagId('tagKeys/key_id','tagValues/value_id')",
                                    title: "a CEL condition",
                                },
                            }],
                        },
                    },
                },
            ],
        },
        {
            policySetId: "sha_policy_set",
            description: "set of sha policies",
            policies: [
                {
                    policyId: "sha_builtin_module",
                    constraint: {
                        securityHealthAnalyticsModule: {
                            moduleName: "BIGQUERY_TABLE_CMEK_DISABLED",
                            moduleEnablementState: "ENABLED",
                        },
                    },
                    description: "enable BIGQUERY_TABLE_CMEK_DISABLED",
                },
                {
                    policyId: "sha_custom_module",
                    constraint: {
                        securityHealthAnalyticsCustomModule: {
                            displayName: "custom_SHA_policy",
                            config: {
                                predicate: {
                                    expression: "resource.rotationPeriod > duration('2592000s')",
                                },
                                customOutput: {
                                    properties: [{
                                        name: "duration",
                                        valueExpression: {
                                            expression: "resource.rotationPeriod",
                                        },
                                    }],
                                },
                                resourceSelector: {
                                    resourceTypes: ["cloudkms.googleapis.com/CryptoKey"],
                                },
                                severity: "LOW",
                                description: "Custom Module",
                                recommendation: "Testing custom modules",
                            },
                            moduleEnablementState: "ENABLED",
                        },
                    },
                },
            ],
        },
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

posture1 = gcp.securityposture.Posture("posture1",
    posture_id="posture_example",
    parent="organizations/123456789",
    location="global",
    state="ACTIVE",
    description="a new posture",
    policy_sets=[
        {
            "policy_set_id": "org_policy_set",
            "description": "set of org policies",
            "policies": [
                {
                    "policy_id": "canned_org_policy",
                    "constraint": {
                        "org_policy_constraint": {
                            "canned_constraint_id": "storage.uniformBucketLevelAccess",
                            "policy_rules": [{
                                "enforce": True,
                                "condition": {
                                    "description": "condition description",
                                    "expression": "resource.matchTag('org_id/tag_key_short_name,'tag_value_short_name')",
                                    "title": "a CEL condition",
                                },
                            }],
                        },
                    },
                },
                {
                    "policy_id": "custom_org_policy",
                    "constraint": {
                        "org_policy_constraint_custom": {
                            "custom_constraint": {
                                "name": "organizations/123456789/customConstraints/custom.disableGkeAutoUpgrade",
                                "display_name": "Disable GKE auto upgrade",
                                "description": "Only allow GKE NodePool resource to be created or updated if AutoUpgrade is not enabled where this custom constraint is enforced.",
                                "action_type": "ALLOW",
                                "condition": "resource.management.autoUpgrade == false",
                                "method_types": [
                                    "CREATE",
                                    "UPDATE",
                                ],
                                "resource_types": ["container.googleapis.com/NodePool"],
                            },
                            "policy_rules": [{
                                "enforce": True,
                                "condition": {
                                    "description": "condition description",
                                    "expression": "resource.matchTagId('tagKeys/key_id','tagValues/value_id')",
                                    "title": "a CEL condition",
                                },
                            }],
                        },
                    },
                },
            ],
        },
        {
            "policy_set_id": "sha_policy_set",
            "description": "set of sha policies",
            "policies": [
                {
                    "policy_id": "sha_builtin_module",
                    "constraint": {
                        "security_health_analytics_module": {
                            "module_name": "BIGQUERY_TABLE_CMEK_DISABLED",
                            "module_enablement_state": "ENABLED",
                        },
                    },
                    "description": "enable BIGQUERY_TABLE_CMEK_DISABLED",
                },
                {
                    "policy_id": "sha_custom_module",
                    "constraint": {
                        "security_health_analytics_custom_module": {
                            "display_name": "custom_SHA_policy",
                            "config": {
                                "predicate": {
                                    "expression": "resource.rotationPeriod > duration('2592000s')",
                                },
                                "custom_output": {
                                    "properties": [{
                                        "name": "duration",
                                        "value_expression": {
                                            "expression": "resource.rotationPeriod",
                                        },
                                    }],
                                },
                                "resource_selector": {
                                    "resource_types": ["cloudkms.googleapis.com/CryptoKey"],
                                },
                                "severity": "LOW",
                                "description": "Custom Module",
                                "recommendation": "Testing custom modules",
                            },
                            "module_enablement_state": "ENABLED",
                        },
                    },
                },
            ],
        },
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var posture1 = new Gcp.SecurityPosture.Posture("posture1", new()
    {
        PostureId = "posture_example",
        Parent = "organizations/123456789",
        Location = "global",
        State = "ACTIVE",
        Description = "a new posture",
        PolicySets = new[]
        {
            new Gcp.SecurityPosture.Inputs.PosturePolicySetArgs
            {
                PolicySetId = "org_policy_set",
                Description = "set of org policies",
                Policies = new[]
                {
                    new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyArgs
                    {
                        PolicyId = "canned_org_policy",
                        Constraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintArgs
                        {
                            OrgPolicyConstraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintArgs
                            {
                                CannedConstraintId = "storage.uniformBucketLevelAccess",
                                PolicyRules = new[]
                                {
                                    new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleArgs
                                    {
                                        Enforce = true,
                                        Condition = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleConditionArgs
                                        {
                                            Description = "condition description",
                                            Expression = "resource.matchTag('org_id/tag_key_short_name,'tag_value_short_name')",
                                            Title = "a CEL condition",
                                        },
                                    },
                                },
                            },
                        },
                    },
                    new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyArgs
                    {
                        PolicyId = "custom_org_policy",
                        Constraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintArgs
                        {
                            OrgPolicyConstraintCustom = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomArgs
                            {
                                CustomConstraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomCustomConstraintArgs
                                {
                                    Name = "organizations/123456789/customConstraints/custom.disableGkeAutoUpgrade",
                                    DisplayName = "Disable GKE auto upgrade",
                                    Description = "Only allow GKE NodePool resource to be created or updated if AutoUpgrade is not enabled where this custom constraint is enforced.",
                                    ActionType = "ALLOW",
                                    Condition = "resource.management.autoUpgrade == false",
                                    MethodTypes = new[]
                                    {
                                        "CREATE",
                                        "UPDATE",
                                    },
                                    ResourceTypes = new[]
                                    {
                                        "container.googleapis.com/NodePool",
                                    },
                                },
                                PolicyRules = new[]
                                {
                                    new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs
                                    {
                                        Enforce = true,
                                        Condition = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionArgs
                                        {
                                            Description = "condition description",
                                            Expression = "resource.matchTagId('tagKeys/key_id','tagValues/value_id')",
                                            Title = "a CEL condition",
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },
            new Gcp.SecurityPosture.Inputs.PosturePolicySetArgs
            {
                PolicySetId = "sha_policy_set",
                Description = "set of sha policies",
                Policies = new[]
                {
                    new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyArgs
                    {
                        PolicyId = "sha_builtin_module",
                        Constraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintArgs
                        {
                            SecurityHealthAnalyticsModule = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsModuleArgs
                            {
                                ModuleName = "BIGQUERY_TABLE_CMEK_DISABLED",
                                ModuleEnablementState = "ENABLED",
                            },
                        },
                        Description = "enable BIGQUERY_TABLE_CMEK_DISABLED",
                    },
                    new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyArgs
                    {
                        PolicyId = "sha_custom_module",
                        Constraint = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintArgs
                        {
                            SecurityHealthAnalyticsCustomModule = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleArgs
                            {
                                DisplayName = "custom_SHA_policy",
                                Config = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigArgs
                                {
                                    Predicate = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigPredicateArgs
                                    {
                                        Expression = "resource.rotationPeriod > duration('2592000s')",
                                    },
                                    CustomOutput = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputArgs
                                    {
                                        Properties = new[]
                                        {
                                            new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyArgs
                                            {
                                                Name = "duration",
                                                ValueExpression = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyValueExpressionArgs
                                                {
                                                    Expression = "resource.rotationPeriod",
                                                },
                                            },
                                        },
                                    },
                                    ResourceSelector = new Gcp.SecurityPosture.Inputs.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigResourceSelectorArgs
                                    {
                                        ResourceTypes = new[]
                                        {
                                            "cloudkms.googleapis.com/CryptoKey",
                                        },
                                    },
                                    Severity = "LOW",
                                    Description = "Custom Module",
                                    Recommendation = "Testing custom modules",
                                },
                                ModuleEnablementState = "ENABLED",
                            },
                        },
                    },
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securityposture"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securityposture.NewPosture(ctx, "posture1", &securityposture.PostureArgs{
			PostureId:   pulumi.String("posture_example"),
			Parent:      pulumi.String("organizations/123456789"),
			Location:    pulumi.String("global"),
			State:       pulumi.String("ACTIVE"),
			Description: pulumi.String("a new posture"),
			PolicySets: securityposture.PosturePolicySetArray{
				&securityposture.PosturePolicySetArgs{
					PolicySetId: pulumi.String("org_policy_set"),
					Description: pulumi.String("set of org policies"),
					Policies: securityposture.PosturePolicySetPolicyArray{
						&securityposture.PosturePolicySetPolicyArgs{
							PolicyId: pulumi.String("canned_org_policy"),
							Constraint: &securityposture.PosturePolicySetPolicyConstraintArgs{
								OrgPolicyConstraint: &securityposture.PosturePolicySetPolicyConstraintOrgPolicyConstraintArgs{
									CannedConstraintId: pulumi.String("storage.uniformBucketLevelAccess"),
									PolicyRules: securityposture.PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleArray{
										&securityposture.PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleArgs{
											Enforce: pulumi.Bool(true),
											Condition: &securityposture.PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleConditionArgs{
												Description: pulumi.String("condition description"),
												Expression:  pulumi.String("resource.matchTag('org_id/tag_key_short_name,'tag_value_short_name')"),
												Title:       pulumi.String("a CEL condition"),
											},
										},
									},
								},
							},
						},
						&securityposture.PosturePolicySetPolicyArgs{
							PolicyId: pulumi.String("custom_org_policy"),
							Constraint: &securityposture.PosturePolicySetPolicyConstraintArgs{
								OrgPolicyConstraintCustom: &securityposture.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomArgs{
									CustomConstraint: &securityposture.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomCustomConstraintArgs{
										Name:        pulumi.String("organizations/123456789/customConstraints/custom.disableGkeAutoUpgrade"),
										DisplayName: pulumi.String("Disable GKE auto upgrade"),
										Description: pulumi.String("Only allow GKE NodePool resource to be created or updated if AutoUpgrade is not enabled where this custom constraint is enforced."),
										ActionType:  pulumi.String("ALLOW"),
										Condition:   pulumi.String("resource.management.autoUpgrade == false"),
										MethodTypes: pulumi.StringArray{
											pulumi.String("CREATE"),
											pulumi.String("UPDATE"),
										},
										ResourceTypes: pulumi.StringArray{
											pulumi.String("container.googleapis.com/NodePool"),
										},
									},
									PolicyRules: securityposture.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArray{
										&securityposture.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs{
											Enforce: pulumi.Bool(true),
											Condition: &securityposture.PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionArgs{
												Description: pulumi.String("condition description"),
												Expression:  pulumi.String("resource.matchTagId('tagKeys/key_id','tagValues/value_id')"),
												Title:       pulumi.String("a CEL condition"),
											},
										},
									},
								},
							},
						},
					},
				},
				&securityposture.PosturePolicySetArgs{
					PolicySetId: pulumi.String("sha_policy_set"),
					Description: pulumi.String("set of sha policies"),
					Policies: securityposture.PosturePolicySetPolicyArray{
						&securityposture.PosturePolicySetPolicyArgs{
							PolicyId: pulumi.String("sha_builtin_module"),
							Constraint: &securityposture.PosturePolicySetPolicyConstraintArgs{
								SecurityHealthAnalyticsModule: &securityposture.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsModuleArgs{
									ModuleName:            pulumi.String("BIGQUERY_TABLE_CMEK_DISABLED"),
									ModuleEnablementState: pulumi.String("ENABLED"),
								},
							},
							Description: pulumi.String("enable BIGQUERY_TABLE_CMEK_DISABLED"),
						},
						&securityposture.PosturePolicySetPolicyArgs{
							PolicyId: pulumi.String("sha_custom_module"),
							Constraint: &securityposture.PosturePolicySetPolicyConstraintArgs{
								SecurityHealthAnalyticsCustomModule: &securityposture.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleArgs{
									DisplayName: pulumi.String("custom_SHA_policy"),
									Config: &securityposture.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigArgs{
										Predicate: &securityposture.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigPredicateArgs{
											Expression: pulumi.String("resource.rotationPeriod > duration('2592000s')"),
										},
										CustomOutput: securityposture.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputArgs{
											Properties: securityposture.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyArray{
												&securityposture.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyArgs{
													Name: pulumi.String("duration"),
													ValueExpression: &securityposture.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyValueExpressionArgs{
														Expression: pulumi.String("resource.rotationPeriod"),
													},
												},
											},
										},
										ResourceSelector: &securityposture.PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigResourceSelectorArgs{
											ResourceTypes: pulumi.StringArray{
												pulumi.String("cloudkms.googleapis.com/CryptoKey"),
											},
										},
										Severity:       pulumi.String("LOW"),
										Description:    pulumi.String("Custom Module"),
										Recommendation: pulumi.String("Testing custom modules"),
									},
									ModuleEnablementState: pulumi.String("ENABLED"),
								},
							},
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securityposture.Posture;
import com.pulumi.gcp.securityposture.PostureArgs;
import com.pulumi.gcp.securityposture.inputs.PosturePolicySetArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var posture1 = new Posture("posture1", PostureArgs.builder()
            .postureId("posture_example")
            .parent("organizations/123456789")
            .location("global")
            .state("ACTIVE")
            .description("a new posture")
            .policySets(            
                PosturePolicySetArgs.builder()
                    .policySetId("org_policy_set")
                    .description("set of org policies")
                    .policies(                    
                        PosturePolicySetPolicyArgs.builder()
                            .policyId("canned_org_policy")
                            .constraint(PosturePolicySetPolicyConstraintArgs.builder()
                                .orgPolicyConstraint(PosturePolicySetPolicyConstraintOrgPolicyConstraintArgs.builder()
                                    .cannedConstraintId("storage.uniformBucketLevelAccess")
                                    .policyRules(PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleArgs.builder()
                                        .enforce(true)
                                        .condition(PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleConditionArgs.builder()
                                            .description("condition description")
                                            .expression("resource.matchTag('org_id/tag_key_short_name,'tag_value_short_name')")
                                            .title("a CEL condition")
                                            .build())
                                        .build())
                                    .build())
                                .build())
                            .build(),
                        PosturePolicySetPolicyArgs.builder()
                            .policyId("custom_org_policy")
                            .constraint(PosturePolicySetPolicyConstraintArgs.builder()
                                .orgPolicyConstraintCustom(PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomArgs.builder()
                                    .customConstraint(PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomCustomConstraintArgs.builder()
                                        .name("organizations/123456789/customConstraints/custom.disableGkeAutoUpgrade")
                                        .displayName("Disable GKE auto upgrade")
                                        .description("Only allow GKE NodePool resource to be created or updated if AutoUpgrade is not enabled where this custom constraint is enforced.")
                                        .actionType("ALLOW")
                                        .condition("resource.management.autoUpgrade == false")
                                        .methodTypes(                                        
                                            "CREATE",
                                            "UPDATE")
                                        .resourceTypes("container.googleapis.com/NodePool")
                                        .build())
                                    .policyRules(PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleArgs.builder()
                                        .enforce(true)
                                        .condition(PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionArgs.builder()
                                            .description("condition description")
                                            .expression("resource.matchTagId('tagKeys/key_id','tagValues/value_id')")
                                            .title("a CEL condition")
                                            .build())
                                        .build())
                                    .build())
                                .build())
                            .build())
                    .build(),
                PosturePolicySetArgs.builder()
                    .policySetId("sha_policy_set")
                    .description("set of sha policies")
                    .policies(                    
                        PosturePolicySetPolicyArgs.builder()
                            .policyId("sha_builtin_module")
                            .constraint(PosturePolicySetPolicyConstraintArgs.builder()
                                .securityHealthAnalyticsModule(PosturePolicySetPolicyConstraintSecurityHealthAnalyticsModuleArgs.builder()
                                    .moduleName("BIGQUERY_TABLE_CMEK_DISABLED")
                                    .moduleEnablementState("ENABLED")
                                    .build())
                                .build())
                            .description("enable BIGQUERY_TABLE_CMEK_DISABLED")
                            .build(),
                        PosturePolicySetPolicyArgs.builder()
                            .policyId("sha_custom_module")
                            .constraint(PosturePolicySetPolicyConstraintArgs.builder()
                                .securityHealthAnalyticsCustomModule(PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleArgs.builder()
                                    .displayName("custom_SHA_policy")
                                    .config(PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigArgs.builder()
                                        .predicate(PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigPredicateArgs.builder()
                                            .expression("resource.rotationPeriod > duration('2592000s')")
                                            .build())
                                        .customOutput(PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputArgs.builder()
                                            .properties(PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyArgs.builder()
                                                .name("duration")
                                                .valueExpression(PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyValueExpressionArgs.builder()
                                                    .expression("resource.rotationPeriod")
                                                    .build())
                                                .build())
                                            .build())
                                        .resourceSelector(PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigResourceSelectorArgs.builder()
                                            .resourceTypes("cloudkms.googleapis.com/CryptoKey")
                                            .build())
                                        .severity("LOW")
                                        .description("Custom Module")
                                        .recommendation("Testing custom modules")
                                        .build())
                                    .moduleEnablementState("ENABLED")
                                    .build())
                                .build())
                            .build())
                    .build())
            .build());

    }
}
```
```yaml
resources:
  posture1:
    type: gcp:securityposture:Posture
    properties:
      postureId: posture_example
      parent: organizations/123456789
      location: global
      state: ACTIVE
      description: a new posture
      policySets:
        - policySetId: org_policy_set
          description: set of org policies
          policies:
            - policyId: canned_org_policy
              constraint:
                orgPolicyConstraint:
                  cannedConstraintId: storage.uniformBucketLevelAccess
                  policyRules:
                    - enforce: true
                      condition:
                        description: condition description
                        expression: resource.matchTag('org_id/tag_key_short_name,'tag_value_short_name')
                        title: a CEL condition
            - policyId: custom_org_policy
              constraint:
                orgPolicyConstraintCustom:
                  customConstraint:
                    name: organizations/123456789/customConstraints/custom.disableGkeAutoUpgrade
                    displayName: Disable GKE auto upgrade
                    description: Only allow GKE NodePool resource to be created or updated if AutoUpgrade is not enabled where this custom constraint is enforced.
                    actionType: ALLOW
                    condition: resource.management.autoUpgrade == false
                    methodTypes:
                      - CREATE
                      - UPDATE
                    resourceTypes:
                      - container.googleapis.com/NodePool
                  policyRules:
                    - enforce: true
                      condition:
                        description: condition description
                        expression: resource.matchTagId('tagKeys/key_id','tagValues/value_id')
                        title: a CEL condition
        - policySetId: sha_policy_set
          description: set of sha policies
          policies:
            - policyId: sha_builtin_module
              constraint:
                securityHealthAnalyticsModule:
                  moduleName: BIGQUERY_TABLE_CMEK_DISABLED
                  moduleEnablementState: ENABLED
              description: enable BIGQUERY_TABLE_CMEK_DISABLED
            - policyId: sha_custom_module
              constraint:
                securityHealthAnalyticsCustomModule:
                  displayName: custom_SHA_policy
                  config:
                    predicate:
                      expression: resource.rotationPeriod > duration('2592000s')
                    customOutput:
                      properties:
                        - name: duration
                          valueExpression:
                            expression: resource.rotationPeriod
                    resourceSelector:
                      resourceTypes:
                        - cloudkms.googleapis.com/CryptoKey
                    severity: LOW
                    description: Custom Module
                    recommendation: Testing custom modules
                  moduleEnablementState: ENABLED
```
<!--End PulumiCodeChooser -->

## Import

Posture can be imported using any of these accepted formats:

* `{{parent}}/locations/{{location}}/postures/{{posture_id}}`

When using the `pulumi import` command, Posture can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securityposture/posture:Posture default {{parent}}/locations/{{location}}/postures/{{posture_id}}
```

1
descriptionB" Description of the posture.
6
location" &Location of the resource, eg: global.
o
parent" aThe parent of the resource, an organization. Format should be `organizations/{organization_id}`.
┤

policySets`*^:\
Z
securityposturePosturePolicySet5gcp:securityposture/PosturePolicySet:PosturePolicySetDList of policy sets for the posture.
Structure is documented below.
>
	postureId" -Id of the posture. It is an immutable field.
Г
state" ЪState of the posture. Update to state field should not be triggered along with
with other field updates.
Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
"7

createTime" %Time the Posture was created in UTC.
"1
descriptionB" Description of the posture.
"K
etag" ?For Resource freshness validation (https://google.aip.dev/154)
"6
location" &Location of the resource, eg: global.
"!
name" Name of the posture.
"o
parent" aThe parent of the resource, an organization. Format should be `organizations/{organization_id}`.
"┤

policySets`*^:\
Z
securityposturePosturePolicySet5gcp:securityposture/PosturePolicySet:PosturePolicySetDList of policy sets for the posture.
Structure is documented below.
">
	postureId" -Id of the posture. It is an immutable field.
"Q
reconciling
 >If set, there are currently changes in flight to the posture.
".

revisionId" Revision_id of the posture.
"Г
state" ЪState of the posture. Update to state field should not be triggered along with
with other field updates.
Possible values are: `DEPRECATED`, `DRAFT`, `ACTIVE`.
"7

updateTime" %Time the Posture was updated in UTC.
*С
]
securityposturePostureDeployment7gcp:securityposture/postureDeployment:PostureDeploymentђ	Represents a deployment of a security posture on a resource. A posture contains user curated policy sets. A posture can
be deployed on a project or on a folder or on an organization. To deploy a posture we need to populate the posture's name
and its revision_id in the posture deployment configuration. Every update to a deployed posture generates a new revision_id.
Thus, the updated revision_id should be used in the respective posture deployment's configuration to deploy that posture
on a resource.


To get more information about PostureDeployment, see:
* How-to Guides
    * [Create and deploy a posture](https://cloud.google.com/security-command-center/docs/how-to-use-security-posture)

## Import

PostureDeployment can be imported using any of these accepted formats:

* `{{parent}}/locations/{{location}}/postureDeployments/{{posture_deployment_id}}`

When using the `pulumi import` command, PostureDeployment can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:securityposture/postureDeployment:PostureDeployment default {{parent}}/locations/{{location}}/postureDeployments/{{posture_deployment_id}}
```

<
descriptionB" 'Description of the posture deployment.
;
location" +The location of the resource, eg. global`.
o
parent" aThe parent of the resource, an organization. Format should be `organizations/{organization_id}`.
A
postureDeploymentId" &ID of the posture deployment.


- - -
▓
	postureId" аRelative name of the posture which needs to be deployed. It should be in the format:
organizations/{organization_id}/locations/{location}/postures/{posture_id}
M
postureRevisionId" 4Revision_id the posture which needs to be deployed.
╬
targetResource" иThe resource on which the posture should be deployed. This can be in one of the following formats:
projects/{project_number},
folders/{folder_number},
organizations/{organization_id}
"B

createTime" 0Time the posture deployment was created in UTC.
"<
descriptionB" 'Description of the posture deployment.
"▄
desiredPostureId" ├This is an output only optional field which will be filled in case when
PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
It denotes the desired posture to be deployed.
"­
desiredPostureRevisionId" ¤This is an output only optional field which will be filled in case when
PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or DELETE_FAILED.
It denotes the desired posture revision_id to be deployed.
"K
etag" ?For Resource freshness validation (https://google.aip.dev/154)
"ќ
failureMessage"  This is a output only optional field which will be filled in case where
PostureDeployment enters a failure state like UPDATE_FAILED or
CREATE_FAILED or DELETE_FAILED. It will have the failure message for posture deployment's
CREATE/UPDATE/DELETE methods.
";
location" +The location of the resource, eg. global`.
"5
name" )Name of the posture deployment instance.
"o
parent" aThe parent of the resource, an organization. Format should be `organizations/{organization_id}`.
"A
postureDeploymentId" &ID of the posture deployment.


- - -
"▓
	postureId" аRelative name of the posture which needs to be deployed. It should be in the format:
organizations/{organization_id}/locations/{location}/postures/{posture_id}
"M
postureRevisionId" 4Revision_id the posture which needs to be deployed.
"\
reconciling
 IIf set, there are currently changes in flight to the posture deployment.
"б
state" ћState of the posture deployment. A posture deployment can be in the following terminal states:
ACTIVE, CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED.
"╬
targetResource" иThe resource on which the posture should be deployed. This can be in one of the following formats:
projects/{project_number},
folders/{folder_number},
organizations/{organization_id}
"B

updateTime" 0Time the posture deployment was updated in UTC.
*н,
=
serviceaccountAccount"gcp:serviceaccount/account:AccountрAllows management of a Google Cloud service account.

* [API documentation](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/compute/docs/access/service-accounts)

> **Warning:**  If you delete and recreate a service account, you must reapply any IAM roles that it had before.

> Creation of service accounts is eventually consistent, and that can lead to
errors when you try to apply ACLs to service accounts immediately after
creation.

## Example Usage

This snippet creates a service account in a project.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const serviceAccount = new gcp.serviceaccount.Account("service_account", {
    accountId: "service-account-id",
    displayName: "Service Account",
});
```
```python
import pulumi
import pulumi_gcp as gcp

service_account = gcp.serviceaccount.Account("service_account",
    account_id="service-account-id",
    display_name="Service Account")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    {
        AccountId = "service-account-id",
        DisplayName = "Service Account",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("service-account-id"),
			DisplayName: pulumi.String("Service Account"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
            .accountId("service-account-id")
            .displayName("Service Account")
            .build());

    }
}
```
```yaml
resources:
  serviceAccount:
    type: gcp:serviceaccount:Account
    name: service_account
    properties:
      accountId: service-account-id
      displayName: Service Account
```
<!--End PulumiCodeChooser -->

## Import

Service accounts can be imported using their URI, e.g.

* `projects/{{project_id}}/serviceAccounts/{{email}}`

When using the `pulumi import` command, service accounts can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:serviceaccount/account:Account default projects/{{project_id}}/serviceAccounts/{{email}}
```

г
	accountIdB" ўThe account id that is used to generate the service
account email address and a stable unique id. It is unique within a project,
must be 6-30 characters long, and match the regular expression `a-z`
to comply with RFC1035. Changing this forces a new service account to be created.
і
createIgnoreAlreadyExistsB
 gIf set to true, skip service account creation if a service account with the same email already exists.
o
descriptionB" ZA text description of the service account.
Must be less than or equal to 256 UTF-8 bytes.
╣
disabledB
 дWhether a service account is disabled or not. Defaults to `false`. This field has no effect during creation.
Must be set after creation to disable a service account.
o
displayNameB" ZThe display name for the service account.
Can be updated without creating a new resource.
ё
projectB" sThe ID of the project that the service account will be created in.
Defaults to the provider project configuration.
"ф
	accountId" ўThe account id that is used to generate the service
account email address and a stable unique id. It is unique within a project,
must be 6-30 characters long, and match the regular expression `a-z`
to comply with RFC1035. Changing this forces a new service account to be created.
"і
createIgnoreAlreadyExistsB
 gIf set to true, skip service account creation if a service account with the same email already exists.
"o
descriptionB" ZA text description of the service account.
Must be less than or equal to 256 UTF-8 bytes.
"╣
disabledB
 дWhether a service account is disabled or not. Defaults to `false`. This field has no effect during creation.
Must be set after creation to disable a service account.
"o
displayNameB" ZThe display name for the service account.
Can be updated without creating a new resource.
"┴
email" │The e-mail address of the service account. This value
should be referenced from any `gcp.organizations.getIAMPolicy` data sources
that would grant the service account privileges.
"х
member" дThe Identity of the service account in the form `serviceAccount:{email}`. This value is often used to refer to the service account in order to grant IAM permissions.
"=
name" 1The fully-qualified name of the service account.
"ѓ
project" sThe ID of the project that the service account will be created in.
Defaults to the provider project configuration.
"6
uniqueId" &The unique id of the service account.
*Фй
F
serviceaccount
IAMBinding(gcp:serviceaccount/iAMBinding:IAMBindingћЦWhen managing IAM roles, you can treat a service account either as a resource or as an identity. This resource is to add iam policy bindings to a service account resource, such as allowing the members to run operations as or modify the service account. To configure permissions for a service account on other GCP resources, use the google_project_iam set of resources.

Three different resources help you manage your IAM policy for a service account. Each of these resources serves a different use case:

* `gcp.serviceaccount.IAMPolicy`: Authoritative. Sets the IAM policy for the service account and replaces any existing policy already attached.
* `gcp.serviceaccount.IAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service account are preserved.
* `gcp.serviceaccount.IAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the service account are preserved.

> **Note:** `gcp.serviceaccount.IAMPolicy` **cannot** be used in conjunction with `gcp.serviceaccount.IAMBinding` and `gcp.serviceaccount.IAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.serviceaccount.IAMBinding` resources **can be** used in conjunction with `gcp.serviceaccount.IAMMember` resources **only if** they do not grant privilege to the same role.

## Example Usage

### Service Account IAM Policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/iam.serviceAccountUser",
        members: ["user:jane@example.com"],
    }],
});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can interact with",
});
const admin_account_iam = new gcp.serviceaccount.IAMPolicy("admin-account-iam", {
    serviceAccountId: sa.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/iam.serviceAccountUser",
    "members": ["user:jane@example.com"],
}])
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can interact with")
admin_account_iam = gcp.serviceaccount.IAMPolicy("admin-account-iam",
    service_account_id=sa.name,
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/iam.serviceAccountUser",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can interact with",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMPolicy("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/iam.serviceAccountUser",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can interact with"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMPolicy(ctx, "admin-account-iam", &serviceaccount.IAMPolicyArgs{
			ServiceAccountId: sa.Name,
			PolicyData:       pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMPolicy;
import com.pulumi.gcp.serviceaccount.IAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/iam.serviceAccountUser")
                .members("user:jane@example.com")
                .build())
            .build());

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can interact with")
            .build());

        var admin_account_iam = new IAMPolicy("admin-account-iam", IAMPolicyArgs.builder()
            .serviceAccountId(sa.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can interact with
  admin-account-iam:
    type: gcp:serviceaccount:IAMPolicy
    properties:
      serviceAccountId: ${sa.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/iam.serviceAccountUser
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.ServiceAccount.Inputs.IAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &serviceaccount.IAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .condition(IAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.compute.getDefaultServiceAccount({});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
});
// Allow SA service account use the default GCE account
const gce_default_account_iam = new gcp.serviceaccount.IAMMember("gce-default-account-iam", {
    serviceAccountId: _default.then(_default => _default.name),
    role: "roles/iam.serviceAccountUser",
    member: pulumi.interpolate`serviceAccount:${sa.email}`,
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.compute.get_default_service_account()
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com")
# Allow SA service account use the default GCE account
gce_default_account_iam = gcp.serviceaccount.IAMMember("gce-default-account-iam",
    service_account_id=default.name,
    role="roles/iam.serviceAccountUser",
    member=sa.email.apply(lambda email: f"serviceAccount:{email}"))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Compute.GetDefaultServiceAccount.Invoke();

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
    });

    // Allow SA service account use the default GCE account
    var gce_default_account_iam = new Gcp.ServiceAccount.IAMMember("gce-default-account-iam", new()
    {
        ServiceAccountId = @default.Apply(@default => @default.Apply(getDefaultServiceAccountResult => getDefaultServiceAccountResult.Name)),
        Role = "roles/iam.serviceAccountUser",
        Member = sa.Email.Apply(email => $"serviceAccount:{email}"),
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := compute.GetDefaultServiceAccount(ctx, &compute.GetDefaultServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		// Allow SA service account use the default GCE account
		_, err = serviceaccount.NewIAMMember(ctx, "gce-default-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: pulumi.String(_default.Name),
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member: sa.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.ComputeFunctions;
import com.pulumi.gcp.compute.inputs.GetDefaultServiceAccountArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = ComputeFunctions.getDefaultServiceAccount();

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .build());

        // Allow SA service account use the default GCE account
        var gce_default_account_iam = new IAMMember("gce-default-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(default_.name())
            .role("roles/iam.serviceAccountUser")
            .member(sa.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
  # Allow SA service account use the default GCE account
  gce-default-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${default.name}
      role: roles/iam.serviceAccountUser
      member: serviceAccount:${sa.email}
variables:
  default:
    fn::invoke:
      function: gcp:compute:getDefaultServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.ServiceAccount.Inputs.IAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
			Condition: &serviceaccount.IAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .condition(IAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->


### Additional Examples

### Service Account IAM Policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/iam.serviceAccountUser",
        members: ["user:jane@example.com"],
    }],
});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can interact with",
});
const admin_account_iam = new gcp.serviceaccount.IAMPolicy("admin-account-iam", {
    serviceAccountId: sa.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/iam.serviceAccountUser",
    "members": ["user:jane@example.com"],
}])
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can interact with")
admin_account_iam = gcp.serviceaccount.IAMPolicy("admin-account-iam",
    service_account_id=sa.name,
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/iam.serviceAccountUser",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can interact with",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMPolicy("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/iam.serviceAccountUser",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can interact with"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMPolicy(ctx, "admin-account-iam", &serviceaccount.IAMPolicyArgs{
			ServiceAccountId: sa.Name,
			PolicyData:       pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMPolicy;
import com.pulumi.gcp.serviceaccount.IAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/iam.serviceAccountUser")
                .members("user:jane@example.com")
                .build())
            .build());

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can interact with")
            .build());

        var admin_account_iam = new IAMPolicy("admin-account-iam", IAMPolicyArgs.builder()
            .serviceAccountId(sa.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can interact with
  admin-account-iam:
    type: gcp:serviceaccount:IAMPolicy
    properties:
      serviceAccountId: ${sa.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/iam.serviceAccountUser
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.ServiceAccount.Inputs.IAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &serviceaccount.IAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .condition(IAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.compute.getDefaultServiceAccount({});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
});
// Allow SA service account use the default GCE account
const gce_default_account_iam = new gcp.serviceaccount.IAMMember("gce-default-account-iam", {
    serviceAccountId: _default.then(_default => _default.name),
    role: "roles/iam.serviceAccountUser",
    member: pulumi.interpolate`serviceAccount:${sa.email}`,
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.compute.get_default_service_account()
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com")
# Allow SA service account use the default GCE account
gce_default_account_iam = gcp.serviceaccount.IAMMember("gce-default-account-iam",
    service_account_id=default.name,
    role="roles/iam.serviceAccountUser",
    member=sa.email.apply(lambda email: f"serviceAccount:{email}"))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Compute.GetDefaultServiceAccount.Invoke();

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
    });

    // Allow SA service account use the default GCE account
    var gce_default_account_iam = new Gcp.ServiceAccount.IAMMember("gce-default-account-iam", new()
    {
        ServiceAccountId = @default.Apply(@default => @default.Apply(getDefaultServiceAccountResult => getDefaultServiceAccountResult.Name)),
        Role = "roles/iam.serviceAccountUser",
        Member = sa.Email.Apply(email => $"serviceAccount:{email}"),
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := compute.GetDefaultServiceAccount(ctx, &compute.GetDefaultServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		// Allow SA service account use the default GCE account
		_, err = serviceaccount.NewIAMMember(ctx, "gce-default-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: pulumi.String(_default.Name),
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member: sa.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.ComputeFunctions;
import com.pulumi.gcp.compute.inputs.GetDefaultServiceAccountArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = ComputeFunctions.getDefaultServiceAccount();

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .build());

        // Allow SA service account use the default GCE account
        var gce_default_account_iam = new IAMMember("gce-default-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(default_.name())
            .role("roles/iam.serviceAccountUser")
            .member(sa.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
  # Allow SA service account use the default GCE account
  gce-default-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${default.name}
      role: roles/iam.serviceAccountUser
      member: serviceAccount:${sa.email}
variables:
  default:
    fn::invoke:
      function: gcp:compute:getDefaultServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.ServiceAccount.Inputs.IAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
			Condition: &serviceaccount.IAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .condition(IAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

### Importing with conditions:

Here are examples of importing IAM memberships and bindings that include conditions:

```sh
$ pulumi import gcp:serviceaccount/iAMBinding:IAMBinding admin-account-iam "projects/{your-project-id}/serviceAccounts/{your-service-account-email} roles/iam.serviceAccountUser expires_after_2019_12_31"
```

```sh
$ pulumi import gcp:serviceaccount/iAMBinding:IAMBinding admin-account-iam "projects/{your-project-id}/serviceAccounts/{your-service-account-email} roles/iam.serviceAccountUser user:foo@example.com expires_after_2019_12_31"
```

З
	conditiongBe:c
a
serviceaccountIAMBindingCondition:gcp:serviceaccount/IAMBindingCondition:IAMBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
њ
members*" ђIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
о
role" ╔The role that should be applied. Only one
`gcp.serviceaccount.IAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
\
serviceAccountId" DThe fully-qualified name of the service account to apply policy to.
"З
	conditiongBe:c
a
serviceaccountIAMBindingCondition:gcp:serviceaccount/IAMBindingCondition:IAMBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"C
etag" 7(Computed) The etag of the service account IAM policy.
"њ
members*" ђIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
"о
role" ╔The role that should be applied. Only one
`gcp.serviceaccount.IAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"\
serviceAccountId" DThe fully-qualified name of the service account to apply policy to.
*ўй
C
serviceaccount	IAMMember&gcp:serviceaccount/iAMMember:IAMMemberљЦWhen managing IAM roles, you can treat a service account either as a resource or as an identity. This resource is to add iam policy bindings to a service account resource, such as allowing the members to run operations as or modify the service account. To configure permissions for a service account on other GCP resources, use the google_project_iam set of resources.

Three different resources help you manage your IAM policy for a service account. Each of these resources serves a different use case:

* `gcp.serviceaccount.IAMPolicy`: Authoritative. Sets the IAM policy for the service account and replaces any existing policy already attached.
* `gcp.serviceaccount.IAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service account are preserved.
* `gcp.serviceaccount.IAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the service account are preserved.

> **Note:** `gcp.serviceaccount.IAMPolicy` **cannot** be used in conjunction with `gcp.serviceaccount.IAMBinding` and `gcp.serviceaccount.IAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.serviceaccount.IAMBinding` resources **can be** used in conjunction with `gcp.serviceaccount.IAMMember` resources **only if** they do not grant privilege to the same role.

## Example Usage

### Service Account IAM Policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/iam.serviceAccountUser",
        members: ["user:jane@example.com"],
    }],
});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can interact with",
});
const admin_account_iam = new gcp.serviceaccount.IAMPolicy("admin-account-iam", {
    serviceAccountId: sa.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/iam.serviceAccountUser",
    "members": ["user:jane@example.com"],
}])
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can interact with")
admin_account_iam = gcp.serviceaccount.IAMPolicy("admin-account-iam",
    service_account_id=sa.name,
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/iam.serviceAccountUser",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can interact with",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMPolicy("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/iam.serviceAccountUser",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can interact with"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMPolicy(ctx, "admin-account-iam", &serviceaccount.IAMPolicyArgs{
			ServiceAccountId: sa.Name,
			PolicyData:       pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMPolicy;
import com.pulumi.gcp.serviceaccount.IAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/iam.serviceAccountUser")
                .members("user:jane@example.com")
                .build())
            .build());

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can interact with")
            .build());

        var admin_account_iam = new IAMPolicy("admin-account-iam", IAMPolicyArgs.builder()
            .serviceAccountId(sa.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can interact with
  admin-account-iam:
    type: gcp:serviceaccount:IAMPolicy
    properties:
      serviceAccountId: ${sa.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/iam.serviceAccountUser
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.ServiceAccount.Inputs.IAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &serviceaccount.IAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .condition(IAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.compute.getDefaultServiceAccount({});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
});
// Allow SA service account use the default GCE account
const gce_default_account_iam = new gcp.serviceaccount.IAMMember("gce-default-account-iam", {
    serviceAccountId: _default.then(_default => _default.name),
    role: "roles/iam.serviceAccountUser",
    member: pulumi.interpolate`serviceAccount:${sa.email}`,
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.compute.get_default_service_account()
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com")
# Allow SA service account use the default GCE account
gce_default_account_iam = gcp.serviceaccount.IAMMember("gce-default-account-iam",
    service_account_id=default.name,
    role="roles/iam.serviceAccountUser",
    member=sa.email.apply(lambda email: f"serviceAccount:{email}"))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Compute.GetDefaultServiceAccount.Invoke();

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
    });

    // Allow SA service account use the default GCE account
    var gce_default_account_iam = new Gcp.ServiceAccount.IAMMember("gce-default-account-iam", new()
    {
        ServiceAccountId = @default.Apply(@default => @default.Apply(getDefaultServiceAccountResult => getDefaultServiceAccountResult.Name)),
        Role = "roles/iam.serviceAccountUser",
        Member = sa.Email.Apply(email => $"serviceAccount:{email}"),
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := compute.GetDefaultServiceAccount(ctx, &compute.GetDefaultServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		// Allow SA service account use the default GCE account
		_, err = serviceaccount.NewIAMMember(ctx, "gce-default-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: pulumi.String(_default.Name),
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member: sa.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.ComputeFunctions;
import com.pulumi.gcp.compute.inputs.GetDefaultServiceAccountArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = ComputeFunctions.getDefaultServiceAccount();

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .build());

        // Allow SA service account use the default GCE account
        var gce_default_account_iam = new IAMMember("gce-default-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(default_.name())
            .role("roles/iam.serviceAccountUser")
            .member(sa.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
  # Allow SA service account use the default GCE account
  gce-default-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${default.name}
      role: roles/iam.serviceAccountUser
      member: serviceAccount:${sa.email}
variables:
  default:
    fn::invoke:
      function: gcp:compute:getDefaultServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.ServiceAccount.Inputs.IAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
			Condition: &serviceaccount.IAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .condition(IAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->


### Additional Examples

### Service Account IAM Policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/iam.serviceAccountUser",
        members: ["user:jane@example.com"],
    }],
});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can interact with",
});
const admin_account_iam = new gcp.serviceaccount.IAMPolicy("admin-account-iam", {
    serviceAccountId: sa.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/iam.serviceAccountUser",
    "members": ["user:jane@example.com"],
}])
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can interact with")
admin_account_iam = gcp.serviceaccount.IAMPolicy("admin-account-iam",
    service_account_id=sa.name,
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/iam.serviceAccountUser",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can interact with",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMPolicy("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/iam.serviceAccountUser",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can interact with"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMPolicy(ctx, "admin-account-iam", &serviceaccount.IAMPolicyArgs{
			ServiceAccountId: sa.Name,
			PolicyData:       pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMPolicy;
import com.pulumi.gcp.serviceaccount.IAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/iam.serviceAccountUser")
                .members("user:jane@example.com")
                .build())
            .build());

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can interact with")
            .build());

        var admin_account_iam = new IAMPolicy("admin-account-iam", IAMPolicyArgs.builder()
            .serviceAccountId(sa.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can interact with
  admin-account-iam:
    type: gcp:serviceaccount:IAMPolicy
    properties:
      serviceAccountId: ${sa.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/iam.serviceAccountUser
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.ServiceAccount.Inputs.IAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &serviceaccount.IAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .condition(IAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.compute.getDefaultServiceAccount({});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
});
// Allow SA service account use the default GCE account
const gce_default_account_iam = new gcp.serviceaccount.IAMMember("gce-default-account-iam", {
    serviceAccountId: _default.then(_default => _default.name),
    role: "roles/iam.serviceAccountUser",
    member: pulumi.interpolate`serviceAccount:${sa.email}`,
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.compute.get_default_service_account()
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com")
# Allow SA service account use the default GCE account
gce_default_account_iam = gcp.serviceaccount.IAMMember("gce-default-account-iam",
    service_account_id=default.name,
    role="roles/iam.serviceAccountUser",
    member=sa.email.apply(lambda email: f"serviceAccount:{email}"))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Compute.GetDefaultServiceAccount.Invoke();

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
    });

    // Allow SA service account use the default GCE account
    var gce_default_account_iam = new Gcp.ServiceAccount.IAMMember("gce-default-account-iam", new()
    {
        ServiceAccountId = @default.Apply(@default => @default.Apply(getDefaultServiceAccountResult => getDefaultServiceAccountResult.Name)),
        Role = "roles/iam.serviceAccountUser",
        Member = sa.Email.Apply(email => $"serviceAccount:{email}"),
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := compute.GetDefaultServiceAccount(ctx, &compute.GetDefaultServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		// Allow SA service account use the default GCE account
		_, err = serviceaccount.NewIAMMember(ctx, "gce-default-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: pulumi.String(_default.Name),
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member: sa.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.ComputeFunctions;
import com.pulumi.gcp.compute.inputs.GetDefaultServiceAccountArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = ComputeFunctions.getDefaultServiceAccount();

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .build());

        // Allow SA service account use the default GCE account
        var gce_default_account_iam = new IAMMember("gce-default-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(default_.name())
            .role("roles/iam.serviceAccountUser")
            .member(sa.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
  # Allow SA service account use the default GCE account
  gce-default-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${default.name}
      role: roles/iam.serviceAccountUser
      member: serviceAccount:${sa.email}
variables:
  default:
    fn::invoke:
      function: gcp:compute:getDefaultServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.ServiceAccount.Inputs.IAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
			Condition: &serviceaccount.IAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .condition(IAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

### Importing with conditions:

Here are examples of importing IAM memberships and bindings that include conditions:

```sh
$ pulumi import gcp:serviceaccount/iAMMember:IAMMember admin-account-iam "projects/{your-project-id}/serviceAccounts/{your-service-account-email} roles/iam.serviceAccountUser expires_after_2019_12_31"
```

```sh
$ pulumi import gcp:serviceaccount/iAMMember:IAMMember admin-account-iam "projects/{your-project-id}/serviceAccounts/{your-service-account-email} roles/iam.serviceAccountUser user:foo@example.com expires_after_2019_12_31"
```

ы
	conditiondBb:`
^
serviceaccountIAMMemberCondition8gcp:serviceaccount/IAMMemberCondition:IAMMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
Ј
member" ђIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
о
role" ╔The role that should be applied. Only one
`gcp.serviceaccount.IAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
\
serviceAccountId" DThe fully-qualified name of the service account to apply policy to.
"ы
	conditiondBb:`
^
serviceaccountIAMMemberCondition8gcp:serviceaccount/IAMMemberCondition:IAMMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"C
etag" 7(Computed) The etag of the service account IAM policy.
"Ј
member" ђIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
"о
role" ╔The role that should be applied. Only one
`gcp.serviceaccount.IAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"\
serviceAccountId" DThe fully-qualified name of the service account to apply policy to.
*юЕ
C
serviceaccount	IAMPolicy&gcp:serviceaccount/iAMPolicy:IAMPolicyљЦWhen managing IAM roles, you can treat a service account either as a resource or as an identity. This resource is to add iam policy bindings to a service account resource, such as allowing the members to run operations as or modify the service account. To configure permissions for a service account on other GCP resources, use the google_project_iam set of resources.

Three different resources help you manage your IAM policy for a service account. Each of these resources serves a different use case:

* `gcp.serviceaccount.IAMPolicy`: Authoritative. Sets the IAM policy for the service account and replaces any existing policy already attached.
* `gcp.serviceaccount.IAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service account are preserved.
* `gcp.serviceaccount.IAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the service account are preserved.

> **Note:** `gcp.serviceaccount.IAMPolicy` **cannot** be used in conjunction with `gcp.serviceaccount.IAMBinding` and `gcp.serviceaccount.IAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.serviceaccount.IAMBinding` resources **can be** used in conjunction with `gcp.serviceaccount.IAMMember` resources **only if** they do not grant privilege to the same role.

## Example Usage

### Service Account IAM Policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/iam.serviceAccountUser",
        members: ["user:jane@example.com"],
    }],
});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can interact with",
});
const admin_account_iam = new gcp.serviceaccount.IAMPolicy("admin-account-iam", {
    serviceAccountId: sa.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/iam.serviceAccountUser",
    "members": ["user:jane@example.com"],
}])
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can interact with")
admin_account_iam = gcp.serviceaccount.IAMPolicy("admin-account-iam",
    service_account_id=sa.name,
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/iam.serviceAccountUser",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can interact with",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMPolicy("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/iam.serviceAccountUser",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can interact with"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMPolicy(ctx, "admin-account-iam", &serviceaccount.IAMPolicyArgs{
			ServiceAccountId: sa.Name,
			PolicyData:       pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMPolicy;
import com.pulumi.gcp.serviceaccount.IAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/iam.serviceAccountUser")
                .members("user:jane@example.com")
                .build())
            .build());

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can interact with")
            .build());

        var admin_account_iam = new IAMPolicy("admin-account-iam", IAMPolicyArgs.builder()
            .serviceAccountId(sa.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can interact with
  admin-account-iam:
    type: gcp:serviceaccount:IAMPolicy
    properties:
      serviceAccountId: ${sa.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/iam.serviceAccountUser
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.ServiceAccount.Inputs.IAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &serviceaccount.IAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .condition(IAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.compute.getDefaultServiceAccount({});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
});
// Allow SA service account use the default GCE account
const gce_default_account_iam = new gcp.serviceaccount.IAMMember("gce-default-account-iam", {
    serviceAccountId: _default.then(_default => _default.name),
    role: "roles/iam.serviceAccountUser",
    member: pulumi.interpolate`serviceAccount:${sa.email}`,
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.compute.get_default_service_account()
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com")
# Allow SA service account use the default GCE account
gce_default_account_iam = gcp.serviceaccount.IAMMember("gce-default-account-iam",
    service_account_id=default.name,
    role="roles/iam.serviceAccountUser",
    member=sa.email.apply(lambda email: f"serviceAccount:{email}"))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Compute.GetDefaultServiceAccount.Invoke();

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
    });

    // Allow SA service account use the default GCE account
    var gce_default_account_iam = new Gcp.ServiceAccount.IAMMember("gce-default-account-iam", new()
    {
        ServiceAccountId = @default.Apply(@default => @default.Apply(getDefaultServiceAccountResult => getDefaultServiceAccountResult.Name)),
        Role = "roles/iam.serviceAccountUser",
        Member = sa.Email.Apply(email => $"serviceAccount:{email}"),
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := compute.GetDefaultServiceAccount(ctx, &compute.GetDefaultServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		// Allow SA service account use the default GCE account
		_, err = serviceaccount.NewIAMMember(ctx, "gce-default-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: pulumi.String(_default.Name),
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member: sa.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.ComputeFunctions;
import com.pulumi.gcp.compute.inputs.GetDefaultServiceAccountArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = ComputeFunctions.getDefaultServiceAccount();

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .build());

        // Allow SA service account use the default GCE account
        var gce_default_account_iam = new IAMMember("gce-default-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(default_.name())
            .role("roles/iam.serviceAccountUser")
            .member(sa.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
  # Allow SA service account use the default GCE account
  gce-default-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${default.name}
      role: roles/iam.serviceAccountUser
      member: serviceAccount:${sa.email}
variables:
  default:
    fn::invoke:
      function: gcp:compute:getDefaultServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.ServiceAccount.Inputs.IAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
			Condition: &serviceaccount.IAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .condition(IAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->


### Additional Examples

### Service Account IAM Policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/iam.serviceAccountUser",
        members: ["user:jane@example.com"],
    }],
});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can interact with",
});
const admin_account_iam = new gcp.serviceaccount.IAMPolicy("admin-account-iam", {
    serviceAccountId: sa.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/iam.serviceAccountUser",
    "members": ["user:jane@example.com"],
}])
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can interact with")
admin_account_iam = gcp.serviceaccount.IAMPolicy("admin-account-iam",
    service_account_id=sa.name,
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/iam.serviceAccountUser",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can interact with",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMPolicy("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/iam.serviceAccountUser",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can interact with"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMPolicy(ctx, "admin-account-iam", &serviceaccount.IAMPolicyArgs{
			ServiceAccountId: sa.Name,
			PolicyData:       pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMPolicy;
import com.pulumi.gcp.serviceaccount.IAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/iam.serviceAccountUser")
                .members("user:jane@example.com")
                .build())
            .build());

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can interact with")
            .build());

        var admin_account_iam = new IAMPolicy("admin-account-iam", IAMPolicyArgs.builder()
            .serviceAccountId(sa.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can interact with
  admin-account-iam:
    type: gcp:serviceaccount:IAMPolicy
    properties:
      serviceAccountId: ${sa.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/iam.serviceAccountUser
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

### Service Account IAM Binding With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that only Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMBinding("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that only Jane can use")
admin_account_iam = gcp.serviceaccount.IAMBinding("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that only Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMBinding("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.ServiceAccount.Inputs.IAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that only Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMBinding(ctx, "admin-account-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &serviceaccount.IAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that only Jane can use")
            .build());

        var admin_account_iam = new IAMBinding("admin-account-iam", IAMBindingArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .members("user:jane@example.com")
            .condition(IAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that only Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.compute.getDefaultServiceAccount({});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
});
// Allow SA service account use the default GCE account
const gce_default_account_iam = new gcp.serviceaccount.IAMMember("gce-default-account-iam", {
    serviceAccountId: _default.then(_default => _default.name),
    role: "roles/iam.serviceAccountUser",
    member: pulumi.interpolate`serviceAccount:${sa.email}`,
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.compute.get_default_service_account()
sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com")
# Allow SA service account use the default GCE account
gce_default_account_iam = gcp.serviceaccount.IAMMember("gce-default-account-iam",
    service_account_id=default.name,
    role="roles/iam.serviceAccountUser",
    member=sa.email.apply(lambda email: f"serviceAccount:{email}"))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Compute.GetDefaultServiceAccount.Invoke();

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
    });

    // Allow SA service account use the default GCE account
    var gce_default_account_iam = new Gcp.ServiceAccount.IAMMember("gce-default-account-iam", new()
    {
        ServiceAccountId = @default.Apply(@default => @default.Apply(getDefaultServiceAccountResult => getDefaultServiceAccountResult.Name)),
        Role = "roles/iam.serviceAccountUser",
        Member = sa.Email.Apply(email => $"serviceAccount:{email}"),
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := compute.GetDefaultServiceAccount(ctx, &compute.GetDefaultServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		// Allow SA service account use the default GCE account
		_, err = serviceaccount.NewIAMMember(ctx, "gce-default-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: pulumi.String(_default.Name),
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member: sa.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.ComputeFunctions;
import com.pulumi.gcp.compute.inputs.GetDefaultServiceAccountArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = ComputeFunctions.getDefaultServiceAccount();

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .build());

        // Allow SA service account use the default GCE account
        var gce_default_account_iam = new IAMMember("gce-default-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(default_.name())
            .role("roles/iam.serviceAccountUser")
            .member(sa.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
  # Allow SA service account use the default GCE account
  gce-default-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${default.name}
      role: roles/iam.serviceAccountUser
      member: serviceAccount:${sa.email}
variables:
  default:
    fn::invoke:
      function: gcp:compute:getDefaultServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->

### Service Account IAM Member With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "my-service-account",
    displayName: "A service account that Jane can use",
});
const admin_account_iam = new gcp.serviceaccount.IAMMember("admin-account-iam", {
    serviceAccountId: sa.name,
    role: "roles/iam.serviceAccountUser",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa",
    account_id="my-service-account",
    display_name="A service account that Jane can use")
admin_account_iam = gcp.serviceaccount.IAMMember("admin-account-iam",
    service_account_id=sa.name,
    role="roles/iam.serviceAccountUser",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "my-service-account",
        DisplayName = "A service account that Jane can use",
    });

    var admin_account_iam = new Gcp.ServiceAccount.IAMMember("admin-account-iam", new()
    {
        ServiceAccountId = sa.Name,
        Role = "roles/iam.serviceAccountUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.ServiceAccount.Inputs.IAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-service-account"),
			DisplayName: pulumi.String("A service account that Jane can use"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewIAMMember(ctx, "admin-account-iam", &serviceaccount.IAMMemberArgs{
			ServiceAccountId: sa.Name,
			Role:             pulumi.String("roles/iam.serviceAccountUser"),
			Member:           pulumi.String("user:jane@example.com"),
			Condition: &serviceaccount.IAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.IAMMember;
import com.pulumi.gcp.serviceaccount.IAMMemberArgs;
import com.pulumi.gcp.serviceaccount.inputs.IAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("my-service-account")
            .displayName("A service account that Jane can use")
            .build());

        var admin_account_iam = new IAMMember("admin-account-iam", IAMMemberArgs.builder()
            .serviceAccountId(sa.name())
            .role("roles/iam.serviceAccountUser")
            .member("user:jane@example.com")
            .condition(IAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-service-account
      displayName: A service account that Jane can use
  admin-account-iam:
    type: gcp:serviceaccount:IAMMember
    properties:
      serviceAccountId: ${sa.name}
      role: roles/iam.serviceAccountUser
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

### Importing with conditions:

Here are examples of importing IAM memberships and bindings that include conditions:

```sh
$ pulumi import gcp:serviceaccount/iAMPolicy:IAMPolicy admin-account-iam "projects/{your-project-id}/serviceAccounts/{your-service-account-email} roles/iam.serviceAccountUser expires_after_2019_12_31"
```

```sh
$ pulumi import gcp:serviceaccount/iAMPolicy:IAMPolicy admin-account-iam "projects/{your-project-id}/serviceAccounts/{your-service-account-email} roles/iam.serviceAccountUser user:foo@example.com expires_after_2019_12_31"
```

_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
\
serviceAccountId" DThe fully-qualified name of the service account to apply policy to.
"C
etag" 7(Computed) The etag of the service account IAM policy.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"\
serviceAccountId" DThe fully-qualified name of the service account to apply policy to.
* Ј
1
serviceaccountKeygcp:serviceaccount/key:Keyџr## Example Usage

### Creating A New Key

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const myaccount = new gcp.serviceaccount.Account("myaccount", {
    accountId: "myaccount",
    displayName: "My Service Account",
});
const mykey = new gcp.serviceaccount.Key("mykey", {
    serviceAccountId: myaccount.name,
    publicKeyType: "TYPE_X509_PEM_FILE",
});
```
```python
import pulumi
import pulumi_gcp as gcp

myaccount = gcp.serviceaccount.Account("myaccount",
    account_id="myaccount",
    display_name="My Service Account")
mykey = gcp.serviceaccount.Key("mykey",
    service_account_id=myaccount.name,
    public_key_type="TYPE_X509_PEM_FILE")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var myaccount = new Gcp.ServiceAccount.Account("myaccount", new()
    {
        AccountId = "myaccount",
        DisplayName = "My Service Account",
    });

    var mykey = new Gcp.ServiceAccount.Key("mykey", new()
    {
        ServiceAccountId = myaccount.Name,
        PublicKeyType = "TYPE_X509_PEM_FILE",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myaccount, err := serviceaccount.NewAccount(ctx, "myaccount", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("myaccount"),
			DisplayName: pulumi.String("My Service Account"),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewKey(ctx, "mykey", &serviceaccount.KeyArgs{
			ServiceAccountId: myaccount.Name,
			PublicKeyType:    pulumi.String("TYPE_X509_PEM_FILE"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.Key;
import com.pulumi.gcp.serviceaccount.KeyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var myaccount = new Account("myaccount", AccountArgs.builder()
            .accountId("myaccount")
            .displayName("My Service Account")
            .build());

        var mykey = new Key("mykey", KeyArgs.builder()
            .serviceAccountId(myaccount.name())
            .publicKeyType("TYPE_X509_PEM_FILE")
            .build());

    }
}
```
```yaml
resources:
  myaccount:
    type: gcp:serviceaccount:Account
    properties:
      accountId: myaccount
      displayName: My Service Account
  mykey:
    type: gcp:serviceaccount:Key
    properties:
      serviceAccountId: ${myaccount.name}
      publicKeyType: TYPE_X509_PEM_FILE
```
<!--End PulumiCodeChooser -->


### Creating And Regularly Rotating A Key

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as time from "@pulumiverse/time";

const myaccount = new gcp.serviceaccount.Account("myaccount", {
    accountId: "myaccount",
    displayName: "My Service Account",
});
// note this requires the terraform to be run regularly
const mykeyRotation = new time.Rotating("mykey_rotation", {rotationDays: 30});
const mykey = new gcp.serviceaccount.Key("mykey", {
    serviceAccountId: myaccount.name,
    keepers: {
        rotation_time: mykeyRotation.rotationRfc3339,
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumiverse_time as time

myaccount = gcp.serviceaccount.Account("myaccount",
    account_id="myaccount",
    display_name="My Service Account")
# note this requires the terraform to be run regularly
mykey_rotation = time.Rotating("mykey_rotation", rotation_days=30)
mykey = gcp.serviceaccount.Key("mykey",
    service_account_id=myaccount.name,
    keepers={
        "rotation_time": mykey_rotation.rotation_rfc3339,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Time = Pulumiverse.Time;

return await Deployment.RunAsync(() => 
{
    var myaccount = new Gcp.ServiceAccount.Account("myaccount", new()
    {
        AccountId = "myaccount",
        DisplayName = "My Service Account",
    });

    // note this requires the terraform to be run regularly
    var mykeyRotation = new Time.Rotating("mykey_rotation", new()
    {
        RotationDays = 30,
    });

    var mykey = new Gcp.ServiceAccount.Key("mykey", new()
    {
        ServiceAccountId = myaccount.Name,
        Keepers = 
        {
            { "rotation_time", mykeyRotation.RotationRfc3339 },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi-time/sdk/go/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myaccount, err := serviceaccount.NewAccount(ctx, "myaccount", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("myaccount"),
			DisplayName: pulumi.String("My Service Account"),
		})
		if err != nil {
			return err
		}
		// note this requires the terraform to be run regularly
		mykeyRotation, err := time.NewRotating(ctx, "mykey_rotation", &time.RotatingArgs{
			RotationDays: pulumi.Int(30),
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewKey(ctx, "mykey", &serviceaccount.KeyArgs{
			ServiceAccountId: myaccount.Name,
			Keepers: pulumi.StringMap{
				"rotation_time": mykeyRotation.RotationRfc3339,
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.time.Rotating;
import com.pulumi.time.RotatingArgs;
import com.pulumi.gcp.serviceaccount.Key;
import com.pulumi.gcp.serviceaccount.KeyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var myaccount = new Account("myaccount", AccountArgs.builder()
            .accountId("myaccount")
            .displayName("My Service Account")
            .build());

        // note this requires the terraform to be run regularly
        var mykeyRotation = new Rotating("mykeyRotation", RotatingArgs.builder()
            .rotationDays(30)
            .build());

        var mykey = new Key("mykey", KeyArgs.builder()
            .serviceAccountId(myaccount.name())
            .keepers(Map.of("rotation_time", mykeyRotation.rotationRfc3339()))
            .build());

    }
}
```
```yaml
resources:
  myaccount:
    type: gcp:serviceaccount:Account
    properties:
      accountId: myaccount
      displayName: My Service Account
  # note this requires the terraform to be run regularly
  mykeyRotation:
    type: time:Rotating
    name: mykey_rotation
    properties:
      rotationDays: 30
  mykey:
    type: gcp:serviceaccount:Key
    properties:
      serviceAccountId: ${myaccount.name}
      keepers:
        rotation_time: ${mykeyRotation.rotationRfc3339}
```
<!--End PulumiCodeChooser -->


### Save Key In Kubernetes Secret - DEPRECATED

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as kubernetes from "@pulumi/kubernetes";
import * as std from "@pulumi/std";

// Workload Identity is the recommended way of accessing Google Cloud APIs from pods.
// https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
const myaccount = new gcp.serviceaccount.Account("myaccount", {
    accountId: "myaccount",
    displayName: "My Service Account",
});
const mykey = new gcp.serviceaccount.Key("mykey", {serviceAccountId: myaccount.name});
const google_application_credentials = new kubernetes.core.v1.Secret("google-application-credentials", {
    metadata: {
        name: "google-application-credentials",
    },
    data: {
        "credentials.json": std.base64decodeOutput({
            input: mykey.privateKey,
        }).apply(invoke => invoke.result),
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_kubernetes as kubernetes
import pulumi_std as std

# Workload Identity is the recommended way of accessing Google Cloud APIs from pods.
# https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
myaccount = gcp.serviceaccount.Account("myaccount",
    account_id="myaccount",
    display_name="My Service Account")
mykey = gcp.serviceaccount.Key("mykey", service_account_id=myaccount.name)
google_application_credentials = kubernetes.core.v1.Secret("google-application-credentials",
    metadata={
        "name": "google-application-credentials",
    },
    data={
        "credentials.json": std.base64decode_output(input=mykey.private_key).apply(lambda invoke: invoke.result),
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Kubernetes = Pulumi.Kubernetes;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    // Workload Identity is the recommended way of accessing Google Cloud APIs from pods.
    // https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
    var myaccount = new Gcp.ServiceAccount.Account("myaccount", new()
    {
        AccountId = "myaccount",
        DisplayName = "My Service Account",
    });

    var mykey = new Gcp.ServiceAccount.Key("mykey", new()
    {
        ServiceAccountId = myaccount.Name,
    });

    var google_application_credentials = new Kubernetes.Core.V1.Secret("google-application-credentials", new()
    {
        Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs
        {
            Name = "google-application-credentials",
        },
        Data = 
        {
            { "credentials.json", Std.Base64decode.Invoke(new()
            {
                Input = mykey.PrivateKey,
            }).Apply(invoke => invoke.Result) },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// Workload Identity is the recommended way of accessing Google Cloud APIs from pods.
		// https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
		myaccount, err := serviceaccount.NewAccount(ctx, "myaccount", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("myaccount"),
			DisplayName: pulumi.String("My Service Account"),
		})
		if err != nil {
			return err
		}
		mykey, err := serviceaccount.NewKey(ctx, "mykey", &serviceaccount.KeyArgs{
			ServiceAccountId: myaccount.Name,
		})
		if err != nil {
			return err
		}
		_, err = corev1.NewSecret(ctx, "google-application-credentials", &corev1.SecretArgs{
			Metadata: &metav1.ObjectMetaArgs{
				Name: pulumi.String("google-application-credentials"),
			},
			Data: pulumi.StringMap{
				"credentials.json": pulumi.String(std.Base64decodeOutput(ctx, std.Base64decodeOutputArgs{
					Input: mykey.PrivateKey,
				}, nil).ApplyT(func(invoke std.Base64decodeResult) (*string, error) {
					return invoke.Result, nil
				}).(pulumi.StringPtrOutput)),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.Key;
import com.pulumi.gcp.serviceaccount.KeyArgs;
import com.pulumi.kubernetes.core_v1.Secret;
import com.pulumi.kubernetes.core_v1.SecretArgs;
import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        // Workload Identity is the recommended way of accessing Google Cloud APIs from pods.
        // https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
        var myaccount = new Account("myaccount", AccountArgs.builder()
            .accountId("myaccount")
            .displayName("My Service Account")
            .build());

        var mykey = new Key("mykey", KeyArgs.builder()
            .serviceAccountId(myaccount.name())
            .build());

        var google_application_credentials = new Secret("google-application-credentials", SecretArgs.builder()
            .metadata(ObjectMetaArgs.builder()
                .name("google-application-credentials")
                .build())
            .data(Map.of("credentials.json", StdFunctions.base64decode().applyValue(invoke -> invoke.result())))
            .build());

    }
}
```
```yaml
resources:
  # Workload Identity is the recommended way of accessing Google Cloud APIs from pods.
  # https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
  myaccount:
    type: gcp:serviceaccount:Account
    properties:
      accountId: myaccount
      displayName: My Service Account
  mykey:
    type: gcp:serviceaccount:Key
    properties:
      serviceAccountId: ${myaccount.name}
  google-application-credentials:
    type: kubernetes:core/v1:Secret
    properties:
      metadata:
        name: google-application-credentials
      data:
        credentials.json:
          fn::invoke:
            function: std:base64decode
            arguments:
              input: ${mykey.privateKey}
            return: result
```
<!--End PulumiCodeChooser -->

## Import

This resource does not support import.

g
keepersB2" TArbitrary map of values that, when changed, will trigger a new key to be generated.
Б
keyAlgorithmB" їThe algorithm used to generate the key. KEY_ALG_RSA_2048 is the default algorithm.
Valid values are listed at
[ServiceAccountPrivateKeyType](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm)
(only used on create)
y
privateKeyTypeB" aThe output format of the private key. TYPE_GOOGLE_CREDENTIALS_FILE is the default output format.
с
publicKeyDataB" ╦Public key data to create a service account key for given service account. The expected format for this field is a base64 encoded X509_PEM and it conflicts with `public_key_type` and `private_key_type`.
w
publicKeyTypeB" `The output format of the public key requested. TYPE_X509_PEM_FILE is the default output format.
ю
serviceAccountId" ЃThe Service account id of the Key. This can be a string in the format
`{ACCOUNT}` or `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. If the `{ACCOUNT}`-only syntax is used, either
the **full** email address of the service account or its name can be specified as a value, in which case the project will
automatically be inferred from the account. Otherwise, if the `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`
syntax is used, the `{ACCOUNT}` specified can be the full email address of the service account or the service account's
unique id. Substituting `-` as a wildcard for the `{PROJECT_ID}` will infer the project from the account.
"g
keepersB2" TArbitrary map of values that, when changed, will trigger a new key to be generated.
"Б
keyAlgorithmB" їThe algorithm used to generate the key. KEY_ALG_RSA_2048 is the default algorithm.
Valid values are listed at
[ServiceAccountPrivateKeyType](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm)
(only used on create)
",
name"  The name used for this key pair
"я

privateKey" ╦The private key in JSON format, base64 encoded. This is what you normally get as a file when creating
service account keys through the CLI or web console. This is only populated when creating a new key.
"y
privateKeyTypeB" aThe output format of the private key. TYPE_GOOGLE_CREDENTIALS_FILE is the default output format.
"0
	publicKey" The public key, base64 encoded
"с
publicKeyDataB" ╦Public key data to create a service account key for given service account. The expected format for this field is a base64 encoded X509_PEM and it conflicts with `public_key_type` and `private_key_type`.
"w
publicKeyTypeB" `The output format of the public key requested. TYPE_X509_PEM_FILE is the default output format.
"ю
serviceAccountId" ЃThe Service account id of the Key. This can be a string in the format
`{ACCOUNT}` or `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. If the `{ACCOUNT}`-only syntax is used, either
the **full** email address of the service account or its name can be specified as a value, in which case the project will
automatically be inferred from the account. Otherwise, if the `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`
syntax is used, the `{ACCOUNT}` specified can be the full email address of the service account or the service account's
unique id. Substituting `-` as a wildcard for the `{PROJECT_ID}` will infer the project from the account.
"Ф

validAfter" ўThe key can be used after this timestamp. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
"Г
validBefore" ЎThe key can be used before this timestamp.
A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
*╔}
D
servicedirectoryEndpoint&gcp:servicedirectory/endpoint:EndpointЂpAn individual endpoint that provides a service.

To get more information about Endpoint, see:

* [API documentation](https://cloud.google.com/service-directory/docs/reference/rest/v1beta1/projects.locations.namespaces.services.endpoints)
* How-to Guides
    * [Configuring an endpoint](https://cloud.google.com/service-directory/docs/configuring-service-directory#configuring_an_endpoint)

## Example Usage

### Service Directory Endpoint Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.servicedirectory.Namespace("example", {
    namespaceId: "example-namespace",
    location: "us-central1",
});
const exampleService = new gcp.servicedirectory.Service("example", {
    serviceId: "example-service",
    namespace: example.id,
});
const exampleEndpoint = new gcp.servicedirectory.Endpoint("example", {
    endpointId: "example-endpoint",
    service: exampleService.id,
    metadata: {
        stage: "prod",
        region: "us-central1",
    },
    address: "1.2.3.4",
    port: 5353,
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.servicedirectory.Namespace("example",
    namespace_id="example-namespace",
    location="us-central1")
example_service = gcp.servicedirectory.Service("example",
    service_id="example-service",
    namespace=example.id)
example_endpoint = gcp.servicedirectory.Endpoint("example",
    endpoint_id="example-endpoint",
    service=example_service.id,
    metadata={
        "stage": "prod",
        "region": "us-central1",
    },
    address="1.2.3.4",
    port=5353)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.ServiceDirectory.Namespace("example", new()
    {
        NamespaceId = "example-namespace",
        Location = "us-central1",
    });

    var exampleService = new Gcp.ServiceDirectory.Service("example", new()
    {
        ServiceId = "example-service",
        Namespace = example.Id,
    });

    var exampleEndpoint = new Gcp.ServiceDirectory.Endpoint("example", new()
    {
        EndpointId = "example-endpoint",
        Service = exampleService.Id,
        Metadata = 
        {
            { "stage", "prod" },
            { "region", "us-central1" },
        },
        Address = "1.2.3.4",
        Port = 5353,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := servicedirectory.NewNamespace(ctx, "example", &servicedirectory.NamespaceArgs{
			NamespaceId: pulumi.String("example-namespace"),
			Location:    pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		exampleService, err := servicedirectory.NewService(ctx, "example", &servicedirectory.ServiceArgs{
			ServiceId: pulumi.String("example-service"),
			Namespace: example.ID(),
		})
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewEndpoint(ctx, "example", &servicedirectory.EndpointArgs{
			EndpointId: pulumi.String("example-endpoint"),
			Service:    exampleService.ID(),
			Metadata: pulumi.StringMap{
				"stage":  pulumi.String("prod"),
				"region": pulumi.String("us-central1"),
			},
			Address: pulumi.String("1.2.3.4"),
			Port:    pulumi.Int(5353),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.Namespace;
import com.pulumi.gcp.servicedirectory.NamespaceArgs;
import com.pulumi.gcp.servicedirectory.Service;
import com.pulumi.gcp.servicedirectory.ServiceArgs;
import com.pulumi.gcp.servicedirectory.Endpoint;
import com.pulumi.gcp.servicedirectory.EndpointArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new Namespace("example", NamespaceArgs.builder()
            .namespaceId("example-namespace")
            .location("us-central1")
            .build());

        var exampleService = new Service("exampleService", ServiceArgs.builder()
            .serviceId("example-service")
            .namespace(example.id())
            .build());

        var exampleEndpoint = new Endpoint("exampleEndpoint", EndpointArgs.builder()
            .endpointId("example-endpoint")
            .service(exampleService.id())
            .metadata(Map.ofEntries(
                Map.entry("stage", "prod"),
                Map.entry("region", "us-central1")
            ))
            .address("1.2.3.4")
            .port(5353)
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:servicedirectory:Namespace
    properties:
      namespaceId: example-namespace
      location: us-central1
  exampleService:
    type: gcp:servicedirectory:Service
    name: example
    properties:
      serviceId: example-service
      namespace: ${example.id}
  exampleEndpoint:
    type: gcp:servicedirectory:Endpoint
    name: example
    properties:
      endpointId: example-endpoint
      service: ${exampleService.id}
      metadata:
        stage: prod
        region: us-central1
      address: 1.2.3.4
      port: 5353
```
<!--End PulumiCodeChooser -->
### Service Directory Endpoint With Network


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const example = new gcp.compute.Network("example", {name: "example-network"});
const exampleNamespace = new gcp.servicedirectory.Namespace("example", {
    namespaceId: "example-namespace",
    location: "us-central1",
});
const exampleService = new gcp.servicedirectory.Service("example", {
    serviceId: "example-service",
    namespace: exampleNamespace.id,
});
const exampleEndpoint = new gcp.servicedirectory.Endpoint("example", {
    endpointId: "example-endpoint",
    service: exampleService.id,
    metadata: {
        stage: "prod",
        region: "us-central1",
    },
    network: pulumi.all([project, example.name]).apply(([project, name]) => `projects/${project.number}/locations/global/networks/${name}`),
    address: "1.2.3.4",
    port: 5353,
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
example = gcp.compute.Network("example", name="example-network")
example_namespace = gcp.servicedirectory.Namespace("example",
    namespace_id="example-namespace",
    location="us-central1")
example_service = gcp.servicedirectory.Service("example",
    service_id="example-service",
    namespace=example_namespace.id)
example_endpoint = gcp.servicedirectory.Endpoint("example",
    endpoint_id="example-endpoint",
    service=example_service.id,
    metadata={
        "stage": "prod",
        "region": "us-central1",
    },
    network=example.name.apply(lambda name: f"projects/{project.number}/locations/global/networks/{name}"),
    address="1.2.3.4",
    port=5353)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var example = new Gcp.Compute.Network("example", new()
    {
        Name = "example-network",
    });

    var exampleNamespace = new Gcp.ServiceDirectory.Namespace("example", new()
    {
        NamespaceId = "example-namespace",
        Location = "us-central1",
    });

    var exampleService = new Gcp.ServiceDirectory.Service("example", new()
    {
        ServiceId = "example-service",
        Namespace = exampleNamespace.Id,
    });

    var exampleEndpoint = new Gcp.ServiceDirectory.Endpoint("example", new()
    {
        EndpointId = "example-endpoint",
        Service = exampleService.Id,
        Metadata = 
        {
            { "stage", "prod" },
            { "region", "us-central1" },
        },
        Network = Output.Tuple(project, example.Name).Apply(values =>
        {
            var project = values.Item1;
            var name = values.Item2;
            return $"projects/{project.Apply(getProjectResult => getProjectResult.Number)}/locations/global/networks/{name}";
        }),
        Address = "1.2.3.4",
        Port = 5353,
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		example, err := compute.NewNetwork(ctx, "example", &compute.NetworkArgs{
			Name: pulumi.String("example-network"),
		})
		if err != nil {
			return err
		}
		exampleNamespace, err := servicedirectory.NewNamespace(ctx, "example", &servicedirectory.NamespaceArgs{
			NamespaceId: pulumi.String("example-namespace"),
			Location:    pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		exampleService, err := servicedirectory.NewService(ctx, "example", &servicedirectory.ServiceArgs{
			ServiceId: pulumi.String("example-service"),
			Namespace: exampleNamespace.ID(),
		})
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewEndpoint(ctx, "example", &servicedirectory.EndpointArgs{
			EndpointId: pulumi.String("example-endpoint"),
			Service:    exampleService.ID(),
			Metadata: pulumi.StringMap{
				"stage":  pulumi.String("prod"),
				"region": pulumi.String("us-central1"),
			},
			Network: example.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("projects/%v/locations/global/networks/%v", project.Number, name), nil
			}).(pulumi.StringOutput),
			Address: pulumi.String("1.2.3.4"),
			Port:    pulumi.Int(5353),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.servicedirectory.Namespace;
import com.pulumi.gcp.servicedirectory.NamespaceArgs;
import com.pulumi.gcp.servicedirectory.Service;
import com.pulumi.gcp.servicedirectory.ServiceArgs;
import com.pulumi.gcp.servicedirectory.Endpoint;
import com.pulumi.gcp.servicedirectory.EndpointArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var example = new Network("example", NetworkArgs.builder()
            .name("example-network")
            .build());

        var exampleNamespace = new Namespace("exampleNamespace", NamespaceArgs.builder()
            .namespaceId("example-namespace")
            .location("us-central1")
            .build());

        var exampleService = new Service("exampleService", ServiceArgs.builder()
            .serviceId("example-service")
            .namespace(exampleNamespace.id())
            .build());

        var exampleEndpoint = new Endpoint("exampleEndpoint", EndpointArgs.builder()
            .endpointId("example-endpoint")
            .service(exampleService.id())
            .metadata(Map.ofEntries(
                Map.entry("stage", "prod"),
                Map.entry("region", "us-central1")
            ))
            .network(example.name().applyValue(name -> String.format("projects/%s/locations/global/networks/%s", project.applyValue(getProjectResult -> getProjectResult.number()),name)))
            .address("1.2.3.4")
            .port(5353)
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:compute:Network
    properties:
      name: example-network
  exampleNamespace:
    type: gcp:servicedirectory:Namespace
    name: example
    properties:
      namespaceId: example-namespace
      location: us-central1
  exampleService:
    type: gcp:servicedirectory:Service
    name: example
    properties:
      serviceId: example-service
      namespace: ${exampleNamespace.id}
  exampleEndpoint:
    type: gcp:servicedirectory:Endpoint
    name: example
    properties:
      endpointId: example-endpoint
      service: ${exampleService.id}
      metadata:
        stage: prod
        region: us-central1
      network: projects/${project.number}/locations/global/networks/${example.name}
      address: 1.2.3.4
      port: 5353
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Endpoint can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}}/endpoints/{{endpoint_id}}`

* `{{project}}/{{location}}/{{namespace_id}}/{{service_id}}/{{endpoint_id}}`

* `{{location}}/{{namespace_id}}/{{service_id}}/{{endpoint_id}}`

When using the `pulumi import` command, Endpoint can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:servicedirectory/endpoint:Endpoint default projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}}/endpoints/{{endpoint_id}}
```

```sh
$ pulumi import gcp:servicedirectory/endpoint:Endpoint default {{project}}/{{location}}/{{namespace_id}}/{{service_id}}/{{endpoint_id}}
```

```sh
$ pulumi import gcp:servicedirectory/endpoint:Endpoint default {{location}}/{{namespace_id}}/{{service_id}}/{{endpoint_id}}
```

7
addressB" &IPv4 or IPv6 address of the endpoint.
Ё

endpointId" sThe Resource ID must be 1-63 characters long, including digits,
lowercase letters or the hyphen character.


- - -
 
metadataB2" ЖMetadata for the endpoint. This data can be consumed
by service clients. The entire metadata dictionary may contain
up to 512 characters, spread across all key-value pairs.
Metadata that goes beyond any these limits will be rejected.
q
networkB" `The URL to the network, such as projects/PROJECT_NUMBER/locations/global/networks/NETWORK_NAME.
z
portB lPort that the endpoint is running on, must be in the
range of [0, 65535]. If unspecified, the default is 0.
M
service" >The resource name of the service that this endpoint provides.
"7
addressB" &IPv4 or IPv6 address of the endpoint.
"Ё

endpointId" sThe Resource ID must be 1-63 characters long, including digits,
lowercase letters or the hyphen character.


- - -
" 
metadataB2" ЖMetadata for the endpoint. This data can be consumed
by service clients. The entire metadata dictionary may contain
up to 512 characters, spread across all key-value pairs.
Metadata that goes beyond any these limits will be rejected.
"{
name" oThe resource name for the endpoint in the format
`projects/*/locations/*/namespaces/*/services/*/endpoints/*`.
"q
networkB" `The URL to the network, such as projects/PROJECT_NUMBER/locations/global/networks/NETWORK_NAME.
"z
portB lPort that the endpoint is running on, must be in the
range of [0, 65535]. If unspecified, the default is 0.
"M
service" >The resource name of the service that this endpoint provides.
*╬.
G
servicedirectory	Namespace(gcp:servicedirectory/namespace:NamespaceњA container for `services`. Namespaces allow administrators to group services
together and define permissions for a collection of services.

To get more information about Namespace, see:

* [API documentation](https://cloud.google.com/service-directory/docs/reference/rest/v1beta1/projects.locations.namespaces)
* How-to Guides
    * [Configuring a namespace](https://cloud.google.com/service-directory/docs/configuring-service-directory#configuring_a_namespace)

## Example Usage

### Service Directory Namespace Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.servicedirectory.Namespace("example", {
    namespaceId: "example-namespace",
    location: "us-central1",
    labels: {
        key: "value",
        foo: "bar",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.servicedirectory.Namespace("example",
    namespace_id="example-namespace",
    location="us-central1",
    labels={
        "key": "value",
        "foo": "bar",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.ServiceDirectory.Namespace("example", new()
    {
        NamespaceId = "example-namespace",
        Location = "us-central1",
        Labels = 
        {
            { "key", "value" },
            { "foo", "bar" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespace(ctx, "example", &servicedirectory.NamespaceArgs{
			NamespaceId: pulumi.String("example-namespace"),
			Location:    pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"key": pulumi.String("value"),
				"foo": pulumi.String("bar"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.Namespace;
import com.pulumi.gcp.servicedirectory.NamespaceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new Namespace("example", NamespaceArgs.builder()
            .namespaceId("example-namespace")
            .location("us-central1")
            .labels(Map.ofEntries(
                Map.entry("key", "value"),
                Map.entry("foo", "bar")
            ))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:servicedirectory:Namespace
    properties:
      namespaceId: example-namespace
      location: us-central1
      labels:
        key: value
        foo: bar
```
<!--End PulumiCodeChooser -->

## Import

Namespace can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}`

* `{{project}}/{{location}}/{{namespace_id}}`

* `{{location}}/{{namespace_id}}`

When using the `pulumi import` command, Namespace can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:servicedirectory/namespace:Namespace default projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}
```

```sh
$ pulumi import gcp:servicedirectory/namespace:Namespace default {{project}}/{{location}}/{{namespace_id}}
```

```sh
$ pulumi import gcp:servicedirectory/namespace:Namespace default {{location}}/{{namespace_id}}
```

і
labelsB2" эResource labels associated with this Namespace. No more than 64 user
labels can be associated with a given resource. Label keys and values can
be no longer than 63 characters.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
ў
location" ЄThe location for the Namespace.
A full list of valid locations can be found by running
`gcloud beta service-directory locations list`.
є
namespaceId" sThe Resource ID must be 1-63 characters long, including digits,
lowercase letters or the hyphen character.


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"д
effectiveLabels2" їAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"і
labelsB2" эResource labels associated with this Namespace. No more than 64 user
labels can be associated with a given resource. Label keys and values can
be no longer than 63 characters.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"ў
location" ЄThe location for the Namespace.
A full list of valid locations can be found by running
`gcloud beta service-directory locations list`.
"e
name" YThe resource name for the namespace
in the format `projects/*/locations/*/namespaces/*`.
"є
namespaceId" sThe Resource ID must be 1-63 characters long, including digits,
lowercase letters or the hyphen character.


- - -
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Ѓ
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
*ЦК
e
servicedirectoryNamespaceIamBinding<gcp:servicedirectory/namespaceIamBinding:NamespaceIamBinding├ФThree different resources help you manage your IAM policy for Service Directory Namespace. Each of these resources serves a different use case:

* `gcp.servicedirectory.NamespaceIamPolicy`: Authoritative. Sets the IAM policy for the namespace and replaces any existing policy already attached.
* `gcp.servicedirectory.NamespaceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the namespace are preserved.
* `gcp.servicedirectory.NamespaceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the namespace are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.NamespaceIamPolicy`: Retrieves the IAM policy for the namespace

> **Note:** `gcp.servicedirectory.NamespaceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.NamespaceIamBinding` and `gcp.servicedirectory.NamespaceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.NamespaceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.NamespaceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_namespace\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.NamespaceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.NamespaceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.NamespaceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewNamespaceIamPolicy(ctx, "policy", &servicedirectory.NamespaceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicy;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new NamespaceIamPolicy("policy", NamespaceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:NamespaceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.NamespaceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.NamespaceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.NamespaceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamBinding(ctx, "binding", &servicedirectory.NamespaceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamBinding;
import com.pulumi.gcp.servicedirectory.NamespaceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new NamespaceIamBinding("binding", NamespaceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:NamespaceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.NamespaceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.NamespaceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.NamespaceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamMember(ctx, "member", &servicedirectory.NamespaceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamMember;
import com.pulumi.gcp.servicedirectory.NamespaceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new NamespaceIamMember("member", NamespaceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:NamespaceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Service Directory Namespace
Three different resources help you manage your IAM policy for Service Directory Namespace. Each of these resources serves a different use case:

* `gcp.servicedirectory.NamespaceIamPolicy`: Authoritative. Sets the IAM policy for the namespace and replaces any existing policy already attached.
* `gcp.servicedirectory.NamespaceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the namespace are preserved.
* `gcp.servicedirectory.NamespaceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the namespace are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.NamespaceIamPolicy`: Retrieves the IAM policy for the namespace

> **Note:** `gcp.servicedirectory.NamespaceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.NamespaceIamBinding` and `gcp.servicedirectory.NamespaceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.NamespaceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.NamespaceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_namespace\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.NamespaceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.NamespaceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.NamespaceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewNamespaceIamPolicy(ctx, "policy", &servicedirectory.NamespaceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicy;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new NamespaceIamPolicy("policy", NamespaceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:NamespaceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.NamespaceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.NamespaceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.NamespaceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamBinding(ctx, "binding", &servicedirectory.NamespaceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamBinding;
import com.pulumi.gcp.servicedirectory.NamespaceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new NamespaceIamBinding("binding", NamespaceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:NamespaceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.NamespaceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.NamespaceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.NamespaceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamMember(ctx, "member", &servicedirectory.NamespaceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamMember;
import com.pulumi.gcp.servicedirectory.NamespaceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new NamespaceIamMember("member", NamespaceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:NamespaceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}

* {{project}}/{{location}}/{{namespace_id}}

* {{location}}/{{namespace_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Service Directory namespace IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:servicedirectory/namespaceIamBinding:NamespaceIamBinding editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:servicedirectory/namespaceIamBinding:NamespaceIamBinding editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:servicedirectory/namespaceIamBinding:NamespaceIamBinding editor projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

Ќ
	conditionЅBє:Ѓ
ђ
servicedirectoryNamespaceIamBindingConditionNgcp:servicedirectory/NamespaceIamBindingCondition:NamespaceIamBindingConditionо	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
I
nameB" ;Used to find the parent resource to bind the IAM policy to
р
role" нThe role that should be applied. Only one
`gcp.servicedirectory.NamespaceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"Ќ
	conditionЅBє:Ѓ
ђ
servicedirectoryNamespaceIamBindingConditionNgcp:servicedirectory/NamespaceIamBindingCondition:NamespaceIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"о	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"G
name" ;Used to find the parent resource to bind the IAM policy to
"р
role" нThe role that should be applied. Only one
`gcp.servicedirectory.NamespaceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*їК
b
servicedirectoryNamespaceIamMember:gcp:servicedirectory/namespaceIamMember:NamespaceIamMemberйФThree different resources help you manage your IAM policy for Service Directory Namespace. Each of these resources serves a different use case:

* `gcp.servicedirectory.NamespaceIamPolicy`: Authoritative. Sets the IAM policy for the namespace and replaces any existing policy already attached.
* `gcp.servicedirectory.NamespaceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the namespace are preserved.
* `gcp.servicedirectory.NamespaceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the namespace are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.NamespaceIamPolicy`: Retrieves the IAM policy for the namespace

> **Note:** `gcp.servicedirectory.NamespaceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.NamespaceIamBinding` and `gcp.servicedirectory.NamespaceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.NamespaceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.NamespaceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_namespace\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.NamespaceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.NamespaceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.NamespaceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewNamespaceIamPolicy(ctx, "policy", &servicedirectory.NamespaceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicy;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new NamespaceIamPolicy("policy", NamespaceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:NamespaceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.NamespaceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.NamespaceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.NamespaceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamBinding(ctx, "binding", &servicedirectory.NamespaceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamBinding;
import com.pulumi.gcp.servicedirectory.NamespaceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new NamespaceIamBinding("binding", NamespaceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:NamespaceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.NamespaceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.NamespaceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.NamespaceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamMember(ctx, "member", &servicedirectory.NamespaceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamMember;
import com.pulumi.gcp.servicedirectory.NamespaceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new NamespaceIamMember("member", NamespaceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:NamespaceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Service Directory Namespace
Three different resources help you manage your IAM policy for Service Directory Namespace. Each of these resources serves a different use case:

* `gcp.servicedirectory.NamespaceIamPolicy`: Authoritative. Sets the IAM policy for the namespace and replaces any existing policy already attached.
* `gcp.servicedirectory.NamespaceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the namespace are preserved.
* `gcp.servicedirectory.NamespaceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the namespace are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.NamespaceIamPolicy`: Retrieves the IAM policy for the namespace

> **Note:** `gcp.servicedirectory.NamespaceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.NamespaceIamBinding` and `gcp.servicedirectory.NamespaceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.NamespaceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.NamespaceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_namespace\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.NamespaceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.NamespaceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.NamespaceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewNamespaceIamPolicy(ctx, "policy", &servicedirectory.NamespaceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicy;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new NamespaceIamPolicy("policy", NamespaceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:NamespaceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.NamespaceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.NamespaceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.NamespaceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamBinding(ctx, "binding", &servicedirectory.NamespaceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamBinding;
import com.pulumi.gcp.servicedirectory.NamespaceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new NamespaceIamBinding("binding", NamespaceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:NamespaceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.NamespaceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.NamespaceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.NamespaceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamMember(ctx, "member", &servicedirectory.NamespaceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamMember;
import com.pulumi.gcp.servicedirectory.NamespaceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new NamespaceIamMember("member", NamespaceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:NamespaceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}

* {{project}}/{{location}}/{{namespace_id}}

* {{location}}/{{namespace_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Service Directory namespace IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:servicedirectory/namespaceIamMember:NamespaceIamMember editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:servicedirectory/namespaceIamMember:NamespaceIamMember editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:servicedirectory/namespaceIamMember:NamespaceIamMember editor projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

њ
	conditionёBЂ:
}
servicedirectoryNamespaceIamMemberConditionLgcp:servicedirectory/NamespaceIamMemberCondition:NamespaceIamMemberConditionМ	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
I
nameB" ;Used to find the parent resource to bind the IAM policy to
р
role" нThe role that should be applied. Only one
`gcp.servicedirectory.NamespaceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"њ
	conditionёBЂ:
}
servicedirectoryNamespaceIamMemberConditionLgcp:servicedirectory/NamespaceIamMemberCondition:NamespaceIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"М	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"G
name" ;Used to find the parent resource to bind the IAM policy to
"р
role" нThe role that should be applied. Only one
`gcp.servicedirectory.NamespaceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*░»
b
servicedirectoryNamespaceIamPolicy:gcp:servicedirectory/namespaceIamPolicy:NamespaceIamPolicyйФThree different resources help you manage your IAM policy for Service Directory Namespace. Each of these resources serves a different use case:

* `gcp.servicedirectory.NamespaceIamPolicy`: Authoritative. Sets the IAM policy for the namespace and replaces any existing policy already attached.
* `gcp.servicedirectory.NamespaceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the namespace are preserved.
* `gcp.servicedirectory.NamespaceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the namespace are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.NamespaceIamPolicy`: Retrieves the IAM policy for the namespace

> **Note:** `gcp.servicedirectory.NamespaceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.NamespaceIamBinding` and `gcp.servicedirectory.NamespaceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.NamespaceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.NamespaceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_namespace\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.NamespaceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.NamespaceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.NamespaceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewNamespaceIamPolicy(ctx, "policy", &servicedirectory.NamespaceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicy;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new NamespaceIamPolicy("policy", NamespaceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:NamespaceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.NamespaceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.NamespaceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.NamespaceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamBinding(ctx, "binding", &servicedirectory.NamespaceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamBinding;
import com.pulumi.gcp.servicedirectory.NamespaceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new NamespaceIamBinding("binding", NamespaceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:NamespaceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.NamespaceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.NamespaceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.NamespaceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamMember(ctx, "member", &servicedirectory.NamespaceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamMember;
import com.pulumi.gcp.servicedirectory.NamespaceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new NamespaceIamMember("member", NamespaceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:NamespaceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Service Directory Namespace
Three different resources help you manage your IAM policy for Service Directory Namespace. Each of these resources serves a different use case:

* `gcp.servicedirectory.NamespaceIamPolicy`: Authoritative. Sets the IAM policy for the namespace and replaces any existing policy already attached.
* `gcp.servicedirectory.NamespaceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the namespace are preserved.
* `gcp.servicedirectory.NamespaceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the namespace are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.NamespaceIamPolicy`: Retrieves the IAM policy for the namespace

> **Note:** `gcp.servicedirectory.NamespaceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.NamespaceIamBinding` and `gcp.servicedirectory.NamespaceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.NamespaceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.NamespaceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_namespace\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.NamespaceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.NamespaceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.NamespaceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewNamespaceIamPolicy(ctx, "policy", &servicedirectory.NamespaceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicy;
import com.pulumi.gcp.servicedirectory.NamespaceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new NamespaceIamPolicy("policy", NamespaceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:NamespaceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.NamespaceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.NamespaceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.NamespaceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamBinding(ctx, "binding", &servicedirectory.NamespaceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamBinding;
import com.pulumi.gcp.servicedirectory.NamespaceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new NamespaceIamBinding("binding", NamespaceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:NamespaceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.NamespaceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.NamespaceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.NamespaceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.NamespaceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewNamespaceIamMember(ctx, "member", &servicedirectory.NamespaceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.NamespaceIamMember;
import com.pulumi.gcp.servicedirectory.NamespaceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new NamespaceIamMember("member", NamespaceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:NamespaceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}

* {{project}}/{{location}}/{{namespace_id}}

* {{location}}/{{namespace_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Service Directory namespace IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:servicedirectory/namespaceIamPolicy:NamespaceIamPolicy editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:servicedirectory/namespaceIamPolicy:NamespaceIamPolicy editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:servicedirectory/namespaceIamPolicy:NamespaceIamPolicy editor projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

I
nameB" ;Used to find the parent resource to bind the IAM policy to
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"3
etag" '(Computed) The etag of the IAM policy.
"G
name" ;Used to find the parent resource to bind the IAM policy to
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
*Њ0
A
servicedirectoryService$gcp:servicedirectory/service:ServiceЦ'An individual service. A service contains a name and optional metadata.

To get more information about Service, see:

* [API documentation](https://cloud.google.com/service-directory/docs/reference/rest/v1beta1/projects.locations.namespaces.services)
* How-to Guides
    * [Configuring a service](https://cloud.google.com/service-directory/docs/configuring-service-directory#configuring_a_service)

## Example Usage

### Service Directory Service Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.servicedirectory.Namespace("example", {
    namespaceId: "example-namespace",
    location: "us-central1",
});
const exampleService = new gcp.servicedirectory.Service("example", {
    serviceId: "example-service",
    namespace: example.id,
    metadata: {
        stage: "prod",
        region: "us-central1",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.servicedirectory.Namespace("example",
    namespace_id="example-namespace",
    location="us-central1")
example_service = gcp.servicedirectory.Service("example",
    service_id="example-service",
    namespace=example.id,
    metadata={
        "stage": "prod",
        "region": "us-central1",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.ServiceDirectory.Namespace("example", new()
    {
        NamespaceId = "example-namespace",
        Location = "us-central1",
    });

    var exampleService = new Gcp.ServiceDirectory.Service("example", new()
    {
        ServiceId = "example-service",
        Namespace = example.Id,
        Metadata = 
        {
            { "stage", "prod" },
            { "region", "us-central1" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := servicedirectory.NewNamespace(ctx, "example", &servicedirectory.NamespaceArgs{
			NamespaceId: pulumi.String("example-namespace"),
			Location:    pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewService(ctx, "example", &servicedirectory.ServiceArgs{
			ServiceId: pulumi.String("example-service"),
			Namespace: example.ID(),
			Metadata: pulumi.StringMap{
				"stage":  pulumi.String("prod"),
				"region": pulumi.String("us-central1"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.Namespace;
import com.pulumi.gcp.servicedirectory.NamespaceArgs;
import com.pulumi.gcp.servicedirectory.Service;
import com.pulumi.gcp.servicedirectory.ServiceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new Namespace("example", NamespaceArgs.builder()
            .namespaceId("example-namespace")
            .location("us-central1")
            .build());

        var exampleService = new Service("exampleService", ServiceArgs.builder()
            .serviceId("example-service")
            .namespace(example.id())
            .metadata(Map.ofEntries(
                Map.entry("stage", "prod"),
                Map.entry("region", "us-central1")
            ))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:servicedirectory:Namespace
    properties:
      namespaceId: example-namespace
      location: us-central1
  exampleService:
    type: gcp:servicedirectory:Service
    name: example
    properties:
      serviceId: example-service
      namespace: ${example.id}
      metadata:
        stage: prod
        region: us-central1
```
<!--End PulumiCodeChooser -->

## Import

Service can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}}`

* `{{project}}/{{location}}/{{namespace_id}}/{{service_id}}`

* `{{location}}/{{namespace_id}}/{{service_id}}`

When using the `pulumi import` command, Service can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:servicedirectory/service:Service default projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}}
```

```sh
$ pulumi import gcp:servicedirectory/service:Service default {{project}}/{{location}}/{{namespace_id}}/{{service_id}}
```

```sh
$ pulumi import gcp:servicedirectory/service:Service default {{location}}/{{namespace_id}}/{{service_id}}
```

 
metadataB2" ЖMetadata for the service. This data can be consumed
by service clients. The entire metadata dictionary may contain
up to 2000 characters, spread across all key-value pairs.
Metadata that goes beyond any these limits will be rejected.
Q
	namespace" @The resource name of the namespace this service will belong to.
ё
	serviceId" sThe Resource ID must be 1-63 characters long, including digits,
lowercase letters or the hyphen character.


- - -
" 
metadataB2" ЖMetadata for the service. This data can be consumed
by service clients. The entire metadata dictionary may contain
up to 2000 characters, spread across all key-value pairs.
Metadata that goes beyond any these limits will be rejected.
"n
name" bThe resource name for the service in the
format `projects/*/locations/*/namespaces/*/services/*`.
"Q
	namespace" @The resource name of the namespace this service will belong to.
"ё
	serviceId" sThe Resource ID must be 1-63 characters long, including digits,
lowercase letters or the hyphen character.


- - -
*╗к
_
servicedirectoryServiceIamBinding8gcp:servicedirectory/serviceIamBinding:ServiceIamBindingшфThree different resources help you manage your IAM policy for Service Directory Service. Each of these resources serves a different use case:

* `gcp.servicedirectory.ServiceIamPolicy`: Authoritative. Sets the IAM policy for the service and replaces any existing policy already attached.
* `gcp.servicedirectory.ServiceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service are preserved.
* `gcp.servicedirectory.ServiceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the service are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.ServiceIamPolicy`: Retrieves the IAM policy for the service

> **Note:** `gcp.servicedirectory.ServiceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.ServiceIamBinding` and `gcp.servicedirectory.ServiceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.ServiceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.ServiceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_service\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.ServiceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.ServiceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.ServiceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewServiceIamPolicy(ctx, "policy", &servicedirectory.ServiceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicy;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ServiceIamPolicy("policy", ServiceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:ServiceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.ServiceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.ServiceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.ServiceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamBinding(ctx, "binding", &servicedirectory.ServiceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamBinding;
import com.pulumi.gcp.servicedirectory.ServiceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ServiceIamBinding("binding", ServiceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:ServiceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.ServiceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.ServiceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.ServiceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamMember(ctx, "member", &servicedirectory.ServiceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamMember;
import com.pulumi.gcp.servicedirectory.ServiceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ServiceIamMember("member", ServiceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:ServiceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Service Directory Service
Three different resources help you manage your IAM policy for Service Directory Service. Each of these resources serves a different use case:

* `gcp.servicedirectory.ServiceIamPolicy`: Authoritative. Sets the IAM policy for the service and replaces any existing policy already attached.
* `gcp.servicedirectory.ServiceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service are preserved.
* `gcp.servicedirectory.ServiceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the service are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.ServiceIamPolicy`: Retrieves the IAM policy for the service

> **Note:** `gcp.servicedirectory.ServiceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.ServiceIamBinding` and `gcp.servicedirectory.ServiceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.ServiceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.ServiceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_service\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.ServiceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.ServiceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.ServiceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewServiceIamPolicy(ctx, "policy", &servicedirectory.ServiceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicy;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ServiceIamPolicy("policy", ServiceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:ServiceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.ServiceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.ServiceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.ServiceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamBinding(ctx, "binding", &servicedirectory.ServiceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamBinding;
import com.pulumi.gcp.servicedirectory.ServiceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ServiceIamBinding("binding", ServiceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:ServiceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.ServiceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.ServiceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.ServiceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamMember(ctx, "member", &servicedirectory.ServiceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamMember;
import com.pulumi.gcp.servicedirectory.ServiceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ServiceIamMember("member", ServiceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:ServiceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}}

* {{project}}/{{location}}/{{namespace_id}}/{{service_id}}

* {{location}}/{{namespace_id}}/{{service_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Service Directory service IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:servicedirectory/serviceIamBinding:ServiceIamBinding editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:servicedirectory/serviceIamBinding:ServiceIamBinding editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:servicedirectory/serviceIamBinding:ServiceIamBinding editor projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

ј
	conditionђB~:|
z
servicedirectoryServiceIamBindingConditionJgcp:servicedirectory/ServiceIamBindingCondition:ServiceIamBindingConditionо	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
I
nameB" ;Used to find the parent resource to bind the IAM policy to
▀
role" мThe role that should be applied. Only one
`gcp.servicedirectory.ServiceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"ј
	conditionђB~:|
z
servicedirectoryServiceIamBindingConditionJgcp:servicedirectory/ServiceIamBindingCondition:ServiceIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"о	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"G
name" ;Used to find the parent resource to bind the IAM policy to
"▀
role" мThe role that should be applied. Only one
`gcp.servicedirectory.ServiceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*цк
\
servicedirectoryServiceIamMember6gcp:servicedirectory/serviceIamMember:ServiceIamMember№фThree different resources help you manage your IAM policy for Service Directory Service. Each of these resources serves a different use case:

* `gcp.servicedirectory.ServiceIamPolicy`: Authoritative. Sets the IAM policy for the service and replaces any existing policy already attached.
* `gcp.servicedirectory.ServiceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service are preserved.
* `gcp.servicedirectory.ServiceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the service are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.ServiceIamPolicy`: Retrieves the IAM policy for the service

> **Note:** `gcp.servicedirectory.ServiceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.ServiceIamBinding` and `gcp.servicedirectory.ServiceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.ServiceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.ServiceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_service\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.ServiceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.ServiceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.ServiceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewServiceIamPolicy(ctx, "policy", &servicedirectory.ServiceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicy;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ServiceIamPolicy("policy", ServiceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:ServiceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.ServiceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.ServiceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.ServiceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamBinding(ctx, "binding", &servicedirectory.ServiceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamBinding;
import com.pulumi.gcp.servicedirectory.ServiceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ServiceIamBinding("binding", ServiceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:ServiceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.ServiceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.ServiceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.ServiceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamMember(ctx, "member", &servicedirectory.ServiceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamMember;
import com.pulumi.gcp.servicedirectory.ServiceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ServiceIamMember("member", ServiceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:ServiceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Service Directory Service
Three different resources help you manage your IAM policy for Service Directory Service. Each of these resources serves a different use case:

* `gcp.servicedirectory.ServiceIamPolicy`: Authoritative. Sets the IAM policy for the service and replaces any existing policy already attached.
* `gcp.servicedirectory.ServiceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service are preserved.
* `gcp.servicedirectory.ServiceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the service are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.ServiceIamPolicy`: Retrieves the IAM policy for the service

> **Note:** `gcp.servicedirectory.ServiceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.ServiceIamBinding` and `gcp.servicedirectory.ServiceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.ServiceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.ServiceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_service\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.ServiceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.ServiceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.ServiceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewServiceIamPolicy(ctx, "policy", &servicedirectory.ServiceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicy;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ServiceIamPolicy("policy", ServiceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:ServiceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.ServiceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.ServiceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.ServiceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamBinding(ctx, "binding", &servicedirectory.ServiceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamBinding;
import com.pulumi.gcp.servicedirectory.ServiceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ServiceIamBinding("binding", ServiceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:ServiceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.ServiceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.ServiceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.ServiceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamMember(ctx, "member", &servicedirectory.ServiceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamMember;
import com.pulumi.gcp.servicedirectory.ServiceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ServiceIamMember("member", ServiceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:ServiceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}}

* {{project}}/{{location}}/{{namespace_id}}/{{service_id}}

* {{location}}/{{namespace_id}}/{{service_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Service Directory service IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:servicedirectory/serviceIamMember:ServiceIamMember editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:servicedirectory/serviceIamMember:ServiceIamMember editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:servicedirectory/serviceIamMember:ServiceIamMember editor projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

і
	condition}B{:y
w
servicedirectoryServiceIamMemberConditionHgcp:servicedirectory/ServiceIamMemberCondition:ServiceIamMemberConditionМ	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
I
nameB" ;Used to find the parent resource to bind the IAM policy to
▀
role" мThe role that should be applied. Only one
`gcp.servicedirectory.ServiceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"і
	condition}B{:y
w
servicedirectoryServiceIamMemberConditionHgcp:servicedirectory/ServiceIamMemberCondition:ServiceIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"М	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"G
name" ;Used to find the parent resource to bind the IAM policy to
"▀
role" мThe role that should be applied. Only one
`gcp.servicedirectory.ServiceIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*▄«
\
servicedirectoryServiceIamPolicy6gcp:servicedirectory/serviceIamPolicy:ServiceIamPolicy№фThree different resources help you manage your IAM policy for Service Directory Service. Each of these resources serves a different use case:

* `gcp.servicedirectory.ServiceIamPolicy`: Authoritative. Sets the IAM policy for the service and replaces any existing policy already attached.
* `gcp.servicedirectory.ServiceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service are preserved.
* `gcp.servicedirectory.ServiceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the service are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.ServiceIamPolicy`: Retrieves the IAM policy for the service

> **Note:** `gcp.servicedirectory.ServiceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.ServiceIamBinding` and `gcp.servicedirectory.ServiceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.ServiceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.ServiceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_service\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.ServiceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.ServiceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.ServiceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewServiceIamPolicy(ctx, "policy", &servicedirectory.ServiceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicy;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ServiceIamPolicy("policy", ServiceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:ServiceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.ServiceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.ServiceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.ServiceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamBinding(ctx, "binding", &servicedirectory.ServiceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamBinding;
import com.pulumi.gcp.servicedirectory.ServiceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ServiceIamBinding("binding", ServiceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:ServiceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.ServiceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.ServiceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.ServiceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamMember(ctx, "member", &servicedirectory.ServiceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamMember;
import com.pulumi.gcp.servicedirectory.ServiceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ServiceIamMember("member", ServiceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:ServiceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Service Directory Service
Three different resources help you manage your IAM policy for Service Directory Service. Each of these resources serves a different use case:

* `gcp.servicedirectory.ServiceIamPolicy`: Authoritative. Sets the IAM policy for the service and replaces any existing policy already attached.
* `gcp.servicedirectory.ServiceIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service are preserved.
* `gcp.servicedirectory.ServiceIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the service are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.servicedirectory.ServiceIamPolicy`: Retrieves the IAM policy for the service

> **Note:** `gcp.servicedirectory.ServiceIamPolicy` **cannot** be used in conjunction with `gcp.servicedirectory.ServiceIamBinding` and `gcp.servicedirectory.ServiceIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.servicedirectory.ServiceIamBinding` resources **can be** used in conjunction with `gcp.servicedirectory.ServiceIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_directory\_service\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.servicedirectory.ServiceIamPolicy("policy", {
    name: example.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.servicedirectory.ServiceIamPolicy("policy",
    name=example["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ServiceDirectory.ServiceIamPolicy("policy", new()
    {
        Name = example.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = servicedirectory.NewServiceIamPolicy(ctx, "policy", &servicedirectory.ServiceIamPolicyArgs{
			Name:       pulumi.Any(example.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicy;
import com.pulumi.gcp.servicedirectory.ServiceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ServiceIamPolicy("policy", ServiceIamPolicyArgs.builder()
            .name(example.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:servicedirectory:ServiceIamPolicy
    properties:
      name: ${example.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.servicedirectory.ServiceIamBinding("binding", {
    name: example.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.servicedirectory.ServiceIamBinding("binding",
    name=example["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ServiceDirectory.ServiceIamBinding("binding", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamBinding(ctx, "binding", &servicedirectory.ServiceIamBindingArgs{
			Name: pulumi.Any(example.Name),
			Role: pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamBinding;
import com.pulumi.gcp.servicedirectory.ServiceIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ServiceIamBinding("binding", ServiceIamBindingArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:servicedirectory:ServiceIamBinding
    properties:
      name: ${example.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.servicedirectory.ServiceIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.servicedirectory.ServiceIamMember("member", {
    name: example.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.servicedirectory.ServiceIamMember("member",
    name=example["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ServiceDirectory.ServiceIamMember("member", new()
    {
        Name = example.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicedirectory.NewServiceIamMember(ctx, "member", &servicedirectory.ServiceIamMemberArgs{
			Name:   pulumi.Any(example.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicedirectory.ServiceIamMember;
import com.pulumi.gcp.servicedirectory.ServiceIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ServiceIamMember("member", ServiceIamMemberArgs.builder()
            .name(example.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:servicedirectory:ServiceIamMember
    properties:
      name: ${example.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}}

* {{project}}/{{location}}/{{namespace_id}}/{{service_id}}

* {{location}}/{{namespace_id}}/{{service_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Service Directory service IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:servicedirectory/serviceIamPolicy:ServiceIamPolicy editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:servicedirectory/serviceIamPolicy:ServiceIamPolicy editor "projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:servicedirectory/serviceIamPolicy:ServiceIamPolicy editor projects/{{project}}/locations/{{location}}/namespaces/{{namespace_id}}/services/{{service_id}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

I
nameB" ;Used to find the parent resource to bind the IAM policy to
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"3
etag" '(Computed) The etag of the IAM policy.
"G
name" ;Used to find the parent resource to bind the IAM policy to
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
*ИP
L
servicenetworking
Connection+gcp:servicenetworking/connection:Connection╝BManages a private VPC connection with a GCP service provider. For more information see
[the official documentation](https://cloud.google.com/vpc/docs/configure-private-services-access#creating-connection)
and
[API](https://cloud.google.com/service-infrastructure/docs/service-networking/reference/rest/v1/services.connections).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

// Create a VPC network
const peeringNetwork = new gcp.compute.Network("peering_network", {name: "peering-network"});
// Create an IP address
const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
    name: "private-ip-alloc",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: peeringNetwork.id,
});
// Create a private connection
const _default = new gcp.servicenetworking.Connection("default", {
    network: peeringNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [privateIpAlloc.name],
});
// (Optional) Import or export custom routes
const peeringRoutes = new gcp.compute.NetworkPeeringRoutesConfig("peering_routes", {
    peering: _default.peering,
    network: peeringNetwork.name,
    importCustomRoutes: true,
    exportCustomRoutes: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

# Create a VPC network
peering_network = gcp.compute.Network("peering_network", name="peering-network")
# Create an IP address
private_ip_alloc = gcp.compute.GlobalAddress("private_ip_alloc",
    name="private-ip-alloc",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=peering_network.id)
# Create a private connection
default = gcp.servicenetworking.Connection("default",
    network=peering_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[private_ip_alloc.name])
# (Optional) Import or export custom routes
peering_routes = gcp.compute.NetworkPeeringRoutesConfig("peering_routes",
    peering=default.peering,
    network=peering_network.name,
    import_custom_routes=True,
    export_custom_routes=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    // Create a VPC network
    var peeringNetwork = new Gcp.Compute.Network("peering_network", new()
    {
        Name = "peering-network",
    });

    // Create an IP address
    var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    {
        Name = "private-ip-alloc",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = peeringNetwork.Id,
    });

    // Create a private connection
    var @default = new Gcp.ServiceNetworking.Connection("default", new()
    {
        Network = peeringNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            privateIpAlloc.Name,
        },
    });

    // (Optional) Import or export custom routes
    var peeringRoutes = new Gcp.Compute.NetworkPeeringRoutesConfig("peering_routes", new()
    {
        Peering = @default.Peering,
        Network = peeringNetwork.Name,
        ImportCustomRoutes = true,
        ExportCustomRoutes = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// Create a VPC network
		peeringNetwork, err := compute.NewNetwork(ctx, "peering_network", &compute.NetworkArgs{
			Name: pulumi.String("peering-network"),
		})
		if err != nil {
			return err
		}
		// Create an IP address
		privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
			Name:         pulumi.String("private-ip-alloc"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      peeringNetwork.ID(),
		})
		if err != nil {
			return err
		}
		// Create a private connection
		_, err = servicenetworking.NewConnection(ctx, "default", &servicenetworking.ConnectionArgs{
			Network: peeringNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				privateIpAlloc.Name,
			},
		})
		if err != nil {
			return err
		}
		// (Optional) Import or export custom routes
		_, err = compute.NewNetworkPeeringRoutesConfig(ctx, "peering_routes", &compute.NetworkPeeringRoutesConfigArgs{
			Peering:            _default.Peering,
			Network:            peeringNetwork.Name,
			ImportCustomRoutes: pulumi.Bool(true),
			ExportCustomRoutes: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.compute.NetworkPeeringRoutesConfig;
import com.pulumi.gcp.compute.NetworkPeeringRoutesConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        // Create a VPC network
        var peeringNetwork = new Network("peeringNetwork", NetworkArgs.builder()
            .name("peering-network")
            .build());

        // Create an IP address
        var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
            .name("private-ip-alloc")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(peeringNetwork.id())
            .build());

        // Create a private connection
        var default_ = new Connection("default", ConnectionArgs.builder()
            .network(peeringNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(privateIpAlloc.name())
            .build());

        // (Optional) Import or export custom routes
        var peeringRoutes = new NetworkPeeringRoutesConfig("peeringRoutes", NetworkPeeringRoutesConfigArgs.builder()
            .peering(default_.peering())
            .network(peeringNetwork.name())
            .importCustomRoutes(true)
            .exportCustomRoutes(true)
            .build());

    }
}
```
```yaml
resources:
  # Create a VPC network
  peeringNetwork:
    type: gcp:compute:Network
    name: peering_network
    properties:
      name: peering-network
  # Create an IP address
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: private-ip-alloc
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${peeringNetwork.id}
  # Create a private connection
  default:
    type: gcp:servicenetworking:Connection
    properties:
      network: ${peeringNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${privateIpAlloc.name}
  # (Optional) Import or export custom routes
  peeringRoutes:
    type: gcp:compute:NetworkPeeringRoutesConfig
    name: peering_routes
    properties:
      peering: ${default.peering}
      network: ${peeringNetwork.name}
      importCustomRoutes: true
      exportCustomRoutes: true
```
<!--End PulumiCodeChooser -->

## Import

ServiceNetworkingConnection can be imported using any of these accepted formats

* `{{peering-network}}:{{service}}`

* `projects/{{project}}/global/networks/{{peering-network}}:{{service}}`

When using the `pulumi import` command, NAME_HERE can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:servicenetworking/connection:Connection default {{peering-network}}:{{service}}
```

```sh
$ pulumi import gcp:servicenetworking/connection:Connection default /projects/{{project}}/global/networks/{{peering-network}}:{{service}}
```


deletionPolicyB" W
network" HName of VPC network connected with service producers using VPC peering.
Љ
reservedPeeringRanges*" ыNamed IP address range(s) of PEERING type reserved for
this service provider. Note that invoking this method with a different range when connection
is already established will not reallocate already provisioned service producer subnetworks.
м
service" ┬Provider peering service that is managing peering connectivity for a
service provider organization. For Google services that support this functionality it is
'servicenetworking.googleapis.com'.
Й
updateOnCreationFailB
 ЪWhen set to true, enforce an update of the reserved peering ranges on the existing service networking connection in case of a new connection creation failure.
"
deletionPolicyB" "W
network" HName of VPC network connected with service producers using VPC peering.
"s
peering" d(Computed) The name of the VPC Network Peering connection that was created by the service producer.
"Љ
reservedPeeringRanges*" ыNamed IP address range(s) of PEERING type reserved for
this service provider. Note that invoking this method with a different range when connection
is already established will not reallocate already provisioned service producer subnetworks.
"м
service" ┬Provider peering service that is managing peering connectivity for a
service provider organization. For Google services that support this functionality it is
'servicenetworking.googleapis.com'.
"Й
updateOnCreationFailB
 ЪWhen set to true, enforce an update of the reserved peering ranges on the existing service networking connection in case of a new connection creation failure.
*њ%
[
servicenetworkingPeeredDnsDomain5gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain▓Allows management of a single peered DNS domain for an existing Google Cloud Platform project.

When using Google Cloud DNS to manage internal DNS, create peered DNS domains to make your DNS available to services like Google Cloud Build.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const name = new gcp.servicenetworking.PeeredDnsDomain("name", {
    project: "10000000",
    name: "example-com",
    network: "default",
    dnsSuffix: "example.com.",
    service: "peering-service",
});
```
```python
import pulumi
import pulumi_gcp as gcp

name = gcp.servicenetworking.PeeredDnsDomain("name",
    project="10000000",
    name="example-com",
    network="default",
    dns_suffix="example.com.",
    service="peering-service")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var name = new Gcp.ServiceNetworking.PeeredDnsDomain("name", new()
    {
        Project = "10000000",
        Name = "example-com",
        Network = "default",
        DnsSuffix = "example.com.",
        Service = "peering-service",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := servicenetworking.NewPeeredDnsDomain(ctx, "name", &servicenetworking.PeeredDnsDomainArgs{
			Project:   pulumi.String("10000000"),
			Name:      pulumi.String("example-com"),
			Network:   pulumi.String("default"),
			DnsSuffix: pulumi.String("example.com."),
			Service:   pulumi.String("peering-service"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.servicenetworking.PeeredDnsDomain;
import com.pulumi.gcp.servicenetworking.PeeredDnsDomainArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var name = new PeeredDnsDomain("name", PeeredDnsDomainArgs.builder()
            .project(10000000)
            .name("example-com")
            .network("default")
            .dnsSuffix("example.com.")
            .service("peering-service")
            .build());

    }
}
```
```yaml
resources:
  name:
    type: gcp:servicenetworking:PeeredDnsDomain
    properties:
      project: 1e+07
      name: example-com
      network: default
      dnsSuffix: example.com.
      service: peering-service
```
<!--End PulumiCodeChooser -->

## Import

Project peered DNS domains can be imported using the `service`, `project`, `network` and `name`, where:

- `service` is the service connection, defaults to `servicenetworking.googleapis.com`.

- `project` is the producer project name.

- `network` is the consumer network name.

- `name` is the name of your peered DNS domain.

* `services/{service}/projects/{project}/global/networks/{network}/peeredDnsDomains/{name}`

When using the `pulumi import` command, project peered DNS domains can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:servicenetworking/peeredDnsDomain:PeeredDnsDomain default services/{service}/projects/{project}/global/networks/{network}/peeredDnsDomains/{name}
```

g
	dnsSuffix" VThe DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
<
nameB" .Internal name used for the peered DNS domain.
4
network" %The network in the consumer project.
]
projectB" LThe producer project number. If not provided, the provider project is used.
Ђ
serviceB" pPrivate service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
"g
	dnsSuffix" VThe DNS domain suffix of the peered DNS domain. Make sure to suffix with a `.` (dot).
":
name" .Internal name used for the peered DNS domain.
"4
network" %The network in the consumer project.
"Ђ
parent" san identifier for the resource with format `services/{{service}}/projects/{{project}}/global/networks/{{network}}`
"[
project" LThe producer project number. If not provided, the provider project is used.
"Ђ
serviceB" pPrivate service connection between service and consumer network, defaults to `servicenetworking.googleapis.com`
*╠[
d
servicenetworkingVpcServiceControls;gcp:servicenetworking/vpcServiceControls:VpcServiceControlsвRManages the VPC Service Controls configuration for a service
networking connection

When enabled, Google Cloud makes the following
route configuration changes in the service producer VPC network:
- Removes the IPv4 default route (destination 0.0.0.0/0,
  next hop default internet gateway), Google Cloud then creates an
  IPv4 route for destination 199.36.153.4/30 using the default
  internet gateway next hop.
- Creates Cloud DNS managed private zones and authorizes those zones
  for the service producer VPC network. The zones include
  googleapis.com, gcr.io, pkg.dev, notebooks.cloud.google.com,
  kernels.googleusercontent.com, backupdr.cloud.google.com, and
  backupdr.googleusercontent.com as necessary domains or host names
  for Google APIs and services that are compatible with VPC Service
  Controls. Record data in the zones resolves all host names to
  199.36.153.4, 199.36.153.5, 199.36.153.6, and 199.36.153.7.

When disabled, Google Cloud makes the following route configuration
changes in the service producer VPC network:
- Restores a default route (destination 0.0.0.0/0, next hop default
  internet gateway)
- Deletes the Cloud DNS managed private zones that provided the host
  name overrides.


To get more information about VPCServiceControls, see:

* [API documentation](https://cloud.google.com/service-infrastructure/docs/service-networking/reference/rest/v1/services)
* How-to Guides
    * [Enable VPC Service Controls for service networking](https://cloud.google.com/sdk/gcloud/reference/services/vpc-peerings/enable-vpc-service-controls)
    * [Private Google Access with VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/private-connectivity)
    * [Set up private connectivity to Google APIs and services](https://cloud.google.com/vpc-service-controls/docs/set-up-private-connectivity)

> **Note:** Destroying a `gcp.servicenetworking.VpcServiceControls`
resource will remove it from state, but will not change the
underlying VPC Service Controls configuration for the service
producer network.

## Example Usage

### Service Networking Vpc Service Controls Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

// Create a VPC
const _default = new gcp.compute.Network("default", {name: "example-network"});
// Create an IP address
const defaultGlobalAddress = new gcp.compute.GlobalAddress("default", {
    name: "psa-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: _default.id,
});
// Create a private connection
const defaultConnection = new gcp.servicenetworking.Connection("default", {
    network: _default.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [defaultGlobalAddress.name],
});
// Enable VPC-SC on the producer network
const defaultVpcServiceControls = new gcp.servicenetworking.VpcServiceControls("default", {
    network: _default.name,
    service: "servicenetworking.googleapis.com",
    enabled: true,
}, {
    dependsOn: [defaultConnection],
});
```
```python
import pulumi
import pulumi_gcp as gcp

# Create a VPC
default = gcp.compute.Network("default", name="example-network")
# Create an IP address
default_global_address = gcp.compute.GlobalAddress("default",
    name="psa-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=default.id)
# Create a private connection
default_connection = gcp.servicenetworking.Connection("default",
    network=default.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[default_global_address.name])
# Enable VPC-SC on the producer network
default_vpc_service_controls = gcp.servicenetworking.VpcServiceControls("default",
    network=default.name,
    service="servicenetworking.googleapis.com",
    enabled=True,
    opts = pulumi.ResourceOptions(depends_on=[default_connection]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    // Create a VPC
    var @default = new Gcp.Compute.Network("default", new()
    {
        Name = "example-network",
    });

    // Create an IP address
    var defaultGlobalAddress = new Gcp.Compute.GlobalAddress("default", new()
    {
        Name = "psa-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = @default.Id,
    });

    // Create a private connection
    var defaultConnection = new Gcp.ServiceNetworking.Connection("default", new()
    {
        Network = @default.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            defaultGlobalAddress.Name,
        },
    });

    // Enable VPC-SC on the producer network
    var defaultVpcServiceControls = new Gcp.ServiceNetworking.VpcServiceControls("default", new()
    {
        Network = @default.Name,
        Service = "servicenetworking.googleapis.com",
        Enabled = true,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            defaultConnection,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// Create a VPC
		_, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
			Name: pulumi.String("example-network"),
		})
		if err != nil {
			return err
		}
		// Create an IP address
		defaultGlobalAddress, err := compute.NewGlobalAddress(ctx, "default", &compute.GlobalAddressArgs{
			Name:         pulumi.String("psa-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      _default.ID(),
		})
		if err != nil {
			return err
		}
		// Create a private connection
		defaultConnection, err := servicenetworking.NewConnection(ctx, "default", &servicenetworking.ConnectionArgs{
			Network: _default.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				defaultGlobalAddress.Name,
			},
		})
		if err != nil {
			return err
		}
		// Enable VPC-SC on the producer network
		_, err = servicenetworking.NewVpcServiceControls(ctx, "default", &servicenetworking.VpcServiceControlsArgs{
			Network: _default.Name,
			Service: pulumi.String("servicenetworking.googleapis.com"),
			Enabled: pulumi.Bool(true),
		}, pulumi.DependsOn([]pulumi.Resource{
			defaultConnection,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.servicenetworking.VpcServiceControls;
import com.pulumi.gcp.servicenetworking.VpcServiceControlsArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        // Create a VPC
        var default_ = new Network("default", NetworkArgs.builder()
            .name("example-network")
            .build());

        // Create an IP address
        var defaultGlobalAddress = new GlobalAddress("defaultGlobalAddress", GlobalAddressArgs.builder()
            .name("psa-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(default_.id())
            .build());

        // Create a private connection
        var defaultConnection = new Connection("defaultConnection", ConnectionArgs.builder()
            .network(default_.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(defaultGlobalAddress.name())
            .build());

        // Enable VPC-SC on the producer network
        var defaultVpcServiceControls = new VpcServiceControls("defaultVpcServiceControls", VpcServiceControlsArgs.builder()
            .network(default_.name())
            .service("servicenetworking.googleapis.com")
            .enabled(true)
            .build(), CustomResourceOptions.builder()
                .dependsOn(defaultConnection)
                .build());

    }
}
```
```yaml
resources:
  # Create a VPC
  default:
    type: gcp:compute:Network
    properties:
      name: example-network
  # Create an IP address
  defaultGlobalAddress:
    type: gcp:compute:GlobalAddress
    name: default
    properties:
      name: psa-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${default.id}
  # Create a private connection
  defaultConnection:
    type: gcp:servicenetworking:Connection
    name: default
    properties:
      network: ${default.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${defaultGlobalAddress.name}
  # Enable VPC-SC on the producer network
  defaultVpcServiceControls:
    type: gcp:servicenetworking:VpcServiceControls
    name: default
    properties:
      network: ${default.name}
      service: servicenetworking.googleapis.com
      enabled: true
    options:
      dependsOn:
        - ${defaultConnection}
```
<!--End PulumiCodeChooser -->

## Import

VPCServiceControls can be imported using any of these accepted formats:

* `services/{{service}}/projects/{{project}}/networks/{{network}}`

* `{{service}}/{{project}}/{{network}}`

* `{{service}}/{{network}}`

When using the `pulumi import` command, VPCServiceControls can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:servicenetworking/vpcServiceControls:VpcServiceControls default services/{{service}}/projects/{{project}}/networks/{{network}}
```

```sh
$ pulumi import gcp:servicenetworking/vpcServiceControls:VpcServiceControls default {{service}}/{{project}}/{{network}}
```

```sh
$ pulumi import gcp:servicenetworking/vpcServiceControls:VpcServiceControls default {{service}}/{{network}}
```

v
enabled
 gDesired VPC Service Controls state service producer VPC network, as
described at the top of this page.
P
network" AThe network that the consumer is using to connect with services.
U
projectB" DThe id of the Google Cloud project containing the consumer network.
п
service" ╚The service that is managing peering connectivity for a service
producer's organization. For Google services that support this
functionality, this value is `servicenetworking.googleapis.com`.


- - -
"v
enabled
 gDesired VPC Service Controls state service producer VPC network, as
described at the top of this page.
"P
network" AThe network that the consumer is using to connect with services.
"U
projectB" DThe id of the Google Cloud project containing the consumer network.
"п
service" ╚The service that is managing peering connectivity for a service
producer's organization. For Google services that support this
functionality, this value is `servicenetworking.googleapis.com`.


- - -
2ї(
7
redisgetInstance!gcp:redis/getInstance:getInstanceЁGet info about a Google Cloud Redis instance.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const myInstance = gcp.redis.getInstance({
    name: "my-redis-instance",
});
export const instanceMemorySizeGb = myInstance.then(myInstance => myInstance.memorySizeGb);
export const instanceConnectMode = myInstance.then(myInstance => myInstance.connectMode);
export const instanceAuthorizedNetwork = myInstance.then(myInstance => myInstance.authorizedNetwork);
```
```python
import pulumi
import pulumi_gcp as gcp

my_instance = gcp.redis.get_instance(name="my-redis-instance")
pulumi.export("instanceMemorySizeGb", my_instance.memory_size_gb)
pulumi.export("instanceConnectMode", my_instance.connect_mode)
pulumi.export("instanceAuthorizedNetwork", my_instance.authorized_network)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var myInstance = Gcp.Redis.GetInstance.Invoke(new()
    {
        Name = "my-redis-instance",
    });

    return new Dictionary<string, object?>
    {
        ["instanceMemorySizeGb"] = myInstance.Apply(getInstanceResult => getInstanceResult.MemorySizeGb),
        ["instanceConnectMode"] = myInstance.Apply(getInstanceResult => getInstanceResult.ConnectMode),
        ["instanceAuthorizedNetwork"] = myInstance.Apply(getInstanceResult => getInstanceResult.AuthorizedNetwork),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/redis"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myInstance, err := redis.LookupInstance(ctx, &redis.LookupInstanceArgs{
			Name: "my-redis-instance",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("instanceMemorySizeGb", myInstance.MemorySizeGb)
		ctx.Export("instanceConnectMode", myInstance.ConnectMode)
		ctx.Export("instanceAuthorizedNetwork", myInstance.AuthorizedNetwork)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.redis.RedisFunctions;
import com.pulumi.gcp.redis.inputs.GetInstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var myInstance = RedisFunctions.getInstance(GetInstanceArgs.builder()
            .name("my-redis-instance")
            .build());

        ctx.export("instanceMemorySizeGb", myInstance.applyValue(getInstanceResult -> getInstanceResult.memorySizeGb()));
        ctx.export("instanceConnectMode", myInstance.applyValue(getInstanceResult -> getInstanceResult.connectMode()));
        ctx.export("instanceAuthorizedNetwork", myInstance.applyValue(getInstanceResult -> getInstanceResult.authorizedNetwork()));
    }
}
```
```yaml
variables:
  myInstance:
    fn::invoke:
      function: gcp:redis:getInstance
      arguments:
        name: my-redis-instance
outputs:
  instanceMemorySizeGb: ${myInstance.memorySizeGb}
  instanceConnectMode: ${myInstance.connectMode}
  instanceAuthorizedNetwork: ${myInstance.authorizedNetwork}
```
<!--End PulumiCodeChooser -->
1
name" %The name of a Redis instance.

- - -
q
projectB" `The project in which the resource belongs. If it
is not provided, the provider project is used.
n
regionB" ^The region in which the resource belongs. If it
is not provided, the provider region is used.
"
alternativeLocationId" "
authEnabled
 "

authString" "
authorizedNetwork" "
connectMode" "

createTime" "
currentLocationId" "
customerManagedKey" "
displayName" "
effectiveLabels2" "

host" "E
id" ;The provider-assigned unique ID for this managed resource.
"
labels2" "

locationId" "Є
maintenancePoliciesp*n:l
j
redisgetInstanceMaintenancePolicyCgcp:redis/getInstanceMaintenancePolicy:getInstanceMaintenancePolicy"ј
maintenanceSchedulesv*t:r
p
redisgetInstanceMaintenanceScheduleGgcp:redis/getInstanceMaintenanceSchedule:getInstanceMaintenanceSchedule"
maintenanceVersion" "
memorySizeGb "

name" "R
nodesI*G:E
C
redisgetInstanceNode)gcp:redis/getInstanceNode:getInstanceNode"є
persistenceConfigsp*n:l
j
redisgetInstancePersistenceConfigCgcp:redis/getInstancePersistenceConfig:getInstancePersistenceConfig"
persistenceIamIdentity" "

port "
projectB" "
pulumiLabels2" "
readEndpoint" "
readEndpointPort "
readReplicasMode" "
redisConfigs2" "
redisVersion" "
regionB" "
replicaCount "
reservedIpRange" "
secondaryIpRange" "r
serverCaCertsa*_:]
[
redisgetInstanceServerCaCert9gcp:redis/getInstanceServerCaCert:getInstanceServerCaCert"

tier" "
transitEncryptionMode" 2ъ
A
runtimeconfig	getConfig%gcp:runtimeconfig/getConfig:getConfigЦ## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const run-service = gcp.runtimeconfig.getConfig({
    name: "my-service",
});
```
```python
import pulumi
import pulumi_gcp as gcp

run_service = gcp.runtimeconfig.get_config(name="my-service")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var run_service = Gcp.RuntimeConfig.GetConfig.Invoke(new()
    {
        Name = "my-service",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/runtimeconfig"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := runtimeconfig.LookupConfig(ctx, &runtimeconfig.LookupConfigArgs{
			Name: "my-service",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.runtimeconfig.RuntimeconfigFunctions;
import com.pulumi.gcp.runtimeconfig.inputs.GetConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var run-service = RuntimeconfigFunctions.getConfig(GetConfigArgs.builder()
            .name("my-service")
            .build());

    }
}
```
```yaml
variables:
  run-service:
    fn::invoke:
      function: gcp:runtimeconfig:getConfig
      arguments:
        name: my-service
```
<!--End PulumiCodeChooser -->
G
name" ;The name of the Runtime Configurator configuration.

- - -
q
projectB" `The project in which the resource belongs. If it
is not provided, the provider project is used.
"
description" "E
id" ;The provider-assigned unique ID for this managed resource.
"

name" "
projectB" 2Ы
\
runtimeconfiggetConfigIamPolicy7gcp:runtimeconfig/getConfigIamPolicy:getConfigIamPolicyI
config" ;Used to find the parent resource to bind the IAM policy to
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"
config" "3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"Ќ

policyData" ё(Required only by `gcp.runtimeconfig.ConfigIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" 2Ц
G
runtimeconfiggetVariable)gcp:runtimeconfig/getVariable:getVariable»## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const run-service = gcp.runtimeconfig.getVariable({
    parent: "my-service",
    name: "prod-variables/hostname",
});
```
```python
import pulumi
import pulumi_gcp as gcp

run_service = gcp.runtimeconfig.get_variable(parent="my-service",
    name="prod-variables/hostname")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var run_service = Gcp.RuntimeConfig.GetVariable.Invoke(new()
    {
        Parent = "my-service",
        Name = "prod-variables/hostname",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/runtimeconfig"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := runtimeconfig.LookupVariable(ctx, &runtimeconfig.LookupVariableArgs{
			Parent: "my-service",
			Name:   "prod-variables/hostname",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.runtimeconfig.RuntimeconfigFunctions;
import com.pulumi.gcp.runtimeconfig.inputs.GetVariableArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var run-service = RuntimeconfigFunctions.getVariable(GetVariableArgs.builder()
            .parent("my-service")
            .name("prod-variables/hostname")
            .build());

    }
}
```
```yaml
variables:
  run-service:
    fn::invoke:
      function: gcp:runtimeconfig:getVariable
      arguments:
        parent: my-service
        name: prod-variables/hostname
```
<!--End PulumiCodeChooser -->
@
name" 4The name of the Runtime Configurator configuration.
V
parent" HThe name of the RuntimeConfig resource containing this variable.

- - -
q
projectB" `The project in which the resource belongs. If it
is not provided, the provider project is used.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

name" "
parent" "
projectB" "

text" "

updateTime" "
value" 2­
Y
secretmanagergetRegionalSecret5gcp:secretmanager/getRegionalSecret:getRegionalSecretФUse this data source to get information about a Secret Manager Regional Secret

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secretDatasource = gcp.secretmanager.getRegionalSecret({
    secretId: "secretname",
    location: "us-central1",
});
```
```python
import pulumi
import pulumi_gcp as gcp

secret_datasource = gcp.secretmanager.get_regional_secret(secret_id="secretname",
    location="us-central1")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secretDatasource = Gcp.SecretManager.GetRegionalSecret.Invoke(new()
    {
        SecretId = "secretname",
        Location = "us-central1",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.LookupRegionalSecret(ctx, &secretmanager.LookupRegionalSecretArgs{
			SecretId: "secretname",
			Location: "us-central1",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
import com.pulumi.gcp.secretmanager.inputs.GetRegionalSecretArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var secretDatasource = SecretmanagerFunctions.getRegionalSecret(GetRegionalSecretArgs.builder()
            .secretId("secretname")
            .location("us-central1")
            .build());

    }
}
```
```yaml
variables:
  secretDatasource:
    fn::invoke:
      function: gcp:secretmanager:getRegionalSecret
      arguments:
        secretId: secretname
        location: us-central1
```
<!--End PulumiCodeChooser -->
D
location" 4The location of the regional secret. eg us-central1
F
projectB" 5The ID of the project in which the resource belongs.
1
secretId" !The name of the regional secret.
"
annotations2" "

createTime" "╠
customerManagedEncryptionsГ*ф:Д
ц
secretmanager*getRegionalSecretCustomerManagedEncryptionggcp:secretmanager/getRegionalSecretCustomerManagedEncryption:getRegionalSecretCustomerManagedEncryption"
effectiveAnnotations2" "
effectiveLabels2" "

expireTime" "E
id" ;The provider-assigned unique ID for this managed resource.
"
labels2" "
location" "

name" "
projectB" "
pulumiLabels2" "ё
	rotationsw*u:s
q
secretmanagergetRegionalSecretRotationEgcp:secretmanager/getRegionalSecretRotation:getRegionalSecretRotation"
secretId" "x
topicsn*l:j
h
secretmanagergetRegionalSecretTopic?gcp:secretmanager/getRegionalSecretTopic:getRegionalSecretTopic"	
ttl" "
versionAliases2" "
versionDestroyTtl" 2Г
t
secretmanagergetRegionalSecretIamPolicyGgcp:secretmanager/getRegionalSecretIamPolicy:getRegionalSecretIamPolicyтRetrieves the current IAM policy data for regionalsecret


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.secretmanager.getRegionalSecretIamPolicy({
    project: regional_secret_basic.project,
    location: regional_secret_basic.location,
    secretId: regional_secret_basic.secretId,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.secretmanager.get_regional_secret_iam_policy(project=regional_secret_basic["project"],
    location=regional_secret_basic["location"],
    secret_id=regional_secret_basic["secretId"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.SecretManager.GetRegionalSecretIamPolicy.Invoke(new()
    {
        Project = regional_secret_basic.Project,
        Location = regional_secret_basic.Location,
        SecretId = regional_secret_basic.SecretId,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.LookupRegionalSecretIamPolicy(ctx, &secretmanager.LookupRegionalSecretIamPolicyArgs{
			Project:  pulumi.StringRef(regional_secret_basic.Project),
			Location: pulumi.StringRef(regional_secret_basic.Location),
			SecretId: regional_secret_basic.SecretId,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
import com.pulumi.gcp.secretmanager.inputs.GetRegionalSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = SecretmanagerFunctions.getRegionalSecretIamPolicy(GetRegionalSecretIamPolicyArgs.builder()
            .project(regional_secret_basic.project())
            .location(regional_secret_basic.location())
            .secretId(regional_secret_basic.secretId())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:secretmanager:getRegionalSecretIamPolicy
      arguments:
        project: ${["regional-secret-basic"].project}
        location: ${["regional-secret-basic"].location}
        secretId: ${["regional-secret-basic"].secretId}
```
<!--End PulumiCodeChooser -->
┘
locationB" кThe location of the regional secret. eg us-central1
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.

secretId" "3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
location" "Ъ

policyData" ї(Required only by `gcp.secretmanager.RegionalSecretIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" "
secretId" 2Є$
n
secretmanagergetRegionalSecretVersionCgcp:secretmanager/getRegionalSecretVersion:getRegionalSecretVersionЯGet the value and metadata from a Secret Manager regional secret version. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/regional-secrets-overview) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.locations.secrets.versions). If you don't need the metadata (i.e., if you want to use a more limited role to access the regional secret version only), see also the gcp.secretmanager.getRegionalSecretVersionAccess datasource.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const basic = gcp.secretmanager.getRegionalSecretVersion({
    secret: "my-secret",
    location: "us-central1",
});
```
```python
import pulumi
import pulumi_gcp as gcp

basic = gcp.secretmanager.get_regional_secret_version(secret="my-secret",
    location="us-central1")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var basic = Gcp.SecretManager.GetRegionalSecretVersion.Invoke(new()
    {
        Secret = "my-secret",
        Location = "us-central1",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.LookupRegionalSecretVersion(ctx, &secretmanager.LookupRegionalSecretVersionArgs{
			Secret:   "my-secret",
			Location: pulumi.StringRef("us-central1"),
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
import com.pulumi.gcp.secretmanager.inputs.GetRegionalSecretVersionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var basic = SecretmanagerFunctions.getRegionalSecretVersion(GetRegionalSecretVersionArgs.builder()
            .secret("my-secret")
            .location("us-central1")
            .build());

    }
}
```
```yaml
variables:
  basic:
    fn::invoke:
      function: gcp:secretmanager:getRegionalSecretVersion
      arguments:
        secret: my-secret
        location: us-central1
```
<!--End PulumiCodeChooser -->
g
isSecretDataBase64B
 KIf set to 'true', the secret data is
expected to be base64-encoded string.
»
locationB" юLocation of Secret Manager regional secret resource.
It must be provided when the `secret` field provided consists of only the name of the regional secret.
q
projectB" `The project to get the secret version for. If it
is not provided, the provider project is used.
▄
secret" ═The regional secret to get the secret version for.
This can be either the reference of the regional secret as in `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}` or only the name of the regional secret as in `{{secret_id}}`. If only the name of the regional secret is provided, the location must also be provided.
t
versionB" cThe version of the regional secret to get. If it
is not provided, the latest version is retrieved.
"E

createTime" 3The time at which the regional secret was created.
"╚
customerManagedEncryptions┬*┐:╝
╣
secretmanager1getRegionalSecretVersionCustomerManagedEncryptionugcp:secretmanager/getRegionalSecretVersionCustomerManagedEncryption:getRegionalSecretVersionCustomerManagedEncryptioneThe customer-managed encryption configuration of the regional secret. Structure is documented below.
"l
destroyTime" YThe time at which the regional secret was destroyed. Only present if state is DESTROYED.
"S
enabled
 DTrue if the current state of the regional SecretVersion is enabled.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
isSecretDataBase64B
 "
location" "Ъ
name" њThe resource name of the regional SecretVersion. Format:
`projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
"
project" "
secret" "9

secretData" 'The secret data. No larger than 64KiB.
"
version" 2ќ 
ђ
secretmanagergetRegionalSecretVersionAccessOgcp:secretmanager/getRegionalSecretVersionAccess:getRegionalSecretVersionAccess▒Get the value from a Secret Manager regional secret version. This is similar to the gcp.secretmanager.RegionalSecretVersion datasource, but it only requires the [Secret Manager Secret Accessor](https://cloud.google.com/secret-manager/docs/access-control#secretmanager.secretAccessor) role. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/regional-secrets-overview) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.locations.secrets.versions/access).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const latest = gcp.secretmanager.getRegionalSecretVersionAccess({
    secret: "my-secret",
    location: "us-central1",
});
```
```python
import pulumi
import pulumi_gcp as gcp

latest = gcp.secretmanager.get_regional_secret_version_access(secret="my-secret",
    location="us-central1")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var latest = Gcp.SecretManager.GetRegionalSecretVersionAccess.Invoke(new()
    {
        Secret = "my-secret",
        Location = "us-central1",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.GetRegionalSecretVersionAccess(ctx, &secretmanager.GetRegionalSecretVersionAccessArgs{
			Secret:   "my-secret",
			Location: pulumi.StringRef("us-central1"),
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
import com.pulumi.gcp.secretmanager.inputs.GetRegionalSecretVersionAccessArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var latest = SecretmanagerFunctions.getRegionalSecretVersionAccess(GetRegionalSecretVersionAccessArgs.builder()
            .secret("my-secret")
            .location("us-central1")
            .build());

    }
}
```
```yaml
variables:
  latest:
    fn::invoke:
      function: gcp:secretmanager:getRegionalSecretVersionAccess
      arguments:
        secret: my-secret
        location: us-central1
```
<!--End PulumiCodeChooser -->
g
isSecretDataBase64B
 KIf set to 'true', the secret data is
expected to be base64-encoded string.
»
locationB" юLocation of Secret Manager regional secret resource.
It must be provided when the `secret` field provided consists of only the name of the regional secret.
q
projectB" `The project to get the secret version for. If it
is not provided, the provider project is used.
▄
secret" ═The regional secret to get the secret version for.
This can be either the reference of the regional secret as in `projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}` or only the name of the regional secret as in `{{secret_id}}`. If only the name of the regional secret is provided, the location must also be provided.
t
versionB" cThe version of the regional secret to get. If it
is not provided, the latest version is retrieved.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
isSecretDataBase64B
 "
location" "Ъ
name" њThe resource name of the regional SecretVersion. Format:
`projects/{{project}}/locations/{{location}}/secrets/{{secret_id}}/versions/{{version}}`
"
project" "
secret" "9

secretData" 'The secret data. No larger than 64KiB.
"
version" 2┘
\
secretmanagergetRegionalSecrets7gcp:secretmanager/getRegionalSecrets:getRegionalSecretsЙUse this data source to list the Secret Manager Regional Secrets.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secrets = gcp.secretmanager.getRegionalSecrets({
    location: "us-central1",
});
```
```python
import pulumi
import pulumi_gcp as gcp

secrets = gcp.secretmanager.get_regional_secrets(location="us-central1")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secrets = Gcp.SecretManager.GetRegionalSecrets.Invoke(new()
    {
        Location = "us-central1",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.GetRegionalSecrets(ctx, &secretmanager.GetRegionalSecretsArgs{
			Location: "us-central1",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
import com.pulumi.gcp.secretmanager.inputs.GetRegionalSecretsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var secrets = SecretmanagerFunctions.getRegionalSecrets(GetRegionalSecretsArgs.builder()
            .location("us-central1")
            .build());

    }
}
```
```yaml
variables:
  secrets:
    fn::invoke:
      function: gcp:secretmanager:getRegionalSecrets
      arguments:
        location: us-central1
```
<!--End PulumiCodeChooser -->
Ё
filterB" ЗFilter string, adhering to the rules in [List-operation filtering](https://cloud.google.com/secret-manager/docs/filtering). List only secrets matching the filter. If filter is empty, all regional secrets are listed from the specified location.
5
location" %The location of the regional secret.
(
projectB" The ID of the project.
"
filterB" "E
id" ;The provider-assigned unique ID for this managed resource.
"<
location" ,The location in which the resource belongs.
"D
project" 5The ID of the project in which the resource belongs.
"з
secretst*r:p
n
secretmanagergetRegionalSecretsSecretCgcp:secretmanager/getRegionalSecretsSecret:getRegionalSecretsSecretrA list of regional secrets present in the specified location and matching the filter. Structure is defined below.
2ѕ
A
secretmanager	getSecret%gcp:secretmanager/getSecret:getSecret└Use this data source to get information about a Secret Manager Secret

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const qa = gcp.secretmanager.getSecret({
    secretId: "foobar",
});
```
```python
import pulumi
import pulumi_gcp as gcp

qa = gcp.secretmanager.get_secret(secret_id="foobar")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var qa = Gcp.SecretManager.GetSecret.Invoke(new()
    {
        SecretId = "foobar",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.LookupSecret(ctx, &secretmanager.LookupSecretArgs{
			SecretId: "foobar",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
import com.pulumi.gcp.secretmanager.inputs.GetSecretArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var qa = SecretmanagerFunctions.getSecret(GetSecretArgs.builder()
            .secretId("foobar")
            .build());

    }
}
```
```yaml
variables:
  qa:
    fn::invoke:
      function: gcp:secretmanager:getSecret
      arguments:
        secretId: foobar
```
<!--End PulumiCodeChooser -->
F
projectB" 5The ID of the project in which the resource belongs.
(
secretId" The name of the secret.
"
annotations2" "

createTime" "
effectiveAnnotations2" "
effectiveLabels2" "

expireTime" "E
id" ;The provider-assigned unique ID for this managed resource.
"
labels2" "

name" "
projectB" "
pulumiLabels2" "x
replicationsh*f:d
b
secretmanagergetSecretReplication;gcp:secretmanager/getSecretReplication:getSecretReplication"l
	rotations_*]:[
Y
secretmanagergetSecretRotation5gcp:secretmanager/getSecretRotation:getSecretRotation"
secretId" "`
topicsV*T:R
P
secretmanagergetSecretTopic/gcp:secretmanager/getSecretTopic:getSecretTopic"	
ttl" "
versionAliases2" "
versionDestroyTtl" 2ц
\
secretmanagergetSecretIamPolicy7gcp:secretmanager/getSecretIamPolicy:getSecretIamPolicyУRetrieves the current IAM policy data for secret


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.secretmanager.getSecretIamPolicy({
    project: secret_basic.project,
    secretId: secret_basic.secretId,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.secretmanager.get_secret_iam_policy(project=secret_basic["project"],
    secret_id=secret_basic["secretId"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.SecretManager.GetSecretIamPolicy.Invoke(new()
    {
        Project = secret_basic.Project,
        SecretId = secret_basic.SecretId,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.LookupSecretIamPolicy(ctx, &secretmanager.LookupSecretIamPolicyArgs{
			Project:  pulumi.StringRef(secret_basic.Project),
			SecretId: secret_basic.SecretId,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
import com.pulumi.gcp.secretmanager.inputs.GetSecretIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = SecretmanagerFunctions.getSecretIamPolicy(GetSecretIamPolicyArgs.builder()
            .project(secret_basic.project())
            .secretId(secret_basic.secretId())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:secretmanager:getSecretIamPolicy
      arguments:
        project: ${["secret-basic"].project}
        secretId: ${["secret-basic"].secretId}
```
<!--End PulumiCodeChooser -->
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.

secretId" "3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"Ќ

policyData" ё(Required only by `gcp.secretmanager.SecretIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" "
secretId" 2Б
V
secretmanagergetSecretVersion3gcp:secretmanager/getSecretVersion:getSecretVersionїGet the value and metadata from a Secret Manager secret version. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets.versions). If you don't need the metadata (i.e., if you want to use a more limited role to access the secret version only), see also the gcp.secretmanager.getSecretVersionAccess datasource.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const basic = gcp.secretmanager.getSecretVersion({
    secret: "my-secret",
});
```
```python
import pulumi
import pulumi_gcp as gcp

basic = gcp.secretmanager.get_secret_version(secret="my-secret")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var basic = Gcp.SecretManager.GetSecretVersion.Invoke(new()
    {
        Secret = "my-secret",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.LookupSecretVersion(ctx, &secretmanager.LookupSecretVersionArgs{
			Secret: "my-secret",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
import com.pulumi.gcp.secretmanager.inputs.GetSecretVersionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var basic = SecretmanagerFunctions.getSecretVersion(GetSecretVersionArgs.builder()
            .secret("my-secret")
            .build());

    }
}
```
```yaml
variables:
  basic:
    fn::invoke:
      function: gcp:secretmanager:getSecretVersion
      arguments:
        secret: my-secret
```
<!--End PulumiCodeChooser -->
g
isSecretDataBase64B
 KIf set to 'true', the secret data is
expected to be base64-encoded string.
q
projectB" `The project to get the secret version for. If it
is not provided, the provider project is used.
8
secret" *The secret to get the secret version for.
k
versionB" ZThe version of the secret to get. If it
is not provided, the latest version is retrieved.
"<

createTime" *The time at which the Secret was created.
"c
destroyTime" PThe time at which the Secret was destroyed. Only present if state is DESTROYED.
"J
enabled
 ;True if the current state of the SecretVersion is enabled.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
isSecretDataBase64B
 "~
name" rThe resource name of the SecretVersion. Format:
`projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}`
"
project" "
secret" "9

secretData" 'The secret data. No larger than 64KiB.
"
version" 2Џ
h
secretmanagergetSecretVersionAccess?gcp:secretmanager/getSecretVersionAccess:getSecretVersionAccessрGet the value from a Secret Manager secret version. This is similar to the gcp.secretmanager.SecretVersion datasource, but it only requires the [Secret Manager Secret Accessor](https://cloud.google.com/secret-manager/docs/access-control#secretmanager.secretAccessor) role. For more information see the [official documentation](https://cloud.google.com/secret-manager/docs/) and [API](https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets.versions/access).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const basic = gcp.secretmanager.getSecretVersionAccess({
    secret: "my-secret",
});
```
```python
import pulumi
import pulumi_gcp as gcp

basic = gcp.secretmanager.get_secret_version_access(secret="my-secret")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var basic = Gcp.SecretManager.GetSecretVersionAccess.Invoke(new()
    {
        Secret = "my-secret",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.GetSecretVersionAccess(ctx, &secretmanager.GetSecretVersionAccessArgs{
			Secret: "my-secret",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
import com.pulumi.gcp.secretmanager.inputs.GetSecretVersionAccessArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var basic = SecretmanagerFunctions.getSecretVersionAccess(GetSecretVersionAccessArgs.builder()
            .secret("my-secret")
            .build());

    }
}
```
```yaml
variables:
  basic:
    fn::invoke:
      function: gcp:secretmanager:getSecretVersionAccess
      arguments:
        secret: my-secret
```
<!--End PulumiCodeChooser -->
g
isSecretDataBase64B
 KIf set to 'true', the secret data is
expected to be base64-encoded string.
q
projectB" `The project to get the secret version for. If it
is not provided, the provider project is used.
8
secret" *The secret to get the secret version for.
k
versionB" ZThe version of the secret to get. If it
is not provided, the latest version is retrieved.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
isSecretDataBase64B
 "~
name" rThe resource name of the SecretVersion. Format:
`projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}`
"
project" "
secret" "9

secretData" 'The secret data. No larger than 64KiB.
"
version" 2џ
D
secretmanager
getSecrets'gcp:secretmanager/getSecrets:getSecretsЭUse this data source to list the Secret Manager Secrets

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const secrets = gcp.secretmanager.getSecrets({});
```
```python
import pulumi
import pulumi_gcp as gcp

secrets = gcp.secretmanager.get_secrets()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var secrets = Gcp.SecretManager.GetSecrets.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := secretmanager.GetSecrets(ctx, &secretmanager.GetSecretsArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.SecretmanagerFunctions;
import com.pulumi.gcp.secretmanager.inputs.GetSecretsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var secrets = SecretmanagerFunctions.getSecrets();

    }
}
```
```yaml
variables:
  secrets:
    fn::invoke:
      function: gcp:secretmanager:getSecrets
      arguments: {}
```
<!--End PulumiCodeChooser -->
Я
filterB" ¤Filter string, adhering to the rules in [List-operation filtering](https://cloud.google.com/secret-manager/docs/filtering). List only secrets matching the filter. If filter is empty, all secrets are listed.
(
projectB" The ID of the project.
"
filterB" "E
id" ;The provider-assigned unique ID for this managed resource.
"D
project" 5The ID of the project in which the resource belongs.
"г
secrets\*Z:X
V
secretmanagergetSecretsSecret3gcp:secretmanager/getSecretsSecret:getSecretsSecretCA list of secrets matching the filter. Structure is defined below.
2Њ
n
securesourcemanagergetInstanceIamPolicyAgcp:securesourcemanager/getInstanceIamPolicy:getInstanceIamPolicyіRetrieves the current IAM policy data for instance


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.securesourcemanager.getInstanceIamPolicy({
    project: _default.project,
    location: _default.location,
    instanceId: _default.instanceId,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.securesourcemanager.get_instance_iam_policy(project=default["project"],
    location=default["location"],
    instance_id=default["instanceId"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.SecureSourceManager.GetInstanceIamPolicy.Invoke(new()
    {
        Project = @default.Project,
        Location = @default.Location,
        InstanceId = @default.InstanceId,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.LookupInstanceIamPolicy(ctx, &securesourcemanager.LookupInstanceIamPolicyArgs{
			Project:    pulumi.StringRef(_default.Project),
			Location:   pulumi.StringRef(_default.Location),
			InstanceId: _default.InstanceId,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.SecuresourcemanagerFunctions;
import com.pulumi.gcp.securesourcemanager.inputs.GetInstanceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = SecuresourcemanagerFunctions.getInstanceIamPolicy(GetInstanceIamPolicyArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .instanceId(default_.instanceId())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:securesourcemanager:getInstanceIamPolicy
      arguments:
        project: ${default.project}
        location: ${default.location}
        instanceId: ${default.instanceId}
```
<!--End PulumiCodeChooser -->
h

instanceId" VThe name for the Instance.
Used to find the parent resource to bind the IAM policy to
─
locationB" ▒The location for the Instance.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

instanceId" "
location" "Ъ

policyData" ї(Required only by `gcp.securesourcemanager.InstanceIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" 2Л
t
securesourcemanagergetRepositoryIamPolicyEgcp:securesourcemanager/getRepositoryIamPolicy:getRepositoryIamPolicy║Retrieves the current IAM policy data for repository


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.securesourcemanager.getRepositoryIamPolicy({
    project: _default.project,
    location: _default.location,
    repositoryId: _default.repositoryId,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.securesourcemanager.get_repository_iam_policy(project=default["project"],
    location=default["location"],
    repository_id=default["repositoryId"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.SecureSourceManager.GetRepositoryIamPolicy.Invoke(new()
    {
        Project = @default.Project,
        Location = @default.Location,
        RepositoryId = @default.RepositoryId,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securesourcemanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securesourcemanager.LookupRepositoryIamPolicy(ctx, &securesourcemanager.LookupRepositoryIamPolicyArgs{
			Project:      pulumi.StringRef(_default.Project),
			Location:     pulumi.StringRef(_default.Location),
			RepositoryId: _default.RepositoryId,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securesourcemanager.SecuresourcemanagerFunctions;
import com.pulumi.gcp.securesourcemanager.inputs.GetRepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = SecuresourcemanagerFunctions.getRepositoryIamPolicy(GetRepositoryIamPolicyArgs.builder()
            .project(default_.project())
            .location(default_.location())
            .repositoryId(default_.repositoryId())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:securesourcemanager:getRepositoryIamPolicy
      arguments:
        project: ${default.project}
        location: ${default.location}
        repositoryId: ${default.repositoryId}
```
<!--End PulumiCodeChooser -->
к
locationB" │The location for the Repository.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
Њ
projectB" ЂThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
j
repositoryId" VThe ID for the Repository.
Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
location" "А

policyData" ј(Required only by `gcp.securesourcemanager.RepositoryIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" "
repositoryId" 2К
^
securitycentergetSourceIamPolicy8gcp:securitycenter/getSourceIamPolicy:getSourceIamPolicy╠Retrieves the current IAM policy data for source


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.securitycenter.getSourceIamPolicy({
    source: customSource.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.securitycenter.get_source_iam_policy(source=custom_source["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.SecurityCenter.GetSourceIamPolicy.Invoke(new()
    {
        Source = customSource.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.LookupSourceIamPolicy(ctx, &securitycenter.LookupSourceIamPolicyArgs{
			Source: customSource.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.SecuritycenterFunctions;
import com.pulumi.gcp.securitycenter.inputs.GetSourceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = SecuritycenterFunctions.getSourceIamPolicy(GetSourceIamPolicyArgs.builder()
            .source(customSource.name())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:securitycenter:getSourceIamPolicy
      arguments:
        source: ${customSource.name}
```
<!--End PulumiCodeChooser -->

organization" I
source" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
organization" "ў

policyData" Ё(Required only by `gcp.securitycenter.SourceIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
source" 2ї
ѕ
securitycenter getV2OrganizationSourceIamPolicyTgcp:securitycenter/getV2OrganizationSourceIamPolicy:getV2OrganizationSourceIamPolicyпRetrieves the current IAM policy data for organizationsource


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.securitycenter.getV2OrganizationSourceIamPolicy({
    source: customSource.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.securitycenter.get_v2_organization_source_iam_policy(source=custom_source["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.SecurityCenter.GetV2OrganizationSourceIamPolicy.Invoke(new()
    {
        Source = customSource.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/securitycenter"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := securitycenter.LookupV2OrganizationSourceIamPolicy(ctx, &securitycenter.LookupV2OrganizationSourceIamPolicyArgs{
			Source: customSource.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.securitycenter.SecuritycenterFunctions;
import com.pulumi.gcp.securitycenter.inputs.GetV2OrganizationSourceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = SecuritycenterFunctions.getV2OrganizationSourceIamPolicy(GetV2OrganizationSourceIamPolicyArgs.builder()
            .source(customSource.name())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:securitycenter:getV2OrganizationSourceIamPolicy
      arguments:
        source: ${customSource.name}
```
<!--End PulumiCodeChooser -->

organization" I
source" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
organization" "д

policyData" Њ(Required only by `gcp.securitycenter.V2OrganizationSourceIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
source" 2ўF
F
serviceaccount
getAccount(gcp:serviceaccount/getAccount:getAccountЋ<Get the service account from a project. For more information see
the official [API](https://cloud.google.com/compute/docs/access/service-accounts) documentation.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const objectViewer = gcp.serviceaccount.getAccount({
    accountId: "object-viewer",
});
```
```python
import pulumi
import pulumi_gcp as gcp

object_viewer = gcp.serviceaccount.get_account(account_id="object-viewer")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var objectViewer = Gcp.ServiceAccount.GetAccount.Invoke(new()
    {
        AccountId = "object-viewer",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := serviceaccount.LookupAccount(ctx, &serviceaccount.LookupAccountArgs{
			AccountId: "object-viewer",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var objectViewer = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
            .accountId("object-viewer")
            .build());

    }
}
```
```yaml
variables:
  objectViewer:
    fn::invoke:
      function: gcp:serviceaccount:getAccount
      arguments:
        accountId: object-viewer
```
<!--End PulumiCodeChooser -->


### Save Key In Kubernetes Secret
<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as kubernetes from "@pulumi/kubernetes";
import * as std from "@pulumi/std";

const myaccount = gcp.serviceaccount.getAccount({
    accountId: "myaccount-id",
});
const mykey = new gcp.serviceaccount.Key("mykey", {serviceAccountId: myaccount.then(myaccount => myaccount.name)});
const google_application_credentials = new kubernetes.core.v1.Secret("google-application-credentials", {
    metadata: {
        name: "google-application-credentials",
    },
    data: {
        json: std.base64decodeOutput({
            input: mykey.privateKey,
        }).apply(invoke => invoke.result),
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_kubernetes as kubernetes
import pulumi_std as std

myaccount = gcp.serviceaccount.get_account(account_id="myaccount-id")
mykey = gcp.serviceaccount.Key("mykey", service_account_id=myaccount.name)
google_application_credentials = kubernetes.core.v1.Secret("google-application-credentials",
    metadata={
        "name": "google-application-credentials",
    },
    data={
        "json": std.base64decode_output(input=mykey.private_key).apply(lambda invoke: invoke.result),
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Kubernetes = Pulumi.Kubernetes;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var myaccount = Gcp.ServiceAccount.GetAccount.Invoke(new()
    {
        AccountId = "myaccount-id",
    });

    var mykey = new Gcp.ServiceAccount.Key("mykey", new()
    {
        ServiceAccountId = myaccount.Apply(getAccountResult => getAccountResult.Name),
    });

    var google_application_credentials = new Kubernetes.Core.V1.Secret("google-application-credentials", new()
    {
        Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs
        {
            Name = "google-application-credentials",
        },
        Data = 
        {
            { "json", Std.Base64decode.Invoke(new()
            {
                Input = mykey.PrivateKey,
            }).Apply(invoke => invoke.Result) },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myaccount, err := serviceaccount.LookupAccount(ctx, &serviceaccount.LookupAccountArgs{
			AccountId: "myaccount-id",
		}, nil)
		if err != nil {
			return err
		}
		mykey, err := serviceaccount.NewKey(ctx, "mykey", &serviceaccount.KeyArgs{
			ServiceAccountId: pulumi.String(myaccount.Name),
		})
		if err != nil {
			return err
		}
		_, err = corev1.NewSecret(ctx, "google-application-credentials", &corev1.SecretArgs{
			Metadata: &metav1.ObjectMetaArgs{
				Name: pulumi.String("google-application-credentials"),
			},
			Data: pulumi.StringMap{
				"json": pulumi.String(std.Base64decodeOutput(ctx, std.Base64decodeOutputArgs{
					Input: mykey.PrivateKey,
				}, nil).ApplyT(func(invoke std.Base64decodeResult) (*string, error) {
					return invoke.Result, nil
				}).(pulumi.StringPtrOutput)),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountArgs;
import com.pulumi.gcp.serviceaccount.Key;
import com.pulumi.gcp.serviceaccount.KeyArgs;
import com.pulumi.kubernetes.core_v1.Secret;
import com.pulumi.kubernetes.core_v1.SecretArgs;
import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var myaccount = ServiceaccountFunctions.getAccount(GetAccountArgs.builder()
            .accountId("myaccount-id")
            .build());

        var mykey = new Key("mykey", KeyArgs.builder()
            .serviceAccountId(myaccount.applyValue(getAccountResult -> getAccountResult.name()))
            .build());

        var google_application_credentials = new Secret("google-application-credentials", SecretArgs.builder()
            .metadata(ObjectMetaArgs.builder()
                .name("google-application-credentials")
                .build())
            .data(Map.of("json", StdFunctions.base64decode().applyValue(invoke -> invoke.result())))
            .build());

    }
}
```
```yaml
resources:
  mykey:
    type: gcp:serviceaccount:Key
    properties:
      serviceAccountId: ${myaccount.name}
  google-application-credentials:
    type: kubernetes:core/v1:Secret
    properties:
      metadata:
        name: google-application-credentials
      data:
        json:
          fn::invoke:
            function: std:base64decode
            arguments:
              input: ${mykey.privateKey}
            return: result
variables:
  myaccount:
    fn::invoke:
      function: gcp:serviceaccount:getAccount
      arguments:
        accountId: myaccount-id
```
<!--End PulumiCodeChooser -->
┘
	accountId" КThe Google service account ID. This be one of:

* The name of the service account within the project (e.g. `my-service`)

* The fully-qualified path to a service account resource (e.g.
`projects/my-project/serviceAccounts/...`)

* The email address of the service account (e.g.
`my-service@my-project.iam.gserviceaccount.com`)

projectB" nThe ID of the project that the service account is present in.
Defaults to the provider project configuration.
"
	accountId" ">
disabled
 .Whether a service account is disabled or not.
"=
displayName" *The display name for the service account.
"┴
email" │The e-mail address of the service account. This value
should be referenced from any `gcp.organizations.getIAMPolicy` data sources
that would grant the service account privileges.
"E
id" ;The provider-assigned unique ID for this managed resource.
"х
member" дThe Identity of the service account in the form `serviceAccount:{email}`. This value is often used to refer to the service account in order to grant IAM permissions.
"=
name" 1The fully-qualified name of the service account.
"
projectB" "6
uniqueId" &The unique id of the service account.
2јL
g
serviceaccountgetAccountAccessToken>gcp:serviceaccount/getAccountAccessToken:getAccountAccessTokenюEThis data source provides a google `oauth2` `access_token` for a different service account than the one initially running the script.

For more information see
[the official documentation](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials) as well as [iamcredentials.generateAccessToken()](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken)

## Example Usage

To allow `service_A` to impersonate `service_B`, grant the [Service Account Token Creator](https://cloud.google.com/iam/docs/service-accounts#the_service_account_token_creator_role) on B to A. 

In the IAM policy below, `service_A` is given the Token Creator role impersonate `service_B`

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const token_creator_iam = new gcp.serviceaccount.IAMBinding("token-creator-iam", {
    serviceAccountId: "projects/-/serviceAccounts/service_B@projectB.iam.gserviceaccount.com",
    role: "roles/iam.serviceAccountTokenCreator",
    members: ["serviceAccount:service_A@projectA.iam.gserviceaccount.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

token_creator_iam = gcp.serviceaccount.IAMBinding("token-creator-iam",
    service_account_id="projects/-/serviceAccounts/service_B@projectB.iam.gserviceaccount.com",
    role="roles/iam.serviceAccountTokenCreator",
    members=["serviceAccount:service_A@projectA.iam.gserviceaccount.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var token_creator_iam = new Gcp.ServiceAccount.IAMBinding("token-creator-iam", new()
    {
        ServiceAccountId = "projects/-/serviceAccounts/service_B@projectB.iam.gserviceaccount.com",
        Role = "roles/iam.serviceAccountTokenCreator",
        Members = new[]
        {
            "serviceAccount:service_A@projectA.iam.gserviceaccount.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := serviceaccount.NewIAMBinding(ctx, "token-creator-iam", &serviceaccount.IAMBindingArgs{
			ServiceAccountId: pulumi.String("projects/-/serviceAccounts/service_B@projectB.iam.gserviceaccount.com"),
			Role:             pulumi.String("roles/iam.serviceAccountTokenCreator"),
			Members: pulumi.StringArray{
				pulumi.String("serviceAccount:service_A@projectA.iam.gserviceaccount.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.IAMBinding;
import com.pulumi.gcp.serviceaccount.IAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var token_creator_iam = new IAMBinding("token-creator-iam", IAMBindingArgs.builder()
            .serviceAccountId("projects/-/serviceAccounts/service_B@projectB.iam.gserviceaccount.com")
            .role("roles/iam.serviceAccountTokenCreator")
            .members("serviceAccount:service_A@projectA.iam.gserviceaccount.com")
            .build());

    }
}
```
```yaml
resources:
  token-creator-iam:
    type: gcp:serviceaccount:IAMBinding
    properties:
      serviceAccountId: projects/-/serviceAccounts/service_B@projectB.iam.gserviceaccount.com
      role: roles/iam.serviceAccountTokenCreator
      members:
        - serviceAccount:service_A@projectA.iam.gserviceaccount.com
```
<!--End PulumiCodeChooser -->

Once the IAM permissions are set, you can apply the new token to a provider bootstrapped with it.  Any resources that references the aliased provider will run as the new identity.

In the example below, `gcp.organizations.Project` will run as `service_B`.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

export = async () => {
    const default = await gcp.organizations.getClientConfig({});
    const defaultGetAccountAccessToken = await gcp.serviceaccount.getAccountAccessToken({
        targetServiceAccount: "service_B@projectB.iam.gserviceaccount.com",
        scopes: [
            "userinfo-email",
            "cloud-platform",
        ],
        lifetime: "300s",
    });
    const me = await gcp.organizations.getClientOpenIdUserInfo({});
    return {
        "target-email": me.email,
    };
}
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.organizations.get_client_config()
default_get_account_access_token = gcp.serviceaccount.get_account_access_token(target_service_account="service_B@projectB.iam.gserviceaccount.com",
    scopes=[
        "userinfo-email",
        "cloud-platform",
    ],
    lifetime="300s")
me = gcp.organizations.get_client_open_id_user_info()
pulumi.export("target-email", me.email)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Organizations.GetClientConfig.Invoke();

    var defaultGetAccountAccessToken = Gcp.ServiceAccount.GetAccountAccessToken.Invoke(new()
    {
        TargetServiceAccount = "service_B@projectB.iam.gserviceaccount.com",
        Scopes = new[]
        {
            "userinfo-email",
            "cloud-platform",
        },
        Lifetime = "300s",
    });

    var me = Gcp.Organizations.GetClientOpenIdUserInfo.Invoke();

    return new Dictionary<string, object?>
    {
        ["target-email"] = me.Apply(getClientOpenIdUserInfoResult => getClientOpenIdUserInfoResult.Email),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		_, err = serviceaccount.GetAccountAccessToken(ctx, &serviceaccount.GetAccountAccessTokenArgs{
			TargetServiceAccount: "service_B@projectB.iam.gserviceaccount.com",
			Scopes: []string{
				"userinfo-email",
				"cloud-platform",
			},
			Lifetime: pulumi.StringRef("300s"),
		}, nil)
		if err != nil {
			return err
		}
		me, err := organizations.GetClientOpenIdUserInfo(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		ctx.Export("target-email", me.Email)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = OrganizationsFunctions.getClientConfig();

        final var defaultGetAccountAccessToken = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
            .targetServiceAccount("service_B@projectB.iam.gserviceaccount.com")
            .scopes(            
                "userinfo-email",
                "cloud-platform")
            .lifetime("300s")
            .build());

        final var me = OrganizationsFunctions.getClientOpenIdUserInfo();

        ctx.export("target-email", me.applyValue(getClientOpenIdUserInfoResult -> getClientOpenIdUserInfoResult.email()));
    }
}
```
```yaml
variables:
  default:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
  defaultGetAccountAccessToken:
    fn::invoke:
      function: gcp:serviceaccount:getAccountAccessToken
      arguments:
        targetServiceAccount: service_B@projectB.iam.gserviceaccount.com
        scopes:
          - userinfo-email
          - cloud-platform
        lifetime: 300s
  me:
    fn::invoke:
      function: gcp:organizations:getClientOpenIdUserInfo
      arguments: {}
outputs:
  target-email: ${me.email}
```
<!--End PulumiCodeChooser -->

> *Note*: the generated token is non-refreshable and can have a maximum `lifetime` of `3600` seconds.
в
	delegatesB*" НDelegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.  (e.g. `["projects/-/serviceAccounts/delegate-svc-account@project-id.iam.gserviceaccount.com"]`)
U
lifetimeB" CLifetime of the impersonated token (defaults to its max: `3600s`).
V
scopes*" FThe scopes the new credential should have (e.g. `["cloud-platform"]`)
|
targetServiceAccount" `The service account _to_ impersonate (e.g. `service_B@your-project-id.iam.gserviceaccount.com`)
"O
accessToken" <The `access_token` representing the new generated identity.
"
	delegatesB*" "E
id" ;The provider-assigned unique ID for this managed resource.
"
lifetimeB" "
scopes*" "
targetServiceAccount" 2иj
[
serviceaccountgetAccountIdToken6gcp:serviceaccount/getAccountIdToken:getAccountIdTokenѕdThis data source provides a Google OpenID Connect (`oidc`) `id_token`.  Tokens issued from this data source are typically used to call external services that accept OIDC tokens for authentication (e.g. [Google Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service)).

For more information see
[OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html#IDToken).

## Example Usage

### ServiceAccount JSON Credential File.
  `gcp.serviceaccount.getAccountIdToken` will use the configured provider credentials

  <!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const oidc = gcp.serviceaccount.getAccountIdToken({
    targetAudience: "https://foo.bar/",
});
export const oidcToken = oidc.then(oidc => oidc.idToken);
```
```python
import pulumi
import pulumi_gcp as gcp

oidc = gcp.serviceaccount.get_account_id_token(target_audience="https://foo.bar/")
pulumi.export("oidcToken", oidc.id_token)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
    {
        TargetAudience = "https://foo.bar/",
    });

    return new Dictionary<string, object?>
    {
        ["oidcToken"] = oidc.Apply(getAccountIdTokenResult => getAccountIdTokenResult.IdToken),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		oidc, err := serviceaccount.GetAccountIdToken(ctx, &serviceaccount.GetAccountIdTokenArgs{
			TargetAudience: "https://foo.bar/",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("oidcToken", oidc.IdToken)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
            .targetAudience("https://foo.bar/")
            .build());

        ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
    }
}
```
```yaml
variables:
  oidc:
    fn::invoke:
      function: gcp:serviceaccount:getAccountIdToken
      arguments:
        targetAudience: https://foo.bar/
outputs:
  oidcToken: ${oidc.idToken}
```
<!--End PulumiCodeChooser -->

### Service Account Impersonation.
  `gcp.serviceaccount.getAccountIdToken` will use background impersonated credentials provided by `gcp.serviceaccount.getAccountAccessToken`.

  Note: to use the following, you must grant `target_service_account` the
  `roles/iam.serviceAccountTokenCreator` role on itself.

  <!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const impersonated = gcp.serviceaccount.getAccountAccessToken({
    targetServiceAccount: "impersonated-account@project.iam.gserviceaccount.com",
    delegates: [],
    scopes: [
        "userinfo-email",
        "cloud-platform",
    ],
    lifetime: "300s",
});
const oidc = gcp.serviceaccount.getAccountIdToken({
    targetServiceAccount: "impersonated-account@project.iam.gserviceaccount.com",
    delegates: [],
    includeEmail: true,
    targetAudience: "https://foo.bar/",
});
export const oidcToken = oidc.then(oidc => oidc.idToken);
```
```python
import pulumi
import pulumi_gcp as gcp

impersonated = gcp.serviceaccount.get_account_access_token(target_service_account="impersonated-account@project.iam.gserviceaccount.com",
    delegates=[],
    scopes=[
        "userinfo-email",
        "cloud-platform",
    ],
    lifetime="300s")
oidc = gcp.serviceaccount.get_account_id_token(target_service_account="impersonated-account@project.iam.gserviceaccount.com",
    delegates=[],
    include_email=True,
    target_audience="https://foo.bar/")
pulumi.export("oidcToken", oidc.id_token)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var impersonated = Gcp.ServiceAccount.GetAccountAccessToken.Invoke(new()
    {
        TargetServiceAccount = "impersonated-account@project.iam.gserviceaccount.com",
        Delegates = new() { },
        Scopes = new[]
        {
            "userinfo-email",
            "cloud-platform",
        },
        Lifetime = "300s",
    });

    var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
    {
        TargetServiceAccount = "impersonated-account@project.iam.gserviceaccount.com",
        Delegates = new() { },
        IncludeEmail = true,
        TargetAudience = "https://foo.bar/",
    });

    return new Dictionary<string, object?>
    {
        ["oidcToken"] = oidc.Apply(getAccountIdTokenResult => getAccountIdTokenResult.IdToken),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := serviceaccount.GetAccountAccessToken(ctx, &serviceaccount.GetAccountAccessTokenArgs{
			TargetServiceAccount: "impersonated-account@project.iam.gserviceaccount.com",
			Delegates:            []interface{}{},
			Scopes: []string{
				"userinfo-email",
				"cloud-platform",
			},
			Lifetime: pulumi.StringRef("300s"),
		}, nil)
		if err != nil {
			return err
		}
		oidc, err := serviceaccount.GetAccountIdToken(ctx, &serviceaccount.GetAccountIdTokenArgs{
			TargetServiceAccount: pulumi.StringRef("impersonated-account@project.iam.gserviceaccount.com"),
			Delegates:            []interface{}{},
			IncludeEmail:         pulumi.BoolRef(true),
			TargetAudience:       "https://foo.bar/",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("oidcToken", oidc.IdToken)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountAccessTokenArgs;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var impersonated = ServiceaccountFunctions.getAccountAccessToken(GetAccountAccessTokenArgs.builder()
            .targetServiceAccount("impersonated-account@project.iam.gserviceaccount.com")
            .delegates()
            .scopes(            
                "userinfo-email",
                "cloud-platform")
            .lifetime("300s")
            .build());

        final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
            .targetServiceAccount("impersonated-account@project.iam.gserviceaccount.com")
            .delegates()
            .includeEmail(true)
            .targetAudience("https://foo.bar/")
            .build());

        ctx.export("oidcToken", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()));
    }
}
```
```yaml
variables:
  impersonated:
    fn::invoke:
      function: gcp:serviceaccount:getAccountAccessToken
      arguments:
        targetServiceAccount: impersonated-account@project.iam.gserviceaccount.com
        delegates: []
        scopes:
          - userinfo-email
          - cloud-platform
        lifetime: 300s
  oidc:
    fn::invoke:
      function: gcp:serviceaccount:getAccountIdToken
      arguments:
        targetServiceAccount: impersonated-account@project.iam.gserviceaccount.com
        delegates: []
        includeEmail: true
        targetAudience: https://foo.bar/
outputs:
  oidcToken: ${oidc.idToken}
```
<!--End PulumiCodeChooser -->

### Invoking Cloud Run Endpoint

  The following configuration will invoke [Cloud Run](https://cloud.google.com/run/docs/authenticating/service-to-service) endpoint where the service account for the provider has been granted `roles/run.invoker` role previously.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as http from "@pulumi/http";

const oidc = gcp.serviceaccount.getAccountIdToken({
    targetAudience: "https://your.cloud.run.app/",
});
const cloudrun = oidc.then(oidc => http.getHttp({
    url: "https://your.cloud.run.app/",
    requestHeaders: {
        Authorization: `Bearer ${oidc.idToken}`,
    },
}));
export const cloudRunResponse = cloudrun.then(cloudrun => cloudrun.body);
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_http as http

oidc = gcp.serviceaccount.get_account_id_token(target_audience="https://your.cloud.run.app/")
cloudrun = http.get_http(url="https://your.cloud.run.app/",
    request_headers={
        "Authorization": f"Bearer {oidc.id_token}",
    })
pulumi.export("cloudRunResponse", cloudrun.body)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Http = Pulumi.Http;

return await Deployment.RunAsync(() => 
{
    var oidc = Gcp.ServiceAccount.GetAccountIdToken.Invoke(new()
    {
        TargetAudience = "https://your.cloud.run.app/",
    });

    var cloudrun = Http.GetHttp.Invoke(new()
    {
        Url = "https://your.cloud.run.app/",
        RequestHeaders = 
        {
            { "Authorization", $"Bearer {oidc.Apply(getAccountIdTokenResult => getAccountIdTokenResult.IdToken)}" },
        },
    });

    return new Dictionary<string, object?>
    {
        ["cloudRunResponse"] = cloudrun.Apply(getHttpResult => getHttpResult.Body),
    };
});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi-http/sdk/go/http"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		oidc, err := serviceaccount.GetAccountIdToken(ctx, &serviceaccount.GetAccountIdTokenArgs{
			TargetAudience: "https://your.cloud.run.app/",
		}, nil)
		if err != nil {
			return err
		}
		cloudrun, err := http.GetHttp(ctx, &http.GetHttpArgs{
			Url: "https://your.cloud.run.app/",
			RequestHeaders: map[string]interface{}{
				"Authorization": fmt.Sprintf("Bearer %v", oidc.IdToken),
			},
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("cloudRunResponse", cloudrun.Body)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountIdTokenArgs;
import com.pulumi.http.HttpFunctions;
import com.pulumi.http.inputs.GetHttpArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var oidc = ServiceaccountFunctions.getAccountIdToken(GetAccountIdTokenArgs.builder()
            .targetAudience("https://your.cloud.run.app/")
            .build());

        final var cloudrun = HttpFunctions.getHttp(GetHttpArgs.builder()
            .url("https://your.cloud.run.app/")
            .requestHeaders(Map.of("Authorization", String.format("Bearer %s", oidc.applyValue(getAccountIdTokenResult -> getAccountIdTokenResult.idToken()))))
            .build());

        ctx.export("cloudRunResponse", cloudrun.applyValue(getHttpResult -> getHttpResult.body()));
    }
}
```
```yaml
variables:
  oidc:
    fn::invoke:
      function: gcp:serviceaccount:getAccountIdToken
      arguments:
        targetAudience: https://your.cloud.run.app/
  cloudrun:
    fn::invoke:
      function: http:getHttp
      arguments:
        url: https://your.cloud.run.app/
        requestHeaders:
          Authorization: Bearer ${oidc.idToken}
outputs:
  cloudRunResponse: ${cloudrun.body}
```
<!--End PulumiCodeChooser -->
х
	delegatesB*" ЪDelegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.   Used only when using impersonation mode.
h
includeEmailB
 RInclude the verified email in the claim. Used only when using impersonation mode.
=
targetAudience" 'The audience claim for the `id_token`.
}
targetServiceAccountB" _The email of the service account being impersonated.  Used only when using impersonation mode.
"
	delegatesB*" "E
id" ;The provider-assigned unique ID for this managed resource.
"G
idToken" 8The `id_token` representing the new generated identity.
"
includeEmailB
 "
targetAudience" "
targetServiceAccountB" 2╔%
O
serviceaccountgetAccountJwt.gcp:serviceaccount/getAccountJwt:getAccountJwtџThis data source provides a [self-signed JWT](https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-jwt).  Tokens issued from this data source are typically used to call external services that accept JWTs for authentication.

## Example Usage

Note: in order to use the following, the caller must have _at least_ `roles/iam.serviceAccountTokenCreator` on the `target_service_account`.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const foo = gcp.serviceaccount.getAccountJwt({
    targetServiceAccount: "impersonated-account@project.iam.gserviceaccount.com",
    payload: JSON.stringify({
        foo: "bar",
        sub: "subject",
    }),
    expiresIn: 60,
});
export const jwt = foo.then(foo => foo.jwt);
```
```python
import pulumi
import json
import pulumi_gcp as gcp

foo = gcp.serviceaccount.get_account_jwt(target_service_account="impersonated-account@project.iam.gserviceaccount.com",
    payload=json.dumps({
        "foo": "bar",
        "sub": "subject",
    }),
    expires_in=60)
pulumi.export("jwt", foo.jwt)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var foo = Gcp.ServiceAccount.GetAccountJwt.Invoke(new()
    {
        TargetServiceAccount = "impersonated-account@project.iam.gserviceaccount.com",
        Payload = JsonSerializer.Serialize(new Dictionary<string, object?>
        {
            ["foo"] = "bar",
            ["sub"] = "subject",
        }),
        ExpiresIn = 60,
    });

    return new Dictionary<string, object?>
    {
        ["jwt"] = foo.Apply(getAccountJwtResult => getAccountJwtResult.Jwt),
    };
});
```
```go
package main

import (
	"encoding/json"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		tmpJSON0, err := json.Marshal(map[string]interface{}{
			"foo": "bar",
			"sub": "subject",
		})
		if err != nil {
			return err
		}
		json0 := string(tmpJSON0)
		foo, err := serviceaccount.GetAccountJwt(ctx, &serviceaccount.GetAccountJwtArgs{
			TargetServiceAccount: "impersonated-account@project.iam.gserviceaccount.com",
			Payload:              json0,
			ExpiresIn:            pulumi.IntRef(60),
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("jwt", foo.Jwt)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountJwtArgs;
import static com.pulumi.codegen.internal.Serialization.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var foo = ServiceaccountFunctions.getAccountJwt(GetAccountJwtArgs.builder()
            .targetServiceAccount("impersonated-account@project.iam.gserviceaccount.com")
            .payload(serializeJson(
                jsonObject(
                    jsonProperty("foo", "bar"),
                    jsonProperty("sub", "subject")
                )))
            .expiresIn(60)
            .build());

        ctx.export("jwt", foo.applyValue(getAccountJwtResult -> getAccountJwtResult.jwt()));
    }
}
```
```yaml
variables:
  foo:
    fn::invoke:
      function: gcp:serviceaccount:getAccountJwt
      arguments:
        targetServiceAccount: impersonated-account@project.iam.gserviceaccount.com
        payload:
          fn::toJSON:
            foo: bar
            sub: subject
        expiresIn: 60
outputs:
  jwt: ${foo.jwt}
```
<!--End PulumiCodeChooser -->
Ѕ
	delegatesB*" tDelegate chain of approvals needed to perform full impersonation. Specify the fully qualified service account name.
╣
	expiresInB ЦNumber of seconds until the JWT expires. If set and non-zero an `exp` claim will be added to the payload derived from the current timestamp plus expires_in seconds.
R
payload" CThe JSON-encoded JWT claims set to include in the self-signed JWT.
U
targetServiceAccount" 9The email of the service account that will sign the JWT.
"
	delegatesB*" "
	expiresInB "E
id" ;The provider-assigned unique ID for this managed resource.
"L
jwt" AThe signed JWT containing the JWT Claims Set from the `payload`.
"
payload" "
targetServiceAccount" 2Щ$
O
serviceaccountgetAccountKey.gcp:serviceaccount/getAccountKey:getAccountKeyћGet service account public key. For more information, see [the official documentation](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) and [API](https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys/get).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const myaccount = new gcp.serviceaccount.Account("myaccount", {accountId: "dev-foo-account"});
const mykeyKey = new gcp.serviceaccount.Key("mykey", {serviceAccountId: myaccount.name});
const mykey = gcp.serviceaccount.getAccountKeyOutput({
    name: mykeyKey.name,
    publicKeyType: "TYPE_X509_PEM_FILE",
});
```
```python
import pulumi
import pulumi_gcp as gcp

myaccount = gcp.serviceaccount.Account("myaccount", account_id="dev-foo-account")
mykey_key = gcp.serviceaccount.Key("mykey", service_account_id=myaccount.name)
mykey = gcp.serviceaccount.get_account_key_output(name=mykey_key.name,
    public_key_type="TYPE_X509_PEM_FILE")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var myaccount = new Gcp.ServiceAccount.Account("myaccount", new()
    {
        AccountId = "dev-foo-account",
    });

    var mykeyKey = new Gcp.ServiceAccount.Key("mykey", new()
    {
        ServiceAccountId = myaccount.Name,
    });

    var mykey = Gcp.ServiceAccount.GetAccountKey.Invoke(new()
    {
        Name = mykeyKey.Name,
        PublicKeyType = "TYPE_X509_PEM_FILE",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myaccount, err := serviceaccount.NewAccount(ctx, "myaccount", &serviceaccount.AccountArgs{
			AccountId: pulumi.String("dev-foo-account"),
		})
		if err != nil {
			return err
		}
		mykeyKey, err := serviceaccount.NewKey(ctx, "mykey", &serviceaccount.KeyArgs{
			ServiceAccountId: myaccount.Name,
		})
		if err != nil {
			return err
		}
		_ = serviceaccount.GetAccountKeyOutput(ctx, serviceaccount.GetAccountKeyOutputArgs{
			Name:          mykeyKey.Name,
			PublicKeyType: pulumi.String("TYPE_X509_PEM_FILE"),
		}, nil)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.serviceaccount.Key;
import com.pulumi.gcp.serviceaccount.KeyArgs;
import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
import com.pulumi.gcp.serviceaccount.inputs.GetAccountKeyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var myaccount = new Account("myaccount", AccountArgs.builder()
            .accountId("dev-foo-account")
            .build());

        var mykeyKey = new Key("mykeyKey", KeyArgs.builder()
            .serviceAccountId(myaccount.name())
            .build());

        final var mykey = ServiceaccountFunctions.getAccountKey(GetAccountKeyArgs.builder()
            .name(mykeyKey.name())
            .publicKeyType("TYPE_X509_PEM_FILE")
            .build());

    }
}
```
```yaml
resources:
  myaccount:
    type: gcp:serviceaccount:Account
    properties:
      accountId: dev-foo-account
  mykeyKey:
    type: gcp:serviceaccount:Key
    name: mykey
    properties:
      serviceAccountId: ${myaccount.name}
variables:
  mykey:
    fn::invoke:
      function: gcp:serviceaccount:getAccountKey
      arguments:
        name: ${mykeyKey.name}
        publicKeyType: TYPE_X509_PEM_FILE
```
<!--End PulumiCodeChooser -->
н
name" КThe name of the service account key. This must have format
`projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{KEYID}`, where `{ACCOUNT}`
is the email address or unique id of the service account.

projectB" nThe ID of the project that the service account is present in.
Defaults to the provider project configuration.
w
publicKeyTypeB" `The output format of the public key requested. TYPE_X509_PEM_FILE is the default output format.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
keyAlgorithm" "

name" "
projectB" "0
	publicKey" The public key, base64 encoded
"
publicKeyTypeB" 2х
L
serviceaccountgetIamPolicy,gcp:serviceaccount/getIamPolicy:getIamPolicy├Retrieves the current IAM policy data for a service account.

## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const foo = gcp.serviceaccount.getIamPolicy({
    serviceAccountId: testAccount.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

foo = gcp.serviceaccount.get_iam_policy(service_account_id=test_account["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var foo = Gcp.ServiceAccount.GetIamPolicy.Invoke(new()
    {
        ServiceAccountId = testAccount.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := serviceaccount.GetIamPolicy(ctx, &serviceaccount.GetIamPolicyArgs{
			ServiceAccountId: testAccount.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
import com.pulumi.gcp.serviceaccount.inputs.GetIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var foo = ServiceaccountFunctions.getIamPolicy(GetIamPolicyArgs.builder()
            .serviceAccountId(testAccount.name())
            .build());

    }
}
```
```yaml
variables:
  foo:
    fn::invoke:
      function: gcp:serviceaccount:getIamPolicy
      arguments:
        serviceAccountId: ${testAccount.name}
```
<!--End PulumiCodeChooser -->
\
serviceAccountId" DThe fully-qualified name of the service account to apply policy to.
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"-

policyData" (Computed) The policy data
"
serviceAccountId" 2К
4
serviceaccountgetSgcp:serviceaccount/getS:getS▒Gets a list of all service accounts from a project.
See [the official documentation](https://cloud.google.com/iam/docs/service-account-overview)
and [API](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).

## Example Usage

Example service accounts.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = gcp.serviceaccount.getS({
    project: "example-project",
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.serviceaccount.get_s(project="example-project")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = Gcp.ServiceAccount.GetS.Invoke(new()
    {
        Project = "example-project",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := serviceaccount.GetS(ctx, &serviceaccount.GetSArgs{
			Project: pulumi.StringRef("example-project"),
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.ServiceaccountFunctions;
import com.pulumi.gcp.serviceaccount.inputs.GetSArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = ServiceaccountFunctions.getS(GetSArgs.builder()
            .project("example-project")
            .build());

    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: gcp:serviceaccount:getS
      arguments:
        project: example-project
```
<!--End PulumiCodeChooser -->
]
projectB" LThe ID of the project. If it is not provided, the provider project is used.
"Б
accountsO*M:K
I
serviceaccountgetSAccount*gcp:serviceaccount/getSAccount:getSAccountFA list of all retrieved service accounts. Structure is defined below.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
projectB" 2я
k
servicedirectorygetNamespaceIamPolicy@gcp:servicedirectory/getNamespaceIamPolicy:getNamespaceIamPolicyG
name" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

name" "Ю

policyData" і(Required only by `gcp.servicedirectory.NamespaceIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
2о
e
servicedirectorygetServiceIamPolicy<gcp:servicedirectory/getServiceIamPolicy:getServiceIamPolicyG
name" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

name" "Џ

policyData" ѕ(Required only by `gcp.servicedirectory.ServiceIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
2Й
d
servicenetworkinggetPeeredDnsDomain;gcp:servicenetworking/getPeeredDnsDomain:getPeeredDnsDomain

name" 
network" 
project" 
service" "
	dnsSuffix" "E
id" ;The provider-assigned unique ID for this managed resource.
"

name" "
network" "
parent" "
project" "
service" :ѓ
ѓ
redis$ClusterCrossClusterReplicationConfigSgcp:redis/ClusterCrossClusterReplicationConfig:ClusterCrossClusterReplicationConfigЩ
эй
clusterRoleB" ДThe role of the cluster in cross cluster replication. Supported values are:
1. `CLUSTER_ROLE_UNSPECIFIED`: This is an independent cluster that has never participated in cross cluster replication. It allows both reads and writes.
1. `NONE`: This is an independent cluster that previously participated in cross cluster replication(either as a `PRIMARY` or `SECONDARY` cluster). It allows both reads and writes.
1. `PRIMARY`: This cluster serves as the replication source for secondary clusters that are replicating from it. Any data written to it is automatically replicated to its secondary clusters. It allows both reads and writes.
1. `SECONDARY`: This cluster replicates data from the primary cluster. It allows only reads.
Possible values are: `CLUSTER_ROLE_UNSPECIFIED`, `NONE`, `PRIMARY`, `SECONDARY`.
џ
membershipsгBЕ*д:Б
а
redis.ClusterCrossClusterReplicationConfigMembershipggcp:redis/ClusterCrossClusterReplicationConfigMembership:ClusterCrossClusterReplicationConfigMembership█(Output)
An output only view of all the member clusters participating in cross cluster replication. This field is populated for all the member clusters irrespective of their cluster role.
Structure is documented below.
Б
primaryClusterхB▓:»
г
redis2ClusterCrossClusterReplicationConfigPrimaryClusterogcp:redis/ClusterCrossClusterReplicationConfigPrimaryCluster:ClusterCrossClusterReplicationConfigPrimaryClusterпDetails of the primary cluster that is used as the replication source for this secondary cluster. This is allowed to be set only for clusters whose cluster role is of type `SECONDARY`.
Structure is documented below.
ќ
secondaryClustersЙB╗*И:х
▓
redis4ClusterCrossClusterReplicationConfigSecondaryClustersgcp:redis/ClusterCrossClusterReplicationConfigSecondaryCluster:ClusterCrossClusterReplicationConfigSecondaryCluster┐List of secondary clusters that are replicating from this primary cluster. This is allowed to be set only for clusters whose cluster role is of type `PRIMARY`.
Structure is documented below.
Y

updateTimeB" E(Output)
The last time cross cluster replication config was updated.
:┴
а
redis.ClusterCrossClusterReplicationConfigMembershipggcp:redis/ClusterCrossClusterReplicationConfigMembership:ClusterCrossClusterReplicationConfigMembershipЏ
ўМ
primaryClustersОBн*Л:╬
╦
redis<ClusterCrossClusterReplicationConfigMembershipPrimaryClusterЃgcp:redis/ClusterCrossClusterReplicationConfigMembershipPrimaryCluster:ClusterCrossClusterReplicationConfigMembershipPrimaryClusterfDetails of the primary cluster that is used as the replication source for all the secondary clusters.
┐
secondaryClustersПB┌*О:н
Л
redis>ClusterCrossClusterReplicationConfigMembershipSecondaryClusterЄgcp:redis/ClusterCrossClusterReplicationConfigMembershipSecondaryCluster:ClusterCrossClusterReplicationConfigMembershipSecondaryClusterJList of secondary clusters that are replicating from the primary cluster.
:Ъ
╦
redis<ClusterCrossClusterReplicationConfigMembershipPrimaryClusterЃgcp:redis/ClusterCrossClusterReplicationConfigMembershipPrimaryCluster:ClusterCrossClusterReplicationConfigMembershipPrimaryCluster╬
╦і
clusterB" yThe full resource path of the primary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
<
uidB" /(Output)
The unique id of the primary cluster.
:│
Л
redis>ClusterCrossClusterReplicationConfigMembershipSecondaryClusterЄgcp:redis/ClusterCrossClusterReplicationConfigMembershipSecondaryCluster:ClusterCrossClusterReplicationConfigMembershipSecondaryCluster▄
┘ќ
clusterB" ё(Output)
The full resource path of the secondary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
>
uidB" 1(Output)
The unique id of the secondary cluster.
:ђ
г
redis2ClusterCrossClusterReplicationConfigPrimaryClusterogcp:redis/ClusterCrossClusterReplicationConfigPrimaryCluster:ClusterCrossClusterReplicationConfigPrimaryCluster╬
╦і
clusterB" yThe full resource path of the primary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
<
uidB" /(Output)
The unique id of the primary cluster.
:ћ
▓
redis4ClusterCrossClusterReplicationConfigSecondaryClustersgcp:redis/ClusterCrossClusterReplicationConfigSecondaryCluster:ClusterCrossClusterReplicationConfigSecondaryCluster▄
┘ќ
clusterB" ё(Output)
The full resource path of the secondary cluster in the format: projects/{project}/locations/{region}/clusters/{cluster-id}
>
uidB" 1(Output)
The unique id of the secondary cluster.
:А
^
redisClusterDiscoveryEndpoint;gcp:redis/ClusterDiscoveryEndpoint:ClusterDiscoveryEndpointЙ
╗d
addressB" SOutput only. The IP allocated on the consumer network for the PSC forwarding rule.
J
portB <Output only. The port number of the exposed Redis endpoint.
є
	pscConfigB}:{
y
redis!ClusterDiscoveryEndpointPscConfigMgcp:redis/ClusterDiscoveryEndpointPscConfig:ClusterDiscoveryEndpointPscConfigxOutput only. Customer configuration for where the endpoint
is created and accessed from.
Structure is documented below.
:і
y
redis!ClusterDiscoveryEndpointPscConfigMgcp:redis/ClusterDiscoveryEndpointPscConfig:ClusterDiscoveryEndpointPscConfigї
Ѕє
networkB" uThe consumer network where the IP address resides, in the form of projects/{projectId}/global/networks/{network_id}.
:Ѓ
^
redisClusterMaintenancePolicy;gcp:redis/ClusterMaintenancePolicy:ClusterMaintenancePolicyа
ЮИ

createTimeB" Б(Output)
Output only. The time when the policy was created.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
й

updateTimeB" е(Output)
Output only. The time when the policy was last updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
Ъ
weeklyMaintenanceWindows»Bг*Е:д
Б
redis/ClusterMaintenancePolicyWeeklyMaintenanceWindowigcp:redis/ClusterMaintenancePolicyWeeklyMaintenanceWindow:ClusterMaintenancePolicyWeeklyMaintenanceWindowлOptional. Maintenance window that is applied to resources covered by this policy.
Minimum 1. For the current version, the maximum number
of weekly_window is expected to be one.
Structure is documented below.
:│
Б
redis/ClusterMaintenancePolicyWeeklyMaintenanceWindowigcp:redis/ClusterMaintenancePolicyWeeklyMaintenanceWindow:ClusterMaintenancePolicyWeeklyMaintenanceWindowі
Єі
day" ■Required. The day of week that maintenance updates occur.
- DAY_OF_WEEK_UNSPECIFIED: The day of the week is unspecified.
- MONDAY: Monday
- TUESDAY: Tuesday
- WEDNESDAY: Wednesday
- THURSDAY: Thursday
- FRIDAY: Friday
- SATURDAY: Saturday
- SUNDAY: Sunday
Possible values are: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
Л
durationB" Й(Output)
Output only. Duration of the maintenance window.
The current window is fixed at 1 hour.
A duration in seconds with up to nine fractional digits,
terminated by 's'. Example: "3.5s".
Б
	startTime─:┴
Й
redis8ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTime{gcp:redis/ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTime:ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTimeORequired. Start time of the window in UTC time.
Structure is documented below.
:ј
Й
redis8ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTime{gcp:redis/ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTime:ClusterMaintenancePolicyWeeklyMaintenanceWindowStartTime╩
Кб
hoursB њHours of day in 24 hour format. Should be from 0 to 23.
An API may choose to allow the value "24:00:00" for scenarios like business closing time.
?
minutesB .Minutes of hour of day. Must be from 0 to 59.
S
nanosB DFractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
Ѕ
secondsB xSeconds of minutes of the time. Must normally be from 0 to 59.
An API may allow the value 60 if it allows leap-seconds.
:ю
d
redisClusterMaintenanceSchedule?gcp:redis/ClusterMaintenanceSchedule:ClusterMaintenanceSchedule│
░н
endTimeB" ┬(Output)
Output only. The end time of any upcoming scheduled maintenance for this cluster.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
ч
scheduleDeadlineTimeB" ▄(Output)
Output only. The deadline that the maintenance schedule start time
can not go beyond, including reschedule.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
п
	startTimeB" ─(Output)
Output only. The start time of any upcoming scheduled maintenance for this cluster.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
:╝
^
redisClusterPersistenceConfig;gcp:redis/ClusterPersistenceConfig:ClusterPersistenceConfig┘
о№
	aofConfigB}:{
y
redis!ClusterPersistenceConfigAofConfigMgcp:redis/ClusterPersistenceConfigAofConfig:ClusterPersistenceConfigAofConfigaAOF configuration. This field will be ignored if mode is not AOF.
Structure is documented below.
№
modeB" ЯOptional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
- DISABLED: 	Persistence (both backup and restore) is disabled for the cluster.
- RDB: RDB based Persistence is enabled.
- AOF: AOF based Persistence is enabled.
Possible values are: `PERSISTENCE_MODE_UNSPECIFIED`, `DISABLED`, `RDB`, `AOF`.
№
	rdbConfigB}:{
y
redis!ClusterPersistenceConfigRdbConfigMgcp:redis/ClusterPersistenceConfigRdbConfig:ClusterPersistenceConfigRdbConfigaRDB configuration. This field will be ignored if mode is not RDB.
Structure is documented below.
:т
y
redis!ClusterPersistenceConfigAofConfigMgcp:redis/ClusterPersistenceConfigAofConfig:ClusterPersistenceConfigAofConfigу
Ср
appendFsyncB" ╦Optional. Available fsync modes.
- NO - Do not explicitly call fsync(). Rely on OS defaults.
- EVERYSEC - Call fsync() once per second in a background thread. A balance between performance and durability.
- ALWAYS - Call fsync() for earch write command.
Possible values are: `APPEND_FSYNC_UNSPECIFIED`, `NO`, `EVERYSEC`, `ALWAYS`.
:Ъ
y
redis!ClusterPersistenceConfigRdbConfigMgcp:redis/ClusterPersistenceConfigRdbConfig:ClusterPersistenceConfigRdbConfigА
ъР
rdbSnapshotPeriodB" кOptional. Available snapshot periods for scheduling.
- ONE_HOUR:	Snapshot every 1 hour.
- SIX_HOURS:	Snapshot every 6 hours.
- TWELVE_HOURS:	Snapshot every 12 hours.
- TWENTY_FOUR_HOURS:	Snapshot every 24 hours.
Possible values are: `SNAPSHOT_PERIOD_UNSPECIFIED`, `ONE_HOUR`, `SIX_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`.
Х
rdbSnapshotStartTimeB" ЌThe time that the first snapshot was/will be attempted, and to which
future snapshots will be aligned.
If not provided, the current time will be used.
:б
F
redisClusterPscConfig+gcp:redis/ClusterPscConfig:ClusterPscConfigО
нЛ
network" ┴Required. The consumer network where the network address of
the discovery endpoint will be reserved, in the form of
projects/{network_project_id_or_number}/global/networks/{network_id}.

- - -
:л
R
redisClusterPscConnection3gcp:redis/ClusterPscConnection:ClusterPscConnectionщ
Шd
addressB" SOutput only. The IP allocated on the consumer network for the PSC forwarding rule.
д
forwardingRuleB" ЇOutput only. The URI of the consumer side forwarding rule. Example: projects/{projectNumOrId}/regions/us-east1/forwardingRules/{resourceId}.
є
networkB" uThe consumer network where the IP address resides, in the form of projects/{projectId}/global/networks/{network_id}.
b
	projectIdB" OOutput only. The consumer projectId where the forwarding rule is created from.
x
pscConnectionIdB" _Output only. The PSC connection id of the forwarding rule connected to the service attachment.
:ё
F
redisClusterStateInfo+gcp:redis/ClusterStateInfo:ClusterStateInfo╣
Х│

updateInfojBh:f
d
redisClusterStateInfoUpdateInfo?gcp:redis/ClusterStateInfoUpdateInfo:ClusterStateInfoUpdateInfo9A nested object resource.
Structure is documented below.
:ч
d
redisClusterStateInfoUpdateInfo?gcp:redis/ClusterStateInfoUpdateInfo:ClusterStateInfoUpdateInfoњ
ЈF
targetReplicaCountB *Target number of replica nodes per shard.
E
targetShardCountB +Target number of shards for redis cluster.
:Ё
m
redisClusterZoneDistributionConfigEgcp:redis/ClusterZoneDistributionConfig:ClusterZoneDistributionConfigЊ
љЙ
modeB" »Immutable. The mode for zone distribution for Memorystore Redis cluster.
If not provided, MULTI_ZONE will be used as default
Possible values are: `MULTI_ZONE`, `SINGLE_ZONE`.
M
zoneB" ?Immutable. The zone for single zone Memorystore Redis cluster.
:Ц
a
redisInstanceMaintenancePolicy=gcp:redis/InstanceMaintenancePolicy:InstanceMaintenancePolicy┐
╝И

createTimeB" Б(Output)
Output only. The time when the policy was created.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
Ў
descriptionB" ЃOptional. Description of what this policy is for.
Create/Update methods return INVALID_ARGUMENT if the
length is greater than 512.
й

updateTimeB" е(Output)
Output only. The time when the policy was last updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
б
weeklyMaintenanceWindows▓B»*г:Е
д
redis0InstanceMaintenancePolicyWeeklyMaintenanceWindowkgcp:redis/InstanceMaintenancePolicyWeeklyMaintenanceWindow:InstanceMaintenancePolicyWeeklyMaintenanceWindowлOptional. Maintenance window that is applied to resources covered by this policy.
Minimum 1. For the current version, the maximum number
of weekly_window is expected to be one.
Structure is documented below.
:╣
д
redis0InstanceMaintenancePolicyWeeklyMaintenanceWindowkgcp:redis/InstanceMaintenancePolicyWeeklyMaintenanceWindow:InstanceMaintenancePolicyWeeklyMaintenanceWindowЇ
іі
day" ■Required. The day of week that maintenance updates occur.
- DAY_OF_WEEK_UNSPECIFIED: The day of the week is unspecified.
- MONDAY: Monday
- TUESDAY: Tuesday
- WEDNESDAY: Wednesday
- THURSDAY: Thursday
- FRIDAY: Friday
- SATURDAY: Saturday
- SUNDAY: Sunday
Possible values are: `DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
Л
durationB" Й(Output)
Output only. Duration of the maintenance window.
The current window is fixed at 1 hour.
A duration in seconds with up to nine fractional digits,
terminated by 's'. Example: "3.5s".
д
	startTimeК:─
┴
redis9InstanceMaintenancePolicyWeeklyMaintenanceWindowStartTime}gcp:redis/InstanceMaintenancePolicyWeeklyMaintenanceWindowStartTime:InstanceMaintenancePolicyWeeklyMaintenanceWindowStartTimeORequired. Start time of the window in UTC time.
Structure is documented below.
:Љ
┴
redis9InstanceMaintenancePolicyWeeklyMaintenanceWindowStartTime}gcp:redis/InstanceMaintenancePolicyWeeklyMaintenanceWindowStartTime:InstanceMaintenancePolicyWeeklyMaintenanceWindowStartTime╩
Кб
hoursB њHours of day in 24 hour format. Should be from 0 to 23.
An API may choose to allow the value "24:00:00" for scenarios like business closing time.
?
minutesB .Minutes of hour of day. Must be from 0 to 59.
S
nanosB DFractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
Ѕ
secondsB xSeconds of minutes of the time. Must normally be from 0 to 59.
An API may allow the value 60 if it allows leap-seconds.
:А
g
redisInstanceMaintenanceScheduleAgcp:redis/InstanceMaintenanceSchedule:InstanceMaintenanceScheduleх
▓Н
endTimeB" ├(Output)
Output only. The end time of any upcoming scheduled maintenance for this instance.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
ч
scheduleDeadlineTimeB" ▄(Output)
Output only. The deadline that the maintenance schedule start time
can not go beyond, including reschedule.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
┘
	startTimeB" ┼(Output)
Output only. The start time of any upcoming scheduled maintenance for this instance.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
:и
:
redisInstanceNode#gcp:redis/InstanceNode:InstanceNodey
wF
idB" :(Output)
Node identifying string. e.g. 'node-0', 'node-1'
-
zoneB" (Output)
Location of the node.
:Ѓ
a
redisInstancePersistenceConfig=gcp:redis/InstancePersistenceConfig:InstancePersistenceConfigЮ

џ
╣
persistenceModeB" ЪOptional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
- DISABLED: 	Persistence is disabled for the instance, and any existing snapshots are deleted.
- RDB: RDB based Persistence is enabled.
Possible values are: `DISABLED`, `RDB`.
Ъ
rdbNextSnapshotTimeB" Ђ(Output)
Output only. The next time that a snapshot attempt is scheduled to occur.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
├
rdbSnapshotPeriodB" ДOptional. Available snapshot periods for scheduling.
- ONE_HOUR:	Snapshot every 1 hour.
- SIX_HOURS:	Snapshot every 6 hours.
- TWELVE_HOURS:	Snapshot every 12 hours.
- TWENTY_FOUR_HOURS:	Snapshot every 24 hours.
Possible values are: `ONE_HOUR`, `SIX_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`.
з
rdbSnapshotStartTimeB" нOptional. Date and time that the first snapshot was/will be attempted,
and to which future snapshots will be aligned. If not provided,
the current time will be used.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution
and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
:├
R
redisInstanceServerCaCert3gcp:redis/InstanceServerCaCert:InstanceServerCaCertВ
ж;
certB" -(Output)
The certificate data in PEM format.
H

createTimeB" 4(Output)
The time when the certificate was created.
D

expireTimeB" 0(Output)
The time when the certificate expires.
Q
serialNumberB" ;(Output)
Serial number, as extracted from the certificate.
G
sha1FingerprintB" .(Output)
Sha1 Fingerprint of the certificate.
:§
j
redisgetInstanceMaintenancePolicyCgcp:redis/getInstanceMaintenancePolicy:getInstanceMaintenancePolicyј
ІГ

createTime" џOutput only. The time when the policy was created.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
Ќ
description" ЃOptional. Description of what this policy is for.
Create/Update methods return INVALID_ARGUMENT if the
length is greater than 512.
▓

updateTime" ЪOutput only. The time when the policy was last updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
Ѕ
weeklyMaintenanceWindowsИ*х:▓
»
redis3getInstanceMaintenancePolicyWeeklyMaintenanceWindowqgcp:redis/getInstanceMaintenancePolicyWeeklyMaintenanceWindow:getInstanceMaintenancePolicyWeeklyMaintenanceWindow▒Optional. Maintenance window that is applied to resources covered by this policy.
Minimum 1. For the current version, the maximum number
of weekly_window is expected to be one.
:ц
»
redis3getInstanceMaintenancePolicyWeeklyMaintenanceWindowqgcp:redis/getInstanceMaintenancePolicyWeeklyMaintenanceWindow:getInstanceMaintenancePolicyWeeklyMaintenanceWindow№
Вѕ
day" ЧRequired. The day of week that maintenance updates occur.

- DAY_OF_WEEK_UNSPECIFIED: The day of the week is unspecified.
- MONDAY: Monday
- TUESDAY: Tuesday
- WEDNESDAY: Wednesday
- THURSDAY: Thursday
- FRIDAY: Friday
- SATURDAY: Saturday
- SUNDAY: Sunday Possible values: ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]
к
duration" хOutput only. Duration of the maintenance window.
The current window is fixed at 1 hour.
A duration in seconds with up to nine fractional digits,
terminated by 's'. Example: "3.5s".
Ћ

startTimesн*Л:╬
╦
redis<getInstanceMaintenancePolicyWeeklyMaintenanceWindowStartTimeЃgcp:redis/getInstanceMaintenancePolicyWeeklyMaintenanceWindowStartTime:getInstanceMaintenancePolicyWeeklyMaintenanceWindowStartTime0Required. Start time of the window in UTC time.
:Њ
╦
redis<getInstanceMaintenancePolicyWeeklyMaintenanceWindowStartTimeЃgcp:redis/getInstanceMaintenancePolicyWeeklyMaintenanceWindowStartTime:getInstanceMaintenancePolicyWeeklyMaintenanceWindowStartTime┬
┐а
hours њHours of day in 24 hour format. Should be from 0 to 23.
An API may choose to allow the value "24:00:00" for scenarios like business closing time.
=
minutes .Minutes of hour of day. Must be from 0 to 59.
Q
nanos DFractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
Є
seconds xSeconds of minutes of the time. Must normally be from 0 to 59.
An API may allow the value 60 if it allows leap-seconds.
:Ѕ
p
redisgetInstanceMaintenanceScheduleGgcp:redis/getInstanceMaintenanceSchedule:getInstanceMaintenanceScheduleћ
Љ╩
endTime" ║Output only. The end time of any upcoming scheduled maintenance for this instance.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
­
scheduleDeadlineTime" МOutput only. The deadline that the maintenance schedule start time
can not go beyond, including reschedule.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
╬
	startTime" ╝Output only. The start time of any upcoming scheduled maintenance for this instance.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits.
:ф
C
redisgetInstanceNode)gcp:redis/getInstanceNode:getInstanceNodec
a;
id" 1Node identifying string. e.g. 'node-0', 'node-1'
"
zone" Location of the node.
:э

j
redisgetInstancePersistenceConfigCgcp:redis/getInstancePersistenceConfig:getInstancePersistenceConfigѕ

Ё
х
persistenceMode" ЮOptional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.

- DISABLED: 	Persistence is disabled for the instance, and any existing snapshots are deleted.
- RDB: RDB based Persistence is enabled. Possible values: ["DISABLED", "RDB"]
ћ
rdbNextSnapshotTime" ЭOutput only. The next time that a snapshot attempt is scheduled to occur.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
┐
rdbSnapshotPeriod" ЦOptional. Available snapshot periods for scheduling.

- ONE_HOUR:	Snapshot every 1 hour.
- SIX_HOURS:	Snapshot every 6 hours.
- TWELVE_HOURS:	Snapshot every 12 hours.
- TWENTY_FOUR_HOURS:	Snapshot every 24 hours. Possible values: ["ONE_HOUR", "SIX_HOURS", "TWELVE_HOURS", "TWENTY_FOUR_HOURS"]
ы
rdbSnapshotStartTime" нOptional. Date and time that the first snapshot was/will be attempted,
and to which future snapshots will be aligned. If not provided,
the current time will be used.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution
and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
:Ћ
[
redisgetInstanceServerCaCert9gcp:redis/getInstanceServerCaCert:getInstanceServerCaCertх
▓0
cert" $The certificate data in PEM format.
=

createTime" +The time when the certificate was created.
9

expireTime" 'The time when the certificate expires.
F
serialNumber" 2Serial number, as extracted from the certificate.
<
sha1Fingerprint" %Sha1 Fingerprint of the certificate.
:Ф
q
runtimeconfigConfigIamBindingConditionEgcp:runtimeconfig/ConfigIamBindingCondition:ConfigIamBindingCondition6
4
descriptionB" 

expression" 
title" :е
n
runtimeconfigConfigIamMemberConditionCgcp:runtimeconfig/ConfigIamMemberCondition:ConfigIamMemberCondition6
4
descriptionB" 

expression" 
title" :ё
Џ
secretmanager'RegionalSecretCustomerManagedEncryptionagcp:secretmanager/RegionalSecretCustomerManagedEncryption:RegionalSecretCustomerManagedEncryptiond
b`

kmsKeyName" NThe resource name of the Cloud KMS CryptoKey used to encrypt secret payloads.
:Я
Ѕ
secretmanager!RegionalSecretIamBindingConditionUgcp:secretmanager/RegionalSecretIamBindingCondition:RegionalSecretIamBindingConditionЛ
╬
descriptionB" `

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:П
є
secretmanager RegionalSecretIamMemberConditionSgcp:secretmanager/RegionalSecretIamMemberCondition:RegionalSecretIamMemberConditionЛ
╬
descriptionB" `

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:└
h
secretmanagerRegionalSecretRotation?gcp:secretmanager/RegionalSecretRotation:RegionalSecretRotationМ
лє
nextRotationTimeB" вTimestamp in UTC at which the Secret is scheduled to rotate.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
─
rotationPeriodB" ФThe Duration between rotation notifications. Must be in seconds and at least 3600s (1h)
and at most 3153600000s (100 years). If rotationPeriod is set, `next_rotation_time` must
be set. `next_rotation_time` will be advanced by this period when the service
automatically sends rotation notifications.
:ж
_
secretmanagerRegionalSecretTopic9gcp:secretmanager/RegionalSecretTopic:RegionalSecretTopicЁ
ѓ 
name" ЫThe resource name of the Pub/Sub topic that will be published to, in the following format:
projects/*/topics/*. For publication to succeed, the Secret Manager Service
Agent service account must have pubsub.publisher permissions on the topic.
:Ф
░
secretmanager.RegionalSecretVersionCustomerManagedEncryptionogcp:secretmanager/RegionalSecretVersionCustomerManagedEncryption:RegionalSecretVersionCustomerManagedEncryptionv
tr
kmsKeyVersionNameB" W(Output)
The resource name of the Cloud KMS CryptoKey used to encrypt secret payloads.
:К
q
secretmanagerSecretIamBindingConditionEgcp:secretmanager/SecretIamBindingCondition:SecretIamBindingConditionЛ
╬
descriptionB" `

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:─
n
secretmanagerSecretIamMemberConditionCgcp:secretmanager/SecretIamMemberCondition:SecretIamMemberConditionЛ
╬
descriptionB" `

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:Х
Y
secretmanagerSecretReplication5gcp:secretmanager/SecretReplication:SecretReplicationп
Н┌
autokBi:g
e
secretmanagerSecretReplicationAuto=gcp:secretmanager/SecretReplicationAuto:SecretReplicationAutoeThe Secret will automatically be replicated without any restrictions.
Structure is documented below.
ш
userManagedђB~:|
z
secretmanagerSecretReplicationUserManagedKgcp:secretmanager/SecretReplicationUserManaged:SecretReplicationUserManagedcThe Secret will be replicated to the regions specified by the user.
Structure is documented below.
:Ы
e
secretmanagerSecretReplicationAuto=gcp:secretmanager/SecretReplicationAuto:SecretReplicationAutoѕ
Ёѓ
customerManagedEncryption╣BХ:│
░
secretmanager.SecretReplicationAutoCustomerManagedEncryptionogcp:secretmanager/SecretReplicationAutoCustomerManagedEncryption:SecretReplicationAutoCustomerManagedEncryptionеThe customer-managed encryption configuration of the Secret.
If no configuration is provided, Google-managed default
encryption is used.
Structure is documented below.
:ф
░
secretmanager.SecretReplicationAutoCustomerManagedEncryptionogcp:secretmanager/SecretReplicationAutoCustomerManagedEncryption:SecretReplicationAutoCustomerManagedEncryptionu
sq

kmsKeyName" _Describes the Cloud KMS encryption key that will be used to protect destination secret.

- - -
:ѓ
z
secretmanagerSecretReplicationUserManagedKgcp:secretmanager/SecretReplicationUserManaged:SecretReplicationUserManagedЃ
ђ§
replicasў*Ћ:њ
Ј
secretmanager#SecretReplicationUserManagedReplicaYgcp:secretmanager/SecretReplicationUserManagedReplica:SecretReplicationUserManagedReplicaVThe list of Replicas for this Secret. Cannot be empty.
Structure is documented below.
:╩
Ј
secretmanager#SecretReplicationUserManagedReplicaYgcp:secretmanager/SecretReplicationUserManagedReplica:SecretReplicationUserManagedReplicaх
▓¤
customerManagedEncryptionСBр:я
█
secretmanager<SecretReplicationUserManagedReplicaCustomerManagedEncryptionІgcp:secretmanager/SecretReplicationUserManagedReplicaCustomerManagedEncryption:SecretReplicationUserManagedReplicaCustomerManagedEncryptionKCustomer Managed Encryption for the secret.
Structure is documented below.
^
location" NThe canonical IDs of the location to replicate data. For example: "us-east1".
:Н
█
secretmanager<SecretReplicationUserManagedReplicaCustomerManagedEncryptionІgcp:secretmanager/SecretReplicationUserManagedReplicaCustomerManagedEncryption:SecretReplicationUserManagedReplicaCustomerManagedEncryptionu
sq

kmsKeyName" _Describes the Cloud KMS encryption key that will be used to protect destination secret.

- - -
:е
P
secretmanagerSecretRotation/gcp:secretmanager/SecretRotation:SecretRotationМ
лє
nextRotationTimeB" вTimestamp in UTC at which the Secret is scheduled to rotate.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
─
rotationPeriodB" ФThe Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years).
If rotationPeriod is set, `next_rotation_time` must be set. `next_rotation_time` will be advanced by this period when the service automatically sends rotation notifications.
:Л
G
secretmanagerSecretTopic)gcp:secretmanager/SecretTopic:SecretTopicЁ
ѓ 
name" ЫThe resource name of the Pub/Sub topic that will be published to, in the following format: projects/*/topics/*.
For publication to succeed, the Secret Manager Service Agent service account must have pubsub.publisher permissions on the topic.
:Ї
ц
secretmanager*getRegionalSecretCustomerManagedEncryptionggcp:secretmanager/getRegionalSecretCustomerManagedEncryption:getRegionalSecretCustomerManagedEncryptiond
b`

kmsKeyName" NThe resource name of the Cloud KMS CryptoKey used to encrypt secret payloads.
:┼
q
secretmanagergetRegionalSecretRotationEgcp:secretmanager/getRegionalSecretRotation:getRegionalSecretRotation¤
╠ё
nextRotationTime" вTimestamp in UTC at which the Secret is scheduled to rotate.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
┬
rotationPeriod" ФThe Duration between rotation notifications. Must be in seconds and at least 3600s (1h)
and at most 3153600000s (100 years). If rotationPeriod is set, 'next_rotation_time' must
be set. 'next_rotation_time' will be advanced by this period when the service
automatically sends rotation notifications.
:Ы
h
secretmanagergetRegionalSecretTopic?gcp:secretmanager/getRegionalSecretTopic:getRegionalSecretTopicЁ
ѓ 
name" ЫThe resource name of the Pub/Sub topic that will be published to, in the following format:
projects/*/topics/*. For publication to succeed, the Secret Manager Service
Agent service account must have pubsub.publisher permissions on the topic.
:Е
╣
secretmanager1getRegionalSecretVersionCustomerManagedEncryptionugcp:secretmanager/getRegionalSecretVersionCustomerManagedEncryption:getRegionalSecretVersionCustomerManagedEncryptionk
ig
kmsKeyVersionName" NThe resource name of the Cloud KMS CryptoKey used to encrypt secret payloads.
:Ё
n
secretmanagergetRegionalSecretsSecretCgcp:secretmanager/getRegionalSecretsSecret:getRegionalSecretsSecretњ
Ј@
annotations2" +Custom metadata about the regional secret.
E

createTime" 3The time at which the regional secret was created.
и
customerManagedEncryptions┬*┐:╝
╣
secretmanager1getRegionalSecretsSecretCustomerManagedEncryptionugcp:secretmanager/getRegionalSecretsSecretCustomerManagedEncryption:getRegionalSecretsSecretCustomerManagedEncryptionTCustomer Managed Encryption for the regional secret.
Structure is documented below.

effectiveAnnotations2" 
effectiveLabels2" T

expireTime" BTimestamp in UTC when the regional secret is scheduled to expire.
=
labels2" -The labels assigned to this regional secret.
5
location" %The location of the regional secret.
N
name" BThe resource name of the Pub/Sub topic that will be published to.
&
project" The ID of the project.
ё
pulumiLabels2" nThe combination of labels configured directly on the resource
 and default labels configured on the provider.
Ы
	rotationsЈ*ї:Ѕ
є
secretmanager getRegionalSecretsSecretRotationSgcp:secretmanager/getRegionalSecretsSecretRotation:getRegionalSecretsSecretRotationSThe rotation time and period for a regional secret.
Structure is documented below.
1
secretId" !The unique name of the resource.
─
topicsё*Ђ:
}
secretmanagergetRegionalSecretsSecretTopicMgcp:secretmanager/getRegionalSecretsSecretTopic:getRegionalSecretsSecretTopic▓A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the regional secret or its versions.
Structure is documented below.
Й
ttl" ▓The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
terminated by 's'. Example: "3.5s". Only one of 'ttl' or 'expire_time' can be provided.
D
versionAliases2" ,Mapping from version alias to version name.
R
versionDestroyTtl" 9The version destroy ttl for the regional secret version.
:г
╣
secretmanager1getRegionalSecretsSecretCustomerManagedEncryptionugcp:secretmanager/getRegionalSecretsSecretCustomerManagedEncryption:getRegionalSecretsSecretCustomerManagedEncryptionn
lj

kmsKeyName" XDescribes the Cloud KMS encryption key that will be used to protect destination secret.
:Ф
є
secretmanager getRegionalSecretsSecretRotationSgcp:secretmanager/getRegionalSecretsSecretRotation:getRegionalSecretsSecretRotationЪ
юU
nextRotationTime" =Timestamp in UTC at which the secret is scheduled to rotate.
C
rotationPeriod" -The Duration between rotation notifications.
:М
}
secretmanagergetRegionalSecretsSecretTopicMgcp:secretmanager/getRegionalSecretsSecretTopic:getRegionalSecretsSecretTopicR
PN
name" BThe resource name of the Pub/Sub topic that will be published to.
:ў
b
secretmanagergetSecretReplication;gcp:secretmanager/getSecretReplication:getSecretReplication▒
«┼
autost*r:p
n
secretmanagergetSecretReplicationAutoCgcp:secretmanager/getSecretReplicationAuto:getSecretReplicationAutoFThe Secret will automatically be replicated without any restrictions.
с
userManagedsї*Ѕ:є
Ѓ
secretmanagergetSecretReplicationUserManagedQgcp:secretmanager/getSecretReplicationUserManaged:getSecretReplicationUserManagedDThe Secret will be replicated to the regions specified by the user.
:Т
n
secretmanagergetSecretReplicationAutoCgcp:secretmanager/getSecretReplicationAuto:getSecretReplicationAutoз
­ь
customerManagedEncryptions┬*┐:╝
╣
secretmanager1getSecretReplicationAutoCustomerManagedEncryptionugcp:secretmanager/getSecretReplicationAutoCustomerManagedEncryption:getSecretReplicationAutoCustomerManagedEncryptionЅThe customer-managed encryption configuration of the Secret.
If no configuration is provided, Google-managed default
encryption is used.
:б
╣
secretmanager1getSecretReplicationAutoCustomerManagedEncryptionugcp:secretmanager/getSecretReplicationAutoCustomerManagedEncryption:getSecretReplicationAutoCustomerManagedEncryptiond
b`

kmsKeyName" NThe resource name of the Cloud KMS CryptoKey used to encrypt secret payloads.
:Ш
Ѓ
secretmanagergetSecretReplicationUserManagedQgcp:secretmanager/getSecretReplicationUserManaged:getSecretReplicationUserManagedь
Жу
replicasА*ъ:Џ
ў
secretmanager&getSecretReplicationUserManagedReplica_gcp:secretmanager/getSecretReplicationUserManagedReplica:getSecretReplicationUserManagedReplica7The list of Replicas for this Secret. Cannot be empty.
:Й
ў
secretmanager&getSecretReplicationUserManagedReplica_gcp:secretmanager/getSecretReplicationUserManagedReplica:getSecretReplicationUserManagedReplicaа
Ю║
customerManagedEncryptionsь*Ж:у
С
secretmanager?getSecretReplicationUserManagedReplicaCustomerManagedEncryptionЉgcp:secretmanager/getSecretReplicationUserManagedReplicaCustomerManagedEncryption:getSecretReplicationUserManagedReplicaCustomerManagedEncryption,Customer Managed Encryption for the secret.
^
location" NThe canonical IDs of the location to replicate data. For example: "us-east1".
:О
С
secretmanager?getSecretReplicationUserManagedReplicaCustomerManagedEncryptionЉgcp:secretmanager/getSecretReplicationUserManagedReplicaCustomerManagedEncryption:getSecretReplicationUserManagedReplicaCustomerManagedEncryptionn
lj

kmsKeyName" XDescribes the Cloud KMS encryption key that will be used to protect destination secret.
:Г
Y
secretmanagergetSecretRotation5gcp:secretmanager/getSecretRotation:getSecretRotation¤
╠ё
nextRotationTime" вTimestamp in UTC at which the Secret is scheduled to rotate.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
┬
rotationPeriod" ФThe Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years).
If rotationPeriod is set, 'next_rotation_time' must be set. 'next_rotation_time' will be advanced by this period when the service automatically sends rotation notifications.
:┌
P
secretmanagergetSecretTopic/gcp:secretmanager/getSecretTopic:getSecretTopicЁ
ѓ 
name" ЫThe resource name of the Pub/Sub topic that will be published to, in the following format: projects/*/topics/*.
For publication to succeed, the Secret Manager Service Agent service account must have pubsub.publisher permissions on the topic.
:Э
V
secretmanagergetSecretsSecret3gcp:secretmanager/getSecretsSecret:getSecretsSecretЮ
џ7
annotations2" "Custom metadata about the secret.
<

createTime" *The time at which the Secret was created.

effectiveAnnotations2" 
effectiveLabels2" K

expireTime" 9Timestamp in UTC when the Secret is scheduled to expire.
4
labels2" $The labels assigned to this Secret.
N
name" BThe resource name of the Pub/Sub topic that will be published to.
&
project" The ID of the project.
ё
pulumiLabels2" nThe combination of labels configured directly on the resource
 and default labels configured on the provider.
­
replications}*{:y
w
secretmanagergetSecretsSecretReplicationIgcp:secretmanager/getSecretsSecretReplication:getSecretsSecretReplicationaThe replication policy of the secret data attached to the Secret.
Structure is documented below.
═
	rotationst*r:p
n
secretmanagergetSecretsSecretRotationCgcp:secretmanager/getSecretsSecretRotation:getSecretsSecretRotationJThe rotation time and period for a Secret.
Structure is documented below.
8
secretId" (This must be unique within the project.
А
topicsk*i:g
e
secretmanagergetSecretsSecretTopic=gcp:secretmanager/getSecretsSecretTopic:getSecretsSecretTopicЕA list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.
Structure is documented below.
х
ttl" ЕThe TTL for the Secret.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
Only one of 'ttl' or 'expire_time' can be provided.
D
versionAliases2" ,Mapping from version alias to version name.
I
versionDestroyTtl" 0The version destroy ttl for the secret version.
:Ў
w
secretmanagergetSecretsSecretReplicationIgcp:secretmanager/getSecretsSecretReplication:getSecretsSecretReplicationЮ
џ§
autosї*Ѕ:є
Ѓ
secretmanagergetSecretsSecretReplicationAutoQgcp:secretmanager/getSecretsSecretReplicationAuto:getSecretsSecretReplicationAutoeThe Secret will automatically be replicated without any restrictions.
Structure is documented below.
Ќ
userManagedsА*ъ:Џ
ў
secretmanager&getSecretsSecretReplicationUserManaged_gcp:secretmanager/getSecretsSecretReplicationUserManaged:getSecretsSecretReplicationUserManagedcThe Secret will be replicated to the regions specified by the user.
Structure is documented below.
:М
Ѓ
secretmanagergetSecretsSecretReplicationAutoQgcp:secretmanager/getSecretsSecretReplicationAuto:getSecretsSecretReplicationAuto╩
К─
customerManagedEncryptionsп*Н:м
¤
secretmanager8getSecretsSecretReplicationAutoCustomerManagedEncryptionЃgcp:secretmanager/getSecretsSecretReplicationAutoCustomerManagedEncryption:getSecretsSecretReplicationAutoCustomerManagedEncryptionKCustomer Managed Encryption for the secret.
Structure is documented below.
:┬
¤
secretmanager8getSecretsSecretReplicationAutoCustomerManagedEncryptionЃgcp:secretmanager/getSecretsSecretReplicationAutoCustomerManagedEncryption:getSecretsSecretReplicationAutoCustomerManagedEncryptionn
lj

kmsKeyName" XDescribes the Cloud KMS encryption key that will be used to protect destination secret.
:«
ў
secretmanager&getSecretsSecretReplicationUserManaged_gcp:secretmanager/getSecretsSecretReplicationUserManaged:getSecretsSecretReplicationUserManagedљ
Їі
replicasХ*│:░
Г
secretmanager-getSecretsSecretReplicationUserManagedReplicamgcp:secretmanager/getSecretsSecretReplicationUserManagedReplica:getSecretsSecretReplicationUserManagedReplicaEThe list of Replicas for this Secret.
Structure is documented below.
:Ь
Г
secretmanager-getSecretsSecretReplicationUserManagedReplicamgcp:secretmanager/getSecretsSecretReplicationUserManagedReplica:getSecretsSecretReplicationUserManagedReplica╗
ИЬ
customerManagedEncryptionsѓ* :Ч
щ
secretmanagerFgetSecretsSecretReplicationUserManagedReplicaCustomerManagedEncryptionЪgcp:secretmanager/getSecretsSecretReplicationUserManagedReplicaCustomerManagedEncryption:getSecretsSecretReplicationUserManagedReplicaCustomerManagedEncryptionKCustomer Managed Encryption for the secret.
Structure is documented below.
E
location" 5The canonical IDs of the location to replicate data.
:В
щ
secretmanagerFgetSecretsSecretReplicationUserManagedReplicaCustomerManagedEncryptionЪgcp:secretmanager/getSecretsSecretReplicationUserManagedReplicaCustomerManagedEncryption:getSecretsSecretReplicationUserManagedReplicaCustomerManagedEncryptionn
lj

kmsKeyName" XDescribes the Cloud KMS encryption key that will be used to protect destination secret.
:њ
n
secretmanagergetSecretsSecretRotationCgcp:secretmanager/getSecretsSecretRotation:getSecretsSecretRotationЪ
юU
nextRotationTime" =Timestamp in UTC at which the Secret is scheduled to rotate.
C
rotationPeriod" -The Duration between rotation notifications.
:╗
e
secretmanagergetSecretsSecretTopic=gcp:secretmanager/getSecretsSecretTopic:getSecretsSecretTopicR
PN
name" BThe resource name of the Pub/Sub topic that will be published to.
:џ
h
securesourcemanagerInstanceHostConfig=gcp:securesourcemanager/InstanceHostConfig:InstanceHostConfigГ
ф$
apiB" (Output)
API hostname.
-
gitHttpB" (Output)
Git HTTP hostname.
+
gitSshB" (Output)
Git SSH hostname.
&
htmlB" (Output)
HTML hostname.
:Й
Ѓ
securesourcemanagerInstanceIamBindingConditionOgcp:securesourcemanager/InstanceIamBindingCondition:InstanceIamBindingCondition6
4
descriptionB" 

expression" 
title" :╗
ђ
securesourcemanagerInstanceIamMemberConditionMgcp:securesourcemanager/InstanceIamMemberCondition:InstanceIamMemberCondition6
4
descriptionB" 

expression" 
title" :Ќ
q
securesourcemanagerInstancePrivateConfigCgcp:securesourcemanager/InstancePrivateConfig:InstancePrivateConfigА
ъ|
caPool" nCA pool resource, resource must in the format of `projects/{project}/locations/{location}/caPools/{ca_pool}`.
▓
httpServiceAttachmentB" њ(Output)
Service Attachment for HTTP, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
6
	isPrivate
 %'Indicate if it's private instance.'
░
sshServiceAttachmentB" Љ(Output)
Service Attachment for SSH, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
:щ
Г
securesourcemanager)InstanceWorkforceIdentityFederationConfigkgcp:securesourcemanager/InstanceWorkforceIdentityFederationConfig:InstanceWorkforceIdentityFederationConfigG
EC
enabled
 4'Whether Workforce Identity Federation is enabled.'
:─
Ѕ
securesourcemanagerRepositoryIamBindingConditionSgcp:securesourcemanager/RepositoryIamBindingCondition:RepositoryIamBindingCondition6
4
descriptionB" 

expression" 
title" :┴
є
securesourcemanagerRepositoryIamMemberConditionQgcp:securesourcemanager/RepositoryIamMemberCondition:RepositoryIamMemberCondition6
4
descriptionB" 

expression" 
title" :┤
w
securesourcemanagerRepositoryInitialConfigGgcp:securesourcemanager/RepositoryInitialConfig:RepositoryInitialConfigИ
х>
defaultBranchB" 'Default branch name of the repository.
р

gitignoresB*" ╩List of gitignore template names user can choose from.
Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
Л
licenseB" ┐License template name user can choose from.
Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
║
readmeB" ЕREADME template name.
Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
:├
Y
securesourcemanagerRepositoryUri3gcp:securesourcemanager/RepositoryUri:RepositoryUriт
Р5
apiB" ((Output)
API is the URI for API access.
N
gitHttpsB" <(Output)
git_https is the git HTTPS URI for git operations.
Y
htmlB" K(Output)
HTML is the URI for the user to view the repository in a browser.
:Л
ѓ
securitycenterFolderCustomModuleCustomConfigPgcp:securitycenter/FolderCustomModuleCustomConfig:FolderCustomModuleCustomConfig╔
кч
customOutput»Bг:Е
д
securitycenter*FolderCustomModuleCustomConfigCustomOutputhgcp:securitycenter/FolderCustomModuleCustomConfigCustomOutput:FolderCustomModuleCustomConfigCustomOutput9Custom output properties.
Structure is documented below.
І
descriptionB" шText that describes the vulnerability or misconfiguration that the custom
module detects. This explanation is returned with each finding instance to
help investigators understand the detected issue. The text must be enclosed in quotation marks.
┘
	predicateБ:а
Ю
securitycenter'FolderCustomModuleCustomConfigPredicatebgcp:securitycenter/FolderCustomModuleCustomConfigPredicate:FolderCustomModuleCustomConfigPredicateЦThe CEL expression to evaluate to produce findings. When the expression evaluates
to true against a resource, a finding is generated.
Structure is documented below.
Ы
recommendation" █An explanation of the recommended steps that security teams can take to resolve
the detected issue. This explanation is returned with each finding generated by
this module in the nextSteps property of the finding JSON.
П
resourceSelectorИ:х
▓
securitycenter.FolderCustomModuleCustomConfigResourceSelectorpgcp:securitycenter/FolderCustomModuleCustomConfigResourceSelector:FolderCustomModuleCustomConfigResourceSelectorЇThe resource types that the custom module operates on. Each custom module
can specify up to 5 resource types.
Structure is documented below.
є
severity" vThe severity to assign to findings generated by the module.
Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
:Т
д
securitycenter*FolderCustomModuleCustomConfigCustomOutputhgcp:securitycenter/FolderCustomModuleCustomConfigCustomOutput:FolderCustomModuleCustomConfigCustomOutput║
и┤

properties╩BК*─:┴
Й
securitycenter2FolderCustomModuleCustomConfigCustomOutputPropertyxgcp:securitycenter/FolderCustomModuleCustomConfigCustomOutputProperty:FolderCustomModuleCustomConfigCustomOutputPropertyYA list of custom output properties to add to the finding.
Structure is documented below.
:м
Й
securitycenter2FolderCustomModuleCustomConfigCustomOutputPropertyxgcp:securitycenter/FolderCustomModuleCustomConfigCustomOutputProperty:FolderCustomModuleCustomConfigCustomOutputPropertyј
І:
nameB" ,Name of the property for the custom output.
╠
valueExpressionшBЫ:№
В
securitycenterAFolderCustomModuleCustomConfigCustomOutputPropertyValueExpressionќgcp:securitycenter/FolderCustomModuleCustomConfigCustomOutputPropertyValueExpression:FolderCustomModuleCustomConfigCustomOutputPropertyValueExpression└The CEL expression for the custom output. A resource property can be specified
to return the value of the property or a text string enclosed in quotation marks.
Structure is documented below.
:і
В
securitycenterAFolderCustomModuleCustomConfigCustomOutputPropertyValueExpressionќgcp:securitycenter/FolderCustomModuleCustomConfigCustomOutputPropertyValueExpression:FolderCustomModuleCustomConfigCustomOutputPropertyValueExpressionў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:╗
Ю
securitycenter'FolderCustomModuleCustomConfigPredicatebgcp:securitycenter/FolderCustomModuleCustomConfigPredicate:FolderCustomModuleCustomConfigPredicateў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:ё
▓
securitycenter.FolderCustomModuleCustomConfigResourceSelectorpgcp:securitycenter/FolderCustomModuleCustomConfigResourceSelector:FolderCustomModuleCustomConfigResourceSelectorM
KI
resourceTypes*" 2The resource types to run the detector on.

- - -
:╬
Ю
securitycenter'FolderNotificationConfigStreamingConfigbgcp:securitycenter/FolderNotificationConfigStreamingConfig:FolderNotificationConfigStreamingConfigФ
еЦ
filter" ќExpression that defines the filter to apply across create/update
events of assets or findings as specified by the event type. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.

- - -
:я
y
securitycenterInstanceIamBindingConditionJgcp:securitycenter/InstanceIamBindingCondition:InstanceIamBindingConditiona
_>
descriptionB" )An optional description of the instance.


expression" 
title" :█
v
securitycenterInstanceIamMemberConditionHgcp:securitycenter/InstanceIamMemberCondition:InstanceIamMemberConditiona
_>
descriptionB" )An optional description of the instance.


expression" 
title" :в
Т
securitycenter?ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigњgcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfig:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfig 
Ч▀
customOutputЊBљ:Ї
і
securitycenterKManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputфgcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutput:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutput9Custom output properties.
Structure is documented below.
І
descriptionB" шText that describes the vulnerability or misconfiguration that the custom
module detects. This explanation is returned with each finding instance to
help investigators understand the detected issue. The text must be enclosed in quotation marks.
└
	predicateіBЄ:ё
Ђ
securitycenterHManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateцgcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicate:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateЦThe CEL expression to evaluate to produce findings. When the expression evaluates
to true against a resource, a finding is generated.
Structure is documented below.
З
recommendationB" █An explanation of the recommended steps that security teams can take to resolve
the detected issue. This explanation is returned with each finding generated by
this module in the nextSteps property of the finding JSON.
─
resourceSelectorЪBю:Ў
ќ
securitycenterOManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelector▓gcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelector:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorЇThe resource types that the custom module operates on. Each custom module
can specify up to 5 resource types.
Structure is documented below.
ѕ
severityB" vThe severity to assign to findings generated by the module.
Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
:«
і
securitycenterKManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputфgcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutput:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputъ
Џў

properties«BФ*е:Ц
б
securitycenterSManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputProperty║gcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputProperty:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyYA list of custom output properties to add to the finding.
Structure is documented below.
:Ў
б
securitycenterSManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputProperty║gcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputProperty:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyы
Ь:
nameB" ,Name of the property for the custom output.
»
valueExpressionпBН:м
¤
securitycenterbManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionпgcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpression:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpression└The CEL expression for the custom output. A resource property can be specified
to return the value of the property or a text string enclosed in quotation marks.
Structure is documented below.
:ь
¤
securitycenterbManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionпgcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpression:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:Ъ
Ђ
securitycenterHManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateцgcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicate:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigPredicateў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:р
ќ
securitycenterOManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelector▓gcp:securitycenter/ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelector:ManagementFolderSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorF
DB
resourceTypes*" +The resource types to run the detector on.
:Е
Э
securitycenterEManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigъgcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfig:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigФ
еы
customOutputЦBб:Ъ
ю
securitycenterQManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputХgcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutput:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutput9Custom output properties.
Structure is documented below.
І
descriptionB" шText that describes the vulnerability or misconfiguration that the custom
module detects. This explanation is returned with each finding instance to
help investigators understand the detected issue. The text must be enclosed in quotation marks.
¤
	predicateЎ:ќ
Њ
securitycenterNManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicate░gcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicate:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicateЦThe CEL expression to evaluate to produce findings. When the expression evaluates
to true against a resource, a finding is generated.
Structure is documented below.
Ы
recommendation" █An explanation of the recommended steps that security teams can take to resolve
the detected issue. This explanation is returned with each finding generated by
this module in the nextSteps property of the finding JSON.
М
resourceSelector«:Ф
е
securitycenterUManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorЙgcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelector:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorЇThe resource types that the custom module operates on. Each custom module
can specify up to 5 resource types.
Structure is documented below.
є
severity" vThe severity to assign to findings generated by the module.
Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
:м
ю
securitycenterQManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputХgcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutput:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutput░
Гф

properties└Bй*║:и
┤
securitycenterYManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyкgcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputProperty:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyYA list of custom output properties to add to the finding.
Structure is documented below.
:й
┤
securitycenterYManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyкgcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputProperty:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyЃ
ђ:
nameB" ,Name of the property for the custom output.
┴
valueExpressionЖBу:С
р
securitycenterhManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionСgcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpression:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpression└The CEL expression for the custom output. A resource property can be specified
to return the value of the property or a text string enclosed in quotation marks.
Structure is documented below.
: 
р
securitycenterhManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionСgcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpression:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:▒
Њ
securitycenterNManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicate░gcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicate:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigPredicateў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:з
е
securitycenterUManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorЙgcp:securitycenter/ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelector:ManagementOrganizationSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorF
DB
resourceTypes*" +The resource types to run the detector on.
:ь
ж
securitycenter@ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigћgcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfig:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfig■
чР
customOutputќBЊ:љ
Ї
securitycenterLManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputгgcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutput:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutput9Custom output properties.
Structure is documented below.
І
descriptionB" шText that describes the vulnerability or misconfiguration that the custom
module detects. This explanation is returned with each finding instance to
help investigators understand the detected issue. The text must be enclosed in quotation marks.
└
	predicateі:Є
ё
securitycenterIManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateдgcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicate:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateЦThe CEL expression to evaluate to produce findings. When the expression evaluates
to true against a resource, a finding is generated.
Structure is documented below.
Ы
recommendation" █An explanation of the recommended steps that security teams can take to resolve
the detected issue. This explanation is returned with each finding generated by
this module in the nextSteps property of the finding JSON.
─
resourceSelectorЪ:ю
Ў
securitycenterPManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelector┤gcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelector:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorЇThe resource types that the custom module operates on. Each custom module
can specify up to 5 resource types.
Structure is documented below.
є
severity" vThe severity to assign to findings generated by the module.
Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
:┤
Ї
securitycenterLManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputгgcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutput:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputА
ъЏ

properties▒B«*Ф:е
Ц
securitycenterTManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputProperty╝gcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputProperty:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyYA list of custom output properties to add to the finding.
Structure is documented below.
:Ъ
Ц
securitycenterTManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputProperty╝gcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputProperty:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyЗ
ы:
nameB" ,Name of the property for the custom output.
▓
valueExpression█Bп:Н
м
securitycentercManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpression┌gcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpression:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpression└The CEL expression for the custom output. A resource property can be specified
to return the value of the property or a text string enclosed in quotation marks.
Structure is documented below.
:­
м
securitycentercManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpression┌gcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpression:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigCustomOutputPropertyValueExpressionў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:б
ё
securitycenterIManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateдgcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicate:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigPredicateў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:С
Ў
securitycenterPManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelector┤gcp:securitycenter/ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelector:ManagementProjectSecurityHealthAnalyticsCustomModuleCustomConfigResourceSelectorF
DB
resourceTypes*" +The resource types to run the detector on.
:╝
І
securitycenter!NotificationConfigStreamingConfigVgcp:securitycenter/NotificationConfigStreamingConfig:NotificationConfigStreamingConfigФ
еЦ
filter" ќExpression that defines the filter to apply across create/update
events of assets or findings as specified by the event type. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.

- - -
:Ў
ћ
securitycenter$OrganizationCustomModuleCustomConfig\gcp:securitycenter/OrganizationCustomModuleCustomConfig:OrganizationCustomModuleCustomConfig 
ЧЇ
customOutput┴BЙ:╗
И
securitycenter0OrganizationCustomModuleCustomConfigCustomOutputtgcp:securitycenter/OrganizationCustomModuleCustomConfigCustomOutput:OrganizationCustomModuleCustomConfigCustomOutput9Custom output properties.
Structure is documented below.
І
descriptionB" шText that describes the vulnerability or misconfiguration that the custom
module detects. This explanation is returned with each finding instance to
help investigators understand the detected issue. The text must be enclosed in quotation marks.
в
	predicateх:▓
»
securitycenter-OrganizationCustomModuleCustomConfigPredicatengcp:securitycenter/OrganizationCustomModuleCustomConfigPredicate:OrganizationCustomModuleCustomConfigPredicateЦThe CEL expression to evaluate to produce findings. When the expression evaluates
to true against a resource, a finding is generated.
Structure is documented below.
Ы
recommendation" █An explanation of the recommended steps that security teams can take to resolve
the detected issue. This explanation is returned with each finding generated by
this module in the nextSteps property of the finding JSON.
№
resourceSelector╩:К
─
securitycenter4OrganizationCustomModuleCustomConfigResourceSelector|gcp:securitycenter/OrganizationCustomModuleCustomConfigResourceSelector:OrganizationCustomModuleCustomConfigResourceSelectorЇThe resource types that the custom module operates on. Each custom module
can specify up to 5 resource types.
Structure is documented below.
є
severity" vThe severity to assign to findings generated by the module.
Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
:І
И
securitycenter0OrganizationCustomModuleCustomConfigCustomOutputtgcp:securitycenter/OrganizationCustomModuleCustomConfigCustomOutput:OrganizationCustomModuleCustomConfigCustomOutput═
╩К

propertiesПB┌*О:н
Л
securitycenter8OrganizationCustomModuleCustomConfigCustomOutputPropertyёgcp:securitycenter/OrganizationCustomModuleCustomConfigCustomOutputProperty:OrganizationCustomModuleCustomConfigCustomOutputPropertyYA list of custom output properties to add to the finding.
Structure is documented below.
:э
Л
securitycenter8OrganizationCustomModuleCustomConfigCustomOutputPropertyёgcp:securitycenter/OrganizationCustomModuleCustomConfigCustomOutputProperty:OrganizationCustomModuleCustomConfigCustomOutputPropertyа
Ю:
nameB" ,Name of the property for the custom output.
я
valueExpressionЄBё:Ђ
■
securitycenterGOrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpressionбgcp:securitycenter/OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpression:OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpression└The CEL expression for the custom output. A resource property can be specified
to return the value of the property or a text string enclosed in quotation marks.
Structure is documented below.
:ю
■
securitycenterGOrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpressionбgcp:securitycenter/OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpression:OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpressionў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:═
»
securitycenter-OrganizationCustomModuleCustomConfigPredicatengcp:securitycenter/OrganizationCustomModuleCustomConfigPredicate:OrganizationCustomModuleCustomConfigPredicateў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:ќ
─
securitycenter4OrganizationCustomModuleCustomConfigResourceSelector|gcp:securitycenter/OrganizationCustomModuleCustomConfigResourceSelector:OrganizationCustomModuleCustomConfigResourceSelectorM
KI
resourceTypes*" 2The resource types to run the detector on.

- - -
:П
Ё
securitycenterProjectCustomModuleCustomConfigRgcp:securitycenter/ProjectCustomModuleCustomConfig:ProjectCustomModuleCustomConfigм
¤■
customOutput▓B»:г
Е
securitycenter+ProjectCustomModuleCustomConfigCustomOutputjgcp:securitycenter/ProjectCustomModuleCustomConfigCustomOutput:ProjectCustomModuleCustomConfigCustomOutput9Custom output properties.
Structure is documented below.
І
descriptionB" шText that describes the vulnerability or misconfiguration that the custom
module detects. This explanation is returned with each finding instance to
help investigators understand the detected issue. The text must be enclosed in quotation marks.
▄
	predicateд:Б
а
securitycenter(ProjectCustomModuleCustomConfigPredicatedgcp:securitycenter/ProjectCustomModuleCustomConfigPredicate:ProjectCustomModuleCustomConfigPredicateЦThe CEL expression to evaluate to produce findings. When the expression evaluates
to true against a resource, a finding is generated.
Structure is documented below.
Ы
recommendation" █An explanation of the recommended steps that security teams can take to resolve
the detected issue. This explanation is returned with each finding generated by
this module in the nextSteps property of the finding JSON.
Я
resourceSelector╗:И
х
securitycenter/ProjectCustomModuleCustomConfigResourceSelectorrgcp:securitycenter/ProjectCustomModuleCustomConfigResourceSelector:ProjectCustomModuleCustomConfigResourceSelectorЇThe resource types that the custom module operates on. Each custom module
can specify up to 5 resource types.
Structure is documented below.
є
severity" vThe severity to assign to findings generated by the module.
Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
:В
Е
securitycenter+ProjectCustomModuleCustomConfigCustomOutputjgcp:securitycenter/ProjectCustomModuleCustomConfigCustomOutput:ProjectCustomModuleCustomConfigCustomOutputй
║и

properties═B╩*К:─
┴
securitycenter3ProjectCustomModuleCustomConfigCustomOutputPropertyzgcp:securitycenter/ProjectCustomModuleCustomConfigCustomOutputProperty:ProjectCustomModuleCustomConfigCustomOutputPropertyYA list of custom output properties to add to the finding.
Structure is documented below.
:п
┴
securitycenter3ProjectCustomModuleCustomConfigCustomOutputPropertyzgcp:securitycenter/ProjectCustomModuleCustomConfigCustomOutputProperty:ProjectCustomModuleCustomConfigCustomOutputPropertyЉ
ј:
nameB" ,Name of the property for the custom output.
¤
valueExpressionЭBш:Ы
№
securitycenterBProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionўgcp:securitycenter/ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpression:ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpression└The CEL expression for the custom output. A resource property can be specified
to return the value of the property or a text string enclosed in quotation marks.
Structure is documented below.
:Ї
№
securitycenterBProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionўgcp:securitycenter/ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpression:ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:Й
а
securitycenter(ProjectCustomModuleCustomConfigPredicatedgcp:securitycenter/ProjectCustomModuleCustomConfigPredicate:ProjectCustomModuleCustomConfigPredicateў
ЋЇ
descriptionB" xDescription of the expression. This is a longer text which describes the
expression, e.g. when hovered over it in a UI.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
Ё
locationB" sString indicating the location of the expression for error reporting, e.g. a
file name and a position in the file.
ў
titleB" ѕTitle for the expression, i.e. a short string describing its purpose. This can
be used e.g. in UIs which allow to enter the expression.
:Є
х
securitycenter/ProjectCustomModuleCustomConfigResourceSelectorrgcp:securitycenter/ProjectCustomModuleCustomConfigResourceSelector:ProjectCustomModuleCustomConfigResourceSelectorM
KI
resourceTypes*" 2The resource types to run the detector on.

- - -
:Л
а
securitycenter(ProjectNotificationConfigStreamingConfigdgcp:securitycenter/ProjectNotificationConfigStreamingConfig:ProjectNotificationConfigStreamingConfigФ
еЦ
filter" ќExpression that defines the filter to apply across create/update
events of assets or findings as specified by the event type. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.

- - -
:у
s
securitycenterSourceIamBindingConditionFgcp:securitycenter/SourceIamBindingCondition:SourceIamBindingConditionp
nM
descriptionB" 8The description of the source (max of 1024 characters).


expression" 
title" :С
p
securitycenterSourceIamMemberConditionDgcp:securitycenter/SourceIamMemberCondition:SourceIamMemberConditionp
nM
descriptionB" 8The description of the source (max of 1024 characters).


expression" 
title" :н
Б
securitycenter)V2FolderNotificationConfigStreamingConfigfgcp:securitycenter/V2FolderNotificationConfigStreamingConfig:V2FolderNotificationConfigStreamingConfigФ
еЦ
filter" ќExpression that defines the filter to apply across create/update
events of assets or findings as specified by the event type. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.

- - -
:Т
х
securitycenter/V2OrganizationNotificationConfigStreamingConfigrgcp:securitycenter/V2OrganizationNotificationConfigStreamingConfig:V2OrganizationNotificationConfigStreamingConfigФ
еЦ
filter" ќExpression that defines the filter to apply across create/update
events of assets or findings as specified by the event type. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.

- - -
:п
Ю
securitycenter'V2OrganizationSourceIamBindingConditionbgcp:securitycenter/V2OrganizationSourceIamBindingCondition:V2OrganizationSourceIamBindingCondition6
4
descriptionB" 

expression" 
title" :Н
џ
securitycenter&V2OrganizationSourceIamMemberCondition`gcp:securitycenter/V2OrganizationSourceIamMemberCondition:V2OrganizationSourceIamMemberCondition6
4
descriptionB" 

expression" 
title" :О
д
securitycenter*V2ProjectNotificationConfigStreamingConfighgcp:securitycenter/V2ProjectNotificationConfigStreamingConfig:V2ProjectNotificationConfigStreamingConfigФ
еЦ
filter" ќExpression that defines the filter to apply across create/update
events of assets or findings as specified by the event type. The
expression is a list of zero or more restrictions combined via
logical operators AND and OR. Parentheses are supported, and OR
has higher precedence than AND.
Restrictions have the form <field> <operator> <value> and may have
a - character in front of them to indicate negation. The fields
map to those defined in the corresponding resource.
The supported operators are:
* = for all value types.
* >, <, >=, <= for integer values.
* :, meaning substring matching, for strings.
The supported value types are:
* string literals in quotes.
* integer literals without quotes.
* boolean literals true and false without quotes.
See
[Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
for information on how to write a filter.

- - -
:§
Z
securityposturePosturePolicySet5gcp:securityposture/PosturePolicySet:PosturePolicySetъ
Џ4
descriptionB" Description of the policy set.
и
policiesr*p:n
l
securityposturePosturePolicySetPolicyAgcp:securityposture/PosturePolicySetPolicy:PosturePolicySetPolicy7List of security policy
Structure is documented below.
)
policySetId" ID of the policy set.
:Э
l
securityposturePosturePolicySetPolicyAgcp:securityposture/PosturePolicySetPolicy:PosturePolicySetPolicyЄ
ёъ
complianceStandards«BФ*е:Ц
б
securityposture(PosturePolicySetPolicyComplianceStandardegcp:securityposture/PosturePolicySetPolicyComplianceStandard:PosturePolicySetPolicyComplianceStandardVMapping for policy to security standards and controls.
Structure is documented below.
і

constraintљ:Ї
і
securityposture PosturePolicySetPolicyConstraintUgcp:securityposture/PosturePolicySetPolicyConstraint:PosturePolicySetPolicyConstraintУPolicy constraint definition.It can have the definition of one of following constraints: orgPolicyConstraint orgPolicyConstraintCustom securityHealthAnalyticsModule securityHealthAnalyticsCustomModule
Structure is documented below.
0
descriptionB" Description of the policy.
"
policyId" ID of the policy.
:»
б
securityposture(PosturePolicySetPolicyComplianceStandardegcp:securityposture/PosturePolicySetPolicyComplianceStandard:PosturePolicySetPolicyComplianceStandardЄ
ё>
controlB" -Mapping of security controls for the policy.
B
standardB" 0Mapping of compliance standards for the policy.
:љ
і
securityposture PosturePolicySetPolicyConstraintUgcp:securityposture/PosturePolicySetPolicyConstraint:PosturePolicySetPolicyConstraintђ
§
и
orgPolicyConstraint╠B╔:к
├
securityposture3PosturePolicySetPolicyConstraintOrgPolicyConstraint{gcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraint:PosturePolicySetPolicyConstraintOrgPolicyConstraintQOrganization policy canned constraint definition.
Structure is documented below.
О
orgPolicyConstraintCustom▀B▄:┘
о
securityposture9PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomЄgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintCustom:PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomXOrganization policy custom constraint policy definition.
Structure is documented below.
§
#securityHealthAnalyticsCustomModule§BЩ:э
З
securitypostureCPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleЏgcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModule:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleVDefinition of Security Health Analytics Custom Module.
Structure is documented below.
Т
securityHealthAnalyticsModuleвBУ:т
Р
securityposture=PosturePolicySetPolicyConstraintSecurityHealthAnalyticsModuleЈgcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsModule:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsModuleWSecurity Health Analytics built-in detector definition.
Structure is documented below.
:╦
├
securityposture3PosturePolicySetPolicyConstraintOrgPolicyConstraint{gcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraint:PosturePolicySetPolicyConstraintOrgPolicyConstraintѓ
 C
cannedConstraintId" )Organization policy canned constraint Id
и
policyRulesв*У:т
Р
securityposture=PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleЈgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRule:PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRule:Definition of policy rules
Structure is documented below.
:Ц
о
securityposture9PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomЄgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintCustom:PosturePolicySetPolicyConstraintOrgPolicyConstraintCustom╔
кэ
customConstraintЈBї:Ѕ
є
securitypostureIPosturePolicySetPolicyConstraintOrgPolicyConstraintCustomCustomConstraintДgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomCustomConstraint:PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomCustomConstraintQOrganization policy custom constraint definition.
Structure is documented below.
╔
policyRules§*Щ:э
З
securitypostureCPosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleЏgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRule:PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRule:Definition of policy rules
Structure is documented below.
:А
є
securitypostureIPosturePolicySetPolicyConstraintOrgPolicyConstraintCustomCustomConstraintДgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomCustomConstraint:PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomCustomConstraintЋ

њ
d

actionType" RThe action to take if the condition is met.
Possible values are: `ALLOW`, `DENY`.
╩
	condition" ИA CEL condition that refers to a supported service resource, for example `resource.management.autoUpgrade == false`. For details about CEL usage, see [Common Expression Language](https://cloud.google.com/resource-manager/docs/organization-policy/creating-managing-custom-constraints#common_expression_language).
ђ
descriptionB" kA human-friendly description of the constraint to display as an error message when the policy is violated.
?
displayNameB" *A human-friendly name for the constraint.
в
methodTypes*" НA list of RESTful methods for which to enforce the constraint. Can be `CREATE`, `UPDATE`, or both. Not all Google Cloud services support both methods. To see supported methods for each service, find the service in [Supported services](https://cloud.google.com/resource-manager/docs/organization-policy/custom-constraint-supported-services).
b
name" VImmutable. The name of the custom constraint. This is unique within the organization.
к
resourceTypes*" «Immutable. The fully qualified name of the Google Cloud REST resource containing the object and field you want to restrict. For example, `container.googleapis.com/NodePool`.
:­
З
securitypostureCPosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleЏgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRule:PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleШ
зЄ
allowAllB
 uSetting this to true means that all values are allowed. This field can be set only in policies for list constraints.
Ѓ
	conditionўBЋ:њ
Ј
securitypostureLPosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionГgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleCondition:PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleCondition┌Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
This page details the objects and attributes that are used to the build the CEL expressions for
custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
Structure is documented below.
Ё
denyAllB
 tSetting this to true means that all values are denied. This field can be set only in policies for list constraints.
г
enforceB
 џIf `true`, then the policy is enforced. If `false`, then any configuration is acceptable.
This field can be set only in policies for boolean constraints.
Е
valuesЈBї:Ѕ
є
securitypostureIPosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleValuesДgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleValues:PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleValuesїList of values to be used for this policy rule. This field can be set only in policies for list constraints.
Structure is documented below.
:Ї
Ј
securitypostureLPosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionГgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleCondition:PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleConditionЭ
ш3
descriptionB" Description of the expression
`

expression" NTextual representation of an expression in Common Expression Language syntax.
ё
locationB" rString indicating the location of the expression for error reporting, e.g. a file name and a position in the file
U
titleB" FTitle for the expression, i.e. a short string describing its purpose.
:Ћ
є
securitypostureIPosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleValuesДgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleValues:PosturePolicySetPolicyConstraintOrgPolicyConstraintCustomPolicyRuleValuesЅ
єB
allowedValuesB*" )List of values allowed at this resource.
@
deniedValuesB*" (List of values denied at this resource.
:║
Р
securityposture=PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleЈgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRule:PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleм
¤Є
allowAllB
 uSetting this to true means that all values are allowed. This field can be set only in policies for list constraints.
ы
	conditionєBЃ:ђ
§
securitypostureFPosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleConditionАgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleCondition:PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleCondition┌Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
This page details the objects and attributes that are used to the build the CEL expressions for
custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
Structure is documented below.
Ё
denyAllB
 tSetting this to true means that all values are denied. This field can be set only in policies for list constraints.
г
enforceB
 џIf `true`, then the policy is enforced. If `false`, then any configuration is acceptable.
This field can be set only in policies for boolean constraints.
Ќ
values§BЩ:э
З
securitypostureCPosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleValuesЏgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleValues:PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleValuesїList of values to be used for this policy rule. This field can be set only in policies for list constraints.
Structure is documented below.
:ч
§
securitypostureFPosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleConditionАgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleCondition:PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleConditionЭ
ш3
descriptionB" Description of the expression
`

expression" NTextual representation of an expression in Common Expression Language syntax.
ё
locationB" rString indicating the location of the expression for error reporting, e.g. a file name and a position in the file
U
titleB" FTitle for the expression, i.e. a short string describing its purpose.
:Ѓ
З
securitypostureCPosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleValuesЏgcp:securityposture/PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleValues:PosturePolicySetPolicyConstraintOrgPolicyConstraintPolicyRuleValuesЅ
єB
allowedValuesB*" )List of values allowed at this resource.
@
deniedValuesB*" (List of values denied at this resource.
:Ј
З
securitypostureCPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleЏgcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModule:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleЋ
њ¤
configї:Ѕ
є
securitypostureIPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigДgcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfig:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfig6Custom module details.
Structure is documented below.
└
displayNameB" фThe display name of the Security Health Analytics custom module. This
display name becomes the finding category for all findings that are
returned by this custom module.
=
idB" 1(Output)
A server generated id of custom module.
╗
moduleEnablementStateB" ЏThe state of enablement for the module at its level of the resource hierarchy.
Possible values are: `ENABLEMENT_STATE_UNSPECIFIED`, `ENABLED`, `DISABLED`.
:▀
є
securitypostureIPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigДgcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfig:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigМ
лЩ
customOutput│B░:Г
ф
securitypostureUPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutput┐gcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutput:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutput│Custom output properties. A set of optional name-value pairs that define custom source properties to
return with each finding that is generated by the custom module. The custom
source properties that are defined here are included in the finding JSON
under `sourceProperties`.
Structure is documented below.
o
descriptionB" ZText that describes the vulnerability or misconfiguration that the custom
module detects.
▄
	predicateД:ц
А
securitypostureRPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigPredicate╣gcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigPredicate:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigPredicateцThe CEL expression to evaluate to produce findings.When the expression
evaluates to true against a resource, a finding is generated.
Structure is documented below.
{
recommendationB" cAn explanation of the recommended steps that security teams can take to
resolve the detected issue
р
resourceSelector╝:╣
Х
securitypostureYPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigResourceSelectorКgcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigResourceSelector:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigResourceSelectorЇThe resource types that the custom module operates on. Each custom module
can specify up to 5 resource types.
Structure is documented below.
Ъ
severity" јThe severity to assign to findings generated by the module.
Possible values are: `SEVERITY_UNSPECIFIED`, `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
:Ь
ф
securitypostureUPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutput┐gcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutput:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputЙ
╗И

properties╬B╦*╚:┼
┬
securityposture]PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputProperty¤gcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputProperty:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyYA list of custom output properties to add to the finding.
Structure is documented below.
:О
┬
securityposture]PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputProperty¤gcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputProperty:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyЈ
ї8
name" ,Name of the property for the custom output.
¤
valueExpressionЭBш:Ы
№
securityposturelPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyValueExpressionьgcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyValueExpression:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyValueExpression└The CEL expression for the custom output. A resource property can be
specified to return the value of the property or a text string enclosed
in quotation marks.
Structure is documented below.
:ь
№
securityposturelPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyValueExpressionьgcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyValueExpression:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigCustomOutputPropertyValueExpressionЭ
ш3
descriptionB" Description of the expression
`

expression" NTextual representation of an expression in Common Expression Language syntax.
ё
locationB" rString indicating the location of the expression for error reporting, e.g. a file name and a position in the file
U
titleB" FTitle for the expression, i.e. a short string describing its purpose.
:Ъ
А
securitypostureRPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigPredicate╣gcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigPredicate:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigPredicateЭ
ш3
descriptionB" Description of the expression
`

expression" NTextual representation of an expression in Common Expression Language syntax.
ё
locationB" rString indicating the location of the expression for error reporting, e.g. a file name and a position in the file
U
titleB" FTitle for the expression, i.e. a short string describing its purpose.
:ѕ
Х
securitypostureYPosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigResourceSelectorКgcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigResourceSelector:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsCustomModuleConfigResourceSelectorM
KI
resourceTypes*" 2The resource types to run the detector on.

- - -
:Ш
Р
securityposture=PosturePolicySetPolicyConstraintSecurityHealthAnalyticsModuleЈgcp:securityposture/PosturePolicySetPolicyConstraintSecurityHealthAnalyticsModule:PosturePolicySetPolicyConstraintSecurityHealthAnalyticsModuleј
І╗
moduleEnablementStateB" ЏThe state of enablement for the module at its level of the resource hierarchy.
Possible values are: `ENABLEMENT_STATE_UNSPECIFIED`, `ENABLED`, `DISABLED`.
K

moduleName" 9The name of the module eg: BIGQUERY_TABLE_CMEK_DISABLED.
:З
a
serviceaccountIAMBindingCondition:gcp:serviceaccount/IAMBindingCondition:IAMBindingConditionј
І¤
descriptionB" ╣An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.

> **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
consider it to be an entirely different resource and will treat it as such.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:ы
^
serviceaccountIAMMemberCondition8gcp:serviceaccount/IAMMemberCondition:IAMMemberConditionј
І¤
descriptionB" ╣An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.

> **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
consider it to be an entirely different resource and will treat it as such.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:б
I
serviceaccountgetSAccount*gcp:serviceaccount/getSAccount:getSAccountн
Л]
	accountId" LThe Google service account ID (the part before the `@` sign in the `email`)
>
disabled
 .Whether a service account is disabled or not.
=
displayName" *The display name for the service account.
┴
email" │The e-mail address of the service account. This value
should be referenced from any `gcp.organizations.getIAMPolicy` data sources
that would grant the service account privileges.
х
member" дThe Identity of the service account in the form `serviceAccount:{email}`. This value is often used to refer to the service account in order to grant IAM permissions.
=
name" 1The fully-qualified name of the service account.
6
uniqueId" &The unique id of the service account.
:╗
ђ
servicedirectoryNamespaceIamBindingConditionNgcp:servicedirectory/NamespaceIamBindingCondition:NamespaceIamBindingCondition6
4
descriptionB" 

expression" 
title" :и
}
servicedirectoryNamespaceIamMemberConditionLgcp:servicedirectory/NamespaceIamMemberCondition:NamespaceIamMemberCondition6
4
descriptionB" 

expression" 
title" :┤
z
servicedirectoryServiceIamBindingConditionJgcp:servicedirectory/ServiceIamBindingCondition:ServiceIamBindingCondition6
4
descriptionB" 

expression" 
title" :▒
w
servicedirectoryServiceIamMemberConditionHgcp:servicedirectory/ServiceIamMemberCondition:ServiceIamMemberCondition6
4
descriptionB" 

expression" 
title" 