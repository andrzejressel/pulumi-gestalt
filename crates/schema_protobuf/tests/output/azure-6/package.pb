
azureAzure"6.14.0*ª»
h
	frontdoorCustomHttpsConfigurationAazure:frontdoor/customHttpsConfiguration:CustomHttpsConfigurationÎ±!> **IMPORTANT** This deploys an Azure Front Door (classic) resource which has been deprecated and will receive security updates only. Please migrate your existing Azure Front Door (classic) deployments to the new Azure Front Door (standard/premium) resources. For your convenience, the service team has exposed a `Front Door Classic` to `Front Door Standard/Premium` [migration tool](https://learn.microsoft.com/azure/frontdoor/tier-migration) to allow you to migrate your existing `Front Door Classic` instances to the new `Front Door Standard/Premium` product tiers.

Manages the Custom HTTPS Configuration for an Azure Front Door (classic) Frontend Endpoint.

> **NOTE:** Defining custom HTTPS configurations using a separate `azure.frontdoor.CustomHttpsConfiguration` resource allows for parallel creation/update.

!> **BREAKING CHANGE:** In order to address the ordering issue we have changed the design on how to retrieve existing sub resources such as frontend endpoints. Existing design will be deprecated and will result in an incorrect configuration. Please refer to the updated documentation below for more information.

!> **BREAKING CHANGE:** The `resource_group_name` field has been removed as of the `v2.58.0` provider release. If the `resource_group_name` field has been defined in your current `azure.frontdoor.CustomHttpsConfiguration` resource configuration file please remove it else you will receive a `An argument named "resource_group_name" is not expected here.` error. If your pre-existing Front Door instance contained inline `custom_https_configuration` blocks there are additional steps that will need to be completed to successfully migrate your Front Door onto the `v2.58.0` provider which can be found in this guide.

!> **Be Aware:** Azure is rolling out a breaking change on Friday 9th April 2021 which may cause issues with the CDN/FrontDoor resources. More information is available in this GitHub issue - however unfortunately this may necessitate a breaking change to the CDN and Front Door resources, more information will be posted in the GitHub issue as the necessary changes are identified.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "FrontDoorExampleResourceGroup",
    location: "West Europe",
});
const vault = azure.keyvault.getKeyVault({
    name: "example-vault",
    resourceGroupName: "example-vault-rg",
});
const exampleFrontdoor = new azure.frontdoor.Frontdoor("example", {
    name: "example-FrontDoor",
    resourceGroupName: example.name,
    routingRules: [{
        name: "exampleRoutingRule1",
        acceptedProtocols: [
            "Http",
            "Https",
        ],
        patternsToMatches: ["/*"],
        frontendEndpoints: ["exampleFrontendEndpoint1"],
        forwardingConfiguration: {
            forwardingProtocol: "MatchRequest",
            backendPoolName: "exampleBackendBing",
        },
    }],
    backendPoolLoadBalancings: [{
        name: "exampleLoadBalancingSettings1",
    }],
    backendPoolHealthProbes: [{
        name: "exampleHealthProbeSetting1",
    }],
    backendPools: [{
        name: "exampleBackendBing",
        backends: [{
            hostHeader: "www.bing.com",
            address: "www.bing.com",
            httpPort: 80,
            httpsPort: 443,
        }],
        loadBalancingName: "exampleLoadBalancingSettings1",
        healthProbeName: "exampleHealthProbeSetting1",
    }],
    frontendEndpoints: [
        {
            name: "exampleFrontendEndpoint1",
            hostName: "example-FrontDoor.azurefd.net",
        },
        {
            name: "exampleFrontendEndpoint2",
            hostName: "examplefd1.examplefd.net",
        },
    ],
});
const exampleCustomHttps0 = new azure.frontdoor.CustomHttpsConfiguration("example_custom_https_0", {
    frontendEndpointId: exampleFrontdoor.frontendEndpointsMap.exampleFrontendEndpoint1,
    customHttpsProvisioningEnabled: false,
});
const exampleCustomHttps1 = new azure.frontdoor.CustomHttpsConfiguration("example_custom_https_1", {
    frontendEndpointId: exampleFrontdoor.frontendEndpointsMap.exampleFrontendEndpoint2,
    customHttpsProvisioningEnabled: true,
    customHttpsConfiguration: {
        certificateSource: "AzureKeyVault",
        azureKeyVaultCertificateSecretName: "examplefd1",
        azureKeyVaultCertificateVaultId: vault.then(vault => vault.id),
    },
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="FrontDoorExampleResourceGroup",
    location="West Europe")
vault = azure.keyvault.get_key_vault(name="example-vault",
    resource_group_name="example-vault-rg")
example_frontdoor = azure.frontdoor.Frontdoor("example",
    name="example-FrontDoor",
    resource_group_name=example.name,
    routing_rules=[{
        "name": "exampleRoutingRule1",
        "accepted_protocols": [
            "Http",
            "Https",
        ],
        "patterns_to_matches": ["/*"],
        "frontend_endpoints": ["exampleFrontendEndpoint1"],
        "forwarding_configuration": {
            "forwarding_protocol": "MatchRequest",
            "backend_pool_name": "exampleBackendBing",
        },
    }],
    backend_pool_load_balancings=[{
        "name": "exampleLoadBalancingSettings1",
    }],
    backend_pool_health_probes=[{
        "name": "exampleHealthProbeSetting1",
    }],
    backend_pools=[{
        "name": "exampleBackendBing",
        "backends": [{
            "host_header": "www.bing.com",
            "address": "www.bing.com",
            "http_port": 80,
            "https_port": 443,
        }],
        "load_balancing_name": "exampleLoadBalancingSettings1",
        "health_probe_name": "exampleHealthProbeSetting1",
    }],
    frontend_endpoints=[
        {
            "name": "exampleFrontendEndpoint1",
            "host_name": "example-FrontDoor.azurefd.net",
        },
        {
            "name": "exampleFrontendEndpoint2",
            "host_name": "examplefd1.examplefd.net",
        },
    ])
example_custom_https0 = azure.frontdoor.CustomHttpsConfiguration("example_custom_https_0",
    frontend_endpoint_id=example_frontdoor.frontend_endpoints_map["exampleFrontendEndpoint1"],
    custom_https_provisioning_enabled=False)
example_custom_https1 = azure.frontdoor.CustomHttpsConfiguration("example_custom_https_1",
    frontend_endpoint_id=example_frontdoor.frontend_endpoints_map["exampleFrontendEndpoint2"],
    custom_https_provisioning_enabled=True,
    custom_https_configuration={
        "certificate_source": "AzureKeyVault",
        "azure_key_vault_certificate_secret_name": "examplefd1",
        "azure_key_vault_certificate_vault_id": vault.id,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "FrontDoorExampleResourceGroup",
        Location = "West Europe",
    });

    var vault = Azure.KeyVault.GetKeyVault.Invoke(new()
    {
        Name = "example-vault",
        ResourceGroupName = "example-vault-rg",
    });

    var exampleFrontdoor = new Azure.FrontDoor.Frontdoor("example", new()
    {
        Name = "example-FrontDoor",
        ResourceGroupName = example.Name,
        RoutingRules = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorRoutingRuleArgs
            {
                Name = "exampleRoutingRule1",
                AcceptedProtocols = new[]
                {
                    "Http",
                    "Https",
                },
                PatternsToMatches = new[]
                {
                    "/*",
                },
                FrontendEndpoints = new[]
                {
                    "exampleFrontendEndpoint1",
                },
                ForwardingConfiguration = new Azure.FrontDoor.Inputs.FrontdoorRoutingRuleForwardingConfigurationArgs
                {
                    ForwardingProtocol = "MatchRequest",
                    BackendPoolName = "exampleBackendBing",
                },
            },
        },
        BackendPoolLoadBalancings = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorBackendPoolLoadBalancingArgs
            {
                Name = "exampleLoadBalancingSettings1",
            },
        },
        BackendPoolHealthProbes = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorBackendPoolHealthProbeArgs
            {
                Name = "exampleHealthProbeSetting1",
            },
        },
        BackendPools = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorBackendPoolArgs
            {
                Name = "exampleBackendBing",
                Backends = new[]
                {
                    new Azure.FrontDoor.Inputs.FrontdoorBackendPoolBackendArgs
                    {
                        HostHeader = "www.bing.com",
                        Address = "www.bing.com",
                        HttpPort = 80,
                        HttpsPort = 443,
                    },
                },
                LoadBalancingName = "exampleLoadBalancingSettings1",
                HealthProbeName = "exampleHealthProbeSetting1",
            },
        },
        FrontendEndpoints = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorFrontendEndpointArgs
            {
                Name = "exampleFrontendEndpoint1",
                HostName = "example-FrontDoor.azurefd.net",
            },
            new Azure.FrontDoor.Inputs.FrontdoorFrontendEndpointArgs
            {
                Name = "exampleFrontendEndpoint2",
                HostName = "examplefd1.examplefd.net",
            },
        },
    });

    var exampleCustomHttps0 = new Azure.FrontDoor.CustomHttpsConfiguration("example_custom_https_0", new()
    {
        FrontendEndpointId = exampleFrontdoor.FrontendEndpointsMap.Apply(frontendEndpointsMap => frontendEndpointsMap.ExampleFrontendEndpoint1),
        CustomHttpsProvisioningEnabled = false,
    });

    var exampleCustomHttps1 = new Azure.FrontDoor.CustomHttpsConfiguration("example_custom_https_1", new()
    {
        FrontendEndpointId = exampleFrontdoor.FrontendEndpointsMap.Apply(frontendEndpointsMap => frontendEndpointsMap.ExampleFrontendEndpoint2),
        CustomHttpsProvisioningEnabled = true,
        CustomHttpsConfigurationConfig = new Azure.FrontDoor.Inputs.CustomHttpsConfigurationCustomHttpsConfigurationArgs
        {
            CertificateSource = "AzureKeyVault",
            AzureKeyVaultCertificateSecretName = "examplefd1",
            AzureKeyVaultCertificateVaultId = vault.Apply(getKeyVaultResult => getKeyVaultResult.Id),
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/frontdoor"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("FrontDoorExampleResourceGroup"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		vault, err := keyvault.LookupKeyVault(ctx, &keyvault.LookupKeyVaultArgs{
			Name:              "example-vault",
			ResourceGroupName: "example-vault-rg",
		}, nil)
		if err != nil {
			return err
		}
		exampleFrontdoor, err := frontdoor.NewFrontdoor(ctx, "example", &frontdoor.FrontdoorArgs{
			Name:              pulumi.String("example-FrontDoor"),
			ResourceGroupName: example.Name,
			RoutingRules: frontdoor.FrontdoorRoutingRuleArray{
				&frontdoor.FrontdoorRoutingRuleArgs{
					Name: pulumi.String("exampleRoutingRule1"),
					AcceptedProtocols: pulumi.StringArray{
						pulumi.String("Http"),
						pulumi.String("Https"),
					},
					PatternsToMatches: pulumi.StringArray{
						pulumi.String("/*"),
					},
					FrontendEndpoints: pulumi.StringArray{
						pulumi.String("exampleFrontendEndpoint1"),
					},
					ForwardingConfiguration: &frontdoor.FrontdoorRoutingRuleForwardingConfigurationArgs{
						ForwardingProtocol: pulumi.String("MatchRequest"),
						BackendPoolName:    pulumi.String("exampleBackendBing"),
					},
				},
			},
			BackendPoolLoadBalancings: frontdoor.FrontdoorBackendPoolLoadBalancingArray{
				&frontdoor.FrontdoorBackendPoolLoadBalancingArgs{
					Name: pulumi.String("exampleLoadBalancingSettings1"),
				},
			},
			BackendPoolHealthProbes: frontdoor.FrontdoorBackendPoolHealthProbeArray{
				&frontdoor.FrontdoorBackendPoolHealthProbeArgs{
					Name: pulumi.String("exampleHealthProbeSetting1"),
				},
			},
			BackendPools: frontdoor.FrontdoorBackendPoolArray{
				&frontdoor.FrontdoorBackendPoolArgs{
					Name: pulumi.String("exampleBackendBing"),
					Backends: frontdoor.FrontdoorBackendPoolBackendArray{
						&frontdoor.FrontdoorBackendPoolBackendArgs{
							HostHeader: pulumi.String("www.bing.com"),
							Address:    pulumi.String("www.bing.com"),
							HttpPort:   pulumi.Int(80),
							HttpsPort:  pulumi.Int(443),
						},
					},
					LoadBalancingName: pulumi.String("exampleLoadBalancingSettings1"),
					HealthProbeName:   pulumi.String("exampleHealthProbeSetting1"),
				},
			},
			FrontendEndpoints: frontdoor.FrontdoorFrontendEndpointArray{
				&frontdoor.FrontdoorFrontendEndpointArgs{
					Name:     pulumi.String("exampleFrontendEndpoint1"),
					HostName: pulumi.String("example-FrontDoor.azurefd.net"),
				},
				&frontdoor.FrontdoorFrontendEndpointArgs{
					Name:     pulumi.String("exampleFrontendEndpoint2"),
					HostName: pulumi.String("examplefd1.examplefd.net"),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = frontdoor.NewCustomHttpsConfiguration(ctx, "example_custom_https_0", &frontdoor.CustomHttpsConfigurationArgs{
			FrontendEndpointId: exampleFrontdoor.FrontendEndpointsMap.ApplyT(func(frontendEndpointsMap map[string]string) (string, error) {
				return frontendEndpointsMap.ExampleFrontendEndpoint1, nil
			}).(pulumi.StringOutput),
			CustomHttpsProvisioningEnabled: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		_, err = frontdoor.NewCustomHttpsConfiguration(ctx, "example_custom_https_1", &frontdoor.CustomHttpsConfigurationArgs{
			FrontendEndpointId: exampleFrontdoor.FrontendEndpointsMap.ApplyT(func(frontendEndpointsMap map[string]string) (string, error) {
				return frontendEndpointsMap.ExampleFrontendEndpoint2, nil
			}).(pulumi.StringOutput),
			CustomHttpsProvisioningEnabled: pulumi.Bool(true),
			CustomHttpsConfiguration: &frontdoor.CustomHttpsConfigurationCustomHttpsConfigurationArgs{
				CertificateSource:                  pulumi.String("AzureKeyVault"),
				AzureKeyVaultCertificateSecretName: pulumi.String("examplefd1"),
				AzureKeyVaultCertificateVaultId:    pulumi.String(vault.Id),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.KeyvaultFunctions;
import com.pulumi.azure.keyvault.inputs.GetKeyVaultArgs;
import com.pulumi.azure.frontdoor.Frontdoor;
import com.pulumi.azure.frontdoor.FrontdoorArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorRoutingRuleArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorRoutingRuleForwardingConfigurationArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorBackendPoolLoadBalancingArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorBackendPoolHealthProbeArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorBackendPoolArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorFrontendEndpointArgs;
import com.pulumi.azure.frontdoor.CustomHttpsConfiguration;
import com.pulumi.azure.frontdoor.CustomHttpsConfigurationArgs;
import com.pulumi.azure.frontdoor.inputs.CustomHttpsConfigurationCustomHttpsConfigurationArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("FrontDoorExampleResourceGroup")
            .location("West Europe")
            .build());

        final var vault = KeyvaultFunctions.getKeyVault(GetKeyVaultArgs.builder()
            .name("example-vault")
            .resourceGroupName("example-vault-rg")
            .build());

        var exampleFrontdoor = new Frontdoor("exampleFrontdoor", FrontdoorArgs.builder()
            .name("example-FrontDoor")
            .resourceGroupName(example.name())
            .routingRules(FrontdoorRoutingRuleArgs.builder()
                .name("exampleRoutingRule1")
                .acceptedProtocols(                
                    "Http",
                    "Https")
                .patternsToMatches("/*")
                .frontendEndpoints("exampleFrontendEndpoint1")
                .forwardingConfiguration(FrontdoorRoutingRuleForwardingConfigurationArgs.builder()
                    .forwardingProtocol("MatchRequest")
                    .backendPoolName("exampleBackendBing")
                    .build())
                .build())
            .backendPoolLoadBalancings(FrontdoorBackendPoolLoadBalancingArgs.builder()
                .name("exampleLoadBalancingSettings1")
                .build())
            .backendPoolHealthProbes(FrontdoorBackendPoolHealthProbeArgs.builder()
                .name("exampleHealthProbeSetting1")
                .build())
            .backendPools(FrontdoorBackendPoolArgs.builder()
                .name("exampleBackendBing")
                .backends(FrontdoorBackendPoolBackendArgs.builder()
                    .hostHeader("www.bing.com")
                    .address("www.bing.com")
                    .httpPort(80)
                    .httpsPort(443)
                    .build())
                .loadBalancingName("exampleLoadBalancingSettings1")
                .healthProbeName("exampleHealthProbeSetting1")
                .build())
            .frontendEndpoints(            
                FrontdoorFrontendEndpointArgs.builder()
                    .name("exampleFrontendEndpoint1")
                    .hostName("example-FrontDoor.azurefd.net")
                    .build(),
                FrontdoorFrontendEndpointArgs.builder()
                    .name("exampleFrontendEndpoint2")
                    .hostName("examplefd1.examplefd.net")
                    .build())
            .build());

        var exampleCustomHttps0 = new CustomHttpsConfiguration("exampleCustomHttps0", CustomHttpsConfigurationArgs.builder()
            .frontendEndpointId(exampleFrontdoor.frontendEndpointsMap().applyValue(frontendEndpointsMap -> frontendEndpointsMap.exampleFrontendEndpoint1()))
            .customHttpsProvisioningEnabled(false)
            .build());

        var exampleCustomHttps1 = new CustomHttpsConfiguration("exampleCustomHttps1", CustomHttpsConfigurationArgs.builder()
            .frontendEndpointId(exampleFrontdoor.frontendEndpointsMap().applyValue(frontendEndpointsMap -> frontendEndpointsMap.exampleFrontendEndpoint2()))
            .customHttpsProvisioningEnabled(true)
            .customHttpsConfiguration(CustomHttpsConfigurationCustomHttpsConfigurationArgs.builder()
                .certificateSource("AzureKeyVault")
                .azureKeyVaultCertificateSecretName("examplefd1")
                .azureKeyVaultCertificateVaultId(vault.applyValue(getKeyVaultResult -> getKeyVaultResult.id()))
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: FrontDoorExampleResourceGroup
      location: West Europe
  exampleFrontdoor:
    type: azure:frontdoor:Frontdoor
    name: example
    properties:
      name: example-FrontDoor
      resourceGroupName: ${example.name}
      routingRules:
        - name: exampleRoutingRule1
          acceptedProtocols:
            - Http
            - Https
          patternsToMatches:
            - /*
          frontendEndpoints:
            - exampleFrontendEndpoint1
          forwardingConfiguration:
            forwardingProtocol: MatchRequest
            backendPoolName: exampleBackendBing
      backendPoolLoadBalancings:
        - name: exampleLoadBalancingSettings1
      backendPoolHealthProbes:
        - name: exampleHealthProbeSetting1
      backendPools:
        - name: exampleBackendBing
          backends:
            - hostHeader: www.bing.com
              address: www.bing.com
              httpPort: 80
              httpsPort: 443
          loadBalancingName: exampleLoadBalancingSettings1
          healthProbeName: exampleHealthProbeSetting1
      frontendEndpoints:
        - name: exampleFrontendEndpoint1
          hostName: example-FrontDoor.azurefd.net
        - name: exampleFrontendEndpoint2
          hostName: examplefd1.examplefd.net
  exampleCustomHttps0:
    type: azure:frontdoor:CustomHttpsConfiguration
    name: example_custom_https_0
    properties:
      frontendEndpointId: ${exampleFrontdoor.frontendEndpointsMap.exampleFrontendEndpoint1}
      customHttpsProvisioningEnabled: false
  exampleCustomHttps1:
    type: azure:frontdoor:CustomHttpsConfiguration
    name: example_custom_https_1
    properties:
      frontendEndpointId: ${exampleFrontdoor.frontendEndpointsMap.exampleFrontendEndpoint2}
      customHttpsProvisioningEnabled: true
      customHttpsConfiguration:
        certificateSource: AzureKeyVault
        azureKeyVaultCertificateSecretName: examplefd1
        azureKeyVaultCertificateVaultId: ${vault.id}
variables:
  vault:
    fn::invoke:
      function: azure:keyvault:getKeyVault
      arguments:
        name: example-vault
        resourceGroupName: example-vault-rg
```
<!--End PulumiCodeChooser -->

## Import

Front Door Custom HTTPS Configurations can be imported using the `resource id` of the Front Door Custom HTTPS Configuration, e.g.

```sh
$ pulumi import azure:frontdoor/customHttpsConfiguration:CustomHttpsConfiguration example_custom_https_1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/frontDoors/frontdoor1/customHttpsConfiguration/endpoint1
```


customHttpsConfiguration¹B¶:³
°
	frontdoor0CustomHttpsConfigurationCustomHttpsConfigurationqazure:frontdoor/CustomHttpsConfigurationCustomHttpsConfiguration:CustomHttpsConfigurationCustomHttpsConfiguration7A `custom_https_configuration` block as defined above.

customHttpsProvisioningEnabled
 \Should the HTTPS protocol be enabled for this custom domain associated with the Front Door?

frontendEndpointId" The ID of the Front Door Frontend Endpoint which this configuration refers to. Changing this forces a new resource to be created.
"
customHttpsConfiguration¹B¶:³
°
	frontdoor0CustomHttpsConfigurationCustomHttpsConfigurationqazure:frontdoor/CustomHttpsConfigurationCustomHttpsConfiguration:CustomHttpsConfigurationCustomHttpsConfiguration7A `custom_https_configuration` block as defined above.
"
customHttpsProvisioningEnabled
 \Should the HTTPS protocol be enabled for this custom domain associated with the Front Door?
"
frontendEndpointId" The ID of the Front Door Frontend Endpoint which this configuration refers to. Changing this forces a new resource to be created.
*óô
J
	frontdoorFirewallPolicy-azure:frontdoor/firewallPolicy:FirewallPolicy¡Þ!> **IMPORTANT** This deploys an Azure Front Door (classic) resource which has been deprecated and will receive security updates only. Please migrate your existing Azure Front Door (classic) deployments to the new Azure Front Door (standard/premium) resources. For your convenience, the service team has exposed a `Front Door Classic` to `Front Door Standard/Premium` [migration tool](https://learn.microsoft.com/azure/frontdoor/tier-migration) to allow you to migrate your existing `Front Door Classic` instances to the new `Front Door Standard/Premium` product tiers.

Manages an Azure Front Door (classic) Web Application Firewall Policy instance.

!> **Be Aware:** Azure is rolling out a breaking change on Friday 9th April 2021 which may cause issues with the CDN/FrontDoor resources. More information is available in this GitHub issue - however unfortunately this may necessitate a breaking change to the CDN and Front Door resources, more information will be posted in the GitHub issue as the necessary changes are identified.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-rg",
    location: "West Europe",
});
const exampleFirewallPolicy = new azure.frontdoor.FirewallPolicy("example", {
    name: "examplefdwafpolicy",
    resourceGroupName: example.name,
    enabled: true,
    mode: "Prevention",
    redirectUrl: "https://www.contoso.com",
    customBlockResponseStatusCode: 403,
    customBlockResponseBody: "PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg==",
    customRules: [
        {
            name: "Rule1",
            enabled: true,
            priority: 1,
            rateLimitDurationInMinutes: 1,
            rateLimitThreshold: 10,
            type: "MatchRule",
            action: "Block",
            matchConditions: [{
                matchVariable: "RemoteAddr",
                operator: "IPMatch",
                negationCondition: false,
                matchValues: [
                    "192.168.1.0/24",
                    "10.0.0.0/24",
                ],
            }],
        },
        {
            name: "Rule2",
            enabled: true,
            priority: 2,
            rateLimitDurationInMinutes: 1,
            rateLimitThreshold: 10,
            type: "MatchRule",
            action: "Block",
            matchConditions: [
                {
                    matchVariable: "RemoteAddr",
                    operator: "IPMatch",
                    negationCondition: false,
                    matchValues: ["192.168.1.0/24"],
                },
                {
                    matchVariable: "RequestHeader",
                    selector: "UserAgent",
                    operator: "Contains",
                    negationCondition: false,
                    matchValues: ["windows"],
                    transforms: [
                        "Lowercase",
                        "Trim",
                    ],
                },
            ],
        },
    ],
    managedRules: [
        {
            type: "DefaultRuleSet",
            version: "1.0",
            exclusions: [{
                matchVariable: "QueryStringArgNames",
                operator: "Equals",
                selector: "not_suspicious",
            }],
            overrides: [
                {
                    ruleGroupName: "PHP",
                    rules: [{
                        ruleId: "933100",
                        enabled: false,
                        action: "Block",
                    }],
                },
                {
                    ruleGroupName: "SQLI",
                    exclusions: [{
                        matchVariable: "QueryStringArgNames",
                        operator: "Equals",
                        selector: "really_not_suspicious",
                    }],
                    rules: [{
                        ruleId: "942200",
                        action: "Block",
                        exclusions: [{
                            matchVariable: "QueryStringArgNames",
                            operator: "Equals",
                            selector: "innocent",
                        }],
                    }],
                },
            ],
        },
        {
            type: "Microsoft_BotManagerRuleSet",
            version: "1.0",
        },
    ],
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-rg",
    location="West Europe")
example_firewall_policy = azure.frontdoor.FirewallPolicy("example",
    name="examplefdwafpolicy",
    resource_group_name=example.name,
    enabled=True,
    mode="Prevention",
    redirect_url="https://www.contoso.com",
    custom_block_response_status_code=403,
    custom_block_response_body="PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg==",
    custom_rules=[
        {
            "name": "Rule1",
            "enabled": True,
            "priority": 1,
            "rate_limit_duration_in_minutes": 1,
            "rate_limit_threshold": 10,
            "type": "MatchRule",
            "action": "Block",
            "match_conditions": [{
                "match_variable": "RemoteAddr",
                "operator": "IPMatch",
                "negation_condition": False,
                "match_values": [
                    "192.168.1.0/24",
                    "10.0.0.0/24",
                ],
            }],
        },
        {
            "name": "Rule2",
            "enabled": True,
            "priority": 2,
            "rate_limit_duration_in_minutes": 1,
            "rate_limit_threshold": 10,
            "type": "MatchRule",
            "action": "Block",
            "match_conditions": [
                {
                    "match_variable": "RemoteAddr",
                    "operator": "IPMatch",
                    "negation_condition": False,
                    "match_values": ["192.168.1.0/24"],
                },
                {
                    "match_variable": "RequestHeader",
                    "selector": "UserAgent",
                    "operator": "Contains",
                    "negation_condition": False,
                    "match_values": ["windows"],
                    "transforms": [
                        "Lowercase",
                        "Trim",
                    ],
                },
            ],
        },
    ],
    managed_rules=[
        {
            "type": "DefaultRuleSet",
            "version": "1.0",
            "exclusions": [{
                "match_variable": "QueryStringArgNames",
                "operator": "Equals",
                "selector": "not_suspicious",
            }],
            "overrides": [
                {
                    "rule_group_name": "PHP",
                    "rules": [{
                        "rule_id": "933100",
                        "enabled": False,
                        "action": "Block",
                    }],
                },
                {
                    "rule_group_name": "SQLI",
                    "exclusions": [{
                        "match_variable": "QueryStringArgNames",
                        "operator": "Equals",
                        "selector": "really_not_suspicious",
                    }],
                    "rules": [{
                        "rule_id": "942200",
                        "action": "Block",
                        "exclusions": [{
                            "match_variable": "QueryStringArgNames",
                            "operator": "Equals",
                            "selector": "innocent",
                        }],
                    }],
                },
            ],
        },
        {
            "type": "Microsoft_BotManagerRuleSet",
            "version": "1.0",
        },
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-rg",
        Location = "West Europe",
    });

    var exampleFirewallPolicy = new Azure.FrontDoor.FirewallPolicy("example", new()
    {
        Name = "examplefdwafpolicy",
        ResourceGroupName = example.Name,
        Enabled = true,
        Mode = "Prevention",
        RedirectUrl = "https://www.contoso.com",
        CustomBlockResponseStatusCode = 403,
        CustomBlockResponseBody = "PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg==",
        CustomRules = new[]
        {
            new Azure.FrontDoor.Inputs.FirewallPolicyCustomRuleArgs
            {
                Name = "Rule1",
                Enabled = true,
                Priority = 1,
                RateLimitDurationInMinutes = 1,
                RateLimitThreshold = 10,
                Type = "MatchRule",
                Action = "Block",
                MatchConditions = new[]
                {
                    new Azure.FrontDoor.Inputs.FirewallPolicyCustomRuleMatchConditionArgs
                    {
                        MatchVariable = "RemoteAddr",
                        Operator = "IPMatch",
                        NegationCondition = false,
                        MatchValues = new[]
                        {
                            "192.168.1.0/24",
                            "10.0.0.0/24",
                        },
                    },
                },
            },
            new Azure.FrontDoor.Inputs.FirewallPolicyCustomRuleArgs
            {
                Name = "Rule2",
                Enabled = true,
                Priority = 2,
                RateLimitDurationInMinutes = 1,
                RateLimitThreshold = 10,
                Type = "MatchRule",
                Action = "Block",
                MatchConditions = new[]
                {
                    new Azure.FrontDoor.Inputs.FirewallPolicyCustomRuleMatchConditionArgs
                    {
                        MatchVariable = "RemoteAddr",
                        Operator = "IPMatch",
                        NegationCondition = false,
                        MatchValues = new[]
                        {
                            "192.168.1.0/24",
                        },
                    },
                    new Azure.FrontDoor.Inputs.FirewallPolicyCustomRuleMatchConditionArgs
                    {
                        MatchVariable = "RequestHeader",
                        Selector = "UserAgent",
                        Operator = "Contains",
                        NegationCondition = false,
                        MatchValues = new[]
                        {
                            "windows",
                        },
                        Transforms = new[]
                        {
                            "Lowercase",
                            "Trim",
                        },
                    },
                },
            },
        },
        ManagedRules = new[]
        {
            new Azure.FrontDoor.Inputs.FirewallPolicyManagedRuleArgs
            {
                Type = "DefaultRuleSet",
                Version = "1.0",
                Exclusions = new[]
                {
                    new Azure.FrontDoor.Inputs.FirewallPolicyManagedRuleExclusionArgs
                    {
                        MatchVariable = "QueryStringArgNames",
                        Operator = "Equals",
                        Selector = "not_suspicious",
                    },
                },
                Overrides = new[]
                {
                    new Azure.FrontDoor.Inputs.FirewallPolicyManagedRuleOverrideArgs
                    {
                        RuleGroupName = "PHP",
                        Rules = new[]
                        {
                            new Azure.FrontDoor.Inputs.FirewallPolicyManagedRuleOverrideRuleArgs
                            {
                                RuleId = "933100",
                                Enabled = false,
                                Action = "Block",
                            },
                        },
                    },
                    new Azure.FrontDoor.Inputs.FirewallPolicyManagedRuleOverrideArgs
                    {
                        RuleGroupName = "SQLI",
                        Exclusions = new[]
                        {
                            new Azure.FrontDoor.Inputs.FirewallPolicyManagedRuleOverrideExclusionArgs
                            {
                                MatchVariable = "QueryStringArgNames",
                                Operator = "Equals",
                                Selector = "really_not_suspicious",
                            },
                        },
                        Rules = new[]
                        {
                            new Azure.FrontDoor.Inputs.FirewallPolicyManagedRuleOverrideRuleArgs
                            {
                                RuleId = "942200",
                                Action = "Block",
                                Exclusions = new[]
                                {
                                    new Azure.FrontDoor.Inputs.FirewallPolicyManagedRuleOverrideRuleExclusionArgs
                                    {
                                        MatchVariable = "QueryStringArgNames",
                                        Operator = "Equals",
                                        Selector = "innocent",
                                    },
                                },
                            },
                        },
                    },
                },
            },
            new Azure.FrontDoor.Inputs.FirewallPolicyManagedRuleArgs
            {
                Type = "Microsoft_BotManagerRuleSet",
                Version = "1.0",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/frontdoor"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-rg"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		_, err = frontdoor.NewFirewallPolicy(ctx, "example", &frontdoor.FirewallPolicyArgs{
			Name:                          pulumi.String("examplefdwafpolicy"),
			ResourceGroupName:             example.Name,
			Enabled:                       pulumi.Bool(true),
			Mode:                          pulumi.String("Prevention"),
			RedirectUrl:                   pulumi.String("https://www.contoso.com"),
			CustomBlockResponseStatusCode: pulumi.Int(403),
			CustomBlockResponseBody:       pulumi.String("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg=="),
			CustomRules: frontdoor.FirewallPolicyCustomRuleArray{
				&frontdoor.FirewallPolicyCustomRuleArgs{
					Name:                       pulumi.String("Rule1"),
					Enabled:                    pulumi.Bool(true),
					Priority:                   pulumi.Int(1),
					RateLimitDurationInMinutes: pulumi.Int(1),
					RateLimitThreshold:         pulumi.Int(10),
					Type:                       pulumi.String("MatchRule"),
					Action:                     pulumi.String("Block"),
					MatchConditions: frontdoor.FirewallPolicyCustomRuleMatchConditionArray{
						&frontdoor.FirewallPolicyCustomRuleMatchConditionArgs{
							MatchVariable:     pulumi.String("RemoteAddr"),
							Operator:          pulumi.String("IPMatch"),
							NegationCondition: pulumi.Bool(false),
							MatchValues: pulumi.StringArray{
								pulumi.String("192.168.1.0/24"),
								pulumi.String("10.0.0.0/24"),
							},
						},
					},
				},
				&frontdoor.FirewallPolicyCustomRuleArgs{
					Name:                       pulumi.String("Rule2"),
					Enabled:                    pulumi.Bool(true),
					Priority:                   pulumi.Int(2),
					RateLimitDurationInMinutes: pulumi.Int(1),
					RateLimitThreshold:         pulumi.Int(10),
					Type:                       pulumi.String("MatchRule"),
					Action:                     pulumi.String("Block"),
					MatchConditions: frontdoor.FirewallPolicyCustomRuleMatchConditionArray{
						&frontdoor.FirewallPolicyCustomRuleMatchConditionArgs{
							MatchVariable:     pulumi.String("RemoteAddr"),
							Operator:          pulumi.String("IPMatch"),
							NegationCondition: pulumi.Bool(false),
							MatchValues: pulumi.StringArray{
								pulumi.String("192.168.1.0/24"),
							},
						},
						&frontdoor.FirewallPolicyCustomRuleMatchConditionArgs{
							MatchVariable:     pulumi.String("RequestHeader"),
							Selector:          pulumi.String("UserAgent"),
							Operator:          pulumi.String("Contains"),
							NegationCondition: pulumi.Bool(false),
							MatchValues: pulumi.StringArray{
								pulumi.String("windows"),
							},
							Transforms: pulumi.StringArray{
								pulumi.String("Lowercase"),
								pulumi.String("Trim"),
							},
						},
					},
				},
			},
			ManagedRules: frontdoor.FirewallPolicyManagedRuleArray{
				&frontdoor.FirewallPolicyManagedRuleArgs{
					Type:    pulumi.String("DefaultRuleSet"),
					Version: pulumi.String("1.0"),
					Exclusions: frontdoor.FirewallPolicyManagedRuleExclusionArray{
						&frontdoor.FirewallPolicyManagedRuleExclusionArgs{
							MatchVariable: pulumi.String("QueryStringArgNames"),
							Operator:      pulumi.String("Equals"),
							Selector:      pulumi.String("not_suspicious"),
						},
					},
					Overrides: frontdoor.FirewallPolicyManagedRuleOverrideArray{
						&frontdoor.FirewallPolicyManagedRuleOverrideArgs{
							RuleGroupName: pulumi.String("PHP"),
							Rules: frontdoor.FirewallPolicyManagedRuleOverrideRuleArray{
								&frontdoor.FirewallPolicyManagedRuleOverrideRuleArgs{
									RuleId:  pulumi.String("933100"),
									Enabled: pulumi.Bool(false),
									Action:  pulumi.String("Block"),
								},
							},
						},
						&frontdoor.FirewallPolicyManagedRuleOverrideArgs{
							RuleGroupName: pulumi.String("SQLI"),
							Exclusions: frontdoor.FirewallPolicyManagedRuleOverrideExclusionArray{
								&frontdoor.FirewallPolicyManagedRuleOverrideExclusionArgs{
									MatchVariable: pulumi.String("QueryStringArgNames"),
									Operator:      pulumi.String("Equals"),
									Selector:      pulumi.String("really_not_suspicious"),
								},
							},
							Rules: frontdoor.FirewallPolicyManagedRuleOverrideRuleArray{
								&frontdoor.FirewallPolicyManagedRuleOverrideRuleArgs{
									RuleId: pulumi.String("942200"),
									Action: pulumi.String("Block"),
									Exclusions: frontdoor.FirewallPolicyManagedRuleOverrideRuleExclusionArray{
										&frontdoor.FirewallPolicyManagedRuleOverrideRuleExclusionArgs{
											MatchVariable: pulumi.String("QueryStringArgNames"),
											Operator:      pulumi.String("Equals"),
											Selector:      pulumi.String("innocent"),
										},
									},
								},
							},
						},
					},
				},
				&frontdoor.FirewallPolicyManagedRuleArgs{
					Type:    pulumi.String("Microsoft_BotManagerRuleSet"),
					Version: pulumi.String("1.0"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.frontdoor.FirewallPolicy;
import com.pulumi.azure.frontdoor.FirewallPolicyArgs;
import com.pulumi.azure.frontdoor.inputs.FirewallPolicyCustomRuleArgs;
import com.pulumi.azure.frontdoor.inputs.FirewallPolicyManagedRuleArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-rg")
            .location("West Europe")
            .build());

        var exampleFirewallPolicy = new FirewallPolicy("exampleFirewallPolicy", FirewallPolicyArgs.builder()
            .name("examplefdwafpolicy")
            .resourceGroupName(example.name())
            .enabled(true)
            .mode("Prevention")
            .redirectUrl("https://www.contoso.com")
            .customBlockResponseStatusCode(403)
            .customBlockResponseBody("PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg==")
            .customRules(            
                FirewallPolicyCustomRuleArgs.builder()
                    .name("Rule1")
                    .enabled(true)
                    .priority(1)
                    .rateLimitDurationInMinutes(1)
                    .rateLimitThreshold(10)
                    .type("MatchRule")
                    .action("Block")
                    .matchConditions(FirewallPolicyCustomRuleMatchConditionArgs.builder()
                        .matchVariable("RemoteAddr")
                        .operator("IPMatch")
                        .negationCondition(false)
                        .matchValues(                        
                            "192.168.1.0/24",
                            "10.0.0.0/24")
                        .build())
                    .build(),
                FirewallPolicyCustomRuleArgs.builder()
                    .name("Rule2")
                    .enabled(true)
                    .priority(2)
                    .rateLimitDurationInMinutes(1)
                    .rateLimitThreshold(10)
                    .type("MatchRule")
                    .action("Block")
                    .matchConditions(                    
                        FirewallPolicyCustomRuleMatchConditionArgs.builder()
                            .matchVariable("RemoteAddr")
                            .operator("IPMatch")
                            .negationCondition(false)
                            .matchValues("192.168.1.0/24")
                            .build(),
                        FirewallPolicyCustomRuleMatchConditionArgs.builder()
                            .matchVariable("RequestHeader")
                            .selector("UserAgent")
                            .operator("Contains")
                            .negationCondition(false)
                            .matchValues("windows")
                            .transforms(                            
                                "Lowercase",
                                "Trim")
                            .build())
                    .build())
            .managedRules(            
                FirewallPolicyManagedRuleArgs.builder()
                    .type("DefaultRuleSet")
                    .version("1.0")
                    .exclusions(FirewallPolicyManagedRuleExclusionArgs.builder()
                        .matchVariable("QueryStringArgNames")
                        .operator("Equals")
                        .selector("not_suspicious")
                        .build())
                    .overrides(                    
                        FirewallPolicyManagedRuleOverrideArgs.builder()
                            .ruleGroupName("PHP")
                            .rules(FirewallPolicyManagedRuleOverrideRuleArgs.builder()
                                .ruleId("933100")
                                .enabled(false)
                                .action("Block")
                                .build())
                            .build(),
                        FirewallPolicyManagedRuleOverrideArgs.builder()
                            .ruleGroupName("SQLI")
                            .exclusions(FirewallPolicyManagedRuleOverrideExclusionArgs.builder()
                                .matchVariable("QueryStringArgNames")
                                .operator("Equals")
                                .selector("really_not_suspicious")
                                .build())
                            .rules(FirewallPolicyManagedRuleOverrideRuleArgs.builder()
                                .ruleId("942200")
                                .action("Block")
                                .exclusions(FirewallPolicyManagedRuleOverrideRuleExclusionArgs.builder()
                                    .matchVariable("QueryStringArgNames")
                                    .operator("Equals")
                                    .selector("innocent")
                                    .build())
                                .build())
                            .build())
                    .build(),
                FirewallPolicyManagedRuleArgs.builder()
                    .type("Microsoft_BotManagerRuleSet")
                    .version("1.0")
                    .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-rg
      location: West Europe
  exampleFirewallPolicy:
    type: azure:frontdoor:FirewallPolicy
    name: example
    properties:
      name: examplefdwafpolicy
      resourceGroupName: ${example.name}
      enabled: true
      mode: Prevention
      redirectUrl: https://www.contoso.com
      customBlockResponseStatusCode: 403
      customBlockResponseBody: PGh0bWw+CjxoZWFkZXI+PHRpdGxlPkhlbGxvPC90aXRsZT48L2hlYWRlcj4KPGJvZHk+CkhlbGxvIHdvcmxkCjwvYm9keT4KPC9odG1sPg==
      customRules:
        - name: Rule1
          enabled: true
          priority: 1
          rateLimitDurationInMinutes: 1
          rateLimitThreshold: 10
          type: MatchRule
          action: Block
          matchConditions:
            - matchVariable: RemoteAddr
              operator: IPMatch
              negationCondition: false
              matchValues:
                - 192.168.1.0/24
                - 10.0.0.0/24
        - name: Rule2
          enabled: true
          priority: 2
          rateLimitDurationInMinutes: 1
          rateLimitThreshold: 10
          type: MatchRule
          action: Block
          matchConditions:
            - matchVariable: RemoteAddr
              operator: IPMatch
              negationCondition: false
              matchValues:
                - 192.168.1.0/24
            - matchVariable: RequestHeader
              selector: UserAgent
              operator: Contains
              negationCondition: false
              matchValues:
                - windows
              transforms:
                - Lowercase
                - Trim
      managedRules:
        - type: DefaultRuleSet
          version: '1.0'
          exclusions:
            - matchVariable: QueryStringArgNames
              operator: Equals
              selector: not_suspicious
          overrides:
            - ruleGroupName: PHP
              rules:
                - ruleId: '933100'
                  enabled: false
                  action: Block
            - ruleGroupName: SQLI
              exclusions:
                - matchVariable: QueryStringArgNames
                  operator: Equals
                  selector: really_not_suspicious
              rules:
                - ruleId: '942200'
                  action: Block
                  exclusions:
                    - matchVariable: QueryStringArgNames
                      operator: Equals
                      selector: innocent
        - type: Microsoft_BotManagerRuleSet
          version: '1.0'
```
<!--End PulumiCodeChooser -->

## Import

FrontDoor Web Application Firewall Policy can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:frontdoor/firewallPolicy:FirewallPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg/providers/Microsoft.Network/frontDoorWebApplicationFirewallPolicies/examplefdwafpolicy
```


customBlockResponseBodyB" }If a `custom_rule` block's action type is `block`, this is the response body. The body must be specified in base64 encoding.
·
customBlockResponseStatusCodeB If a `custom_rule` block's action type is `block`, this is the response status code. Possible values are `200`, `403`, `405`, `406`, or `429`.
´
customRulespBn*l:j
h
	frontdoorFirewallPolicyCustomRuleAazure:frontdoor/FirewallPolicyCustomRule:FirewallPolicyCustomRule3One or more `custom_rule` blocks as defined below.
V
enabledB
 EIs the policy a enabled state or disabled state. Defaults to `true`.
¹
managedRulessBq*o:m
k
	frontdoorFirewallPolicyManagedRuleCazure:frontdoor/FirewallPolicyManagedRule:FirewallPolicyManagedRule4One or more `managed_rule` blocks as defined below.
q
modeB" cThe firewall policy mode. Possible values are `Detection`, `Prevention`. Defaults to `Prevention`.
Y
nameB" KThe name of the policy. Changing this forces a new resource to be created.
d
redirectUrlB" OIf action type is redirect, this field represents redirect URL for the client.
l
resourceGroupName" SThe name of the resource group. Changing this forces a new resource to be created.
T
tagsB2" DA mapping of tags to assign to the Web Application Firewall Policy.
"
customBlockResponseBodyB" }If a `custom_rule` block's action type is `block`, this is the response body. The body must be specified in base64 encoding.
"·
customBlockResponseStatusCodeB If a `custom_rule` block's action type is `block`, this is the response status code. Possible values are `200`, `403`, `405`, `406`, or `429`.
"´
customRulespBn*l:j
h
	frontdoorFirewallPolicyCustomRuleAazure:frontdoor/FirewallPolicyCustomRule:FirewallPolicyCustomRule3One or more `custom_rule` blocks as defined below.
"V
enabledB
 EIs the policy a enabled state or disabled state. Defaults to `true`.
"u
frontendEndpointIds*" XThe Frontend Endpoints associated with this Front Door Web Application Firewall policy.
"O
location" ?The Azure Region where this Front Door Firewall Policy exists.
"¹
managedRulessBq*o:m
k
	frontdoorFirewallPolicyManagedRuleCazure:frontdoor/FirewallPolicyManagedRule:FirewallPolicyManagedRule4One or more `managed_rule` blocks as defined below.
"q
modeB" cThe firewall policy mode. Possible values are `Detection`, `Prevention`. Defaults to `Prevention`.
"W
name" KThe name of the policy. Changing this forces a new resource to be created.
"d
redirectUrlB" OIf action type is redirect, this field represents redirect URL for the client.
"l
resourceGroupName" SThe name of the resource group. Changing this forces a new resource to be created.
"T
tagsB2" DA mapping of tags to assign to the Web Application Firewall Policy.
*Ó
;
	frontdoor	Frontdoor#azure:frontdoor/frontdoor:FrontdoorÏp!> **IMPORTANT** This deploys an Azure Front Door (classic) resource which has been deprecated and will receive security updates only. Please migrate your existing Azure Front Door (classic) deployments to the new Azure Front Door (standard/premium) resources. For your convenience, the service team has exposed a `Front Door Classic` to `Front Door Standard/Premium` [migration tool](https://learn.microsoft.com/azure/frontdoor/tier-migration) to allow you to migrate your existing `Front Door Classic` instances to the new `Front Door Standard/Premium` product tiers.

Manages an Azure Front Door (classic) instance.

Azure Front Door Service is Microsoft's highly available and scalable web application acceleration platform and global HTTP(S) load balancer. It provides built-in DDoS protection and application layer security and caching. Front Door enables you to build applications that maximize and automate high-availability and performance for your end-users. Use Front Door with Azure services including Web/Mobile Apps, Cloud Services and Virtual Machines â or combine it with on-premises services for hybrid deployments and smooth cloud migration.

Below are some of the key scenarios that Azure Front Door Service addresses:

* Use Front Door to improve application scale and availability with instant multi-region failover
* Use Front Door to improve application performance with SSL offload and routing requests to the fastest available application backend.
* Use Front Door for application layer security and DDoS protection for your application.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "FrontDoorExampleResourceGroup",
    location: "West Europe",
});
const exampleFrontdoor = new azure.frontdoor.Frontdoor("example", {
    name: "example-FrontDoor",
    resourceGroupName: example.name,
    routingRules: [{
        name: "exampleRoutingRule1",
        acceptedProtocols: [
            "Http",
            "Https",
        ],
        patternsToMatches: ["/*"],
        frontendEndpoints: ["exampleFrontendEndpoint1"],
        forwardingConfiguration: {
            forwardingProtocol: "MatchRequest",
            backendPoolName: "exampleBackendBing",
        },
    }],
    backendPoolLoadBalancings: [{
        name: "exampleLoadBalancingSettings1",
    }],
    backendPoolHealthProbes: [{
        name: "exampleHealthProbeSetting1",
    }],
    backendPools: [{
        name: "exampleBackendBing",
        backends: [{
            hostHeader: "www.bing.com",
            address: "www.bing.com",
            httpPort: 80,
            httpsPort: 443,
        }],
        loadBalancingName: "exampleLoadBalancingSettings1",
        healthProbeName: "exampleHealthProbeSetting1",
    }],
    frontendEndpoints: [{
        name: "exampleFrontendEndpoint1",
        hostName: "example-FrontDoor.azurefd.net",
    }],
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="FrontDoorExampleResourceGroup",
    location="West Europe")
example_frontdoor = azure.frontdoor.Frontdoor("example",
    name="example-FrontDoor",
    resource_group_name=example.name,
    routing_rules=[{
        "name": "exampleRoutingRule1",
        "accepted_protocols": [
            "Http",
            "Https",
        ],
        "patterns_to_matches": ["/*"],
        "frontend_endpoints": ["exampleFrontendEndpoint1"],
        "forwarding_configuration": {
            "forwarding_protocol": "MatchRequest",
            "backend_pool_name": "exampleBackendBing",
        },
    }],
    backend_pool_load_balancings=[{
        "name": "exampleLoadBalancingSettings1",
    }],
    backend_pool_health_probes=[{
        "name": "exampleHealthProbeSetting1",
    }],
    backend_pools=[{
        "name": "exampleBackendBing",
        "backends": [{
            "host_header": "www.bing.com",
            "address": "www.bing.com",
            "http_port": 80,
            "https_port": 443,
        }],
        "load_balancing_name": "exampleLoadBalancingSettings1",
        "health_probe_name": "exampleHealthProbeSetting1",
    }],
    frontend_endpoints=[{
        "name": "exampleFrontendEndpoint1",
        "host_name": "example-FrontDoor.azurefd.net",
    }])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "FrontDoorExampleResourceGroup",
        Location = "West Europe",
    });

    var exampleFrontdoor = new Azure.FrontDoor.Frontdoor("example", new()
    {
        Name = "example-FrontDoor",
        ResourceGroupName = example.Name,
        RoutingRules = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorRoutingRuleArgs
            {
                Name = "exampleRoutingRule1",
                AcceptedProtocols = new[]
                {
                    "Http",
                    "Https",
                },
                PatternsToMatches = new[]
                {
                    "/*",
                },
                FrontendEndpoints = new[]
                {
                    "exampleFrontendEndpoint1",
                },
                ForwardingConfiguration = new Azure.FrontDoor.Inputs.FrontdoorRoutingRuleForwardingConfigurationArgs
                {
                    ForwardingProtocol = "MatchRequest",
                    BackendPoolName = "exampleBackendBing",
                },
            },
        },
        BackendPoolLoadBalancings = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorBackendPoolLoadBalancingArgs
            {
                Name = "exampleLoadBalancingSettings1",
            },
        },
        BackendPoolHealthProbes = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorBackendPoolHealthProbeArgs
            {
                Name = "exampleHealthProbeSetting1",
            },
        },
        BackendPools = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorBackendPoolArgs
            {
                Name = "exampleBackendBing",
                Backends = new[]
                {
                    new Azure.FrontDoor.Inputs.FrontdoorBackendPoolBackendArgs
                    {
                        HostHeader = "www.bing.com",
                        Address = "www.bing.com",
                        HttpPort = 80,
                        HttpsPort = 443,
                    },
                },
                LoadBalancingName = "exampleLoadBalancingSettings1",
                HealthProbeName = "exampleHealthProbeSetting1",
            },
        },
        FrontendEndpoints = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorFrontendEndpointArgs
            {
                Name = "exampleFrontendEndpoint1",
                HostName = "example-FrontDoor.azurefd.net",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/frontdoor"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("FrontDoorExampleResourceGroup"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		_, err = frontdoor.NewFrontdoor(ctx, "example", &frontdoor.FrontdoorArgs{
			Name:              pulumi.String("example-FrontDoor"),
			ResourceGroupName: example.Name,
			RoutingRules: frontdoor.FrontdoorRoutingRuleArray{
				&frontdoor.FrontdoorRoutingRuleArgs{
					Name: pulumi.String("exampleRoutingRule1"),
					AcceptedProtocols: pulumi.StringArray{
						pulumi.String("Http"),
						pulumi.String("Https"),
					},
					PatternsToMatches: pulumi.StringArray{
						pulumi.String("/*"),
					},
					FrontendEndpoints: pulumi.StringArray{
						pulumi.String("exampleFrontendEndpoint1"),
					},
					ForwardingConfiguration: &frontdoor.FrontdoorRoutingRuleForwardingConfigurationArgs{
						ForwardingProtocol: pulumi.String("MatchRequest"),
						BackendPoolName:    pulumi.String("exampleBackendBing"),
					},
				},
			},
			BackendPoolLoadBalancings: frontdoor.FrontdoorBackendPoolLoadBalancingArray{
				&frontdoor.FrontdoorBackendPoolLoadBalancingArgs{
					Name: pulumi.String("exampleLoadBalancingSettings1"),
				},
			},
			BackendPoolHealthProbes: frontdoor.FrontdoorBackendPoolHealthProbeArray{
				&frontdoor.FrontdoorBackendPoolHealthProbeArgs{
					Name: pulumi.String("exampleHealthProbeSetting1"),
				},
			},
			BackendPools: frontdoor.FrontdoorBackendPoolArray{
				&frontdoor.FrontdoorBackendPoolArgs{
					Name: pulumi.String("exampleBackendBing"),
					Backends: frontdoor.FrontdoorBackendPoolBackendArray{
						&frontdoor.FrontdoorBackendPoolBackendArgs{
							HostHeader: pulumi.String("www.bing.com"),
							Address:    pulumi.String("www.bing.com"),
							HttpPort:   pulumi.Int(80),
							HttpsPort:  pulumi.Int(443),
						},
					},
					LoadBalancingName: pulumi.String("exampleLoadBalancingSettings1"),
					HealthProbeName:   pulumi.String("exampleHealthProbeSetting1"),
				},
			},
			FrontendEndpoints: frontdoor.FrontdoorFrontendEndpointArray{
				&frontdoor.FrontdoorFrontendEndpointArgs{
					Name:     pulumi.String("exampleFrontendEndpoint1"),
					HostName: pulumi.String("example-FrontDoor.azurefd.net"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.frontdoor.Frontdoor;
import com.pulumi.azure.frontdoor.FrontdoorArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorRoutingRuleArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorRoutingRuleForwardingConfigurationArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorBackendPoolLoadBalancingArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorBackendPoolHealthProbeArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorBackendPoolArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorFrontendEndpointArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("FrontDoorExampleResourceGroup")
            .location("West Europe")
            .build());

        var exampleFrontdoor = new Frontdoor("exampleFrontdoor", FrontdoorArgs.builder()
            .name("example-FrontDoor")
            .resourceGroupName(example.name())
            .routingRules(FrontdoorRoutingRuleArgs.builder()
                .name("exampleRoutingRule1")
                .acceptedProtocols(                
                    "Http",
                    "Https")
                .patternsToMatches("/*")
                .frontendEndpoints("exampleFrontendEndpoint1")
                .forwardingConfiguration(FrontdoorRoutingRuleForwardingConfigurationArgs.builder()
                    .forwardingProtocol("MatchRequest")
                    .backendPoolName("exampleBackendBing")
                    .build())
                .build())
            .backendPoolLoadBalancings(FrontdoorBackendPoolLoadBalancingArgs.builder()
                .name("exampleLoadBalancingSettings1")
                .build())
            .backendPoolHealthProbes(FrontdoorBackendPoolHealthProbeArgs.builder()
                .name("exampleHealthProbeSetting1")
                .build())
            .backendPools(FrontdoorBackendPoolArgs.builder()
                .name("exampleBackendBing")
                .backends(FrontdoorBackendPoolBackendArgs.builder()
                    .hostHeader("www.bing.com")
                    .address("www.bing.com")
                    .httpPort(80)
                    .httpsPort(443)
                    .build())
                .loadBalancingName("exampleLoadBalancingSettings1")
                .healthProbeName("exampleHealthProbeSetting1")
                .build())
            .frontendEndpoints(FrontdoorFrontendEndpointArgs.builder()
                .name("exampleFrontendEndpoint1")
                .hostName("example-FrontDoor.azurefd.net")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: FrontDoorExampleResourceGroup
      location: West Europe
  exampleFrontdoor:
    type: azure:frontdoor:Frontdoor
    name: example
    properties:
      name: example-FrontDoor
      resourceGroupName: ${example.name}
      routingRules:
        - name: exampleRoutingRule1
          acceptedProtocols:
            - Http
            - Https
          patternsToMatches:
            - /*
          frontendEndpoints:
            - exampleFrontendEndpoint1
          forwardingConfiguration:
            forwardingProtocol: MatchRequest
            backendPoolName: exampleBackendBing
      backendPoolLoadBalancings:
        - name: exampleLoadBalancingSettings1
      backendPoolHealthProbes:
        - name: exampleHealthProbeSetting1
      backendPools:
        - name: exampleBackendBing
          backends:
            - hostHeader: www.bing.com
              address: www.bing.com
              httpPort: 80
              httpsPort: 443
          loadBalancingName: exampleLoadBalancingSettings1
          healthProbeName: exampleHealthProbeSetting1
      frontendEndpoints:
        - name: exampleFrontendEndpoint1
          hostName: example-FrontDoor.azurefd.net
```
<!--End PulumiCodeChooser -->

## Import

Front Doors can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:frontdoor/frontdoor:Frontdoor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/frontDoors/frontdoor1
```

Ø
backendPoolHealthProbes*:
}
	frontdoorFrontdoorBackendPoolHealthProbeOazure:frontdoor/FrontdoorBackendPoolHealthProbe:FrontdoorBackendPoolHealthProbe6A `backend_pool_health_probe` block as defined below.
ä
backendPoolLoadBalancings*:

	frontdoor!FrontdoorBackendPoolLoadBalancingSazure:frontdoor/FrontdoorBackendPoolLoadBalancing:FrontdoorBackendPoolLoadBalancing8A `backend_pool_load_balancing` block as defined below.
Ä
backendPoolSettingsyBw*u:s
q
	frontdoorFrontdoorBackendPoolSettingGazure:frontdoor/FrontdoorBackendPoolSetting:FrontdoorBackendPoolSetting2A `backend_pool_settings` block as defined below.

backendPoolsb*`:^
\
	frontdoorFrontdoorBackendPool9azure:frontdoor/FrontdoorBackendPool:FrontdoorBackendPoolA `backend_pool` block as defined below.

> Azure by default allows specifying up to 50 Backend Pools - but this quota can be increased via Microsoft Support.
B
friendlyNameB" ,A friendly name for the Front Door service.
¶
frontendEndpointsq*o:m
k
	frontdoorFrontdoorFrontendEndpointCazure:frontdoor/FrontdoorFrontendEndpoint:FrontdoorFrontendEndpoint.A `frontend_endpoint` block as defined below.
a
loadBalancerEnabledB
 DShould the Front Door Load Balancer be Enabled? Defaults to `true`.

nameB" zSpecifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
¤
resourceGroupName" Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.

routingRulesb*`:^
\
	frontdoorFrontdoorRoutingRule9azure:frontdoor/FrontdoorRoutingRule:FrontdoorRoutingRule)A `routing_rule` block as defined below.
=
tagsB2" -A mapping of tags to assign to the resource.
"Ø
backendPoolHealthProbes*:
}
	frontdoorFrontdoorBackendPoolHealthProbeOazure:frontdoor/FrontdoorBackendPoolHealthProbe:FrontdoorBackendPoolHealthProbe6A `backend_pool_health_probe` block as defined below.
"
backendPoolHealthProbesMap2" fA map/dictionary of Backend Pool Health Probe Names (key) to the Backend Pool Health Probe ID (value)
"§
#backendPoolLoadBalancingSettingsMap2" zA map/dictionary of Backend Pool Load Balancing Setting Names (key) to the Backend Pool Load Balancing Setting ID (value)
"ä
backendPoolLoadBalancings*:

	frontdoor!FrontdoorBackendPoolLoadBalancingSazure:frontdoor/FrontdoorBackendPoolLoadBalancing:FrontdoorBackendPoolLoadBalancing8A `backend_pool_load_balancing` block as defined below.
"Â
backendPoolSettingsw*u:s
q
	frontdoorFrontdoorBackendPoolSettingGazure:frontdoor/FrontdoorBackendPoolSetting:FrontdoorBackendPoolSetting2A `backend_pool_settings` block as defined below.
"
backendPoolsb*`:^
\
	frontdoorFrontdoorBackendPool9azure:frontdoor/FrontdoorBackendPool:FrontdoorBackendPoolA `backend_pool` block as defined below.

> Azure by default allows specifying up to 50 Backend Pools - but this quota can be increased via Microsoft Support.
"e
backendPoolsMap2" LA map/dictionary of Backend Pool Names (key) to the Backend Pool ID (value)
"@
cname" 3The host that each frontendEndpoint must CNAME to.
"
explicitResourceOrders*~:|
z
	frontdoorFrontdoorExplicitResourceOrderMazure:frontdoor/FrontdoorExplicitResourceOrder:FrontdoorExplicitResourceOrder"B
friendlyNameB" ,A friendly name for the Front Door service.
"¶
frontendEndpointsq*o:m
k
	frontdoorFrontdoorFrontendEndpointCazure:frontdoor/FrontdoorFrontendEndpoint:FrontdoorFrontendEndpoint.A `frontend_endpoint` block as defined below.
"t
frontendEndpointsMap2" VA map/dictionary of Frontend Endpoint Names (key) to the Frontend Endpoint ID (value)
"È
headerFrontdoorId" ®The unique ID of the Front Door which is embedded into the incoming headers `X-Azure-FDID` attribute and maybe used to filter traffic sent by the Front Door to your backend.
"a
loadBalancerEnabledB
 DShould the Front Door Load Balancer be Enabled? Defaults to `true`.
"
name" zSpecifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
"¤
resourceGroupName" Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
"
routingRulesb*`:^
\
	frontdoorFrontdoorRoutingRule9azure:frontdoor/FrontdoorRoutingRule:FrontdoorRoutingRule)A `routing_rule` block as defined below.
"e
routingRulesMap2" LA map/dictionary of Routing Rule Names (key) to the Routing Rule ID (value)
"=
tagsB2" -A mapping of tags to assign to the resource.
*»
A
	frontdoorRulesEngine'azure:frontdoor/rulesEngine:RulesEngineÕ±!> **IMPORTANT** This deploys an Azure Front Door (classic) resource which has been deprecated and will receive security updates only. Please migrate your existing Azure Front Door (classic) deployments to the new Azure Front Door (standard/premium) resources. For your convenience, the service team has exposed a `Front Door Classic` to `Front Door Standard/Premium` [migration tool](https://learn.microsoft.com/azure/frontdoor/tier-migration) to allow you to migrate your existing `Front Door Classic` instances to the new `Front Door Standard/Premium` product tiers.

Manages an Azure Front Door (classic) Rules Engine configuration and rules.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-rg",
    location: "West Europe",
});
const exampleFrontdoor = new azure.frontdoor.Frontdoor("example", {
    name: "example",
    resourceGroupName: example.name,
    backendPools: [{
        name: "exampleBackendBing",
        loadBalancingName: "exampleLoadBalancingSettings1",
        healthProbeName: "exampleHealthProbeSetting1",
        backends: [{
            hostHeader: "www.bing.com",
            address: "www.bing.com",
            httpPort: 80,
            httpsPort: 443,
        }],
    }],
    backendPoolHealthProbes: [{
        name: "exampleHealthProbeSetting1",
    }],
    backendPoolLoadBalancings: [{
        name: "exampleLoadBalancingSettings1",
    }],
    frontendEndpoints: [{
        name: "exampleFrontendEndpoint1",
        hostName: "example-FrontDoor.azurefd.net",
    }],
    routingRules: [{
        name: "exampleRoutingRule1",
        acceptedProtocols: [
            "Http",
            "Https",
        ],
        patternsToMatches: ["/*"],
        frontendEndpoints: ["exampleFrontendEndpoint1"],
    }],
});
const exampleRulesEngine = new azure.frontdoor.RulesEngine("example_rules_engine", {
    name: "exampleRulesEngineConfig1",
    frontdoorName: exampleFrontdoor.name,
    resourceGroupName: exampleFrontdoor.resourceGroupName,
    rules: [
        {
            name: "debuggingoutput",
            priority: 1,
            action: {
                responseHeaders: [{
                    headerActionType: "Append",
                    headerName: "X-TEST-HEADER",
                    value: "Append Header Rule",
                }],
            },
        },
        {
            name: "overwriteorigin",
            priority: 2,
            matchConditions: [{
                variable: "RequestMethod",
                operator: "Equal",
                values: [
                    "GET",
                    "POST",
                ],
            }],
            action: {
                responseHeaders: [
                    {
                        headerActionType: "Overwrite",
                        headerName: "Access-Control-Allow-Origin",
                        value: "*",
                    },
                    {
                        headerActionType: "Overwrite",
                        headerName: "Access-Control-Allow-Credentials",
                        value: "true",
                    },
                ],
            },
        },
    ],
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-rg",
    location="West Europe")
example_frontdoor = azure.frontdoor.Frontdoor("example",
    name="example",
    resource_group_name=example.name,
    backend_pools=[{
        "name": "exampleBackendBing",
        "load_balancing_name": "exampleLoadBalancingSettings1",
        "health_probe_name": "exampleHealthProbeSetting1",
        "backends": [{
            "host_header": "www.bing.com",
            "address": "www.bing.com",
            "http_port": 80,
            "https_port": 443,
        }],
    }],
    backend_pool_health_probes=[{
        "name": "exampleHealthProbeSetting1",
    }],
    backend_pool_load_balancings=[{
        "name": "exampleLoadBalancingSettings1",
    }],
    frontend_endpoints=[{
        "name": "exampleFrontendEndpoint1",
        "host_name": "example-FrontDoor.azurefd.net",
    }],
    routing_rules=[{
        "name": "exampleRoutingRule1",
        "accepted_protocols": [
            "Http",
            "Https",
        ],
        "patterns_to_matches": ["/*"],
        "frontend_endpoints": ["exampleFrontendEndpoint1"],
    }])
example_rules_engine = azure.frontdoor.RulesEngine("example_rules_engine",
    name="exampleRulesEngineConfig1",
    frontdoor_name=example_frontdoor.name,
    resource_group_name=example_frontdoor.resource_group_name,
    rules=[
        {
            "name": "debuggingoutput",
            "priority": 1,
            "action": {
                "response_headers": [{
                    "header_action_type": "Append",
                    "header_name": "X-TEST-HEADER",
                    "value": "Append Header Rule",
                }],
            },
        },
        {
            "name": "overwriteorigin",
            "priority": 2,
            "match_conditions": [{
                "variable": "RequestMethod",
                "operator": "Equal",
                "values": [
                    "GET",
                    "POST",
                ],
            }],
            "action": {
                "response_headers": [
                    {
                        "header_action_type": "Overwrite",
                        "header_name": "Access-Control-Allow-Origin",
                        "value": "*",
                    },
                    {
                        "header_action_type": "Overwrite",
                        "header_name": "Access-Control-Allow-Credentials",
                        "value": "true",
                    },
                ],
            },
        },
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-rg",
        Location = "West Europe",
    });

    var exampleFrontdoor = new Azure.FrontDoor.Frontdoor("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        BackendPools = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorBackendPoolArgs
            {
                Name = "exampleBackendBing",
                LoadBalancingName = "exampleLoadBalancingSettings1",
                HealthProbeName = "exampleHealthProbeSetting1",
                Backends = new[]
                {
                    new Azure.FrontDoor.Inputs.FrontdoorBackendPoolBackendArgs
                    {
                        HostHeader = "www.bing.com",
                        Address = "www.bing.com",
                        HttpPort = 80,
                        HttpsPort = 443,
                    },
                },
            },
        },
        BackendPoolHealthProbes = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorBackendPoolHealthProbeArgs
            {
                Name = "exampleHealthProbeSetting1",
            },
        },
        BackendPoolLoadBalancings = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorBackendPoolLoadBalancingArgs
            {
                Name = "exampleLoadBalancingSettings1",
            },
        },
        FrontendEndpoints = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorFrontendEndpointArgs
            {
                Name = "exampleFrontendEndpoint1",
                HostName = "example-FrontDoor.azurefd.net",
            },
        },
        RoutingRules = new[]
        {
            new Azure.FrontDoor.Inputs.FrontdoorRoutingRuleArgs
            {
                Name = "exampleRoutingRule1",
                AcceptedProtocols = new[]
                {
                    "Http",
                    "Https",
                },
                PatternsToMatches = new[]
                {
                    "/*",
                },
                FrontendEndpoints = new[]
                {
                    "exampleFrontendEndpoint1",
                },
            },
        },
    });

    var exampleRulesEngine = new Azure.FrontDoor.RulesEngine("example_rules_engine", new()
    {
        Name = "exampleRulesEngineConfig1",
        FrontdoorName = exampleFrontdoor.Name,
        ResourceGroupName = exampleFrontdoor.ResourceGroupName,
        Rules = new[]
        {
            new Azure.FrontDoor.Inputs.RulesEngineRuleArgs
            {
                Name = "debuggingoutput",
                Priority = 1,
                Action = new Azure.FrontDoor.Inputs.RulesEngineRuleActionArgs
                {
                    ResponseHeaders = new[]
                    {
                        new Azure.FrontDoor.Inputs.RulesEngineRuleActionResponseHeaderArgs
                        {
                            HeaderActionType = "Append",
                            HeaderName = "X-TEST-HEADER",
                            Value = "Append Header Rule",
                        },
                    },
                },
            },
            new Azure.FrontDoor.Inputs.RulesEngineRuleArgs
            {
                Name = "overwriteorigin",
                Priority = 2,
                MatchConditions = new[]
                {
                    new Azure.FrontDoor.Inputs.RulesEngineRuleMatchConditionArgs
                    {
                        Variable = "RequestMethod",
                        Operator = "Equal",
                        Values = new[]
                        {
                            "GET",
                            "POST",
                        },
                    },
                },
                Action = new Azure.FrontDoor.Inputs.RulesEngineRuleActionArgs
                {
                    ResponseHeaders = new[]
                    {
                        new Azure.FrontDoor.Inputs.RulesEngineRuleActionResponseHeaderArgs
                        {
                            HeaderActionType = "Overwrite",
                            HeaderName = "Access-Control-Allow-Origin",
                            Value = "*",
                        },
                        new Azure.FrontDoor.Inputs.RulesEngineRuleActionResponseHeaderArgs
                        {
                            HeaderActionType = "Overwrite",
                            HeaderName = "Access-Control-Allow-Credentials",
                            Value = "true",
                        },
                    },
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/frontdoor"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-rg"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleFrontdoor, err := frontdoor.NewFrontdoor(ctx, "example", &frontdoor.FrontdoorArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			BackendPools: frontdoor.FrontdoorBackendPoolArray{
				&frontdoor.FrontdoorBackendPoolArgs{
					Name:              pulumi.String("exampleBackendBing"),
					LoadBalancingName: pulumi.String("exampleLoadBalancingSettings1"),
					HealthProbeName:   pulumi.String("exampleHealthProbeSetting1"),
					Backends: frontdoor.FrontdoorBackendPoolBackendArray{
						&frontdoor.FrontdoorBackendPoolBackendArgs{
							HostHeader: pulumi.String("www.bing.com"),
							Address:    pulumi.String("www.bing.com"),
							HttpPort:   pulumi.Int(80),
							HttpsPort:  pulumi.Int(443),
						},
					},
				},
			},
			BackendPoolHealthProbes: frontdoor.FrontdoorBackendPoolHealthProbeArray{
				&frontdoor.FrontdoorBackendPoolHealthProbeArgs{
					Name: pulumi.String("exampleHealthProbeSetting1"),
				},
			},
			BackendPoolLoadBalancings: frontdoor.FrontdoorBackendPoolLoadBalancingArray{
				&frontdoor.FrontdoorBackendPoolLoadBalancingArgs{
					Name: pulumi.String("exampleLoadBalancingSettings1"),
				},
			},
			FrontendEndpoints: frontdoor.FrontdoorFrontendEndpointArray{
				&frontdoor.FrontdoorFrontendEndpointArgs{
					Name:     pulumi.String("exampleFrontendEndpoint1"),
					HostName: pulumi.String("example-FrontDoor.azurefd.net"),
				},
			},
			RoutingRules: frontdoor.FrontdoorRoutingRuleArray{
				&frontdoor.FrontdoorRoutingRuleArgs{
					Name: pulumi.String("exampleRoutingRule1"),
					AcceptedProtocols: pulumi.StringArray{
						pulumi.String("Http"),
						pulumi.String("Https"),
					},
					PatternsToMatches: pulumi.StringArray{
						pulumi.String("/*"),
					},
					FrontendEndpoints: pulumi.StringArray{
						pulumi.String("exampleFrontendEndpoint1"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = frontdoor.NewRulesEngine(ctx, "example_rules_engine", &frontdoor.RulesEngineArgs{
			Name:              pulumi.String("exampleRulesEngineConfig1"),
			FrontdoorName:     exampleFrontdoor.Name,
			ResourceGroupName: exampleFrontdoor.ResourceGroupName,
			Rules: frontdoor.RulesEngineRuleArray{
				&frontdoor.RulesEngineRuleArgs{
					Name:     pulumi.String("debuggingoutput"),
					Priority: pulumi.Int(1),
					Action: &frontdoor.RulesEngineRuleActionArgs{
						ResponseHeaders: frontdoor.RulesEngineRuleActionResponseHeaderArray{
							&frontdoor.RulesEngineRuleActionResponseHeaderArgs{
								HeaderActionType: pulumi.String("Append"),
								HeaderName:       pulumi.String("X-TEST-HEADER"),
								Value:            pulumi.String("Append Header Rule"),
							},
						},
					},
				},
				&frontdoor.RulesEngineRuleArgs{
					Name:     pulumi.String("overwriteorigin"),
					Priority: pulumi.Int(2),
					MatchConditions: frontdoor.RulesEngineRuleMatchConditionArray{
						&frontdoor.RulesEngineRuleMatchConditionArgs{
							Variable: pulumi.String("RequestMethod"),
							Operator: pulumi.String("Equal"),
							Values: pulumi.StringArray{
								pulumi.String("GET"),
								pulumi.String("POST"),
							},
						},
					},
					Action: &frontdoor.RulesEngineRuleActionArgs{
						ResponseHeaders: frontdoor.RulesEngineRuleActionResponseHeaderArray{
							&frontdoor.RulesEngineRuleActionResponseHeaderArgs{
								HeaderActionType: pulumi.String("Overwrite"),
								HeaderName:       pulumi.String("Access-Control-Allow-Origin"),
								Value:            pulumi.String("*"),
							},
							&frontdoor.RulesEngineRuleActionResponseHeaderArgs{
								HeaderActionType: pulumi.String("Overwrite"),
								HeaderName:       pulumi.String("Access-Control-Allow-Credentials"),
								Value:            pulumi.String("true"),
							},
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.frontdoor.Frontdoor;
import com.pulumi.azure.frontdoor.FrontdoorArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorBackendPoolArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorBackendPoolHealthProbeArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorBackendPoolLoadBalancingArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorFrontendEndpointArgs;
import com.pulumi.azure.frontdoor.inputs.FrontdoorRoutingRuleArgs;
import com.pulumi.azure.frontdoor.RulesEngine;
import com.pulumi.azure.frontdoor.RulesEngineArgs;
import com.pulumi.azure.frontdoor.inputs.RulesEngineRuleArgs;
import com.pulumi.azure.frontdoor.inputs.RulesEngineRuleActionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-rg")
            .location("West Europe")
            .build());

        var exampleFrontdoor = new Frontdoor("exampleFrontdoor", FrontdoorArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .backendPools(FrontdoorBackendPoolArgs.builder()
                .name("exampleBackendBing")
                .loadBalancingName("exampleLoadBalancingSettings1")
                .healthProbeName("exampleHealthProbeSetting1")
                .backends(FrontdoorBackendPoolBackendArgs.builder()
                    .hostHeader("www.bing.com")
                    .address("www.bing.com")
                    .httpPort(80)
                    .httpsPort(443)
                    .build())
                .build())
            .backendPoolHealthProbes(FrontdoorBackendPoolHealthProbeArgs.builder()
                .name("exampleHealthProbeSetting1")
                .build())
            .backendPoolLoadBalancings(FrontdoorBackendPoolLoadBalancingArgs.builder()
                .name("exampleLoadBalancingSettings1")
                .build())
            .frontendEndpoints(FrontdoorFrontendEndpointArgs.builder()
                .name("exampleFrontendEndpoint1")
                .hostName("example-FrontDoor.azurefd.net")
                .build())
            .routingRules(FrontdoorRoutingRuleArgs.builder()
                .name("exampleRoutingRule1")
                .acceptedProtocols(                
                    "Http",
                    "Https")
                .patternsToMatches("/*")
                .frontendEndpoints("exampleFrontendEndpoint1")
                .build())
            .build());

        var exampleRulesEngine = new RulesEngine("exampleRulesEngine", RulesEngineArgs.builder()
            .name("exampleRulesEngineConfig1")
            .frontdoorName(exampleFrontdoor.name())
            .resourceGroupName(exampleFrontdoor.resourceGroupName())
            .rules(            
                RulesEngineRuleArgs.builder()
                    .name("debuggingoutput")
                    .priority(1)
                    .action(RulesEngineRuleActionArgs.builder()
                        .responseHeaders(RulesEngineRuleActionResponseHeaderArgs.builder()
                            .headerActionType("Append")
                            .headerName("X-TEST-HEADER")
                            .value("Append Header Rule")
                            .build())
                        .build())
                    .build(),
                RulesEngineRuleArgs.builder()
                    .name("overwriteorigin")
                    .priority(2)
                    .matchConditions(RulesEngineRuleMatchConditionArgs.builder()
                        .variable("RequestMethod")
                        .operator("Equal")
                        .values(                        
                            "GET",
                            "POST")
                        .build())
                    .action(RulesEngineRuleActionArgs.builder()
                        .responseHeaders(                        
                            RulesEngineRuleActionResponseHeaderArgs.builder()
                                .headerActionType("Overwrite")
                                .headerName("Access-Control-Allow-Origin")
                                .value("*")
                                .build(),
                            RulesEngineRuleActionResponseHeaderArgs.builder()
                                .headerActionType("Overwrite")
                                .headerName("Access-Control-Allow-Credentials")
                                .value("true")
                                .build())
                        .build())
                    .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-rg
      location: West Europe
  exampleFrontdoor:
    type: azure:frontdoor:Frontdoor
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      backendPools:
        - name: exampleBackendBing
          loadBalancingName: exampleLoadBalancingSettings1
          healthProbeName: exampleHealthProbeSetting1
          backends:
            - hostHeader: www.bing.com
              address: www.bing.com
              httpPort: 80
              httpsPort: 443
      backendPoolHealthProbes:
        - name: exampleHealthProbeSetting1
      backendPoolLoadBalancings:
        - name: exampleLoadBalancingSettings1
      frontendEndpoints:
        - name: exampleFrontendEndpoint1
          hostName: example-FrontDoor.azurefd.net
      routingRules:
        - name: exampleRoutingRule1
          acceptedProtocols:
            - Http
            - Https
          patternsToMatches:
            - /*
          frontendEndpoints:
            - exampleFrontendEndpoint1
  exampleRulesEngine:
    type: azure:frontdoor:RulesEngine
    name: example_rules_engine
    properties:
      name: exampleRulesEngineConfig1
      frontdoorName: ${exampleFrontdoor.name}
      resourceGroupName: ${exampleFrontdoor.resourceGroupName}
      rules:
        - name: debuggingoutput
          priority: 1
          action:
            responseHeaders:
              - headerActionType: Append
                headerName: X-TEST-HEADER
                value: Append Header Rule
        - name: overwriteorigin
          priority: 2
          matchConditions:
            - variable: RequestMethod
              operator: Equal
              values:
                - GET
                - POST
          action:
            responseHeaders:
              - headerActionType: Overwrite
                headerName: Access-Control-Allow-Origin
                value: '*'
              - headerActionType: Overwrite
                headerName: Access-Control-Allow-Credentials
                value: 'true'
```
<!--End PulumiCodeChooser -->

## Import

Azure Front Door Rules Engine's can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:frontdoor/rulesEngine:RulesEngine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Network/frontdoors/frontdoor1/rulesEngines/rule1
```

Y
enabledB
 HWhether this Rules engine configuration is enabled? Defaults to `true`.
m
frontdoorName" XThe name of the Front Door instance. Changing this forces a new resource to be created.
m
nameB" _The name of the Rules engine configuration. Changing this forces a new resource to be created.
l
resourceGroupName" SThe name of the resource group. Changing this forces a new resource to be created.

rulesUBS*Q:O
M
	frontdoorRulesEngineRule/azure:frontdoor/RulesEngineRule:RulesEngineRule!A `rule` block as defined below.
"Y
enabledB
 HWhether this Rules engine configuration is enabled? Defaults to `true`.
"m
frontdoorName" XThe name of the Front Door instance. Changing this forces a new resource to be created.
"
location" "k
name" _The name of the Rules engine configuration. Changing this forces a new resource to be created.
"l
resourceGroupName" SThe name of the resource group. Changing this forces a new resource to be created.
"
rulesUBS*Q:O
M
	frontdoorRulesEngineRule/azure:frontdoor/RulesEngineRule:RulesEngineRule!A `rule` block as defined below.
*1
E
graphServicesAccount+azure:graph/servicesAccount:ServicesAccount³)Manages a Microsoft Graph Services Account.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";
import * as azuread from "@pulumi/azuread";

const example = new azuread.Application("example", {displayName: "example-app"});
const exampleResourceGroup = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleServicesAccount = new azure.graph.ServicesAccount("example", {
    name: "example",
    resourceGroupName: exampleResourceGroup.name,
    applicationId: example.applicationId,
    tags: {
        environment: "Production",
    },
});
```
```python
import pulumi
import pulumi_azure as azure
import pulumi_azuread as azuread

example = azuread.Application("example", display_name="example-app")
example_resource_group = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_services_account = azure.graph.ServicesAccount("example",
    name="example",
    resource_group_name=example_resource_group.name,
    application_id=example.application_id,
    tags={
        "environment": "Production",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;
using AzureAD = Pulumi.AzureAD;

return await Deployment.RunAsync(() => 
{
    var example = new AzureAD.Application("example", new()
    {
        DisplayName = "example-app",
    });

    var exampleResourceGroup = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleServicesAccount = new Azure.Graph.ServicesAccount("example", new()
    {
        Name = "example",
        ResourceGroupName = exampleResourceGroup.Name,
        ApplicationId = example.ApplicationId,
        Tags = 
        {
            { "environment", "Production" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/graph"
	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := azuread.NewApplication(ctx, "example", &azuread.ApplicationArgs{
			DisplayName: pulumi.String("example-app"),
		})
		if err != nil {
			return err
		}
		exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		_, err = graph.NewServicesAccount(ctx, "example", &graph.ServicesAccountArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: exampleResourceGroup.Name,
			ApplicationId:     example.ApplicationId,
			Tags: pulumi.StringMap{
				"environment": pulumi.String("Production"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azuread.Application;
import com.pulumi.azuread.ApplicationArgs;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.graph.ServicesAccount;
import com.pulumi.azure.graph.ServicesAccountArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new Application("example", ApplicationArgs.builder()
            .displayName("example-app")
            .build());

        var exampleResourceGroup = new ResourceGroup("exampleResourceGroup", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleServicesAccount = new ServicesAccount("exampleServicesAccount", ServicesAccountArgs.builder()
            .name("example")
            .resourceGroupName(exampleResourceGroup.name())
            .applicationId(example.applicationId())
            .tags(Map.of("environment", "Production"))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azuread:Application
    properties:
      displayName: example-app
  exampleResourceGroup:
    type: azure:core:ResourceGroup
    name: example
    properties:
      name: example-resources
      location: West Europe
  exampleServicesAccount:
    type: azure:graph:ServicesAccount
    name: example
    properties:
      name: example
      resourceGroupName: ${exampleResourceGroup.name}
      applicationId: ${example.applicationId}
      tags:
        environment: Production
```
<!--End PulumiCodeChooser -->

## Import

An existing Account can be imported into Pulumi using the `resource id`, e.g.

```sh
$ pulumi import azure:graph/servicesAccount:ServicesAccount example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/example-resource-group/providers/Microsoft.GraphServices/accounts/account1
```

f
applicationId" QCustomer owned application ID. Changing this forces a new Account to be created.
d
nameB" VSpecifies the name of this Account. Changing this forces a new Account to be created.

resourceGroupName" Specifies the name of the Resource Group within which this Account should exist. Changing this forces a new Account to be created.
K
tagsB2" ;A mapping of tags which should be assigned to the Account.
"f
applicationId" QCustomer owned application ID. Changing this forces a new Account to be created.
"&
billingPlanId" Billing Plan Id.
"b
name" VSpecifies the name of this Account. Changing this forces a new Account to be created.
"
resourceGroupName" Specifies the name of the Resource Group within which this Account should exist. Changing this forces a new Account to be created.
"K
tagsB2" ;A mapping of tags which should be assigned to the Account.
*«
D
	hdinsightHBaseCluster)azure:hdinsight/hBaseCluster:HBaseCluster»pManages a HDInsight HBase Cluster.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "hdinsightstor",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "hdinsight",
    storageAccountName: exampleAccount.name,
    containerAccessType: "private",
});
const exampleHBaseCluster = new azure.hdinsight.HBaseCluster("example", {
    name: "example-hdicluster",
    resourceGroupName: example.name,
    location: example.location,
    clusterVersion: "3.6",
    tier: "Standard",
    componentVersion: {
        hbase: "1.1",
    },
    gateway: {
        username: "acctestusrgw",
        password: "Password123!",
    },
    storageAccounts: [{
        storageContainerId: exampleContainer.id,
        storageAccountKey: exampleAccount.primaryAccessKey,
        isDefault: true,
    }],
    roles: {
        headNode: {
            vmSize: "Standard_D3_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
        },
        workerNode: {
            vmSize: "Standard_D3_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
            targetInstanceCount: 3,
        },
        zookeeperNode: {
            vmSize: "Standard_D3_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
        },
    },
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="hdinsightstor",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="hdinsight",
    storage_account_name=example_account.name,
    container_access_type="private")
example_h_base_cluster = azure.hdinsight.HBaseCluster("example",
    name="example-hdicluster",
    resource_group_name=example.name,
    location=example.location,
    cluster_version="3.6",
    tier="Standard",
    component_version={
        "hbase": "1.1",
    },
    gateway={
        "username": "acctestusrgw",
        "password": "Password123!",
    },
    storage_accounts=[{
        "storage_container_id": example_container.id,
        "storage_account_key": example_account.primary_access_key,
        "is_default": True,
    }],
    roles={
        "head_node": {
            "vm_size": "Standard_D3_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
        },
        "worker_node": {
            "vm_size": "Standard_D3_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
            "target_instance_count": 3,
        },
        "zookeeper_node": {
            "vm_size": "Standard_D3_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "hdinsightstor",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "hdinsight",
        StorageAccountName = exampleAccount.Name,
        ContainerAccessType = "private",
    });

    var exampleHBaseCluster = new Azure.HDInsight.HBaseCluster("example", new()
    {
        Name = "example-hdicluster",
        ResourceGroupName = example.Name,
        Location = example.Location,
        ClusterVersion = "3.6",
        Tier = "Standard",
        ComponentVersion = new Azure.HDInsight.Inputs.HBaseClusterComponentVersionArgs
        {
            Hbase = "1.1",
        },
        Gateway = new Azure.HDInsight.Inputs.HBaseClusterGatewayArgs
        {
            Username = "acctestusrgw",
            Password = "Password123!",
        },
        StorageAccounts = new[]
        {
            new Azure.HDInsight.Inputs.HBaseClusterStorageAccountArgs
            {
                StorageContainerId = exampleContainer.Id,
                StorageAccountKey = exampleAccount.PrimaryAccessKey,
                IsDefault = true,
            },
        },
        Roles = new Azure.HDInsight.Inputs.HBaseClusterRolesArgs
        {
            HeadNode = new Azure.HDInsight.Inputs.HBaseClusterRolesHeadNodeArgs
            {
                VmSize = "Standard_D3_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
            },
            WorkerNode = new Azure.HDInsight.Inputs.HBaseClusterRolesWorkerNodeArgs
            {
                VmSize = "Standard_D3_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
                TargetInstanceCount = 3,
            },
            ZookeeperNode = new Azure.HDInsight.Inputs.HBaseClusterRolesZookeeperNodeArgs
            {
                VmSize = "Standard_D3_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/hdinsight"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("hdinsightstor"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:                pulumi.String("hdinsight"),
			StorageAccountName:  exampleAccount.Name,
			ContainerAccessType: pulumi.String("private"),
		})
		if err != nil {
			return err
		}
		_, err = hdinsight.NewHBaseCluster(ctx, "example", &hdinsight.HBaseClusterArgs{
			Name:              pulumi.String("example-hdicluster"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			ClusterVersion:    pulumi.String("3.6"),
			Tier:              pulumi.String("Standard"),
			ComponentVersion: &hdinsight.HBaseClusterComponentVersionArgs{
				Hbase: pulumi.String("1.1"),
			},
			Gateway: &hdinsight.HBaseClusterGatewayArgs{
				Username: pulumi.String("acctestusrgw"),
				Password: pulumi.String("Password123!"),
			},
			StorageAccounts: hdinsight.HBaseClusterStorageAccountArray{
				&hdinsight.HBaseClusterStorageAccountArgs{
					StorageContainerId: exampleContainer.ID(),
					StorageAccountKey:  exampleAccount.PrimaryAccessKey,
					IsDefault:          pulumi.Bool(true),
				},
			},
			Roles: &hdinsight.HBaseClusterRolesArgs{
				HeadNode: &hdinsight.HBaseClusterRolesHeadNodeArgs{
					VmSize:   pulumi.String("Standard_D3_V2"),
					Username: pulumi.String("acctestusrvm"),
					Password: pulumi.String("AccTestvdSC4daf986!"),
				},
				WorkerNode: &hdinsight.HBaseClusterRolesWorkerNodeArgs{
					VmSize:              pulumi.String("Standard_D3_V2"),
					Username:            pulumi.String("acctestusrvm"),
					Password:            pulumi.String("AccTestvdSC4daf986!"),
					TargetInstanceCount: pulumi.Int(3),
				},
				ZookeeperNode: &hdinsight.HBaseClusterRolesZookeeperNodeArgs{
					VmSize:   pulumi.String("Standard_D3_V2"),
					Username: pulumi.String("acctestusrvm"),
					Password: pulumi.String("AccTestvdSC4daf986!"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azure.hdinsight.HBaseCluster;
import com.pulumi.azure.hdinsight.HBaseClusterArgs;
import com.pulumi.azure.hdinsight.inputs.HBaseClusterComponentVersionArgs;
import com.pulumi.azure.hdinsight.inputs.HBaseClusterGatewayArgs;
import com.pulumi.azure.hdinsight.inputs.HBaseClusterStorageAccountArgs;
import com.pulumi.azure.hdinsight.inputs.HBaseClusterRolesArgs;
import com.pulumi.azure.hdinsight.inputs.HBaseClusterRolesHeadNodeArgs;
import com.pulumi.azure.hdinsight.inputs.HBaseClusterRolesWorkerNodeArgs;
import com.pulumi.azure.hdinsight.inputs.HBaseClusterRolesZookeeperNodeArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("hdinsightstor")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("hdinsight")
            .storageAccountName(exampleAccount.name())
            .containerAccessType("private")
            .build());

        var exampleHBaseCluster = new HBaseCluster("exampleHBaseCluster", HBaseClusterArgs.builder()
            .name("example-hdicluster")
            .resourceGroupName(example.name())
            .location(example.location())
            .clusterVersion("3.6")
            .tier("Standard")
            .componentVersion(HBaseClusterComponentVersionArgs.builder()
                .hbase("1.1")
                .build())
            .gateway(HBaseClusterGatewayArgs.builder()
                .username("acctestusrgw")
                .password("Password123!")
                .build())
            .storageAccounts(HBaseClusterStorageAccountArgs.builder()
                .storageContainerId(exampleContainer.id())
                .storageAccountKey(exampleAccount.primaryAccessKey())
                .isDefault(true)
                .build())
            .roles(HBaseClusterRolesArgs.builder()
                .headNode(HBaseClusterRolesHeadNodeArgs.builder()
                    .vmSize("Standard_D3_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .build())
                .workerNode(HBaseClusterRolesWorkerNodeArgs.builder()
                    .vmSize("Standard_D3_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .targetInstanceCount(3)
                    .build())
                .zookeeperNode(HBaseClusterRolesZookeeperNodeArgs.builder()
                    .vmSize("Standard_D3_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: hdinsightstor
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: hdinsight
      storageAccountName: ${exampleAccount.name}
      containerAccessType: private
  exampleHBaseCluster:
    type: azure:hdinsight:HBaseCluster
    name: example
    properties:
      name: example-hdicluster
      resourceGroupName: ${example.name}
      location: ${example.location}
      clusterVersion: '3.6'
      tier: Standard
      componentVersion:
        hbase: '1.1'
      gateway:
        username: acctestusrgw
        password: Password123!
      storageAccounts:
        - storageContainerId: ${exampleContainer.id}
          storageAccountKey: ${exampleAccount.primaryAccessKey}
          isDefault: true
      roles:
        headNode:
          vmSize: Standard_D3_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
        workerNode:
          vmSize: Standard_D3_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
          targetInstanceCount: 3
        zookeeperNode:
          vmSize: Standard_D3_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
```
<!--End PulumiCodeChooser -->

## Import

HDInsight HBase Clusters can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:hdinsight/hBaseCluster:HBaseCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.HDInsight/clusters/cluster1
```


clusterVersion" ~Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
¼
componentVersionx:v
t
	hdinsightHBaseClusterComponentVersionIazure:hdinsight/HBaseClusterComponentVersion:HBaseClusterComponentVersion.A `component_version` block as defined below.
¾
computeIsolationzBx:v
t
	hdinsightHBaseClusterComputeIsolationIazure:hdinsight/HBaseClusterComputeIsolation:HBaseClusterComputeIsolation.A `compute_isolation` block as defined below.
Á
diskEncryptionsvBt*r:p
n
	hdinsightHBaseClusterDiskEncryptionEazure:hdinsight/HBaseClusterDiskEncryption:HBaseClusterDiskEncryption6One or more `disk_encryption` block as defined below.

	extensioneBc:a
_
	hdinsightHBaseClusterExtension;azure:hdinsight/HBaseClusterExtension:HBaseClusterExtension'An `extension` block as defined below.

gateway]:[
Y
	hdinsightHBaseClusterGateway7azure:hdinsight/HBaseClusterGateway:HBaseClusterGateway$A `gateway` block as defined below.

locationB" Specifies the Azure Region which this HDInsight HBase Cluster should exist. Changing this forces a new resource to be created.


metastoreshBf:d
b
	hdinsightHBaseClusterMetastores=azure:hdinsight/HBaseClusterMetastores:HBaseClusterMetastores'A `metastores` block as defined below.

monitor_B]:[
Y
	hdinsightHBaseClusterMonitor7azure:hdinsight/HBaseClusterMonitor:HBaseClusterMonitor$A `monitor` block as defined below.
v
nameB" hSpecifies the name for this HDInsight HBase Cluster. Changing this forces a new resource to be created.

network_B]:[
Y
	hdinsightHBaseClusterNetwork7azure:hdinsight/HBaseClusterNetwork:HBaseClusterNetwork$A `network` block as defined below.
ë
privateLinkConfigurationB:

	hdinsight$HBaseClusterPrivateLinkConfigurationYazure:hdinsight/HBaseClusterPrivateLinkConfiguration:HBaseClusterPrivateLinkConfiguration7A `private_link_configuration` block as defined below.
ª
resourceGroupName" Specifies the name of the Resource Group in which this HDInsight HBase Cluster should exist. Changing this forces a new resource to be created.

rolesW:U
S
	hdinsightHBaseClusterRoles3azure:hdinsight/HBaseClusterRoles:HBaseClusterRoles"A `roles` block as defined below.
ì
securityProfilewBu:s
q
	hdinsightHBaseClusterSecurityProfileGazure:hdinsight/HBaseClusterSecurityProfile:HBaseClusterSecurityProfile`A `security_profile` block as defined below. Changing this forces a new resource to be created.
Ê
storageAccountGen2B~:|
z
	hdinsightHBaseClusterStorageAccountGen2Mazure:hdinsight/HBaseClusterStorageAccountGen2:HBaseClusterStorageAccountGen21A `storage_account_gen2` block as defined below.
Á
storageAccountsvBt*r:p
n
	hdinsightHBaseClusterStorageAccountEazure:hdinsight/HBaseClusterStorageAccount:HBaseClusterStorageAccount6One or more `storage_account` block as defined below.
X
tagsB2" HA map of Tags which should be assigned to this HDInsight HBase Cluster.
·
tier" ªSpecifies the Tier which should be used for this HDInsight HBase Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.

tlsMinVersionB" The minimal supported TLS version. Possible values are 1.0, 1.1 or 1.2. Changing this forces a new resource to be created.

> **NOTE:** Starting on June 30, 2020, Azure HDInsight will enforce TLS 1.2 or later versions for all HTTPS connections. For more information, see [Azure HDInsight TLS 1.2 Enforcement](https://azure.microsoft.com/en-us/updates/azure-hdinsight-tls-12-enforcement/).
"
clusterVersion" ~Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
"¼
componentVersionx:v
t
	hdinsightHBaseClusterComponentVersionIazure:hdinsight/HBaseClusterComponentVersion:HBaseClusterComponentVersion.A `component_version` block as defined below.
"¾
computeIsolationzBx:v
t
	hdinsightHBaseClusterComputeIsolationIazure:hdinsight/HBaseClusterComputeIsolation:HBaseClusterComputeIsolation.A `compute_isolation` block as defined below.
"Á
diskEncryptionsvBt*r:p
n
	hdinsightHBaseClusterDiskEncryptionEazure:hdinsight/HBaseClusterDiskEncryption:HBaseClusterDiskEncryption6One or more `disk_encryption` block as defined below.
"
	extensioneBc:a
_
	hdinsightHBaseClusterExtension;azure:hdinsight/HBaseClusterExtension:HBaseClusterExtension'An `extension` block as defined below.
"
gateway]:[
Y
	hdinsightHBaseClusterGateway7azure:hdinsight/HBaseClusterGateway:HBaseClusterGateway$A `gateway` block as defined below.
"W
httpsEndpoint" BThe HTTPS Connectivity Endpoint for this HDInsight HBase Cluster.
"
location" Specifies the Azure Region which this HDInsight HBase Cluster should exist. Changing this forces a new resource to be created.
"

metastoreshBf:d
b
	hdinsightHBaseClusterMetastores=azure:hdinsight/HBaseClusterMetastores:HBaseClusterMetastores'A `metastores` block as defined below.
"
monitor_B]:[
Y
	hdinsightHBaseClusterMonitor7azure:hdinsight/HBaseClusterMonitor:HBaseClusterMonitor$A `monitor` block as defined below.
"t
name" hSpecifies the name for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
"
network_B]:[
Y
	hdinsightHBaseClusterNetwork7azure:hdinsight/HBaseClusterNetwork:HBaseClusterNetwork$A `network` block as defined below.
"ë
privateLinkConfigurationB:

	hdinsight$HBaseClusterPrivateLinkConfigurationYazure:hdinsight/HBaseClusterPrivateLinkConfiguration:HBaseClusterPrivateLinkConfiguration7A `private_link_configuration` block as defined below.
"ª
resourceGroupName" Specifies the name of the Resource Group in which this HDInsight HBase Cluster should exist. Changing this forces a new resource to be created.
"
rolesW:U
S
	hdinsightHBaseClusterRoles3azure:hdinsight/HBaseClusterRoles:HBaseClusterRoles"A `roles` block as defined below.
"ì
securityProfilewBu:s
q
	hdinsightHBaseClusterSecurityProfileGazure:hdinsight/HBaseClusterSecurityProfile:HBaseClusterSecurityProfile`A `security_profile` block as defined below. Changing this forces a new resource to be created.
"S
sshEndpoint" @The SSH Connectivity Endpoint for this HDInsight HBase Cluster.
"Ê
storageAccountGen2B~:|
z
	hdinsightHBaseClusterStorageAccountGen2Mazure:hdinsight/HBaseClusterStorageAccountGen2:HBaseClusterStorageAccountGen21A `storage_account_gen2` block as defined below.
"Á
storageAccountsvBt*r:p
n
	hdinsightHBaseClusterStorageAccountEazure:hdinsight/HBaseClusterStorageAccount:HBaseClusterStorageAccount6One or more `storage_account` block as defined below.
"X
tagsB2" HA map of Tags which should be assigned to this HDInsight HBase Cluster.
"·
tier" ªSpecifies the Tier which should be used for this HDInsight HBase Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.
"
tlsMinVersionB" The minimal supported TLS version. Possible values are 1.0, 1.1 or 1.2. Changing this forces a new resource to be created.

> **NOTE:** Starting on June 30, 2020, Azure HDInsight will enforce TLS 1.2 or later versions for all HTTPS connections. For more information, see [Azure HDInsight TLS 1.2 Enforcement](https://azure.microsoft.com/en-us/updates/azure-hdinsight-tls-12-enforcement/).
*­¬
G
	hdinsightHadoopCluster+azure:hdinsight/hadoopCluster:HadoopClusterñpManages a HDInsight Hadoop Cluster.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "hdinsightstor",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "hdinsight",
    storageAccountName: exampleAccount.name,
    containerAccessType: "private",
});
const exampleHadoopCluster = new azure.hdinsight.HadoopCluster("example", {
    name: "example-hdicluster",
    resourceGroupName: example.name,
    location: example.location,
    clusterVersion: "3.6",
    tier: "Standard",
    componentVersion: {
        hadoop: "2.7",
    },
    gateway: {
        username: "acctestusrgw",
        password: "PAssword123!",
    },
    storageAccounts: [{
        storageContainerId: exampleContainer.id,
        storageAccountKey: exampleAccount.primaryAccessKey,
        isDefault: true,
    }],
    roles: {
        headNode: {
            vmSize: "Standard_D3_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
        },
        workerNode: {
            vmSize: "Standard_D4_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
            targetInstanceCount: 3,
        },
        zookeeperNode: {
            vmSize: "Standard_D3_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
        },
    },
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="hdinsightstor",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="hdinsight",
    storage_account_name=example_account.name,
    container_access_type="private")
example_hadoop_cluster = azure.hdinsight.HadoopCluster("example",
    name="example-hdicluster",
    resource_group_name=example.name,
    location=example.location,
    cluster_version="3.6",
    tier="Standard",
    component_version={
        "hadoop": "2.7",
    },
    gateway={
        "username": "acctestusrgw",
        "password": "PAssword123!",
    },
    storage_accounts=[{
        "storage_container_id": example_container.id,
        "storage_account_key": example_account.primary_access_key,
        "is_default": True,
    }],
    roles={
        "head_node": {
            "vm_size": "Standard_D3_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
        },
        "worker_node": {
            "vm_size": "Standard_D4_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
            "target_instance_count": 3,
        },
        "zookeeper_node": {
            "vm_size": "Standard_D3_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "hdinsightstor",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "hdinsight",
        StorageAccountName = exampleAccount.Name,
        ContainerAccessType = "private",
    });

    var exampleHadoopCluster = new Azure.HDInsight.HadoopCluster("example", new()
    {
        Name = "example-hdicluster",
        ResourceGroupName = example.Name,
        Location = example.Location,
        ClusterVersion = "3.6",
        Tier = "Standard",
        ComponentVersion = new Azure.HDInsight.Inputs.HadoopClusterComponentVersionArgs
        {
            Hadoop = "2.7",
        },
        Gateway = new Azure.HDInsight.Inputs.HadoopClusterGatewayArgs
        {
            Username = "acctestusrgw",
            Password = "PAssword123!",
        },
        StorageAccounts = new[]
        {
            new Azure.HDInsight.Inputs.HadoopClusterStorageAccountArgs
            {
                StorageContainerId = exampleContainer.Id,
                StorageAccountKey = exampleAccount.PrimaryAccessKey,
                IsDefault = true,
            },
        },
        Roles = new Azure.HDInsight.Inputs.HadoopClusterRolesArgs
        {
            HeadNode = new Azure.HDInsight.Inputs.HadoopClusterRolesHeadNodeArgs
            {
                VmSize = "Standard_D3_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
            },
            WorkerNode = new Azure.HDInsight.Inputs.HadoopClusterRolesWorkerNodeArgs
            {
                VmSize = "Standard_D4_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
                TargetInstanceCount = 3,
            },
            ZookeeperNode = new Azure.HDInsight.Inputs.HadoopClusterRolesZookeeperNodeArgs
            {
                VmSize = "Standard_D3_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/hdinsight"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("hdinsightstor"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:                pulumi.String("hdinsight"),
			StorageAccountName:  exampleAccount.Name,
			ContainerAccessType: pulumi.String("private"),
		})
		if err != nil {
			return err
		}
		_, err = hdinsight.NewHadoopCluster(ctx, "example", &hdinsight.HadoopClusterArgs{
			Name:              pulumi.String("example-hdicluster"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			ClusterVersion:    pulumi.String("3.6"),
			Tier:              pulumi.String("Standard"),
			ComponentVersion: &hdinsight.HadoopClusterComponentVersionArgs{
				Hadoop: pulumi.String("2.7"),
			},
			Gateway: &hdinsight.HadoopClusterGatewayArgs{
				Username: pulumi.String("acctestusrgw"),
				Password: pulumi.String("PAssword123!"),
			},
			StorageAccounts: hdinsight.HadoopClusterStorageAccountArray{
				&hdinsight.HadoopClusterStorageAccountArgs{
					StorageContainerId: exampleContainer.ID(),
					StorageAccountKey:  exampleAccount.PrimaryAccessKey,
					IsDefault:          pulumi.Bool(true),
				},
			},
			Roles: &hdinsight.HadoopClusterRolesArgs{
				HeadNode: &hdinsight.HadoopClusterRolesHeadNodeArgs{
					VmSize:   pulumi.String("Standard_D3_V2"),
					Username: pulumi.String("acctestusrvm"),
					Password: pulumi.String("AccTestvdSC4daf986!"),
				},
				WorkerNode: &hdinsight.HadoopClusterRolesWorkerNodeArgs{
					VmSize:              pulumi.String("Standard_D4_V2"),
					Username:            pulumi.String("acctestusrvm"),
					Password:            pulumi.String("AccTestvdSC4daf986!"),
					TargetInstanceCount: pulumi.Int(3),
				},
				ZookeeperNode: &hdinsight.HadoopClusterRolesZookeeperNodeArgs{
					VmSize:   pulumi.String("Standard_D3_V2"),
					Username: pulumi.String("acctestusrvm"),
					Password: pulumi.String("AccTestvdSC4daf986!"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azure.hdinsight.HadoopCluster;
import com.pulumi.azure.hdinsight.HadoopClusterArgs;
import com.pulumi.azure.hdinsight.inputs.HadoopClusterComponentVersionArgs;
import com.pulumi.azure.hdinsight.inputs.HadoopClusterGatewayArgs;
import com.pulumi.azure.hdinsight.inputs.HadoopClusterStorageAccountArgs;
import com.pulumi.azure.hdinsight.inputs.HadoopClusterRolesArgs;
import com.pulumi.azure.hdinsight.inputs.HadoopClusterRolesHeadNodeArgs;
import com.pulumi.azure.hdinsight.inputs.HadoopClusterRolesWorkerNodeArgs;
import com.pulumi.azure.hdinsight.inputs.HadoopClusterRolesZookeeperNodeArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("hdinsightstor")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("hdinsight")
            .storageAccountName(exampleAccount.name())
            .containerAccessType("private")
            .build());

        var exampleHadoopCluster = new HadoopCluster("exampleHadoopCluster", HadoopClusterArgs.builder()
            .name("example-hdicluster")
            .resourceGroupName(example.name())
            .location(example.location())
            .clusterVersion("3.6")
            .tier("Standard")
            .componentVersion(HadoopClusterComponentVersionArgs.builder()
                .hadoop("2.7")
                .build())
            .gateway(HadoopClusterGatewayArgs.builder()
                .username("acctestusrgw")
                .password("PAssword123!")
                .build())
            .storageAccounts(HadoopClusterStorageAccountArgs.builder()
                .storageContainerId(exampleContainer.id())
                .storageAccountKey(exampleAccount.primaryAccessKey())
                .isDefault(true)
                .build())
            .roles(HadoopClusterRolesArgs.builder()
                .headNode(HadoopClusterRolesHeadNodeArgs.builder()
                    .vmSize("Standard_D3_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .build())
                .workerNode(HadoopClusterRolesWorkerNodeArgs.builder()
                    .vmSize("Standard_D4_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .targetInstanceCount(3)
                    .build())
                .zookeeperNode(HadoopClusterRolesZookeeperNodeArgs.builder()
                    .vmSize("Standard_D3_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: hdinsightstor
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: hdinsight
      storageAccountName: ${exampleAccount.name}
      containerAccessType: private
  exampleHadoopCluster:
    type: azure:hdinsight:HadoopCluster
    name: example
    properties:
      name: example-hdicluster
      resourceGroupName: ${example.name}
      location: ${example.location}
      clusterVersion: '3.6'
      tier: Standard
      componentVersion:
        hadoop: '2.7'
      gateway:
        username: acctestusrgw
        password: PAssword123!
      storageAccounts:
        - storageContainerId: ${exampleContainer.id}
          storageAccountKey: ${exampleAccount.primaryAccessKey}
          isDefault: true
      roles:
        headNode:
          vmSize: Standard_D3_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
        workerNode:
          vmSize: Standard_D4_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
          targetInstanceCount: 3
        zookeeperNode:
          vmSize: Standard_D3_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
```
<!--End PulumiCodeChooser -->

## Import

HDInsight Hadoop Clusters can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:hdinsight/hadoopCluster:HadoopCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.HDInsight/clusters/cluster1
```


clusterVersion" ~Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
¿
componentVersion{:y
w
	hdinsightHadoopClusterComponentVersionKazure:hdinsight/HadoopClusterComponentVersion:HadoopClusterComponentVersion.A `component_version` block as defined below.
Á
computeIsolation}B{:y
w
	hdinsightHadoopClusterComputeIsolationKazure:hdinsight/HadoopClusterComputeIsolation:HadoopClusterComputeIsolation.A `compute_isolation` block as defined below.
Ä
diskEncryptionsyBw*u:s
q
	hdinsightHadoopClusterDiskEncryptionGazure:hdinsight/HadoopClusterDiskEncryption:HadoopClusterDiskEncryption6One or more `disk_encryption` block as defined below.

	extensionhBf:d
b
	hdinsightHadoopClusterExtension=azure:hdinsight/HadoopClusterExtension:HadoopClusterExtension'An `extension` block as defined below.

gateway`:^
\
	hdinsightHadoopClusterGateway9azure:hdinsight/HadoopClusterGateway:HadoopClusterGateway$A `gateway` block as defined below.

locationB" Specifies the Azure Region which this HDInsight Hadoop Cluster should exist. Changing this forces a new resource to be created.
¢

metastoreskBi:g
e
	hdinsightHadoopClusterMetastores?azure:hdinsight/HadoopClusterMetastores:HadoopClusterMetastores'A `metastores` block as defined below.

monitorbB`:^
\
	hdinsightHadoopClusterMonitor9azure:hdinsight/HadoopClusterMonitor:HadoopClusterMonitor$A `monitor` block as defined below.
w
nameB" iSpecifies the name for this HDInsight Hadoop Cluster. Changing this forces a new resource to be created.

networkbB`:^
\
	hdinsightHadoopClusterNetwork9azure:hdinsight/HadoopClusterNetwork:HadoopClusterNetwork$A `network` block as defined below.
î
privateLinkConfigurationB:

	hdinsight%HadoopClusterPrivateLinkConfiguration[azure:hdinsight/HadoopClusterPrivateLinkConfiguration:HadoopClusterPrivateLinkConfiguration7A `private_link_configuration` block as defined below.
«
resourceGroupName" Specifies the name of the Resource Group in which this HDInsight Hadoop Cluster should exist. Changing this forces a new resource to be created.

rolesZ:X
V
	hdinsightHadoopClusterRoles5azure:hdinsight/HadoopClusterRoles:HadoopClusterRoles"A `roles` block as defined below.
ï
securityProfilezBx:v
t
	hdinsightHadoopClusterSecurityProfileIazure:hdinsight/HadoopClusterSecurityProfile:HadoopClusterSecurityProfile`A `security_profile` block as defined below. Changing this forces a new resource to be created.
Î
storageAccountGen2B:
}
	hdinsightHadoopClusterStorageAccountGen2Oazure:hdinsight/HadoopClusterStorageAccountGen2:HadoopClusterStorageAccountGen21A `storage_account_gen2` block as defined below.
Ä
storageAccountsyBw*u:s
q
	hdinsightHadoopClusterStorageAccountGazure:hdinsight/HadoopClusterStorageAccount:HadoopClusterStorageAccount6One or more `storage_account` block as defined below.
Y
tagsB2" IA map of Tags which should be assigned to this HDInsight Hadoop Cluster.
¸
tier" «Specifies the Tier which should be used for this HDInsight Hadoop Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.

tlsMinVersionB" The minimal supported TLS version. Possible values are 1.0, 1.1 or 1.2. Changing this forces a new resource to be created.

> **NOTE:** Starting on June 30, 2020, Azure HDInsight will enforce TLS 1.2 or later versions for all HTTPS connections. For more information, see [Azure HDInsight TLS 1.2 Enforcement](https://azure.microsoft.com/en-us/updates/azure-hdinsight-tls-12-enforcement/).
"
clusterVersion" ~Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
"¿
componentVersion{:y
w
	hdinsightHadoopClusterComponentVersionKazure:hdinsight/HadoopClusterComponentVersion:HadoopClusterComponentVersion.A `component_version` block as defined below.
"Á
computeIsolation}B{:y
w
	hdinsightHadoopClusterComputeIsolationKazure:hdinsight/HadoopClusterComputeIsolation:HadoopClusterComputeIsolation.A `compute_isolation` block as defined below.
"Ä
diskEncryptionsyBw*u:s
q
	hdinsightHadoopClusterDiskEncryptionGazure:hdinsight/HadoopClusterDiskEncryption:HadoopClusterDiskEncryption6One or more `disk_encryption` block as defined below.
"
	extensionhBf:d
b
	hdinsightHadoopClusterExtension=azure:hdinsight/HadoopClusterExtension:HadoopClusterExtension'An `extension` block as defined below.
"
gateway`:^
\
	hdinsightHadoopClusterGateway9azure:hdinsight/HadoopClusterGateway:HadoopClusterGateway$A `gateway` block as defined below.
"X
httpsEndpoint" CThe HTTPS Connectivity Endpoint for this HDInsight Hadoop Cluster.
"
location" Specifies the Azure Region which this HDInsight Hadoop Cluster should exist. Changing this forces a new resource to be created.
"¢

metastoreskBi:g
e
	hdinsightHadoopClusterMetastores?azure:hdinsight/HadoopClusterMetastores:HadoopClusterMetastores'A `metastores` block as defined below.
"
monitorbB`:^
\
	hdinsightHadoopClusterMonitor9azure:hdinsight/HadoopClusterMonitor:HadoopClusterMonitor$A `monitor` block as defined below.
"u
name" iSpecifies the name for this HDInsight Hadoop Cluster. Changing this forces a new resource to be created.
"
networkbB`:^
\
	hdinsightHadoopClusterNetwork9azure:hdinsight/HadoopClusterNetwork:HadoopClusterNetwork$A `network` block as defined below.
"î
privateLinkConfigurationB:

	hdinsight%HadoopClusterPrivateLinkConfiguration[azure:hdinsight/HadoopClusterPrivateLinkConfiguration:HadoopClusterPrivateLinkConfiguration7A `private_link_configuration` block as defined below.
"«
resourceGroupName" Specifies the name of the Resource Group in which this HDInsight Hadoop Cluster should exist. Changing this forces a new resource to be created.
"
rolesZ:X
V
	hdinsightHadoopClusterRoles5azure:hdinsight/HadoopClusterRoles:HadoopClusterRoles"A `roles` block as defined below.
"ï
securityProfilezBx:v
t
	hdinsightHadoopClusterSecurityProfileIazure:hdinsight/HadoopClusterSecurityProfile:HadoopClusterSecurityProfile`A `security_profile` block as defined below. Changing this forces a new resource to be created.
"T
sshEndpoint" AThe SSH Connectivity Endpoint for this HDInsight Hadoop Cluster.
"Î
storageAccountGen2B:
}
	hdinsightHadoopClusterStorageAccountGen2Oazure:hdinsight/HadoopClusterStorageAccountGen2:HadoopClusterStorageAccountGen21A `storage_account_gen2` block as defined below.
"Ä
storageAccountsyBw*u:s
q
	hdinsightHadoopClusterStorageAccountGazure:hdinsight/HadoopClusterStorageAccount:HadoopClusterStorageAccount6One or more `storage_account` block as defined below.
"Y
tagsB2" IA map of Tags which should be assigned to this HDInsight Hadoop Cluster.
"¸
tier" «Specifies the Tier which should be used for this HDInsight Hadoop Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.
"
tlsMinVersionB" The minimal supported TLS version. Possible values are 1.0, 1.1 or 1.2. Changing this forces a new resource to be created.

> **NOTE:** Starting on June 30, 2020, Azure HDInsight will enforce TLS 1.2 or later versions for all HTTPS connections. For more information, see [Azure HDInsight TLS 1.2 Enforcement](https://azure.microsoft.com/en-us/updates/azure-hdinsight-tls-12-enforcement/).
*Óº
e
	hdinsightInteractiveQueryCluster?azure:hdinsight/interactiveQueryCluster:InteractiveQueryClusteruManages a HDInsight Interactive Query Cluster.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "hdinsightstor",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "hdinsight",
    storageAccountName: exampleAccount.name,
    containerAccessType: "private",
});
const exampleInteractiveQueryCluster = new azure.hdinsight.InteractiveQueryCluster("example", {
    name: "example-hdicluster",
    resourceGroupName: example.name,
    location: example.location,
    clusterVersion: "3.6",
    tier: "Standard",
    componentVersion: {
        interactiveHive: "2.1",
    },
    gateway: {
        username: "acctestusrgw",
        password: "Password!",
    },
    storageAccounts: [{
        storageContainerId: exampleContainer.id,
        storageAccountKey: exampleAccount.primaryAccessKey,
        isDefault: true,
    }],
    roles: {
        headNode: {
            vmSize: "Standard_D13_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
        },
        workerNode: {
            vmSize: "Standard_D14_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
            targetInstanceCount: 3,
        },
        zookeeperNode: {
            vmSize: "Standard_A4_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
        },
    },
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="hdinsightstor",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="hdinsight",
    storage_account_name=example_account.name,
    container_access_type="private")
example_interactive_query_cluster = azure.hdinsight.InteractiveQueryCluster("example",
    name="example-hdicluster",
    resource_group_name=example.name,
    location=example.location,
    cluster_version="3.6",
    tier="Standard",
    component_version={
        "interactive_hive": "2.1",
    },
    gateway={
        "username": "acctestusrgw",
        "password": "Password!",
    },
    storage_accounts=[{
        "storage_container_id": example_container.id,
        "storage_account_key": example_account.primary_access_key,
        "is_default": True,
    }],
    roles={
        "head_node": {
            "vm_size": "Standard_D13_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
        },
        "worker_node": {
            "vm_size": "Standard_D14_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
            "target_instance_count": 3,
        },
        "zookeeper_node": {
            "vm_size": "Standard_A4_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "hdinsightstor",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "hdinsight",
        StorageAccountName = exampleAccount.Name,
        ContainerAccessType = "private",
    });

    var exampleInteractiveQueryCluster = new Azure.HDInsight.InteractiveQueryCluster("example", new()
    {
        Name = "example-hdicluster",
        ResourceGroupName = example.Name,
        Location = example.Location,
        ClusterVersion = "3.6",
        Tier = "Standard",
        ComponentVersion = new Azure.HDInsight.Inputs.InteractiveQueryClusterComponentVersionArgs
        {
            InteractiveHive = "2.1",
        },
        Gateway = new Azure.HDInsight.Inputs.InteractiveQueryClusterGatewayArgs
        {
            Username = "acctestusrgw",
            Password = "Password!",
        },
        StorageAccounts = new[]
        {
            new Azure.HDInsight.Inputs.InteractiveQueryClusterStorageAccountArgs
            {
                StorageContainerId = exampleContainer.Id,
                StorageAccountKey = exampleAccount.PrimaryAccessKey,
                IsDefault = true,
            },
        },
        Roles = new Azure.HDInsight.Inputs.InteractiveQueryClusterRolesArgs
        {
            HeadNode = new Azure.HDInsight.Inputs.InteractiveQueryClusterRolesHeadNodeArgs
            {
                VmSize = "Standard_D13_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
            },
            WorkerNode = new Azure.HDInsight.Inputs.InteractiveQueryClusterRolesWorkerNodeArgs
            {
                VmSize = "Standard_D14_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
                TargetInstanceCount = 3,
            },
            ZookeeperNode = new Azure.HDInsight.Inputs.InteractiveQueryClusterRolesZookeeperNodeArgs
            {
                VmSize = "Standard_A4_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/hdinsight"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("hdinsightstor"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:                pulumi.String("hdinsight"),
			StorageAccountName:  exampleAccount.Name,
			ContainerAccessType: pulumi.String("private"),
		})
		if err != nil {
			return err
		}
		_, err = hdinsight.NewInteractiveQueryCluster(ctx, "example", &hdinsight.InteractiveQueryClusterArgs{
			Name:              pulumi.String("example-hdicluster"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			ClusterVersion:    pulumi.String("3.6"),
			Tier:              pulumi.String("Standard"),
			ComponentVersion: &hdinsight.InteractiveQueryClusterComponentVersionArgs{
				InteractiveHive: pulumi.String("2.1"),
			},
			Gateway: &hdinsight.InteractiveQueryClusterGatewayArgs{
				Username: pulumi.String("acctestusrgw"),
				Password: pulumi.String("Password!"),
			},
			StorageAccounts: hdinsight.InteractiveQueryClusterStorageAccountArray{
				&hdinsight.InteractiveQueryClusterStorageAccountArgs{
					StorageContainerId: exampleContainer.ID(),
					StorageAccountKey:  exampleAccount.PrimaryAccessKey,
					IsDefault:          pulumi.Bool(true),
				},
			},
			Roles: &hdinsight.InteractiveQueryClusterRolesArgs{
				HeadNode: &hdinsight.InteractiveQueryClusterRolesHeadNodeArgs{
					VmSize:   pulumi.String("Standard_D13_V2"),
					Username: pulumi.String("acctestusrvm"),
					Password: pulumi.String("AccTestvdSC4daf986!"),
				},
				WorkerNode: &hdinsight.InteractiveQueryClusterRolesWorkerNodeArgs{
					VmSize:              pulumi.String("Standard_D14_V2"),
					Username:            pulumi.String("acctestusrvm"),
					Password:            pulumi.String("AccTestvdSC4daf986!"),
					TargetInstanceCount: pulumi.Int(3),
				},
				ZookeeperNode: &hdinsight.InteractiveQueryClusterRolesZookeeperNodeArgs{
					VmSize:   pulumi.String("Standard_A4_V2"),
					Username: pulumi.String("acctestusrvm"),
					Password: pulumi.String("AccTestvdSC4daf986!"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azure.hdinsight.InteractiveQueryCluster;
import com.pulumi.azure.hdinsight.InteractiveQueryClusterArgs;
import com.pulumi.azure.hdinsight.inputs.InteractiveQueryClusterComponentVersionArgs;
import com.pulumi.azure.hdinsight.inputs.InteractiveQueryClusterGatewayArgs;
import com.pulumi.azure.hdinsight.inputs.InteractiveQueryClusterStorageAccountArgs;
import com.pulumi.azure.hdinsight.inputs.InteractiveQueryClusterRolesArgs;
import com.pulumi.azure.hdinsight.inputs.InteractiveQueryClusterRolesHeadNodeArgs;
import com.pulumi.azure.hdinsight.inputs.InteractiveQueryClusterRolesWorkerNodeArgs;
import com.pulumi.azure.hdinsight.inputs.InteractiveQueryClusterRolesZookeeperNodeArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("hdinsightstor")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("hdinsight")
            .storageAccountName(exampleAccount.name())
            .containerAccessType("private")
            .build());

        var exampleInteractiveQueryCluster = new InteractiveQueryCluster("exampleInteractiveQueryCluster", InteractiveQueryClusterArgs.builder()
            .name("example-hdicluster")
            .resourceGroupName(example.name())
            .location(example.location())
            .clusterVersion("3.6")
            .tier("Standard")
            .componentVersion(InteractiveQueryClusterComponentVersionArgs.builder()
                .interactiveHive("2.1")
                .build())
            .gateway(InteractiveQueryClusterGatewayArgs.builder()
                .username("acctestusrgw")
                .password("Password!")
                .build())
            .storageAccounts(InteractiveQueryClusterStorageAccountArgs.builder()
                .storageContainerId(exampleContainer.id())
                .storageAccountKey(exampleAccount.primaryAccessKey())
                .isDefault(true)
                .build())
            .roles(InteractiveQueryClusterRolesArgs.builder()
                .headNode(InteractiveQueryClusterRolesHeadNodeArgs.builder()
                    .vmSize("Standard_D13_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .build())
                .workerNode(InteractiveQueryClusterRolesWorkerNodeArgs.builder()
                    .vmSize("Standard_D14_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .targetInstanceCount(3)
                    .build())
                .zookeeperNode(InteractiveQueryClusterRolesZookeeperNodeArgs.builder()
                    .vmSize("Standard_A4_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: hdinsightstor
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: hdinsight
      storageAccountName: ${exampleAccount.name}
      containerAccessType: private
  exampleInteractiveQueryCluster:
    type: azure:hdinsight:InteractiveQueryCluster
    name: example
    properties:
      name: example-hdicluster
      resourceGroupName: ${example.name}
      location: ${example.location}
      clusterVersion: '3.6'
      tier: Standard
      componentVersion:
        interactiveHive: '2.1'
      gateway:
        username: acctestusrgw
        password: Password!
      storageAccounts:
        - storageContainerId: ${exampleContainer.id}
          storageAccountKey: ${exampleAccount.primaryAccessKey}
          isDefault: true
      roles:
        headNode:
          vmSize: Standard_D13_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
        workerNode:
          vmSize: Standard_D14_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
          targetInstanceCount: 3
        zookeeperNode:
          vmSize: Standard_A4_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
```
<!--End PulumiCodeChooser -->

## Import

HDInsight Interactive Query Clusters can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:hdinsight/interactiveQueryCluster:InteractiveQueryCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.HDInsight/clusters/cluster1
```


clusterVersion" ~Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
à
componentVersion:

	hdinsight'InteractiveQueryClusterComponentVersion_azure:hdinsight/InteractiveQueryClusterComponentVersion:InteractiveQueryClusterComponentVersion.A `component_version` block as defined below.
ã
computeIsolationB:

	hdinsight'InteractiveQueryClusterComputeIsolation_azure:hdinsight/InteractiveQueryClusterComputeIsolation:InteractiveQueryClusterComputeIsolation.A `compute_isolation` block as defined below.
Ý
diskEncryptionsB*:

	hdinsight%InteractiveQueryClusterDiskEncryption[azure:hdinsight/InteractiveQueryClusterDiskEncryption:InteractiveQueryClusterDiskEncryption,A `disk_encryption` block as defined below.

encryptionInTransitEnabledB
 nWhether encryption in transit is enabled for this Cluster. Changing this forces a new resource to be created.
À
	extensionB:

	hdinsight InteractiveQueryClusterExtensionQazure:hdinsight/InteractiveQueryClusterExtension:InteractiveQueryClusterExtension'An `extension` block as defined below.
¯
gateway~:|
z
	hdinsightInteractiveQueryClusterGatewayMazure:hdinsight/InteractiveQueryClusterGateway:InteractiveQueryClusterGateway$A `gateway` block as defined below.

locationB" Specifies the Azure Region which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
Ä

metastoresB:

	hdinsight!InteractiveQueryClusterMetastoresSazure:hdinsight/InteractiveQueryClusterMetastores:InteractiveQueryClusterMetastores'A `metastores` block as defined below.
²
monitorB~:|
z
	hdinsightInteractiveQueryClusterMonitorMazure:hdinsight/InteractiveQueryClusterMonitor:InteractiveQueryClusterMonitor$A `monitor` block as defined below.

nameB" tSpecifies the name for this HDInsight Interactive Query Cluster. Changing this forces a new resource to be created.
²
networkB~:|
z
	hdinsightInteractiveQueryClusterNetworkMazure:hdinsight/InteractiveQueryClusterNetwork:InteractiveQueryClusterNetwork$A `network` block as defined below.

privateLinkConfiguration¶B³:°
­
	hdinsight/InteractiveQueryClusterPrivateLinkConfigurationoazure:hdinsight/InteractiveQueryClusterPrivateLinkConfiguration:InteractiveQueryClusterPrivateLinkConfiguration7A `private_link_configuration` block as defined below.
¶
resourceGroupName" Specifies the name of the Resource Group in which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
¥
rolesx:v
t
	hdinsightInteractiveQueryClusterRolesIazure:hdinsight/InteractiveQueryClusterRoles:InteractiveQueryClusterRoles"A `roles` block as defined below.

securityProfileB:

	hdinsight&InteractiveQueryClusterSecurityProfile]azure:hdinsight/InteractiveQueryClusterSecurityProfile:InteractiveQueryClusterSecurityProfile`A `security_profile` block as defined below. Changing this forces a new resource to be created.
î
storageAccountGen2¤B¡:

	hdinsight)InteractiveQueryClusterStorageAccountGen2cazure:hdinsight/InteractiveQueryClusterStorageAccountGen2:InteractiveQueryClusterStorageAccountGen21A `storage_account_gen2` block as defined below.
ç
storageAccountsB*:

	hdinsight%InteractiveQueryClusterStorageAccount[azure:hdinsight/InteractiveQueryClusterStorageAccount:InteractiveQueryClusterStorageAccount6One or more `storage_account` block as defined below.
d
tagsB2" TA map of Tags which should be assigned to this HDInsight Interactive Query Cluster.
Ã
tier" ¶Specifies the Tier which should be used for this HDInsight Interactive Query Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.

tlsMinVersionB" The minimal supported TLS version. Possible values are 1.0, 1.1 or 1.2. Changing this forces a new resource to be created.

> **NOTE:** Starting on June 30, 2020, Azure HDInsight will enforce TLS 1.2 or later versions for all HTTPS connections. For more information, see [Azure HDInsight TLS 1.2 Enforcement](https://azure.microsoft.com/en-us/updates/azure-hdinsight-tls-12-enforcement/).
"
clusterVersion" ~Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
"à
componentVersion:

	hdinsight'InteractiveQueryClusterComponentVersion_azure:hdinsight/InteractiveQueryClusterComponentVersion:InteractiveQueryClusterComponentVersion.A `component_version` block as defined below.
"ã
computeIsolationB:

	hdinsight'InteractiveQueryClusterComputeIsolation_azure:hdinsight/InteractiveQueryClusterComputeIsolation:InteractiveQueryClusterComputeIsolation.A `compute_isolation` block as defined below.
"Ý
diskEncryptionsB*:

	hdinsight%InteractiveQueryClusterDiskEncryption[azure:hdinsight/InteractiveQueryClusterDiskEncryption:InteractiveQueryClusterDiskEncryption,A `disk_encryption` block as defined below.
"
encryptionInTransitEnabledB
 nWhether encryption in transit is enabled for this Cluster. Changing this forces a new resource to be created.
"À
	extensionB:

	hdinsight InteractiveQueryClusterExtensionQazure:hdinsight/InteractiveQueryClusterExtension:InteractiveQueryClusterExtension'An `extension` block as defined below.
"¯
gateway~:|
z
	hdinsightInteractiveQueryClusterGatewayMazure:hdinsight/InteractiveQueryClusterGateway:InteractiveQueryClusterGateway$A `gateway` block as defined below.
"c
httpsEndpoint" NThe HTTPS Connectivity Endpoint for this HDInsight Interactive Query Cluster.
"
location" Specifies the Azure Region which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
"Ä

metastoresB:

	hdinsight!InteractiveQueryClusterMetastoresSazure:hdinsight/InteractiveQueryClusterMetastores:InteractiveQueryClusterMetastores'A `metastores` block as defined below.
"²
monitorB~:|
z
	hdinsightInteractiveQueryClusterMonitorMazure:hdinsight/InteractiveQueryClusterMonitor:InteractiveQueryClusterMonitor$A `monitor` block as defined below.
"
name" tSpecifies the name for this HDInsight Interactive Query Cluster. Changing this forces a new resource to be created.
"²
networkB~:|
z
	hdinsightInteractiveQueryClusterNetworkMazure:hdinsight/InteractiveQueryClusterNetwork:InteractiveQueryClusterNetwork$A `network` block as defined below.
"
privateLinkConfiguration¶B³:°
­
	hdinsight/InteractiveQueryClusterPrivateLinkConfigurationoazure:hdinsight/InteractiveQueryClusterPrivateLinkConfiguration:InteractiveQueryClusterPrivateLinkConfiguration7A `private_link_configuration` block as defined below.
"¶
resourceGroupName" Specifies the name of the Resource Group in which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
"¥
rolesx:v
t
	hdinsightInteractiveQueryClusterRolesIazure:hdinsight/InteractiveQueryClusterRoles:InteractiveQueryClusterRoles"A `roles` block as defined below.
"
securityProfileB:

	hdinsight&InteractiveQueryClusterSecurityProfile]azure:hdinsight/InteractiveQueryClusterSecurityProfile:InteractiveQueryClusterSecurityProfile`A `security_profile` block as defined below. Changing this forces a new resource to be created.
"_
sshEndpoint" LThe SSH Connectivity Endpoint for this HDInsight Interactive Query Cluster.
"î
storageAccountGen2¤B¡:

	hdinsight)InteractiveQueryClusterStorageAccountGen2cazure:hdinsight/InteractiveQueryClusterStorageAccountGen2:InteractiveQueryClusterStorageAccountGen21A `storage_account_gen2` block as defined below.
"ç
storageAccountsB*:

	hdinsight%InteractiveQueryClusterStorageAccount[azure:hdinsight/InteractiveQueryClusterStorageAccount:InteractiveQueryClusterStorageAccount6One or more `storage_account` block as defined below.
"d
tagsB2" TA map of Tags which should be assigned to this HDInsight Interactive Query Cluster.
"Ã
tier" ¶Specifies the Tier which should be used for this HDInsight Interactive Query Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.
"
tlsMinVersionB" The minimal supported TLS version. Possible values are 1.0, 1.1 or 1.2. Changing this forces a new resource to be created.

> **NOTE:** Starting on June 30, 2020, Azure HDInsight will enforce TLS 1.2 or later versions for all HTTPS connections. For more information, see [Azure HDInsight TLS 1.2 Enforcement](https://azure.microsoft.com/en-us/updates/azure-hdinsight-tls-12-enforcement/).
*³
D
	hdinsightKafkaCluster)azure:hdinsight/kafkaCluster:KafkaCluster±rManages a HDInsight Kafka Cluster.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "hdinsightstor",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "hdinsight",
    storageAccountName: exampleAccount.name,
    containerAccessType: "private",
});
const exampleKafkaCluster = new azure.hdinsight.KafkaCluster("example", {
    name: "example-hdicluster",
    resourceGroupName: example.name,
    location: example.location,
    clusterVersion: "4.0",
    tier: "Standard",
    componentVersion: {
        kafka: "2.1",
    },
    gateway: {
        username: "acctestusrgw",
        password: "Password123!",
    },
    storageAccounts: [{
        storageContainerId: exampleContainer.id,
        storageAccountKey: exampleAccount.primaryAccessKey,
        isDefault: true,
    }],
    roles: {
        headNode: {
            vmSize: "Standard_D3_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
        },
        workerNode: {
            vmSize: "Standard_D3_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
            numberOfDisksPerNode: 3,
            targetInstanceCount: 3,
        },
        zookeeperNode: {
            vmSize: "Standard_D3_V2",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
        },
    },
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="hdinsightstor",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="hdinsight",
    storage_account_name=example_account.name,
    container_access_type="private")
example_kafka_cluster = azure.hdinsight.KafkaCluster("example",
    name="example-hdicluster",
    resource_group_name=example.name,
    location=example.location,
    cluster_version="4.0",
    tier="Standard",
    component_version={
        "kafka": "2.1",
    },
    gateway={
        "username": "acctestusrgw",
        "password": "Password123!",
    },
    storage_accounts=[{
        "storage_container_id": example_container.id,
        "storage_account_key": example_account.primary_access_key,
        "is_default": True,
    }],
    roles={
        "head_node": {
            "vm_size": "Standard_D3_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
        },
        "worker_node": {
            "vm_size": "Standard_D3_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
            "number_of_disks_per_node": 3,
            "target_instance_count": 3,
        },
        "zookeeper_node": {
            "vm_size": "Standard_D3_V2",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "hdinsightstor",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "hdinsight",
        StorageAccountName = exampleAccount.Name,
        ContainerAccessType = "private",
    });

    var exampleKafkaCluster = new Azure.HDInsight.KafkaCluster("example", new()
    {
        Name = "example-hdicluster",
        ResourceGroupName = example.Name,
        Location = example.Location,
        ClusterVersion = "4.0",
        Tier = "Standard",
        ComponentVersion = new Azure.HDInsight.Inputs.KafkaClusterComponentVersionArgs
        {
            Kafka = "2.1",
        },
        Gateway = new Azure.HDInsight.Inputs.KafkaClusterGatewayArgs
        {
            Username = "acctestusrgw",
            Password = "Password123!",
        },
        StorageAccounts = new[]
        {
            new Azure.HDInsight.Inputs.KafkaClusterStorageAccountArgs
            {
                StorageContainerId = exampleContainer.Id,
                StorageAccountKey = exampleAccount.PrimaryAccessKey,
                IsDefault = true,
            },
        },
        Roles = new Azure.HDInsight.Inputs.KafkaClusterRolesArgs
        {
            HeadNode = new Azure.HDInsight.Inputs.KafkaClusterRolesHeadNodeArgs
            {
                VmSize = "Standard_D3_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
            },
            WorkerNode = new Azure.HDInsight.Inputs.KafkaClusterRolesWorkerNodeArgs
            {
                VmSize = "Standard_D3_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
                NumberOfDisksPerNode = 3,
                TargetInstanceCount = 3,
            },
            ZookeeperNode = new Azure.HDInsight.Inputs.KafkaClusterRolesZookeeperNodeArgs
            {
                VmSize = "Standard_D3_V2",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/hdinsight"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("hdinsightstor"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:                pulumi.String("hdinsight"),
			StorageAccountName:  exampleAccount.Name,
			ContainerAccessType: pulumi.String("private"),
		})
		if err != nil {
			return err
		}
		_, err = hdinsight.NewKafkaCluster(ctx, "example", &hdinsight.KafkaClusterArgs{
			Name:              pulumi.String("example-hdicluster"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			ClusterVersion:    pulumi.String("4.0"),
			Tier:              pulumi.String("Standard"),
			ComponentVersion: &hdinsight.KafkaClusterComponentVersionArgs{
				Kafka: pulumi.String("2.1"),
			},
			Gateway: &hdinsight.KafkaClusterGatewayArgs{
				Username: pulumi.String("acctestusrgw"),
				Password: pulumi.String("Password123!"),
			},
			StorageAccounts: hdinsight.KafkaClusterStorageAccountArray{
				&hdinsight.KafkaClusterStorageAccountArgs{
					StorageContainerId: exampleContainer.ID(),
					StorageAccountKey:  exampleAccount.PrimaryAccessKey,
					IsDefault:          pulumi.Bool(true),
				},
			},
			Roles: &hdinsight.KafkaClusterRolesArgs{
				HeadNode: &hdinsight.KafkaClusterRolesHeadNodeArgs{
					VmSize:   pulumi.String("Standard_D3_V2"),
					Username: pulumi.String("acctestusrvm"),
					Password: pulumi.String("AccTestvdSC4daf986!"),
				},
				WorkerNode: &hdinsight.KafkaClusterRolesWorkerNodeArgs{
					VmSize:               pulumi.String("Standard_D3_V2"),
					Username:             pulumi.String("acctestusrvm"),
					Password:             pulumi.String("AccTestvdSC4daf986!"),
					NumberOfDisksPerNode: pulumi.Int(3),
					TargetInstanceCount:  pulumi.Int(3),
				},
				ZookeeperNode: &hdinsight.KafkaClusterRolesZookeeperNodeArgs{
					VmSize:   pulumi.String("Standard_D3_V2"),
					Username: pulumi.String("acctestusrvm"),
					Password: pulumi.String("AccTestvdSC4daf986!"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azure.hdinsight.KafkaCluster;
import com.pulumi.azure.hdinsight.KafkaClusterArgs;
import com.pulumi.azure.hdinsight.inputs.KafkaClusterComponentVersionArgs;
import com.pulumi.azure.hdinsight.inputs.KafkaClusterGatewayArgs;
import com.pulumi.azure.hdinsight.inputs.KafkaClusterStorageAccountArgs;
import com.pulumi.azure.hdinsight.inputs.KafkaClusterRolesArgs;
import com.pulumi.azure.hdinsight.inputs.KafkaClusterRolesHeadNodeArgs;
import com.pulumi.azure.hdinsight.inputs.KafkaClusterRolesWorkerNodeArgs;
import com.pulumi.azure.hdinsight.inputs.KafkaClusterRolesZookeeperNodeArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("hdinsightstor")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("hdinsight")
            .storageAccountName(exampleAccount.name())
            .containerAccessType("private")
            .build());

        var exampleKafkaCluster = new KafkaCluster("exampleKafkaCluster", KafkaClusterArgs.builder()
            .name("example-hdicluster")
            .resourceGroupName(example.name())
            .location(example.location())
            .clusterVersion("4.0")
            .tier("Standard")
            .componentVersion(KafkaClusterComponentVersionArgs.builder()
                .kafka("2.1")
                .build())
            .gateway(KafkaClusterGatewayArgs.builder()
                .username("acctestusrgw")
                .password("Password123!")
                .build())
            .storageAccounts(KafkaClusterStorageAccountArgs.builder()
                .storageContainerId(exampleContainer.id())
                .storageAccountKey(exampleAccount.primaryAccessKey())
                .isDefault(true)
                .build())
            .roles(KafkaClusterRolesArgs.builder()
                .headNode(KafkaClusterRolesHeadNodeArgs.builder()
                    .vmSize("Standard_D3_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .build())
                .workerNode(KafkaClusterRolesWorkerNodeArgs.builder()
                    .vmSize("Standard_D3_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .numberOfDisksPerNode(3)
                    .targetInstanceCount(3)
                    .build())
                .zookeeperNode(KafkaClusterRolesZookeeperNodeArgs.builder()
                    .vmSize("Standard_D3_V2")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: hdinsightstor
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: hdinsight
      storageAccountName: ${exampleAccount.name}
      containerAccessType: private
  exampleKafkaCluster:
    type: azure:hdinsight:KafkaCluster
    name: example
    properties:
      name: example-hdicluster
      resourceGroupName: ${example.name}
      location: ${example.location}
      clusterVersion: '4.0'
      tier: Standard
      componentVersion:
        kafka: '2.1'
      gateway:
        username: acctestusrgw
        password: Password123!
      storageAccounts:
        - storageContainerId: ${exampleContainer.id}
          storageAccountKey: ${exampleAccount.primaryAccessKey}
          isDefault: true
      roles:
        headNode:
          vmSize: Standard_D3_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
        workerNode:
          vmSize: Standard_D3_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
          numberOfDisksPerNode: 3
          targetInstanceCount: 3
        zookeeperNode:
          vmSize: Standard_D3_V2
          username: acctestusrvm
          password: AccTestvdSC4daf986!
```
<!--End PulumiCodeChooser -->

## Import

HDInsight Kafka Clusters can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:hdinsight/kafkaCluster:KafkaCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.HDInsight/clusters/cluster1
```


clusterVersion" ~Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
¼
componentVersionx:v
t
	hdinsightKafkaClusterComponentVersionIazure:hdinsight/KafkaClusterComponentVersion:KafkaClusterComponentVersion.A `component_version` block as defined below.
¾
computeIsolationzBx:v
t
	hdinsightKafkaClusterComputeIsolationIazure:hdinsight/KafkaClusterComputeIsolation:KafkaClusterComputeIsolation.A `compute_isolation` block as defined below.
Ì
diskEncryptionsvBt*r:p
n
	hdinsightKafkaClusterDiskEncryptionEazure:hdinsight/KafkaClusterDiskEncryption:KafkaClusterDiskEncryptionÀOne or more `disk_encryption` block as defined below.

> **NOTE:** Starting on June 30, 2020, Azure HDInsight will enforce TLS 1.2 or later versions for all HTTPS connections. For more information, see [Azure HDInsight TLS 1.2 Enforcement](https://azure.microsoft.com/en-us/updates/azure-hdinsight-tls-12-enforcement/).
¢
encryptionInTransitEnabledB
 ~Whether encryption in transit is enabled for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.

	extensioneBc:a
_
	hdinsightKafkaClusterExtension;azure:hdinsight/KafkaClusterExtension:KafkaClusterExtension'An `extension` block as defined below.

gateway]:[
Y
	hdinsightKafkaClusterGateway7azure:hdinsight/KafkaClusterGateway:KafkaClusterGateway$A `gateway` block as defined below.

locationB" Specifies the Azure Region which this HDInsight Kafka Cluster should exist. Changing this forces a new resource to be created.


metastoreshBf:d
b
	hdinsightKafkaClusterMetastores=azure:hdinsight/KafkaClusterMetastores:KafkaClusterMetastores'A `metastores` block as defined below.

monitor_B]:[
Y
	hdinsightKafkaClusterMonitor7azure:hdinsight/KafkaClusterMonitor:KafkaClusterMonitor$A `monitor` block as defined below.
v
nameB" hSpecifies the name for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.

network_B]:[
Y
	hdinsightKafkaClusterNetwork7azure:hdinsight/KafkaClusterNetwork:KafkaClusterNetwork$A `network` block as defined below.
ë
privateLinkConfigurationB:

	hdinsight$KafkaClusterPrivateLinkConfigurationYazure:hdinsight/KafkaClusterPrivateLinkConfiguration:KafkaClusterPrivateLinkConfiguration7A `private_link_configuration` block as defined below.
ª
resourceGroupName" Specifies the name of the Resource Group in which this HDInsight Kafka Cluster should exist. Changing this forces a new resource to be created.

	restProxyeBc:a
_
	hdinsightKafkaClusterRestProxy;azure:hdinsight/KafkaClusterRestProxy:KafkaClusterRestProxy'A `rest_proxy` block as defined below.

rolesW:U
S
	hdinsightKafkaClusterRoles3azure:hdinsight/KafkaClusterRoles:KafkaClusterRoles"A `roles` block as defined below.
ì
securityProfilewBu:s
q
	hdinsightKafkaClusterSecurityProfileGazure:hdinsight/KafkaClusterSecurityProfile:KafkaClusterSecurityProfile`A `security_profile` block as defined below. Changing this forces a new resource to be created.
Ê
storageAccountGen2B~:|
z
	hdinsightKafkaClusterStorageAccountGen2Mazure:hdinsight/KafkaClusterStorageAccountGen2:KafkaClusterStorageAccountGen21A `storage_account_gen2` block as defined below.
Á
storageAccountsvBt*r:p
n
	hdinsightKafkaClusterStorageAccountEazure:hdinsight/KafkaClusterStorageAccount:KafkaClusterStorageAccount6One or more `storage_account` block as defined below.
X
tagsB2" HA map of Tags which should be assigned to this HDInsight Kafka Cluster.
·
tier" ªSpecifies the Tier which should be used for this HDInsight Kafka Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.

tlsMinVersionB" The minimal supported TLS version. Possible values are `1.0`, `1.1` or `1.2`. Changing this forces a new resource to be created.
"
clusterVersion" ~Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
"¼
componentVersionx:v
t
	hdinsightKafkaClusterComponentVersionIazure:hdinsight/KafkaClusterComponentVersion:KafkaClusterComponentVersion.A `component_version` block as defined below.
"¾
computeIsolationzBx:v
t
	hdinsightKafkaClusterComputeIsolationIazure:hdinsight/KafkaClusterComputeIsolation:KafkaClusterComputeIsolation.A `compute_isolation` block as defined below.
"Ì
diskEncryptionsvBt*r:p
n
	hdinsightKafkaClusterDiskEncryptionEazure:hdinsight/KafkaClusterDiskEncryption:KafkaClusterDiskEncryptionÀOne or more `disk_encryption` block as defined below.

> **NOTE:** Starting on June 30, 2020, Azure HDInsight will enforce TLS 1.2 or later versions for all HTTPS connections. For more information, see [Azure HDInsight TLS 1.2 Enforcement](https://azure.microsoft.com/en-us/updates/azure-hdinsight-tls-12-enforcement/).
"¢
encryptionInTransitEnabledB
 ~Whether encryption in transit is enabled for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.
"
	extensioneBc:a
_
	hdinsightKafkaClusterExtension;azure:hdinsight/KafkaClusterExtension:KafkaClusterExtension'An `extension` block as defined below.
"
gateway]:[
Y
	hdinsightKafkaClusterGateway7azure:hdinsight/KafkaClusterGateway:KafkaClusterGateway$A `gateway` block as defined below.
"W
httpsEndpoint" BThe HTTPS Connectivity Endpoint for this HDInsight Kafka Cluster.
"^
kafkaRestProxyEndpoint" @The Kafka Rest Proxy Endpoint for this HDInsight Kafka Cluster.
"
location" Specifies the Azure Region which this HDInsight Kafka Cluster should exist. Changing this forces a new resource to be created.
"

metastoreshBf:d
b
	hdinsightKafkaClusterMetastores=azure:hdinsight/KafkaClusterMetastores:KafkaClusterMetastores'A `metastores` block as defined below.
"
monitor_B]:[
Y
	hdinsightKafkaClusterMonitor7azure:hdinsight/KafkaClusterMonitor:KafkaClusterMonitor$A `monitor` block as defined below.
"t
name" hSpecifies the name for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.
"
network_B]:[
Y
	hdinsightKafkaClusterNetwork7azure:hdinsight/KafkaClusterNetwork:KafkaClusterNetwork$A `network` block as defined below.
"ë
privateLinkConfigurationB:

	hdinsight$KafkaClusterPrivateLinkConfigurationYazure:hdinsight/KafkaClusterPrivateLinkConfiguration:KafkaClusterPrivateLinkConfiguration7A `private_link_configuration` block as defined below.
"ª
resourceGroupName" Specifies the name of the Resource Group in which this HDInsight Kafka Cluster should exist. Changing this forces a new resource to be created.
"
	restProxyeBc:a
_
	hdinsightKafkaClusterRestProxy;azure:hdinsight/KafkaClusterRestProxy:KafkaClusterRestProxy'A `rest_proxy` block as defined below.
"
rolesW:U
S
	hdinsightKafkaClusterRoles3azure:hdinsight/KafkaClusterRoles:KafkaClusterRoles"A `roles` block as defined below.
"ì
securityProfilewBu:s
q
	hdinsightKafkaClusterSecurityProfileGazure:hdinsight/KafkaClusterSecurityProfile:KafkaClusterSecurityProfile`A `security_profile` block as defined below. Changing this forces a new resource to be created.
"S
sshEndpoint" @The SSH Connectivity Endpoint for this HDInsight Kafka Cluster.
"Ê
storageAccountGen2B~:|
z
	hdinsightKafkaClusterStorageAccountGen2Mazure:hdinsight/KafkaClusterStorageAccountGen2:KafkaClusterStorageAccountGen21A `storage_account_gen2` block as defined below.
"Á
storageAccountsvBt*r:p
n
	hdinsightKafkaClusterStorageAccountEazure:hdinsight/KafkaClusterStorageAccount:KafkaClusterStorageAccount6One or more `storage_account` block as defined below.
"X
tagsB2" HA map of Tags which should be assigned to this HDInsight Kafka Cluster.
"·
tier" ªSpecifies the Tier which should be used for this HDInsight Kafka Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.
"
tlsMinVersionB" The minimal supported TLS version. Possible values are `1.0`, `1.1` or `1.2`. Changing this forces a new resource to be created.
*ë¬
D
	hdinsightSparkCluster)azure:hdinsight/sparkCluster:SparkClusteræoManages a HDInsight Spark Cluster.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "hdinsightstor",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "hdinsight",
    storageAccountName: exampleAccount.name,
    containerAccessType: "private",
});
const exampleSparkCluster = new azure.hdinsight.SparkCluster("example", {
    name: "example-hdicluster",
    resourceGroupName: example.name,
    location: example.location,
    clusterVersion: "3.6",
    tier: "Standard",
    componentVersion: {
        spark: "2.3",
    },
    gateway: {
        username: "acctestusrgw",
        password: "Password123!",
    },
    storageAccounts: [{
        storageContainerId: exampleContainer.id,
        storageAccountKey: exampleAccount.primaryAccessKey,
        isDefault: true,
    }],
    roles: {
        headNode: {
            vmSize: "Standard_A3",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
        },
        workerNode: {
            vmSize: "Standard_A3",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
            targetInstanceCount: 3,
        },
        zookeeperNode: {
            vmSize: "Medium",
            username: "acctestusrvm",
            password: "AccTestvdSC4daf986!",
        },
    },
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="hdinsightstor",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="hdinsight",
    storage_account_name=example_account.name,
    container_access_type="private")
example_spark_cluster = azure.hdinsight.SparkCluster("example",
    name="example-hdicluster",
    resource_group_name=example.name,
    location=example.location,
    cluster_version="3.6",
    tier="Standard",
    component_version={
        "spark": "2.3",
    },
    gateway={
        "username": "acctestusrgw",
        "password": "Password123!",
    },
    storage_accounts=[{
        "storage_container_id": example_container.id,
        "storage_account_key": example_account.primary_access_key,
        "is_default": True,
    }],
    roles={
        "head_node": {
            "vm_size": "Standard_A3",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
        },
        "worker_node": {
            "vm_size": "Standard_A3",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
            "target_instance_count": 3,
        },
        "zookeeper_node": {
            "vm_size": "Medium",
            "username": "acctestusrvm",
            "password": "AccTestvdSC4daf986!",
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "hdinsightstor",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "hdinsight",
        StorageAccountName = exampleAccount.Name,
        ContainerAccessType = "private",
    });

    var exampleSparkCluster = new Azure.HDInsight.SparkCluster("example", new()
    {
        Name = "example-hdicluster",
        ResourceGroupName = example.Name,
        Location = example.Location,
        ClusterVersion = "3.6",
        Tier = "Standard",
        ComponentVersion = new Azure.HDInsight.Inputs.SparkClusterComponentVersionArgs
        {
            Spark = "2.3",
        },
        Gateway = new Azure.HDInsight.Inputs.SparkClusterGatewayArgs
        {
            Username = "acctestusrgw",
            Password = "Password123!",
        },
        StorageAccounts = new[]
        {
            new Azure.HDInsight.Inputs.SparkClusterStorageAccountArgs
            {
                StorageContainerId = exampleContainer.Id,
                StorageAccountKey = exampleAccount.PrimaryAccessKey,
                IsDefault = true,
            },
        },
        Roles = new Azure.HDInsight.Inputs.SparkClusterRolesArgs
        {
            HeadNode = new Azure.HDInsight.Inputs.SparkClusterRolesHeadNodeArgs
            {
                VmSize = "Standard_A3",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
            },
            WorkerNode = new Azure.HDInsight.Inputs.SparkClusterRolesWorkerNodeArgs
            {
                VmSize = "Standard_A3",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
                TargetInstanceCount = 3,
            },
            ZookeeperNode = new Azure.HDInsight.Inputs.SparkClusterRolesZookeeperNodeArgs
            {
                VmSize = "Medium",
                Username = "acctestusrvm",
                Password = "AccTestvdSC4daf986!",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/hdinsight"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("hdinsightstor"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:                pulumi.String("hdinsight"),
			StorageAccountName:  exampleAccount.Name,
			ContainerAccessType: pulumi.String("private"),
		})
		if err != nil {
			return err
		}
		_, err = hdinsight.NewSparkCluster(ctx, "example", &hdinsight.SparkClusterArgs{
			Name:              pulumi.String("example-hdicluster"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			ClusterVersion:    pulumi.String("3.6"),
			Tier:              pulumi.String("Standard"),
			ComponentVersion: &hdinsight.SparkClusterComponentVersionArgs{
				Spark: pulumi.String("2.3"),
			},
			Gateway: &hdinsight.SparkClusterGatewayArgs{
				Username: pulumi.String("acctestusrgw"),
				Password: pulumi.String("Password123!"),
			},
			StorageAccounts: hdinsight.SparkClusterStorageAccountArray{
				&hdinsight.SparkClusterStorageAccountArgs{
					StorageContainerId: exampleContainer.ID(),
					StorageAccountKey:  exampleAccount.PrimaryAccessKey,
					IsDefault:          pulumi.Bool(true),
				},
			},
			Roles: &hdinsight.SparkClusterRolesArgs{
				HeadNode: &hdinsight.SparkClusterRolesHeadNodeArgs{
					VmSize:   pulumi.String("Standard_A3"),
					Username: pulumi.String("acctestusrvm"),
					Password: pulumi.String("AccTestvdSC4daf986!"),
				},
				WorkerNode: &hdinsight.SparkClusterRolesWorkerNodeArgs{
					VmSize:              pulumi.String("Standard_A3"),
					Username:            pulumi.String("acctestusrvm"),
					Password:            pulumi.String("AccTestvdSC4daf986!"),
					TargetInstanceCount: pulumi.Int(3),
				},
				ZookeeperNode: &hdinsight.SparkClusterRolesZookeeperNodeArgs{
					VmSize:   pulumi.String("Medium"),
					Username: pulumi.String("acctestusrvm"),
					Password: pulumi.String("AccTestvdSC4daf986!"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azure.hdinsight.SparkCluster;
import com.pulumi.azure.hdinsight.SparkClusterArgs;
import com.pulumi.azure.hdinsight.inputs.SparkClusterComponentVersionArgs;
import com.pulumi.azure.hdinsight.inputs.SparkClusterGatewayArgs;
import com.pulumi.azure.hdinsight.inputs.SparkClusterStorageAccountArgs;
import com.pulumi.azure.hdinsight.inputs.SparkClusterRolesArgs;
import com.pulumi.azure.hdinsight.inputs.SparkClusterRolesHeadNodeArgs;
import com.pulumi.azure.hdinsight.inputs.SparkClusterRolesWorkerNodeArgs;
import com.pulumi.azure.hdinsight.inputs.SparkClusterRolesZookeeperNodeArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("hdinsightstor")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("hdinsight")
            .storageAccountName(exampleAccount.name())
            .containerAccessType("private")
            .build());

        var exampleSparkCluster = new SparkCluster("exampleSparkCluster", SparkClusterArgs.builder()
            .name("example-hdicluster")
            .resourceGroupName(example.name())
            .location(example.location())
            .clusterVersion("3.6")
            .tier("Standard")
            .componentVersion(SparkClusterComponentVersionArgs.builder()
                .spark("2.3")
                .build())
            .gateway(SparkClusterGatewayArgs.builder()
                .username("acctestusrgw")
                .password("Password123!")
                .build())
            .storageAccounts(SparkClusterStorageAccountArgs.builder()
                .storageContainerId(exampleContainer.id())
                .storageAccountKey(exampleAccount.primaryAccessKey())
                .isDefault(true)
                .build())
            .roles(SparkClusterRolesArgs.builder()
                .headNode(SparkClusterRolesHeadNodeArgs.builder()
                    .vmSize("Standard_A3")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .build())
                .workerNode(SparkClusterRolesWorkerNodeArgs.builder()
                    .vmSize("Standard_A3")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .targetInstanceCount(3)
                    .build())
                .zookeeperNode(SparkClusterRolesZookeeperNodeArgs.builder()
                    .vmSize("Medium")
                    .username("acctestusrvm")
                    .password("AccTestvdSC4daf986!")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: hdinsightstor
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: hdinsight
      storageAccountName: ${exampleAccount.name}
      containerAccessType: private
  exampleSparkCluster:
    type: azure:hdinsight:SparkCluster
    name: example
    properties:
      name: example-hdicluster
      resourceGroupName: ${example.name}
      location: ${example.location}
      clusterVersion: '3.6'
      tier: Standard
      componentVersion:
        spark: '2.3'
      gateway:
        username: acctestusrgw
        password: Password123!
      storageAccounts:
        - storageContainerId: ${exampleContainer.id}
          storageAccountKey: ${exampleAccount.primaryAccessKey}
          isDefault: true
      roles:
        headNode:
          vmSize: Standard_A3
          username: acctestusrvm
          password: AccTestvdSC4daf986!
        workerNode:
          vmSize: Standard_A3
          username: acctestusrvm
          password: AccTestvdSC4daf986!
          targetInstanceCount: 3
        zookeeperNode:
          vmSize: Medium
          username: acctestusrvm
          password: AccTestvdSC4daf986!
```
<!--End PulumiCodeChooser -->

## Import

HDInsight Spark Clusters can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:hdinsight/sparkCluster:SparkCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.HDInsight/clusters/cluster1
```


clusterVersion" ~Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
¼
componentVersionx:v
t
	hdinsightSparkClusterComponentVersionIazure:hdinsight/SparkClusterComponentVersion:SparkClusterComponentVersion.A `component_version` block as defined below.
¾
computeIsolationzBx:v
t
	hdinsightSparkClusterComputeIsolationIazure:hdinsight/SparkClusterComputeIsolation:SparkClusterComputeIsolation.A `compute_isolation` block as defined below.
Á
diskEncryptionsvBt*r:p
n
	hdinsightSparkClusterDiskEncryptionEazure:hdinsight/SparkClusterDiskEncryption:SparkClusterDiskEncryption6One or more `disk_encryption` block as defined below.

encryptionInTransitEnabledB
 nWhether encryption in transit is enabled for this Cluster. Changing this forces a new resource to be created.

	extensioneBc:a
_
	hdinsightSparkClusterExtension;azure:hdinsight/SparkClusterExtension:SparkClusterExtension'An `extension` block as defined below.

gateway]:[
Y
	hdinsightSparkClusterGateway7azure:hdinsight/SparkClusterGateway:SparkClusterGateway$A `gateway` block as defined below.

locationB" Specifies the Azure Region which this HDInsight Spark Cluster should exist. Changing this forces a new resource to be created.


metastoreshBf:d
b
	hdinsightSparkClusterMetastores=azure:hdinsight/SparkClusterMetastores:SparkClusterMetastores'A `metastores` block as defined below.

monitor_B]:[
Y
	hdinsightSparkClusterMonitor7azure:hdinsight/SparkClusterMonitor:SparkClusterMonitor$A `monitor` block as defined below.
v
nameB" hSpecifies the name for this HDInsight Spark Cluster. Changing this forces a new resource to be created.

network_B]:[
Y
	hdinsightSparkClusterNetwork7azure:hdinsight/SparkClusterNetwork:SparkClusterNetwork$A `network` block as defined below.
ë
privateLinkConfigurationB:

	hdinsight$SparkClusterPrivateLinkConfigurationYazure:hdinsight/SparkClusterPrivateLinkConfiguration:SparkClusterPrivateLinkConfiguration7A `private_link_configuration` block as defined below.
ª
resourceGroupName" Specifies the name of the Resource Group in which this HDInsight Spark Cluster should exist. Changing this forces a new resource to be created.

rolesW:U
S
	hdinsightSparkClusterRoles3azure:hdinsight/SparkClusterRoles:SparkClusterRoles"A `roles` block as defined below.
ì
securityProfilewBu:s
q
	hdinsightSparkClusterSecurityProfileGazure:hdinsight/SparkClusterSecurityProfile:SparkClusterSecurityProfile`A `security_profile` block as defined below. Changing this forces a new resource to be created.
Ê
storageAccountGen2B~:|
z
	hdinsightSparkClusterStorageAccountGen2Mazure:hdinsight/SparkClusterStorageAccountGen2:SparkClusterStorageAccountGen21A `storage_account_gen2` block as defined below.
Á
storageAccountsvBt*r:p
n
	hdinsightSparkClusterStorageAccountEazure:hdinsight/SparkClusterStorageAccount:SparkClusterStorageAccount6One or more `storage_account` block as defined below.
X
tagsB2" HA map of Tags which should be assigned to this HDInsight Spark Cluster.
·
tier" ªSpecifies the Tier which should be used for this HDInsight Spark Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.

tlsMinVersionB" The minimal supported TLS version. Possible values are 1.0, 1.1 or 1.2. Changing this forces a new resource to be created.

> **NOTE:** Starting on June 30, 2020, Azure HDInsight will enforce TLS 1.2 or later versions for all HTTPS connections. For more information, see [Azure HDInsight TLS 1.2 Enforcement](https://azure.microsoft.com/en-us/updates/azure-hdinsight-tls-12-enforcement/).
"
clusterVersion" ~Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
"¼
componentVersionx:v
t
	hdinsightSparkClusterComponentVersionIazure:hdinsight/SparkClusterComponentVersion:SparkClusterComponentVersion.A `component_version` block as defined below.
"¾
computeIsolationzBx:v
t
	hdinsightSparkClusterComputeIsolationIazure:hdinsight/SparkClusterComputeIsolation:SparkClusterComputeIsolation.A `compute_isolation` block as defined below.
"Á
diskEncryptionsvBt*r:p
n
	hdinsightSparkClusterDiskEncryptionEazure:hdinsight/SparkClusterDiskEncryption:SparkClusterDiskEncryption6One or more `disk_encryption` block as defined below.
"
encryptionInTransitEnabledB
 nWhether encryption in transit is enabled for this Cluster. Changing this forces a new resource to be created.
"
	extensioneBc:a
_
	hdinsightSparkClusterExtension;azure:hdinsight/SparkClusterExtension:SparkClusterExtension'An `extension` block as defined below.
"
gateway]:[
Y
	hdinsightSparkClusterGateway7azure:hdinsight/SparkClusterGateway:SparkClusterGateway$A `gateway` block as defined below.
"W
httpsEndpoint" BThe HTTPS Connectivity Endpoint for this HDInsight Spark Cluster.
"
location" Specifies the Azure Region which this HDInsight Spark Cluster should exist. Changing this forces a new resource to be created.
"

metastoreshBf:d
b
	hdinsightSparkClusterMetastores=azure:hdinsight/SparkClusterMetastores:SparkClusterMetastores'A `metastores` block as defined below.
"
monitor_B]:[
Y
	hdinsightSparkClusterMonitor7azure:hdinsight/SparkClusterMonitor:SparkClusterMonitor$A `monitor` block as defined below.
"t
name" hSpecifies the name for this HDInsight Spark Cluster. Changing this forces a new resource to be created.
"
network_B]:[
Y
	hdinsightSparkClusterNetwork7azure:hdinsight/SparkClusterNetwork:SparkClusterNetwork$A `network` block as defined below.
"ë
privateLinkConfigurationB:

	hdinsight$SparkClusterPrivateLinkConfigurationYazure:hdinsight/SparkClusterPrivateLinkConfiguration:SparkClusterPrivateLinkConfiguration7A `private_link_configuration` block as defined below.
"ª
resourceGroupName" Specifies the name of the Resource Group in which this HDInsight Spark Cluster should exist. Changing this forces a new resource to be created.
"
rolesW:U
S
	hdinsightSparkClusterRoles3azure:hdinsight/SparkClusterRoles:SparkClusterRoles"A `roles` block as defined below.
"ì
securityProfilewBu:s
q
	hdinsightSparkClusterSecurityProfileGazure:hdinsight/SparkClusterSecurityProfile:SparkClusterSecurityProfile`A `security_profile` block as defined below. Changing this forces a new resource to be created.
"S
sshEndpoint" @The SSH Connectivity Endpoint for this HDInsight Spark Cluster.
"Ê
storageAccountGen2B~:|
z
	hdinsightSparkClusterStorageAccountGen2Mazure:hdinsight/SparkClusterStorageAccountGen2:SparkClusterStorageAccountGen21A `storage_account_gen2` block as defined below.
"Á
storageAccountsvBt*r:p
n
	hdinsightSparkClusterStorageAccountEazure:hdinsight/SparkClusterStorageAccount:SparkClusterStorageAccount6One or more `storage_account` block as defined below.
"X
tagsB2" HA map of Tags which should be assigned to this HDInsight Spark Cluster.
"·
tier" ªSpecifies the Tier which should be used for this HDInsight Spark Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.
"
tlsMinVersionB" The minimal supported TLS version. Possible values are 1.0, 1.1 or 1.2. Changing this forces a new resource to be created.

> **NOTE:** Starting on June 30, 2020, Azure HDInsight will enforce TLS 1.2 or later versions for all HTTPS connections. For more information, see [Azure HDInsight TLS 1.2 Enforcement](https://azure.microsoft.com/en-us/updates/azure-hdinsight-tls-12-enforcement/).
*è6
F

healthcareDicomService*azure:healthcare/dicomService:DicomService%Manages a Healthcare DICOM Service

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const test = new azure.healthcare.Workspace("test", {
    name: "tfexworkspace",
    resourceGroupName: "tfex-resource_group",
    location: "east us",
});
const testDicomService = new azure.healthcare.DicomService("test", {
    name: "tfexDicom",
    workspaceId: test.id,
    location: "east us",
    identity: {
        type: "SystemAssigned",
    },
    tags: {
        environment: "None",
    },
});
```
```python
import pulumi
import pulumi_azure as azure

test = azure.healthcare.Workspace("test",
    name="tfexworkspace",
    resource_group_name="tfex-resource_group",
    location="east us")
test_dicom_service = azure.healthcare.DicomService("test",
    name="tfexDicom",
    workspace_id=test.id,
    location="east us",
    identity={
        "type": "SystemAssigned",
    },
    tags={
        "environment": "None",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var test = new Azure.Healthcare.Workspace("test", new()
    {
        Name = "tfexworkspace",
        ResourceGroupName = "tfex-resource_group",
        Location = "east us",
    });

    var testDicomService = new Azure.Healthcare.DicomService("test", new()
    {
        Name = "tfexDicom",
        WorkspaceId = test.Id,
        Location = "east us",
        Identity = new Azure.Healthcare.Inputs.DicomServiceIdentityArgs
        {
            Type = "SystemAssigned",
        },
        Tags = 
        {
            { "environment", "None" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/healthcare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		test, err := healthcare.NewWorkspace(ctx, "test", &healthcare.WorkspaceArgs{
			Name:              pulumi.String("tfexworkspace"),
			ResourceGroupName: pulumi.String("tfex-resource_group"),
			Location:          pulumi.String("east us"),
		})
		if err != nil {
			return err
		}
		_, err = healthcare.NewDicomService(ctx, "test", &healthcare.DicomServiceArgs{
			Name:        pulumi.String("tfexDicom"),
			WorkspaceId: test.ID(),
			Location:    pulumi.String("east us"),
			Identity: &healthcare.DicomServiceIdentityArgs{
				Type: pulumi.String("SystemAssigned"),
			},
			Tags: pulumi.StringMap{
				"environment": pulumi.String("None"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.healthcare.Workspace;
import com.pulumi.azure.healthcare.WorkspaceArgs;
import com.pulumi.azure.healthcare.DicomService;
import com.pulumi.azure.healthcare.DicomServiceArgs;
import com.pulumi.azure.healthcare.inputs.DicomServiceIdentityArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var test = new Workspace("test", WorkspaceArgs.builder()
            .name("tfexworkspace")
            .resourceGroupName("tfex-resource_group")
            .location("east us")
            .build());

        var testDicomService = new DicomService("testDicomService", DicomServiceArgs.builder()
            .name("tfexDicom")
            .workspaceId(test.id())
            .location("east us")
            .identity(DicomServiceIdentityArgs.builder()
                .type("SystemAssigned")
                .build())
            .tags(Map.of("environment", "None"))
            .build());

    }
}
```
```yaml
resources:
  test:
    type: azure:healthcare:Workspace
    properties:
      name: tfexworkspace
      resourceGroupName: tfex-resource_group
      location: east us
  testDicomService:
    type: azure:healthcare:DicomService
    name: test
    properties:
      name: tfexDicom
      workspaceId: ${test.id}
      location: east us
      identity:
        type: SystemAssigned
      tags:
        environment: None
```
<!--End PulumiCodeChooser -->

## Import

Healthcare DICOM Service can be imported using the resource`id`, e.g.

```sh
$ pulumi import azure:healthcare/dicomService:DicomService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/dicomServices/service1
```


identitydBb:`
^

healthcareDicomServiceIdentity:azure:healthcare/DicomServiceIdentity:DicomServiceIdentity&An `identity` block as defined below.
§
locationB" Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.

nameB" wSpecifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
³
publicNetworkAccessEnabledB
 Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
M
tagsB2" =A mapping of tags to assign to the Healthcare DICOM Service.
µ
workspaceId" ¡Specifies the id of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
"¸
authenticationsv*t:r
p

healthcareDicomServiceAuthenticationFazure:healthcare/DicomServiceAuthentication:DicomServiceAuthentication-The `authentication` block as defined below.
"
identitydBb:`
^

healthcareDicomServiceIdentity:azure:healthcare/DicomServiceIdentity:DicomServiceIdentity&An `identity` block as defined below.
"¥
location" Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
"
name" wSpecifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
"
privateEndpointsy*w:u
s

healthcareDicomServicePrivateEndpointHazure:healthcare/DicomServicePrivateEndpoint:DicomServicePrivateEndpoint"³
publicNetworkAccessEnabledB
 Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
"<

serviceUrl" *The url of the Healthcare DICOM Services.
"M
tagsB2" =A mapping of tags to assign to the Healthcare DICOM Service.
"µ
workspaceId" ¡Specifies the id of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
*ë~
C

healthcareFhirService(azure:healthcare/fhirService:FhirServiceô[Manages a Healthcare FHIR (Fast Healthcare Interoperability Resources) Service

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example",
    location: "West Europe",
});
const current = azure.core.getClientConfig({});
const exampleWorkspace = new azure.healthcare.Workspace("example", {
    name: "example",
    location: example.location,
    resourceGroupName: example.name,
});
const exampleFhirService = new azure.healthcare.FhirService("example", {
    name: "tfexfhir",
    location: "east us",
    resourceGroupName: "tfex-resource_group",
    workspaceId: exampleWorkspace.id,
    kind: "fhir-R4",
    authentication: {
        authority: "https://login.microsoftonline.com/tenantId",
        audience: "https://tfexfhir.fhir.azurehealthcareapis.com",
    },
    accessPolicyObjectIds: [current.then(current => current.objectId)],
    identity: {
        type: "SystemAssigned",
    },
    containerRegistryLoginServerUrls: ["tfex-container_registry_login_server"],
    cors: {
        allowedOrigins: [
            "https://tfex.com:123",
            "https://tfex1.com:3389",
        ],
        allowedHeaders: ["*"],
        allowedMethods: [
            "GET",
            "DELETE",
            "PUT",
        ],
        maxAgeInSeconds: 3600,
        credentialsAllowed: true,
    },
    configurationExportStorageAccountName: "storage_account_name",
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example",
    location="West Europe")
current = azure.core.get_client_config()
example_workspace = azure.healthcare.Workspace("example",
    name="example",
    location=example.location,
    resource_group_name=example.name)
example_fhir_service = azure.healthcare.FhirService("example",
    name="tfexfhir",
    location="east us",
    resource_group_name="tfex-resource_group",
    workspace_id=example_workspace.id,
    kind="fhir-R4",
    authentication={
        "authority": "https://login.microsoftonline.com/tenantId",
        "audience": "https://tfexfhir.fhir.azurehealthcareapis.com",
    },
    access_policy_object_ids=[current.object_id],
    identity={
        "type": "SystemAssigned",
    },
    container_registry_login_server_urls=["tfex-container_registry_login_server"],
    cors={
        "allowed_origins": [
            "https://tfex.com:123",
            "https://tfex1.com:3389",
        ],
        "allowed_headers": ["*"],
        "allowed_methods": [
            "GET",
            "DELETE",
            "PUT",
        ],
        "max_age_in_seconds": 3600,
        "credentials_allowed": True,
    },
    configuration_export_storage_account_name="storage_account_name")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example",
        Location = "West Europe",
    });

    var current = Azure.Core.GetClientConfig.Invoke();

    var exampleWorkspace = new Azure.Healthcare.Workspace("example", new()
    {
        Name = "example",
        Location = example.Location,
        ResourceGroupName = example.Name,
    });

    var exampleFhirService = new Azure.Healthcare.FhirService("example", new()
    {
        Name = "tfexfhir",
        Location = "east us",
        ResourceGroupName = "tfex-resource_group",
        WorkspaceId = exampleWorkspace.Id,
        Kind = "fhir-R4",
        Authentication = new Azure.Healthcare.Inputs.FhirServiceAuthenticationArgs
        {
            Authority = "https://login.microsoftonline.com/tenantId",
            Audience = "https://tfexfhir.fhir.azurehealthcareapis.com",
        },
        AccessPolicyObjectIds = new[]
        {
            current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
        },
        Identity = new Azure.Healthcare.Inputs.FhirServiceIdentityArgs
        {
            Type = "SystemAssigned",
        },
        ContainerRegistryLoginServerUrls = new[]
        {
            "tfex-container_registry_login_server",
        },
        Cors = new Azure.Healthcare.Inputs.FhirServiceCorsArgs
        {
            AllowedOrigins = new[]
            {
                "https://tfex.com:123",
                "https://tfex1.com:3389",
            },
            AllowedHeaders = new[]
            {
                "*",
            },
            AllowedMethods = new[]
            {
                "GET",
                "DELETE",
                "PUT",
            },
            MaxAgeInSeconds = 3600,
            CredentialsAllowed = true,
        },
        ConfigurationExportStorageAccountName = "storage_account_name",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/healthcare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		exampleWorkspace, err := healthcare.NewWorkspace(ctx, "example", &healthcare.WorkspaceArgs{
			Name:              pulumi.String("example"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
		})
		if err != nil {
			return err
		}
		_, err = healthcare.NewFhirService(ctx, "example", &healthcare.FhirServiceArgs{
			Name:              pulumi.String("tfexfhir"),
			Location:          pulumi.String("east us"),
			ResourceGroupName: pulumi.String("tfex-resource_group"),
			WorkspaceId:       exampleWorkspace.ID(),
			Kind:              pulumi.String("fhir-R4"),
			Authentication: &healthcare.FhirServiceAuthenticationArgs{
				Authority: pulumi.String("https://login.microsoftonline.com/tenantId"),
				Audience:  pulumi.String("https://tfexfhir.fhir.azurehealthcareapis.com"),
			},
			AccessPolicyObjectIds: pulumi.StringArray{
				pulumi.String(current.ObjectId),
			},
			Identity: &healthcare.FhirServiceIdentityArgs{
				Type: pulumi.String("SystemAssigned"),
			},
			ContainerRegistryLoginServerUrls: pulumi.StringArray{
				pulumi.String("tfex-container_registry_login_server"),
			},
			Cors: &healthcare.FhirServiceCorsArgs{
				AllowedOrigins: pulumi.StringArray{
					pulumi.String("https://tfex.com:123"),
					pulumi.String("https://tfex1.com:3389"),
				},
				AllowedHeaders: pulumi.StringArray{
					pulumi.String("*"),
				},
				AllowedMethods: pulumi.StringArray{
					pulumi.String("GET"),
					pulumi.String("DELETE"),
					pulumi.String("PUT"),
				},
				MaxAgeInSeconds:    pulumi.Int(3600),
				CredentialsAllowed: pulumi.Bool(true),
			},
			ConfigurationExportStorageAccountName: pulumi.String("storage_account_name"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.healthcare.Workspace;
import com.pulumi.azure.healthcare.WorkspaceArgs;
import com.pulumi.azure.healthcare.FhirService;
import com.pulumi.azure.healthcare.FhirServiceArgs;
import com.pulumi.azure.healthcare.inputs.FhirServiceAuthenticationArgs;
import com.pulumi.azure.healthcare.inputs.FhirServiceIdentityArgs;
import com.pulumi.azure.healthcare.inputs.FhirServiceCorsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example")
            .location("West Europe")
            .build());

        final var current = CoreFunctions.getClientConfig();

        var exampleWorkspace = new Workspace("exampleWorkspace", WorkspaceArgs.builder()
            .name("example")
            .location(example.location())
            .resourceGroupName(example.name())
            .build());

        var exampleFhirService = new FhirService("exampleFhirService", FhirServiceArgs.builder()
            .name("tfexfhir")
            .location("east us")
            .resourceGroupName("tfex-resource_group")
            .workspaceId(exampleWorkspace.id())
            .kind("fhir-R4")
            .authentication(FhirServiceAuthenticationArgs.builder()
                .authority("https://login.microsoftonline.com/tenantId")
                .audience("https://tfexfhir.fhir.azurehealthcareapis.com")
                .build())
            .accessPolicyObjectIds(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
            .identity(FhirServiceIdentityArgs.builder()
                .type("SystemAssigned")
                .build())
            .containerRegistryLoginServerUrls("tfex-container_registry_login_server")
            .cors(FhirServiceCorsArgs.builder()
                .allowedOrigins(                
                    "https://tfex.com:123",
                    "https://tfex1.com:3389")
                .allowedHeaders("*")
                .allowedMethods(                
                    "GET",
                    "DELETE",
                    "PUT")
                .maxAgeInSeconds(3600)
                .credentialsAllowed(true)
                .build())
            .configurationExportStorageAccountName("storage_account_name")
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example
      location: West Europe
  exampleWorkspace:
    type: azure:healthcare:Workspace
    name: example
    properties:
      name: example
      location: ${example.location}
      resourceGroupName: ${example.name}
  exampleFhirService:
    type: azure:healthcare:FhirService
    name: example
    properties:
      name: tfexfhir
      location: east us
      resourceGroupName: tfex-resource_group
      workspaceId: ${exampleWorkspace.id}
      kind: fhir-R4
      authentication:
        authority: https://login.microsoftonline.com/tenantId
        audience: https://tfexfhir.fhir.azurehealthcareapis.com
      accessPolicyObjectIds:
        - ${current.objectId}
      identity:
        type: SystemAssigned
      containerRegistryLoginServerUrls:
        - tfex-container_registry_login_server
      cors:
        allowedOrigins:
          - https://tfex.com:123
          - https://tfex1.com:3389
        allowedHeaders:
          - '*'
        allowedMethods:
          - GET
          - DELETE
          - PUT
        maxAgeInSeconds: 3600
        credentialsAllowed: true
      configurationExportStorageAccountName: storage_account_name
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Healthcare FHIR Service can be imported using the resource`id`, e.g.

```sh
$ pulumi import azure:healthcare/fhirService:FhirService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/fhirServices/service1
```

X
accessPolicyObjectIdsB*" 7A list of the access policies of the service instance.
±
authenticationq:o
m

healthcareFhirServiceAuthenticationDazure:healthcare/FhirServiceAuthentication:FhirServiceAuthentication,An `authentication` block as defined below.

%configurationExportStorageAccountNameB" hSpecifies the name of the storage account which the operation configuration information is exported to.

 containerRegistryLoginServerUrlsB*" eA list of azure container registry settings used for convert data operation of the service instance.

corsUBS:Q
O

healthcareFhirServiceCors0azure:healthcare/FhirServiceCors:FhirServiceCors!A `cors` block as defined below.

identityaB_:]
[

healthcareFhirServiceIdentity8azure:healthcare/FhirServiceIdentity:FhirServiceIdentity&An `identity` block as defined below.
Ë
kindB" ¼Specifies the kind of the Healthcare FHIR Service. Possible values are: `fhir-Stu3` and `fhir-R4`. Defaults to `fhir-R4`. Changing this forces a new Healthcare FHIR Service to be created.
¥
locationB" Specifies the Azure Region where the Healthcare FHIR Service should be created. Changing this forces a new Healthcare FHIR Service to be created.

nameB" uSpecifies the name of the Healthcare FHIR Service. Changing this forces a new Healthcare FHIR Service to be created.
ï
ociArtifactslBj*h:f
d

healthcareFhirServiceOciArtifact>azure:healthcare/FhirServiceOciArtifact:FhirServiceOciArtifactð[A list](https://www.terraform.io/docs/configuration/attr-as-blocks.html) of `oci_artifact` objects as defined below to describe [OCI artifacts for export](https://learn.microsoft.com/en-gb/azure/healthcare-apis/fhir/de-identified-export).
¦
resourceGroupName" Specifies the name of the Resource Group in which to create the Healthcare FHIR Service. Changing this forces a new resource to be created.
L
tagsB2" <A mapping of tags to assign to the Healthcare FHIR Service.
³
workspaceId" Specifies the id of the Healthcare Workspace where the Healthcare FHIR Service should exist. Changing this forces a new Healthcare FHIR Service to be created.
"X
accessPolicyObjectIdsB*" 7A list of the access policies of the service instance.
"±
authenticationq:o
m

healthcareFhirServiceAuthenticationDazure:healthcare/FhirServiceAuthentication:FhirServiceAuthentication,An `authentication` block as defined below.
"
%configurationExportStorageAccountNameB" hSpecifies the name of the storage account which the operation configuration information is exported to.
"
 containerRegistryLoginServerUrlsB*" eA list of azure container registry settings used for convert data operation of the service instance.
"
corsUBS:Q
O

healthcareFhirServiceCors0azure:healthcare/FhirServiceCors:FhirServiceCors!A `cors` block as defined below.
"
identityaB_:]
[

healthcareFhirServiceIdentity8azure:healthcare/FhirServiceIdentity:FhirServiceIdentity&An `identity` block as defined below.
"Ë
kindB" ¼Specifies the kind of the Healthcare FHIR Service. Possible values are: `fhir-Stu3` and `fhir-R4`. Defaults to `fhir-R4`. Changing this forces a new Healthcare FHIR Service to be created.
"£
location" Specifies the Azure Region where the Healthcare FHIR Service should be created. Changing this forces a new Healthcare FHIR Service to be created.
"
name" uSpecifies the name of the Healthcare FHIR Service. Changing this forces a new Healthcare FHIR Service to be created.
"ï
ociArtifactslBj*h:f
d

healthcareFhirServiceOciArtifact>azure:healthcare/FhirServiceOciArtifact:FhirServiceOciArtifactð[A list](https://www.terraform.io/docs/configuration/attr-as-blocks.html) of `oci_artifact` objects as defined below to describe [OCI artifacts for export](https://learn.microsoft.com/en-gb/azure/healthcare-apis/fhir/de-identified-export).
"M
publicNetworkAccessEnabled
 +Whether public networks access is enabled.
"¦
resourceGroupName" Specifies the name of the Resource Group in which to create the Healthcare FHIR Service. Changing this forces a new resource to be created.
"L
tagsB2" <A mapping of tags to assign to the Healthcare FHIR Service.
"³
workspaceId" Specifies the id of the Healthcare Workspace where the Healthcare FHIR Service should exist. Changing this forces a new Healthcare FHIR Service to be created.
*¼j
L

healthcareMedtechService.azure:healthcare/medtechService:MedtechServiceãXManages a Healthcare Med Tech Service.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-rg",
    location: "east us",
});
const exampleWorkspace = new azure.healthcare.Workspace("example", {
    name: "examplewkspace",
    location: example.location,
    resourceGroupName: example.name,
});
const exampleMedtechService = new azure.healthcare.MedtechService("example", {
    name: "examplemed",
    workspaceId: exampleWorkspace.id,
    location: "east us",
    identity: {
        type: "SystemAssigned",
    },
    eventhubNamespaceName: "example-eventhub-namespace",
    eventhubName: "example-eventhub",
    eventhubConsumerGroupName: "$Default",
    deviceMappingJson: JSON.stringify({
        templateType: "CollectionContent",
        template: [{
            templateType: "JsonPathContent",
            template: {
                typeName: "heartrate",
                typeMatchExpression: "$..[?(@heartrate)]",
                deviceIdExpression: "$.deviceid",
                timestampExpression: "$.measurementdatetime",
                values: [{
                    required: "true",
                    valueExpression: "$.heartrate",
                    valueName: "hr",
                }],
            },
        }],
    }),
});
```
```python
import pulumi
import json
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-rg",
    location="east us")
example_workspace = azure.healthcare.Workspace("example",
    name="examplewkspace",
    location=example.location,
    resource_group_name=example.name)
example_medtech_service = azure.healthcare.MedtechService("example",
    name="examplemed",
    workspace_id=example_workspace.id,
    location="east us",
    identity={
        "type": "SystemAssigned",
    },
    eventhub_namespace_name="example-eventhub-namespace",
    eventhub_name="example-eventhub",
    eventhub_consumer_group_name="$Default",
    device_mapping_json=json.dumps({
        "templateType": "CollectionContent",
        "template": [{
            "templateType": "JsonPathContent",
            "template": {
                "typeName": "heartrate",
                "typeMatchExpression": "$..[?(@heartrate)]",
                "deviceIdExpression": "$.deviceid",
                "timestampExpression": "$.measurementdatetime",
                "values": [{
                    "required": "true",
                    "valueExpression": "$.heartrate",
                    "valueName": "hr",
                }],
            },
        }],
    }))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-rg",
        Location = "east us",
    });

    var exampleWorkspace = new Azure.Healthcare.Workspace("example", new()
    {
        Name = "examplewkspace",
        Location = example.Location,
        ResourceGroupName = example.Name,
    });

    var exampleMedtechService = new Azure.Healthcare.MedtechService("example", new()
    {
        Name = "examplemed",
        WorkspaceId = exampleWorkspace.Id,
        Location = "east us",
        Identity = new Azure.Healthcare.Inputs.MedtechServiceIdentityArgs
        {
            Type = "SystemAssigned",
        },
        EventhubNamespaceName = "example-eventhub-namespace",
        EventhubName = "example-eventhub",
        EventhubConsumerGroupName = "$Default",
        DeviceMappingJson = JsonSerializer.Serialize(new Dictionary<string, object?>
        {
            ["templateType"] = "CollectionContent",
            ["template"] = new[]
            {
                new Dictionary<string, object?>
                {
                    ["templateType"] = "JsonPathContent",
                    ["template"] = new Dictionary<string, object?>
                    {
                        ["typeName"] = "heartrate",
                        ["typeMatchExpression"] = "$..[?(@heartrate)]",
                        ["deviceIdExpression"] = "$.deviceid",
                        ["timestampExpression"] = "$.measurementdatetime",
                        ["values"] = new[]
                        {
                            new Dictionary<string, object?>
                            {
                                ["required"] = "true",
                                ["valueExpression"] = "$.heartrate",
                                ["valueName"] = "hr",
                            },
                        },
                    },
                },
            },
        }),
    });

});
```
```go
package main

import (
	"encoding/json"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/healthcare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-rg"),
			Location: pulumi.String("east us"),
		})
		if err != nil {
			return err
		}
		exampleWorkspace, err := healthcare.NewWorkspace(ctx, "example", &healthcare.WorkspaceArgs{
			Name:              pulumi.String("examplewkspace"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
		})
		if err != nil {
			return err
		}
		tmpJSON0, err := json.Marshal(map[string]interface{}{
			"templateType": "CollectionContent",
			"template": []map[string]interface{}{
				map[string]interface{}{
					"templateType": "JsonPathContent",
					"template": map[string]interface{}{
						"typeName":            "heartrate",
						"typeMatchExpression": "$..[?(@heartrate)]",
						"deviceIdExpression":  "$.deviceid",
						"timestampExpression": "$.measurementdatetime",
						"values": []map[string]interface{}{
							map[string]interface{}{
								"required":        "true",
								"valueExpression": "$.heartrate",
								"valueName":       "hr",
							},
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		json0 := string(tmpJSON0)
		_, err = healthcare.NewMedtechService(ctx, "example", &healthcare.MedtechServiceArgs{
			Name:        pulumi.String("examplemed"),
			WorkspaceId: exampleWorkspace.ID(),
			Location:    pulumi.String("east us"),
			Identity: &healthcare.MedtechServiceIdentityArgs{
				Type: pulumi.String("SystemAssigned"),
			},
			EventhubNamespaceName:     pulumi.String("example-eventhub-namespace"),
			EventhubName:              pulumi.String("example-eventhub"),
			EventhubConsumerGroupName: pulumi.String("$Default"),
			DeviceMappingJson:         pulumi.String(json0),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.healthcare.Workspace;
import com.pulumi.azure.healthcare.WorkspaceArgs;
import com.pulumi.azure.healthcare.MedtechService;
import com.pulumi.azure.healthcare.MedtechServiceArgs;
import com.pulumi.azure.healthcare.inputs.MedtechServiceIdentityArgs;
import static com.pulumi.codegen.internal.Serialization.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-rg")
            .location("east us")
            .build());

        var exampleWorkspace = new Workspace("exampleWorkspace", WorkspaceArgs.builder()
            .name("examplewkspace")
            .location(example.location())
            .resourceGroupName(example.name())
            .build());

        var exampleMedtechService = new MedtechService("exampleMedtechService", MedtechServiceArgs.builder()
            .name("examplemed")
            .workspaceId(exampleWorkspace.id())
            .location("east us")
            .identity(MedtechServiceIdentityArgs.builder()
                .type("SystemAssigned")
                .build())
            .eventhubNamespaceName("example-eventhub-namespace")
            .eventhubName("example-eventhub")
            .eventhubConsumerGroupName("$Default")
            .deviceMappingJson(serializeJson(
                jsonObject(
                    jsonProperty("templateType", "CollectionContent"),
                    jsonProperty("template", jsonArray(jsonObject(
                        jsonProperty("templateType", "JsonPathContent"),
                        jsonProperty("template", jsonObject(
                            jsonProperty("typeName", "heartrate"),
                            jsonProperty("typeMatchExpression", "$..[?(@heartrate)]"),
                            jsonProperty("deviceIdExpression", "$.deviceid"),
                            jsonProperty("timestampExpression", "$.measurementdatetime"),
                            jsonProperty("values", jsonArray(jsonObject(
                                jsonProperty("required", "true"),
                                jsonProperty("valueExpression", "$.heartrate"),
                                jsonProperty("valueName", "hr")
                            )))
                        ))
                    )))
                )))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-rg
      location: east us
  exampleWorkspace:
    type: azure:healthcare:Workspace
    name: example
    properties:
      name: examplewkspace
      location: ${example.location}
      resourceGroupName: ${example.name}
  exampleMedtechService:
    type: azure:healthcare:MedtechService
    name: example
    properties:
      name: examplemed
      workspaceId: ${exampleWorkspace.id}
      location: east us
      identity:
        type: SystemAssigned
      eventhubNamespaceName: example-eventhub-namespace
      eventhubName: example-eventhub
      eventhubConsumerGroupName: $Default
      deviceMappingJson:
        fn::toJSON:
          templateType: CollectionContent
          template:
            - templateType: JsonPathContent
              template:
                typeName: heartrate
                typeMatchExpression: $..[?(@heartrate)]
                deviceIdExpression: $.deviceid
                timestampExpression: $.measurementdatetime
                values:
                  - required: 'true'
                    valueExpression: $.heartrate
                    valueName: hr
```
<!--End PulumiCodeChooser -->

## Import

Healthcare Med Tech Service can be imported using the resource`id`, e.g.

```sh
$ pulumi import azure:healthcare/medtechService:MedtechService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotConnectors/iotconnector1
```

P
deviceMappingJson" 7Specifies the Device Mappings of the Med Tech Service.
^
eventhubConsumerGroupName" =Specifies the Consumer Group of the Event Hub to connect to.
G
eventhubName" 3Specifies the name of the Event Hub to connect to.
Z
eventhubNamespaceName" =Specifies the namespace name of the Event Hub to connect to.

identityjBh:f
d

healthcareMedtechServiceIdentity>azure:healthcare/MedtechServiceIdentity:MedtechServiceIdentity&An `identity` block as defined below.
­
locationB" Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.

nameB" }Specifies the name of the Healthcare Med Tech Service. Changing this forces a new Healthcare Med Tech Service to be created.
P
tagsB2" @A mapping of tags to assign to the Healthcare Med Tech Service.
»
workspaceId" §Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
"P
deviceMappingJson" 7Specifies the Device Mappings of the Med Tech Service.
"^
eventhubConsumerGroupName" =Specifies the Consumer Group of the Event Hub to connect to.
"G
eventhubName" 3Specifies the name of the Event Hub to connect to.
"Z
eventhubNamespaceName" =Specifies the namespace name of the Event Hub to connect to.
"
identityjBh:f
d

healthcareMedtechServiceIdentity>azure:healthcare/MedtechServiceIdentity:MedtechServiceIdentity&An `identity` block as defined below.
"«
location" Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.
"
name" }Specifies the name of the Healthcare Med Tech Service. Changing this forces a new Healthcare Med Tech Service to be created.
"P
tagsB2" @A mapping of tags to assign to the Healthcare Med Tech Service.
"»
workspaceId" §Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
*¨Ì
y

healthcareMedtechServiceFhirDestinationLazure:healthcare/medtechServiceFhirDestination:MedtechServiceFhirDestinationÏºManages a Healthcare Med Tech Service Fhir Destination.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-rg",
    location: "West Europe",
});
const current = azure.core.getClientConfig({});
const exampleWorkspace = new azure.healthcare.Workspace("example", {
    name: "exampleworkspace",
    location: example.location,
    resourceGroupName: example.name,
});
const exampleEventHubNamespace = new azure.eventhub.EventHubNamespace("example", {
    name: "example-ehn",
    location: example.location,
    resourceGroupName: example.name,
    sku: "Standard",
});
const exampleEventHub = new azure.eventhub.EventHub("example", {
    name: "example-eh",
    namespaceName: exampleEventHubNamespace.name,
    resourceGroupName: example.name,
    partitionCount: 1,
    messageRetention: 1,
});
const exampleConsumerGroup = new azure.eventhub.ConsumerGroup("example", {
    name: "$default",
    namespaceName: exampleEventHubNamespace.name,
    eventhubName: exampleEventHub.name,
    resourceGroupName: example.name,
});
const exampleFhirService = new azure.healthcare.FhirService("example", {
    name: "examplefhir",
    location: example.location,
    resourceGroupName: example.name,
    workspaceId: exampleWorkspace.id,
    kind: "fhir-R4",
    authentication: {
        authority: "https://login.microsoftonline.com/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        audience: "https://examplefhir.fhir.azurehealthcareapis.com",
    },
});
const exampleMedtechService = new azure.healthcare.MedtechService("example", {
    name: "examplemt",
    workspaceId: exampleWorkspace.id,
    location: example.location,
    eventhubNamespaceName: exampleEventHubNamespace.name,
    eventhubName: exampleEventHub.name,
    eventhubConsumerGroupName: exampleConsumerGroup.name,
    deviceMappingJson: JSON.stringify({
        templateType: "CollectionContent",
        template: [],
    }),
});
const exampleMedtechServiceFhirDestination = new azure.healthcare.MedtechServiceFhirDestination("example", {
    name: "examplemtdes",
    location: "east us",
    medtechServiceId: exampleMedtechService.id,
    destinationFhirServiceId: exampleFhirService.id,
    destinationIdentityResolutionType: "Create",
    destinationFhirMappingJson: JSON.stringify({
        templateType: "CollectionFhirTemplate",
        template: [{
            templateType: "CodeValueFhir",
            template: {
                codes: [{
                    code: "8867-4",
                    system: "http://loinc.org",
                    display: "Heart rate",
                }],
                periodInterval: 60,
                typeName: "heartrate",
                value: {
                    defaultPeriod: 5000,
                    unit: "count/min",
                    valueName: "hr",
                    valueType: "SampledData",
                },
            },
        }],
    }),
});
```
```python
import pulumi
import json
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-rg",
    location="West Europe")
current = azure.core.get_client_config()
example_workspace = azure.healthcare.Workspace("example",
    name="exampleworkspace",
    location=example.location,
    resource_group_name=example.name)
example_event_hub_namespace = azure.eventhub.EventHubNamespace("example",
    name="example-ehn",
    location=example.location,
    resource_group_name=example.name,
    sku="Standard")
example_event_hub = azure.eventhub.EventHub("example",
    name="example-eh",
    namespace_name=example_event_hub_namespace.name,
    resource_group_name=example.name,
    partition_count=1,
    message_retention=1)
example_consumer_group = azure.eventhub.ConsumerGroup("example",
    name="$default",
    namespace_name=example_event_hub_namespace.name,
    eventhub_name=example_event_hub.name,
    resource_group_name=example.name)
example_fhir_service = azure.healthcare.FhirService("example",
    name="examplefhir",
    location=example.location,
    resource_group_name=example.name,
    workspace_id=example_workspace.id,
    kind="fhir-R4",
    authentication={
        "authority": "https://login.microsoftonline.com/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        "audience": "https://examplefhir.fhir.azurehealthcareapis.com",
    })
example_medtech_service = azure.healthcare.MedtechService("example",
    name="examplemt",
    workspace_id=example_workspace.id,
    location=example.location,
    eventhub_namespace_name=example_event_hub_namespace.name,
    eventhub_name=example_event_hub.name,
    eventhub_consumer_group_name=example_consumer_group.name,
    device_mapping_json=json.dumps({
        "templateType": "CollectionContent",
        "template": [],
    }))
example_medtech_service_fhir_destination = azure.healthcare.MedtechServiceFhirDestination("example",
    name="examplemtdes",
    location="east us",
    medtech_service_id=example_medtech_service.id,
    destination_fhir_service_id=example_fhir_service.id,
    destination_identity_resolution_type="Create",
    destination_fhir_mapping_json=json.dumps({
        "templateType": "CollectionFhirTemplate",
        "template": [{
            "templateType": "CodeValueFhir",
            "template": {
                "codes": [{
                    "code": "8867-4",
                    "system": "http://loinc.org",
                    "display": "Heart rate",
                }],
                "periodInterval": 60,
                "typeName": "heartrate",
                "value": {
                    "defaultPeriod": 5000,
                    "unit": "count/min",
                    "valueName": "hr",
                    "valueType": "SampledData",
                },
            },
        }],
    }))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-rg",
        Location = "West Europe",
    });

    var current = Azure.Core.GetClientConfig.Invoke();

    var exampleWorkspace = new Azure.Healthcare.Workspace("example", new()
    {
        Name = "exampleworkspace",
        Location = example.Location,
        ResourceGroupName = example.Name,
    });

    var exampleEventHubNamespace = new Azure.EventHub.EventHubNamespace("example", new()
    {
        Name = "example-ehn",
        Location = example.Location,
        ResourceGroupName = example.Name,
        Sku = "Standard",
    });

    var exampleEventHub = new Azure.EventHub.EventHub("example", new()
    {
        Name = "example-eh",
        NamespaceName = exampleEventHubNamespace.Name,
        ResourceGroupName = example.Name,
        PartitionCount = 1,
        MessageRetention = 1,
    });

    var exampleConsumerGroup = new Azure.EventHub.ConsumerGroup("example", new()
    {
        Name = "$default",
        NamespaceName = exampleEventHubNamespace.Name,
        EventhubName = exampleEventHub.Name,
        ResourceGroupName = example.Name,
    });

    var exampleFhirService = new Azure.Healthcare.FhirService("example", new()
    {
        Name = "examplefhir",
        Location = example.Location,
        ResourceGroupName = example.Name,
        WorkspaceId = exampleWorkspace.Id,
        Kind = "fhir-R4",
        Authentication = new Azure.Healthcare.Inputs.FhirServiceAuthenticationArgs
        {
            Authority = "https://login.microsoftonline.com/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
            Audience = "https://examplefhir.fhir.azurehealthcareapis.com",
        },
    });

    var exampleMedtechService = new Azure.Healthcare.MedtechService("example", new()
    {
        Name = "examplemt",
        WorkspaceId = exampleWorkspace.Id,
        Location = example.Location,
        EventhubNamespaceName = exampleEventHubNamespace.Name,
        EventhubName = exampleEventHub.Name,
        EventhubConsumerGroupName = exampleConsumerGroup.Name,
        DeviceMappingJson = JsonSerializer.Serialize(new Dictionary<string, object?>
        {
            ["templateType"] = "CollectionContent",
            ["template"] = new[]
            {
            },
        }),
    });

    var exampleMedtechServiceFhirDestination = new Azure.Healthcare.MedtechServiceFhirDestination("example", new()
    {
        Name = "examplemtdes",
        Location = "east us",
        MedtechServiceId = exampleMedtechService.Id,
        DestinationFhirServiceId = exampleFhirService.Id,
        DestinationIdentityResolutionType = "Create",
        DestinationFhirMappingJson = JsonSerializer.Serialize(new Dictionary<string, object?>
        {
            ["templateType"] = "CollectionFhirTemplate",
            ["template"] = new[]
            {
                new Dictionary<string, object?>
                {
                    ["templateType"] = "CodeValueFhir",
                    ["template"] = new Dictionary<string, object?>
                    {
                        ["codes"] = new[]
                        {
                            new Dictionary<string, object?>
                            {
                                ["code"] = "8867-4",
                                ["system"] = "http://loinc.org",
                                ["display"] = "Heart rate",
                            },
                        },
                        ["periodInterval"] = 60,
                        ["typeName"] = "heartrate",
                        ["value"] = new Dictionary<string, object?>
                        {
                            ["defaultPeriod"] = 5000,
                            ["unit"] = "count/min",
                            ["valueName"] = "hr",
                            ["valueType"] = "SampledData",
                        },
                    },
                },
            },
        }),
    });

});
```
```go
package main

import (
	"encoding/json"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/eventhub"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/healthcare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-rg"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		_, err = core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		exampleWorkspace, err := healthcare.NewWorkspace(ctx, "example", &healthcare.WorkspaceArgs{
			Name:              pulumi.String("exampleworkspace"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
		})
		if err != nil {
			return err
		}
		exampleEventHubNamespace, err := eventhub.NewEventHubNamespace(ctx, "example", &eventhub.EventHubNamespaceArgs{
			Name:              pulumi.String("example-ehn"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			Sku:               pulumi.String("Standard"),
		})
		if err != nil {
			return err
		}
		exampleEventHub, err := eventhub.NewEventHub(ctx, "example", &eventhub.EventHubArgs{
			Name:              pulumi.String("example-eh"),
			NamespaceName:     exampleEventHubNamespace.Name,
			ResourceGroupName: example.Name,
			PartitionCount:    pulumi.Int(1),
			MessageRetention:  pulumi.Int(1),
		})
		if err != nil {
			return err
		}
		exampleConsumerGroup, err := eventhub.NewConsumerGroup(ctx, "example", &eventhub.ConsumerGroupArgs{
			Name:              pulumi.String("$default"),
			NamespaceName:     exampleEventHubNamespace.Name,
			EventhubName:      exampleEventHub.Name,
			ResourceGroupName: example.Name,
		})
		if err != nil {
			return err
		}
		exampleFhirService, err := healthcare.NewFhirService(ctx, "example", &healthcare.FhirServiceArgs{
			Name:              pulumi.String("examplefhir"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			WorkspaceId:       exampleWorkspace.ID(),
			Kind:              pulumi.String("fhir-R4"),
			Authentication: &healthcare.FhirServiceAuthenticationArgs{
				Authority: pulumi.String("https://login.microsoftonline.com/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
				Audience:  pulumi.String("https://examplefhir.fhir.azurehealthcareapis.com"),
			},
		})
		if err != nil {
			return err
		}
		tmpJSON0, err := json.Marshal(map[string]interface{}{
			"templateType": "CollectionContent",
			"template":     []interface{}{},
		})
		if err != nil {
			return err
		}
		json0 := string(tmpJSON0)
		exampleMedtechService, err := healthcare.NewMedtechService(ctx, "example", &healthcare.MedtechServiceArgs{
			Name:                      pulumi.String("examplemt"),
			WorkspaceId:               exampleWorkspace.ID(),
			Location:                  example.Location,
			EventhubNamespaceName:     exampleEventHubNamespace.Name,
			EventhubName:              exampleEventHub.Name,
			EventhubConsumerGroupName: exampleConsumerGroup.Name,
			DeviceMappingJson:         pulumi.String(json0),
		})
		if err != nil {
			return err
		}
		tmpJSON1, err := json.Marshal(map[string]interface{}{
			"templateType": "CollectionFhirTemplate",
			"template": []map[string]interface{}{
				map[string]interface{}{
					"templateType": "CodeValueFhir",
					"template": map[string]interface{}{
						"codes": []map[string]interface{}{
							map[string]interface{}{
								"code":    "8867-4",
								"system":  "http://loinc.org",
								"display": "Heart rate",
							},
						},
						"periodInterval": 60,
						"typeName":       "heartrate",
						"value": map[string]interface{}{
							"defaultPeriod": 5000,
							"unit":          "count/min",
							"valueName":     "hr",
							"valueType":     "SampledData",
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		json1 := string(tmpJSON1)
		_, err = healthcare.NewMedtechServiceFhirDestination(ctx, "example", &healthcare.MedtechServiceFhirDestinationArgs{
			Name:                              pulumi.String("examplemtdes"),
			Location:                          pulumi.String("east us"),
			MedtechServiceId:                  exampleMedtechService.ID(),
			DestinationFhirServiceId:          exampleFhirService.ID(),
			DestinationIdentityResolutionType: pulumi.String("Create"),
			DestinationFhirMappingJson:        pulumi.String(json1),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.healthcare.Workspace;
import com.pulumi.azure.healthcare.WorkspaceArgs;
import com.pulumi.azure.eventhub.EventHubNamespace;
import com.pulumi.azure.eventhub.EventHubNamespaceArgs;
import com.pulumi.azure.eventhub.EventHub;
import com.pulumi.azure.eventhub.EventHubArgs;
import com.pulumi.azure.eventhub.ConsumerGroup;
import com.pulumi.azure.eventhub.ConsumerGroupArgs;
import com.pulumi.azure.healthcare.FhirService;
import com.pulumi.azure.healthcare.FhirServiceArgs;
import com.pulumi.azure.healthcare.inputs.FhirServiceAuthenticationArgs;
import com.pulumi.azure.healthcare.MedtechService;
import com.pulumi.azure.healthcare.MedtechServiceArgs;
import com.pulumi.azure.healthcare.MedtechServiceFhirDestination;
import com.pulumi.azure.healthcare.MedtechServiceFhirDestinationArgs;
import static com.pulumi.codegen.internal.Serialization.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-rg")
            .location("West Europe")
            .build());

        final var current = CoreFunctions.getClientConfig();

        var exampleWorkspace = new Workspace("exampleWorkspace", WorkspaceArgs.builder()
            .name("exampleworkspace")
            .location(example.location())
            .resourceGroupName(example.name())
            .build());

        var exampleEventHubNamespace = new EventHubNamespace("exampleEventHubNamespace", EventHubNamespaceArgs.builder()
            .name("example-ehn")
            .location(example.location())
            .resourceGroupName(example.name())
            .sku("Standard")
            .build());

        var exampleEventHub = new EventHub("exampleEventHub", EventHubArgs.builder()
            .name("example-eh")
            .namespaceName(exampleEventHubNamespace.name())
            .resourceGroupName(example.name())
            .partitionCount(1)
            .messageRetention(1)
            .build());

        var exampleConsumerGroup = new ConsumerGroup("exampleConsumerGroup", ConsumerGroupArgs.builder()
            .name("$default")
            .namespaceName(exampleEventHubNamespace.name())
            .eventhubName(exampleEventHub.name())
            .resourceGroupName(example.name())
            .build());

        var exampleFhirService = new FhirService("exampleFhirService", FhirServiceArgs.builder()
            .name("examplefhir")
            .location(example.location())
            .resourceGroupName(example.name())
            .workspaceId(exampleWorkspace.id())
            .kind("fhir-R4")
            .authentication(FhirServiceAuthenticationArgs.builder()
                .authority("https://login.microsoftonline.com/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
                .audience("https://examplefhir.fhir.azurehealthcareapis.com")
                .build())
            .build());

        var exampleMedtechService = new MedtechService("exampleMedtechService", MedtechServiceArgs.builder()
            .name("examplemt")
            .workspaceId(exampleWorkspace.id())
            .location(example.location())
            .eventhubNamespaceName(exampleEventHubNamespace.name())
            .eventhubName(exampleEventHub.name())
            .eventhubConsumerGroupName(exampleConsumerGroup.name())
            .deviceMappingJson(serializeJson(
                jsonObject(
                    jsonProperty("templateType", "CollectionContent"),
                    jsonProperty("template", jsonArray(
                    ))
                )))
            .build());

        var exampleMedtechServiceFhirDestination = new MedtechServiceFhirDestination("exampleMedtechServiceFhirDestination", MedtechServiceFhirDestinationArgs.builder()
            .name("examplemtdes")
            .location("east us")
            .medtechServiceId(exampleMedtechService.id())
            .destinationFhirServiceId(exampleFhirService.id())
            .destinationIdentityResolutionType("Create")
            .destinationFhirMappingJson(serializeJson(
                jsonObject(
                    jsonProperty("templateType", "CollectionFhirTemplate"),
                    jsonProperty("template", jsonArray(jsonObject(
                        jsonProperty("templateType", "CodeValueFhir"),
                        jsonProperty("template", jsonObject(
                            jsonProperty("codes", jsonArray(jsonObject(
                                jsonProperty("code", "8867-4"),
                                jsonProperty("system", "http://loinc.org"),
                                jsonProperty("display", "Heart rate")
                            ))),
                            jsonProperty("periodInterval", 60),
                            jsonProperty("typeName", "heartrate"),
                            jsonProperty("value", jsonObject(
                                jsonProperty("defaultPeriod", 5000),
                                jsonProperty("unit", "count/min"),
                                jsonProperty("valueName", "hr"),
                                jsonProperty("valueType", "SampledData")
                            ))
                        ))
                    )))
                )))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-rg
      location: West Europe
  exampleWorkspace:
    type: azure:healthcare:Workspace
    name: example
    properties:
      name: exampleworkspace
      location: ${example.location}
      resourceGroupName: ${example.name}
  exampleEventHubNamespace:
    type: azure:eventhub:EventHubNamespace
    name: example
    properties:
      name: example-ehn
      location: ${example.location}
      resourceGroupName: ${example.name}
      sku: Standard
  exampleEventHub:
    type: azure:eventhub:EventHub
    name: example
    properties:
      name: example-eh
      namespaceName: ${exampleEventHubNamespace.name}
      resourceGroupName: ${example.name}
      partitionCount: 1
      messageRetention: 1
  exampleConsumerGroup:
    type: azure:eventhub:ConsumerGroup
    name: example
    properties:
      name: $default
      namespaceName: ${exampleEventHubNamespace.name}
      eventhubName: ${exampleEventHub.name}
      resourceGroupName: ${example.name}
  exampleFhirService:
    type: azure:healthcare:FhirService
    name: example
    properties:
      name: examplefhir
      location: ${example.location}
      resourceGroupName: ${example.name}
      workspaceId: ${exampleWorkspace.id}
      kind: fhir-R4
      authentication:
        authority: https://login.microsoftonline.com/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        audience: https://examplefhir.fhir.azurehealthcareapis.com
  exampleMedtechService:
    type: azure:healthcare:MedtechService
    name: example
    properties:
      name: examplemt
      workspaceId: ${exampleWorkspace.id}
      location: ${example.location}
      eventhubNamespaceName: ${exampleEventHubNamespace.name}
      eventhubName: ${exampleEventHub.name}
      eventhubConsumerGroupName: ${exampleConsumerGroup.name}
      deviceMappingJson:
        fn::toJSON:
          templateType: CollectionContent
          template: []
  exampleMedtechServiceFhirDestination:
    type: azure:healthcare:MedtechServiceFhirDestination
    name: example
    properties:
      name: examplemtdes
      location: east us
      medtechServiceId: ${exampleMedtechService.id}
      destinationFhirServiceId: ${exampleFhirService.id}
      destinationIdentityResolutionType: Create
      destinationFhirMappingJson:
        fn::toJSON:
          templateType: CollectionFhirTemplate
          template:
            - templateType: CodeValueFhir
              template:
                codes:
                  - code: 8867-4
                    system: http://loinc.org
                    display: Heart rate
                periodInterval: 60
                typeName: heartrate
                value:
                  defaultPeriod: 5000
                  unit: count/min
                  valueName: hr
                  valueType: SampledData
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Healthcare Med Tech Service Fhir Destination can be imported using the resource`id`, e.g.

```sh
$ pulumi import azure:healthcare/medtechServiceFhirDestination:MedtechServiceFhirDestination example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotConnectors/iotconnector1/fhirDestinations/destination1
```

t
destinationFhirMappingJson" RSpecifies the destination Fhir mappings of the Med Tech Service Fhir Destination.
t
destinationFhirServiceId" TSpecifies the destination fhir service id of the Med Tech Service Fhir Destination.
Ï
!destinationIdentityResolutionType" ¥Specifies the destination identity resolution type where the Healthcare Med Tech Service Fhir Destination should be created. Possible values are `Create`, `Lookup`.
Ï
locationB" ¼Specifies the Azure Region where the Healthcare Med Tech Service Fhir Destination should be created. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
ë
medtechServiceId" ÒSpecifies the name of the Healthcare Med Tech Service where the Healthcare Med Tech Service Fhir Destination should exist. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
®
nameB" Specifies the name of the Healthcare Med Tech Service Fhir Destination. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
"t
destinationFhirMappingJson" RSpecifies the destination Fhir mappings of the Med Tech Service Fhir Destination.
"t
destinationFhirServiceId" TSpecifies the destination fhir service id of the Med Tech Service Fhir Destination.
"Ï
!destinationIdentityResolutionType" ¥Specifies the destination identity resolution type where the Healthcare Med Tech Service Fhir Destination should be created. Possible values are `Create`, `Lookup`.
"Í
location" ¼Specifies the Azure Region where the Healthcare Med Tech Service Fhir Destination should be created. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
"ë
medtechServiceId" ÒSpecifies the name of the Healthcare Med Tech Service where the Healthcare Med Tech Service Fhir Destination should exist. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
"¬
name" Specifies the name of the Healthcare Med Tech Service Fhir Destination. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
*÷s
7

healthcareService azure:healthcare/service:ServiceOManages a Healthcare Service.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const current = azure.core.getClientConfig({});
const example = new azure.healthcare.Service("example", {
    name: "uniquefhirname",
    resourceGroupName: "sample-resource-group",
    location: "westus2",
    kind: "fhir-R4",
    cosmosdbThroughput: 2000,
    identity: {
        type: "SystemAssigned",
    },
    accessPolicyObjectIds: current.then(current => current.objectId),
    configurationExportStorageAccountName: "teststorage",
    tags: {
        environment: "testenv",
        purpose: "AcceptanceTests",
    },
    authenticationConfiguration: {
        authority: "https://login.microsoftonline.com/$%7Bdata.azurerm_client_config.current.tenant_id%7D",
        audience: "https://azurehealthcareapis.com/",
        smartProxyEnabled: true,
    },
    corsConfiguration: {
        allowedOrigins: [
            "http://www.example.com",
            "http://www.example2.com",
        ],
        allowedHeaders: [
            "x-tempo-*",
            "x-tempo2-*",
        ],
        allowedMethods: [
            "GET",
            "PUT",
        ],
        maxAgeInSeconds: 500,
        allowCredentials: true,
    },
});
```
```python
import pulumi
import pulumi_azure as azure

current = azure.core.get_client_config()
example = azure.healthcare.Service("example",
    name="uniquefhirname",
    resource_group_name="sample-resource-group",
    location="westus2",
    kind="fhir-R4",
    cosmosdb_throughput=2000,
    identity={
        "type": "SystemAssigned",
    },
    access_policy_object_ids=current.object_id,
    configuration_export_storage_account_name="teststorage",
    tags={
        "environment": "testenv",
        "purpose": "AcceptanceTests",
    },
    authentication_configuration={
        "authority": "https://login.microsoftonline.com/$%7Bdata.azurerm_client_config.current.tenant_id%7D",
        "audience": "https://azurehealthcareapis.com/",
        "smart_proxy_enabled": True,
    },
    cors_configuration={
        "allowed_origins": [
            "http://www.example.com",
            "http://www.example2.com",
        ],
        "allowed_headers": [
            "x-tempo-*",
            "x-tempo2-*",
        ],
        "allowed_methods": [
            "GET",
            "PUT",
        ],
        "max_age_in_seconds": 500,
        "allow_credentials": True,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Healthcare.Service("example", new()
    {
        Name = "uniquefhirname",
        ResourceGroupName = "sample-resource-group",
        Location = "westus2",
        Kind = "fhir-R4",
        CosmosdbThroughput = 2000,
        Identity = new Azure.Healthcare.Inputs.ServiceIdentityArgs
        {
            Type = "SystemAssigned",
        },
        AccessPolicyObjectIds = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
        ConfigurationExportStorageAccountName = "teststorage",
        Tags = 
        {
            { "environment", "testenv" },
            { "purpose", "AcceptanceTests" },
        },
        AuthenticationConfiguration = new Azure.Healthcare.Inputs.ServiceAuthenticationConfigurationArgs
        {
            Authority = "https://login.microsoftonline.com/$%7Bdata.azurerm_client_config.current.tenant_id%7D",
            Audience = "https://azurehealthcareapis.com/",
            SmartProxyEnabled = true,
        },
        CorsConfiguration = new Azure.Healthcare.Inputs.ServiceCorsConfigurationArgs
        {
            AllowedOrigins = new[]
            {
                "http://www.example.com",
                "http://www.example2.com",
            },
            AllowedHeaders = new[]
            {
                "x-tempo-*",
                "x-tempo2-*",
            },
            AllowedMethods = new[]
            {
                "GET",
                "PUT",
            },
            MaxAgeInSeconds = 500,
            AllowCredentials = true,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/healthcare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		_, err = healthcare.NewService(ctx, "example", &healthcare.ServiceArgs{
			Name:               pulumi.String("uniquefhirname"),
			ResourceGroupName:  pulumi.String("sample-resource-group"),
			Location:           pulumi.String("westus2"),
			Kind:               pulumi.String("fhir-R4"),
			CosmosdbThroughput: pulumi.Int(2000),
			Identity: &healthcare.ServiceIdentityArgs{
				Type: pulumi.String("SystemAssigned"),
			},
			AccessPolicyObjectIds:                 pulumi.String(current.ObjectId),
			ConfigurationExportStorageAccountName: pulumi.String("teststorage"),
			Tags: pulumi.StringMap{
				"environment": pulumi.String("testenv"),
				"purpose":     pulumi.String("AcceptanceTests"),
			},
			AuthenticationConfiguration: &healthcare.ServiceAuthenticationConfigurationArgs{
				Authority:         pulumi.String("https://login.microsoftonline.com/$%7Bdata.azurerm_client_config.current.tenant_id%7D"),
				Audience:          pulumi.String("https://azurehealthcareapis.com/"),
				SmartProxyEnabled: pulumi.Bool(true),
			},
			CorsConfiguration: &healthcare.ServiceCorsConfigurationArgs{
				AllowedOrigins: pulumi.StringArray{
					pulumi.String("http://www.example.com"),
					pulumi.String("http://www.example2.com"),
				},
				AllowedHeaders: pulumi.StringArray{
					pulumi.String("x-tempo-*"),
					pulumi.String("x-tempo2-*"),
				},
				AllowedMethods: pulumi.StringArray{
					pulumi.String("GET"),
					pulumi.String("PUT"),
				},
				MaxAgeInSeconds:  pulumi.Int(500),
				AllowCredentials: pulumi.Bool(true),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.healthcare.Service;
import com.pulumi.azure.healthcare.ServiceArgs;
import com.pulumi.azure.healthcare.inputs.ServiceIdentityArgs;
import com.pulumi.azure.healthcare.inputs.ServiceAuthenticationConfigurationArgs;
import com.pulumi.azure.healthcare.inputs.ServiceCorsConfigurationArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new Service("example", ServiceArgs.builder()
            .name("uniquefhirname")
            .resourceGroupName("sample-resource-group")
            .location("westus2")
            .kind("fhir-R4")
            .cosmosdbThroughput("2000")
            .identity(ServiceIdentityArgs.builder()
                .type("SystemAssigned")
                .build())
            .accessPolicyObjectIds(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
            .configurationExportStorageAccountName("teststorage")
            .tags(Map.ofEntries(
                Map.entry("environment", "testenv"),
                Map.entry("purpose", "AcceptanceTests")
            ))
            .authenticationConfiguration(ServiceAuthenticationConfigurationArgs.builder()
                .authority("https://login.microsoftonline.com/$%7Bdata.azurerm_client_config.current.tenant_id%7D")
                .audience("https://azurehealthcareapis.com/")
                .smartProxyEnabled("true")
                .build())
            .corsConfiguration(ServiceCorsConfigurationArgs.builder()
                .allowedOrigins(                
                    "http://www.example.com",
                    "http://www.example2.com")
                .allowedHeaders(                
                    "x-tempo-*",
                    "x-tempo2-*")
                .allowedMethods(                
                    "GET",
                    "PUT")
                .maxAgeInSeconds("500")
                .allowCredentials("true")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:healthcare:Service
    properties:
      name: uniquefhirname
      resourceGroupName: sample-resource-group
      location: westus2
      kind: fhir-R4
      cosmosdbThroughput: '2000'
      identity:
        type: SystemAssigned
      accessPolicyObjectIds: ${current.objectId}
      configurationExportStorageAccountName: teststorage
      tags:
        environment: testenv
        purpose: AcceptanceTests
      authenticationConfiguration:
        authority: https://login.microsoftonline.com/$%7Bdata.azurerm_client_config.current.tenant_id%7D
        audience: https://azurehealthcareapis.com/
        smartProxyEnabled: 'true'
      corsConfiguration:
        allowedOrigins:
          - http://www.example.com
          - http://www.example2.com
        allowedHeaders:
          - x-tempo-*
          - x-tempo2-*
        allowedMethods:
          - GET
          - PUT
        maxAgeInSeconds: '500'
        allowCredentials: 'true'
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Healthcare Service can be imported using the resource`id`, e.g.

```sh
$ pulumi import azure:healthcare/service:Service example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource_group/providers/Microsoft.HealthcareApis/services/service_name
```


accessPolicyObjectIdsB*" í
authenticationConfigurationB:


healthcare"ServiceAuthenticationConfigurationVazure:healthcare/ServiceAuthenticationConfiguration:ServiceAuthenticationConfiguration:An `authentication_configuration` block as defined below.

%configurationExportStorageAccountNameB" hSpecifies the name of the storage account which the operation configuration information is exported to.
¶
corsConfigurationpBn:l
j

healthcareServiceCorsConfigurationBazure:healthcare/ServiceCorsConfiguration:ServiceCorsConfiguration/A `cors_configuration` block as defined below.

 cosmosdbKeyVaultKeyVersionlessIdB" ìA versionless Key Vault Key ID for CMK encryption of the backing database. Changing this forces a new resource to be created.

> **Please Note** In order to use a `Custom Key` from Key Vault for encryption you must grant Azure Cosmos DB Service access to your key vault. For instructions on how to configure your Key Vault correctly please refer to the [product documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-setup-cmk#add-an-access-policy-to-your-azure-key-vault-instance)
~
cosmosdbThroughputB bThe provisioned throughput for the backing database. Range of `400`-`100000`. Defaults to `1000`.

identityUBS:Q
O

healthcareServiceIdentity0azure:healthcare/ServiceIdentity:ServiceIdentity&An `identity` block as defined below.

kindB" xThe type of the service. Values at time of publication are: `fhir`, `fhir-Stu3` and `fhir-R4`. Default value is `fhir`.

locationB" óSpecifies the supported Azure Region where the Service should be created. Changing this forces a new resource to be created.

> **Please Note**: Not all locations support this resource. Some are `West US 2`, `North Central US`, and `UK West`.
£
nameB" The name of the service instance. Used for service endpoint, must be unique within the audience. Changing this forces a new resource to be created.

publicNetworkAccessEnabledB
 dWhether public network access is enabled or disabled for this service instance. Defaults to `true`.

resourceGroupName" rThe name of the Resource Group in which to create the Service. Changing this forces a new resource to be created.
=
tagsB2" -A mapping of tags to assign to the resource.
"
accessPolicyObjectIdsB*" "ê
authenticationConfiguration:


healthcare"ServiceAuthenticationConfigurationVazure:healthcare/ServiceAuthenticationConfiguration:ServiceAuthenticationConfiguration:An `authentication_configuration` block as defined below.
"
%configurationExportStorageAccountNameB" hSpecifies the name of the storage account which the operation configuration information is exported to.
"´
corsConfigurationn:l
j

healthcareServiceCorsConfigurationBazure:healthcare/ServiceCorsConfiguration:ServiceCorsConfiguration/A `cors_configuration` block as defined below.
"
 cosmosdbKeyVaultKeyVersionlessIdB" ìA versionless Key Vault Key ID for CMK encryption of the backing database. Changing this forces a new resource to be created.

> **Please Note** In order to use a `Custom Key` from Key Vault for encryption you must grant Azure Cosmos DB Service access to your key vault. For instructions on how to configure your Key Vault correctly please refer to the [product documentation](https://docs.microsoft.com/azure/cosmos-db/how-to-setup-cmk#add-an-access-policy-to-your-azure-key-vault-instance)
"~
cosmosdbThroughputB bThe provisioned throughput for the backing database. Range of `400`-`100000`. Defaults to `1000`.
"
identityUBS:Q
O

healthcareServiceIdentity0azure:healthcare/ServiceIdentity:ServiceIdentity&An `identity` block as defined below.
"
kindB" xThe type of the service. Values at time of publication are: `fhir`, `fhir-Stu3` and `fhir-R4`. Default value is `fhir`.
"
location" óSpecifies the supported Azure Region where the Service should be created. Changing this forces a new resource to be created.

> **Please Note**: Not all locations support this resource. Some are `West US 2`, `North Central US`, and `UK West`.
"¡
name" The name of the service instance. Used for service endpoint, must be unique within the audience. Changing this forces a new resource to be created.
"
publicNetworkAccessEnabledB
 dWhether public network access is enabled or disabled for this service instance. Defaults to `true`.
"
resourceGroupName" rThe name of the Resource Group in which to create the Service. Changing this forces a new resource to be created.
"=
tagsB2" -A mapping of tags to assign to the resource.
*Þ
=

healthcare	Workspace$azure:healthcare/workspace:Workspace±Manages a Healthcare workspace

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const test = new azure.healthcare.Workspace("test", {
    name: "tfexworkspace",
    resourceGroupName: "tfex-resource_group",
    location: "east us",
});
```
```python
import pulumi
import pulumi_azure as azure

test = azure.healthcare.Workspace("test",
    name="tfexworkspace",
    resource_group_name="tfex-resource_group",
    location="east us")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var test = new Azure.Healthcare.Workspace("test", new()
    {
        Name = "tfexworkspace",
        ResourceGroupName = "tfex-resource_group",
        Location = "east us",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/healthcare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := healthcare.NewWorkspace(ctx, "test", &healthcare.WorkspaceArgs{
			Name:              pulumi.String("tfexworkspace"),
			ResourceGroupName: pulumi.String("tfex-resource_group"),
			Location:          pulumi.String("east us"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.healthcare.Workspace;
import com.pulumi.azure.healthcare.WorkspaceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var test = new Workspace("test", WorkspaceArgs.builder()
            .name("tfexworkspace")
            .resourceGroupName("tfex-resource_group")
            .location("east us")
            .build());

    }
}
```
```yaml
resources:
  test:
    type: azure:healthcare:Workspace
    properties:
      name: tfexworkspace
      resourceGroupName: tfex-resource_group
      location: east us
```
<!--End PulumiCodeChooser -->

## Import

Healthcare Workspaces can be imported using the resource`id`, e.g.

```sh
$ pulumi import azure:healthcare/workspace:Workspace example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1
```


locationB" Specifies the Azure Region where the Healthcare Workspace should be created. Changing this forces a new Healthcare Workspace to be created.
}
nameB" oSpecifies the name of the Healthcare Workspace. Changing this forces a new Healthcare Workspace to be created.
¯
resourceGroupName" Specifies the name of the Resource Group where the Healthcare Workspace should exist. Changing this forces a new Healthcare Workspace to be created.
I
tagsB2" 9A mapping of tags to assign to the Healthcare Workspace.
"
location" Specifies the Azure Region where the Healthcare Workspace should be created. Changing this forces a new Healthcare Workspace to be created.
"{
name" oSpecifies the name of the Healthcare Workspace. Changing this forces a new Healthcare Workspace to be created.
"°
privateEndpointConnections*:


healthcare"WorkspacePrivateEndpointConnectionVazure:healthcare/WorkspacePrivateEndpointConnection:WorkspacePrivateEndpointConnection"¯
resourceGroupName" Specifies the name of the Resource Group where the Healthcare Workspace should exist. Changing this forces a new Healthcare Workspace to be created.
"I
tagsB2" 9A mapping of tags to assign to the Healthcare Workspace.
*°j
#
hpcCacheazure:hpc/cache:Cache=Manages a HPC Cache.

> **Note:** By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
    name: "examplevn",
    addressSpaces: ["10.0.0.0/16"],
    location: example.location,
    resourceGroupName: example.name,
});
const exampleSubnet = new azure.network.Subnet("example", {
    name: "examplesubnet",
    resourceGroupName: example.name,
    virtualNetworkName: exampleVirtualNetwork.name,
    addressPrefixes: ["10.0.1.0/24"],
});
const exampleCache = new azure.hpc.Cache("example", {
    name: "examplehpccache",
    resourceGroupName: example.name,
    location: example.location,
    cacheSizeInGb: 3072,
    subnetId: exampleSubnet.id,
    skuName: "Standard_2G",
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_virtual_network = azure.network.VirtualNetwork("example",
    name="examplevn",
    address_spaces=["10.0.0.0/16"],
    location=example.location,
    resource_group_name=example.name)
example_subnet = azure.network.Subnet("example",
    name="examplesubnet",
    resource_group_name=example.name,
    virtual_network_name=example_virtual_network.name,
    address_prefixes=["10.0.1.0/24"])
example_cache = azure.hpc.Cache("example",
    name="examplehpccache",
    resource_group_name=example.name,
    location=example.location,
    cache_size_in_gb=3072,
    subnet_id=example_subnet.id,
    sku_name="Standard_2G")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    {
        Name = "examplevn",
        AddressSpaces = new[]
        {
            "10.0.0.0/16",
        },
        Location = example.Location,
        ResourceGroupName = example.Name,
    });

    var exampleSubnet = new Azure.Network.Subnet("example", new()
    {
        Name = "examplesubnet",
        ResourceGroupName = example.Name,
        VirtualNetworkName = exampleVirtualNetwork.Name,
        AddressPrefixes = new[]
        {
            "10.0.1.0/24",
        },
    });

    var exampleCache = new Azure.Hpc.Cache("example", new()
    {
        Name = "examplehpccache",
        ResourceGroupName = example.Name,
        Location = example.Location,
        CacheSizeInGb = 3072,
        SubnetId = exampleSubnet.Id,
        SkuName = "Standard_2G",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/hpc"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
			Name: pulumi.String("examplevn"),
			AddressSpaces: pulumi.StringArray{
				pulumi.String("10.0.0.0/16"),
			},
			Location:          example.Location,
			ResourceGroupName: example.Name,
		})
		if err != nil {
			return err
		}
		exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
			Name:               pulumi.String("examplesubnet"),
			ResourceGroupName:  example.Name,
			VirtualNetworkName: exampleVirtualNetwork.Name,
			AddressPrefixes: pulumi.StringArray{
				pulumi.String("10.0.1.0/24"),
			},
		})
		if err != nil {
			return err
		}
		_, err = hpc.NewCache(ctx, "example", &hpc.CacheArgs{
			Name:              pulumi.String("examplehpccache"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			CacheSizeInGb:     pulumi.Int(3072),
			SubnetId:          exampleSubnet.ID(),
			SkuName:           pulumi.String("Standard_2G"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.network.VirtualNetwork;
import com.pulumi.azure.network.VirtualNetworkArgs;
import com.pulumi.azure.network.Subnet;
import com.pulumi.azure.network.SubnetArgs;
import com.pulumi.azure.hpc.Cache;
import com.pulumi.azure.hpc.CacheArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleVirtualNetwork = new VirtualNetwork("exampleVirtualNetwork", VirtualNetworkArgs.builder()
            .name("examplevn")
            .addressSpaces("10.0.0.0/16")
            .location(example.location())
            .resourceGroupName(example.name())
            .build());

        var exampleSubnet = new Subnet("exampleSubnet", SubnetArgs.builder()
            .name("examplesubnet")
            .resourceGroupName(example.name())
            .virtualNetworkName(exampleVirtualNetwork.name())
            .addressPrefixes("10.0.1.0/24")
            .build());

        var exampleCache = new Cache("exampleCache", CacheArgs.builder()
            .name("examplehpccache")
            .resourceGroupName(example.name())
            .location(example.location())
            .cacheSizeInGb(3072)
            .subnetId(exampleSubnet.id())
            .skuName("Standard_2G")
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleVirtualNetwork:
    type: azure:network:VirtualNetwork
    name: example
    properties:
      name: examplevn
      addressSpaces:
        - 10.0.0.0/16
      location: ${example.location}
      resourceGroupName: ${example.name}
  exampleSubnet:
    type: azure:network:Subnet
    name: example
    properties:
      name: examplesubnet
      resourceGroupName: ${example.name}
      virtualNetworkName: ${exampleVirtualNetwork.name}
      addressPrefixes:
        - 10.0.1.0/24
  exampleCache:
    type: azure:hpc:Cache
    name: example
    properties:
      name: examplehpccache
      resourceGroupName: ${example.name}
      location: ${example.location}
      cacheSizeInGb: 3072
      subnetId: ${exampleSubnet.id}
      skuName: Standard_2G
```
<!--End PulumiCodeChooser -->

## Import

HPC Caches can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:hpc/cache:Cache example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroupName/providers/Microsoft.StorageCache/caches/cacheName
```


%automaticallyRotateKeyToLatestEnabledB
 \Specifies whether the HPC Cache automatically rotates Encryption Key to the latest version.
£
cacheSizeInGb The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `21623`, `24576`, `43246`, `49152` and `86491`. Changing this forces a new resource to be created.

> **NOTE:** The `21623`, `43246` and `86491` sizes are restricted to read only resources.
­
defaultAccessPolicybB`:^
\
hpcCacheDefaultAccessPolicy;azure:hpc/CacheDefaultAccessPolicy:CacheDefaultAccessPolicy2A `default_access_policy` block as defined below.
Æ
directoryActiveDirectoryqBo:m
k
hpcCacheDirectoryActiveDirectoryEazure:hpc/CacheDirectoryActiveDirectory:CacheDirectoryActiveDirectory7A `directory_active_directory` block as defined below.
£
directoryFlatFile\BZ:X
V
hpcCacheDirectoryFlatFile7azure:hpc/CacheDirectoryFlatFile:CacheDirectoryFlatFile0A `directory_flat_file` block as defined below.
ý
directoryLdapPBN:L
J
hpcCacheDirectoryLdap/azure:hpc/CacheDirectoryLdap:CacheDirectoryLdapA `directory_ldap` block as defined below.

> **Note:** Only one of `directory_active_directory`, `directory_flat_file` and `directory_ldap` can be set.
[
dns2B0:.
,
hpcCacheDnsazure:hpc/CacheDns:CacheDns A `dns` block as defined below.
¨
identityAB?:=
;
hpcCacheIdentity%azure:hpc/CacheIdentity:CacheIdentityYAn `identity` block as defined below. Changing this forces a new resource to be created.
o
keyVaultKeyIdB" XThe ID of the Key Vault Key which should be used to encrypt the data in this HPC Cache.

locationB" Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.

mtuB The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to `1500`.
\
nameB" NThe name of the HPC Cache. Changing this forces a new resource to be created.
h
	ntpServerB" UThe NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.

resourceGroupName" tThe name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.

skuName" The SKU of HPC Cache to use. Possible values are (ReadWrite) - `Standard_2G`, `Standard_4G` `Standard_8G` or (ReadOnly) - `Standard_L4_5G`, `Standard_L9G`, and `Standard_L16G`. Changing this forces a new resource to be created.

> **NOTE:** The read-only SKUs have restricted cache sizes. `Standard_L4_5G` must be set to `21623`. `Standard_L9G` to `43246` and `Standard_L16G` to `86491`.
k
subnetId" [The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
>
tagsB2" .A mapping of tags to assign to the HPC Cache.
"
%automaticallyRotateKeyToLatestEnabledB
 \Specifies whether the HPC Cache automatically rotates Encryption Key to the latest version.
"£
cacheSizeInGb The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `21623`, `24576`, `43246`, `49152` and `86491`. Changing this forces a new resource to be created.

> **NOTE:** The `21623`, `43246` and `86491` sizes are restricted to read only resources.
"«
defaultAccessPolicy`:^
\
hpcCacheDefaultAccessPolicy;azure:hpc/CacheDefaultAccessPolicy:CacheDefaultAccessPolicy2A `default_access_policy` block as defined below.
"Æ
directoryActiveDirectoryqBo:m
k
hpcCacheDirectoryActiveDirectoryEazure:hpc/CacheDirectoryActiveDirectory:CacheDirectoryActiveDirectory7A `directory_active_directory` block as defined below.
"£
directoryFlatFile\BZ:X
V
hpcCacheDirectoryFlatFile7azure:hpc/CacheDirectoryFlatFile:CacheDirectoryFlatFile0A `directory_flat_file` block as defined below.
"ý
directoryLdapPBN:L
J
hpcCacheDirectoryLdap/azure:hpc/CacheDirectoryLdap:CacheDirectoryLdapA `directory_ldap` block as defined below.

> **Note:** Only one of `directory_active_directory`, `directory_flat_file` and `directory_ldap` can be set.
"[
dns2B0:.
,
hpcCacheDnsazure:hpc/CacheDns:CacheDns A `dns` block as defined below.
"¨
identityAB?:=
;
hpcCacheIdentity%azure:hpc/CacheIdentity:CacheIdentityYAn `identity` block as defined below. Changing this forces a new resource to be created.
"o
keyVaultKeyIdB" XThe ID of the Key Vault Key which should be used to encrypt the data in this HPC Cache.
"
location" Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
"S
mountAddresses*" ;A list of IP Addresses where the HPC Cache can be mounted.
"
mtuB The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to `1500`.
"Z
name" NThe name of the HPC Cache. Changing this forces a new resource to be created.
"h
	ntpServerB" UThe NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.
"
resourceGroupName" tThe name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
"
skuName" The SKU of HPC Cache to use. Possible values are (ReadWrite) - `Standard_2G`, `Standard_4G` `Standard_8G` or (ReadOnly) - `Standard_L4_5G`, `Standard_L9G`, and `Standard_L16G`. Changing this forces a new resource to be created.

> **NOTE:** The read-only SKUs have restricted cache sizes. `Standard_L4_5G` must be set to `21623`. `Standard_L9G` to `43246` and `Standard_L16G` to `86491`.
"k
subnetId" [The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
">
tagsB2" .A mapping of tags to assign to the HPC Cache.
*S
G
hpcCacheAccessPolicy-azure:hpc/cacheAccessPolicy:CacheAccessPolicyëJManages a HPC Cache Access Policy.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
    name: "examplevn",
    addressSpaces: ["10.0.0.0/16"],
    location: example.location,
    resourceGroupName: example.name,
});
const exampleSubnet = new azure.network.Subnet("example", {
    name: "examplesubnet",
    resourceGroupName: example.name,
    virtualNetworkName: exampleVirtualNetwork.name,
    addressPrefixes: ["10.0.1.0/24"],
});
const exampleCache = new azure.hpc.Cache("example", {
    name: "examplehpccache",
    resourceGroupName: example.name,
    location: example.location,
    cacheSizeInGb: 3072,
    subnetId: exampleSubnet.id,
    skuName: "Standard_2G",
});
const exampleCacheAccessPolicy = new azure.hpc.CacheAccessPolicy("example", {
    name: "example",
    hpcCacheId: exampleCache.id,
    accessRules: [{
        scope: "default",
        access: "rw",
    }],
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_virtual_network = azure.network.VirtualNetwork("example",
    name="examplevn",
    address_spaces=["10.0.0.0/16"],
    location=example.location,
    resource_group_name=example.name)
example_subnet = azure.network.Subnet("example",
    name="examplesubnet",
    resource_group_name=example.name,
    virtual_network_name=example_virtual_network.name,
    address_prefixes=["10.0.1.0/24"])
example_cache = azure.hpc.Cache("example",
    name="examplehpccache",
    resource_group_name=example.name,
    location=example.location,
    cache_size_in_gb=3072,
    subnet_id=example_subnet.id,
    sku_name="Standard_2G")
example_cache_access_policy = azure.hpc.CacheAccessPolicy("example",
    name="example",
    hpc_cache_id=example_cache.id,
    access_rules=[{
        "scope": "default",
        "access": "rw",
    }])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    {
        Name = "examplevn",
        AddressSpaces = new[]
        {
            "10.0.0.0/16",
        },
        Location = example.Location,
        ResourceGroupName = example.Name,
    });

    var exampleSubnet = new Azure.Network.Subnet("example", new()
    {
        Name = "examplesubnet",
        ResourceGroupName = example.Name,
        VirtualNetworkName = exampleVirtualNetwork.Name,
        AddressPrefixes = new[]
        {
            "10.0.1.0/24",
        },
    });

    var exampleCache = new Azure.Hpc.Cache("example", new()
    {
        Name = "examplehpccache",
        ResourceGroupName = example.Name,
        Location = example.Location,
        CacheSizeInGb = 3072,
        SubnetId = exampleSubnet.Id,
        SkuName = "Standard_2G",
    });

    var exampleCacheAccessPolicy = new Azure.Hpc.CacheAccessPolicy("example", new()
    {
        Name = "example",
        HpcCacheId = exampleCache.Id,
        AccessRules = new[]
        {
            new Azure.Hpc.Inputs.CacheAccessPolicyAccessRuleArgs
            {
                Scope = "default",
                Access = "rw",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/hpc"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
			Name: pulumi.String("examplevn"),
			AddressSpaces: pulumi.StringArray{
				pulumi.String("10.0.0.0/16"),
			},
			Location:          example.Location,
			ResourceGroupName: example.Name,
		})
		if err != nil {
			return err
		}
		exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
			Name:               pulumi.String("examplesubnet"),
			ResourceGroupName:  example.Name,
			VirtualNetworkName: exampleVirtualNetwork.Name,
			AddressPrefixes: pulumi.StringArray{
				pulumi.String("10.0.1.0/24"),
			},
		})
		if err != nil {
			return err
		}
		exampleCache, err := hpc.NewCache(ctx, "example", &hpc.CacheArgs{
			Name:              pulumi.String("examplehpccache"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			CacheSizeInGb:     pulumi.Int(3072),
			SubnetId:          exampleSubnet.ID(),
			SkuName:           pulumi.String("Standard_2G"),
		})
		if err != nil {
			return err
		}
		_, err = hpc.NewCacheAccessPolicy(ctx, "example", &hpc.CacheAccessPolicyArgs{
			Name:       pulumi.String("example"),
			HpcCacheId: exampleCache.ID(),
			AccessRules: hpc.CacheAccessPolicyAccessRuleArray{
				&hpc.CacheAccessPolicyAccessRuleArgs{
					Scope:  pulumi.String("default"),
					Access: pulumi.String("rw"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.network.VirtualNetwork;
import com.pulumi.azure.network.VirtualNetworkArgs;
import com.pulumi.azure.network.Subnet;
import com.pulumi.azure.network.SubnetArgs;
import com.pulumi.azure.hpc.Cache;
import com.pulumi.azure.hpc.CacheArgs;
import com.pulumi.azure.hpc.CacheAccessPolicy;
import com.pulumi.azure.hpc.CacheAccessPolicyArgs;
import com.pulumi.azure.hpc.inputs.CacheAccessPolicyAccessRuleArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleVirtualNetwork = new VirtualNetwork("exampleVirtualNetwork", VirtualNetworkArgs.builder()
            .name("examplevn")
            .addressSpaces("10.0.0.0/16")
            .location(example.location())
            .resourceGroupName(example.name())
            .build());

        var exampleSubnet = new Subnet("exampleSubnet", SubnetArgs.builder()
            .name("examplesubnet")
            .resourceGroupName(example.name())
            .virtualNetworkName(exampleVirtualNetwork.name())
            .addressPrefixes("10.0.1.0/24")
            .build());

        var exampleCache = new Cache("exampleCache", CacheArgs.builder()
            .name("examplehpccache")
            .resourceGroupName(example.name())
            .location(example.location())
            .cacheSizeInGb(3072)
            .subnetId(exampleSubnet.id())
            .skuName("Standard_2G")
            .build());

        var exampleCacheAccessPolicy = new CacheAccessPolicy("exampleCacheAccessPolicy", CacheAccessPolicyArgs.builder()
            .name("example")
            .hpcCacheId(exampleCache.id())
            .accessRules(CacheAccessPolicyAccessRuleArgs.builder()
                .scope("default")
                .access("rw")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleVirtualNetwork:
    type: azure:network:VirtualNetwork
    name: example
    properties:
      name: examplevn
      addressSpaces:
        - 10.0.0.0/16
      location: ${example.location}
      resourceGroupName: ${example.name}
  exampleSubnet:
    type: azure:network:Subnet
    name: example
    properties:
      name: examplesubnet
      resourceGroupName: ${example.name}
      virtualNetworkName: ${exampleVirtualNetwork.name}
      addressPrefixes:
        - 10.0.1.0/24
  exampleCache:
    type: azure:hpc:Cache
    name: example
    properties:
      name: examplehpccache
      resourceGroupName: ${example.name}
      location: ${example.location}
      cacheSizeInGb: 3072
      subnetId: ${exampleSubnet.id}
      skuName: Standard_2G
  exampleCacheAccessPolicy:
    type: azure:hpc:CacheAccessPolicy
    name: example
    properties:
      name: example
      hpcCacheId: ${exampleCache.id}
      accessRules:
        - scope: default
          access: rw
```
<!--End PulumiCodeChooser -->

## Import

HPC Cache Access Policies can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:hpc/cacheAccessPolicy:CacheAccessPolicy example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/cacheAccessPolicies/policy1
```

½
accessRulesk*i:g
e
hpcCacheAccessPolicyAccessRuleAazure:hpc/CacheAccessPolicyAccessRule:CacheAccessPolicyAccessRuleAOne or more `access_rule` blocks (up to three) as defined below.


hpcCacheId" The ID of the HPC Cache that this HPC Cache Access Policy resides in. Changing this forces a new HPC Cache Access Policy to be created.

nameB" The name which should be used for this HPC Cache Access Policy. Changing this forces a new HPC Cache Access Policy to be created.
"½
accessRulesk*i:g
e
hpcCacheAccessPolicyAccessRuleAazure:hpc/CacheAccessPolicyAccessRule:CacheAccessPolicyAccessRuleAOne or more `access_rule` blocks (up to three) as defined below.
"

hpcCacheId" The ID of the HPC Cache that this HPC Cache Access Policy resides in. Changing this forces a new HPC Cache Access Policy to be created.
"
name" The name which should be used for this HPC Cache Access Policy. Changing this forces a new HPC Cache Access Policy to be created.
*¦"
J
hpcCacheBlobNfsTarget/azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTargetÛManages a Blob NFSv3 Target within a HPC Cache.

> **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.

> **NOTE:**: This resource depends on the NFSv3 enabled Storage Account, which has some prerequisites need to meet. Please checkout: <https://docs.microsoft.com/azure/storage/blobs/network-file-system-protocol-support-how-to?tabs=azure-powershell>.

## Import

HPC Cache Blob NFS Targets can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
```

g
accessPolicyNameB" MThe name of the access policy applied to this target. Defaults to `default`.
§
	cacheName" The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.

nameB" The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
S
namespacePath" >The client-facing file path of the HPC Cache Blob NFS Target.
¯
resourceGroupName" The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
î
storageContainerId" ÓThe Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.

> **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.


usageModel" The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
°
verificationTimerInSecondsB The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
Ç
writeBackTimerInSecondsB ¥The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
"g
accessPolicyNameB" MThe name of the access policy applied to this target. Defaults to `default`.
"§
	cacheName" The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
"
name" The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
"S
namespacePath" >The client-facing file path of the HPC Cache Blob NFS Target.
"¯
resourceGroupName" The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
"î
storageContainerId" ÓThe Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.

> **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
"

usageModel" The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
"°
verificationTimerInSecondsB The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
"Ç
writeBackTimerInSecondsB ¥The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
*Û
A
hpcCacheBlobTarget)azure:hpc/cacheBlobTarget:CacheBlobTarget Manages a Blob Target within a HPC Cache.

> **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";
import * as azuread from "@pulumi/azuread";

const exampleResourceGroup = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
    name: "examplevn",
    addressSpaces: ["10.0.0.0/16"],
    location: exampleResourceGroup.location,
    resourceGroupName: exampleResourceGroup.name,
});
const exampleSubnet = new azure.network.Subnet("example", {
    name: "examplesubnet",
    resourceGroupName: exampleResourceGroup.name,
    virtualNetworkName: exampleVirtualNetwork.name,
    addressPrefixes: ["10.0.1.0/24"],
});
const exampleCache = new azure.hpc.Cache("example", {
    name: "examplehpccache",
    resourceGroupName: exampleResourceGroup.name,
    location: exampleResourceGroup.location,
    cacheSizeInGb: 3072,
    subnetId: exampleSubnet.id,
    skuName: "Standard_2G",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "examplestorgaccount",
    resourceGroupName: exampleResourceGroup.name,
    location: exampleResourceGroup.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "examplestoragecontainer",
    storageAccountName: exampleAccount.name,
});
const example = azuread.getServicePrincipal({
    displayName: "HPC Cache Resource Provider",
});
const exampleStorageAccountContrib = new azure.authorization.Assignment("example_storage_account_contrib", {
    scope: exampleAccount.id,
    roleDefinitionName: "Storage Account Contributor",
    principalId: example.then(example => example.objectId),
});
const exampleStorageBlobDataContrib = new azure.authorization.Assignment("example_storage_blob_data_contrib", {
    scope: exampleAccount.id,
    roleDefinitionName: "Storage Blob Data Contributor",
    principalId: example.then(example => example.objectId),
});
const exampleCacheBlobTarget = new azure.hpc.CacheBlobTarget("example", {
    name: "examplehpccblobtarget",
    resourceGroupName: exampleResourceGroup.name,
    cacheName: exampleCache.name,
    storageContainerId: exampleContainer.resourceManagerId,
    namespacePath: "/blob_storage",
});
```
```python
import pulumi
import pulumi_azure as azure
import pulumi_azuread as azuread

example_resource_group = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_virtual_network = azure.network.VirtualNetwork("example",
    name="examplevn",
    address_spaces=["10.0.0.0/16"],
    location=example_resource_group.location,
    resource_group_name=example_resource_group.name)
example_subnet = azure.network.Subnet("example",
    name="examplesubnet",
    resource_group_name=example_resource_group.name,
    virtual_network_name=example_virtual_network.name,
    address_prefixes=["10.0.1.0/24"])
example_cache = azure.hpc.Cache("example",
    name="examplehpccache",
    resource_group_name=example_resource_group.name,
    location=example_resource_group.location,
    cache_size_in_gb=3072,
    subnet_id=example_subnet.id,
    sku_name="Standard_2G")
example_account = azure.storage.Account("example",
    name="examplestorgaccount",
    resource_group_name=example_resource_group.name,
    location=example_resource_group.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="examplestoragecontainer",
    storage_account_name=example_account.name)
example = azuread.get_service_principal(display_name="HPC Cache Resource Provider")
example_storage_account_contrib = azure.authorization.Assignment("example_storage_account_contrib",
    scope=example_account.id,
    role_definition_name="Storage Account Contributor",
    principal_id=example.object_id)
example_storage_blob_data_contrib = azure.authorization.Assignment("example_storage_blob_data_contrib",
    scope=example_account.id,
    role_definition_name="Storage Blob Data Contributor",
    principal_id=example.object_id)
example_cache_blob_target = azure.hpc.CacheBlobTarget("example",
    name="examplehpccblobtarget",
    resource_group_name=example_resource_group.name,
    cache_name=example_cache.name,
    storage_container_id=example_container.resource_manager_id,
    namespace_path="/blob_storage")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;
using AzureAD = Pulumi.AzureAD;

return await Deployment.RunAsync(() => 
{
    var exampleResourceGroup = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    {
        Name = "examplevn",
        AddressSpaces = new[]
        {
            "10.0.0.0/16",
        },
        Location = exampleResourceGroup.Location,
        ResourceGroupName = exampleResourceGroup.Name,
    });

    var exampleSubnet = new Azure.Network.Subnet("example", new()
    {
        Name = "examplesubnet",
        ResourceGroupName = exampleResourceGroup.Name,
        VirtualNetworkName = exampleVirtualNetwork.Name,
        AddressPrefixes = new[]
        {
            "10.0.1.0/24",
        },
    });

    var exampleCache = new Azure.Hpc.Cache("example", new()
    {
        Name = "examplehpccache",
        ResourceGroupName = exampleResourceGroup.Name,
        Location = exampleResourceGroup.Location,
        CacheSizeInGb = 3072,
        SubnetId = exampleSubnet.Id,
        SkuName = "Standard_2G",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "examplestorgaccount",
        ResourceGroupName = exampleResourceGroup.Name,
        Location = exampleResourceGroup.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "examplestoragecontainer",
        StorageAccountName = exampleAccount.Name,
    });

    var example = AzureAD.GetServicePrincipal.Invoke(new()
    {
        DisplayName = "HPC Cache Resource Provider",
    });

    var exampleStorageAccountContrib = new Azure.Authorization.Assignment("example_storage_account_contrib", new()
    {
        Scope = exampleAccount.Id,
        RoleDefinitionName = "Storage Account Contributor",
        PrincipalId = example.Apply(getServicePrincipalResult => getServicePrincipalResult.ObjectId),
    });

    var exampleStorageBlobDataContrib = new Azure.Authorization.Assignment("example_storage_blob_data_contrib", new()
    {
        Scope = exampleAccount.Id,
        RoleDefinitionName = "Storage Blob Data Contributor",
        PrincipalId = example.Apply(getServicePrincipalResult => getServicePrincipalResult.ObjectId),
    });

    var exampleCacheBlobTarget = new Azure.Hpc.CacheBlobTarget("example", new()
    {
        Name = "examplehpccblobtarget",
        ResourceGroupName = exampleResourceGroup.Name,
        CacheName = exampleCache.Name,
        StorageContainerId = exampleContainer.ResourceManagerId,
        NamespacePath = "/blob_storage",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/authorization"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/hpc"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
			Name: pulumi.String("examplevn"),
			AddressSpaces: pulumi.StringArray{
				pulumi.String("10.0.0.0/16"),
			},
			Location:          exampleResourceGroup.Location,
			ResourceGroupName: exampleResourceGroup.Name,
		})
		if err != nil {
			return err
		}
		exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
			Name:               pulumi.String("examplesubnet"),
			ResourceGroupName:  exampleResourceGroup.Name,
			VirtualNetworkName: exampleVirtualNetwork.Name,
			AddressPrefixes: pulumi.StringArray{
				pulumi.String("10.0.1.0/24"),
			},
		})
		if err != nil {
			return err
		}
		exampleCache, err := hpc.NewCache(ctx, "example", &hpc.CacheArgs{
			Name:              pulumi.String("examplehpccache"),
			ResourceGroupName: exampleResourceGroup.Name,
			Location:          exampleResourceGroup.Location,
			CacheSizeInGb:     pulumi.Int(3072),
			SubnetId:          exampleSubnet.ID(),
			SkuName:           pulumi.String("Standard_2G"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("examplestorgaccount"),
			ResourceGroupName:      exampleResourceGroup.Name,
			Location:               exampleResourceGroup.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:               pulumi.String("examplestoragecontainer"),
			StorageAccountName: exampleAccount.Name,
		})
		if err != nil {
			return err
		}
		example, err := azuread.LookupServicePrincipal(ctx, &azuread.LookupServicePrincipalArgs{
			DisplayName: pulumi.StringRef("HPC Cache Resource Provider"),
		}, nil)
		if err != nil {
			return err
		}
		_, err = authorization.NewAssignment(ctx, "example_storage_account_contrib", &authorization.AssignmentArgs{
			Scope:              exampleAccount.ID(),
			RoleDefinitionName: pulumi.String("Storage Account Contributor"),
			PrincipalId:        pulumi.String(example.ObjectId),
		})
		if err != nil {
			return err
		}
		_, err = authorization.NewAssignment(ctx, "example_storage_blob_data_contrib", &authorization.AssignmentArgs{
			Scope:              exampleAccount.ID(),
			RoleDefinitionName: pulumi.String("Storage Blob Data Contributor"),
			PrincipalId:        pulumi.String(example.ObjectId),
		})
		if err != nil {
			return err
		}
		_, err = hpc.NewCacheBlobTarget(ctx, "example", &hpc.CacheBlobTargetArgs{
			Name:               pulumi.String("examplehpccblobtarget"),
			ResourceGroupName:  exampleResourceGroup.Name,
			CacheName:          exampleCache.Name,
			StorageContainerId: exampleContainer.ResourceManagerId,
			NamespacePath:      pulumi.String("/blob_storage"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.network.VirtualNetwork;
import com.pulumi.azure.network.VirtualNetworkArgs;
import com.pulumi.azure.network.Subnet;
import com.pulumi.azure.network.SubnetArgs;
import com.pulumi.azure.hpc.Cache;
import com.pulumi.azure.hpc.CacheArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azuread.AzureadFunctions;
import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
import com.pulumi.azure.authorization.Assignment;
import com.pulumi.azure.authorization.AssignmentArgs;
import com.pulumi.azure.hpc.CacheBlobTarget;
import com.pulumi.azure.hpc.CacheBlobTargetArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var exampleResourceGroup = new ResourceGroup("exampleResourceGroup", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleVirtualNetwork = new VirtualNetwork("exampleVirtualNetwork", VirtualNetworkArgs.builder()
            .name("examplevn")
            .addressSpaces("10.0.0.0/16")
            .location(exampleResourceGroup.location())
            .resourceGroupName(exampleResourceGroup.name())
            .build());

        var exampleSubnet = new Subnet("exampleSubnet", SubnetArgs.builder()
            .name("examplesubnet")
            .resourceGroupName(exampleResourceGroup.name())
            .virtualNetworkName(exampleVirtualNetwork.name())
            .addressPrefixes("10.0.1.0/24")
            .build());

        var exampleCache = new Cache("exampleCache", CacheArgs.builder()
            .name("examplehpccache")
            .resourceGroupName(exampleResourceGroup.name())
            .location(exampleResourceGroup.location())
            .cacheSizeInGb(3072)
            .subnetId(exampleSubnet.id())
            .skuName("Standard_2G")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("examplestorgaccount")
            .resourceGroupName(exampleResourceGroup.name())
            .location(exampleResourceGroup.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("examplestoragecontainer")
            .storageAccountName(exampleAccount.name())
            .build());

        final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
            .displayName("HPC Cache Resource Provider")
            .build());

        var exampleStorageAccountContrib = new Assignment("exampleStorageAccountContrib", AssignmentArgs.builder()
            .scope(exampleAccount.id())
            .roleDefinitionName("Storage Account Contributor")
            .principalId(example.applyValue(getServicePrincipalResult -> getServicePrincipalResult.objectId()))
            .build());

        var exampleStorageBlobDataContrib = new Assignment("exampleStorageBlobDataContrib", AssignmentArgs.builder()
            .scope(exampleAccount.id())
            .roleDefinitionName("Storage Blob Data Contributor")
            .principalId(example.applyValue(getServicePrincipalResult -> getServicePrincipalResult.objectId()))
            .build());

        var exampleCacheBlobTarget = new CacheBlobTarget("exampleCacheBlobTarget", CacheBlobTargetArgs.builder()
            .name("examplehpccblobtarget")
            .resourceGroupName(exampleResourceGroup.name())
            .cacheName(exampleCache.name())
            .storageContainerId(exampleContainer.resourceManagerId())
            .namespacePath("/blob_storage")
            .build());

    }
}
```
```yaml
resources:
  exampleResourceGroup:
    type: azure:core:ResourceGroup
    name: example
    properties:
      name: example-resources
      location: West Europe
  exampleVirtualNetwork:
    type: azure:network:VirtualNetwork
    name: example
    properties:
      name: examplevn
      addressSpaces:
        - 10.0.0.0/16
      location: ${exampleResourceGroup.location}
      resourceGroupName: ${exampleResourceGroup.name}
  exampleSubnet:
    type: azure:network:Subnet
    name: example
    properties:
      name: examplesubnet
      resourceGroupName: ${exampleResourceGroup.name}
      virtualNetworkName: ${exampleVirtualNetwork.name}
      addressPrefixes:
        - 10.0.1.0/24
  exampleCache:
    type: azure:hpc:Cache
    name: example
    properties:
      name: examplehpccache
      resourceGroupName: ${exampleResourceGroup.name}
      location: ${exampleResourceGroup.location}
      cacheSizeInGb: 3072
      subnetId: ${exampleSubnet.id}
      skuName: Standard_2G
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: examplestorgaccount
      resourceGroupName: ${exampleResourceGroup.name}
      location: ${exampleResourceGroup.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: examplestoragecontainer
      storageAccountName: ${exampleAccount.name}
  exampleStorageAccountContrib:
    type: azure:authorization:Assignment
    name: example_storage_account_contrib
    properties:
      scope: ${exampleAccount.id}
      roleDefinitionName: Storage Account Contributor
      principalId: ${example.objectId}
  exampleStorageBlobDataContrib:
    type: azure:authorization:Assignment
    name: example_storage_blob_data_contrib
    properties:
      scope: ${exampleAccount.id}
      roleDefinitionName: Storage Blob Data Contributor
      principalId: ${example.objectId}
  exampleCacheBlobTarget:
    type: azure:hpc:CacheBlobTarget
    name: example
    properties:
      name: examplehpccblobtarget
      resourceGroupName: ${exampleResourceGroup.name}
      cacheName: ${exampleCache.name}
      storageContainerId: ${exampleContainer.resourceManagerId}
      namespacePath: /blob_storage
variables:
  example:
    fn::invoke:
      function: azuread:getServicePrincipal
      arguments:
        displayName: HPC Cache Resource Provider
```
<!--End PulumiCodeChooser -->

## Import

Blob Targets within an HPC Cache can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:hpc/cacheBlobTarget:CacheBlobTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
```

g
accessPolicyNameB" MThe name of the access policy applied to this target. Defaults to `default`.

	cacheName" yThe name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
h
nameB" ZThe name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
O
namespacePath" :The client-facing file path of the HPC Cache Blob Target.

resourceGroupName" The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
ê
storageContainerId" ÏThe Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.

> **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
"g
accessPolicyNameB" MThe name of the access policy applied to this target. Defaults to `default`.
"
	cacheName" yThe name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
"f
name" ZThe name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
"O
namespacePath" :The client-facing file path of the HPC Cache Blob Target.
"
resourceGroupName" The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
"ê
storageContainerId" ÏThe Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.

> **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
*ÊÞ
>
hpcCacheNfsTarget'azure:hpc/cacheNfsTarget:CacheNfsTargetÀÆManages a NFS Target within a HPC Cache.

> **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";
import * as std from "@pulumi/std";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
    name: "examplevn",
    addressSpaces: ["10.0.0.0/16"],
    location: example.location,
    resourceGroupName: example.name,
});
const exampleHpc = new azure.network.Subnet("example_hpc", {
    name: "examplesubnethpc",
    resourceGroupName: example.name,
    virtualNetworkName: exampleVirtualNetwork.name,
    addressPrefixes: ["10.0.1.0/24"],
});
const exampleCache = new azure.hpc.Cache("example", {
    name: "examplehpccache",
    resourceGroupName: example.name,
    location: example.location,
    cacheSizeInGb: 3072,
    subnetId: exampleHpc.id,
    skuName: "Standard_2G",
});
const exampleVm = new azure.network.Subnet("example_vm", {
    name: "examplesubnetvm",
    resourceGroupName: example.name,
    virtualNetworkName: exampleVirtualNetwork.name,
    addressPrefixes: ["10.0.2.0/24"],
});
const exampleNetworkInterface = new azure.network.NetworkInterface("example", {
    name: "examplenic",
    location: example.location,
    resourceGroupName: example.name,
    ipConfigurations: [{
        name: "internal",
        subnetId: exampleVm.id,
        privateIpAddressAllocation: "Dynamic",
    }],
});
const customData = `#!/bin/bash
sudo -i 
apt-get install -y nfs-kernel-server
mkdir -p /export/a/1
mkdir -p /export/a/2
mkdir -p /export/b
cat << EOF > /etc/exports
/export/a *(rw,fsid=0,insecure,no_subtree_check,async)
/export/b *(rw,fsid=0,insecure,no_subtree_check,async)
EOF
systemctl start nfs-server
exportfs -arv
`;
const exampleLinuxVirtualMachine = new azure.compute.LinuxVirtualMachine("example", {
    name: "examplevm",
    resourceGroupName: example.name,
    location: example.location,
    size: "Standard_F2",
    adminUsername: "adminuser",
    networkInterfaceIds: [exampleNetworkInterface.id],
    adminSshKeys: [{
        username: "adminuser",
        publicKey: std.file({
            input: "~/.ssh/id_rsa.pub",
        }).then(invoke => invoke.result),
    }],
    osDisk: {
        caching: "ReadWrite",
        storageAccountType: "Standard_LRS",
    },
    sourceImageReference: {
        publisher: "Canonical",
        offer: "0001-com-ubuntu-server-jammy",
        sku: "22_04-lts",
        version: "latest",
    },
    customData: std.base64encode({
        input: customData,
    }).then(invoke => invoke.result),
});
const exampleCacheNfsTarget = new azure.hpc.CacheNfsTarget("example", {
    name: "examplehpcnfstarget",
    resourceGroupName: example.name,
    cacheName: exampleCache.name,
    targetHostName: exampleLinuxVirtualMachine.privateIpAddress,
    usageModel: "READ_HEAVY_INFREQ",
    namespaceJunctions: [
        {
            namespacePath: "/nfs/a1",
            nfsExport: "/export/a",
            targetPath: "1",
        },
        {
            namespacePath: "/nfs/b",
            nfsExport: "/export/b",
        },
    ],
});
```
```python
import pulumi
import pulumi_azure as azure
import pulumi_std as std

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_virtual_network = azure.network.VirtualNetwork("example",
    name="examplevn",
    address_spaces=["10.0.0.0/16"],
    location=example.location,
    resource_group_name=example.name)
example_hpc = azure.network.Subnet("example_hpc",
    name="examplesubnethpc",
    resource_group_name=example.name,
    virtual_network_name=example_virtual_network.name,
    address_prefixes=["10.0.1.0/24"])
example_cache = azure.hpc.Cache("example",
    name="examplehpccache",
    resource_group_name=example.name,
    location=example.location,
    cache_size_in_gb=3072,
    subnet_id=example_hpc.id,
    sku_name="Standard_2G")
example_vm = azure.network.Subnet("example_vm",
    name="examplesubnetvm",
    resource_group_name=example.name,
    virtual_network_name=example_virtual_network.name,
    address_prefixes=["10.0.2.0/24"])
example_network_interface = azure.network.NetworkInterface("example",
    name="examplenic",
    location=example.location,
    resource_group_name=example.name,
    ip_configurations=[{
        "name": "internal",
        "subnet_id": example_vm.id,
        "private_ip_address_allocation": "Dynamic",
    }])
custom_data = """#!/bin/bash
sudo -i 
apt-get install -y nfs-kernel-server
mkdir -p /export/a/1
mkdir -p /export/a/2
mkdir -p /export/b
cat << EOF > /etc/exports
/export/a *(rw,fsid=0,insecure,no_subtree_check,async)
/export/b *(rw,fsid=0,insecure,no_subtree_check,async)
EOF
systemctl start nfs-server
exportfs -arv
"""
example_linux_virtual_machine = azure.compute.LinuxVirtualMachine("example",
    name="examplevm",
    resource_group_name=example.name,
    location=example.location,
    size="Standard_F2",
    admin_username="adminuser",
    network_interface_ids=[example_network_interface.id],
    admin_ssh_keys=[{
        "username": "adminuser",
        "public_key": std.file(input="~/.ssh/id_rsa.pub").result,
    }],
    os_disk={
        "caching": "ReadWrite",
        "storage_account_type": "Standard_LRS",
    },
    source_image_reference={
        "publisher": "Canonical",
        "offer": "0001-com-ubuntu-server-jammy",
        "sku": "22_04-lts",
        "version": "latest",
    },
    custom_data=std.base64encode(input=custom_data).result)
example_cache_nfs_target = azure.hpc.CacheNfsTarget("example",
    name="examplehpcnfstarget",
    resource_group_name=example.name,
    cache_name=example_cache.name,
    target_host_name=example_linux_virtual_machine.private_ip_address,
    usage_model="READ_HEAVY_INFREQ",
    namespace_junctions=[
        {
            "namespace_path": "/nfs/a1",
            "nfs_export": "/export/a",
            "target_path": "1",
        },
        {
            "namespace_path": "/nfs/b",
            "nfs_export": "/export/b",
        },
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    {
        Name = "examplevn",
        AddressSpaces = new[]
        {
            "10.0.0.0/16",
        },
        Location = example.Location,
        ResourceGroupName = example.Name,
    });

    var exampleHpc = new Azure.Network.Subnet("example_hpc", new()
    {
        Name = "examplesubnethpc",
        ResourceGroupName = example.Name,
        VirtualNetworkName = exampleVirtualNetwork.Name,
        AddressPrefixes = new[]
        {
            "10.0.1.0/24",
        },
    });

    var exampleCache = new Azure.Hpc.Cache("example", new()
    {
        Name = "examplehpccache",
        ResourceGroupName = example.Name,
        Location = example.Location,
        CacheSizeInGb = 3072,
        SubnetId = exampleHpc.Id,
        SkuName = "Standard_2G",
    });

    var exampleVm = new Azure.Network.Subnet("example_vm", new()
    {
        Name = "examplesubnetvm",
        ResourceGroupName = example.Name,
        VirtualNetworkName = exampleVirtualNetwork.Name,
        AddressPrefixes = new[]
        {
            "10.0.2.0/24",
        },
    });

    var exampleNetworkInterface = new Azure.Network.NetworkInterface("example", new()
    {
        Name = "examplenic",
        Location = example.Location,
        ResourceGroupName = example.Name,
        IpConfigurations = new[]
        {
            new Azure.Network.Inputs.NetworkInterfaceIpConfigurationArgs
            {
                Name = "internal",
                SubnetId = exampleVm.Id,
                PrivateIpAddressAllocation = "Dynamic",
            },
        },
    });

    var customData = @"#!/bin/bash
sudo -i 
apt-get install -y nfs-kernel-server
mkdir -p /export/a/1
mkdir -p /export/a/2
mkdir -p /export/b
cat << EOF > /etc/exports
/export/a *(rw,fsid=0,insecure,no_subtree_check,async)
/export/b *(rw,fsid=0,insecure,no_subtree_check,async)
EOF
systemctl start nfs-server
exportfs -arv
";

    var exampleLinuxVirtualMachine = new Azure.Compute.LinuxVirtualMachine("example", new()
    {
        Name = "examplevm",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Size = "Standard_F2",
        AdminUsername = "adminuser",
        NetworkInterfaceIds = new[]
        {
            exampleNetworkInterface.Id,
        },
        AdminSshKeys = new[]
        {
            new Azure.Compute.Inputs.LinuxVirtualMachineAdminSshKeyArgs
            {
                Username = "adminuser",
                PublicKey = Std.File.Invoke(new()
                {
                    Input = "~/.ssh/id_rsa.pub",
                }).Apply(invoke => invoke.Result),
            },
        },
        OsDisk = new Azure.Compute.Inputs.LinuxVirtualMachineOsDiskArgs
        {
            Caching = "ReadWrite",
            StorageAccountType = "Standard_LRS",
        },
        SourceImageReference = new Azure.Compute.Inputs.LinuxVirtualMachineSourceImageReferenceArgs
        {
            Publisher = "Canonical",
            Offer = "0001-com-ubuntu-server-jammy",
            Sku = "22_04-lts",
            Version = "latest",
        },
        CustomData = Std.Base64encode.Invoke(new()
        {
            Input = customData,
        }).Apply(invoke => invoke.Result),
    });

    var exampleCacheNfsTarget = new Azure.Hpc.CacheNfsTarget("example", new()
    {
        Name = "examplehpcnfstarget",
        ResourceGroupName = example.Name,
        CacheName = exampleCache.Name,
        TargetHostName = exampleLinuxVirtualMachine.PrivateIpAddress,
        UsageModel = "READ_HEAVY_INFREQ",
        NamespaceJunctions = new[]
        {
            new Azure.Hpc.Inputs.CacheNfsTargetNamespaceJunctionArgs
            {
                NamespacePath = "/nfs/a1",
                NfsExport = "/export/a",
                TargetPath = "1",
            },
            new Azure.Hpc.Inputs.CacheNfsTargetNamespaceJunctionArgs
            {
                NamespacePath = "/nfs/b",
                NfsExport = "/export/b",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/compute"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/hpc"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
			Name: pulumi.String("examplevn"),
			AddressSpaces: pulumi.StringArray{
				pulumi.String("10.0.0.0/16"),
			},
			Location:          example.Location,
			ResourceGroupName: example.Name,
		})
		if err != nil {
			return err
		}
		exampleHpc, err := network.NewSubnet(ctx, "example_hpc", &network.SubnetArgs{
			Name:               pulumi.String("examplesubnethpc"),
			ResourceGroupName:  example.Name,
			VirtualNetworkName: exampleVirtualNetwork.Name,
			AddressPrefixes: pulumi.StringArray{
				pulumi.String("10.0.1.0/24"),
			},
		})
		if err != nil {
			return err
		}
		exampleCache, err := hpc.NewCache(ctx, "example", &hpc.CacheArgs{
			Name:              pulumi.String("examplehpccache"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			CacheSizeInGb:     pulumi.Int(3072),
			SubnetId:          exampleHpc.ID(),
			SkuName:           pulumi.String("Standard_2G"),
		})
		if err != nil {
			return err
		}
		exampleVm, err := network.NewSubnet(ctx, "example_vm", &network.SubnetArgs{
			Name:               pulumi.String("examplesubnetvm"),
			ResourceGroupName:  example.Name,
			VirtualNetworkName: exampleVirtualNetwork.Name,
			AddressPrefixes: pulumi.StringArray{
				pulumi.String("10.0.2.0/24"),
			},
		})
		if err != nil {
			return err
		}
		exampleNetworkInterface, err := network.NewNetworkInterface(ctx, "example", &network.NetworkInterfaceArgs{
			Name:              pulumi.String("examplenic"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
				&network.NetworkInterfaceIpConfigurationArgs{
					Name:                       pulumi.String("internal"),
					SubnetId:                   exampleVm.ID(),
					PrivateIpAddressAllocation: pulumi.String("Dynamic"),
				},
			},
		})
		if err != nil {
			return err
		}
		customData := `#!/bin/bash
sudo -i 
apt-get install -y nfs-kernel-server
mkdir -p /export/a/1
mkdir -p /export/a/2
mkdir -p /export/b
cat << EOF > /etc/exports
/export/a *(rw,fsid=0,insecure,no_subtree_check,async)
/export/b *(rw,fsid=0,insecure,no_subtree_check,async)
EOF
systemctl start nfs-server
exportfs -arv
`
		invokeFile, err := std.File(ctx, &std.FileArgs{
			Input: "~/.ssh/id_rsa.pub",
		}, nil)
		if err != nil {
			return err
		}
		invokeBase64encode1, err := std.Base64encode(ctx, &std.Base64encodeArgs{
			Input: customData,
		}, nil)
		if err != nil {
			return err
		}
		exampleLinuxVirtualMachine, err := compute.NewLinuxVirtualMachine(ctx, "example", &compute.LinuxVirtualMachineArgs{
			Name:              pulumi.String("examplevm"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Size:              pulumi.String("Standard_F2"),
			AdminUsername:     pulumi.String("adminuser"),
			NetworkInterfaceIds: pulumi.StringArray{
				exampleNetworkInterface.ID(),
			},
			AdminSshKeys: compute.LinuxVirtualMachineAdminSshKeyArray{
				&compute.LinuxVirtualMachineAdminSshKeyArgs{
					Username:  pulumi.String("adminuser"),
					PublicKey: pulumi.String(invokeFile.Result),
				},
			},
			OsDisk: &compute.LinuxVirtualMachineOsDiskArgs{
				Caching:            pulumi.String("ReadWrite"),
				StorageAccountType: pulumi.String("Standard_LRS"),
			},
			SourceImageReference: &compute.LinuxVirtualMachineSourceImageReferenceArgs{
				Publisher: pulumi.String("Canonical"),
				Offer:     pulumi.String("0001-com-ubuntu-server-jammy"),
				Sku:       pulumi.String("22_04-lts"),
				Version:   pulumi.String("latest"),
			},
			CustomData: pulumi.String(invokeBase64encode1.Result),
		})
		if err != nil {
			return err
		}
		_, err = hpc.NewCacheNfsTarget(ctx, "example", &hpc.CacheNfsTargetArgs{
			Name:              pulumi.String("examplehpcnfstarget"),
			ResourceGroupName: example.Name,
			CacheName:         exampleCache.Name,
			TargetHostName:    exampleLinuxVirtualMachine.PrivateIpAddress,
			UsageModel:        pulumi.String("READ_HEAVY_INFREQ"),
			NamespaceJunctions: hpc.CacheNfsTargetNamespaceJunctionArray{
				&hpc.CacheNfsTargetNamespaceJunctionArgs{
					NamespacePath: pulumi.String("/nfs/a1"),
					NfsExport:     pulumi.String("/export/a"),
					TargetPath:    pulumi.String("1"),
				},
				&hpc.CacheNfsTargetNamespaceJunctionArgs{
					NamespacePath: pulumi.String("/nfs/b"),
					NfsExport:     pulumi.String("/export/b"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.network.VirtualNetwork;
import com.pulumi.azure.network.VirtualNetworkArgs;
import com.pulumi.azure.network.Subnet;
import com.pulumi.azure.network.SubnetArgs;
import com.pulumi.azure.hpc.Cache;
import com.pulumi.azure.hpc.CacheArgs;
import com.pulumi.azure.network.NetworkInterface;
import com.pulumi.azure.network.NetworkInterfaceArgs;
import com.pulumi.azure.network.inputs.NetworkInterfaceIpConfigurationArgs;
import com.pulumi.azure.compute.LinuxVirtualMachine;
import com.pulumi.azure.compute.LinuxVirtualMachineArgs;
import com.pulumi.azure.compute.inputs.LinuxVirtualMachineAdminSshKeyArgs;
import com.pulumi.azure.compute.inputs.LinuxVirtualMachineOsDiskArgs;
import com.pulumi.azure.compute.inputs.LinuxVirtualMachineSourceImageReferenceArgs;
import com.pulumi.azure.hpc.CacheNfsTarget;
import com.pulumi.azure.hpc.CacheNfsTargetArgs;
import com.pulumi.azure.hpc.inputs.CacheNfsTargetNamespaceJunctionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleVirtualNetwork = new VirtualNetwork("exampleVirtualNetwork", VirtualNetworkArgs.builder()
            .name("examplevn")
            .addressSpaces("10.0.0.0/16")
            .location(example.location())
            .resourceGroupName(example.name())
            .build());

        var exampleHpc = new Subnet("exampleHpc", SubnetArgs.builder()
            .name("examplesubnethpc")
            .resourceGroupName(example.name())
            .virtualNetworkName(exampleVirtualNetwork.name())
            .addressPrefixes("10.0.1.0/24")
            .build());

        var exampleCache = new Cache("exampleCache", CacheArgs.builder()
            .name("examplehpccache")
            .resourceGroupName(example.name())
            .location(example.location())
            .cacheSizeInGb(3072)
            .subnetId(exampleHpc.id())
            .skuName("Standard_2G")
            .build());

        var exampleVm = new Subnet("exampleVm", SubnetArgs.builder()
            .name("examplesubnetvm")
            .resourceGroupName(example.name())
            .virtualNetworkName(exampleVirtualNetwork.name())
            .addressPrefixes("10.0.2.0/24")
            .build());

        var exampleNetworkInterface = new NetworkInterface("exampleNetworkInterface", NetworkInterfaceArgs.builder()
            .name("examplenic")
            .location(example.location())
            .resourceGroupName(example.name())
            .ipConfigurations(NetworkInterfaceIpConfigurationArgs.builder()
                .name("internal")
                .subnetId(exampleVm.id())
                .privateIpAddressAllocation("Dynamic")
                .build())
            .build());

        final var customData = """
#!/bin/bash
sudo -i 
apt-get install -y nfs-kernel-server
mkdir -p /export/a/1
mkdir -p /export/a/2
mkdir -p /export/b
cat << EOF > /etc/exports
/export/a *(rw,fsid=0,insecure,no_subtree_check,async)
/export/b *(rw,fsid=0,insecure,no_subtree_check,async)
EOF
systemctl start nfs-server
exportfs -arv
        """;

        var exampleLinuxVirtualMachine = new LinuxVirtualMachine("exampleLinuxVirtualMachine", LinuxVirtualMachineArgs.builder()
            .name("examplevm")
            .resourceGroupName(example.name())
            .location(example.location())
            .size("Standard_F2")
            .adminUsername("adminuser")
            .networkInterfaceIds(exampleNetworkInterface.id())
            .adminSshKeys(LinuxVirtualMachineAdminSshKeyArgs.builder()
                .username("adminuser")
                .publicKey(StdFunctions.file(FileArgs.builder()
                    .input("~/.ssh/id_rsa.pub")
                    .build()).result())
                .build())
            .osDisk(LinuxVirtualMachineOsDiskArgs.builder()
                .caching("ReadWrite")
                .storageAccountType("Standard_LRS")
                .build())
            .sourceImageReference(LinuxVirtualMachineSourceImageReferenceArgs.builder()
                .publisher("Canonical")
                .offer("0001-com-ubuntu-server-jammy")
                .sku("22_04-lts")
                .version("latest")
                .build())
            .customData(StdFunctions.base64encode(Base64encodeArgs.builder()
                .input(customData)
                .build()).result())
            .build());

        var exampleCacheNfsTarget = new CacheNfsTarget("exampleCacheNfsTarget", CacheNfsTargetArgs.builder()
            .name("examplehpcnfstarget")
            .resourceGroupName(example.name())
            .cacheName(exampleCache.name())
            .targetHostName(exampleLinuxVirtualMachine.privateIpAddress())
            .usageModel("READ_HEAVY_INFREQ")
            .namespaceJunctions(            
                CacheNfsTargetNamespaceJunctionArgs.builder()
                    .namespacePath("/nfs/a1")
                    .nfsExport("/export/a")
                    .targetPath("1")
                    .build(),
                CacheNfsTargetNamespaceJunctionArgs.builder()
                    .namespacePath("/nfs/b")
                    .nfsExport("/export/b")
                    .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleVirtualNetwork:
    type: azure:network:VirtualNetwork
    name: example
    properties:
      name: examplevn
      addressSpaces:
        - 10.0.0.0/16
      location: ${example.location}
      resourceGroupName: ${example.name}
  exampleHpc:
    type: azure:network:Subnet
    name: example_hpc
    properties:
      name: examplesubnethpc
      resourceGroupName: ${example.name}
      virtualNetworkName: ${exampleVirtualNetwork.name}
      addressPrefixes:
        - 10.0.1.0/24
  exampleCache:
    type: azure:hpc:Cache
    name: example
    properties:
      name: examplehpccache
      resourceGroupName: ${example.name}
      location: ${example.location}
      cacheSizeInGb: 3072
      subnetId: ${exampleHpc.id}
      skuName: Standard_2G
  exampleVm:
    type: azure:network:Subnet
    name: example_vm
    properties:
      name: examplesubnetvm
      resourceGroupName: ${example.name}
      virtualNetworkName: ${exampleVirtualNetwork.name}
      addressPrefixes:
        - 10.0.2.0/24
  exampleNetworkInterface:
    type: azure:network:NetworkInterface
    name: example
    properties:
      name: examplenic
      location: ${example.location}
      resourceGroupName: ${example.name}
      ipConfigurations:
        - name: internal
          subnetId: ${exampleVm.id}
          privateIpAddressAllocation: Dynamic
  exampleLinuxVirtualMachine:
    type: azure:compute:LinuxVirtualMachine
    name: example
    properties:
      name: examplevm
      resourceGroupName: ${example.name}
      location: ${example.location}
      size: Standard_F2
      adminUsername: adminuser
      networkInterfaceIds:
        - ${exampleNetworkInterface.id}
      adminSshKeys:
        - username: adminuser
          publicKey:
            fn::invoke:
              function: std:file
              arguments:
                input: ~/.ssh/id_rsa.pub
              return: result
      osDisk:
        caching: ReadWrite
        storageAccountType: Standard_LRS
      sourceImageReference:
        publisher: Canonical
        offer: 0001-com-ubuntu-server-jammy
        sku: 22_04-lts
        version: latest
      customData:
        fn::invoke:
          function: std:base64encode
          arguments:
            input: ${customData}
          return: result
  exampleCacheNfsTarget:
    type: azure:hpc:CacheNfsTarget
    name: example
    properties:
      name: examplehpcnfstarget
      resourceGroupName: ${example.name}
      cacheName: ${exampleCache.name}
      targetHostName: ${exampleLinuxVirtualMachine.privateIpAddress}
      usageModel: READ_HEAVY_INFREQ
      namespaceJunctions:
        - namespacePath: /nfs/a1
          nfsExport: /export/a
          targetPath: '1'
        - namespacePath: /nfs/b
          nfsExport: /export/b
variables:
  customData: "#!/bin/bash\nsudo -i \napt-get install -y nfs-kernel-server\nmkdir -p /export/a/1\nmkdir -p /export/a/2\nmkdir -p /export/b\ncat << EOF > /etc/exports\n/export/a *(rw,fsid=0,insecure,no_subtree_check,async)\n/export/b *(rw,fsid=0,insecure,no_subtree_check,async)\nEOF\nsystemctl start nfs-server\nexportfs -arv\n"
```
<!--End PulumiCodeChooser -->

## Import

NFS Target within a HPC Cache can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:hpc/cacheNfsTarget:CacheNfsTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
```


	cacheName" xThe name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
g
nameB" YThe name of the HPC Cache NFS Target. Changing this forces a new resource to be created.

namespaceJunctionsw*u:s
q
hpcCacheNfsTargetNamespaceJunctionIazure:hpc/CacheNfsTargetNamespaceJunction:CacheNfsTargetNamespaceJunctionCan be specified multiple times to define multiple `namespace_junction`. Each `namespace_junction` block supports fields documented below.

resourceGroupName" The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.

targetHostName" The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.


usageModel" The type of usage of the HPC Cache NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
°
verificationTimerInSecondsB The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
Ç
writeBackTimerInSecondsB ¥The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
"
	cacheName" xThe name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
"e
name" YThe name of the HPC Cache NFS Target. Changing this forces a new resource to be created.
"
namespaceJunctionsw*u:s
q
hpcCacheNfsTargetNamespaceJunctionIazure:hpc/CacheNfsTargetNamespaceJunction:CacheNfsTargetNamespaceJunctionCan be specified multiple times to define multiple `namespace_junction`. Each `namespace_junction` block supports fields documented below.
"
resourceGroupName" The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.
"
targetHostName" The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
"

usageModel" The type of usage of the HPC Cache NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
"°
verificationTimerInSecondsB The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
"Ç
writeBackTimerInSecondsB ¥The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
*ÈÉ
&
hsmModuleazure:hsm/module:Module¬Manages a Dedicated Hardware Security Module.

> **Note:** Before using this resource, it's required to submit the request of registering the providers and features with Azure CLI `az provider register --namespace Microsoft.HardwareSecurityModules && az feature register --namespace Microsoft.HardwareSecurityModules --name AzureDedicatedHSM && az provider register --namespace Microsoft.Network && az feature register --namespace Microsoft.Network --name AllowBaremetalServers` and ask service team (hsmrequest@microsoft.com) to approve. See more details from <https://docs.microsoft.com/azure/dedicated-hsm/tutorial-deploy-hsm-cli#prerequisites>.

> **Note:** If the quota is not enough in some region, please submit the quota request to service team.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleVirtualNetwork = new azure.network.VirtualNetwork("example", {
    name: "example-vnet",
    addressSpaces: ["10.2.0.0/16"],
    location: example.location,
    resourceGroupName: example.name,
});
const exampleSubnet = new azure.network.Subnet("example", {
    name: "example-compute",
    resourceGroupName: example.name,
    virtualNetworkName: exampleVirtualNetwork.name,
    addressPrefixes: ["10.2.0.0/24"],
});
const example2 = new azure.network.Subnet("example2", {
    name: "example-hsmsubnet",
    resourceGroupName: example.name,
    virtualNetworkName: exampleVirtualNetwork.name,
    addressPrefixes: ["10.2.1.0/24"],
    delegations: [{
        name: "first",
        serviceDelegation: {
            name: "Microsoft.HardwareSecurityModules/dedicatedHSMs",
            actions: [
                "Microsoft.Network/networkinterfaces/*",
                "Microsoft.Network/virtualNetworks/subnets/join/action",
            ],
        },
    }],
});
const example3 = new azure.network.Subnet("example3", {
    name: "gatewaysubnet",
    resourceGroupName: example.name,
    virtualNetworkName: exampleVirtualNetwork.name,
    addressPrefixes: ["10.2.255.0/26"],
});
const examplePublicIp = new azure.network.PublicIp("example", {
    name: "example-pip",
    location: example.location,
    resourceGroupName: example.name,
    allocationMethod: "Static",
});
const exampleVirtualNetworkGateway = new azure.network.VirtualNetworkGateway("example", {
    name: "example-vnetgateway",
    location: example.location,
    resourceGroupName: example.name,
    type: "ExpressRoute",
    vpnType: "PolicyBased",
    sku: "Standard",
    ipConfigurations: [{
        publicIpAddressId: examplePublicIp.id,
        privateIpAddressAllocation: "Dynamic",
        subnetId: example3.id,
    }],
});
const exampleModule = new azure.hsm.Module("example", {
    name: "example-hsm",
    location: example.location,
    resourceGroupName: example.name,
    skuName: "payShield10K_LMK1_CPS60",
    managementNetworkProfile: {
        networkInterfacePrivateIpAddresses: ["10.2.1.7"],
        subnetId: example2.id,
    },
    networkProfile: {
        networkInterfacePrivateIpAddresses: ["10.2.1.8"],
        subnetId: example2.id,
    },
    stampId: "stamp2",
    tags: {
        env: "Test",
    },
}, {
    dependsOn: [exampleVirtualNetworkGateway],
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_virtual_network = azure.network.VirtualNetwork("example",
    name="example-vnet",
    address_spaces=["10.2.0.0/16"],
    location=example.location,
    resource_group_name=example.name)
example_subnet = azure.network.Subnet("example",
    name="example-compute",
    resource_group_name=example.name,
    virtual_network_name=example_virtual_network.name,
    address_prefixes=["10.2.0.0/24"])
example2 = azure.network.Subnet("example2",
    name="example-hsmsubnet",
    resource_group_name=example.name,
    virtual_network_name=example_virtual_network.name,
    address_prefixes=["10.2.1.0/24"],
    delegations=[{
        "name": "first",
        "service_delegation": {
            "name": "Microsoft.HardwareSecurityModules/dedicatedHSMs",
            "actions": [
                "Microsoft.Network/networkinterfaces/*",
                "Microsoft.Network/virtualNetworks/subnets/join/action",
            ],
        },
    }])
example3 = azure.network.Subnet("example3",
    name="gatewaysubnet",
    resource_group_name=example.name,
    virtual_network_name=example_virtual_network.name,
    address_prefixes=["10.2.255.0/26"])
example_public_ip = azure.network.PublicIp("example",
    name="example-pip",
    location=example.location,
    resource_group_name=example.name,
    allocation_method="Static")
example_virtual_network_gateway = azure.network.VirtualNetworkGateway("example",
    name="example-vnetgateway",
    location=example.location,
    resource_group_name=example.name,
    type="ExpressRoute",
    vpn_type="PolicyBased",
    sku="Standard",
    ip_configurations=[{
        "public_ip_address_id": example_public_ip.id,
        "private_ip_address_allocation": "Dynamic",
        "subnet_id": example3.id,
    }])
example_module = azure.hsm.Module("example",
    name="example-hsm",
    location=example.location,
    resource_group_name=example.name,
    sku_name="payShield10K_LMK1_CPS60",
    management_network_profile={
        "network_interface_private_ip_addresses": ["10.2.1.7"],
        "subnet_id": example2.id,
    },
    network_profile={
        "network_interface_private_ip_addresses": ["10.2.1.8"],
        "subnet_id": example2.id,
    },
    stamp_id="stamp2",
    tags={
        "env": "Test",
    },
    opts = pulumi.ResourceOptions(depends_on=[example_virtual_network_gateway]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    {
        Name = "example-vnet",
        AddressSpaces = new[]
        {
            "10.2.0.0/16",
        },
        Location = example.Location,
        ResourceGroupName = example.Name,
    });

    var exampleSubnet = new Azure.Network.Subnet("example", new()
    {
        Name = "example-compute",
        ResourceGroupName = example.Name,
        VirtualNetworkName = exampleVirtualNetwork.Name,
        AddressPrefixes = new[]
        {
            "10.2.0.0/24",
        },
    });

    var example2 = new Azure.Network.Subnet("example2", new()
    {
        Name = "example-hsmsubnet",
        ResourceGroupName = example.Name,
        VirtualNetworkName = exampleVirtualNetwork.Name,
        AddressPrefixes = new[]
        {
            "10.2.1.0/24",
        },
        Delegations = new[]
        {
            new Azure.Network.Inputs.SubnetDelegationArgs
            {
                Name = "first",
                ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
                {
                    Name = "Microsoft.HardwareSecurityModules/dedicatedHSMs",
                    Actions = new[]
                    {
                        "Microsoft.Network/networkinterfaces/*",
                        "Microsoft.Network/virtualNetworks/subnets/join/action",
                    },
                },
            },
        },
    });

    var example3 = new Azure.Network.Subnet("example3", new()
    {
        Name = "gatewaysubnet",
        ResourceGroupName = example.Name,
        VirtualNetworkName = exampleVirtualNetwork.Name,
        AddressPrefixes = new[]
        {
            "10.2.255.0/26",
        },
    });

    var examplePublicIp = new Azure.Network.PublicIp("example", new()
    {
        Name = "example-pip",
        Location = example.Location,
        ResourceGroupName = example.Name,
        AllocationMethod = "Static",
    });

    var exampleVirtualNetworkGateway = new Azure.Network.VirtualNetworkGateway("example", new()
    {
        Name = "example-vnetgateway",
        Location = example.Location,
        ResourceGroupName = example.Name,
        Type = "ExpressRoute",
        VpnType = "PolicyBased",
        Sku = "Standard",
        IpConfigurations = new[]
        {
            new Azure.Network.Inputs.VirtualNetworkGatewayIpConfigurationArgs
            {
                PublicIpAddressId = examplePublicIp.Id,
                PrivateIpAddressAllocation = "Dynamic",
                SubnetId = example3.Id,
            },
        },
    });

    var exampleModule = new Azure.Hsm.Module("example", new()
    {
        Name = "example-hsm",
        Location = example.Location,
        ResourceGroupName = example.Name,
        SkuName = "payShield10K_LMK1_CPS60",
        ManagementNetworkProfile = new Azure.Hsm.Inputs.ModuleManagementNetworkProfileArgs
        {
            NetworkInterfacePrivateIpAddresses = new[]
            {
                "10.2.1.7",
            },
            SubnetId = example2.Id,
        },
        NetworkProfile = new Azure.Hsm.Inputs.ModuleNetworkProfileArgs
        {
            NetworkInterfacePrivateIpAddresses = new[]
            {
                "10.2.1.8",
            },
            SubnetId = example2.Id,
        },
        StampId = "stamp2",
        Tags = 
        {
            { "env", "Test" },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            exampleVirtualNetworkGateway,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/hsm"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
			Name: pulumi.String("example-vnet"),
			AddressSpaces: pulumi.StringArray{
				pulumi.String("10.2.0.0/16"),
			},
			Location:          example.Location,
			ResourceGroupName: example.Name,
		})
		if err != nil {
			return err
		}
		_, err = network.NewSubnet(ctx, "example", &network.SubnetArgs{
			Name:               pulumi.String("example-compute"),
			ResourceGroupName:  example.Name,
			VirtualNetworkName: exampleVirtualNetwork.Name,
			AddressPrefixes: pulumi.StringArray{
				pulumi.String("10.2.0.0/24"),
			},
		})
		if err != nil {
			return err
		}
		example2, err := network.NewSubnet(ctx, "example2", &network.SubnetArgs{
			Name:               pulumi.String("example-hsmsubnet"),
			ResourceGroupName:  example.Name,
			VirtualNetworkName: exampleVirtualNetwork.Name,
			AddressPrefixes: pulumi.StringArray{
				pulumi.String("10.2.1.0/24"),
			},
			Delegations: network.SubnetDelegationArray{
				&network.SubnetDelegationArgs{
					Name: pulumi.String("first"),
					ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
						Name: pulumi.String("Microsoft.HardwareSecurityModules/dedicatedHSMs"),
						Actions: pulumi.StringArray{
							pulumi.String("Microsoft.Network/networkinterfaces/*"),
							pulumi.String("Microsoft.Network/virtualNetworks/subnets/join/action"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		example3, err := network.NewSubnet(ctx, "example3", &network.SubnetArgs{
			Name:               pulumi.String("gatewaysubnet"),
			ResourceGroupName:  example.Name,
			VirtualNetworkName: exampleVirtualNetwork.Name,
			AddressPrefixes: pulumi.StringArray{
				pulumi.String("10.2.255.0/26"),
			},
		})
		if err != nil {
			return err
		}
		examplePublicIp, err := network.NewPublicIp(ctx, "example", &network.PublicIpArgs{
			Name:              pulumi.String("example-pip"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			AllocationMethod:  pulumi.String("Static"),
		})
		if err != nil {
			return err
		}
		exampleVirtualNetworkGateway, err := network.NewVirtualNetworkGateway(ctx, "example", &network.VirtualNetworkGatewayArgs{
			Name:              pulumi.String("example-vnetgateway"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			Type:              pulumi.String("ExpressRoute"),
			VpnType:           pulumi.String("PolicyBased"),
			Sku:               pulumi.String("Standard"),
			IpConfigurations: network.VirtualNetworkGatewayIpConfigurationArray{
				&network.VirtualNetworkGatewayIpConfigurationArgs{
					PublicIpAddressId:          examplePublicIp.ID(),
					PrivateIpAddressAllocation: pulumi.String("Dynamic"),
					SubnetId:                   example3.ID(),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = hsm.NewModule(ctx, "example", &hsm.ModuleArgs{
			Name:              pulumi.String("example-hsm"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			SkuName:           pulumi.String("payShield10K_LMK1_CPS60"),
			ManagementNetworkProfile: &hsm.ModuleManagementNetworkProfileArgs{
				NetworkInterfacePrivateIpAddresses: pulumi.StringArray{
					pulumi.String("10.2.1.7"),
				},
				SubnetId: example2.ID(),
			},
			NetworkProfile: &hsm.ModuleNetworkProfileArgs{
				NetworkInterfacePrivateIpAddresses: pulumi.StringArray{
					pulumi.String("10.2.1.8"),
				},
				SubnetId: example2.ID(),
			},
			StampId: pulumi.String("stamp2"),
			Tags: pulumi.StringMap{
				"env": pulumi.String("Test"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			exampleVirtualNetworkGateway,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.network.VirtualNetwork;
import com.pulumi.azure.network.VirtualNetworkArgs;
import com.pulumi.azure.network.Subnet;
import com.pulumi.azure.network.SubnetArgs;
import com.pulumi.azure.network.inputs.SubnetDelegationArgs;
import com.pulumi.azure.network.inputs.SubnetDelegationServiceDelegationArgs;
import com.pulumi.azure.network.PublicIp;
import com.pulumi.azure.network.PublicIpArgs;
import com.pulumi.azure.network.VirtualNetworkGateway;
import com.pulumi.azure.network.VirtualNetworkGatewayArgs;
import com.pulumi.azure.network.inputs.VirtualNetworkGatewayIpConfigurationArgs;
import com.pulumi.azure.hsm.Module;
import com.pulumi.azure.hsm.ModuleArgs;
import com.pulumi.azure.hsm.inputs.ModuleManagementNetworkProfileArgs;
import com.pulumi.azure.hsm.inputs.ModuleNetworkProfileArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleVirtualNetwork = new VirtualNetwork("exampleVirtualNetwork", VirtualNetworkArgs.builder()
            .name("example-vnet")
            .addressSpaces("10.2.0.0/16")
            .location(example.location())
            .resourceGroupName(example.name())
            .build());

        var exampleSubnet = new Subnet("exampleSubnet", SubnetArgs.builder()
            .name("example-compute")
            .resourceGroupName(example.name())
            .virtualNetworkName(exampleVirtualNetwork.name())
            .addressPrefixes("10.2.0.0/24")
            .build());

        var example2 = new Subnet("example2", SubnetArgs.builder()
            .name("example-hsmsubnet")
            .resourceGroupName(example.name())
            .virtualNetworkName(exampleVirtualNetwork.name())
            .addressPrefixes("10.2.1.0/24")
            .delegations(SubnetDelegationArgs.builder()
                .name("first")
                .serviceDelegation(SubnetDelegationServiceDelegationArgs.builder()
                    .name("Microsoft.HardwareSecurityModules/dedicatedHSMs")
                    .actions(                    
                        "Microsoft.Network/networkinterfaces/*",
                        "Microsoft.Network/virtualNetworks/subnets/join/action")
                    .build())
                .build())
            .build());

        var example3 = new Subnet("example3", SubnetArgs.builder()
            .name("gatewaysubnet")
            .resourceGroupName(example.name())
            .virtualNetworkName(exampleVirtualNetwork.name())
            .addressPrefixes("10.2.255.0/26")
            .build());

        var examplePublicIp = new PublicIp("examplePublicIp", PublicIpArgs.builder()
            .name("example-pip")
            .location(example.location())
            .resourceGroupName(example.name())
            .allocationMethod("Static")
            .build());

        var exampleVirtualNetworkGateway = new VirtualNetworkGateway("exampleVirtualNetworkGateway", VirtualNetworkGatewayArgs.builder()
            .name("example-vnetgateway")
            .location(example.location())
            .resourceGroupName(example.name())
            .type("ExpressRoute")
            .vpnType("PolicyBased")
            .sku("Standard")
            .ipConfigurations(VirtualNetworkGatewayIpConfigurationArgs.builder()
                .publicIpAddressId(examplePublicIp.id())
                .privateIpAddressAllocation("Dynamic")
                .subnetId(example3.id())
                .build())
            .build());

        var exampleModule = new Module("exampleModule", ModuleArgs.builder()
            .name("example-hsm")
            .location(example.location())
            .resourceGroupName(example.name())
            .skuName("payShield10K_LMK1_CPS60")
            .managementNetworkProfile(ModuleManagementNetworkProfileArgs.builder()
                .networkInterfacePrivateIpAddresses("10.2.1.7")
                .subnetId(example2.id())
                .build())
            .networkProfile(ModuleNetworkProfileArgs.builder()
                .networkInterfacePrivateIpAddresses("10.2.1.8")
                .subnetId(example2.id())
                .build())
            .stampId("stamp2")
            .tags(Map.of("env", "Test"))
            .build(), CustomResourceOptions.builder()
                .dependsOn(exampleVirtualNetworkGateway)
                .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleVirtualNetwork:
    type: azure:network:VirtualNetwork
    name: example
    properties:
      name: example-vnet
      addressSpaces:
        - 10.2.0.0/16
      location: ${example.location}
      resourceGroupName: ${example.name}
  exampleSubnet:
    type: azure:network:Subnet
    name: example
    properties:
      name: example-compute
      resourceGroupName: ${example.name}
      virtualNetworkName: ${exampleVirtualNetwork.name}
      addressPrefixes:
        - 10.2.0.0/24
  example2:
    type: azure:network:Subnet
    properties:
      name: example-hsmsubnet
      resourceGroupName: ${example.name}
      virtualNetworkName: ${exampleVirtualNetwork.name}
      addressPrefixes:
        - 10.2.1.0/24
      delegations:
        - name: first
          serviceDelegation:
            name: Microsoft.HardwareSecurityModules/dedicatedHSMs
            actions:
              - Microsoft.Network/networkinterfaces/*
              - Microsoft.Network/virtualNetworks/subnets/join/action
  example3:
    type: azure:network:Subnet
    properties:
      name: gatewaysubnet
      resourceGroupName: ${example.name}
      virtualNetworkName: ${exampleVirtualNetwork.name}
      addressPrefixes:
        - 10.2.255.0/26
  examplePublicIp:
    type: azure:network:PublicIp
    name: example
    properties:
      name: example-pip
      location: ${example.location}
      resourceGroupName: ${example.name}
      allocationMethod: Static
  exampleVirtualNetworkGateway:
    type: azure:network:VirtualNetworkGateway
    name: example
    properties:
      name: example-vnetgateway
      location: ${example.location}
      resourceGroupName: ${example.name}
      type: ExpressRoute
      vpnType: PolicyBased
      sku: Standard
      ipConfigurations:
        - publicIpAddressId: ${examplePublicIp.id}
          privateIpAddressAllocation: Dynamic
          subnetId: ${example3.id}
  exampleModule:
    type: azure:hsm:Module
    name: example
    properties:
      name: example-hsm
      location: ${example.location}
      resourceGroupName: ${example.name}
      skuName: payShield10K_LMK1_CPS60
      managementNetworkProfile:
        networkInterfacePrivateIpAddresses:
          - 10.2.1.7
        subnetId: ${example2.id}
      networkProfile:
        networkInterfacePrivateIpAddresses:
          - 10.2.1.8
        subnetId: ${example2.id}
      stampId: stamp2
      tags:
        env: Test
    options:
      dependsOn:
        - ${exampleVirtualNetworkGateway}
```
<!--End PulumiCodeChooser -->

## Import

Dedicated Hardware Security Module can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:hsm/module:Module example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.HardwareSecurityModules/dedicatedHSMs/hsm1
```

¬
locationB" The Azure Region where the Dedicated Hardware Security Module should exist. Changing this forces a new Dedicated Hardware Security Module to be created.
Å
managementNetworkProfiletBr:p
n
hsmModuleManagementNetworkProfileGazure:hsm/ModuleManagementNetworkProfile:ModuleManagementNetworkProfile²A `management_network_profile` block as defined below.

->**NOTE:**  The `management_network_profile` should not be specified when `sku_name` is `SafeNet Luna Network HSM A790`.
§
nameB" The name which should be used for this Dedicated Hardware Security Module. Changing this forces a new Dedicated Hardware Security Module to be created.

networkProfileT:R
P
hsmModuleNetworkProfile3azure:hsm/ModuleNetworkProfile:ModuleNetworkProfile,A `network_profile` block as defined below.
Á
resourceGroupName" §The name of the Resource Group where the Dedicated Hardware Security Module should exist. Changing this forces a new Dedicated Hardware Security Module to be created.
ð
skuName" àThe SKU name of the dedicated hardware security module. Possible values are `payShield10K_LMK1_CPS60`,`payShield10K_LMK1_CPS250`,`payShield10K_LMK1_CPS2500`,`payShield10K_LMK2_CPS60`,`payShield10K_LMK2_CPS250`,`payShield10K_LMK2_CPS2500` and `SafeNet Luna Network HSM A790`. Changing this forces a new Dedicated Hardware Security Module to be created.

stampIdB" The ID of the stamp. Possible values are `stamp1` or `stamp2`. Changing this forces a new Dedicated Hardware Security Module to be created.
f
tagsB2" VA mapping of tags which should be assigned to the Dedicated Hardware Security Module.
Ê
zonesB*" ¸Specifies a list of Availability Zones in which this Dedicated Hardware Security Module should be located. Changing this forces a new Dedicated Hardware Security Module to be created.
"ª
location" The Azure Region where the Dedicated Hardware Security Module should exist. Changing this forces a new Dedicated Hardware Security Module to be created.
"Å
managementNetworkProfiletBr:p
n
hsmModuleManagementNetworkProfileGazure:hsm/ModuleManagementNetworkProfile:ModuleManagementNetworkProfile²A `management_network_profile` block as defined below.

->**NOTE:**  The `management_network_profile` should not be specified when `sku_name` is `SafeNet Luna Network HSM A790`.
"¥
name" The name which should be used for this Dedicated Hardware Security Module. Changing this forces a new Dedicated Hardware Security Module to be created.
"
networkProfileT:R
P
hsmModuleNetworkProfile3azure:hsm/ModuleNetworkProfile:ModuleNetworkProfile,A `network_profile` block as defined below.
"Á
resourceGroupName" §The name of the Resource Group where the Dedicated Hardware Security Module should exist. Changing this forces a new Dedicated Hardware Security Module to be created.
"ð
skuName" àThe SKU name of the dedicated hardware security module. Possible values are `payShield10K_LMK1_CPS60`,`payShield10K_LMK1_CPS250`,`payShield10K_LMK1_CPS2500`,`payShield10K_LMK2_CPS60`,`payShield10K_LMK2_CPS250`,`payShield10K_LMK2_CPS2500` and `SafeNet Luna Network HSM A790`. Changing this forces a new Dedicated Hardware Security Module to be created.
"
stampIdB" The ID of the stamp. Possible values are `stamp1` or `stamp2`. Changing this forces a new Dedicated Hardware Security Module to be created.
"f
tagsB2" VA mapping of tags which should be assigned to the Dedicated Hardware Security Module.
"Ê
zonesB*" ¸Specifies a list of Availability Zones in which this Dedicated Hardware Security Module should be located. Changing this forces a new Dedicated Hardware Security Module to be created.
*¿=
5
iotCertificate!azure:iot/certificate:Certificate3Manages an IotHub Certificate.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";
import * as std from "@pulumi/std";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "B1",
        capacity: 1,
    },
});
const exampleCertificate = new azure.iot.Certificate("example", {
    name: "example",
    resourceGroupName: example.name,
    iothubName: exampleIoTHub.name,
    isVerified: true,
    certificateContent: std.filebase64({
        input: "example.cer",
    }).then(invoke => invoke.result),
});
```
```python
import pulumi
import pulumi_azure as azure
import pulumi_std as std

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_io_t_hub = azure.iot.IoTHub("example",
    name="example",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "B1",
        "capacity": 1,
    })
example_certificate = azure.iot.Certificate("example",
    name="example",
    resource_group_name=example.name,
    iothub_name=example_io_t_hub.name,
    is_verified=True,
    certificate_content=std.filebase64(input="example.cer").result)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "B1",
            Capacity = 1,
        },
    });

    var exampleCertificate = new Azure.Iot.Certificate("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        IothubName = exampleIoTHub.Name,
        IsVerified = true,
        CertificateContent = Std.Filebase64.Invoke(new()
        {
            Input = "example.cer",
        }).Apply(invoke => invoke.Result),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("B1"),
				Capacity: pulumi.Int(1),
			},
		})
		if err != nil {
			return err
		}
		invokeFilebase64, err := std.Filebase64(ctx, &std.Filebase64Args{
			Input: "example.cer",
		}, nil)
		if err != nil {
			return err
		}
		_, err = iot.NewCertificate(ctx, "example", &iot.CertificateArgs{
			Name:               pulumi.String("example"),
			ResourceGroupName:  example.Name,
			IothubName:         exampleIoTHub.Name,
			IsVerified:         pulumi.Bool(true),
			CertificateContent: pulumi.String(invokeFilebase64.Result),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.Certificate;
import com.pulumi.azure.iot.CertificateArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("B1")
                .capacity("1")
                .build())
            .build());

        var exampleCertificate = new Certificate("exampleCertificate", CertificateArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .iothubName(exampleIoTHub.name())
            .isVerified(true)
            .certificateContent(StdFunctions.filebase64(Filebase64Args.builder()
                .input("example.cer")
                .build()).result())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: B1
        capacity: '1'
  exampleCertificate:
    type: azure:iot:Certificate
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      iothubName: ${exampleIoTHub.name}
      isVerified: true
      certificateContent:
        fn::invoke:
          function: std:filebase64
          arguments:
            input: example.cer
          return: result
```
<!--End PulumiCodeChooser -->

## Import

IoTHub Certificates can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/example/certificates/example
```

y
certificateContent" _The Base-64 representation of the X509 leaf certificate .cer file or just a .pem file content.


iothubName" uThe name of the IoTHub that this certificate will be attached to. Changing this forces a new resource to be created.
F

isVerifiedB
 2Is the certificate verified? Defaults to `false`.
x
nameB" jSpecifies the name of the IotHub Certificate resource. Changing this forces a new resource to be created.
«
resourceGroupName" The name of the resource group under which the IotHub Certificate resource has to be created. Changing this forces a new resource to be created.
"y
certificateContent" _The Base-64 representation of the X509 leaf certificate .cer file or just a .pem file content.
"

iothubName" uThe name of the IoTHub that this certificate will be attached to. Changing this forces a new resource to be created.
"F

isVerifiedB
 2Is the certificate verified? Defaults to `false`.
"v
name" jSpecifies the name of the IotHub Certificate resource. Changing this forces a new resource to be created.
"«
resourceGroupName" The name of the resource group under which the IotHub Certificate resource has to be created. Changing this forces a new resource to be created.
*7
;
iotConsumerGroup%azure:iot/consumerGroup:ConsumerGroup/Manages a Consumer Group within an IotHub

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "test",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
    tags: {
        purpose: "testing",
    },
});
const exampleConsumerGroup = new azure.iot.ConsumerGroup("example", {
    name: "group",
    iothubName: exampleIoTHub.name,
    eventhubEndpointName: "events",
    resourceGroupName: example.name,
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_io_t_hub = azure.iot.IoTHub("example",
    name="test",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    },
    tags={
        "purpose": "testing",
    })
example_consumer_group = azure.iot.ConsumerGroup("example",
    name="group",
    iothub_name=example_io_t_hub.name,
    eventhub_endpoint_name="events",
    resource_group_name=example.name)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "test",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
        Tags = 
        {
            { "purpose", "testing" },
        },
    });

    var exampleConsumerGroup = new Azure.Iot.ConsumerGroup("example", new()
    {
        Name = "group",
        IothubName = exampleIoTHub.Name,
        EventhubEndpointName = "events",
        ResourceGroupName = example.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("test"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
			Tags: pulumi.StringMap{
				"purpose": pulumi.String("testing"),
			},
		})
		if err != nil {
			return err
		}
		_, err = iot.NewConsumerGroup(ctx, "example", &iot.ConsumerGroupArgs{
			Name:                 pulumi.String("group"),
			IothubName:           exampleIoTHub.Name,
			EventhubEndpointName: pulumi.String("events"),
			ResourceGroupName:    example.Name,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.ConsumerGroup;
import com.pulumi.azure.iot.ConsumerGroupArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("test")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .tags(Map.of("purpose", "testing"))
            .build());

        var exampleConsumerGroup = new ConsumerGroup("exampleConsumerGroup", ConsumerGroupArgs.builder()
            .name("group")
            .iothubName(exampleIoTHub.name())
            .eventhubEndpointName("events")
            .resourceGroupName(example.name())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: test
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
      tags:
        purpose: testing
  exampleConsumerGroup:
    type: azure:iot:ConsumerGroup
    name: example
    properties:
      name: group
      iothubName: ${exampleIoTHub.name}
      eventhubEndpointName: events
      resourceGroupName: ${example.name}
```
<!--End PulumiCodeChooser -->

## Import

IoTHub Consumer Groups can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/consumerGroup:ConsumerGroup group1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/eventHubEndpoints/events/consumerGroups/group1
```


eventhubEndpointName" qThe name of the Event Hub-compatible endpoint in the IoT hub. Changing this forces a new resource to be created.
^

iothubName" LThe name of the IoT Hub. Changing this forces a new resource to be created.
b
nameB" TThe name of this Consumer Group. Changing this forces a new resource to be created.

resourceGroupName" mThe name of the resource group that contains the IoT hub. Changing this forces a new resource to be created.
"
eventhubEndpointName" qThe name of the Event Hub-compatible endpoint in the IoT hub. Changing this forces a new resource to be created.
"^

iothubName" LThe name of the IoT Hub. Changing this forces a new resource to be created.
"`
name" TThe name of this Consumer Group. Changing this forces a new resource to be created.
"
resourceGroupName" mThe name of the resource group that contains the IoT hub. Changing this forces a new resource to be created.
*·P
S
iotDpsSharedAccessPolicy5azure:iot/dpsSharedAccessPolicy:DpsSharedAccessPolicy¦0Manages an IotHub Device Provisioning Service Shared Access Policy

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleIotHubDps = new azure.iot.IotHubDps("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
});
const exampleDpsSharedAccessPolicy = new azure.iot.DpsSharedAccessPolicy("example", {
    name: "example",
    resourceGroupName: example.name,
    iothubDpsName: exampleIotHubDps.name,
    enrollmentWrite: true,
    enrollmentRead: true,
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_iot_hub_dps = azure.iot.IotHubDps("example",
    name="example",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    })
example_dps_shared_access_policy = azure.iot.DpsSharedAccessPolicy("example",
    name="example",
    resource_group_name=example.name,
    iothub_dps_name=example_iot_hub_dps.name,
    enrollment_write=True,
    enrollment_read=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleIotHubDps = new Azure.Iot.IotHubDps("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IotHubDpsSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
    });

    var exampleDpsSharedAccessPolicy = new Azure.Iot.DpsSharedAccessPolicy("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        IothubDpsName = exampleIotHubDps.Name,
        EnrollmentWrite = true,
        EnrollmentRead = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleIotHubDps, err := iot.NewIotHubDps(ctx, "example", &iot.IotHubDpsArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IotHubDpsSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
		})
		if err != nil {
			return err
		}
		_, err = iot.NewDpsSharedAccessPolicy(ctx, "example", &iot.DpsSharedAccessPolicyArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			IothubDpsName:     exampleIotHubDps.Name,
			EnrollmentWrite:   pulumi.Bool(true),
			EnrollmentRead:    pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iot.IotHubDps;
import com.pulumi.azure.iot.IotHubDpsArgs;
import com.pulumi.azure.iot.inputs.IotHubDpsSkuArgs;
import com.pulumi.azure.iot.DpsSharedAccessPolicy;
import com.pulumi.azure.iot.DpsSharedAccessPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleIotHubDps = new IotHubDps("exampleIotHubDps", IotHubDpsArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IotHubDpsSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .build());

        var exampleDpsSharedAccessPolicy = new DpsSharedAccessPolicy("exampleDpsSharedAccessPolicy", DpsSharedAccessPolicyArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .iothubDpsName(exampleIotHubDps.name())
            .enrollmentWrite(true)
            .enrollmentRead(true)
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleIotHubDps:
    type: azure:iot:IotHubDps
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
  exampleDpsSharedAccessPolicy:
    type: azure:iot:DpsSharedAccessPolicy
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      iothubDpsName: ${exampleIotHubDps.name}
      enrollmentWrite: true
      enrollmentRead: true
```
<!--End PulumiCodeChooser -->

## Import

IoTHub Device Provisioning Service Shared Access Policies can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/dpsSharedAccessPolicy:DpsSharedAccessPolicy shared_access_policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/provisioningServices/dps1/keys/shared_access_policy1
```


enrollmentReadB
 øAdds `EnrollmentRead` permission to this Shared Access Account. It allows read access to enrollment data.

> **NOTE** When `enrollment_read` is set to `true`, `registration_read` must also be set to true. This is a limitation of the Azure REST API
Á
enrollmentWriteB
 §Adds `EnrollmentWrite` permission to this Shared Access Account. It allows write access to enrollment data.

> **NOTE** When `registration_write` is set to `true`, `enrollment_read`, `registration_read`, and `registration_write` must also be set to true. This is a requirement of the Azure API.
©
iothubDpsName" The name of the IoT Hub Device Provisioning service to which this Shared Access Policy belongs. Changing this forces a new resource to be created.

nameB" sSpecifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.

registrationReadB
 wAdds `RegistrationStatusRead` permission to this Shared Access Account. It allows read access to device registrations.
£
registrationWriteB
 Adds `RegistrationStatusWrite` permission to this Shared Access Account. It allows write access to device registrations.

> **NOTE** When `registration_write` is set to `true`, `registration_read` must also be set to true. This is a requirement of the Azure API.
´
resourceGroupName" The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
µ
serviceConfigB
 Adds `ServiceConfig` permission to this Shared Access Account. It allows configuration of the Device Provisioning Service.

> **NOTE** At least one of `registration_read`, `registration_write`, `service_config`, `enrollment_read`, `enrollment_write` permissions must be set to `true`.
"
enrollmentReadB
 øAdds `EnrollmentRead` permission to this Shared Access Account. It allows read access to enrollment data.

> **NOTE** When `enrollment_read` is set to `true`, `registration_read` must also be set to true. This is a limitation of the Azure REST API
"Á
enrollmentWriteB
 §Adds `EnrollmentWrite` permission to this Shared Access Account. It allows write access to enrollment data.

> **NOTE** When `registration_write` is set to `true`, `enrollment_read`, `registration_read`, and `registration_write` must also be set to true. This is a requirement of the Azure API.
"©
iothubDpsName" The name of the IoT Hub Device Provisioning service to which this Shared Access Policy belongs. Changing this forces a new resource to be created.
"
name" sSpecifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.
"Z
primaryConnectionString" ;The primary connection string of the Shared Access Policy.
"K

primaryKey" 9The primary key used to create the authentication token.
"
registrationReadB
 wAdds `RegistrationStatusRead` permission to this Shared Access Account. It allows read access to device registrations.
"£
registrationWriteB
 Adds `RegistrationStatusWrite` permission to this Shared Access Account. It allows write access to device registrations.

> **NOTE** When `registration_write` is set to `true`, `registration_read` must also be set to true. This is a requirement of the Azure API.
"´
resourceGroupName" The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
"^
secondaryConnectionString" =The secondary connection string of the Shared Access Policy.
"O
secondaryKey" ;The secondary key used to create the authentication token.
"µ
serviceConfigB
 Adds `ServiceConfig` permission to this Shared Access Account. It allows configuration of the Device Provisioning Service.

> **NOTE** At least one of `registration_read`, `registration_write`, `service_config`, `enrollment_read`, `enrollment_write` permissions must be set to `true`.
*í5
Y
iotEndpointCosmosdbAccount9azure:iot/endpointCosmosdbAccount:EndpointCosmosdbAccountManages an IotHub Cosmos DB Account Endpoint

> **NOTE:** Endpoints can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `azure.iot.IoTHub` resource is not supported.

## Example Usage

<!--Start PulumiCodeChooser -->
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: exampleIothub
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: B1
        capacity: '1'
      tags:
        purpose: example
  exampleAccount:
    type: azure:cosmosdb:Account
    name: example
    properties:
      name: cosmosdb-account
      location: ${example.location}
      resourceGroupName: ${example.name}
      offerType: Standard
      kind: GlobalDocumentDB
      consistencyPolicy:
        consistencyLevel: Strong
      geoLocations:
        - location: ${example.location}
          failoverPriority: 0
  exampleSqlDatabase:
    type: azure:cosmosdb:SqlDatabase
    name: example
    properties:
      name: cosmos-sql-db
      resourceGroupName: ${exampleAccount.resourceGroupName}
      accountName: ${exampleAccount.name}
  exampleSqlContainer:
    type: azure:cosmosdb:SqlContainer
    name: example
    properties:
      name: example-container
      resourceGroupName: ${exampleAccount.resourceGroupName}
      accountName: ${exampleAccount.name}
      databaseName: ${exampleSqlDatabase.name}
      partitionKeyPath: /definition/id
  exampleEndpointCosmosdbAccount:
    type: azure:iot:EndpointCosmosdbAccount
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      iothubId: ${exampleIoTHub.id}
      containerName: ${exampleSqlContainer.name}
      databaseName: ${exampleSqlDatabase.name}
      endpointUri: ${exampleAccount.endpoint}
      primaryKey: ${exampleAccount.primaryKey}
      secondaryKey: ${exampleAccount.secondaryKey}
```
<!--End PulumiCodeChooser -->

## Import

IoTHub Cosmos DB Account Endpoint can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/endpointCosmosdbAccount:EndpointCosmosdbAccount endpoint1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/endpoints/cosmosDBAccountEndpoint1
```

¯
authenticationTypeB" The type used to authenticate against the Cosmos DB Account endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.

containerName" rThe name of the Cosmos DB Container in the Cosmos DB Database. Changing this forces a new resource to be created.

databaseName" pThe name of the Cosmos DB Database in the Cosmos DB Account. Changing this forces a new resource to be created.
h
endpointUri" UThe URI of the Cosmos DB Account. Changing this forces a new resource to be created.


identityIdB" ôThe ID of the User Managed Identity used to authenticate against the Cosmos DB Account endpoint.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
q
iothubId" aThe ID of the IoT Hub to create the endpoint. Changing this forces a new resource to be created.
ù
nameB" êThe name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
a
partitionKeyNameB" GThe name of the partition key associated with the Cosmos DB Container.

partitionKeyTemplateB" dThe template for generating a synthetic partition key value for use within the Cosmos DB Container.
£

primaryKeyB" The primary key of the Cosmos DB Account.

> **NOTE:** `primary_key` must and can only be specified when `authentication_type` is `keyBased`.
 
resourceGroupName" The name of the resource group under which the Cosmos DB Account has been created. Changing this forces a new resource to be created.
©
secondaryKeyB" The secondary key of the Cosmos DB Account.

> **NOTE:** `secondary_key` must and can only be specified when `authentication_type` is `keyBased`.
"¯
authenticationTypeB" The type used to authenticate against the Cosmos DB Account endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
"
containerName" rThe name of the Cosmos DB Container in the Cosmos DB Database. Changing this forces a new resource to be created.
"
databaseName" pThe name of the Cosmos DB Database in the Cosmos DB Account. Changing this forces a new resource to be created.
"h
endpointUri" UThe URI of the Cosmos DB Account. Changing this forces a new resource to be created.
"

identityIdB" ôThe ID of the User Managed Identity used to authenticate against the Cosmos DB Account endpoint.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
"q
iothubId" aThe ID of the IoT Hub to create the endpoint. Changing this forces a new resource to be created.
"÷
name" êThe name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
"a
partitionKeyNameB" GThe name of the partition key associated with the Cosmos DB Container.
"
partitionKeyTemplateB" dThe template for generating a synthetic partition key value for use within the Cosmos DB Container.
"£

primaryKeyB" The primary key of the Cosmos DB Account.

> **NOTE:** `primary_key` must and can only be specified when `authentication_type` is `keyBased`.
" 
resourceGroupName" The name of the resource group under which the Cosmos DB Account has been created. Changing this forces a new resource to be created.
"©
secondaryKeyB" The secondary key of the Cosmos DB Account.

> **NOTE:** `secondary_key` must and can only be specified when `authentication_type` is `keyBased`.
*ðy
D
iotEndpointEventhub+azure:iot/endpointEventhub:EndpointEventhub¥aManages an IotHub EventHub Endpoint

> **NOTE:** Endpoints can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `azure.iot.IoTHub` resource is not supported.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleEventHubNamespace = new azure.eventhub.EventHubNamespace("example", {
    name: "exampleEventHubNamespace",
    location: example.location,
    resourceGroupName: example.name,
    sku: "Basic",
});
const exampleEventHub = new azure.eventhub.EventHub("example", {
    name: "exampleEventHub",
    namespaceName: exampleEventHubNamespace.name,
    resourceGroupName: example.name,
    partitionCount: 2,
    messageRetention: 1,
});
const exampleAuthorizationRule = new azure.eventhub.AuthorizationRule("example", {
    name: "exampleRule",
    namespaceName: exampleEventHubNamespace.name,
    eventhubName: exampleEventHub.name,
    resourceGroupName: example.name,
    listen: false,
    send: true,
    manage: false,
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "exampleIothub",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "B1",
        capacity: 1,
    },
    tags: {
        purpose: "example",
    },
});
const exampleEndpointEventhub = new azure.iot.EndpointEventhub("example", {
    resourceGroupName: example.name,
    iothubId: exampleIoTHub.id,
    name: "example",
    connectionString: exampleAuthorizationRule.primaryConnectionString,
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_event_hub_namespace = azure.eventhub.EventHubNamespace("example",
    name="exampleEventHubNamespace",
    location=example.location,
    resource_group_name=example.name,
    sku="Basic")
example_event_hub = azure.eventhub.EventHub("example",
    name="exampleEventHub",
    namespace_name=example_event_hub_namespace.name,
    resource_group_name=example.name,
    partition_count=2,
    message_retention=1)
example_authorization_rule = azure.eventhub.AuthorizationRule("example",
    name="exampleRule",
    namespace_name=example_event_hub_namespace.name,
    eventhub_name=example_event_hub.name,
    resource_group_name=example.name,
    listen=False,
    send=True,
    manage=False)
example_io_t_hub = azure.iot.IoTHub("example",
    name="exampleIothub",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "B1",
        "capacity": 1,
    },
    tags={
        "purpose": "example",
    })
example_endpoint_eventhub = azure.iot.EndpointEventhub("example",
    resource_group_name=example.name,
    iothub_id=example_io_t_hub.id,
    name="example",
    connection_string=example_authorization_rule.primary_connection_string)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleEventHubNamespace = new Azure.EventHub.EventHubNamespace("example", new()
    {
        Name = "exampleEventHubNamespace",
        Location = example.Location,
        ResourceGroupName = example.Name,
        Sku = "Basic",
    });

    var exampleEventHub = new Azure.EventHub.EventHub("example", new()
    {
        Name = "exampleEventHub",
        NamespaceName = exampleEventHubNamespace.Name,
        ResourceGroupName = example.Name,
        PartitionCount = 2,
        MessageRetention = 1,
    });

    var exampleAuthorizationRule = new Azure.EventHub.AuthorizationRule("example", new()
    {
        Name = "exampleRule",
        NamespaceName = exampleEventHubNamespace.Name,
        EventhubName = exampleEventHub.Name,
        ResourceGroupName = example.Name,
        Listen = false,
        Send = true,
        Manage = false,
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "exampleIothub",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "B1",
            Capacity = 1,
        },
        Tags = 
        {
            { "purpose", "example" },
        },
    });

    var exampleEndpointEventhub = new Azure.Iot.EndpointEventhub("example", new()
    {
        ResourceGroupName = example.Name,
        IothubId = exampleIoTHub.Id,
        Name = "example",
        ConnectionString = exampleAuthorizationRule.PrimaryConnectionString,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/eventhub"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleEventHubNamespace, err := eventhub.NewEventHubNamespace(ctx, "example", &eventhub.EventHubNamespaceArgs{
			Name:              pulumi.String("exampleEventHubNamespace"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			Sku:               pulumi.String("Basic"),
		})
		if err != nil {
			return err
		}
		exampleEventHub, err := eventhub.NewEventHub(ctx, "example", &eventhub.EventHubArgs{
			Name:              pulumi.String("exampleEventHub"),
			NamespaceName:     exampleEventHubNamespace.Name,
			ResourceGroupName: example.Name,
			PartitionCount:    pulumi.Int(2),
			MessageRetention:  pulumi.Int(1),
		})
		if err != nil {
			return err
		}
		exampleAuthorizationRule, err := eventhub.NewAuthorizationRule(ctx, "example", &eventhub.AuthorizationRuleArgs{
			Name:              pulumi.String("exampleRule"),
			NamespaceName:     exampleEventHubNamespace.Name,
			EventhubName:      exampleEventHub.Name,
			ResourceGroupName: example.Name,
			Listen:            pulumi.Bool(false),
			Send:              pulumi.Bool(true),
			Manage:            pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("exampleIothub"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("B1"),
				Capacity: pulumi.Int(1),
			},
			Tags: pulumi.StringMap{
				"purpose": pulumi.String("example"),
			},
		})
		if err != nil {
			return err
		}
		_, err = iot.NewEndpointEventhub(ctx, "example", &iot.EndpointEventhubArgs{
			ResourceGroupName: example.Name,
			IothubId:          exampleIoTHub.ID(),
			Name:              pulumi.String("example"),
			ConnectionString:  exampleAuthorizationRule.PrimaryConnectionString,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.eventhub.EventHubNamespace;
import com.pulumi.azure.eventhub.EventHubNamespaceArgs;
import com.pulumi.azure.eventhub.EventHub;
import com.pulumi.azure.eventhub.EventHubArgs;
import com.pulumi.azure.eventhub.AuthorizationRule;
import com.pulumi.azure.eventhub.AuthorizationRuleArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.EndpointEventhub;
import com.pulumi.azure.iot.EndpointEventhubArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleEventHubNamespace = new EventHubNamespace("exampleEventHubNamespace", EventHubNamespaceArgs.builder()
            .name("exampleEventHubNamespace")
            .location(example.location())
            .resourceGroupName(example.name())
            .sku("Basic")
            .build());

        var exampleEventHub = new EventHub("exampleEventHub", EventHubArgs.builder()
            .name("exampleEventHub")
            .namespaceName(exampleEventHubNamespace.name())
            .resourceGroupName(example.name())
            .partitionCount(2)
            .messageRetention(1)
            .build());

        var exampleAuthorizationRule = new AuthorizationRule("exampleAuthorizationRule", AuthorizationRuleArgs.builder()
            .name("exampleRule")
            .namespaceName(exampleEventHubNamespace.name())
            .eventhubName(exampleEventHub.name())
            .resourceGroupName(example.name())
            .listen(false)
            .send(true)
            .manage(false)
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("exampleIothub")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("B1")
                .capacity("1")
                .build())
            .tags(Map.of("purpose", "example"))
            .build());

        var exampleEndpointEventhub = new EndpointEventhub("exampleEndpointEventhub", EndpointEventhubArgs.builder()
            .resourceGroupName(example.name())
            .iothubId(exampleIoTHub.id())
            .name("example")
            .connectionString(exampleAuthorizationRule.primaryConnectionString())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleEventHubNamespace:
    type: azure:eventhub:EventHubNamespace
    name: example
    properties:
      name: exampleEventHubNamespace
      location: ${example.location}
      resourceGroupName: ${example.name}
      sku: Basic
  exampleEventHub:
    type: azure:eventhub:EventHub
    name: example
    properties:
      name: exampleEventHub
      namespaceName: ${exampleEventHubNamespace.name}
      resourceGroupName: ${example.name}
      partitionCount: 2
      messageRetention: 1
  exampleAuthorizationRule:
    type: azure:eventhub:AuthorizationRule
    name: example
    properties:
      name: exampleRule
      namespaceName: ${exampleEventHubNamespace.name}
      eventhubName: ${exampleEventHub.name}
      resourceGroupName: ${example.name}
      listen: false
      send: true
      manage: false
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: exampleIothub
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: B1
        capacity: '1'
      tags:
        purpose: example
  exampleEndpointEventhub:
    type: azure:iot:EndpointEventhub
    name: example
    properties:
      resourceGroupName: ${example.name}
      iothubId: ${exampleIoTHub.id}
      name: example
      connectionString: ${exampleAuthorizationRule.primaryConnectionString}
```
<!--End PulumiCodeChooser -->

## Import

IoTHub EventHub Endpoint can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/endpointEventhub:EndpointEventhub eventhub1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/endpoints/eventhub_endpoint1
```

£
authenticationTypeB" Type used to authenticate against the Event Hub endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
£
connectionStringB" The connection string for the endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `keyBased`.
¥
endpointUriB" URI of the Event Hubs Namespace endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.


entityPathB" |Name of the Event Hub. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
ý

identityIdB" èID of the User Managed Identity used to authenticate against the Event Hub endpoint.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
c
iothubId" SThe IoTHub ID for the endpoint. Changing this forces a new resource to be created.
ù
nameB" êThe name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.

resourceGroupName" ~The name of the resource group under which the Event Hub has been created. Changing this forces a new resource to be created.
"£
authenticationTypeB" Type used to authenticate against the Event Hub endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
"£
connectionStringB" The connection string for the endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `keyBased`.
"¥
endpointUriB" URI of the Event Hubs Namespace endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
"

entityPathB" |Name of the Event Hub. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
"ý

identityIdB" èID of the User Managed Identity used to authenticate against the Event Hub endpoint.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
"c
iothubId" SThe IoTHub ID for the endpoint. Changing this forces a new resource to be created.
"÷
name" êThe name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
"
resourceGroupName" ~The name of the resource group under which the Event Hub has been created. Changing this forces a new resource to be created.
*Ø*
Y
iotEndpointServicebusQueue9azure:iot/endpointServicebusQueue:EndpointServicebusQueueÆManages an IotHub ServiceBus Queue Endpoint

> **NOTE:** Endpoints can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `azure.iot.IoTHub` resource is not supported.

## Example Usage

<!--Start PulumiCodeChooser -->
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleNamespace:
    type: azure:servicebus:Namespace
    name: example
    properties:
      name: exampleNamespace
      location: ${example.location}
      resourceGroupName: ${example.name}
      sku: Standard
  exampleQueue:
    type: azure:servicebus:Queue
    name: example
    properties:
      name: exampleQueue
      namespaceId: ${exampleNamespace.id}
      enablePartitioning: true
  exampleQueueAuthorizationRule:
    type: azure:servicebus:QueueAuthorizationRule
    name: example
    properties:
      name: exampleRule
      queueId: ${exampleQueue.id}
      listen: false
      send: true
      manage: false
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: exampleIothub
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: B1
        capacity: '1'
      tags:
        purpose: example
  exampleEndpointServicebusQueue:
    type: azure:iot:EndpointServicebusQueue
    name: example
    properties:
      resourceGroupName: ${example.name}
      iothubId: ${exampleIoTHub.id}
      name: example
      connectionString: ${exampleQueueAuthorizationRule.primaryConnectionString}
```
<!--End PulumiCodeChooser -->

## Import

IoTHub ServiceBus Queue Endpoint can be imported using the `resource id`, e.g.

g

```sh
$ pulumi import azure:iot/endpointServicebusQueue:EndpointServicebusQueue servicebus_queue1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/endpoints/servicebusqueue_endpoint1
```

«
authenticationTypeB" Type used to authenticate against the Service Bus Queue endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
£
connectionStringB" The connection string for the endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `keyBased`.

endpointUriB" URI of the Service Bus endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.


entityPathB" Name of the Service Bus Queue. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.


identityIdB" ðID of the User Managed Identity used to authenticate against the Service Bus Queue endpoint.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
c
iothubId" SThe IoTHub ID for the endpoint. Changing this forces a new resource to be created.
ù
nameB" êThe name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
 
resourceGroupName" The name of the resource group under which the Service Bus Queue has been created. Changing this forces a new resource to be created.
"«
authenticationTypeB" Type used to authenticate against the Service Bus Queue endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
"£
connectionStringB" The connection string for the endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `keyBased`.
"
endpointUriB" URI of the Service Bus endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
"

entityPathB" Name of the Service Bus Queue. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
"

identityIdB" ðID of the User Managed Identity used to authenticate against the Service Bus Queue endpoint.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
"c
iothubId" SThe IoTHub ID for the endpoint. Changing this forces a new resource to be created.
"÷
name" êThe name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
" 
resourceGroupName" The name of the resource group under which the Service Bus Queue has been created. Changing this forces a new resource to be created.
*×p
Y
iotEndpointServicebusTopic9azure:iot/endpointServicebusTopic:EndpointServicebusTopicÅWManages an IotHub ServiceBus Topic Endpoint

> **NOTE:** Endpoints can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `azure.iot.IoTHub` resource is not supported.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleNamespace = new azure.servicebus.Namespace("example", {
    name: "exampleNamespace",
    location: example.location,
    resourceGroupName: example.name,
    sku: "Standard",
});
const exampleTopic = new azure.servicebus.Topic("example", {
    name: "exampleTopic",
    namespaceId: exampleNamespace.id,
});
const exampleTopicAuthorizationRule = new azure.servicebus.TopicAuthorizationRule("example", {
    name: "exampleRule",
    topicId: exampleTopic.id,
    listen: false,
    send: true,
    manage: false,
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "exampleIothub",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "B1",
        capacity: 1,
    },
    tags: {
        purpose: "example",
    },
});
const exampleEndpointServicebusTopic = new azure.iot.EndpointServicebusTopic("example", {
    resourceGroupName: example.name,
    iothubId: exampleIoTHub.id,
    name: "example",
    connectionString: exampleTopicAuthorizationRule.primaryConnectionString,
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_namespace = azure.servicebus.Namespace("example",
    name="exampleNamespace",
    location=example.location,
    resource_group_name=example.name,
    sku="Standard")
example_topic = azure.servicebus.Topic("example",
    name="exampleTopic",
    namespace_id=example_namespace.id)
example_topic_authorization_rule = azure.servicebus.TopicAuthorizationRule("example",
    name="exampleRule",
    topic_id=example_topic.id,
    listen=False,
    send=True,
    manage=False)
example_io_t_hub = azure.iot.IoTHub("example",
    name="exampleIothub",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "B1",
        "capacity": 1,
    },
    tags={
        "purpose": "example",
    })
example_endpoint_servicebus_topic = azure.iot.EndpointServicebusTopic("example",
    resource_group_name=example.name,
    iothub_id=example_io_t_hub.id,
    name="example",
    connection_string=example_topic_authorization_rule.primary_connection_string)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleNamespace = new Azure.ServiceBus.Namespace("example", new()
    {
        Name = "exampleNamespace",
        Location = example.Location,
        ResourceGroupName = example.Name,
        Sku = "Standard",
    });

    var exampleTopic = new Azure.ServiceBus.Topic("example", new()
    {
        Name = "exampleTopic",
        NamespaceId = exampleNamespace.Id,
    });

    var exampleTopicAuthorizationRule = new Azure.ServiceBus.TopicAuthorizationRule("example", new()
    {
        Name = "exampleRule",
        TopicId = exampleTopic.Id,
        Listen = false,
        Send = true,
        Manage = false,
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "exampleIothub",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "B1",
            Capacity = 1,
        },
        Tags = 
        {
            { "purpose", "example" },
        },
    });

    var exampleEndpointServicebusTopic = new Azure.Iot.EndpointServicebusTopic("example", new()
    {
        ResourceGroupName = example.Name,
        IothubId = exampleIoTHub.Id,
        Name = "example",
        ConnectionString = exampleTopicAuthorizationRule.PrimaryConnectionString,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/servicebus"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleNamespace, err := servicebus.NewNamespace(ctx, "example", &servicebus.NamespaceArgs{
			Name:              pulumi.String("exampleNamespace"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			Sku:               pulumi.String("Standard"),
		})
		if err != nil {
			return err
		}
		exampleTopic, err := servicebus.NewTopic(ctx, "example", &servicebus.TopicArgs{
			Name:        pulumi.String("exampleTopic"),
			NamespaceId: exampleNamespace.ID(),
		})
		if err != nil {
			return err
		}
		exampleTopicAuthorizationRule, err := servicebus.NewTopicAuthorizationRule(ctx, "example", &servicebus.TopicAuthorizationRuleArgs{
			Name:    pulumi.String("exampleRule"),
			TopicId: exampleTopic.ID(),
			Listen:  pulumi.Bool(false),
			Send:    pulumi.Bool(true),
			Manage:  pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("exampleIothub"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("B1"),
				Capacity: pulumi.Int(1),
			},
			Tags: pulumi.StringMap{
				"purpose": pulumi.String("example"),
			},
		})
		if err != nil {
			return err
		}
		_, err = iot.NewEndpointServicebusTopic(ctx, "example", &iot.EndpointServicebusTopicArgs{
			ResourceGroupName: example.Name,
			IothubId:          exampleIoTHub.ID(),
			Name:              pulumi.String("example"),
			ConnectionString:  exampleTopicAuthorizationRule.PrimaryConnectionString,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.servicebus.Namespace;
import com.pulumi.azure.servicebus.NamespaceArgs;
import com.pulumi.azure.servicebus.Topic;
import com.pulumi.azure.servicebus.TopicArgs;
import com.pulumi.azure.servicebus.TopicAuthorizationRule;
import com.pulumi.azure.servicebus.TopicAuthorizationRuleArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.EndpointServicebusTopic;
import com.pulumi.azure.iot.EndpointServicebusTopicArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleNamespace = new Namespace("exampleNamespace", NamespaceArgs.builder()
            .name("exampleNamespace")
            .location(example.location())
            .resourceGroupName(example.name())
            .sku("Standard")
            .build());

        var exampleTopic = new Topic("exampleTopic", TopicArgs.builder()
            .name("exampleTopic")
            .namespaceId(exampleNamespace.id())
            .build());

        var exampleTopicAuthorizationRule = new TopicAuthorizationRule("exampleTopicAuthorizationRule", TopicAuthorizationRuleArgs.builder()
            .name("exampleRule")
            .topicId(exampleTopic.id())
            .listen(false)
            .send(true)
            .manage(false)
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("exampleIothub")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("B1")
                .capacity("1")
                .build())
            .tags(Map.of("purpose", "example"))
            .build());

        var exampleEndpointServicebusTopic = new EndpointServicebusTopic("exampleEndpointServicebusTopic", EndpointServicebusTopicArgs.builder()
            .resourceGroupName(example.name())
            .iothubId(exampleIoTHub.id())
            .name("example")
            .connectionString(exampleTopicAuthorizationRule.primaryConnectionString())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleNamespace:
    type: azure:servicebus:Namespace
    name: example
    properties:
      name: exampleNamespace
      location: ${example.location}
      resourceGroupName: ${example.name}
      sku: Standard
  exampleTopic:
    type: azure:servicebus:Topic
    name: example
    properties:
      name: exampleTopic
      namespaceId: ${exampleNamespace.id}
  exampleTopicAuthorizationRule:
    type: azure:servicebus:TopicAuthorizationRule
    name: example
    properties:
      name: exampleRule
      topicId: ${exampleTopic.id}
      listen: false
      send: true
      manage: false
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: exampleIothub
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: B1
        capacity: '1'
      tags:
        purpose: example
  exampleEndpointServicebusTopic:
    type: azure:iot:EndpointServicebusTopic
    name: example
    properties:
      resourceGroupName: ${example.name}
      iothubId: ${exampleIoTHub.id}
      name: example
      connectionString: ${exampleTopicAuthorizationRule.primaryConnectionString}
```
<!--End PulumiCodeChooser -->

## Import

IoTHub ServiceBus Topic Endpoint can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/endpointServicebusTopic:EndpointServicebusTopic servicebus_topic1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/endpoints/servicebustopic_endpoint1
```

«
authenticationTypeB" Type used to authenticate against the Service Bus Topic endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
£
connectionStringB" The connection string for the endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `keyBased`.

endpointUriB" URI of the Service Bus endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.


entityPathB" Name of the Service Bus Topic. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.


identityIdB" ðID of the User Managed Identity used to authenticate against the Service Bus Topic endpoint.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
c
iothubId" SThe IoTHub ID for the endpoint. Changing this forces a new resource to be created.
ù
nameB" êThe name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
 
resourceGroupName" The name of the resource group under which the Service Bus Topic has been created. Changing this forces a new resource to be created.
"«
authenticationTypeB" Type used to authenticate against the Service Bus Topic endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
"£
connectionStringB" The connection string for the endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `keyBased`.
"
endpointUriB" URI of the Service Bus endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
"

entityPathB" Name of the Service Bus Topic. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
"

identityIdB" ðID of the User Managed Identity used to authenticate against the Service Bus Topic endpoint.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
"c
iothubId" SThe IoTHub ID for the endpoint. Changing this forces a new resource to be created.
"÷
name" êThe name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
" 
resourceGroupName" The name of the resource group under which the Service Bus Topic has been created. Changing this forces a new resource to be created.
*¨z
\
iotEndpointStorageContainer;azure:iot/endpointStorageContainer:EndpointStorageContainerûUManages an IotHub Storage Container Endpoint

> **NOTE:** Endpoints can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `azure.iot.IoTHub` resource is not supported.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "acctestcont",
    storageAccountName: exampleAccount.name,
    containerAccessType: "private",
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
});
const exampleEndpointStorageContainer = new azure.iot.EndpointStorageContainer("example", {
    resourceGroupName: example.name,
    iothubId: exampleIoTHub.id,
    name: "acctest",
    containerName: "acctestcont",
    connectionString: exampleAccount.primaryBlobConnectionString,
    fileNameFormat: "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
    batchFrequencyInSeconds: 60,
    maxChunkSizeInBytes: 10485760,
    encoding: "JSON",
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="example",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="acctestcont",
    storage_account_name=example_account.name,
    container_access_type="private")
example_io_t_hub = azure.iot.IoTHub("example",
    name="example",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    })
example_endpoint_storage_container = azure.iot.EndpointStorageContainer("example",
    resource_group_name=example.name,
    iothub_id=example_io_t_hub.id,
    name="acctest",
    container_name="acctestcont",
    connection_string=example_account.primary_blob_connection_string,
    file_name_format="{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
    batch_frequency_in_seconds=60,
    max_chunk_size_in_bytes=10485760,
    encoding="JSON")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "acctestcont",
        StorageAccountName = exampleAccount.Name,
        ContainerAccessType = "private",
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
    });

    var exampleEndpointStorageContainer = new Azure.Iot.EndpointStorageContainer("example", new()
    {
        ResourceGroupName = example.Name,
        IothubId = exampleIoTHub.Id,
        Name = "acctest",
        ContainerName = "acctestcont",
        ConnectionString = exampleAccount.PrimaryBlobConnectionString,
        FileNameFormat = "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
        BatchFrequencyInSeconds = 60,
        MaxChunkSizeInBytes = 10485760,
        Encoding = "JSON",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("example"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:                pulumi.String("acctestcont"),
			StorageAccountName:  exampleAccount.Name,
			ContainerAccessType: pulumi.String("private"),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
		})
		if err != nil {
			return err
		}
		_, err = iot.NewEndpointStorageContainer(ctx, "example", &iot.EndpointStorageContainerArgs{
			ResourceGroupName:       example.Name,
			IothubId:                exampleIoTHub.ID(),
			Name:                    pulumi.String("acctest"),
			ContainerName:           pulumi.String("acctestcont"),
			ConnectionString:        exampleAccount.PrimaryBlobConnectionString,
			FileNameFormat:          pulumi.String("{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}"),
			BatchFrequencyInSeconds: pulumi.Int(60),
			MaxChunkSizeInBytes:     pulumi.Int(10485760),
			Encoding:                pulumi.String("JSON"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.EndpointStorageContainer;
import com.pulumi.azure.iot.EndpointStorageContainerArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("acctestcont")
            .storageAccountName(exampleAccount.name())
            .containerAccessType("private")
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .build());

        var exampleEndpointStorageContainer = new EndpointStorageContainer("exampleEndpointStorageContainer", EndpointStorageContainerArgs.builder()
            .resourceGroupName(example.name())
            .iothubId(exampleIoTHub.id())
            .name("acctest")
            .containerName("acctestcont")
            .connectionString(exampleAccount.primaryBlobConnectionString())
            .fileNameFormat("{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}")
            .batchFrequencyInSeconds(60)
            .maxChunkSizeInBytes(10485760)
            .encoding("JSON")
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: acctestcont
      storageAccountName: ${exampleAccount.name}
      containerAccessType: private
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
  exampleEndpointStorageContainer:
    type: azure:iot:EndpointStorageContainer
    name: example
    properties:
      resourceGroupName: ${example.name}
      iothubId: ${exampleIoTHub.id}
      name: acctest
      containerName: acctestcont
      connectionString: ${exampleAccount.primaryBlobConnectionString}
      fileNameFormat: '{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}'
      batchFrequencyInSeconds: 60
      maxChunkSizeInBytes: 1.048576e+07
      encoding: JSON
```
<!--End PulumiCodeChooser -->

## Import

IoTHub Storage Container Endpoint can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/endpointStorageContainer:EndpointStorageContainer storage_container1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/endpoints/storage_container_endpoint1
```

¡
authenticationTypeB" Type used to authenticate against the storage endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
 
batchFrequencyInSecondsB Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds.
£
connectionStringB" The connection string for the endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `keyBased`.
K
containerName" 6The name of storage container in the storage account.
Ì
encodingB" ¹Encoding that is used to serialize messages to blobs. Supported values are `Avro`, `AvroDeflate` and `JSON`. Default value is `Avro`. Changing this forces a new resource to be created.
ñ
endpointUriB" ÛURI of the Storage Container endpoint. This corresponds to the `primary_blob_endpoint` of the parent storage account. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
ª
fileNameFormatB" File name format for the blob. All parameters are mandatory but can be reordered. Defaults to `{iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}`.
û

identityIdB" æID of the User Managed Identity used to authenticate against the storage endpoint.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
c
iothubId" SThe IoTHub ID for the endpoint. Changing this forces a new resource to be created.
¸
maxChunkSizeInBytesB Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).
ù
nameB" êThe name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
 
resourceGroupName" The name of the resource group under which the Storage Container has been created. Changing this forces a new resource to be created.
"¡
authenticationTypeB" Type used to authenticate against the storage endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
" 
batchFrequencyInSecondsB Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds.
"£
connectionStringB" The connection string for the endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `keyBased`.
"K
containerName" 6The name of storage container in the storage account.
"Ì
encodingB" ¹Encoding that is used to serialize messages to blobs. Supported values are `Avro`, `AvroDeflate` and `JSON`. Default value is `Avro`. Changing this forces a new resource to be created.
"ñ
endpointUriB" ÛURI of the Storage Container endpoint. This corresponds to the `primary_blob_endpoint` of the parent storage account. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
"ª
fileNameFormatB" File name format for the blob. All parameters are mandatory but can be reordered. Defaults to `{iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}`.
"û

identityIdB" æID of the User Managed Identity used to authenticate against the storage endpoint.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
"c
iothubId" SThe IoTHub ID for the endpoint. Changing this forces a new resource to be created.
"¸
maxChunkSizeInBytesB Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).
"÷
name" êThe name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
" 
resourceGroupName" The name of the resource group under which the Storage Container has been created. Changing this forces a new resource to be created.
*í
2
iot
Enrichmentazure:iot/enrichment:EnrichmentÎvManages an IotHub Enrichment

> **NOTE:** Enrichment can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.Enrichment` resources - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "examplestorageaccount",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "example",
    storageAccountName: exampleAccount.name,
    containerAccessType: "private",
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "exampleIothub",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
    tags: {
        purpose: "testing",
    },
});
const exampleEndpointStorageContainer = new azure.iot.EndpointStorageContainer("example", {
    resourceGroupName: example.name,
    iothubId: exampleIoTHub.id,
    name: "example",
    connectionString: exampleAccount.primaryBlobConnectionString,
    batchFrequencyInSeconds: 60,
    maxChunkSizeInBytes: 10485760,
    containerName: exampleContainer.name,
    encoding: "Avro",
    fileNameFormat: "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
});
const exampleRoute = new azure.iot.Route("example", {
    resourceGroupName: example.name,
    iothubName: exampleIoTHub.name,
    name: "example",
    source: "DeviceMessages",
    condition: "true",
    endpointNames: exampleEndpointStorageContainer.name,
    enabled: true,
});
const exampleEnrichment = new azure.iot.Enrichment("example", {
    resourceGroupName: example.name,
    iothubName: exampleIoTHub.name,
    key: "example",
    value: "my value",
    endpointNames: [exampleEndpointStorageContainer.name],
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="examplestorageaccount",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="example",
    storage_account_name=example_account.name,
    container_access_type="private")
example_io_t_hub = azure.iot.IoTHub("example",
    name="exampleIothub",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    },
    tags={
        "purpose": "testing",
    })
example_endpoint_storage_container = azure.iot.EndpointStorageContainer("example",
    resource_group_name=example.name,
    iothub_id=example_io_t_hub.id,
    name="example",
    connection_string=example_account.primary_blob_connection_string,
    batch_frequency_in_seconds=60,
    max_chunk_size_in_bytes=10485760,
    container_name=example_container.name,
    encoding="Avro",
    file_name_format="{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}")
example_route = azure.iot.Route("example",
    resource_group_name=example.name,
    iothub_name=example_io_t_hub.name,
    name="example",
    source="DeviceMessages",
    condition="true",
    endpoint_names=example_endpoint_storage_container.name,
    enabled=True)
example_enrichment = azure.iot.Enrichment("example",
    resource_group_name=example.name,
    iothub_name=example_io_t_hub.name,
    key="example",
    value="my value",
    endpoint_names=[example_endpoint_storage_container.name])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "examplestorageaccount",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "example",
        StorageAccountName = exampleAccount.Name,
        ContainerAccessType = "private",
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "exampleIothub",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
        Tags = 
        {
            { "purpose", "testing" },
        },
    });

    var exampleEndpointStorageContainer = new Azure.Iot.EndpointStorageContainer("example", new()
    {
        ResourceGroupName = example.Name,
        IothubId = exampleIoTHub.Id,
        Name = "example",
        ConnectionString = exampleAccount.PrimaryBlobConnectionString,
        BatchFrequencyInSeconds = 60,
        MaxChunkSizeInBytes = 10485760,
        ContainerName = exampleContainer.Name,
        Encoding = "Avro",
        FileNameFormat = "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
    });

    var exampleRoute = new Azure.Iot.Route("example", new()
    {
        ResourceGroupName = example.Name,
        IothubName = exampleIoTHub.Name,
        Name = "example",
        Source = "DeviceMessages",
        Condition = "true",
        EndpointNames = exampleEndpointStorageContainer.Name,
        Enabled = true,
    });

    var exampleEnrichment = new Azure.Iot.Enrichment("example", new()
    {
        ResourceGroupName = example.Name,
        IothubName = exampleIoTHub.Name,
        Key = "example",
        Value = "my value",
        EndpointNames = new[]
        {
            exampleEndpointStorageContainer.Name,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("examplestorageaccount"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:                pulumi.String("example"),
			StorageAccountName:  exampleAccount.Name,
			ContainerAccessType: pulumi.String("private"),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("exampleIothub"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
			Tags: pulumi.StringMap{
				"purpose": pulumi.String("testing"),
			},
		})
		if err != nil {
			return err
		}
		exampleEndpointStorageContainer, err := iot.NewEndpointStorageContainer(ctx, "example", &iot.EndpointStorageContainerArgs{
			ResourceGroupName:       example.Name,
			IothubId:                exampleIoTHub.ID(),
			Name:                    pulumi.String("example"),
			ConnectionString:        exampleAccount.PrimaryBlobConnectionString,
			BatchFrequencyInSeconds: pulumi.Int(60),
			MaxChunkSizeInBytes:     pulumi.Int(10485760),
			ContainerName:           exampleContainer.Name,
			Encoding:                pulumi.String("Avro"),
			FileNameFormat:          pulumi.String("{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}"),
		})
		if err != nil {
			return err
		}
		_, err = iot.NewRoute(ctx, "example", &iot.RouteArgs{
			ResourceGroupName: example.Name,
			IothubName:        exampleIoTHub.Name,
			Name:              pulumi.String("example"),
			Source:            pulumi.String("DeviceMessages"),
			Condition:         pulumi.String("true"),
			EndpointNames:     exampleEndpointStorageContainer.Name,
			Enabled:           pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		_, err = iot.NewEnrichment(ctx, "example", &iot.EnrichmentArgs{
			ResourceGroupName: example.Name,
			IothubName:        exampleIoTHub.Name,
			Key:               pulumi.String("example"),
			Value:             pulumi.String("my value"),
			EndpointNames: pulumi.StringArray{
				exampleEndpointStorageContainer.Name,
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.EndpointStorageContainer;
import com.pulumi.azure.iot.EndpointStorageContainerArgs;
import com.pulumi.azure.iot.Route;
import com.pulumi.azure.iot.RouteArgs;
import com.pulumi.azure.iot.Enrichment;
import com.pulumi.azure.iot.EnrichmentArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("examplestorageaccount")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("example")
            .storageAccountName(exampleAccount.name())
            .containerAccessType("private")
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("exampleIothub")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .tags(Map.of("purpose", "testing"))
            .build());

        var exampleEndpointStorageContainer = new EndpointStorageContainer("exampleEndpointStorageContainer", EndpointStorageContainerArgs.builder()
            .resourceGroupName(example.name())
            .iothubId(exampleIoTHub.id())
            .name("example")
            .connectionString(exampleAccount.primaryBlobConnectionString())
            .batchFrequencyInSeconds(60)
            .maxChunkSizeInBytes(10485760)
            .containerName(exampleContainer.name())
            .encoding("Avro")
            .fileNameFormat("{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}")
            .build());

        var exampleRoute = new Route("exampleRoute", RouteArgs.builder()
            .resourceGroupName(example.name())
            .iothubName(exampleIoTHub.name())
            .name("example")
            .source("DeviceMessages")
            .condition("true")
            .endpointNames(exampleEndpointStorageContainer.name())
            .enabled(true)
            .build());

        var exampleEnrichment = new Enrichment("exampleEnrichment", EnrichmentArgs.builder()
            .resourceGroupName(example.name())
            .iothubName(exampleIoTHub.name())
            .key("example")
            .value("my value")
            .endpointNames(exampleEndpointStorageContainer.name())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: examplestorageaccount
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: example
      storageAccountName: ${exampleAccount.name}
      containerAccessType: private
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: exampleIothub
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
      tags:
        purpose: testing
  exampleEndpointStorageContainer:
    type: azure:iot:EndpointStorageContainer
    name: example
    properties:
      resourceGroupName: ${example.name}
      iothubId: ${exampleIoTHub.id}
      name: example
      connectionString: ${exampleAccount.primaryBlobConnectionString}
      batchFrequencyInSeconds: 60
      maxChunkSizeInBytes: 1.048576e+07
      containerName: ${exampleContainer.name}
      encoding: Avro
      fileNameFormat: '{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}'
  exampleRoute:
    type: azure:iot:Route
    name: example
    properties:
      resourceGroupName: ${example.name}
      iothubName: ${exampleIoTHub.name}
      name: example
      source: DeviceMessages
      condition: 'true'
      endpointNames: ${exampleEndpointStorageContainer.name}
      enabled: true
  exampleEnrichment:
    type: azure:iot:Enrichment
    name: example
    properties:
      resourceGroupName: ${example.name}
      iothubName: ${exampleIoTHub.name}
      key: example
      value: my value
      endpointNames:
        - ${exampleEndpointStorageContainer.name}
```
<!--End PulumiCodeChooser -->

## Import

IoTHub Enrichment can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/enrichment:Enrichment enrichment1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/enrichments/enrichment1
```

E
endpointNames*" .The list of endpoints which will be enriched.
h

iothubName" VThe IoTHub name of the enrichment. Changing this forces a new resource to be created.
Y
key" NThe key of the enrichment. Changing this forces a new resource to be created.

resourceGroupName" ~The name of the resource group under which the IoTHub resource is created. Changing this forces a new resource to be created.
Ë
value" ½The value of the enrichment. Value can be any static string, the name of the IoT hub sending the message (use `$iothubname`) or information from the device twin (ex: `$twin.tags.latitude`)
"E
endpointNames*" .The list of endpoints which will be enriched.
"h

iothubName" VThe IoTHub name of the enrichment. Changing this forces a new resource to be created.
"Y
key" NThe key of the enrichment. Changing this forces a new resource to be created.
"
resourceGroupName" ~The name of the resource group under which the IoTHub resource is created. Changing this forces a new resource to be created.
"Ë
value" ½The value of the enrichment. Value can be any static string, the name of the IoT hub sending the message (use `$iothubname`) or information from the device twin (ex: `$twin.tags.latitude`)
*øw
;
iotFallbackRoute%azure:iot/fallbackRoute:FallbackRouteÐgManages an IotHub Fallback Route

## Disclaimers

> **Note:** Fallback route can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.FallbackRoute` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.

> **Note:** Since this resource is provisioned by default, the Azure Provider will not check for the presence of an existing resource prior to attempting to create it.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "examplestorageaccount",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "example",
    storageAccountName: exampleAccount.name,
    containerAccessType: "private",
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "exampleIothub",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
    tags: {
        purpose: "testing",
    },
});
const exampleEndpointStorageContainer = new azure.iot.EndpointStorageContainer("example", {
    resourceGroupName: example.name,
    iothubId: exampleIoTHub.id,
    name: "example",
    connectionString: exampleAccount.primaryBlobConnectionString,
    batchFrequencyInSeconds: 60,
    maxChunkSizeInBytes: 10485760,
    containerName: exampleContainer.name,
    encoding: "Avro",
    fileNameFormat: "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
});
const exampleFallbackRoute = new azure.iot.FallbackRoute("example", {
    resourceGroupName: example.name,
    iothubName: exampleIoTHub.name,
    condition: "true",
    endpointNames: exampleEndpointStorageContainer.name,
    enabled: true,
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="examplestorageaccount",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="example",
    storage_account_name=example_account.name,
    container_access_type="private")
example_io_t_hub = azure.iot.IoTHub("example",
    name="exampleIothub",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    },
    tags={
        "purpose": "testing",
    })
example_endpoint_storage_container = azure.iot.EndpointStorageContainer("example",
    resource_group_name=example.name,
    iothub_id=example_io_t_hub.id,
    name="example",
    connection_string=example_account.primary_blob_connection_string,
    batch_frequency_in_seconds=60,
    max_chunk_size_in_bytes=10485760,
    container_name=example_container.name,
    encoding="Avro",
    file_name_format="{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}")
example_fallback_route = azure.iot.FallbackRoute("example",
    resource_group_name=example.name,
    iothub_name=example_io_t_hub.name,
    condition="true",
    endpoint_names=example_endpoint_storage_container.name,
    enabled=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "examplestorageaccount",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "example",
        StorageAccountName = exampleAccount.Name,
        ContainerAccessType = "private",
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "exampleIothub",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
        Tags = 
        {
            { "purpose", "testing" },
        },
    });

    var exampleEndpointStorageContainer = new Azure.Iot.EndpointStorageContainer("example", new()
    {
        ResourceGroupName = example.Name,
        IothubId = exampleIoTHub.Id,
        Name = "example",
        ConnectionString = exampleAccount.PrimaryBlobConnectionString,
        BatchFrequencyInSeconds = 60,
        MaxChunkSizeInBytes = 10485760,
        ContainerName = exampleContainer.Name,
        Encoding = "Avro",
        FileNameFormat = "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
    });

    var exampleFallbackRoute = new Azure.Iot.FallbackRoute("example", new()
    {
        ResourceGroupName = example.Name,
        IothubName = exampleIoTHub.Name,
        Condition = "true",
        EndpointNames = exampleEndpointStorageContainer.Name,
        Enabled = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("examplestorageaccount"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:                pulumi.String("example"),
			StorageAccountName:  exampleAccount.Name,
			ContainerAccessType: pulumi.String("private"),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("exampleIothub"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
			Tags: pulumi.StringMap{
				"purpose": pulumi.String("testing"),
			},
		})
		if err != nil {
			return err
		}
		exampleEndpointStorageContainer, err := iot.NewEndpointStorageContainer(ctx, "example", &iot.EndpointStorageContainerArgs{
			ResourceGroupName:       example.Name,
			IothubId:                exampleIoTHub.ID(),
			Name:                    pulumi.String("example"),
			ConnectionString:        exampleAccount.PrimaryBlobConnectionString,
			BatchFrequencyInSeconds: pulumi.Int(60),
			MaxChunkSizeInBytes:     pulumi.Int(10485760),
			ContainerName:           exampleContainer.Name,
			Encoding:                pulumi.String("Avro"),
			FileNameFormat:          pulumi.String("{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}"),
		})
		if err != nil {
			return err
		}
		_, err = iot.NewFallbackRoute(ctx, "example", &iot.FallbackRouteArgs{
			ResourceGroupName: example.Name,
			IothubName:        exampleIoTHub.Name,
			Condition:         pulumi.String("true"),
			EndpointNames:     exampleEndpointStorageContainer.Name,
			Enabled:           pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.EndpointStorageContainer;
import com.pulumi.azure.iot.EndpointStorageContainerArgs;
import com.pulumi.azure.iot.FallbackRoute;
import com.pulumi.azure.iot.FallbackRouteArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("examplestorageaccount")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("example")
            .storageAccountName(exampleAccount.name())
            .containerAccessType("private")
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("exampleIothub")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .tags(Map.of("purpose", "testing"))
            .build());

        var exampleEndpointStorageContainer = new EndpointStorageContainer("exampleEndpointStorageContainer", EndpointStorageContainerArgs.builder()
            .resourceGroupName(example.name())
            .iothubId(exampleIoTHub.id())
            .name("example")
            .connectionString(exampleAccount.primaryBlobConnectionString())
            .batchFrequencyInSeconds(60)
            .maxChunkSizeInBytes(10485760)
            .containerName(exampleContainer.name())
            .encoding("Avro")
            .fileNameFormat("{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}")
            .build());

        var exampleFallbackRoute = new FallbackRoute("exampleFallbackRoute", FallbackRouteArgs.builder()
            .resourceGroupName(example.name())
            .iothubName(exampleIoTHub.name())
            .condition("true")
            .endpointNames(exampleEndpointStorageContainer.name())
            .enabled(true)
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: examplestorageaccount
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: example
      storageAccountName: ${exampleAccount.name}
      containerAccessType: private
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: exampleIothub
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
      tags:
        purpose: testing
  exampleEndpointStorageContainer:
    type: azure:iot:EndpointStorageContainer
    name: example
    properties:
      resourceGroupName: ${example.name}
      iothubId: ${exampleIoTHub.id}
      name: example
      connectionString: ${exampleAccount.primaryBlobConnectionString}
      batchFrequencyInSeconds: 60
      maxChunkSizeInBytes: 1.048576e+07
      containerName: ${exampleContainer.name}
      encoding: Avro
      fileNameFormat: '{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}'
  exampleFallbackRoute:
    type: azure:iot:FallbackRoute
    name: example
    properties:
      resourceGroupName: ${example.name}
      iothubName: ${exampleIoTHub.name}
      condition: 'true'
      endpointNames: ${exampleEndpointStorageContainer.name}
      enabled: true
```
<!--End PulumiCodeChooser -->

## Import

IoTHub Fallback Route can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/fallbackRoute:FallbackRoute route1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/fallbackRoute/default
```

Á
	conditionB" ­The condition that is evaluated to apply the routing rule. For grammar, see: <https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language>. Defaults to `true`.
F
enabled
 7Used to specify whether the fallback route is enabled.

endpointNames" mThe endpoints to which messages that satisfy the condition are routed. Currently only 1 endpoint is allowed.


iothubName" pThe name of the IoTHub to which this Fallback Route belongs. Changing this forces a new resource to be created.
º
resourceGroupName"  The name of the resource group under which the IotHub Storage Container Endpoint resource has to be created. Changing this forces a new resource to be created.

sourceB" The source that the routing rule is to be applied to. Possible values include: `DeviceConnectionStateEvents`, `DeviceJobLifecycleEvents`, `DeviceLifecycleEvents`, `DeviceMessages`, `DigitalTwinChangeEvents`, `Invalid`, `TwinChangeEvents`. Defaults to `DeviceMessages`.
"Á
	conditionB" ­The condition that is evaluated to apply the routing rule. For grammar, see: <https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language>. Defaults to `true`.
"F
enabled
 7Used to specify whether the fallback route is enabled.
"
endpointNames" mThe endpoints to which messages that satisfy the condition are routed. Currently only 1 endpoint is allowed.
"

iothubName" pThe name of the IoTHub to which this Fallback Route belongs. Changing this forces a new resource to be created.
"º
resourceGroupName"  The name of the resource group under which the IotHub Storage Container Endpoint resource has to be created. Changing this forces a new resource to be created.
"
sourceB" The source that the routing rule is to be applied to. Possible values include: `DeviceConnectionStateEvents`, `DeviceJobLifecycleEvents`, `DeviceLifecycleEvents`, `DeviceMessages`, `DigitalTwinChangeEvents`, `Invalid`, `TwinChangeEvents`. Defaults to `DeviceMessages`.
*g
2
iot
FileUploadazure:iot/fileUpload:FileUploadòFManages the File Upload of an IoT Hub.

> **NOTE:** File upload can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.FileUpload` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "examplestorage",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "examplecontainer",
    storageAccountName: exampleAccount.name,
    containerAccessType: "private",
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
});
const exampleFileUpload = new azure.iot.FileUpload("example", {
    iothubId: exampleIoTHub.id,
    connectionString: exampleAccount.primaryBlobConnectionString,
    containerName: exampleContainer.name,
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="examplestorage",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="examplecontainer",
    storage_account_name=example_account.name,
    container_access_type="private")
example_io_t_hub = azure.iot.IoTHub("example",
    name="example",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    })
example_file_upload = azure.iot.FileUpload("example",
    iothub_id=example_io_t_hub.id,
    connection_string=example_account.primary_blob_connection_string,
    container_name=example_container.name)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "examplestorage",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "examplecontainer",
        StorageAccountName = exampleAccount.Name,
        ContainerAccessType = "private",
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
    });

    var exampleFileUpload = new Azure.Iot.FileUpload("example", new()
    {
        IothubId = exampleIoTHub.Id,
        ConnectionString = exampleAccount.PrimaryBlobConnectionString,
        ContainerName = exampleContainer.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("examplestorage"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:                pulumi.String("examplecontainer"),
			StorageAccountName:  exampleAccount.Name,
			ContainerAccessType: pulumi.String("private"),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
		})
		if err != nil {
			return err
		}
		_, err = iot.NewFileUpload(ctx, "example", &iot.FileUploadArgs{
			IothubId:         exampleIoTHub.ID(),
			ConnectionString: exampleAccount.PrimaryBlobConnectionString,
			ContainerName:    exampleContainer.Name,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.FileUpload;
import com.pulumi.azure.iot.FileUploadArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("examplestorage")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("examplecontainer")
            .storageAccountName(exampleAccount.name())
            .containerAccessType("private")
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .build());

        var exampleFileUpload = new FileUpload("exampleFileUpload", FileUploadArgs.builder()
            .iothubId(exampleIoTHub.id())
            .connectionString(exampleAccount.primaryBlobConnectionString())
            .containerName(exampleContainer.name())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: examplestorage
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: examplecontainer
      storageAccountName: ${exampleAccount.name}
      containerAccessType: private
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
  exampleFileUpload:
    type: azure:iot:FileUpload
    name: example
    properties:
      iothubId: ${exampleIoTHub.id}
      connectionString: ${exampleAccount.primaryBlobConnectionString}
      containerName: ${exampleContainer.name}
```
<!--End PulumiCodeChooser -->

## Import

IoT Hub File Uploads can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/fileUpload:FileUpload example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1
```

¤
authenticationTypeB" The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
i
connectionString" QThe connection string for the Azure Storage account to which files are uploaded.
º
containerName" ¤The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connection_string` specified.
¦

defaultTtlB" The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.


identityIdB" ýThe ID of the User Managed Identity used to authenticate against the storage account.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the IoT Hub. If `identity_id` is omitted when `authentication_type` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
Y
iothubId" IThe ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
ô
lockDurationB" ÝThe lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.

maxDeliveryCountB jThe number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
}
notificationsEnabledB
 _Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.

sasTtlB" þThe period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
"¤
authenticationTypeB" The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
"i
connectionString" QThe connection string for the Azure Storage account to which files are uploaded.
"º
containerName" ¤The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connection_string` specified.
"¦

defaultTtlB" The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
"

identityIdB" ýThe ID of the User Managed Identity used to authenticate against the storage account.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the IoT Hub. If `identity_id` is omitted when `authentication_type` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
"Y
iothubId" IThe ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
"ô
lockDurationB" ÝThe lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
"
maxDeliveryCountB jThe number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
"}
notificationsEnabledB
 _Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
"
sasTtlB" þThe period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
*¿î
&
iotIoTHubazure:iot/ioTHub:IoTHub­ÆManages an IotHub

> **NOTE:** Endpoints can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `azure.iot.IoTHub` resource is not supported.

> **NOTE:** Routes can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.Route` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.

> **NOTE:** Enrichments can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.Enrichment` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.

> **NOTE:** Fallback route can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.FallbackRoute` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.

> **NOTE:** File upload can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.FileUpload` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "examplestorage",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "examplecontainer",
    storageAccountName: exampleAccount.name,
    containerAccessType: "private",
});
const exampleEventHubNamespace = new azure.eventhub.EventHubNamespace("example", {
    name: "example-namespace",
    resourceGroupName: example.name,
    location: example.location,
    sku: "Basic",
});
const exampleEventHub = new azure.eventhub.EventHub("example", {
    name: "example-eventhub",
    resourceGroupName: example.name,
    namespaceName: exampleEventHubNamespace.name,
    partitionCount: 2,
    messageRetention: 1,
});
const exampleAuthorizationRule = new azure.eventhub.AuthorizationRule("example", {
    resourceGroupName: example.name,
    namespaceName: exampleEventHubNamespace.name,
    eventhubName: exampleEventHub.name,
    name: "acctest",
    send: true,
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "Example-IoTHub",
    resourceGroupName: example.name,
    location: example.location,
    localAuthenticationEnabled: false,
    sku: {
        name: "S1",
        capacity: 1,
    },
    endpoints: [
        {
            type: "AzureIotHub.StorageContainer",
            connectionString: exampleAccount.primaryBlobConnectionString,
            name: "export",
            batchFrequencyInSeconds: 60,
            maxChunkSizeInBytes: 10485760,
            containerName: exampleContainer.name,
            encoding: "Avro",
            fileNameFormat: "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
        },
        {
            type: "AzureIotHub.EventHub",
            connectionString: exampleAuthorizationRule.primaryConnectionString,
            name: "export2",
        },
    ],
    routes: [
        {
            name: "export",
            source: "DeviceMessages",
            condition: "true",
            endpointNames: ["export"],
            enabled: true,
        },
        {
            name: "export2",
            source: "DeviceMessages",
            condition: "true",
            endpointNames: ["export2"],
            enabled: true,
        },
    ],
    enrichments: [{
        key: "tenant",
        value: "$twin.tags.Tenant",
        endpointNames: [
            "export",
            "export2",
        ],
    }],
    cloudToDevice: {
        maxDeliveryCount: 30,
        defaultTtl: "PT1H",
        feedbacks: [{
            timeToLive: "PT1H10M",
            maxDeliveryCount: 15,
            lockDuration: "PT30S",
        }],
    },
    tags: {
        purpose: "testing",
    },
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="examplestorage",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="examplecontainer",
    storage_account_name=example_account.name,
    container_access_type="private")
example_event_hub_namespace = azure.eventhub.EventHubNamespace("example",
    name="example-namespace",
    resource_group_name=example.name,
    location=example.location,
    sku="Basic")
example_event_hub = azure.eventhub.EventHub("example",
    name="example-eventhub",
    resource_group_name=example.name,
    namespace_name=example_event_hub_namespace.name,
    partition_count=2,
    message_retention=1)
example_authorization_rule = azure.eventhub.AuthorizationRule("example",
    resource_group_name=example.name,
    namespace_name=example_event_hub_namespace.name,
    eventhub_name=example_event_hub.name,
    name="acctest",
    send=True)
example_io_t_hub = azure.iot.IoTHub("example",
    name="Example-IoTHub",
    resource_group_name=example.name,
    location=example.location,
    local_authentication_enabled=False,
    sku={
        "name": "S1",
        "capacity": 1,
    },
    endpoints=[
        {
            "type": "AzureIotHub.StorageContainer",
            "connection_string": example_account.primary_blob_connection_string,
            "name": "export",
            "batch_frequency_in_seconds": 60,
            "max_chunk_size_in_bytes": 10485760,
            "container_name": example_container.name,
            "encoding": "Avro",
            "file_name_format": "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
        },
        {
            "type": "AzureIotHub.EventHub",
            "connection_string": example_authorization_rule.primary_connection_string,
            "name": "export2",
        },
    ],
    routes=[
        {
            "name": "export",
            "source": "DeviceMessages",
            "condition": "true",
            "endpoint_names": ["export"],
            "enabled": True,
        },
        {
            "name": "export2",
            "source": "DeviceMessages",
            "condition": "true",
            "endpoint_names": ["export2"],
            "enabled": True,
        },
    ],
    enrichments=[{
        "key": "tenant",
        "value": "$twin.tags.Tenant",
        "endpoint_names": [
            "export",
            "export2",
        ],
    }],
    cloud_to_device={
        "max_delivery_count": 30,
        "default_ttl": "PT1H",
        "feedbacks": [{
            "time_to_live": "PT1H10M",
            "max_delivery_count": 15,
            "lock_duration": "PT30S",
        }],
    },
    tags={
        "purpose": "testing",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "examplestorage",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "examplecontainer",
        StorageAccountName = exampleAccount.Name,
        ContainerAccessType = "private",
    });

    var exampleEventHubNamespace = new Azure.EventHub.EventHubNamespace("example", new()
    {
        Name = "example-namespace",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = "Basic",
    });

    var exampleEventHub = new Azure.EventHub.EventHub("example", new()
    {
        Name = "example-eventhub",
        ResourceGroupName = example.Name,
        NamespaceName = exampleEventHubNamespace.Name,
        PartitionCount = 2,
        MessageRetention = 1,
    });

    var exampleAuthorizationRule = new Azure.EventHub.AuthorizationRule("example", new()
    {
        ResourceGroupName = example.Name,
        NamespaceName = exampleEventHubNamespace.Name,
        EventhubName = exampleEventHub.Name,
        Name = "acctest",
        Send = true,
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "Example-IoTHub",
        ResourceGroupName = example.Name,
        Location = example.Location,
        LocalAuthenticationEnabled = false,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
        Endpoints = new[]
        {
            new Azure.Iot.Inputs.IoTHubEndpointArgs
            {
                Type = "AzureIotHub.StorageContainer",
                ConnectionString = exampleAccount.PrimaryBlobConnectionString,
                Name = "export",
                BatchFrequencyInSeconds = 60,
                MaxChunkSizeInBytes = 10485760,
                ContainerName = exampleContainer.Name,
                Encoding = "Avro",
                FileNameFormat = "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
            },
            new Azure.Iot.Inputs.IoTHubEndpointArgs
            {
                Type = "AzureIotHub.EventHub",
                ConnectionString = exampleAuthorizationRule.PrimaryConnectionString,
                Name = "export2",
            },
        },
        Routes = new[]
        {
            new Azure.Iot.Inputs.IoTHubRouteArgs
            {
                Name = "export",
                Source = "DeviceMessages",
                Condition = "true",
                EndpointNames = new[]
                {
                    "export",
                },
                Enabled = true,
            },
            new Azure.Iot.Inputs.IoTHubRouteArgs
            {
                Name = "export2",
                Source = "DeviceMessages",
                Condition = "true",
                EndpointNames = new[]
                {
                    "export2",
                },
                Enabled = true,
            },
        },
        Enrichments = new[]
        {
            new Azure.Iot.Inputs.IoTHubEnrichmentArgs
            {
                Key = "tenant",
                Value = "$twin.tags.Tenant",
                EndpointNames = new[]
                {
                    "export",
                    "export2",
                },
            },
        },
        CloudToDevice = new Azure.Iot.Inputs.IoTHubCloudToDeviceArgs
        {
            MaxDeliveryCount = 30,
            DefaultTtl = "PT1H",
            Feedbacks = new[]
            {
                new Azure.Iot.Inputs.IoTHubCloudToDeviceFeedbackArgs
                {
                    TimeToLive = "PT1H10M",
                    MaxDeliveryCount = 15,
                    LockDuration = "PT30S",
                },
            },
        },
        Tags = 
        {
            { "purpose", "testing" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/eventhub"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("examplestorage"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:                pulumi.String("examplecontainer"),
			StorageAccountName:  exampleAccount.Name,
			ContainerAccessType: pulumi.String("private"),
		})
		if err != nil {
			return err
		}
		exampleEventHubNamespace, err := eventhub.NewEventHubNamespace(ctx, "example", &eventhub.EventHubNamespaceArgs{
			Name:              pulumi.String("example-namespace"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku:               pulumi.String("Basic"),
		})
		if err != nil {
			return err
		}
		exampleEventHub, err := eventhub.NewEventHub(ctx, "example", &eventhub.EventHubArgs{
			Name:              pulumi.String("example-eventhub"),
			ResourceGroupName: example.Name,
			NamespaceName:     exampleEventHubNamespace.Name,
			PartitionCount:    pulumi.Int(2),
			MessageRetention:  pulumi.Int(1),
		})
		if err != nil {
			return err
		}
		exampleAuthorizationRule, err := eventhub.NewAuthorizationRule(ctx, "example", &eventhub.AuthorizationRuleArgs{
			ResourceGroupName: example.Name,
			NamespaceName:     exampleEventHubNamespace.Name,
			EventhubName:      exampleEventHub.Name,
			Name:              pulumi.String("acctest"),
			Send:              pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		_, err = iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:                       pulumi.String("Example-IoTHub"),
			ResourceGroupName:          example.Name,
			Location:                   example.Location,
			LocalAuthenticationEnabled: pulumi.Bool(false),
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
			Endpoints: iot.IoTHubEndpointArray{
				&iot.IoTHubEndpointArgs{
					Type:                    pulumi.String("AzureIotHub.StorageContainer"),
					ConnectionString:        exampleAccount.PrimaryBlobConnectionString,
					Name:                    pulumi.String("export"),
					BatchFrequencyInSeconds: pulumi.Int(60),
					MaxChunkSizeInBytes:     pulumi.Int(10485760),
					ContainerName:           exampleContainer.Name,
					Encoding:                pulumi.String("Avro"),
					FileNameFormat:          pulumi.String("{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}"),
				},
				&iot.IoTHubEndpointArgs{
					Type:             pulumi.String("AzureIotHub.EventHub"),
					ConnectionString: exampleAuthorizationRule.PrimaryConnectionString,
					Name:             pulumi.String("export2"),
				},
			},
			Routes: iot.IoTHubRouteArray{
				&iot.IoTHubRouteArgs{
					Name:      pulumi.String("export"),
					Source:    pulumi.String("DeviceMessages"),
					Condition: pulumi.String("true"),
					EndpointNames: pulumi.StringArray{
						pulumi.String("export"),
					},
					Enabled: pulumi.Bool(true),
				},
				&iot.IoTHubRouteArgs{
					Name:      pulumi.String("export2"),
					Source:    pulumi.String("DeviceMessages"),
					Condition: pulumi.String("true"),
					EndpointNames: pulumi.StringArray{
						pulumi.String("export2"),
					},
					Enabled: pulumi.Bool(true),
				},
			},
			Enrichments: iot.IoTHubEnrichmentArray{
				&iot.IoTHubEnrichmentArgs{
					Key:   pulumi.String("tenant"),
					Value: pulumi.String("$twin.tags.Tenant"),
					EndpointNames: pulumi.StringArray{
						pulumi.String("export"),
						pulumi.String("export2"),
					},
				},
			},
			CloudToDevice: &iot.IoTHubCloudToDeviceArgs{
				MaxDeliveryCount: pulumi.Int(30),
				DefaultTtl:       pulumi.String("PT1H"),
				Feedbacks: iot.IoTHubCloudToDeviceFeedbackArray{
					&iot.IoTHubCloudToDeviceFeedbackArgs{
						TimeToLive:       pulumi.String("PT1H10M"),
						MaxDeliveryCount: pulumi.Int(15),
						LockDuration:     pulumi.String("PT30S"),
					},
				},
			},
			Tags: pulumi.StringMap{
				"purpose": pulumi.String("testing"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azure.eventhub.EventHubNamespace;
import com.pulumi.azure.eventhub.EventHubNamespaceArgs;
import com.pulumi.azure.eventhub.EventHub;
import com.pulumi.azure.eventhub.EventHubArgs;
import com.pulumi.azure.eventhub.AuthorizationRule;
import com.pulumi.azure.eventhub.AuthorizationRuleArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.inputs.IoTHubEndpointArgs;
import com.pulumi.azure.iot.inputs.IoTHubRouteArgs;
import com.pulumi.azure.iot.inputs.IoTHubEnrichmentArgs;
import com.pulumi.azure.iot.inputs.IoTHubCloudToDeviceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("examplestorage")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("examplecontainer")
            .storageAccountName(exampleAccount.name())
            .containerAccessType("private")
            .build());

        var exampleEventHubNamespace = new EventHubNamespace("exampleEventHubNamespace", EventHubNamespaceArgs.builder()
            .name("example-namespace")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku("Basic")
            .build());

        var exampleEventHub = new EventHub("exampleEventHub", EventHubArgs.builder()
            .name("example-eventhub")
            .resourceGroupName(example.name())
            .namespaceName(exampleEventHubNamespace.name())
            .partitionCount(2)
            .messageRetention(1)
            .build());

        var exampleAuthorizationRule = new AuthorizationRule("exampleAuthorizationRule", AuthorizationRuleArgs.builder()
            .resourceGroupName(example.name())
            .namespaceName(exampleEventHubNamespace.name())
            .eventhubName(exampleEventHub.name())
            .name("acctest")
            .send(true)
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("Example-IoTHub")
            .resourceGroupName(example.name())
            .location(example.location())
            .localAuthenticationEnabled(false)
            .sku(IoTHubSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .endpoints(            
                IoTHubEndpointArgs.builder()
                    .type("AzureIotHub.StorageContainer")
                    .connectionString(exampleAccount.primaryBlobConnectionString())
                    .name("export")
                    .batchFrequencyInSeconds(60)
                    .maxChunkSizeInBytes(10485760)
                    .containerName(exampleContainer.name())
                    .encoding("Avro")
                    .fileNameFormat("{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}")
                    .build(),
                IoTHubEndpointArgs.builder()
                    .type("AzureIotHub.EventHub")
                    .connectionString(exampleAuthorizationRule.primaryConnectionString())
                    .name("export2")
                    .build())
            .routes(            
                IoTHubRouteArgs.builder()
                    .name("export")
                    .source("DeviceMessages")
                    .condition("true")
                    .endpointNames("export")
                    .enabled(true)
                    .build(),
                IoTHubRouteArgs.builder()
                    .name("export2")
                    .source("DeviceMessages")
                    .condition("true")
                    .endpointNames("export2")
                    .enabled(true)
                    .build())
            .enrichments(IoTHubEnrichmentArgs.builder()
                .key("tenant")
                .value("$twin.tags.Tenant")
                .endpointNames(                
                    "export",
                    "export2")
                .build())
            .cloudToDevice(IoTHubCloudToDeviceArgs.builder()
                .maxDeliveryCount(30)
                .defaultTtl("PT1H")
                .feedbacks(IoTHubCloudToDeviceFeedbackArgs.builder()
                    .timeToLive("PT1H10M")
                    .maxDeliveryCount(15)
                    .lockDuration("PT30S")
                    .build())
                .build())
            .tags(Map.of("purpose", "testing"))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: examplestorage
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: examplecontainer
      storageAccountName: ${exampleAccount.name}
      containerAccessType: private
  exampleEventHubNamespace:
    type: azure:eventhub:EventHubNamespace
    name: example
    properties:
      name: example-namespace
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku: Basic
  exampleEventHub:
    type: azure:eventhub:EventHub
    name: example
    properties:
      name: example-eventhub
      resourceGroupName: ${example.name}
      namespaceName: ${exampleEventHubNamespace.name}
      partitionCount: 2
      messageRetention: 1
  exampleAuthorizationRule:
    type: azure:eventhub:AuthorizationRule
    name: example
    properties:
      resourceGroupName: ${example.name}
      namespaceName: ${exampleEventHubNamespace.name}
      eventhubName: ${exampleEventHub.name}
      name: acctest
      send: true
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: Example-IoTHub
      resourceGroupName: ${example.name}
      location: ${example.location}
      localAuthenticationEnabled: false
      sku:
        name: S1
        capacity: '1'
      endpoints:
        - type: AzureIotHub.StorageContainer
          connectionString: ${exampleAccount.primaryBlobConnectionString}
          name: export
          batchFrequencyInSeconds: 60
          maxChunkSizeInBytes: 1.048576e+07
          containerName: ${exampleContainer.name}
          encoding: Avro
          fileNameFormat: '{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}'
        - type: AzureIotHub.EventHub
          connectionString: ${exampleAuthorizationRule.primaryConnectionString}
          name: export2
      routes:
        - name: export
          source: DeviceMessages
          condition: 'true'
          endpointNames:
            - export
          enabled: true
        - name: export2
          source: DeviceMessages
          condition: 'true'
          endpointNames:
            - export2
          enabled: true
      enrichments:
        - key: tenant
          value: $twin.tags.Tenant
          endpointNames:
            - export
            - export2
      cloudToDevice:
        maxDeliveryCount: 30
        defaultTtl: PT1H
        feedbacks:
          - timeToLive: PT1H10M
            maxDeliveryCount: 15
            lockDuration: PT30S
      tags:
        purpose: testing
```
<!--End PulumiCodeChooser -->

## Import

IoTHubs can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/ioTHub:IoTHub hub1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1
```

d
cloudToDeviceSBQ:O
M
iotIoTHubCloudToDevice1azure:iot/IoTHubCloudToDevice:IoTHubCloudToDevice{
	endpointsFBD*B:@
>
iotIoTHubEndpoint'azure:iot/IoTHubEndpoint:IoTHubEndpoint&An `endpoint` block as defined below.
[
enrichmentsLBJ*H:F
D
iotIoTHubEnrichment+azure:iot/IoTHubEnrichment:IoTHubEnrichment
eventHubPartitionCountB uThe number of device-to-cloud partitions used by backing event hubs. Must be between `2` and `128`. Defaults to `4`.
w
eventHubRetentionInDaysB VThe event hub retention to use in days. Must be between `1` and `7`. Defaults to `1`.

fallbackRouteSBQ:O
M
iotIoTHubFallbackRoute1azure:iot/IoTHubFallbackRoute:IoTHubFallbackRouteµA `fallback_route` block as defined below. If the fallback route is enabled, messages that don't match any of the supplied routes are automatically sent to this route. Defaults to messages/events.

> **NOTE:** If `fallback_route` isn't explicitly specified, the fallback route wouldn't be enabled by default.


fileUploadJBH:F
D
iotIoTHubFileUpload+azure:iot/IoTHubFileUpload:IoTHubFileUpload(A `file_upload` block as defined below.
x
identityDBB:@
>
iotIoTHubIdentity'azure:iot/IoTHubIdentity:IoTHubIdentity&An `identity` block as defined below.

localAuthenticationEnabledB
 iIf false, SAS tokens with Iot hub scoped SAS keys cannot be used for authentication. Defaults to `true`.

locationB" Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.

minTlsVersionB" l
nameB" ^Specifies the name of the IotHub resource. Changing this forces a new resource to be created.

networkRuleSetsXBV*T:R
P
iotIoTHubNetworkRuleSet3azure:iot/IoTHubNetworkRuleSet:IoTHubNetworkRuleSet-A `network_rule_set` block as defined below.
"
publicNetworkAccessEnabledB
 
resourceGroupName" The name of the resource group under which the IotHub resource has to be created. Changing this forces a new resource to be created.
G
routes=B;*9:7
5
iotIoTHubRoute!azure:iot/IoTHubRoute:IoTHubRoute\
sku3:1
/
iot	IoTHubSkuazure:iot/IoTHubSku:IoTHubSku A `sku` block as defined below.

tagsB2" "b
cloudToDeviceQ:O
M
iotIoTHubCloudToDevice1azure:iot/IoTHubCloudToDevice:IoTHubCloudToDevice"y
	endpointsD*B:@
>
iotIoTHubEndpoint'azure:iot/IoTHubEndpoint:IoTHubEndpoint&An `endpoint` block as defined below.
"Y
enrichmentsJ*H:F
D
iotIoTHubEnrichment+azure:iot/IoTHubEnrichment:IoTHubEnrichment"O
eventHubEventsEndpoint" 1The EventHub compatible endpoint for events data
"F
eventHubEventsNamespace" 'The EventHub namespace for events data
"G
eventHubEventsPath" -The EventHub compatible path for events data
"X
eventHubOperationsEndpoint" 6The EventHub compatible endpoint for operational data
"P
eventHubOperationsPath" 2The EventHub compatible path for operational data
"
eventHubPartitionCountB uThe number of device-to-cloud partitions used by backing event hubs. Must be between `2` and `128`. Defaults to `4`.
"w
eventHubRetentionInDaysB VThe event hub retention to use in days. Must be between `1` and `7`. Defaults to `1`.
"
fallbackRouteQ:O
M
iotIoTHubFallbackRoute1azure:iot/IoTHubFallbackRoute:IoTHubFallbackRouteµA `fallback_route` block as defined below. If the fallback route is enabled, messages that don't match any of the supplied routes are automatically sent to this route. Defaults to messages/events.

> **NOTE:** If `fallback_route` isn't explicitly specified, the fallback route wouldn't be enabled by default.
"

fileUploadJBH:F
D
iotIoTHubFileUpload+azure:iot/IoTHubFileUpload:IoTHubFileUpload(A `file_upload` block as defined below.
"5
hostname" %The hostname of the IotHub Resource.
"x
identityDBB:@
>
iotIoTHubIdentity'azure:iot/IoTHubIdentity:IoTHubIdentity&An `identity` block as defined below.
"
localAuthenticationEnabledB
 iIf false, SAS tokens with Iot hub scoped SAS keys cannot be used for authentication. Defaults to `true`.
"
location" Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
"
minTlsVersionB" "j
name" ^Specifies the name of the IotHub resource. Changing this forces a new resource to be created.
"
networkRuleSetsXBV*T:R
P
iotIoTHubNetworkRuleSet3azure:iot/IoTHubNetworkRuleSet:IoTHubNetworkRuleSet-A `network_rule_set` block as defined below.
""
publicNetworkAccessEnabledB
 "
resourceGroupName" The name of the resource group under which the IotHub resource has to be created. Changing this forces a new resource to be created.
"E
routes;*9:7
5
iotIoTHubRoute!azure:iot/IoTHubRoute:IoTHubRoute"¸
sharedAccessPoliciesb*`:^
\
iotIoTHubSharedAccessPolicy;azure:iot/IoTHubSharedAccessPolicy:IoTHubSharedAccessPolicy<One or more `shared_access_policy` blocks as defined below.
"\
sku3:1
/
iot	IoTHubSkuazure:iot/IoTHubSku:IoTHubSku A `sku` block as defined below.
"
tagsB2" "

type" *ò@
G
iotIotHubCertificate-azure:iot/iotHubCertificate:IotHubCertificateü3Manages an IotHub Device Provisioning Service Certificate.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";
import * as std from "@pulumi/std";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleIotHubDps = new azure.iot.IotHubDps("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
});
const exampleIotHubCertificate = new azure.iot.IotHubCertificate("example", {
    name: "example",
    resourceGroupName: example.name,
    iotDpsName: exampleIotHubDps.name,
    certificateContent: std.filebase64({
        input: "example.cer",
    }).then(invoke => invoke.result),
});
```
```python
import pulumi
import pulumi_azure as azure
import pulumi_std as std

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_iot_hub_dps = azure.iot.IotHubDps("example",
    name="example",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    })
example_iot_hub_certificate = azure.iot.IotHubCertificate("example",
    name="example",
    resource_group_name=example.name,
    iot_dps_name=example_iot_hub_dps.name,
    certificate_content=std.filebase64(input="example.cer").result)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleIotHubDps = new Azure.Iot.IotHubDps("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IotHubDpsSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
    });

    var exampleIotHubCertificate = new Azure.Iot.IotHubCertificate("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        IotDpsName = exampleIotHubDps.Name,
        CertificateContent = Std.Filebase64.Invoke(new()
        {
            Input = "example.cer",
        }).Apply(invoke => invoke.Result),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleIotHubDps, err := iot.NewIotHubDps(ctx, "example", &iot.IotHubDpsArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IotHubDpsSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
		})
		if err != nil {
			return err
		}
		invokeFilebase64, err := std.Filebase64(ctx, &std.Filebase64Args{
			Input: "example.cer",
		}, nil)
		if err != nil {
			return err
		}
		_, err = iot.NewIotHubCertificate(ctx, "example", &iot.IotHubCertificateArgs{
			Name:               pulumi.String("example"),
			ResourceGroupName:  example.Name,
			IotDpsName:         exampleIotHubDps.Name,
			CertificateContent: pulumi.String(invokeFilebase64.Result),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iot.IotHubDps;
import com.pulumi.azure.iot.IotHubDpsArgs;
import com.pulumi.azure.iot.inputs.IotHubDpsSkuArgs;
import com.pulumi.azure.iot.IotHubCertificate;
import com.pulumi.azure.iot.IotHubCertificateArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleIotHubDps = new IotHubDps("exampleIotHubDps", IotHubDpsArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IotHubDpsSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .build());

        var exampleIotHubCertificate = new IotHubCertificate("exampleIotHubCertificate", IotHubCertificateArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .iotDpsName(exampleIotHubDps.name())
            .certificateContent(StdFunctions.filebase64(Filebase64Args.builder()
                .input("example.cer")
                .build()).result())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleIotHubDps:
    type: azure:iot:IotHubDps
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
  exampleIotHubCertificate:
    type: azure:iot:IotHubCertificate
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      iotDpsName: ${exampleIotHubDps.name}
      certificateContent:
        fn::invoke:
          function: std:filebase64
          arguments:
            input: example.cer
          return: result
```
<!--End PulumiCodeChooser -->

## Import

IoTHub Device Provisioning Service Certificates can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/iotHubCertificate:IotHubCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/provisioningServices/example/certificates/example
```

y
certificateContent" _The Base-64 representation of the X509 leaf certificate .cer file or just a .pem file content.
¡

iotDpsName" The name of the IoT Device Provisioning Service that this certificate will be attached to. Changing this forces a new resource to be created.


isVerifiedB
 Specifies if the certificate is created in verified state. Defaults to `false`. Changing this forces a new resource to be created.

nameB" Specifies the name of the Iot Device Provisioning Service Certificate resource. Changing this forces a new resource to be created.
Ä
resourceGroupName" ªThe name of the resource group under which the Iot Device Provisioning Service Certificate resource has to be created. Changing this forces a new resource to be created.
"y
certificateContent" _The Base-64 representation of the X509 leaf certificate .cer file or just a .pem file content.
"¡

iotDpsName" The name of the IoT Device Provisioning Service that this certificate will be attached to. Changing this forces a new resource to be created.
"

isVerifiedB
 Specifies if the certificate is created in verified state. Defaults to `false`. Changing this forces a new resource to be created.
"
name" Specifies the name of the Iot Device Provisioning Service Certificate resource. Changing this forces a new resource to be created.
"Ä
resourceGroupName" ªThe name of the resource group under which the Iot Device Provisioning Service Certificate resource has to be created. Changing this forces a new resource to be created.
*½8
_
iotIotHubDeviceUpdateAccount=azure:iot/iotHubDeviceUpdateAccount:IotHubDeviceUpdateAccountÃ%Manages an IoT Hub Device Update Account.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "East US",
});
const exampleIotHubDeviceUpdateAccount = new azure.iot.IotHubDeviceUpdateAccount("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
    identity: {
        type: "SystemAssigned",
    },
    tags: {
        key: "value",
    },
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="East US")
example_iot_hub_device_update_account = azure.iot.IotHubDeviceUpdateAccount("example",
    name="example",
    resource_group_name=example.name,
    location=example.location,
    identity={
        "type": "SystemAssigned",
    },
    tags={
        "key": "value",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "East US",
    });

    var exampleIotHubDeviceUpdateAccount = new Azure.Iot.IotHubDeviceUpdateAccount("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Identity = new Azure.Iot.Inputs.IotHubDeviceUpdateAccountIdentityArgs
        {
            Type = "SystemAssigned",
        },
        Tags = 
        {
            { "key", "value" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("East US"),
		})
		if err != nil {
			return err
		}
		_, err = iot.NewIotHubDeviceUpdateAccount(ctx, "example", &iot.IotHubDeviceUpdateAccountArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Identity: &iot.IotHubDeviceUpdateAccountIdentityArgs{
				Type: pulumi.String("SystemAssigned"),
			},
			Tags: pulumi.StringMap{
				"key": pulumi.String("value"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iot.IotHubDeviceUpdateAccount;
import com.pulumi.azure.iot.IotHubDeviceUpdateAccountArgs;
import com.pulumi.azure.iot.inputs.IotHubDeviceUpdateAccountIdentityArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("East US")
            .build());

        var exampleIotHubDeviceUpdateAccount = new IotHubDeviceUpdateAccount("exampleIotHubDeviceUpdateAccount", IotHubDeviceUpdateAccountArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .identity(IotHubDeviceUpdateAccountIdentityArgs.builder()
                .type("SystemAssigned")
                .build())
            .tags(Map.of("key", "value"))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: East US
  exampleIotHubDeviceUpdateAccount:
    type: azure:iot:IotHubDeviceUpdateAccount
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
      identity:
        type: SystemAssigned
      tags:
        key: value
```
<!--End PulumiCodeChooser -->

## Import

IoT Hub Device Update Account can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/iotHubDeviceUpdateAccount:IotHubDeviceUpdateAccount example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DeviceUpdate/accounts/account1
```

±
identity}B{:y
w
iot!IotHubDeviceUpdateAccountIdentityMazure:iot/IotHubDeviceUpdateAccountIdentity:IotHubDeviceUpdateAccountIdentity&An `identity` block as defined below.

locationB" Specifies the Azure Region where the IoT Hub Device Update Account should exist. Changing this forces a new resource to be created.

nameB" Specifies the name which should be used for this IoT Hub Device Update Account. Changing this forces a new resource to be created.
¿
publicNetworkAccessEnabledB
 Specifies whether the public network access is enabled for the IoT Hub Device Update Account. Possible values are `true` and `false`. Defaults to `true`.
¬
resourceGroupName" Specifies the name of the Resource Group where the IoT Hub Device Update Account should exist. Changing this forces a new resource to be created.
®
skuB"  Sku of the IoT Hub Device Update Account. Possible values are `Free` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
a
tagsB2" QA mapping of tags which should be assigned to the IoT Hub Device Update Account.
"H
hostName" 8The API host name of the IoT Hub Device Update Account.
"±
identity}B{:y
w
iot!IotHubDeviceUpdateAccountIdentityMazure:iot/IotHubDeviceUpdateAccountIdentity:IotHubDeviceUpdateAccountIdentity&An `identity` block as defined below.
"
location" Specifies the Azure Region where the IoT Hub Device Update Account should exist. Changing this forces a new resource to be created.
"
name" Specifies the name which should be used for this IoT Hub Device Update Account. Changing this forces a new resource to be created.
"¿
publicNetworkAccessEnabledB
 Specifies whether the public network access is enabled for the IoT Hub Device Update Account. Possible values are `true` and `false`. Defaults to `true`.
"¬
resourceGroupName" Specifies the name of the Resource Group where the IoT Hub Device Update Account should exist. Changing this forces a new resource to be created.
"®
skuB"  Sku of the IoT Hub Device Update Account. Possible values are `Free` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
"a
tagsB2" QA mapping of tags which should be assigned to the IoT Hub Device Update Account.
*ãd
b
iotIotHubDeviceUpdateInstance?azure:iot/iotHubDeviceUpdateInstance:IotHubDeviceUpdateInstance¬TManages an IoT Hub Device Update Instance.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "East US",
});
const exampleIotHubDeviceUpdateAccount = new azure.iot.IotHubDeviceUpdateAccount("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
});
const exampleAccount = new azure.storage.Account("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleIotHubDeviceUpdateInstance = new azure.iot.IotHubDeviceUpdateInstance("example", {
    name: "example",
    deviceUpdateAccountId: exampleIotHubDeviceUpdateAccount.id,
    iothubId: exampleIoTHub.id,
    diagnosticEnabled: true,
    diagnosticStorageAccount: {
        connectionString: exampleAccount.primaryConnectionString,
        id: exampleAccount.id,
    },
    tags: {
        key: "value",
    },
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="East US")
example_iot_hub_device_update_account = azure.iot.IotHubDeviceUpdateAccount("example",
    name="example",
    resource_group_name=example.name,
    location=example.location)
example_io_t_hub = azure.iot.IoTHub("example",
    name="example",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    })
example_account = azure.storage.Account("example",
    name="example",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_iot_hub_device_update_instance = azure.iot.IotHubDeviceUpdateInstance("example",
    name="example",
    device_update_account_id=example_iot_hub_device_update_account.id,
    iothub_id=example_io_t_hub.id,
    diagnostic_enabled=True,
    diagnostic_storage_account={
        "connection_string": example_account.primary_connection_string,
        "id": example_account.id,
    },
    tags={
        "key": "value",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "East US",
    });

    var exampleIotHubDeviceUpdateAccount = new Azure.Iot.IotHubDeviceUpdateAccount("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleIotHubDeviceUpdateInstance = new Azure.Iot.IotHubDeviceUpdateInstance("example", new()
    {
        Name = "example",
        DeviceUpdateAccountId = exampleIotHubDeviceUpdateAccount.Id,
        IothubId = exampleIoTHub.Id,
        DiagnosticEnabled = true,
        DiagnosticStorageAccount = new Azure.Iot.Inputs.IotHubDeviceUpdateInstanceDiagnosticStorageAccountArgs
        {
            ConnectionString = exampleAccount.PrimaryConnectionString,
            Id = exampleAccount.Id,
        },
        Tags = 
        {
            { "key", "value" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("East US"),
		})
		if err != nil {
			return err
		}
		exampleIotHubDeviceUpdateAccount, err := iot.NewIotHubDeviceUpdateAccount(ctx, "example", &iot.IotHubDeviceUpdateAccountArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("example"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		_, err = iot.NewIotHubDeviceUpdateInstance(ctx, "example", &iot.IotHubDeviceUpdateInstanceArgs{
			Name:                  pulumi.String("example"),
			DeviceUpdateAccountId: exampleIotHubDeviceUpdateAccount.ID(),
			IothubId:              exampleIoTHub.ID(),
			DiagnosticEnabled:     pulumi.Bool(true),
			DiagnosticStorageAccount: &iot.IotHubDeviceUpdateInstanceDiagnosticStorageAccountArgs{
				ConnectionString: exampleAccount.PrimaryConnectionString,
				Id:               exampleAccount.ID(),
			},
			Tags: pulumi.StringMap{
				"key": pulumi.String("value"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iot.IotHubDeviceUpdateAccount;
import com.pulumi.azure.iot.IotHubDeviceUpdateAccountArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.iot.IotHubDeviceUpdateInstance;
import com.pulumi.azure.iot.IotHubDeviceUpdateInstanceArgs;
import com.pulumi.azure.iot.inputs.IotHubDeviceUpdateInstanceDiagnosticStorageAccountArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("East US")
            .build());

        var exampleIotHubDeviceUpdateAccount = new IotHubDeviceUpdateAccount("exampleIotHubDeviceUpdateAccount", IotHubDeviceUpdateAccountArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleIotHubDeviceUpdateInstance = new IotHubDeviceUpdateInstance("exampleIotHubDeviceUpdateInstance", IotHubDeviceUpdateInstanceArgs.builder()
            .name("example")
            .deviceUpdateAccountId(exampleIotHubDeviceUpdateAccount.id())
            .iothubId(exampleIoTHub.id())
            .diagnosticEnabled(true)
            .diagnosticStorageAccount(IotHubDeviceUpdateInstanceDiagnosticStorageAccountArgs.builder()
                .connectionString(exampleAccount.primaryConnectionString())
                .id(exampleAccount.id())
                .build())
            .tags(Map.of("key", "value"))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: East US
  exampleIotHubDeviceUpdateAccount:
    type: azure:iot:IotHubDeviceUpdateAccount
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleIotHubDeviceUpdateInstance:
    type: azure:iot:IotHubDeviceUpdateInstance
    name: example
    properties:
      name: example
      deviceUpdateAccountId: ${exampleIotHubDeviceUpdateAccount.id}
      iothubId: ${exampleIoTHub.id}
      diagnosticEnabled: true
      diagnosticStorageAccount:
        connectionString: ${exampleAccount.primaryConnectionString}
        id: ${exampleAccount.id}
      tags:
        key: value
```
<!--End PulumiCodeChooser -->

## Import

IoT Hub Device Update Instance can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/iotHubDeviceUpdateInstance:IotHubDeviceUpdateInstance example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DeviceUpdate/accounts/account1/instances/instance1
```

¸
deviceUpdateAccountId" Specifies the ID of the IoT Hub Device Update Account where the IoT Hub Device Update Instance exists. Changing this forces a new resource to be created.

diagnosticEnabledB
 oWhether the diagnostic log collection is enabled. Possible values are `true` and `false`. Defaults to `false`.

diagnosticStorageAccount³B°:­
ª
iot2IotHubDeviceUpdateInstanceDiagnosticStorageAccountoazure:iot/IotHubDeviceUpdateInstanceDiagnosticStorageAccount:IotHubDeviceUpdateInstanceDiagnosticStorageAccount7A `diagnostic_storage_account` block as defined below.

iothubId" Specifies the ID of the IoT Hub associated with the IoT Hub Device Update Instance. Changing this forces a new resource to be created.

nameB" Specifies the name which should be used for this IoT Hub Device Update Instance. Changing this forces a new resource to be created.
b
tagsB2" RA mapping of tags which should be assigned to the IoT Hub Device Update Instance.
"¸
deviceUpdateAccountId" Specifies the ID of the IoT Hub Device Update Account where the IoT Hub Device Update Instance exists. Changing this forces a new resource to be created.
"
diagnosticEnabledB
 oWhether the diagnostic log collection is enabled. Possible values are `true` and `false`. Defaults to `false`.
"
diagnosticStorageAccount³B°:­
ª
iot2IotHubDeviceUpdateInstanceDiagnosticStorageAccountoazure:iot/IotHubDeviceUpdateInstanceDiagnosticStorageAccount:IotHubDeviceUpdateInstanceDiagnosticStorageAccount7A `diagnostic_storage_account` block as defined below.
"
iothubId" Specifies the ID of the IoT Hub associated with the IoT Hub Device Update Instance. Changing this forces a new resource to be created.
"
name" Specifies the name which should be used for this IoT Hub Device Update Instance. Changing this forces a new resource to be created.
"b
tagsB2" RA mapping of tags which should be assigned to the IoT Hub Device Update Instance.
*;
/
iot	IotHubDpsazure:iot/iotHubDps:IotHubDpsØ"Manages an IotHub Device Provisioning Service.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleIotHubDps = new azure.iot.IotHubDps("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
    allocationPolicy: "Hashed",
    sku: {
        name: "S1",
        capacity: 1,
    },
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_iot_hub_dps = azure.iot.IotHubDps("example",
    name="example",
    resource_group_name=example.name,
    location=example.location,
    allocation_policy="Hashed",
    sku={
        "name": "S1",
        "capacity": 1,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleIotHubDps = new Azure.Iot.IotHubDps("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AllocationPolicy = "Hashed",
        Sku = new Azure.Iot.Inputs.IotHubDpsSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		_, err = iot.NewIotHubDps(ctx, "example", &iot.IotHubDpsArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			AllocationPolicy:  pulumi.String("Hashed"),
			Sku: &iot.IotHubDpsSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iot.IotHubDps;
import com.pulumi.azure.iot.IotHubDpsArgs;
import com.pulumi.azure.iot.inputs.IotHubDpsSkuArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleIotHubDps = new IotHubDps("exampleIotHubDps", IotHubDpsArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .allocationPolicy("Hashed")
            .sku(IotHubDpsSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleIotHubDps:
    type: azure:iot:IotHubDps
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
      allocationPolicy: Hashed
      sku:
        name: S1
        capacity: '1'
```
<!--End PulumiCodeChooser -->

## Import

IoT Device Provisioning Service can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/iotHubDps:IotHubDps example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/provisioningServices/example
```


allocationPolicyB" yThe allocation policy of the IoT Device Provisioning Service (`Hashed`, `GeoLatency` or `Static`). Defaults to `Hashed`.
Ê
dataResidencyEnabledB
 «Specifies if the IoT Device Provisioning Service has data residency and disaster recovery enabled. Defaults to `false`. Changing this forces a new resource to be created.

ipFilterRules[BY*W:U
S
iotIotHubDpsIpFilterRule5azure:iot/IotHubDpsIpFilterRule:IotHubDpsIpFilterRule,An `ip_filter_rule` block as defined below.


linkedHubsRBP*N:L
J
iotIotHubDpsLinkedHub/azure:iot/IotHubDpsLinkedHub:IotHubDpsLinkedHub'A `linked_hub` block as defined below.

locationB" Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.

nameB" wSpecifies the name of the Iot Device Provisioning Service resource. Changing this forces a new resource to be created.
j
publicNetworkAccessEnabledB
 FWhether requests from Public Network are allowed. Defaults to `true`.
¸
resourceGroupName" The name of the resource group under which the Iot Device Provisioning Service resource has to be created. Changing this forces a new resource to be created.
e
sku<::
8
iotIotHubDpsSku#azure:iot/IotHubDpsSku:IotHubDpsSku A `sku` block as defined below.
=
tagsB2" -A mapping of tags to assign to the resource.
"
allocationPolicyB" yThe allocation policy of the IoT Device Provisioning Service (`Hashed`, `GeoLatency` or `Static`). Defaults to `Hashed`.
"Ê
dataResidencyEnabledB
 «Specifies if the IoT Device Provisioning Service has data residency and disaster recovery enabled. Defaults to `false`. Changing this forces a new resource to be created.
"^
deviceProvisioningHostName" <The device endpoint of the IoT Device Provisioning Service.
"M
idScope" >The unique identifier of the IoT Device Provisioning Service.
"
ipFilterRules[BY*W:U
S
iotIotHubDpsIpFilterRule5azure:iot/IotHubDpsIpFilterRule:IotHubDpsIpFilterRule,An `ip_filter_rule` block as defined below.
"

linkedHubsRBP*N:L
J
iotIotHubDpsLinkedHub/azure:iot/IotHubDpsLinkedHub:IotHubDpsLinkedHub'A `linked_hub` block as defined below.
"
location" Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
"
name" wSpecifies the name of the Iot Device Provisioning Service resource. Changing this forces a new resource to be created.
"j
publicNetworkAccessEnabledB
 FWhether requests from Public Network are allowed. Defaults to `true`.
"¸
resourceGroupName" The name of the resource group under which the Iot Device Provisioning Service resource has to be created. Changing this forces a new resource to be created.
"^
serviceOperationsHostName" =The service endpoint of the IoT Device Provisioning Service.
"e
sku<::
8
iotIotHubDpsSku#azure:iot/IotHubDpsSku:IotHubDpsSku A `sku` block as defined below.
"=
tagsB2" -A mapping of tags to assign to the resource.
*x
#
iotRouteazure:iot/route:RouteØgManages an IotHub Route

> **NOTE:** Routes can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.Route` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "examplestorageaccount",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleContainer = new azure.storage.Container("example", {
    name: "example",
    storageAccountName: exampleAccount.name,
    containerAccessType: "private",
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "exampleIothub",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
    tags: {
        purpose: "testing",
    },
});
const exampleEndpointStorageContainer = new azure.iot.EndpointStorageContainer("example", {
    resourceGroupName: example.name,
    iothubId: exampleIoTHub.id,
    name: "example",
    connectionString: exampleAccount.primaryBlobConnectionString,
    batchFrequencyInSeconds: 60,
    maxChunkSizeInBytes: 10485760,
    containerName: exampleContainer.name,
    encoding: "Avro",
    fileNameFormat: "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
});
const exampleRoute = new azure.iot.Route("example", {
    resourceGroupName: example.name,
    iothubName: exampleIoTHub.name,
    name: "example",
    source: "DeviceMessages",
    condition: "true",
    endpointNames: exampleEndpointStorageContainer.name,
    enabled: true,
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="examplestorageaccount",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_container = azure.storage.Container("example",
    name="example",
    storage_account_name=example_account.name,
    container_access_type="private")
example_io_t_hub = azure.iot.IoTHub("example",
    name="exampleIothub",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    },
    tags={
        "purpose": "testing",
    })
example_endpoint_storage_container = azure.iot.EndpointStorageContainer("example",
    resource_group_name=example.name,
    iothub_id=example_io_t_hub.id,
    name="example",
    connection_string=example_account.primary_blob_connection_string,
    batch_frequency_in_seconds=60,
    max_chunk_size_in_bytes=10485760,
    container_name=example_container.name,
    encoding="Avro",
    file_name_format="{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}")
example_route = azure.iot.Route("example",
    resource_group_name=example.name,
    iothub_name=example_io_t_hub.name,
    name="example",
    source="DeviceMessages",
    condition="true",
    endpoint_names=example_endpoint_storage_container.name,
    enabled=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "examplestorageaccount",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleContainer = new Azure.Storage.Container("example", new()
    {
        Name = "example",
        StorageAccountName = exampleAccount.Name,
        ContainerAccessType = "private",
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "exampleIothub",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
        Tags = 
        {
            { "purpose", "testing" },
        },
    });

    var exampleEndpointStorageContainer = new Azure.Iot.EndpointStorageContainer("example", new()
    {
        ResourceGroupName = example.Name,
        IothubId = exampleIoTHub.Id,
        Name = "example",
        ConnectionString = exampleAccount.PrimaryBlobConnectionString,
        BatchFrequencyInSeconds = 60,
        MaxChunkSizeInBytes = 10485760,
        ContainerName = exampleContainer.Name,
        Encoding = "Avro",
        FileNameFormat = "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
    });

    var exampleRoute = new Azure.Iot.Route("example", new()
    {
        ResourceGroupName = example.Name,
        IothubName = exampleIoTHub.Name,
        Name = "example",
        Source = "DeviceMessages",
        Condition = "true",
        EndpointNames = exampleEndpointStorageContainer.Name,
        Enabled = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("examplestorageaccount"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
			Name:                pulumi.String("example"),
			StorageAccountName:  exampleAccount.Name,
			ContainerAccessType: pulumi.String("private"),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("exampleIothub"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
			Tags: pulumi.StringMap{
				"purpose": pulumi.String("testing"),
			},
		})
		if err != nil {
			return err
		}
		exampleEndpointStorageContainer, err := iot.NewEndpointStorageContainer(ctx, "example", &iot.EndpointStorageContainerArgs{
			ResourceGroupName:       example.Name,
			IothubId:                exampleIoTHub.ID(),
			Name:                    pulumi.String("example"),
			ConnectionString:        exampleAccount.PrimaryBlobConnectionString,
			BatchFrequencyInSeconds: pulumi.Int(60),
			MaxChunkSizeInBytes:     pulumi.Int(10485760),
			ContainerName:           exampleContainer.Name,
			Encoding:                pulumi.String("Avro"),
			FileNameFormat:          pulumi.String("{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}"),
		})
		if err != nil {
			return err
		}
		_, err = iot.NewRoute(ctx, "example", &iot.RouteArgs{
			ResourceGroupName: example.Name,
			IothubName:        exampleIoTHub.Name,
			Name:              pulumi.String("example"),
			Source:            pulumi.String("DeviceMessages"),
			Condition:         pulumi.String("true"),
			EndpointNames:     exampleEndpointStorageContainer.Name,
			Enabled:           pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.Container;
import com.pulumi.azure.storage.ContainerArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.EndpointStorageContainer;
import com.pulumi.azure.iot.EndpointStorageContainerArgs;
import com.pulumi.azure.iot.Route;
import com.pulumi.azure.iot.RouteArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("examplestorageaccount")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleContainer = new Container("exampleContainer", ContainerArgs.builder()
            .name("example")
            .storageAccountName(exampleAccount.name())
            .containerAccessType("private")
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("exampleIothub")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .tags(Map.of("purpose", "testing"))
            .build());

        var exampleEndpointStorageContainer = new EndpointStorageContainer("exampleEndpointStorageContainer", EndpointStorageContainerArgs.builder()
            .resourceGroupName(example.name())
            .iothubId(exampleIoTHub.id())
            .name("example")
            .connectionString(exampleAccount.primaryBlobConnectionString())
            .batchFrequencyInSeconds(60)
            .maxChunkSizeInBytes(10485760)
            .containerName(exampleContainer.name())
            .encoding("Avro")
            .fileNameFormat("{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}")
            .build());

        var exampleRoute = new Route("exampleRoute", RouteArgs.builder()
            .resourceGroupName(example.name())
            .iothubName(exampleIoTHub.name())
            .name("example")
            .source("DeviceMessages")
            .condition("true")
            .endpointNames(exampleEndpointStorageContainer.name())
            .enabled(true)
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: examplestorageaccount
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleContainer:
    type: azure:storage:Container
    name: example
    properties:
      name: example
      storageAccountName: ${exampleAccount.name}
      containerAccessType: private
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: exampleIothub
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
      tags:
        purpose: testing
  exampleEndpointStorageContainer:
    type: azure:iot:EndpointStorageContainer
    name: example
    properties:
      resourceGroupName: ${example.name}
      iothubId: ${exampleIoTHub.id}
      name: example
      connectionString: ${exampleAccount.primaryBlobConnectionString}
      batchFrequencyInSeconds: 60
      maxChunkSizeInBytes: 1.048576e+07
      containerName: ${exampleContainer.name}
      encoding: Avro
      fileNameFormat: '{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}'
  exampleRoute:
    type: azure:iot:Route
    name: example
    properties:
      resourceGroupName: ${example.name}
      iothubName: ${exampleIoTHub.name}
      name: example
      source: DeviceMessages
      condition: 'true'
      endpointNames: ${exampleEndpointStorageContainer.name}
      enabled: true
```
<!--End PulumiCodeChooser -->

## Import

IoTHub Route can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/route:Route route1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/routes/route1
```

Á
	conditionB" ­The condition that is evaluated to apply the routing rule. For grammar, see: <https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language>. Defaults to `true`.
5
enabled
 &Specifies whether a route is enabled.

endpointNames" wThe list of endpoints to which messages that satisfy the condition are routed. Currently only one endpoint is allowed.
y

iothubName" gThe name of the IoTHub to which this Route belongs. Changing this forces a new resource to be created.
X
nameB" JThe name of the route. Changing this forces a new resource to be created.
¥
resourceGroupName" The name of the resource group under which the IotHub Route resource has to be created. Changing this forces a new resource to be created.
þ
source" ïThe source that the routing rule is to be applied to. Possible values include: `DeviceConnectionStateEvents`, `DeviceJobLifecycleEvents`, `DeviceLifecycleEvents`, `DeviceMessages`, `DigitalTwinChangeEvents`, `Invalid`, `TwinChangeEvents`.
"Á
	conditionB" ­The condition that is evaluated to apply the routing rule. For grammar, see: <https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language>. Defaults to `true`.
"5
enabled
 &Specifies whether a route is enabled.
"
endpointNames" wThe list of endpoints to which messages that satisfy the condition are routed. Currently only one endpoint is allowed.
"y

iothubName" gThe name of the IoTHub to which this Route belongs. Changing this forces a new resource to be created.
"V
name" JThe name of the route. Changing this forces a new resource to be created.
"¥
resourceGroupName" The name of the resource group under which the IotHub Route resource has to be created. Changing this forces a new resource to be created.
"þ
source" ïThe source that the routing rule is to be applied to. Possible values include: `DeviceConnectionStateEvents`, `DeviceJobLifecycleEvents`, `DeviceLifecycleEvents`, `DeviceMessages`, `DigitalTwinChangeEvents`, `Invalid`, `TwinChangeEvents`.
*ãY
M
iotSecurityDeviceGroup1azure:iot/securityDeviceGroup:SecurityDeviceGroupßOManages a Iot Security Device Group.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "example-IoTHub",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
});
const exampleSecuritySolution = new azure.iot.SecuritySolution("example", {
    name: "example-Iot-Security-Solution",
    resourceGroupName: example.name,
    location: example.location,
    displayName: "Iot Security Solution",
    iothubIds: [exampleIoTHub.id],
});
const exampleSecurityDeviceGroup = new azure.iot.SecurityDeviceGroup("example", {
    name: "example-device-security-group",
    iothubId: exampleIoTHub.id,
    allowRule: {
        connectionToIpsNotAlloweds: ["10.0.0.0/24"],
    },
    rangeRules: [{
        type: "ActiveConnectionsNotInAllowedRange",
        min: 0,
        max: 30,
        duration: "PT5M",
    }],
}, {
    dependsOn: [exampleSecuritySolution],
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_io_t_hub = azure.iot.IoTHub("example",
    name="example-IoTHub",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    })
example_security_solution = azure.iot.SecuritySolution("example",
    name="example-Iot-Security-Solution",
    resource_group_name=example.name,
    location=example.location,
    display_name="Iot Security Solution",
    iothub_ids=[example_io_t_hub.id])
example_security_device_group = azure.iot.SecurityDeviceGroup("example",
    name="example-device-security-group",
    iothub_id=example_io_t_hub.id,
    allow_rule={
        "connection_to_ips_not_alloweds": ["10.0.0.0/24"],
    },
    range_rules=[{
        "type": "ActiveConnectionsNotInAllowedRange",
        "min": 0,
        "max": 30,
        "duration": "PT5M",
    }],
    opts = pulumi.ResourceOptions(depends_on=[example_security_solution]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "example-IoTHub",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
    });

    var exampleSecuritySolution = new Azure.Iot.SecuritySolution("example", new()
    {
        Name = "example-Iot-Security-Solution",
        ResourceGroupName = example.Name,
        Location = example.Location,
        DisplayName = "Iot Security Solution",
        IothubIds = new[]
        {
            exampleIoTHub.Id,
        },
    });

    var exampleSecurityDeviceGroup = new Azure.Iot.SecurityDeviceGroup("example", new()
    {
        Name = "example-device-security-group",
        IothubId = exampleIoTHub.Id,
        AllowRule = new Azure.Iot.Inputs.SecurityDeviceGroupAllowRuleArgs
        {
            ConnectionToIpsNotAlloweds = new[]
            {
                "10.0.0.0/24",
            },
        },
        RangeRules = new[]
        {
            new Azure.Iot.Inputs.SecurityDeviceGroupRangeRuleArgs
            {
                Type = "ActiveConnectionsNotInAllowedRange",
                Min = 0,
                Max = 30,
                Duration = "PT5M",
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            exampleSecuritySolution,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("example-IoTHub"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
		})
		if err != nil {
			return err
		}
		exampleSecuritySolution, err := iot.NewSecuritySolution(ctx, "example", &iot.SecuritySolutionArgs{
			Name:              pulumi.String("example-Iot-Security-Solution"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			DisplayName:       pulumi.String("Iot Security Solution"),
			IothubIds: pulumi.StringArray{
				exampleIoTHub.ID(),
			},
		})
		if err != nil {
			return err
		}
		_, err = iot.NewSecurityDeviceGroup(ctx, "example", &iot.SecurityDeviceGroupArgs{
			Name:     pulumi.String("example-device-security-group"),
			IothubId: exampleIoTHub.ID(),
			AllowRule: &iot.SecurityDeviceGroupAllowRuleArgs{
				ConnectionToIpsNotAlloweds: pulumi.StringArray{
					pulumi.String("10.0.0.0/24"),
				},
			},
			RangeRules: iot.SecurityDeviceGroupRangeRuleArray{
				&iot.SecurityDeviceGroupRangeRuleArgs{
					Type:     pulumi.String("ActiveConnectionsNotInAllowedRange"),
					Min:      pulumi.Int(0),
					Max:      pulumi.Int(30),
					Duration: pulumi.String("PT5M"),
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			exampleSecuritySolution,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.SecuritySolution;
import com.pulumi.azure.iot.SecuritySolutionArgs;
import com.pulumi.azure.iot.SecurityDeviceGroup;
import com.pulumi.azure.iot.SecurityDeviceGroupArgs;
import com.pulumi.azure.iot.inputs.SecurityDeviceGroupAllowRuleArgs;
import com.pulumi.azure.iot.inputs.SecurityDeviceGroupRangeRuleArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("example-IoTHub")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .build());

        var exampleSecuritySolution = new SecuritySolution("exampleSecuritySolution", SecuritySolutionArgs.builder()
            .name("example-Iot-Security-Solution")
            .resourceGroupName(example.name())
            .location(example.location())
            .displayName("Iot Security Solution")
            .iothubIds(exampleIoTHub.id())
            .build());

        var exampleSecurityDeviceGroup = new SecurityDeviceGroup("exampleSecurityDeviceGroup", SecurityDeviceGroupArgs.builder()
            .name("example-device-security-group")
            .iothubId(exampleIoTHub.id())
            .allowRule(SecurityDeviceGroupAllowRuleArgs.builder()
                .connectionToIpsNotAlloweds("10.0.0.0/24")
                .build())
            .rangeRules(SecurityDeviceGroupRangeRuleArgs.builder()
                .type("ActiveConnectionsNotInAllowedRange")
                .min(0)
                .max(30)
                .duration("PT5M")
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(exampleSecuritySolution)
                .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: example-IoTHub
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
  exampleSecuritySolution:
    type: azure:iot:SecuritySolution
    name: example
    properties:
      name: example-Iot-Security-Solution
      resourceGroupName: ${example.name}
      location: ${example.location}
      displayName: Iot Security Solution
      iothubIds:
        - ${exampleIoTHub.id}
  exampleSecurityDeviceGroup:
    type: azure:iot:SecurityDeviceGroup
    name: example
    properties:
      name: example-device-security-group
      iothubId: ${exampleIoTHub.id}
      allowRule:
        connectionToIpsNotAlloweds:
          - 10.0.0.0/24
      rangeRules:
        - type: ActiveConnectionsNotInAllowedRange
          min: 0
          max: 30
          duration: PT5M
    options:
      dependsOn:
        - ${exampleSecuritySolution}
```
<!--End PulumiCodeChooser -->

## Import

Iot Security Device Group can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/securityDeviceGroup:SecurityDeviceGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Devices/iotHubs/hub1/providers/Microsoft.Security/deviceSecurityGroups/group1
```

¦
	allowRulenBl:j
h
iotSecurityDeviceGroupAllowRuleCazure:iot/SecurityDeviceGroupAllowRule:SecurityDeviceGroupAllowRule)an `allow_rule` blocks as defined below.

iothubId" uThe ID of the IoT Hub which to link the Security Device Group to. Changing this forces a new resource to be created.
r
nameB" dSpecifies the name of the Device Security Group. Changing this forces a new resource to be created.
²

rangeRulespBn*l:j
h
iotSecurityDeviceGroupRangeRuleCazure:iot/SecurityDeviceGroupRangeRule:SecurityDeviceGroupRangeRule2One or more `range_rule` blocks as defined below.
"¦
	allowRulenBl:j
h
iotSecurityDeviceGroupAllowRuleCazure:iot/SecurityDeviceGroupAllowRule:SecurityDeviceGroupAllowRule)an `allow_rule` blocks as defined below.
"
iothubId" uThe ID of the IoT Hub which to link the Security Device Group to. Changing this forces a new resource to be created.
"p
name" dSpecifies the name of the Device Security Group. Changing this forces a new resource to be created.
"²

rangeRulespBn*l:j
h
iotSecurityDeviceGroupRangeRuleCazure:iot/SecurityDeviceGroupRangeRule:SecurityDeviceGroupRangeRule2One or more `range_rule` blocks as defined below.
*O
D
iotSecuritySolution+azure:iot/securitySolution:SecuritySolutionë0Manages an iot security solution.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "example-IoTHub",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
});
const exampleSecuritySolution = new azure.iot.SecuritySolution("example", {
    name: "example-Iot-Security-Solution",
    resourceGroupName: example.name,
    location: example.location,
    displayName: "Iot Security Solution",
    iothubIds: [exampleIoTHub.id],
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_io_t_hub = azure.iot.IoTHub("example",
    name="example-IoTHub",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    })
example_security_solution = azure.iot.SecuritySolution("example",
    name="example-Iot-Security-Solution",
    resource_group_name=example.name,
    location=example.location,
    display_name="Iot Security Solution",
    iothub_ids=[example_io_t_hub.id])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "example-IoTHub",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
    });

    var exampleSecuritySolution = new Azure.Iot.SecuritySolution("example", new()
    {
        Name = "example-Iot-Security-Solution",
        ResourceGroupName = example.Name,
        Location = example.Location,
        DisplayName = "Iot Security Solution",
        IothubIds = new[]
        {
            exampleIoTHub.Id,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("example-IoTHub"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
		})
		if err != nil {
			return err
		}
		_, err = iot.NewSecuritySolution(ctx, "example", &iot.SecuritySolutionArgs{
			Name:              pulumi.String("example-Iot-Security-Solution"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			DisplayName:       pulumi.String("Iot Security Solution"),
			IothubIds: pulumi.StringArray{
				exampleIoTHub.ID(),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.SecuritySolution;
import com.pulumi.azure.iot.SecuritySolutionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("example-IoTHub")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .build());

        var exampleSecuritySolution = new SecuritySolution("exampleSecuritySolution", SecuritySolutionArgs.builder()
            .name("example-Iot-Security-Solution")
            .resourceGroupName(example.name())
            .location(example.location())
            .displayName("Iot Security Solution")
            .iothubIds(exampleIoTHub.id())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: example-IoTHub
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
  exampleSecuritySolution:
    type: azure:iot:SecuritySolution
    name: example
    properties:
      name: example-Iot-Security-Solution
      resourceGroupName: ${example.name}
      location: ${example.location}
      displayName: Iot Security Solution
      iothubIds:
        - ${exampleIoTHub.id}
```
<!--End PulumiCodeChooser -->

## Import

Iot Security Solution can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/securitySolution:SecuritySolution example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Security/iotSecuritySolutions/solution1
```

Ó
additionalWorkspacesB*:
}
iot#SecuritySolutionAdditionalWorkspaceQazure:iot/SecuritySolutionAdditionalWorkspace:SecuritySolutionAdditionalWorkspace1A `additional_workspace` block as defined below.
|
disabledDataSourcesB*" ]A list of disabled data sources for the Iot Security Solution. Possible value is `TwinData`.
N
displayName" ;Specifies the Display Name for this Iot Security Solution.
K
enabledB
 :Is the Iot Security Solution enabled? Defaults to `true`.
x
eventsToExportsB*" ]A list of data which is to exported to analytic workspace. Valid values include `RawEvents`.
f
	iothubIds*" SSpecifies the IoT Hub resource IDs to which this Iot Security Solution is applied.

locationB" uSpecifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
s
logAnalyticsWorkspaceIdB" RSpecifies the Log Analytics Workspace ID to which the security data will be sent.
`
logUnmaskedIpsEnabledB
 AShould IP addressed be unmasked in the log? Defaults to `false`.
r
nameB" dSpecifies the name of the Iot Security Solution. Changing this forces a new resource to be created.
^
queryForResourcesB" CAn Azure Resource Graph query used to set the resources monitored.
y
querySubscriptionIdsB*" YA list of subscription Ids on which the user defined resources query should be executed.

recommendationsEnabledB:

iot&SecuritySolutionRecommendationsEnabledWazure:iot/SecuritySolutionRecommendationsEnabled:SecuritySolutionRecommendationsEnabledTA `recommendations_enabled` block of options to enable or disable as defined below.
¤
resourceGroupName" Specifies the name of the resource group in which to create the Iot Security Solution. Changing this forces a new resource to be created.
=
tagsB2" -A mapping of tags to assign to the resource.
"Ó
additionalWorkspacesB*:
}
iot#SecuritySolutionAdditionalWorkspaceQazure:iot/SecuritySolutionAdditionalWorkspace:SecuritySolutionAdditionalWorkspace1A `additional_workspace` block as defined below.
"|
disabledDataSourcesB*" ]A list of disabled data sources for the Iot Security Solution. Possible value is `TwinData`.
"N
displayName" ;Specifies the Display Name for this Iot Security Solution.
"K
enabledB
 :Is the Iot Security Solution enabled? Defaults to `true`.
"x
eventsToExportsB*" ]A list of data which is to exported to analytic workspace. Valid values include `RawEvents`.
"f
	iothubIds*" SSpecifies the IoT Hub resource IDs to which this Iot Security Solution is applied.
"
location" uSpecifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
"s
logAnalyticsWorkspaceIdB" RSpecifies the Log Analytics Workspace ID to which the security data will be sent.
"`
logUnmaskedIpsEnabledB
 AShould IP addressed be unmasked in the log? Defaults to `false`.
"p
name" dSpecifies the name of the Iot Security Solution. Changing this forces a new resource to be created.
"\
queryForResources" CAn Azure Resource Graph query used to set the resources monitored.
"w
querySubscriptionIds*" YA list of subscription Ids on which the user defined resources query should be executed.
"ý
recommendationsEnabled:

iot&SecuritySolutionRecommendationsEnabledWazure:iot/SecuritySolutionRecommendationsEnabled:SecuritySolutionRecommendationsEnabledTA `recommendations_enabled` block of options to enable or disable as defined below.
"¤
resourceGroupName" Specifies the name of the resource group in which to create the Iot Security Solution. Changing this forces a new resource to be created.
"=
tagsB2" -A mapping of tags to assign to the resource.
*F
J
iotSharedAccessPolicy/azure:iot/sharedAccessPolicy:SharedAccessPolicy».Manages an IotHub Shared Access Policy

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleIoTHub = new azure.iot.IoTHub("example", {
    name: "example",
    resourceGroupName: example.name,
    location: example.location,
    sku: {
        name: "S1",
        capacity: 1,
    },
});
const exampleSharedAccessPolicy = new azure.iot.SharedAccessPolicy("example", {
    name: "example",
    resourceGroupName: example.name,
    iothubName: exampleIoTHub.name,
    registryRead: true,
    registryWrite: true,
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_io_t_hub = azure.iot.IoTHub("example",
    name="example",
    resource_group_name=example.name,
    location=example.location,
    sku={
        "name": "S1",
        "capacity": 1,
    })
example_shared_access_policy = azure.iot.SharedAccessPolicy("example",
    name="example",
    resource_group_name=example.name,
    iothub_name=example_io_t_hub.name,
    registry_read=True,
    registry_write=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleIoTHub = new Azure.Iot.IoTHub("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        Location = example.Location,
        Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
        {
            Name = "S1",
            Capacity = 1,
        },
    });

    var exampleSharedAccessPolicy = new Azure.Iot.SharedAccessPolicy("example", new()
    {
        Name = "example",
        ResourceGroupName = example.Name,
        IothubName = exampleIoTHub.Name,
        RegistryRead = true,
        RegistryWrite = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleIoTHub, err := iot.NewIoTHub(ctx, "example", &iot.IoTHubArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			Sku: &iot.IoTHubSkuArgs{
				Name:     pulumi.String("S1"),
				Capacity: pulumi.Int(1),
			},
		})
		if err != nil {
			return err
		}
		_, err = iot.NewSharedAccessPolicy(ctx, "example", &iot.SharedAccessPolicyArgs{
			Name:              pulumi.String("example"),
			ResourceGroupName: example.Name,
			IothubName:        exampleIoTHub.Name,
			RegistryRead:      pulumi.Bool(true),
			RegistryWrite:     pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iot.IoTHub;
import com.pulumi.azure.iot.IoTHubArgs;
import com.pulumi.azure.iot.inputs.IoTHubSkuArgs;
import com.pulumi.azure.iot.SharedAccessPolicy;
import com.pulumi.azure.iot.SharedAccessPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleIoTHub = new IoTHub("exampleIoTHub", IoTHubArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .location(example.location())
            .sku(IoTHubSkuArgs.builder()
                .name("S1")
                .capacity("1")
                .build())
            .build());

        var exampleSharedAccessPolicy = new SharedAccessPolicy("exampleSharedAccessPolicy", SharedAccessPolicyArgs.builder()
            .name("example")
            .resourceGroupName(example.name())
            .iothubName(exampleIoTHub.name())
            .registryRead(true)
            .registryWrite(true)
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleIoTHub:
    type: azure:iot:IoTHub
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      location: ${example.location}
      sku:
        name: S1
        capacity: '1'
  exampleSharedAccessPolicy:
    type: azure:iot:SharedAccessPolicy
    name: example
    properties:
      name: example
      resourceGroupName: ${example.name}
      iothubName: ${exampleIoTHub.name}
      registryRead: true
      registryWrite: true
```
<!--End PulumiCodeChooser -->

## Import

IoTHub Shared Access Policies can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iot/sharedAccessPolicy:SharedAccessPolicy shared_access_policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/iotHubKeys/shared_access_policy1
```


deviceConnectB
 Adds `DeviceConnect` permission to this Shared Access Account. It allows sending and receiving on the device-side endpoints.

> **NOTE** At least one of `registry_read`, `registry_write`, `service_connect`, `device_connect` permissions must be set to `true`.


iothubName" vThe name of the IoTHub to which this Shared Access Policy belongs. Changing this forces a new resource to be created.

nameB" sSpecifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.

registryReadB
 nAdds `RegistryRead` permission to this Shared Access Account. It allows read access to the identity registry.

registryWriteB
 ùAdds `RegistryWrite` permission to this Shared Access Account. It allows write access to the identity registry.

> **NOTE** When `registry_write` is set to `true`, `registry_read` must also be set to true. This is a limitation of the Azure REST API
´
resourceGroupName" The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.

serviceConnectB
 }Adds `ServiceConnect` permission to this Shared Access Account. It allows sending and receiving on the cloud-side endpoints.
"
deviceConnectB
 Adds `DeviceConnect` permission to this Shared Access Account. It allows sending and receiving on the device-side endpoints.

> **NOTE** At least one of `registry_read`, `registry_write`, `service_connect`, `device_connect` permissions must be set to `true`.
"

iothubName" vThe name of the IoTHub to which this Shared Access Policy belongs. Changing this forces a new resource to be created.
"
name" sSpecifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.
"Z
primaryConnectionString" ;The primary connection string of the Shared Access Policy.
"K

primaryKey" 9The primary key used to create the authentication token.
"
registryReadB
 nAdds `RegistryRead` permission to this Shared Access Account. It allows read access to the identity registry.
"
registryWriteB
 ùAdds `RegistryWrite` permission to this Shared Access Account. It allows write access to the identity registry.

> **NOTE** When `registry_write` is set to `true`, `registry_read` must also be set to true. This is a limitation of the Azure REST API
"´
resourceGroupName" The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
"^
secondaryConnectionString" =The secondary connection string of the Shared Access Policy.
"O
secondaryKey" ;The secondary key used to create the authentication token.
"
serviceConnectB
 }Adds `ServiceConnect` permission to this Shared Access Account. It allows sending and receiving on the cloud-side endpoints.
*¾A
C

iotcentralApplication(azure:iotcentral/application:Application¸(Manages an IoT Central Application

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resource",
    location: "West Europe",
});
const exampleApplication = new azure.iotcentral.Application("example", {
    name: "example-iotcentral-app",
    resourceGroupName: example.name,
    location: example.location,
    subDomain: "example-iotcentral-app-subdomain",
    displayName: "example-iotcentral-app-display-name",
    sku: "ST1",
    template: "iotc-default@1.0.0",
    tags: {
        Foo: "Bar",
    },
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resource",
    location="West Europe")
example_application = azure.iotcentral.Application("example",
    name="example-iotcentral-app",
    resource_group_name=example.name,
    location=example.location,
    sub_domain="example-iotcentral-app-subdomain",
    display_name="example-iotcentral-app-display-name",
    sku="ST1",
    template="iotc-default@1.0.0",
    tags={
        "Foo": "Bar",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resource",
        Location = "West Europe",
    });

    var exampleApplication = new Azure.IotCentral.Application("example", new()
    {
        Name = "example-iotcentral-app",
        ResourceGroupName = example.Name,
        Location = example.Location,
        SubDomain = "example-iotcentral-app-subdomain",
        DisplayName = "example-iotcentral-app-display-name",
        Sku = "ST1",
        Template = "iotc-default@1.0.0",
        Tags = 
        {
            { "Foo", "Bar" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iotcentral"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resource"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		_, err = iotcentral.NewApplication(ctx, "example", &iotcentral.ApplicationArgs{
			Name:              pulumi.String("example-iotcentral-app"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			SubDomain:         pulumi.String("example-iotcentral-app-subdomain"),
			DisplayName:       pulumi.String("example-iotcentral-app-display-name"),
			Sku:               pulumi.String("ST1"),
			Template:          pulumi.String("iotc-default@1.0.0"),
			Tags: pulumi.StringMap{
				"Foo": pulumi.String("Bar"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iotcentral.Application;
import com.pulumi.azure.iotcentral.ApplicationArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resource")
            .location("West Europe")
            .build());

        var exampleApplication = new Application("exampleApplication", ApplicationArgs.builder()
            .name("example-iotcentral-app")
            .resourceGroupName(example.name())
            .location(example.location())
            .subDomain("example-iotcentral-app-subdomain")
            .displayName("example-iotcentral-app-display-name")
            .sku("ST1")
            .template("iotc-default@1.0.0")
            .tags(Map.of("Foo", "Bar"))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resource
      location: West Europe
  exampleApplication:
    type: azure:iotcentral:Application
    name: example
    properties:
      name: example-iotcentral-app
      resourceGroupName: ${example.name}
      location: ${example.location}
      subDomain: example-iotcentral-app-subdomain
      displayName: example-iotcentral-app-display-name
      sku: ST1
      template: iotc-default@1.0.0
      tags:
        Foo: Bar
```
<!--End PulumiCodeChooser -->

## Import

The IoT Central Application can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iotcentral/application:Application example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.IoTCentral/iotApps/app1
```

 
displayNameB" A `display_name` name. Custom display name for the IoT Central application. Default is resource name.

> **NOTE:** Due to a bug in the provider, the default value of `display_name` of a newly created IoT Central App will be the Resource Group Name, it will be fixed and use resource name in 4.0. For an existing IoT Central App, this could be fixed by specifying the `display_name` explicitly.

identityaB_:]
[

iotcentralApplicationIdentity8azure:iotcentral/ApplicationIdentity:ApplicationIdentity&An `identity` block as defined below.

locationB" Specifies the supported Azure location where the resource has to be create. Changing this forces a new resource to be created.
l
nameB" ^Specifies the name of the IotHub resource. Changing this forces a new resource to be created.

publicNetworkAccessEnabledB
 ^Whether public network access is allowed for the IoT Central Application. Defaults to `true`.

resourceGroupName" The name of the resource group under which the IotHub resource has to be created. Changing this forces a new resource to be created.
Z
skuB" MA `sku` name. Possible values is `ST0`, `ST1`, `ST2`, Default value is `ST1`
x
	subDomain" gA `sub_domain` name. Subdomain for the IoT Central URL. Each application must have a unique subdomain.
=
tagsB2" -A mapping of tags to assign to the resource.
¦
templateB" A `template` name. IoT Central application template name. Defaults to `iotc-pnp-preview@1.0.0`. Changing this forces a new resource to be created.
"
displayName" A `display_name` name. Custom display name for the IoT Central application. Default is resource name.

> **NOTE:** Due to a bug in the provider, the default value of `display_name` of a newly created IoT Central App will be the Resource Group Name, it will be fixed and use resource name in 4.0. For an existing IoT Central App, this could be fixed by specifying the `display_name` explicitly.
"
identityaB_:]
[

iotcentralApplicationIdentity8azure:iotcentral/ApplicationIdentity:ApplicationIdentity&An `identity` block as defined below.
"
location" Specifies the supported Azure location where the resource has to be create. Changing this forces a new resource to be created.
"j
name" ^Specifies the name of the IotHub resource. Changing this forces a new resource to be created.
"
publicNetworkAccessEnabledB
 ^Whether public network access is allowed for the IoT Central Application. Defaults to `true`.
"
resourceGroupName" The name of the resource group under which the IotHub resource has to be created. Changing this forces a new resource to be created.
"Z
skuB" MA `sku` name. Possible values is `ST0`, `ST1`, `ST2`, Default value is `ST1`
"x
	subDomain" gA `sub_domain` name. Subdomain for the IoT Central URL. Each application must have a unique subdomain.
"=
tagsB2" -A mapping of tags to assign to the resource.
"¦
templateB" A `template` name. IoT Central application template name. Defaults to `iotc-pnp-preview@1.0.0`. Changing this forces a new resource to be created.
*J
m

iotcentralApplicationNetworkRuleSetDazure:iotcentral/applicationNetworkRuleSet:ApplicationNetworkRuleSet>Manages an IoT Central Application Network Rule Set.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resource",
    location: "West Europe",
});
const exampleApplication = new azure.iotcentral.Application("example", {
    name: "example-iotcentral-app",
    resourceGroupName: example.name,
    location: example.location,
    subDomain: "example-iotcentral-app-subdomain",
    displayName: "example-iotcentral-app-display-name",
    sku: "ST1",
    tags: {
        Foo: "Bar",
    },
});
const exampleApplicationNetworkRuleSet = new azure.iotcentral.ApplicationNetworkRuleSet("example", {
    iotcentralApplicationId: exampleApplication.id,
    ipRules: [
        {
            name: "rule1",
            ipMask: "10.0.1.0/24",
        },
        {
            name: "rule2",
            ipMask: "10.1.1.0/24",
        },
    ],
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resource",
    location="West Europe")
example_application = azure.iotcentral.Application("example",
    name="example-iotcentral-app",
    resource_group_name=example.name,
    location=example.location,
    sub_domain="example-iotcentral-app-subdomain",
    display_name="example-iotcentral-app-display-name",
    sku="ST1",
    tags={
        "Foo": "Bar",
    })
example_application_network_rule_set = azure.iotcentral.ApplicationNetworkRuleSet("example",
    iotcentral_application_id=example_application.id,
    ip_rules=[
        {
            "name": "rule1",
            "ip_mask": "10.0.1.0/24",
        },
        {
            "name": "rule2",
            "ip_mask": "10.1.1.0/24",
        },
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resource",
        Location = "West Europe",
    });

    var exampleApplication = new Azure.IotCentral.Application("example", new()
    {
        Name = "example-iotcentral-app",
        ResourceGroupName = example.Name,
        Location = example.Location,
        SubDomain = "example-iotcentral-app-subdomain",
        DisplayName = "example-iotcentral-app-display-name",
        Sku = "ST1",
        Tags = 
        {
            { "Foo", "Bar" },
        },
    });

    var exampleApplicationNetworkRuleSet = new Azure.IotCentral.ApplicationNetworkRuleSet("example", new()
    {
        IotcentralApplicationId = exampleApplication.Id,
        IpRules = new[]
        {
            new Azure.IotCentral.Inputs.ApplicationNetworkRuleSetIpRuleArgs
            {
                Name = "rule1",
                IpMask = "10.0.1.0/24",
            },
            new Azure.IotCentral.Inputs.ApplicationNetworkRuleSetIpRuleArgs
            {
                Name = "rule2",
                IpMask = "10.1.1.0/24",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iotcentral"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resource"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleApplication, err := iotcentral.NewApplication(ctx, "example", &iotcentral.ApplicationArgs{
			Name:              pulumi.String("example-iotcentral-app"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			SubDomain:         pulumi.String("example-iotcentral-app-subdomain"),
			DisplayName:       pulumi.String("example-iotcentral-app-display-name"),
			Sku:               pulumi.String("ST1"),
			Tags: pulumi.StringMap{
				"Foo": pulumi.String("Bar"),
			},
		})
		if err != nil {
			return err
		}
		_, err = iotcentral.NewApplicationNetworkRuleSet(ctx, "example", &iotcentral.ApplicationNetworkRuleSetArgs{
			IotcentralApplicationId: exampleApplication.ID(),
			IpRules: iotcentral.ApplicationNetworkRuleSetIpRuleArray{
				&iotcentral.ApplicationNetworkRuleSetIpRuleArgs{
					Name:   pulumi.String("rule1"),
					IpMask: pulumi.String("10.0.1.0/24"),
				},
				&iotcentral.ApplicationNetworkRuleSetIpRuleArgs{
					Name:   pulumi.String("rule2"),
					IpMask: pulumi.String("10.1.1.0/24"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iotcentral.Application;
import com.pulumi.azure.iotcentral.ApplicationArgs;
import com.pulumi.azure.iotcentral.ApplicationNetworkRuleSet;
import com.pulumi.azure.iotcentral.ApplicationNetworkRuleSetArgs;
import com.pulumi.azure.iotcentral.inputs.ApplicationNetworkRuleSetIpRuleArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resource")
            .location("West Europe")
            .build());

        var exampleApplication = new Application("exampleApplication", ApplicationArgs.builder()
            .name("example-iotcentral-app")
            .resourceGroupName(example.name())
            .location(example.location())
            .subDomain("example-iotcentral-app-subdomain")
            .displayName("example-iotcentral-app-display-name")
            .sku("ST1")
            .tags(Map.of("Foo", "Bar"))
            .build());

        var exampleApplicationNetworkRuleSet = new ApplicationNetworkRuleSet("exampleApplicationNetworkRuleSet", ApplicationNetworkRuleSetArgs.builder()
            .iotcentralApplicationId(exampleApplication.id())
            .ipRules(            
                ApplicationNetworkRuleSetIpRuleArgs.builder()
                    .name("rule1")
                    .ipMask("10.0.1.0/24")
                    .build(),
                ApplicationNetworkRuleSetIpRuleArgs.builder()
                    .name("rule2")
                    .ipMask("10.1.1.0/24")
                    .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resource
      location: West Europe
  exampleApplication:
    type: azure:iotcentral:Application
    name: example
    properties:
      name: example-iotcentral-app
      resourceGroupName: ${example.name}
      location: ${example.location}
      subDomain: example-iotcentral-app-subdomain
      displayName: example-iotcentral-app-display-name
      sku: ST1
      tags:
        Foo: Bar
  exampleApplicationNetworkRuleSet:
    type: azure:iotcentral:ApplicationNetworkRuleSet
    name: example
    properties:
      iotcentralApplicationId: ${exampleApplication.id}
      ipRules:
        - name: rule1
          ipMask: 10.0.1.0/24
        - name: rule2
          ipMask: 10.1.1.0/24
```
<!--End PulumiCodeChooser -->

## Import

IoT Central Application Network Rule Sets can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:iotcentral/applicationNetworkRuleSet:ApplicationNetworkRuleSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.IoTCentral/iotApps/app1
```

Þ
applyToDeviceB
 ÆWhether these IP Rules apply for device connectivity to IoT Hub and Device Provisioning Service associated with this IoT Central Application. Possible values are `true`, `false`. Defaults to `true`
£
defaultActionB" Specifies the default action for the IoT Central Application Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
y
iotcentralApplicationId" ZThe ID of the IoT Central Application. Changing this forces a new resource to be created.
Ç
ipRulesB*:


iotcentralApplicationNetworkRuleSetIpRulePazure:iotcentral/ApplicationNetworkRuleSetIpRule:ApplicationNetworkRuleSetIpRule/One or more `ip_rule` blocks as defined below.
"Þ
applyToDeviceB
 ÆWhether these IP Rules apply for device connectivity to IoT Hub and Device Provisioning Service associated with this IoT Central Application. Possible values are `true`, `false`. Defaults to `true`
"£
defaultActionB" Specifies the default action for the IoT Central Application Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
"y
iotcentralApplicationId" ZThe ID of the IoT Central Application. Changing this forces a new resource to be created.
"Ç
ipRulesB*:


iotcentralApplicationNetworkRuleSetIpRulePazure:iotcentral/ApplicationNetworkRuleSetIpRule:ApplicationNetworkRuleSetIpRule/One or more `ip_rule` blocks as defined below.
*¡K
F

iotcentralOrganization*azure:iotcentral/organization:Organization¦DManages an IoT Central Organization

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.core.ResourceGroup("example", {
    name: "example-resource",
    location: "West Europe",
});
const exampleApplication = new azure.iotcentral.Application("example", {
    name: "example-iotcentral-app",
    resourceGroupName: example.name,
    location: example.location,
    subDomain: "example-iotcentral-app-subdomain",
    displayName: "example-iotcentral-app-display-name",
    sku: "ST1",
    template: "iotc-default@1.0.0",
    tags: {
        Foo: "Bar",
    },
});
const exampleParent = new azure.iotcentral.Organization("example_parent", {
    iotcentralApplicationId: exampleApplication.id,
    organizationId: "example-parent-organization-id",
    displayName: "Org example parent",
});
const exampleOrganization = new azure.iotcentral.Organization("example", {
    iotcentralApplicationId: exampleApplication.id,
    organizationId: "example-child-organization-id",
    displayName: "Org example",
    parentOrganizationId: exampleParent.organizationId,
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.ResourceGroup("example",
    name="example-resource",
    location="West Europe")
example_application = azure.iotcentral.Application("example",
    name="example-iotcentral-app",
    resource_group_name=example.name,
    location=example.location,
    sub_domain="example-iotcentral-app-subdomain",
    display_name="example-iotcentral-app-display-name",
    sku="ST1",
    template="iotc-default@1.0.0",
    tags={
        "Foo": "Bar",
    })
example_parent = azure.iotcentral.Organization("example_parent",
    iotcentral_application_id=example_application.id,
    organization_id="example-parent-organization-id",
    display_name="Org example parent")
example_organization = azure.iotcentral.Organization("example",
    iotcentral_application_id=example_application.id,
    organization_id="example-child-organization-id",
    display_name="Org example",
    parent_organization_id=example_parent.organization_id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resource",
        Location = "West Europe",
    });

    var exampleApplication = new Azure.IotCentral.Application("example", new()
    {
        Name = "example-iotcentral-app",
        ResourceGroupName = example.Name,
        Location = example.Location,
        SubDomain = "example-iotcentral-app-subdomain",
        DisplayName = "example-iotcentral-app-display-name",
        Sku = "ST1",
        Template = "iotc-default@1.0.0",
        Tags = 
        {
            { "Foo", "Bar" },
        },
    });

    var exampleParent = new Azure.IotCentral.Organization("example_parent", new()
    {
        IotcentralApplicationId = exampleApplication.Id,
        OrganizationId = "example-parent-organization-id",
        DisplayName = "Org example parent",
    });

    var exampleOrganization = new Azure.IotCentral.Organization("example", new()
    {
        IotcentralApplicationId = exampleApplication.Id,
        OrganizationId = "example-child-organization-id",
        DisplayName = "Org example",
        ParentOrganizationId = exampleParent.OrganizationId,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iotcentral"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resource"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleApplication, err := iotcentral.NewApplication(ctx, "example", &iotcentral.ApplicationArgs{
			Name:              pulumi.String("example-iotcentral-app"),
			ResourceGroupName: example.Name,
			Location:          example.Location,
			SubDomain:         pulumi.String("example-iotcentral-app-subdomain"),
			DisplayName:       pulumi.String("example-iotcentral-app-display-name"),
			Sku:               pulumi.String("ST1"),
			Template:          pulumi.String("iotc-default@1.0.0"),
			Tags: pulumi.StringMap{
				"Foo": pulumi.String("Bar"),
			},
		})
		if err != nil {
			return err
		}
		exampleParent, err := iotcentral.NewOrganization(ctx, "example_parent", &iotcentral.OrganizationArgs{
			IotcentralApplicationId: exampleApplication.ID(),
			OrganizationId:          pulumi.String("example-parent-organization-id"),
			DisplayName:             pulumi.String("Org example parent"),
		})
		if err != nil {
			return err
		}
		_, err = iotcentral.NewOrganization(ctx, "example", &iotcentral.OrganizationArgs{
			IotcentralApplicationId: exampleApplication.ID(),
			OrganizationId:          pulumi.String("example-child-organization-id"),
			DisplayName:             pulumi.String("Org example"),
			ParentOrganizationId:    exampleParent.OrganizationId,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.iotcentral.Application;
import com.pulumi.azure.iotcentral.ApplicationArgs;
import com.pulumi.azure.iotcentral.Organization;
import com.pulumi.azure.iotcentral.OrganizationArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resource")
            .location("West Europe")
            .build());

        var exampleApplication = new Application("exampleApplication", ApplicationArgs.builder()
            .name("example-iotcentral-app")
            .resourceGroupName(example.name())
            .location(example.location())
            .subDomain("example-iotcentral-app-subdomain")
            .displayName("example-iotcentral-app-display-name")
            .sku("ST1")
            .template("iotc-default@1.0.0")
            .tags(Map.of("Foo", "Bar"))
            .build());

        var exampleParent = new Organization("exampleParent", OrganizationArgs.builder()
            .iotcentralApplicationId(exampleApplication.id())
            .organizationId("example-parent-organization-id")
            .displayName("Org example parent")
            .build());

        var exampleOrganization = new Organization("exampleOrganization", OrganizationArgs.builder()
            .iotcentralApplicationId(exampleApplication.id())
            .organizationId("example-child-organization-id")
            .displayName("Org example")
            .parentOrganizationId(exampleParent.organizationId())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resource
      location: West Europe
  exampleApplication:
    type: azure:iotcentral:Application
    name: example
    properties:
      name: example-iotcentral-app
      resourceGroupName: ${example.name}
      location: ${example.location}
      subDomain: example-iotcentral-app-subdomain
      displayName: example-iotcentral-app-display-name
      sku: ST1
      template: iotc-default@1.0.0
      tags:
        Foo: Bar
  exampleParent:
    type: azure:iotcentral:Organization
    name: example_parent
    properties:
      iotcentralApplicationId: ${exampleApplication.id}
      organizationId: example-parent-organization-id
      displayName: Org example parent
  exampleOrganization:
    type: azure:iotcentral:Organization
    name: example
    properties:
      iotcentralApplicationId: ${exampleApplication.id}
      organizationId: example-child-organization-id
      displayName: Org example
      parentOrganizationId: ${exampleParent.organizationId}
```
<!--End PulumiCodeChooser -->

## Import

The IoT Central Organization can be imported using the `id`, e.g.

```sh
$ pulumi import azure:iotcentral/organization:Organization example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.IoTCentral/iotApps/example/organizations/example
```

?
displayName" ,Custom `display_name` for the organization.
h
iotcentralApplicationId" IThe application `id`. Changing this forces a new resource to be created.
e
organizationId" OThe ID of the organization. Changing this forces a new resource to be created.

parentOrganizationIdB" eThe `organization_id` of the parent organization. Changing this forces a new resource to be created.
"?
displayName" ,Custom `display_name` for the organization.
"h
iotcentralApplicationId" IThe application `id`. Changing this forces a new resource to be created.
"e
organizationId" OThe ID of the organization. Changing this forces a new resource to be created.
"
parentOrganizationIdB" eThe `organization_id` of the parent organization. Changing this forces a new resource to be created.
*Õy
B
keyvaultAccessPolicy(azure:keyvault/accessPolicy:AccessPolicyÖ\Manages a Key Vault Access Policy.

> **NOTE:** It's possible to define Key Vault Access Policies both within the `azure.keyvault.KeyVault` resource via the `access_policy` block and by using the `azure.keyvault.AccessPolicy` resource. However it's not possible to use both methods to manage Access Policies within a KeyVault, since there'll be conflicts.

> **NOTE:** Azure permits a maximum of 1024 Access Policies per Key Vault - [more information can be found in this document](https://docs.microsoft.com/azure/key-vault/key-vault-secure-your-key-vault#data-plane-access-control).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";
import * as azuread from "@pulumi/azuread";

const current = azure.core.getClientConfig({});
const exampleResourceGroup = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "examplekeyvault",
    location: exampleResourceGroup.location,
    resourceGroupName: exampleResourceGroup.name,
    tenantId: current.then(current => current.tenantId),
    skuName: "premium",
});
const exampleAccessPolicy = new azure.keyvault.AccessPolicy("example", {
    keyVaultId: exampleKeyVault.id,
    tenantId: current.then(current => current.tenantId),
    objectId: current.then(current => current.objectId),
    keyPermissions: ["Get"],
    secretPermissions: ["Get"],
});
const example = azuread.getServicePrincipal({
    displayName: "example-app",
});
const example_principal = new azure.keyvault.AccessPolicy("example-principal", {
    keyVaultId: exampleKeyVault.id,
    tenantId: current.then(current => current.tenantId),
    objectId: example.then(example => example.objectId),
    keyPermissions: [
        "Get",
        "List",
        "Encrypt",
        "Decrypt",
    ],
});
```
```python
import pulumi
import pulumi_azure as azure
import pulumi_azuread as azuread

current = azure.core.get_client_config()
example_resource_group = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_key_vault = azure.keyvault.KeyVault("example",
    name="examplekeyvault",
    location=example_resource_group.location,
    resource_group_name=example_resource_group.name,
    tenant_id=current.tenant_id,
    sku_name="premium")
example_access_policy = azure.keyvault.AccessPolicy("example",
    key_vault_id=example_key_vault.id,
    tenant_id=current.tenant_id,
    object_id=current.object_id,
    key_permissions=["Get"],
    secret_permissions=["Get"])
example = azuread.get_service_principal(display_name="example-app")
example_principal = azure.keyvault.AccessPolicy("example-principal",
    key_vault_id=example_key_vault.id,
    tenant_id=current.tenant_id,
    object_id=example.object_id,
    key_permissions=[
        "Get",
        "List",
        "Encrypt",
        "Decrypt",
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;
using AzureAD = Pulumi.AzureAD;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var exampleResourceGroup = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "examplekeyvault",
        Location = exampleResourceGroup.Location,
        ResourceGroupName = exampleResourceGroup.Name,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SkuName = "premium",
    });

    var exampleAccessPolicy = new Azure.KeyVault.AccessPolicy("example", new()
    {
        KeyVaultId = exampleKeyVault.Id,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        ObjectId = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
        KeyPermissions = new[]
        {
            "Get",
        },
        SecretPermissions = new[]
        {
            "Get",
        },
    });

    var example = AzureAD.GetServicePrincipal.Invoke(new()
    {
        DisplayName = "example-app",
    });

    var example_principal = new Azure.KeyVault.AccessPolicy("example-principal", new()
    {
        KeyVaultId = exampleKeyVault.Id,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        ObjectId = example.Apply(getServicePrincipalResult => getServicePrincipalResult.ObjectId),
        KeyPermissions = new[]
        {
            "Get",
            "List",
            "Encrypt",
            "Decrypt",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:              pulumi.String("examplekeyvault"),
			Location:          exampleResourceGroup.Location,
			ResourceGroupName: exampleResourceGroup.Name,
			TenantId:          pulumi.String(current.TenantId),
			SkuName:           pulumi.String("premium"),
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewAccessPolicy(ctx, "example", &keyvault.AccessPolicyArgs{
			KeyVaultId: exampleKeyVault.ID(),
			TenantId:   pulumi.String(current.TenantId),
			ObjectId:   pulumi.String(current.ObjectId),
			KeyPermissions: pulumi.StringArray{
				pulumi.String("Get"),
			},
			SecretPermissions: pulumi.StringArray{
				pulumi.String("Get"),
			},
		})
		if err != nil {
			return err
		}
		example, err := azuread.LookupServicePrincipal(ctx, &azuread.LookupServicePrincipalArgs{
			DisplayName: pulumi.StringRef("example-app"),
		}, nil)
		if err != nil {
			return err
		}
		_, err = keyvault.NewAccessPolicy(ctx, "example-principal", &keyvault.AccessPolicyArgs{
			KeyVaultId: exampleKeyVault.ID(),
			TenantId:   pulumi.String(current.TenantId),
			ObjectId:   pulumi.String(example.ObjectId),
			KeyPermissions: pulumi.StringArray{
				pulumi.String("Get"),
				pulumi.String("List"),
				pulumi.String("Encrypt"),
				pulumi.String("Decrypt"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.AccessPolicy;
import com.pulumi.azure.keyvault.AccessPolicyArgs;
import com.pulumi.azuread.AzureadFunctions;
import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var exampleResourceGroup = new ResourceGroup("exampleResourceGroup", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("examplekeyvault")
            .location(exampleResourceGroup.location())
            .resourceGroupName(exampleResourceGroup.name())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .skuName("premium")
            .build());

        var exampleAccessPolicy = new AccessPolicy("exampleAccessPolicy", AccessPolicyArgs.builder()
            .keyVaultId(exampleKeyVault.id())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
            .keyPermissions("Get")
            .secretPermissions("Get")
            .build());

        final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
            .displayName("example-app")
            .build());

        var example_principal = new AccessPolicy("example-principal", AccessPolicyArgs.builder()
            .keyVaultId(exampleKeyVault.id())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .objectId(example.applyValue(getServicePrincipalResult -> getServicePrincipalResult.objectId()))
            .keyPermissions(            
                "Get",
                "List",
                "Encrypt",
                "Decrypt")
            .build());

    }
}
```
```yaml
resources:
  exampleResourceGroup:
    type: azure:core:ResourceGroup
    name: example
    properties:
      name: example-resources
      location: West Europe
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: examplekeyvault
      location: ${exampleResourceGroup.location}
      resourceGroupName: ${exampleResourceGroup.name}
      tenantId: ${current.tenantId}
      skuName: premium
  exampleAccessPolicy:
    type: azure:keyvault:AccessPolicy
    name: example
    properties:
      keyVaultId: ${exampleKeyVault.id}
      tenantId: ${current.tenantId}
      objectId: ${current.objectId}
      keyPermissions:
        - Get
      secretPermissions:
        - Get
  example-principal:
    type: azure:keyvault:AccessPolicy
    properties:
      keyVaultId: ${exampleKeyVault.id}
      tenantId: ${current.tenantId}
      objectId: ${example.objectId}
      keyPermissions:
        - Get
        - List
        - Encrypt
        - Decrypt
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
  example:
    fn::invoke:
      function: azuread:getServicePrincipal
      arguments:
        displayName: example-app
```
<!--End PulumiCodeChooser -->

## Import

Key Vault Access Policies can be imported using the Resource ID of the Key Vault, plus some additional metadata.

If both an `object_id` and `application_id` are specified, then the Access Policy can be imported using the following code:

```sh
$ pulumi import azure:keyvault/accessPolicy:AccessPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.KeyVault/vaults/test-vault/objectId/11111111-1111-1111-1111-111111111111/applicationId/22222222-2222-2222-2222-222222222222
```

where `11111111-1111-1111-1111-111111111111` is the `object_id` and `22222222-2222-2222-2222-222222222222` is the `application_id`.

---

Access Policies with an `object_id` but no `application_id` can be imported using the following command:

```sh
$ pulumi import azure:keyvault/accessPolicy:AccessPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.KeyVault/vaults/test-vault/objectId/11111111-1111-1111-1111-111111111111
```

where `11111111-1111-1111-1111-111111111111` is the `object_id`.


applicationIdB" nThe object ID of an Application in Azure Active Directory. Changing this forces a new resource to be created.
®
certificatePermissionsB*" List of certificate permissions, must be one or more from the following: `Backup`, `Create`, `Delete`, `DeleteIssuers`, `Get`, `GetIssuers`, `Import`, `List`, `ListIssuers`, `ManageContacts`, `ManageIssuers`, `Purge`, `Recover`, `Restore`, `SetIssuers` and `Update`.
¾
keyPermissionsB*" £List of key permissions, must be one or more from the following: `Backup`, `Create`, `Decrypt`, `Delete`, `Encrypt`, `Get`, `Import`, `List`, `Purge`, `Recover`, `Restore`, `Sign`, `UnwrapKey`, `Update`, `Verify`, `WrapKey`, `Release`, `Rotate`, `GetRotationPolicy` and `SetRotationPolicy`.
q

keyVaultId" _Specifies the id of the Key Vault resource. Changing this forces a new resource to be created.
Ó
objectId" ÂThe object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID of a service principal can be fetched from `azuread_service_principal.object_id`. The object ID must be unique for the list of access policies. Changing this forces a new resource to be created.
®
secretPermissionsB*" List of secret permissions, must be one or more from the following: `Backup`, `Delete`, `Get`, `List`, `Purge`, `Recover`, `Restore` and `Set`.
÷
storagePermissionsB*" ØList of storage permissions, must be one or more from the following: `Backup`, `Delete`, `DeleteSAS`, `Get`, `GetSAS`, `List`, `ListSAS`, `Purge`, `Recover`, `RegenerateKey`, `Restore`, `Set`, `SetSAS` and `Update`.
«
tenantId" The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Changing this forces a new resource to be created.
"
applicationIdB" nThe object ID of an Application in Azure Active Directory. Changing this forces a new resource to be created.
"®
certificatePermissionsB*" List of certificate permissions, must be one or more from the following: `Backup`, `Create`, `Delete`, `DeleteIssuers`, `Get`, `GetIssuers`, `Import`, `List`, `ListIssuers`, `ManageContacts`, `ManageIssuers`, `Purge`, `Recover`, `Restore`, `SetIssuers` and `Update`.
"¾
keyPermissionsB*" £List of key permissions, must be one or more from the following: `Backup`, `Create`, `Decrypt`, `Delete`, `Encrypt`, `Get`, `Import`, `List`, `Purge`, `Recover`, `Restore`, `Sign`, `UnwrapKey`, `Update`, `Verify`, `WrapKey`, `Release`, `Rotate`, `GetRotationPolicy` and `SetRotationPolicy`.
"q

keyVaultId" _Specifies the id of the Key Vault resource. Changing this forces a new resource to be created.
"Ó
objectId" ÂThe object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID of a service principal can be fetched from `azuread_service_principal.object_id`. The object ID must be unique for the list of access policies. Changing this forces a new resource to be created.
"®
secretPermissionsB*" List of secret permissions, must be one or more from the following: `Backup`, `Delete`, `Get`, `List`, `Purge`, `Recover`, `Restore` and `Set`.
"÷
storagePermissionsB*" ØList of storage permissions, must be one or more from the following: `Backup`, `Delete`, `DeleteSAS`, `Get`, `GetSAS`, `List`, `ListSAS`, `Purge`, `Recover`, `RegenerateKey`, `Restore`, `Set`, `SetSAS` and `Update`.
"«
tenantId" The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Changing this forces a new resource to be created.
*Î
<
keyvault
Certifiate$azure:keyvault/certifiate:Certifiate³Manages a Key Vault Certificate.

## Example Usage

### Importing A PFX)

> **Note:** this example assumed the PFX file is located in the same directory at `certificate-to-import.pfx`.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";
import * as std from "@pulumi/std";

const current = azure.core.getClientConfig({});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "examplekeyvault",
    location: example.location,
    resourceGroupName: example.name,
    tenantId: current.then(current => current.tenantId),
    skuName: "premium",
    accessPolicies: [{
        tenantId: current.then(current => current.tenantId),
        objectId: current.then(current => current.objectId),
        certificatePermissions: [
            "Create",
            "Delete",
            "DeleteIssuers",
            "Get",
            "GetIssuers",
            "Import",
            "List",
            "ListIssuers",
            "ManageContacts",
            "ManageIssuers",
            "SetIssuers",
            "Update",
        ],
        keyPermissions: [
            "Backup",
            "Create",
            "Decrypt",
            "Delete",
            "Encrypt",
            "Get",
            "Import",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Sign",
            "UnwrapKey",
            "Update",
            "Verify",
            "WrapKey",
        ],
        secretPermissions: [
            "Backup",
            "Delete",
            "Get",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Set",
        ],
    }],
});
const exampleCertificate = new azure.keyvault.Certificate("example", {
    name: "imported-cert",
    keyVaultId: exampleKeyVault.id,
    certificate: {
        contents: std.filebase64({
            input: "certificate-to-import.pfx",
        }).then(invoke => invoke.result),
        password: "",
    },
});
```
```python
import pulumi
import pulumi_azure as azure
import pulumi_std as std

current = azure.core.get_client_config()
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_key_vault = azure.keyvault.KeyVault("example",
    name="examplekeyvault",
    location=example.location,
    resource_group_name=example.name,
    tenant_id=current.tenant_id,
    sku_name="premium",
    access_policies=[{
        "tenant_id": current.tenant_id,
        "object_id": current.object_id,
        "certificate_permissions": [
            "Create",
            "Delete",
            "DeleteIssuers",
            "Get",
            "GetIssuers",
            "Import",
            "List",
            "ListIssuers",
            "ManageContacts",
            "ManageIssuers",
            "SetIssuers",
            "Update",
        ],
        "key_permissions": [
            "Backup",
            "Create",
            "Decrypt",
            "Delete",
            "Encrypt",
            "Get",
            "Import",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Sign",
            "UnwrapKey",
            "Update",
            "Verify",
            "WrapKey",
        ],
        "secret_permissions": [
            "Backup",
            "Delete",
            "Get",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Set",
        ],
    }])
example_certificate = azure.keyvault.Certificate("example",
    name="imported-cert",
    key_vault_id=example_key_vault.id,
    certificate={
        "contents": std.filebase64(input="certificate-to-import.pfx").result,
        "password": "",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "examplekeyvault",
        Location = example.Location,
        ResourceGroupName = example.Name,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SkuName = "premium",
        AccessPolicies = new[]
        {
            new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
            {
                TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
                ObjectId = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
                CertificatePermissions = new[]
                {
                    "Create",
                    "Delete",
                    "DeleteIssuers",
                    "Get",
                    "GetIssuers",
                    "Import",
                    "List",
                    "ListIssuers",
                    "ManageContacts",
                    "ManageIssuers",
                    "SetIssuers",
                    "Update",
                },
                KeyPermissions = new[]
                {
                    "Backup",
                    "Create",
                    "Decrypt",
                    "Delete",
                    "Encrypt",
                    "Get",
                    "Import",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Sign",
                    "UnwrapKey",
                    "Update",
                    "Verify",
                    "WrapKey",
                },
                SecretPermissions = new[]
                {
                    "Backup",
                    "Delete",
                    "Get",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Set",
                },
            },
        },
    });

    var exampleCertificate = new Azure.KeyVault.Certificate("example", new()
    {
        Name = "imported-cert",
        KeyVaultId = exampleKeyVault.Id,
        KeyVaultCertificate = new Azure.KeyVault.Inputs.CertificateCertificateArgs
        {
            Contents = Std.Filebase64.Invoke(new()
            {
                Input = "certificate-to-import.pfx",
            }).Apply(invoke => invoke.Result),
            Password = "",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:              pulumi.String("examplekeyvault"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			TenantId:          pulumi.String(current.TenantId),
			SkuName:           pulumi.String("premium"),
			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
				&keyvault.KeyVaultAccessPolicyArgs{
					TenantId: pulumi.String(current.TenantId),
					ObjectId: pulumi.String(current.ObjectId),
					CertificatePermissions: pulumi.StringArray{
						pulumi.String("Create"),
						pulumi.String("Delete"),
						pulumi.String("DeleteIssuers"),
						pulumi.String("Get"),
						pulumi.String("GetIssuers"),
						pulumi.String("Import"),
						pulumi.String("List"),
						pulumi.String("ListIssuers"),
						pulumi.String("ManageContacts"),
						pulumi.String("ManageIssuers"),
						pulumi.String("SetIssuers"),
						pulumi.String("Update"),
					},
					KeyPermissions: pulumi.StringArray{
						pulumi.String("Backup"),
						pulumi.String("Create"),
						pulumi.String("Decrypt"),
						pulumi.String("Delete"),
						pulumi.String("Encrypt"),
						pulumi.String("Get"),
						pulumi.String("Import"),
						pulumi.String("List"),
						pulumi.String("Purge"),
						pulumi.String("Recover"),
						pulumi.String("Restore"),
						pulumi.String("Sign"),
						pulumi.String("UnwrapKey"),
						pulumi.String("Update"),
						pulumi.String("Verify"),
						pulumi.String("WrapKey"),
					},
					SecretPermissions: pulumi.StringArray{
						pulumi.String("Backup"),
						pulumi.String("Delete"),
						pulumi.String("Get"),
						pulumi.String("List"),
						pulumi.String("Purge"),
						pulumi.String("Recover"),
						pulumi.String("Restore"),
						pulumi.String("Set"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		invokeFilebase64, err := std.Filebase64(ctx, &std.Filebase64Args{
			Input: "certificate-to-import.pfx",
		}, nil)
		if err != nil {
			return err
		}
		_, err = keyvault.NewCertificate(ctx, "example", &keyvault.CertificateArgs{
			Name:       pulumi.String("imported-cert"),
			KeyVaultId: exampleKeyVault.ID(),
			Certificate: &keyvault.CertificateCertificateArgs{
				Contents: pulumi.String(invokeFilebase64.Result),
				Password: pulumi.String(""),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
import com.pulumi.azure.keyvault.Certificate;
import com.pulumi.azure.keyvault.CertificateArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificateArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("examplekeyvault")
            .location(example.location())
            .resourceGroupName(example.name())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .skuName("premium")
            .accessPolicies(KeyVaultAccessPolicyArgs.builder()
                .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
                .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
                .certificatePermissions(                
                    "Create",
                    "Delete",
                    "DeleteIssuers",
                    "Get",
                    "GetIssuers",
                    "Import",
                    "List",
                    "ListIssuers",
                    "ManageContacts",
                    "ManageIssuers",
                    "SetIssuers",
                    "Update")
                .keyPermissions(                
                    "Backup",
                    "Create",
                    "Decrypt",
                    "Delete",
                    "Encrypt",
                    "Get",
                    "Import",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Sign",
                    "UnwrapKey",
                    "Update",
                    "Verify",
                    "WrapKey")
                .secretPermissions(                
                    "Backup",
                    "Delete",
                    "Get",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Set")
                .build())
            .build());

        var exampleCertificate = new Certificate("exampleCertificate", CertificateArgs.builder()
            .name("imported-cert")
            .keyVaultId(exampleKeyVault.id())
            .certificate(CertificateCertificateArgs.builder()
                .contents(StdFunctions.filebase64(Filebase64Args.builder()
                    .input("certificate-to-import.pfx")
                    .build()).result())
                .password("")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: examplekeyvault
      location: ${example.location}
      resourceGroupName: ${example.name}
      tenantId: ${current.tenantId}
      skuName: premium
      accessPolicies:
        - tenantId: ${current.tenantId}
          objectId: ${current.objectId}
          certificatePermissions:
            - Create
            - Delete
            - DeleteIssuers
            - Get
            - GetIssuers
            - Import
            - List
            - ListIssuers
            - ManageContacts
            - ManageIssuers
            - SetIssuers
            - Update
          keyPermissions:
            - Backup
            - Create
            - Decrypt
            - Delete
            - Encrypt
            - Get
            - Import
            - List
            - Purge
            - Recover
            - Restore
            - Sign
            - UnwrapKey
            - Update
            - Verify
            - WrapKey
          secretPermissions:
            - Backup
            - Delete
            - Get
            - List
            - Purge
            - Recover
            - Restore
            - Set
  exampleCertificate:
    type: azure:keyvault:Certificate
    name: example
    properties:
      name: imported-cert
      keyVaultId: ${exampleKeyVault.id}
      certificate:
        contents:
          fn::invoke:
            function: std:filebase64
            arguments:
              input: certificate-to-import.pfx
            return: result
        password: ""
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

### Generating a new certificate

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const current = azure.core.getClientConfig({});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "examplekeyvault",
    location: example.location,
    resourceGroupName: example.name,
    tenantId: current.then(current => current.tenantId),
    skuName: "standard",
    softDeleteRetentionDays: 7,
    accessPolicies: [{
        tenantId: current.then(current => current.tenantId),
        objectId: current.then(current => current.objectId),
        certificatePermissions: [
            "Create",
            "Delete",
            "DeleteIssuers",
            "Get",
            "GetIssuers",
            "Import",
            "List",
            "ListIssuers",
            "ManageContacts",
            "ManageIssuers",
            "Purge",
            "SetIssuers",
            "Update",
        ],
        keyPermissions: [
            "Backup",
            "Create",
            "Decrypt",
            "Delete",
            "Encrypt",
            "Get",
            "Import",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Sign",
            "UnwrapKey",
            "Update",
            "Verify",
            "WrapKey",
        ],
        secretPermissions: [
            "Backup",
            "Delete",
            "Get",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Set",
        ],
    }],
});
const exampleCertificate = new azure.keyvault.Certificate("example", {
    name: "generated-cert",
    keyVaultId: exampleKeyVault.id,
    certificatePolicy: {
        issuerParameters: {
            name: "Self",
        },
        keyProperties: {
            exportable: true,
            keySize: 2048,
            keyType: "RSA",
            reuseKey: true,
        },
        lifetimeActions: [{
            action: {
                actionType: "AutoRenew",
            },
            trigger: {
                daysBeforeExpiry: 30,
            },
        }],
        secretProperties: {
            contentType: "application/x-pkcs12",
        },
        x509CertificateProperties: {
            extendedKeyUsages: ["1.3.6.1.5.5.7.3.1"],
            keyUsages: [
                "cRLSign",
                "dataEncipherment",
                "digitalSignature",
                "keyAgreement",
                "keyCertSign",
                "keyEncipherment",
            ],
            subjectAlternativeNames: {
                dnsNames: [
                    "internal.contoso.com",
                    "domain.hello.world",
                ],
            },
            subject: "CN=hello-world",
            validityInMonths: 12,
        },
    },
});
```
```python
import pulumi
import pulumi_azure as azure

current = azure.core.get_client_config()
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_key_vault = azure.keyvault.KeyVault("example",
    name="examplekeyvault",
    location=example.location,
    resource_group_name=example.name,
    tenant_id=current.tenant_id,
    sku_name="standard",
    soft_delete_retention_days=7,
    access_policies=[{
        "tenant_id": current.tenant_id,
        "object_id": current.object_id,
        "certificate_permissions": [
            "Create",
            "Delete",
            "DeleteIssuers",
            "Get",
            "GetIssuers",
            "Import",
            "List",
            "ListIssuers",
            "ManageContacts",
            "ManageIssuers",
            "Purge",
            "SetIssuers",
            "Update",
        ],
        "key_permissions": [
            "Backup",
            "Create",
            "Decrypt",
            "Delete",
            "Encrypt",
            "Get",
            "Import",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Sign",
            "UnwrapKey",
            "Update",
            "Verify",
            "WrapKey",
        ],
        "secret_permissions": [
            "Backup",
            "Delete",
            "Get",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Set",
        ],
    }])
example_certificate = azure.keyvault.Certificate("example",
    name="generated-cert",
    key_vault_id=example_key_vault.id,
    certificate_policy={
        "issuer_parameters": {
            "name": "Self",
        },
        "key_properties": {
            "exportable": True,
            "key_size": 2048,
            "key_type": "RSA",
            "reuse_key": True,
        },
        "lifetime_actions": [{
            "action": {
                "action_type": "AutoRenew",
            },
            "trigger": {
                "days_before_expiry": 30,
            },
        }],
        "secret_properties": {
            "content_type": "application/x-pkcs12",
        },
        "x509_certificate_properties": {
            "extended_key_usages": ["1.3.6.1.5.5.7.3.1"],
            "key_usages": [
                "cRLSign",
                "dataEncipherment",
                "digitalSignature",
                "keyAgreement",
                "keyCertSign",
                "keyEncipherment",
            ],
            "subject_alternative_names": {
                "dns_names": [
                    "internal.contoso.com",
                    "domain.hello.world",
                ],
            },
            "subject": "CN=hello-world",
            "validity_in_months": 12,
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "examplekeyvault",
        Location = example.Location,
        ResourceGroupName = example.Name,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SkuName = "standard",
        SoftDeleteRetentionDays = 7,
        AccessPolicies = new[]
        {
            new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
            {
                TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
                ObjectId = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
                CertificatePermissions = new[]
                {
                    "Create",
                    "Delete",
                    "DeleteIssuers",
                    "Get",
                    "GetIssuers",
                    "Import",
                    "List",
                    "ListIssuers",
                    "ManageContacts",
                    "ManageIssuers",
                    "Purge",
                    "SetIssuers",
                    "Update",
                },
                KeyPermissions = new[]
                {
                    "Backup",
                    "Create",
                    "Decrypt",
                    "Delete",
                    "Encrypt",
                    "Get",
                    "Import",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Sign",
                    "UnwrapKey",
                    "Update",
                    "Verify",
                    "WrapKey",
                },
                SecretPermissions = new[]
                {
                    "Backup",
                    "Delete",
                    "Get",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Set",
                },
            },
        },
    });

    var exampleCertificate = new Azure.KeyVault.Certificate("example", new()
    {
        Name = "generated-cert",
        KeyVaultId = exampleKeyVault.Id,
        CertificatePolicy = new Azure.KeyVault.Inputs.CertificateCertificatePolicyArgs
        {
            IssuerParameters = new Azure.KeyVault.Inputs.CertificateCertificatePolicyIssuerParametersArgs
            {
                Name = "Self",
            },
            KeyProperties = new Azure.KeyVault.Inputs.CertificateCertificatePolicyKeyPropertiesArgs
            {
                Exportable = true,
                KeySize = 2048,
                KeyType = "RSA",
                ReuseKey = true,
            },
            LifetimeActions = new[]
            {
                new Azure.KeyVault.Inputs.CertificateCertificatePolicyLifetimeActionArgs
                {
                    Action = new Azure.KeyVault.Inputs.CertificateCertificatePolicyLifetimeActionActionArgs
                    {
                        ActionType = "AutoRenew",
                    },
                    Trigger = new Azure.KeyVault.Inputs.CertificateCertificatePolicyLifetimeActionTriggerArgs
                    {
                        DaysBeforeExpiry = 30,
                    },
                },
            },
            SecretProperties = new Azure.KeyVault.Inputs.CertificateCertificatePolicySecretPropertiesArgs
            {
                ContentType = "application/x-pkcs12",
            },
            X509CertificateProperties = new Azure.KeyVault.Inputs.CertificateCertificatePolicyX509CertificatePropertiesArgs
            {
                ExtendedKeyUsages = new[]
                {
                    "1.3.6.1.5.5.7.3.1",
                },
                KeyUsages = new[]
                {
                    "cRLSign",
                    "dataEncipherment",
                    "digitalSignature",
                    "keyAgreement",
                    "keyCertSign",
                    "keyEncipherment",
                },
                SubjectAlternativeNames = new Azure.KeyVault.Inputs.CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs
                {
                    DnsNames = new[]
                    {
                        "internal.contoso.com",
                        "domain.hello.world",
                    },
                },
                Subject = "CN=hello-world",
                ValidityInMonths = 12,
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:                    pulumi.String("examplekeyvault"),
			Location:                example.Location,
			ResourceGroupName:       example.Name,
			TenantId:                pulumi.String(current.TenantId),
			SkuName:                 pulumi.String("standard"),
			SoftDeleteRetentionDays: pulumi.Int(7),
			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
				&keyvault.KeyVaultAccessPolicyArgs{
					TenantId: pulumi.String(current.TenantId),
					ObjectId: pulumi.String(current.ObjectId),
					CertificatePermissions: pulumi.StringArray{
						pulumi.String("Create"),
						pulumi.String("Delete"),
						pulumi.String("DeleteIssuers"),
						pulumi.String("Get"),
						pulumi.String("GetIssuers"),
						pulumi.String("Import"),
						pulumi.String("List"),
						pulumi.String("ListIssuers"),
						pulumi.String("ManageContacts"),
						pulumi.String("ManageIssuers"),
						pulumi.String("Purge"),
						pulumi.String("SetIssuers"),
						pulumi.String("Update"),
					},
					KeyPermissions: pulumi.StringArray{
						pulumi.String("Backup"),
						pulumi.String("Create"),
						pulumi.String("Decrypt"),
						pulumi.String("Delete"),
						pulumi.String("Encrypt"),
						pulumi.String("Get"),
						pulumi.String("Import"),
						pulumi.String("List"),
						pulumi.String("Purge"),
						pulumi.String("Recover"),
						pulumi.String("Restore"),
						pulumi.String("Sign"),
						pulumi.String("UnwrapKey"),
						pulumi.String("Update"),
						pulumi.String("Verify"),
						pulumi.String("WrapKey"),
					},
					SecretPermissions: pulumi.StringArray{
						pulumi.String("Backup"),
						pulumi.String("Delete"),
						pulumi.String("Get"),
						pulumi.String("List"),
						pulumi.String("Purge"),
						pulumi.String("Recover"),
						pulumi.String("Restore"),
						pulumi.String("Set"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewCertificate(ctx, "example", &keyvault.CertificateArgs{
			Name:       pulumi.String("generated-cert"),
			KeyVaultId: exampleKeyVault.ID(),
			CertificatePolicy: &keyvault.CertificateCertificatePolicyArgs{
				IssuerParameters: &keyvault.CertificateCertificatePolicyIssuerParametersArgs{
					Name: pulumi.String("Self"),
				},
				KeyProperties: &keyvault.CertificateCertificatePolicyKeyPropertiesArgs{
					Exportable: pulumi.Bool(true),
					KeySize:    pulumi.Int(2048),
					KeyType:    pulumi.String("RSA"),
					ReuseKey:   pulumi.Bool(true),
				},
				LifetimeActions: keyvault.CertificateCertificatePolicyLifetimeActionArray{
					&keyvault.CertificateCertificatePolicyLifetimeActionArgs{
						Action: &keyvault.CertificateCertificatePolicyLifetimeActionActionArgs{
							ActionType: pulumi.String("AutoRenew"),
						},
						Trigger: &keyvault.CertificateCertificatePolicyLifetimeActionTriggerArgs{
							DaysBeforeExpiry: pulumi.Int(30),
						},
					},
				},
				SecretProperties: &keyvault.CertificateCertificatePolicySecretPropertiesArgs{
					ContentType: pulumi.String("application/x-pkcs12"),
				},
				X509CertificateProperties: &keyvault.CertificateCertificatePolicyX509CertificatePropertiesArgs{
					ExtendedKeyUsages: pulumi.StringArray{
						pulumi.String("1.3.6.1.5.5.7.3.1"),
					},
					KeyUsages: pulumi.StringArray{
						pulumi.String("cRLSign"),
						pulumi.String("dataEncipherment"),
						pulumi.String("digitalSignature"),
						pulumi.String("keyAgreement"),
						pulumi.String("keyCertSign"),
						pulumi.String("keyEncipherment"),
					},
					SubjectAlternativeNames: &keyvault.CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{
						DnsNames: pulumi.StringArray{
							pulumi.String("internal.contoso.com"),
							pulumi.String("domain.hello.world"),
						},
					},
					Subject:          pulumi.String("CN=hello-world"),
					ValidityInMonths: pulumi.Int(12),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
import com.pulumi.azure.keyvault.Certificate;
import com.pulumi.azure.keyvault.CertificateArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicyArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicyIssuerParametersArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicyKeyPropertiesArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicySecretPropertiesArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicyX509CertificatePropertiesArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("examplekeyvault")
            .location(example.location())
            .resourceGroupName(example.name())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .skuName("standard")
            .softDeleteRetentionDays(7)
            .accessPolicies(KeyVaultAccessPolicyArgs.builder()
                .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
                .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
                .certificatePermissions(                
                    "Create",
                    "Delete",
                    "DeleteIssuers",
                    "Get",
                    "GetIssuers",
                    "Import",
                    "List",
                    "ListIssuers",
                    "ManageContacts",
                    "ManageIssuers",
                    "Purge",
                    "SetIssuers",
                    "Update")
                .keyPermissions(                
                    "Backup",
                    "Create",
                    "Decrypt",
                    "Delete",
                    "Encrypt",
                    "Get",
                    "Import",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Sign",
                    "UnwrapKey",
                    "Update",
                    "Verify",
                    "WrapKey")
                .secretPermissions(                
                    "Backup",
                    "Delete",
                    "Get",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Set")
                .build())
            .build());

        var exampleCertificate = new Certificate("exampleCertificate", CertificateArgs.builder()
            .name("generated-cert")
            .keyVaultId(exampleKeyVault.id())
            .certificatePolicy(CertificateCertificatePolicyArgs.builder()
                .issuerParameters(CertificateCertificatePolicyIssuerParametersArgs.builder()
                    .name("Self")
                    .build())
                .keyProperties(CertificateCertificatePolicyKeyPropertiesArgs.builder()
                    .exportable(true)
                    .keySize(2048)
                    .keyType("RSA")
                    .reuseKey(true)
                    .build())
                .lifetimeActions(CertificateCertificatePolicyLifetimeActionArgs.builder()
                    .action(CertificateCertificatePolicyLifetimeActionActionArgs.builder()
                        .actionType("AutoRenew")
                        .build())
                    .trigger(CertificateCertificatePolicyLifetimeActionTriggerArgs.builder()
                        .daysBeforeExpiry(30)
                        .build())
                    .build())
                .secretProperties(CertificateCertificatePolicySecretPropertiesArgs.builder()
                    .contentType("application/x-pkcs12")
                    .build())
                .x509CertificateProperties(CertificateCertificatePolicyX509CertificatePropertiesArgs.builder()
                    .extendedKeyUsages("1.3.6.1.5.5.7.3.1")
                    .keyUsages(                    
                        "cRLSign",
                        "dataEncipherment",
                        "digitalSignature",
                        "keyAgreement",
                        "keyCertSign",
                        "keyEncipherment")
                    .subjectAlternativeNames(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs.builder()
                        .dnsNames(                        
                            "internal.contoso.com",
                            "domain.hello.world")
                        .build())
                    .subject("CN=hello-world")
                    .validityInMonths(12)
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: examplekeyvault
      location: ${example.location}
      resourceGroupName: ${example.name}
      tenantId: ${current.tenantId}
      skuName: standard
      softDeleteRetentionDays: 7
      accessPolicies:
        - tenantId: ${current.tenantId}
          objectId: ${current.objectId}
          certificatePermissions:
            - Create
            - Delete
            - DeleteIssuers
            - Get
            - GetIssuers
            - Import
            - List
            - ListIssuers
            - ManageContacts
            - ManageIssuers
            - Purge
            - SetIssuers
            - Update
          keyPermissions:
            - Backup
            - Create
            - Decrypt
            - Delete
            - Encrypt
            - Get
            - Import
            - List
            - Purge
            - Recover
            - Restore
            - Sign
            - UnwrapKey
            - Update
            - Verify
            - WrapKey
          secretPermissions:
            - Backup
            - Delete
            - Get
            - List
            - Purge
            - Recover
            - Restore
            - Set
  exampleCertificate:
    type: azure:keyvault:Certificate
    name: example
    properties:
      name: generated-cert
      keyVaultId: ${exampleKeyVault.id}
      certificatePolicy:
        issuerParameters:
          name: Self
        keyProperties:
          exportable: true
          keySize: 2048
          keyType: RSA
          reuseKey: true
        lifetimeActions:
          - action:
              actionType: AutoRenew
            trigger:
              daysBeforeExpiry: 30
        secretProperties:
          contentType: application/x-pkcs12
        x509CertificateProperties:
          extendedKeyUsages:
            - 1.3.6.1.5.5.7.3.1
          keyUsages:
            - cRLSign
            - dataEncipherment
            - digitalSignature
            - keyAgreement
            - keyCertSign
            - keyEncipherment
          subjectAlternativeNames:
            dnsNames:
              - internal.contoso.com
              - domain.hello.world
          subject: CN=hello-world
          validityInMonths: 12
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Key Vault Certificates can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/certifiate:Certifiate example "https://example-keyvault.vault.azure.net/certificates/example/fdf067c93bbb4b22bff4d8b7a9a56217"
```


certificatecBa:_
]
keyvaultCertifiateCertificate:azure:keyvault/CertifiateCertificate:CertifiateCertificateA `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.

certificatePolicyuBs:q
o
keyvaultCertifiateCertificatePolicyFazure:keyvault/CertifiateCertificatePolicy:CertifiateCertificatePolicyþA `certificate_policy` block as defined below. Changing this (except the `lifetime_action` field) will create a new version of the Key Vault Certificate.

> **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificate_policy` is required. Provide `certificate` to import an existing certificate, `certificate_policy` to generate a new certificate.


keyVaultId" tThe ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
r
nameB" dSpecifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
=
tagsB2" -A mapping of tags to assign to the resource.
"
certificatecBa:_
]
keyvaultCertifiateCertificate:azure:keyvault/CertifiateCertificate:CertifiateCertificateA `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
"Ë
certificateAttributes~*|:z
x
keyvaultCertifiateCertificateAttributeLazure:keyvault/CertifiateCertificateAttribute:CertifiateCertificateAttribute2A `certificate_attribute` block as defined below.
"_
certificateData" HThe raw Key Vault Certificate data represented as a hexadecimal string.
"L
certificateDataBase64" /The Base64 encoded Key Vault Certificate data.
"
certificatePolicys:q
o
keyvaultCertifiateCertificatePolicyFazure:keyvault/CertifiateCertificatePolicy:CertifiateCertificatePolicyþA `certificate_policy` block as defined below. Changing this (except the `lifetime_action` field) will create a new version of the Key Vault Certificate.

> **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificate_policy` is required. Provide `certificate` to import an existing certificate, `certificate_policy` to generate a new certificate.
"

keyVaultId" tThe ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
"p
name" dSpecifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
"á
resourceManagerId" ÇThe (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.
"Ø
resourceManagerVersionlessId" ³The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
";
secretId" +The ID of the associated Key Vault Secret.
"=
tagsB2" -A mapping of tags to assign to the resource.
"h

thumbprint" VThe X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
"A
version" 2The current version of the Key Vault Certificate.
"?
versionlessId" *The Base ID of the Key Vault Certificate.
"@
versionlessSecretId" %The Base ID of the Key Vault Secret.
*¬Î
?
keyvaultCertificate&azure:keyvault/certificate:Certificate³Manages a Key Vault Certificate.

## Example Usage

### Importing A PFX)

> **Note:** this example assumed the PFX file is located in the same directory at `certificate-to-import.pfx`.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";
import * as std from "@pulumi/std";

const current = azure.core.getClientConfig({});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "examplekeyvault",
    location: example.location,
    resourceGroupName: example.name,
    tenantId: current.then(current => current.tenantId),
    skuName: "premium",
    accessPolicies: [{
        tenantId: current.then(current => current.tenantId),
        objectId: current.then(current => current.objectId),
        certificatePermissions: [
            "Create",
            "Delete",
            "DeleteIssuers",
            "Get",
            "GetIssuers",
            "Import",
            "List",
            "ListIssuers",
            "ManageContacts",
            "ManageIssuers",
            "SetIssuers",
            "Update",
        ],
        keyPermissions: [
            "Backup",
            "Create",
            "Decrypt",
            "Delete",
            "Encrypt",
            "Get",
            "Import",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Sign",
            "UnwrapKey",
            "Update",
            "Verify",
            "WrapKey",
        ],
        secretPermissions: [
            "Backup",
            "Delete",
            "Get",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Set",
        ],
    }],
});
const exampleCertificate = new azure.keyvault.Certificate("example", {
    name: "imported-cert",
    keyVaultId: exampleKeyVault.id,
    certificate: {
        contents: std.filebase64({
            input: "certificate-to-import.pfx",
        }).then(invoke => invoke.result),
        password: "",
    },
});
```
```python
import pulumi
import pulumi_azure as azure
import pulumi_std as std

current = azure.core.get_client_config()
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_key_vault = azure.keyvault.KeyVault("example",
    name="examplekeyvault",
    location=example.location,
    resource_group_name=example.name,
    tenant_id=current.tenant_id,
    sku_name="premium",
    access_policies=[{
        "tenant_id": current.tenant_id,
        "object_id": current.object_id,
        "certificate_permissions": [
            "Create",
            "Delete",
            "DeleteIssuers",
            "Get",
            "GetIssuers",
            "Import",
            "List",
            "ListIssuers",
            "ManageContacts",
            "ManageIssuers",
            "SetIssuers",
            "Update",
        ],
        "key_permissions": [
            "Backup",
            "Create",
            "Decrypt",
            "Delete",
            "Encrypt",
            "Get",
            "Import",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Sign",
            "UnwrapKey",
            "Update",
            "Verify",
            "WrapKey",
        ],
        "secret_permissions": [
            "Backup",
            "Delete",
            "Get",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Set",
        ],
    }])
example_certificate = azure.keyvault.Certificate("example",
    name="imported-cert",
    key_vault_id=example_key_vault.id,
    certificate={
        "contents": std.filebase64(input="certificate-to-import.pfx").result,
        "password": "",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "examplekeyvault",
        Location = example.Location,
        ResourceGroupName = example.Name,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SkuName = "premium",
        AccessPolicies = new[]
        {
            new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
            {
                TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
                ObjectId = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
                CertificatePermissions = new[]
                {
                    "Create",
                    "Delete",
                    "DeleteIssuers",
                    "Get",
                    "GetIssuers",
                    "Import",
                    "List",
                    "ListIssuers",
                    "ManageContacts",
                    "ManageIssuers",
                    "SetIssuers",
                    "Update",
                },
                KeyPermissions = new[]
                {
                    "Backup",
                    "Create",
                    "Decrypt",
                    "Delete",
                    "Encrypt",
                    "Get",
                    "Import",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Sign",
                    "UnwrapKey",
                    "Update",
                    "Verify",
                    "WrapKey",
                },
                SecretPermissions = new[]
                {
                    "Backup",
                    "Delete",
                    "Get",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Set",
                },
            },
        },
    });

    var exampleCertificate = new Azure.KeyVault.Certificate("example", new()
    {
        Name = "imported-cert",
        KeyVaultId = exampleKeyVault.Id,
        KeyVaultCertificate = new Azure.KeyVault.Inputs.CertificateCertificateArgs
        {
            Contents = Std.Filebase64.Invoke(new()
            {
                Input = "certificate-to-import.pfx",
            }).Apply(invoke => invoke.Result),
            Password = "",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:              pulumi.String("examplekeyvault"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			TenantId:          pulumi.String(current.TenantId),
			SkuName:           pulumi.String("premium"),
			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
				&keyvault.KeyVaultAccessPolicyArgs{
					TenantId: pulumi.String(current.TenantId),
					ObjectId: pulumi.String(current.ObjectId),
					CertificatePermissions: pulumi.StringArray{
						pulumi.String("Create"),
						pulumi.String("Delete"),
						pulumi.String("DeleteIssuers"),
						pulumi.String("Get"),
						pulumi.String("GetIssuers"),
						pulumi.String("Import"),
						pulumi.String("List"),
						pulumi.String("ListIssuers"),
						pulumi.String("ManageContacts"),
						pulumi.String("ManageIssuers"),
						pulumi.String("SetIssuers"),
						pulumi.String("Update"),
					},
					KeyPermissions: pulumi.StringArray{
						pulumi.String("Backup"),
						pulumi.String("Create"),
						pulumi.String("Decrypt"),
						pulumi.String("Delete"),
						pulumi.String("Encrypt"),
						pulumi.String("Get"),
						pulumi.String("Import"),
						pulumi.String("List"),
						pulumi.String("Purge"),
						pulumi.String("Recover"),
						pulumi.String("Restore"),
						pulumi.String("Sign"),
						pulumi.String("UnwrapKey"),
						pulumi.String("Update"),
						pulumi.String("Verify"),
						pulumi.String("WrapKey"),
					},
					SecretPermissions: pulumi.StringArray{
						pulumi.String("Backup"),
						pulumi.String("Delete"),
						pulumi.String("Get"),
						pulumi.String("List"),
						pulumi.String("Purge"),
						pulumi.String("Recover"),
						pulumi.String("Restore"),
						pulumi.String("Set"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		invokeFilebase64, err := std.Filebase64(ctx, &std.Filebase64Args{
			Input: "certificate-to-import.pfx",
		}, nil)
		if err != nil {
			return err
		}
		_, err = keyvault.NewCertificate(ctx, "example", &keyvault.CertificateArgs{
			Name:       pulumi.String("imported-cert"),
			KeyVaultId: exampleKeyVault.ID(),
			Certificate: &keyvault.CertificateCertificateArgs{
				Contents: pulumi.String(invokeFilebase64.Result),
				Password: pulumi.String(""),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
import com.pulumi.azure.keyvault.Certificate;
import com.pulumi.azure.keyvault.CertificateArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificateArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("examplekeyvault")
            .location(example.location())
            .resourceGroupName(example.name())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .skuName("premium")
            .accessPolicies(KeyVaultAccessPolicyArgs.builder()
                .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
                .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
                .certificatePermissions(                
                    "Create",
                    "Delete",
                    "DeleteIssuers",
                    "Get",
                    "GetIssuers",
                    "Import",
                    "List",
                    "ListIssuers",
                    "ManageContacts",
                    "ManageIssuers",
                    "SetIssuers",
                    "Update")
                .keyPermissions(                
                    "Backup",
                    "Create",
                    "Decrypt",
                    "Delete",
                    "Encrypt",
                    "Get",
                    "Import",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Sign",
                    "UnwrapKey",
                    "Update",
                    "Verify",
                    "WrapKey")
                .secretPermissions(                
                    "Backup",
                    "Delete",
                    "Get",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Set")
                .build())
            .build());

        var exampleCertificate = new Certificate("exampleCertificate", CertificateArgs.builder()
            .name("imported-cert")
            .keyVaultId(exampleKeyVault.id())
            .certificate(CertificateCertificateArgs.builder()
                .contents(StdFunctions.filebase64(Filebase64Args.builder()
                    .input("certificate-to-import.pfx")
                    .build()).result())
                .password("")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: examplekeyvault
      location: ${example.location}
      resourceGroupName: ${example.name}
      tenantId: ${current.tenantId}
      skuName: premium
      accessPolicies:
        - tenantId: ${current.tenantId}
          objectId: ${current.objectId}
          certificatePermissions:
            - Create
            - Delete
            - DeleteIssuers
            - Get
            - GetIssuers
            - Import
            - List
            - ListIssuers
            - ManageContacts
            - ManageIssuers
            - SetIssuers
            - Update
          keyPermissions:
            - Backup
            - Create
            - Decrypt
            - Delete
            - Encrypt
            - Get
            - Import
            - List
            - Purge
            - Recover
            - Restore
            - Sign
            - UnwrapKey
            - Update
            - Verify
            - WrapKey
          secretPermissions:
            - Backup
            - Delete
            - Get
            - List
            - Purge
            - Recover
            - Restore
            - Set
  exampleCertificate:
    type: azure:keyvault:Certificate
    name: example
    properties:
      name: imported-cert
      keyVaultId: ${exampleKeyVault.id}
      certificate:
        contents:
          fn::invoke:
            function: std:filebase64
            arguments:
              input: certificate-to-import.pfx
            return: result
        password: ""
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

### Generating a new certificate

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const current = azure.core.getClientConfig({});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "examplekeyvault",
    location: example.location,
    resourceGroupName: example.name,
    tenantId: current.then(current => current.tenantId),
    skuName: "standard",
    softDeleteRetentionDays: 7,
    accessPolicies: [{
        tenantId: current.then(current => current.tenantId),
        objectId: current.then(current => current.objectId),
        certificatePermissions: [
            "Create",
            "Delete",
            "DeleteIssuers",
            "Get",
            "GetIssuers",
            "Import",
            "List",
            "ListIssuers",
            "ManageContacts",
            "ManageIssuers",
            "Purge",
            "SetIssuers",
            "Update",
        ],
        keyPermissions: [
            "Backup",
            "Create",
            "Decrypt",
            "Delete",
            "Encrypt",
            "Get",
            "Import",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Sign",
            "UnwrapKey",
            "Update",
            "Verify",
            "WrapKey",
        ],
        secretPermissions: [
            "Backup",
            "Delete",
            "Get",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Set",
        ],
    }],
});
const exampleCertificate = new azure.keyvault.Certificate("example", {
    name: "generated-cert",
    keyVaultId: exampleKeyVault.id,
    certificatePolicy: {
        issuerParameters: {
            name: "Self",
        },
        keyProperties: {
            exportable: true,
            keySize: 2048,
            keyType: "RSA",
            reuseKey: true,
        },
        lifetimeActions: [{
            action: {
                actionType: "AutoRenew",
            },
            trigger: {
                daysBeforeExpiry: 30,
            },
        }],
        secretProperties: {
            contentType: "application/x-pkcs12",
        },
        x509CertificateProperties: {
            extendedKeyUsages: ["1.3.6.1.5.5.7.3.1"],
            keyUsages: [
                "cRLSign",
                "dataEncipherment",
                "digitalSignature",
                "keyAgreement",
                "keyCertSign",
                "keyEncipherment",
            ],
            subjectAlternativeNames: {
                dnsNames: [
                    "internal.contoso.com",
                    "domain.hello.world",
                ],
            },
            subject: "CN=hello-world",
            validityInMonths: 12,
        },
    },
});
```
```python
import pulumi
import pulumi_azure as azure

current = azure.core.get_client_config()
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_key_vault = azure.keyvault.KeyVault("example",
    name="examplekeyvault",
    location=example.location,
    resource_group_name=example.name,
    tenant_id=current.tenant_id,
    sku_name="standard",
    soft_delete_retention_days=7,
    access_policies=[{
        "tenant_id": current.tenant_id,
        "object_id": current.object_id,
        "certificate_permissions": [
            "Create",
            "Delete",
            "DeleteIssuers",
            "Get",
            "GetIssuers",
            "Import",
            "List",
            "ListIssuers",
            "ManageContacts",
            "ManageIssuers",
            "Purge",
            "SetIssuers",
            "Update",
        ],
        "key_permissions": [
            "Backup",
            "Create",
            "Decrypt",
            "Delete",
            "Encrypt",
            "Get",
            "Import",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Sign",
            "UnwrapKey",
            "Update",
            "Verify",
            "WrapKey",
        ],
        "secret_permissions": [
            "Backup",
            "Delete",
            "Get",
            "List",
            "Purge",
            "Recover",
            "Restore",
            "Set",
        ],
    }])
example_certificate = azure.keyvault.Certificate("example",
    name="generated-cert",
    key_vault_id=example_key_vault.id,
    certificate_policy={
        "issuer_parameters": {
            "name": "Self",
        },
        "key_properties": {
            "exportable": True,
            "key_size": 2048,
            "key_type": "RSA",
            "reuse_key": True,
        },
        "lifetime_actions": [{
            "action": {
                "action_type": "AutoRenew",
            },
            "trigger": {
                "days_before_expiry": 30,
            },
        }],
        "secret_properties": {
            "content_type": "application/x-pkcs12",
        },
        "x509_certificate_properties": {
            "extended_key_usages": ["1.3.6.1.5.5.7.3.1"],
            "key_usages": [
                "cRLSign",
                "dataEncipherment",
                "digitalSignature",
                "keyAgreement",
                "keyCertSign",
                "keyEncipherment",
            ],
            "subject_alternative_names": {
                "dns_names": [
                    "internal.contoso.com",
                    "domain.hello.world",
                ],
            },
            "subject": "CN=hello-world",
            "validity_in_months": 12,
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "examplekeyvault",
        Location = example.Location,
        ResourceGroupName = example.Name,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SkuName = "standard",
        SoftDeleteRetentionDays = 7,
        AccessPolicies = new[]
        {
            new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
            {
                TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
                ObjectId = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
                CertificatePermissions = new[]
                {
                    "Create",
                    "Delete",
                    "DeleteIssuers",
                    "Get",
                    "GetIssuers",
                    "Import",
                    "List",
                    "ListIssuers",
                    "ManageContacts",
                    "ManageIssuers",
                    "Purge",
                    "SetIssuers",
                    "Update",
                },
                KeyPermissions = new[]
                {
                    "Backup",
                    "Create",
                    "Decrypt",
                    "Delete",
                    "Encrypt",
                    "Get",
                    "Import",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Sign",
                    "UnwrapKey",
                    "Update",
                    "Verify",
                    "WrapKey",
                },
                SecretPermissions = new[]
                {
                    "Backup",
                    "Delete",
                    "Get",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Set",
                },
            },
        },
    });

    var exampleCertificate = new Azure.KeyVault.Certificate("example", new()
    {
        Name = "generated-cert",
        KeyVaultId = exampleKeyVault.Id,
        CertificatePolicy = new Azure.KeyVault.Inputs.CertificateCertificatePolicyArgs
        {
            IssuerParameters = new Azure.KeyVault.Inputs.CertificateCertificatePolicyIssuerParametersArgs
            {
                Name = "Self",
            },
            KeyProperties = new Azure.KeyVault.Inputs.CertificateCertificatePolicyKeyPropertiesArgs
            {
                Exportable = true,
                KeySize = 2048,
                KeyType = "RSA",
                ReuseKey = true,
            },
            LifetimeActions = new[]
            {
                new Azure.KeyVault.Inputs.CertificateCertificatePolicyLifetimeActionArgs
                {
                    Action = new Azure.KeyVault.Inputs.CertificateCertificatePolicyLifetimeActionActionArgs
                    {
                        ActionType = "AutoRenew",
                    },
                    Trigger = new Azure.KeyVault.Inputs.CertificateCertificatePolicyLifetimeActionTriggerArgs
                    {
                        DaysBeforeExpiry = 30,
                    },
                },
            },
            SecretProperties = new Azure.KeyVault.Inputs.CertificateCertificatePolicySecretPropertiesArgs
            {
                ContentType = "application/x-pkcs12",
            },
            X509CertificateProperties = new Azure.KeyVault.Inputs.CertificateCertificatePolicyX509CertificatePropertiesArgs
            {
                ExtendedKeyUsages = new[]
                {
                    "1.3.6.1.5.5.7.3.1",
                },
                KeyUsages = new[]
                {
                    "cRLSign",
                    "dataEncipherment",
                    "digitalSignature",
                    "keyAgreement",
                    "keyCertSign",
                    "keyEncipherment",
                },
                SubjectAlternativeNames = new Azure.KeyVault.Inputs.CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs
                {
                    DnsNames = new[]
                    {
                        "internal.contoso.com",
                        "domain.hello.world",
                    },
                },
                Subject = "CN=hello-world",
                ValidityInMonths = 12,
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:                    pulumi.String("examplekeyvault"),
			Location:                example.Location,
			ResourceGroupName:       example.Name,
			TenantId:                pulumi.String(current.TenantId),
			SkuName:                 pulumi.String("standard"),
			SoftDeleteRetentionDays: pulumi.Int(7),
			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
				&keyvault.KeyVaultAccessPolicyArgs{
					TenantId: pulumi.String(current.TenantId),
					ObjectId: pulumi.String(current.ObjectId),
					CertificatePermissions: pulumi.StringArray{
						pulumi.String("Create"),
						pulumi.String("Delete"),
						pulumi.String("DeleteIssuers"),
						pulumi.String("Get"),
						pulumi.String("GetIssuers"),
						pulumi.String("Import"),
						pulumi.String("List"),
						pulumi.String("ListIssuers"),
						pulumi.String("ManageContacts"),
						pulumi.String("ManageIssuers"),
						pulumi.String("Purge"),
						pulumi.String("SetIssuers"),
						pulumi.String("Update"),
					},
					KeyPermissions: pulumi.StringArray{
						pulumi.String("Backup"),
						pulumi.String("Create"),
						pulumi.String("Decrypt"),
						pulumi.String("Delete"),
						pulumi.String("Encrypt"),
						pulumi.String("Get"),
						pulumi.String("Import"),
						pulumi.String("List"),
						pulumi.String("Purge"),
						pulumi.String("Recover"),
						pulumi.String("Restore"),
						pulumi.String("Sign"),
						pulumi.String("UnwrapKey"),
						pulumi.String("Update"),
						pulumi.String("Verify"),
						pulumi.String("WrapKey"),
					},
					SecretPermissions: pulumi.StringArray{
						pulumi.String("Backup"),
						pulumi.String("Delete"),
						pulumi.String("Get"),
						pulumi.String("List"),
						pulumi.String("Purge"),
						pulumi.String("Recover"),
						pulumi.String("Restore"),
						pulumi.String("Set"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewCertificate(ctx, "example", &keyvault.CertificateArgs{
			Name:       pulumi.String("generated-cert"),
			KeyVaultId: exampleKeyVault.ID(),
			CertificatePolicy: &keyvault.CertificateCertificatePolicyArgs{
				IssuerParameters: &keyvault.CertificateCertificatePolicyIssuerParametersArgs{
					Name: pulumi.String("Self"),
				},
				KeyProperties: &keyvault.CertificateCertificatePolicyKeyPropertiesArgs{
					Exportable: pulumi.Bool(true),
					KeySize:    pulumi.Int(2048),
					KeyType:    pulumi.String("RSA"),
					ReuseKey:   pulumi.Bool(true),
				},
				LifetimeActions: keyvault.CertificateCertificatePolicyLifetimeActionArray{
					&keyvault.CertificateCertificatePolicyLifetimeActionArgs{
						Action: &keyvault.CertificateCertificatePolicyLifetimeActionActionArgs{
							ActionType: pulumi.String("AutoRenew"),
						},
						Trigger: &keyvault.CertificateCertificatePolicyLifetimeActionTriggerArgs{
							DaysBeforeExpiry: pulumi.Int(30),
						},
					},
				},
				SecretProperties: &keyvault.CertificateCertificatePolicySecretPropertiesArgs{
					ContentType: pulumi.String("application/x-pkcs12"),
				},
				X509CertificateProperties: &keyvault.CertificateCertificatePolicyX509CertificatePropertiesArgs{
					ExtendedKeyUsages: pulumi.StringArray{
						pulumi.String("1.3.6.1.5.5.7.3.1"),
					},
					KeyUsages: pulumi.StringArray{
						pulumi.String("cRLSign"),
						pulumi.String("dataEncipherment"),
						pulumi.String("digitalSignature"),
						pulumi.String("keyAgreement"),
						pulumi.String("keyCertSign"),
						pulumi.String("keyEncipherment"),
					},
					SubjectAlternativeNames: &keyvault.CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{
						DnsNames: pulumi.StringArray{
							pulumi.String("internal.contoso.com"),
							pulumi.String("domain.hello.world"),
						},
					},
					Subject:          pulumi.String("CN=hello-world"),
					ValidityInMonths: pulumi.Int(12),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
import com.pulumi.azure.keyvault.Certificate;
import com.pulumi.azure.keyvault.CertificateArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicyArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicyIssuerParametersArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicyKeyPropertiesArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicySecretPropertiesArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicyX509CertificatePropertiesArgs;
import com.pulumi.azure.keyvault.inputs.CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("examplekeyvault")
            .location(example.location())
            .resourceGroupName(example.name())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .skuName("standard")
            .softDeleteRetentionDays(7)
            .accessPolicies(KeyVaultAccessPolicyArgs.builder()
                .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
                .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
                .certificatePermissions(                
                    "Create",
                    "Delete",
                    "DeleteIssuers",
                    "Get",
                    "GetIssuers",
                    "Import",
                    "List",
                    "ListIssuers",
                    "ManageContacts",
                    "ManageIssuers",
                    "Purge",
                    "SetIssuers",
                    "Update")
                .keyPermissions(                
                    "Backup",
                    "Create",
                    "Decrypt",
                    "Delete",
                    "Encrypt",
                    "Get",
                    "Import",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Sign",
                    "UnwrapKey",
                    "Update",
                    "Verify",
                    "WrapKey")
                .secretPermissions(                
                    "Backup",
                    "Delete",
                    "Get",
                    "List",
                    "Purge",
                    "Recover",
                    "Restore",
                    "Set")
                .build())
            .build());

        var exampleCertificate = new Certificate("exampleCertificate", CertificateArgs.builder()
            .name("generated-cert")
            .keyVaultId(exampleKeyVault.id())
            .certificatePolicy(CertificateCertificatePolicyArgs.builder()
                .issuerParameters(CertificateCertificatePolicyIssuerParametersArgs.builder()
                    .name("Self")
                    .build())
                .keyProperties(CertificateCertificatePolicyKeyPropertiesArgs.builder()
                    .exportable(true)
                    .keySize(2048)
                    .keyType("RSA")
                    .reuseKey(true)
                    .build())
                .lifetimeActions(CertificateCertificatePolicyLifetimeActionArgs.builder()
                    .action(CertificateCertificatePolicyLifetimeActionActionArgs.builder()
                        .actionType("AutoRenew")
                        .build())
                    .trigger(CertificateCertificatePolicyLifetimeActionTriggerArgs.builder()
                        .daysBeforeExpiry(30)
                        .build())
                    .build())
                .secretProperties(CertificateCertificatePolicySecretPropertiesArgs.builder()
                    .contentType("application/x-pkcs12")
                    .build())
                .x509CertificateProperties(CertificateCertificatePolicyX509CertificatePropertiesArgs.builder()
                    .extendedKeyUsages("1.3.6.1.5.5.7.3.1")
                    .keyUsages(                    
                        "cRLSign",
                        "dataEncipherment",
                        "digitalSignature",
                        "keyAgreement",
                        "keyCertSign",
                        "keyEncipherment")
                    .subjectAlternativeNames(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs.builder()
                        .dnsNames(                        
                            "internal.contoso.com",
                            "domain.hello.world")
                        .build())
                    .subject("CN=hello-world")
                    .validityInMonths(12)
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: examplekeyvault
      location: ${example.location}
      resourceGroupName: ${example.name}
      tenantId: ${current.tenantId}
      skuName: standard
      softDeleteRetentionDays: 7
      accessPolicies:
        - tenantId: ${current.tenantId}
          objectId: ${current.objectId}
          certificatePermissions:
            - Create
            - Delete
            - DeleteIssuers
            - Get
            - GetIssuers
            - Import
            - List
            - ListIssuers
            - ManageContacts
            - ManageIssuers
            - Purge
            - SetIssuers
            - Update
          keyPermissions:
            - Backup
            - Create
            - Decrypt
            - Delete
            - Encrypt
            - Get
            - Import
            - List
            - Purge
            - Recover
            - Restore
            - Sign
            - UnwrapKey
            - Update
            - Verify
            - WrapKey
          secretPermissions:
            - Backup
            - Delete
            - Get
            - List
            - Purge
            - Recover
            - Restore
            - Set
  exampleCertificate:
    type: azure:keyvault:Certificate
    name: example
    properties:
      name: generated-cert
      keyVaultId: ${exampleKeyVault.id}
      certificatePolicy:
        issuerParameters:
          name: Self
        keyProperties:
          exportable: true
          keySize: 2048
          keyType: RSA
          reuseKey: true
        lifetimeActions:
          - action:
              actionType: AutoRenew
            trigger:
              daysBeforeExpiry: 30
        secretProperties:
          contentType: application/x-pkcs12
        x509CertificateProperties:
          extendedKeyUsages:
            - 1.3.6.1.5.5.7.3.1
          keyUsages:
            - cRLSign
            - dataEncipherment
            - digitalSignature
            - keyAgreement
            - keyCertSign
            - keyEncipherment
          subjectAlternativeNames:
            dnsNames:
              - internal.contoso.com
              - domain.hello.world
          subject: CN=hello-world
          validityInMonths: 12
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Key Vault Certificates can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/certificate:Certificate example "https://example-keyvault.vault.azure.net/certificates/example/fdf067c93bbb4b22bff4d8b7a9a56217"
```


certificatefBd:b
`
keyvaultCertificateCertificate<azure:keyvault/CertificateCertificate:CertificateCertificateA `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.

certificatePolicyxBv:t
r
keyvaultCertificateCertificatePolicyHazure:keyvault/CertificateCertificatePolicy:CertificateCertificatePolicyþA `certificate_policy` block as defined below. Changing this (except the `lifetime_action` field) will create a new version of the Key Vault Certificate.

> **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificate_policy` is required. Provide `certificate` to import an existing certificate, `certificate_policy` to generate a new certificate.


keyVaultId" tThe ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
r
nameB" dSpecifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
=
tagsB2" -A mapping of tags to assign to the resource.
"
certificatefBd:b
`
keyvaultCertificateCertificate<azure:keyvault/CertificateCertificate:CertificateCertificateA `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
"Ï
certificateAttributes*:}
{
keyvaultCertificateCertificateAttributeNazure:keyvault/CertificateCertificateAttribute:CertificateCertificateAttribute2A `certificate_attribute` block as defined below.
"_
certificateData" HThe raw Key Vault Certificate data represented as a hexadecimal string.
"L
certificateDataBase64" /The Base64 encoded Key Vault Certificate data.
"
certificatePolicyv:t
r
keyvaultCertificateCertificatePolicyHazure:keyvault/CertificateCertificatePolicy:CertificateCertificatePolicyþA `certificate_policy` block as defined below. Changing this (except the `lifetime_action` field) will create a new version of the Key Vault Certificate.

> **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificate_policy` is required. Provide `certificate` to import an existing certificate, `certificate_policy` to generate a new certificate.
"

keyVaultId" tThe ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
"p
name" dSpecifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
"á
resourceManagerId" ÇThe (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.
"Ø
resourceManagerVersionlessId" ³The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
";
secretId" +The ID of the associated Key Vault Secret.
"=
tagsB2" -A mapping of tags to assign to the resource.
"h

thumbprint" VThe X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
"A
version" 2The current version of the Key Vault Certificate.
"?
versionlessId" *The Base ID of the Key Vault Certificate.
"@
versionlessSecretId" %The Base ID of the Key Vault Secret.
*¬[
W
keyvaultCertificateContacts6azure:keyvault/certificateContacts:CertificateContacts VManages Key Vault Certificate Contacts.

## Disclaimers

<!-- TODO: Remove Note in 4.0 -->
> **Note:** It's possible to define Key Vault Certificate Contacts both within the `azure.keyvault.KeyVault` resource via the `contact` block and by using the `azure.keyvault.CertificateContacts` resource. However it's not possible to use both methods to manage Certificate Contacts within a KeyVault, since there'll be conflicts.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const current = azure.core.getClientConfig({});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "examplekeyvault",
    location: example.location,
    resourceGroupName: example.name,
    tenantId: current.then(current => current.tenantId),
    skuName: "premium",
});
const exampleAccessPolicy = new azure.keyvault.AccessPolicy("example", {
    keyVaultId: exampleKeyVault.id,
    tenantId: current.then(current => current.tenantId),
    objectId: current.then(current => current.objectId),
    certificatePermissions: ["ManageContacts"],
    keyPermissions: ["Create"],
    secretPermissions: ["Set"],
});
const exampleCertificateContacts = new azure.keyvault.CertificateContacts("example", {
    keyVaultId: exampleKeyVault.id,
    contacts: [
        {
            email: "example@example.com",
            name: "example",
            phone: "01234567890",
        },
        {
            email: "example2@example.com",
        },
    ],
}, {
    dependsOn: [exampleAccessPolicy],
});
```
```python
import pulumi
import pulumi_azure as azure

current = azure.core.get_client_config()
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_key_vault = azure.keyvault.KeyVault("example",
    name="examplekeyvault",
    location=example.location,
    resource_group_name=example.name,
    tenant_id=current.tenant_id,
    sku_name="premium")
example_access_policy = azure.keyvault.AccessPolicy("example",
    key_vault_id=example_key_vault.id,
    tenant_id=current.tenant_id,
    object_id=current.object_id,
    certificate_permissions=["ManageContacts"],
    key_permissions=["Create"],
    secret_permissions=["Set"])
example_certificate_contacts = azure.keyvault.CertificateContacts("example",
    key_vault_id=example_key_vault.id,
    contacts=[
        {
            "email": "example@example.com",
            "name": "example",
            "phone": "01234567890",
        },
        {
            "email": "example2@example.com",
        },
    ],
    opts = pulumi.ResourceOptions(depends_on=[example_access_policy]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "examplekeyvault",
        Location = example.Location,
        ResourceGroupName = example.Name,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SkuName = "premium",
    });

    var exampleAccessPolicy = new Azure.KeyVault.AccessPolicy("example", new()
    {
        KeyVaultId = exampleKeyVault.Id,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        ObjectId = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
        CertificatePermissions = new[]
        {
            "ManageContacts",
        },
        KeyPermissions = new[]
        {
            "Create",
        },
        SecretPermissions = new[]
        {
            "Set",
        },
    });

    var exampleCertificateContacts = new Azure.KeyVault.CertificateContacts("example", new()
    {
        KeyVaultId = exampleKeyVault.Id,
        Contacts = new[]
        {
            new Azure.KeyVault.Inputs.CertificateContactsContactArgs
            {
                Email = "example@example.com",
                Name = "example",
                Phone = "01234567890",
            },
            new Azure.KeyVault.Inputs.CertificateContactsContactArgs
            {
                Email = "example2@example.com",
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            exampleAccessPolicy,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:              pulumi.String("examplekeyvault"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			TenantId:          pulumi.String(current.TenantId),
			SkuName:           pulumi.String("premium"),
		})
		if err != nil {
			return err
		}
		exampleAccessPolicy, err := keyvault.NewAccessPolicy(ctx, "example", &keyvault.AccessPolicyArgs{
			KeyVaultId: exampleKeyVault.ID(),
			TenantId:   pulumi.String(current.TenantId),
			ObjectId:   pulumi.String(current.ObjectId),
			CertificatePermissions: pulumi.StringArray{
				pulumi.String("ManageContacts"),
			},
			KeyPermissions: pulumi.StringArray{
				pulumi.String("Create"),
			},
			SecretPermissions: pulumi.StringArray{
				pulumi.String("Set"),
			},
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewCertificateContacts(ctx, "example", &keyvault.CertificateContactsArgs{
			KeyVaultId: exampleKeyVault.ID(),
			Contacts: keyvault.CertificateContactsContactArray{
				&keyvault.CertificateContactsContactArgs{
					Email: pulumi.String("example@example.com"),
					Name:  pulumi.String("example"),
					Phone: pulumi.String("01234567890"),
				},
				&keyvault.CertificateContactsContactArgs{
					Email: pulumi.String("example2@example.com"),
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			exampleAccessPolicy,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.AccessPolicy;
import com.pulumi.azure.keyvault.AccessPolicyArgs;
import com.pulumi.azure.keyvault.CertificateContacts;
import com.pulumi.azure.keyvault.CertificateContactsArgs;
import com.pulumi.azure.keyvault.inputs.CertificateContactsContactArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("examplekeyvault")
            .location(example.location())
            .resourceGroupName(example.name())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .skuName("premium")
            .build());

        var exampleAccessPolicy = new AccessPolicy("exampleAccessPolicy", AccessPolicyArgs.builder()
            .keyVaultId(exampleKeyVault.id())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
            .certificatePermissions("ManageContacts")
            .keyPermissions("Create")
            .secretPermissions("Set")
            .build());

        var exampleCertificateContacts = new CertificateContacts("exampleCertificateContacts", CertificateContactsArgs.builder()
            .keyVaultId(exampleKeyVault.id())
            .contacts(            
                CertificateContactsContactArgs.builder()
                    .email("example@example.com")
                    .name("example")
                    .phone("01234567890")
                    .build(),
                CertificateContactsContactArgs.builder()
                    .email("example2@example.com")
                    .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(exampleAccessPolicy)
                .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: examplekeyvault
      location: ${example.location}
      resourceGroupName: ${example.name}
      tenantId: ${current.tenantId}
      skuName: premium
  exampleAccessPolicy:
    type: azure:keyvault:AccessPolicy
    name: example
    properties:
      keyVaultId: ${exampleKeyVault.id}
      tenantId: ${current.tenantId}
      objectId: ${current.objectId}
      certificatePermissions:
        - ManageContacts
      keyPermissions:
        - Create
      secretPermissions:
        - Set
  exampleCertificateContacts:
    type: azure:keyvault:CertificateContacts
    name: example
    properties:
      keyVaultId: ${exampleKeyVault.id}
      contacts:
        - email: example@example.com
          name: example
          phone: '01234567890'
        - email: example2@example.com
    options:
      dependsOn:
        - ${exampleAccessPolicy}
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Key Vault Certificate Contacts can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/certificateContacts:CertificateContacts example https://example-keyvault.vault.azure.net/certificates/contacts
```

µ
contactstBr*p:n
l
keyvaultCertificateContactsContactDazure:keyvault/CertificateContactsContact:CertificateContactsContact3One or more `contact` blocks as defined below.
-->
^

keyVaultId" LThe ID of the Key Vault. Changing this forces a new resource to be created.
"µ
contactstBr*p:n
l
keyvaultCertificateContactsContactDazure:keyvault/CertificateContactsContact:CertificateContactsContact3One or more `contact` blocks as defined below.
-->
"^

keyVaultId" LThe ID of the Key Vault. Changing this forces a new resource to be created.
*©D
Q
keyvaultCertificateIssuer2azure:keyvault/certificateIssuer:CertificateIssuer»4Manages a Key Vault Certificate Issuer.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const current = azure.core.getClientConfig({});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "examplekeyvault",
    location: example.location,
    resourceGroupName: example.name,
    skuName: "standard",
    tenantId: current.then(current => current.tenantId),
});
const exampleCertificateIssuer = new azure.keyvault.CertificateIssuer("example", {
    name: "example-issuer",
    orgId: "ExampleOrgName",
    keyVaultId: exampleKeyVault.id,
    providerName: "DigiCert",
    accountId: "0000",
    password: "example-password",
});
```
```python
import pulumi
import pulumi_azure as azure

current = azure.core.get_client_config()
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_key_vault = azure.keyvault.KeyVault("example",
    name="examplekeyvault",
    location=example.location,
    resource_group_name=example.name,
    sku_name="standard",
    tenant_id=current.tenant_id)
example_certificate_issuer = azure.keyvault.CertificateIssuer("example",
    name="example-issuer",
    org_id="ExampleOrgName",
    key_vault_id=example_key_vault.id,
    provider_name="DigiCert",
    account_id="0000",
    password="example-password")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "examplekeyvault",
        Location = example.Location,
        ResourceGroupName = example.Name,
        SkuName = "standard",
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
    });

    var exampleCertificateIssuer = new Azure.KeyVault.CertificateIssuer("example", new()
    {
        Name = "example-issuer",
        OrgId = "ExampleOrgName",
        KeyVaultId = exampleKeyVault.Id,
        ProviderName = "DigiCert",
        AccountId = "0000",
        Password = "example-password",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:              pulumi.String("examplekeyvault"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			SkuName:           pulumi.String("standard"),
			TenantId:          pulumi.String(current.TenantId),
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewCertificateIssuer(ctx, "example", &keyvault.CertificateIssuerArgs{
			Name:         pulumi.String("example-issuer"),
			OrgId:        pulumi.String("ExampleOrgName"),
			KeyVaultId:   exampleKeyVault.ID(),
			ProviderName: pulumi.String("DigiCert"),
			AccountId:    pulumi.String("0000"),
			Password:     pulumi.String("example-password"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.CertificateIssuer;
import com.pulumi.azure.keyvault.CertificateIssuerArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("examplekeyvault")
            .location(example.location())
            .resourceGroupName(example.name())
            .skuName("standard")
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .build());

        var exampleCertificateIssuer = new CertificateIssuer("exampleCertificateIssuer", CertificateIssuerArgs.builder()
            .name("example-issuer")
            .orgId("ExampleOrgName")
            .keyVaultId(exampleKeyVault.id())
            .providerName("DigiCert")
            .accountId("0000")
            .password("example-password")
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: examplekeyvault
      location: ${example.location}
      resourceGroupName: ${example.name}
      skuName: standard
      tenantId: ${current.tenantId}
  exampleCertificateIssuer:
    type: azure:keyvault:CertificateIssuer
    name: example
    properties:
      name: example-issuer
      orgId: ExampleOrgName
      keyVaultId: ${exampleKeyVault.id}
      providerName: DigiCert
      accountId: '0000'
      password: example-password
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Key Vault Certificate Issuers can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/certificateIssuer:CertificateIssuer example "https://key-vault-name.vault.azure.net/certificates/issuers/example"
```

O
	accountIdB" <The account number with the third-party Certificate Issuer.
¡
adminshBf*d:b
`
keyvaultCertificateIssuerAdmin<azure:keyvault/CertificateIssuerAdmin:CertificateIssuerAdmin-One or more `admin` blocks as defined below.


keyVaultId" vThe ID of the Key Vault in which to create the Certificate Issuer. Changing this forces a new resource to be created.

nameB" The name which should be used for this Key Vault Certificate Issuer. Changing this forces a new Key Vault Certificate Issuer to be created.
E
orgIdB" 6The ID of the organization as provided to the issuer.
°
passwordB" The password associated with the account and organization ID at the third-party Certificate Issuer. If not specified, will not overwrite any previous value.
²
providerName" The name of the third-party Certificate Issuer. Possible values are: `DigiCert`, `GlobalSign`, `OneCertV2-PrivateCA`, `OneCertV2-PublicCA` and `SslAdminV2`.
"O
	accountIdB" <The account number with the third-party Certificate Issuer.
"¡
adminshBf*d:b
`
keyvaultCertificateIssuerAdmin<azure:keyvault/CertificateIssuerAdmin:CertificateIssuerAdmin-One or more `admin` blocks as defined below.
"

keyVaultId" vThe ID of the Key Vault in which to create the Certificate Issuer. Changing this forces a new resource to be created.
"
name" The name which should be used for this Key Vault Certificate Issuer. Changing this forces a new Key Vault Certificate Issuer to be created.
"E
orgIdB" 6The ID of the organization as provided to the issuer.
"°
passwordB" The password associated with the account and organization ID at the third-party Certificate Issuer. If not specified, will not overwrite any previous value.
"²
providerName" The name of the third-party Certificate Issuer. Possible values are: `DigiCert`, `GlobalSign`, `OneCertV2-PrivateCA`, `OneCertV2-PublicCA` and `SslAdminV2`.
*â
'
keyvaultKeyazure:keyvault/key:KeybManages a Key Vault Key.

## Example Usage

> **Note:** To use this resource, your client should have RBAC roles with permissions like `Key Vault Crypto Officer` or `Key Vault Administrator` or an assigned Key Vault Access Policy with permissions `Create`,`Delete`,`Get`,`Purge`,`Recover`,`Update` and `GetRotationPolicy` for keys without Rotation Policy. Include `SetRotationPolicy` for keys with Rotation Policy.

> **Note:** The Azure Provider includes a Feature Toggle which will purge a Key Vault Key resource on destroy, rather than the default soft-delete. See `purge_soft_deleted_keys_on_destroy` for more information.


### Additional Examples

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const current = azure.core.getClientConfig({});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "examplekeyvault",
    location: example.location,
    resourceGroupName: example.name,
    tenantId: current.then(current => current.tenantId),
    skuName: "premium",
    softDeleteRetentionDays: 7,
    accessPolicies: [{
        tenantId: current.then(current => current.tenantId),
        objectId: current.then(current => current.objectId),
        keyPermissions: [
            "Create",
            "Delete",
            "Get",
            "Purge",
            "Recover",
            "Update",
            "GetRotationPolicy",
            "SetRotationPolicy",
        ],
        secretPermissions: ["Set"],
    }],
});
const generated = new azure.keyvault.Key("generated", {
    name: "generated-certificate",
    keyVaultId: exampleKeyVault.id,
    keyType: "RSA",
    keySize: 2048,
    keyOpts: [
        "decrypt",
        "encrypt",
        "sign",
        "unwrapKey",
        "verify",
        "wrapKey",
    ],
    rotationPolicy: {
        automatic: {
            timeBeforeExpiry: "P30D",
        },
        expireAfter: "P90D",
        notifyBeforeExpiry: "P29D",
    },
});
```
```python
import pulumi
import pulumi_azure as azure

current = azure.core.get_client_config()
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_key_vault = azure.keyvault.KeyVault("example",
    name="examplekeyvault",
    location=example.location,
    resource_group_name=example.name,
    tenant_id=current.tenant_id,
    sku_name="premium",
    soft_delete_retention_days=7,
    access_policies=[{
        "tenant_id": current.tenant_id,
        "object_id": current.object_id,
        "key_permissions": [
            "Create",
            "Delete",
            "Get",
            "Purge",
            "Recover",
            "Update",
            "GetRotationPolicy",
            "SetRotationPolicy",
        ],
        "secret_permissions": ["Set"],
    }])
generated = azure.keyvault.Key("generated",
    name="generated-certificate",
    key_vault_id=example_key_vault.id,
    key_type="RSA",
    key_size=2048,
    key_opts=[
        "decrypt",
        "encrypt",
        "sign",
        "unwrapKey",
        "verify",
        "wrapKey",
    ],
    rotation_policy={
        "automatic": {
            "time_before_expiry": "P30D",
        },
        "expire_after": "P90D",
        "notify_before_expiry": "P29D",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "examplekeyvault",
        Location = example.Location,
        ResourceGroupName = example.Name,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SkuName = "premium",
        SoftDeleteRetentionDays = 7,
        AccessPolicies = new[]
        {
            new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
            {
                TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
                ObjectId = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
                KeyPermissions = new[]
                {
                    "Create",
                    "Delete",
                    "Get",
                    "Purge",
                    "Recover",
                    "Update",
                    "GetRotationPolicy",
                    "SetRotationPolicy",
                },
                SecretPermissions = new[]
                {
                    "Set",
                },
            },
        },
    });

    var generated = new Azure.KeyVault.Key("generated", new()
    {
        Name = "generated-certificate",
        KeyVaultId = exampleKeyVault.Id,
        KeyType = "RSA",
        KeySize = 2048,
        KeyOpts = new[]
        {
            "decrypt",
            "encrypt",
            "sign",
            "unwrapKey",
            "verify",
            "wrapKey",
        },
        RotationPolicy = new Azure.KeyVault.Inputs.KeyRotationPolicyArgs
        {
            Automatic = new Azure.KeyVault.Inputs.KeyRotationPolicyAutomaticArgs
            {
                TimeBeforeExpiry = "P30D",
            },
            ExpireAfter = "P90D",
            NotifyBeforeExpiry = "P29D",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:                    pulumi.String("examplekeyvault"),
			Location:                example.Location,
			ResourceGroupName:       example.Name,
			TenantId:                pulumi.String(current.TenantId),
			SkuName:                 pulumi.String("premium"),
			SoftDeleteRetentionDays: pulumi.Int(7),
			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
				&keyvault.KeyVaultAccessPolicyArgs{
					TenantId: pulumi.String(current.TenantId),
					ObjectId: pulumi.String(current.ObjectId),
					KeyPermissions: pulumi.StringArray{
						pulumi.String("Create"),
						pulumi.String("Delete"),
						pulumi.String("Get"),
						pulumi.String("Purge"),
						pulumi.String("Recover"),
						pulumi.String("Update"),
						pulumi.String("GetRotationPolicy"),
						pulumi.String("SetRotationPolicy"),
					},
					SecretPermissions: pulumi.StringArray{
						pulumi.String("Set"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewKey(ctx, "generated", &keyvault.KeyArgs{
			Name:       pulumi.String("generated-certificate"),
			KeyVaultId: exampleKeyVault.ID(),
			KeyType:    pulumi.String("RSA"),
			KeySize:    pulumi.Int(2048),
			KeyOpts: pulumi.StringArray{
				pulumi.String("decrypt"),
				pulumi.String("encrypt"),
				pulumi.String("sign"),
				pulumi.String("unwrapKey"),
				pulumi.String("verify"),
				pulumi.String("wrapKey"),
			},
			RotationPolicy: &keyvault.KeyRotationPolicyArgs{
				Automatic: &keyvault.KeyRotationPolicyAutomaticArgs{
					TimeBeforeExpiry: pulumi.String("P30D"),
				},
				ExpireAfter:        pulumi.String("P90D"),
				NotifyBeforeExpiry: pulumi.String("P29D"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
import com.pulumi.azure.keyvault.Key;
import com.pulumi.azure.keyvault.KeyArgs;
import com.pulumi.azure.keyvault.inputs.KeyRotationPolicyArgs;
import com.pulumi.azure.keyvault.inputs.KeyRotationPolicyAutomaticArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("examplekeyvault")
            .location(example.location())
            .resourceGroupName(example.name())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .skuName("premium")
            .softDeleteRetentionDays(7)
            .accessPolicies(KeyVaultAccessPolicyArgs.builder()
                .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
                .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
                .keyPermissions(                
                    "Create",
                    "Delete",
                    "Get",
                    "Purge",
                    "Recover",
                    "Update",
                    "GetRotationPolicy",
                    "SetRotationPolicy")
                .secretPermissions("Set")
                .build())
            .build());

        var generated = new Key("generated", KeyArgs.builder()
            .name("generated-certificate")
            .keyVaultId(exampleKeyVault.id())
            .keyType("RSA")
            .keySize(2048)
            .keyOpts(            
                "decrypt",
                "encrypt",
                "sign",
                "unwrapKey",
                "verify",
                "wrapKey")
            .rotationPolicy(KeyRotationPolicyArgs.builder()
                .automatic(KeyRotationPolicyAutomaticArgs.builder()
                    .timeBeforeExpiry("P30D")
                    .build())
                .expireAfter("P90D")
                .notifyBeforeExpiry("P29D")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: examplekeyvault
      location: ${example.location}
      resourceGroupName: ${example.name}
      tenantId: ${current.tenantId}
      skuName: premium
      softDeleteRetentionDays: 7
      accessPolicies:
        - tenantId: ${current.tenantId}
          objectId: ${current.objectId}
          keyPermissions:
            - Create
            - Delete
            - Get
            - Purge
            - Recover
            - Update
            - GetRotationPolicy
            - SetRotationPolicy
          secretPermissions:
            - Set
  generated:
    type: azure:keyvault:Key
    properties:
      name: generated-certificate
      keyVaultId: ${exampleKeyVault.id}
      keyType: RSA
      keySize: 2048
      keyOpts:
        - decrypt
        - encrypt
        - sign
        - unwrapKey
        - verify
        - wrapKey
      rotationPolicy:
        automatic:
          timeBeforeExpiry: P30D
        expireAfter: P90D
        notifyBeforeExpiry: P29D
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Key Vault Key which is Enabled can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/key:Key example "https://example-keyvault.vault.azure.net/keys/example/fdf067c93bbb4b22bff4d8b7a9a56217"
```

Â
curveB" ²Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`. The API will default to `P-256` if nothing is specified. Changing this forces a new resource to be created.

expirationDateB" Expiration UTC datetime (Y-m-d'T'H:M:S'Z').

> **Note:** Removing this field from the config forces a new resource to be created.
¾
keyOpts*" ¬A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case sensitive.
Ú
keySizeB ÈSpecifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `key_type` is `RSA` or `RSA-HSM`. Changing this forces a new resource to be created.
Ã
keyType" ³Specifies the Key Type to use for this Key Vault Key. Possible values are `EC` (Elliptic Curve), `EC-HSM`, `RSA` and `RSA-HSM`. Changing this forces a new resource to be created.
~

keyVaultId" lThe ID of the Key Vault where the Key should be created. Changing this forces a new resource to be created.
j
nameB" \Specifies the name of the Key Vault Key. Changing this forces a new resource to be created.

notBeforeDateB" ñKey not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').

> **Note:** Once `expiration_date` is set, it's not possible to unset the key even if it is deleted & recreated as underlying Azure API uses the restore of the purged key.

rotationPolicyWBU:S
Q
keyvaultKeyRotationPolicy2azure:keyvault/KeyRotationPolicy:KeyRotationPolicy,A `rotation_policy` block as defined below.
=
tagsB2" -A mapping of tags to assign to the resource.
"À
curve" ²Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`. The API will default to `P-256` if nothing is specified. Changing this forces a new resource to be created.
"8
e" /The RSA public exponent of this Key Vault Key.
"
expirationDateB" Expiration UTC datetime (Y-m-d'T'H:M:S'Z').

> **Note:** Removing this field from the config forces a new resource to be created.
"¾
keyOpts*" ¬A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case sensitive.
"Ú
keySizeB ÈSpecifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `key_type` is `RSA` or `RSA-HSM`. Changing this forces a new resource to be created.
"Ã
keyType" ³Specifies the Key Type to use for this Key Vault Key. Possible values are `EC` (Elliptic Curve), `EC-HSM`, `RSA` and `RSA-HSM`. Changing this forces a new resource to be created.
"~

keyVaultId" lThe ID of the Key Vault where the Key should be created. Changing this forces a new resource to be created.
"0
n" 'The RSA modulus of this Key Vault Key.
"h
name" \Specifies the name of the Key Vault Key. Changing this forces a new resource to be created.
"
notBeforeDateB" ñKey not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').

> **Note:** Once `expiration_date` is set, it's not possible to unset the key even if it is deleted & recreated as underlying Azure API uses the restore of the purged key.
"N
publicKeyOpenssh" 6The OpenSSH encoded public key of this Key Vault Key.
"F
publicKeyPem" 2The PEM encoded public key of this Key Vault Key.
"Ê

resourceId" ·The (Versioned) ID for this Key Vault Key. This property points to a specific version of a Key Vault Key, as such using this won't auto-rotate values if used in other Azure Services.
"Á
resourceVersionlessId" £The Versionless ID of the Key Vault Key. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Key is updated.
"
rotationPolicyWBU:S
Q
keyvaultKeyRotationPolicy2azure:keyvault/KeyRotationPolicy:KeyRotationPolicy,A `rotation_policy` block as defined below.
"=
tagsB2" -A mapping of tags to assign to the resource.
"9
version" *The current version of the Key Vault Key.
"7
versionlessId" "The Base ID of the Key Vault Key.
"3
x" *The EC X component of this Key Vault Key.
"3
y" *The EC Y component of this Key Vault Key.
*Ûz
6
keyvaultKeyVault azure:keyvault/keyVault:KeyVaultÖAManages a Key Vault.

## Disclaimers

> **Note:** It's possible to define Key Vault Access Policies both within the `azure.keyvault.KeyVault` resource via the `access_policy` block and by using the `azure.keyvault.AccessPolicy` resource. However it's not possible to use both methods to manage Access Policies within a KeyVault, since there'll be conflicts.

> **Note:** It's possible to define Key Vault Certificate Contacts both within the `azure.keyvault.KeyVault` resource via the `contact` block and by using the `azure.keyvault.CertificateContacts` resource. However it's not possible to use both methods to manage Certificate Contacts within a KeyVault, since there'll be conflicts.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const current = azure.core.getClientConfig({});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "examplekeyvault",
    location: example.location,
    resourceGroupName: example.name,
    enabledForDiskEncryption: true,
    tenantId: current.then(current => current.tenantId),
    softDeleteRetentionDays: 7,
    purgeProtectionEnabled: false,
    skuName: "standard",
    accessPolicies: [{
        tenantId: current.then(current => current.tenantId),
        objectId: current.then(current => current.objectId),
        keyPermissions: ["Get"],
        secretPermissions: ["Get"],
        storagePermissions: ["Get"],
    }],
});
```
```python
import pulumi
import pulumi_azure as azure

current = azure.core.get_client_config()
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_key_vault = azure.keyvault.KeyVault("example",
    name="examplekeyvault",
    location=example.location,
    resource_group_name=example.name,
    enabled_for_disk_encryption=True,
    tenant_id=current.tenant_id,
    soft_delete_retention_days=7,
    purge_protection_enabled=False,
    sku_name="standard",
    access_policies=[{
        "tenant_id": current.tenant_id,
        "object_id": current.object_id,
        "key_permissions": ["Get"],
        "secret_permissions": ["Get"],
        "storage_permissions": ["Get"],
    }])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "examplekeyvault",
        Location = example.Location,
        ResourceGroupName = example.Name,
        EnabledForDiskEncryption = true,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SoftDeleteRetentionDays = 7,
        PurgeProtectionEnabled = false,
        SkuName = "standard",
        AccessPolicies = new[]
        {
            new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
            {
                TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
                ObjectId = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
                KeyPermissions = new[]
                {
                    "Get",
                },
                SecretPermissions = new[]
                {
                    "Get",
                },
                StoragePermissions = new[]
                {
                    "Get",
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:                     pulumi.String("examplekeyvault"),
			Location:                 example.Location,
			ResourceGroupName:        example.Name,
			EnabledForDiskEncryption: pulumi.Bool(true),
			TenantId:                 pulumi.String(current.TenantId),
			SoftDeleteRetentionDays:  pulumi.Int(7),
			PurgeProtectionEnabled:   pulumi.Bool(false),
			SkuName:                  pulumi.String("standard"),
			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
				&keyvault.KeyVaultAccessPolicyArgs{
					TenantId: pulumi.String(current.TenantId),
					ObjectId: pulumi.String(current.ObjectId),
					KeyPermissions: pulumi.StringArray{
						pulumi.String("Get"),
					},
					SecretPermissions: pulumi.StringArray{
						pulumi.String("Get"),
					},
					StoragePermissions: pulumi.StringArray{
						pulumi.String("Get"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("examplekeyvault")
            .location(example.location())
            .resourceGroupName(example.name())
            .enabledForDiskEncryption(true)
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .softDeleteRetentionDays(7)
            .purgeProtectionEnabled(false)
            .skuName("standard")
            .accessPolicies(KeyVaultAccessPolicyArgs.builder()
                .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
                .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
                .keyPermissions("Get")
                .secretPermissions("Get")
                .storagePermissions("Get")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: examplekeyvault
      location: ${example.location}
      resourceGroupName: ${example.name}
      enabledForDiskEncryption: true
      tenantId: ${current.tenantId}
      softDeleteRetentionDays: 7
      purgeProtectionEnabled: false
      skuName: standard
      accessPolicies:
        - tenantId: ${current.tenantId}
          objectId: ${current.objectId}
          keyPermissions:
            - Get
          secretPermissions:
            - Get
          storagePermissions:
            - Get
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Key Vault's can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/keyVault:KeyVault example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.KeyVault/vaults/vault1
```


accessPoliciesbB`*^:\
Z
keyvaultKeyVaultAccessPolicy8azure:keyvault/KeyVaultAccessPolicy:KeyVaultAccessPolicyA list of up to 1024 objects describing access policies, as described below.

> **NOTE** Since `access_policy` can be configured both inline and via the separate `azure.keyvault.AccessPolicy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
ª
contactsSBQ*O:M
K
keyvaultKeyVaultContact.azure:keyvault/KeyVaultContact:KeyVaultContactÈOne or more `contact` block as defined below.

> **Note:** This field can only be set once user has `managecontacts` certificate permission.

> **Note:** This field can only be set when `public_network_access_enabled` is set to `true`. To manage the `contact` with `public_network_access_enabled` set to `false`, please use the `azure.keyvault.CertificateContacts` resource instead of this property, and remove this property from the configuration. Especially for existing `azure.keyvault.KeyVault`, this means you'll need to import the `azure.keyvault.CertificateContacts` manually.

enableRbacAuthorizationB
 yBoolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
£
enabledForDeploymentB
 Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.

enabledForDiskEncryptionB
 wBoolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.

enabledForTemplateDeploymentB
 lBoolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.

locationB" uSpecifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
ï
nameB" àSpecifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.

networkAcls]B[:Y
W
keyvaultKeyVaultNetworkAcls6azure:keyvault/KeyVaultNetworkAcls:KeyVaultNetworkAcls)A `network_acls` block as defined below.
u
publicNetworkAccessEnabledB
 QWhether public network access is allowed for this Key Vault. Defaults to `true`.
ç
purgeProtectionEnabledB
 ÆIs Purge Protection enabled for this Key Vault? 

!> **Note:** Once Purge Protection has been Enabled it's not possible to Disable it. Support for [disabling purge protection is being tracked in this Azure API issue](https://github.com/Azure/azure-rest-api-specs/issues/8075). Deleting the Key Vault with Purge Protection Enabled will schedule the Key Vault to be deleted (which will happen by Azure in the configured number of days, currently 90 days).

resourceGroupName" tThe name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
j
skuName" [The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
¦
softDeleteRetentionDaysB The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.

> **Note:** This field can only be configured one time and cannot be updated.

<!-- TODO: Remove `contact` and Notes in 4.0 -->
=
tagsB2" -A mapping of tags to assign to the resource.
w
tenantId" gThe Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
"
accessPolicies`*^:\
Z
keyvaultKeyVaultAccessPolicy8azure:keyvault/KeyVaultAccessPolicy:KeyVaultAccessPolicyA list of up to 1024 objects describing access policies, as described below.

> **NOTE** Since `access_policy` can be configured both inline and via the separate `azure.keyvault.AccessPolicy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
"¨
contactsQ*O:M
K
keyvaultKeyVaultContact.azure:keyvault/KeyVaultContact:KeyVaultContactÈOne or more `contact` block as defined below.

> **Note:** This field can only be set once user has `managecontacts` certificate permission.

> **Note:** This field can only be set when `public_network_access_enabled` is set to `true`. To manage the `contact` with `public_network_access_enabled` set to `false`, please use the `azure.keyvault.CertificateContacts` resource instead of this property, and remove this property from the configuration. Especially for existing `azure.keyvault.KeyVault`, this means you'll need to import the `azure.keyvault.CertificateContacts` manually.
"
enableRbacAuthorizationB
 yBoolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
"£
enabledForDeploymentB
 Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
"
enabledForDiskEncryptionB
 wBoolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
"
enabledForTemplateDeploymentB
 lBoolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
"
location" uSpecifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
"í
name" àSpecifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
"
networkAcls[:Y
W
keyvaultKeyVaultNetworkAcls6azure:keyvault/KeyVaultNetworkAcls:KeyVaultNetworkAcls)A `network_acls` block as defined below.
"u
publicNetworkAccessEnabledB
 QWhether public network access is allowed for this Key Vault. Defaults to `true`.
"ç
purgeProtectionEnabledB
 ÆIs Purge Protection enabled for this Key Vault? 

!> **Note:** Once Purge Protection has been Enabled it's not possible to Disable it. Support for [disabling purge protection is being tracked in this Azure API issue](https://github.com/Azure/azure-rest-api-specs/issues/8075). Deleting the Key Vault with Purge Protection Enabled will schedule the Key Vault to be deleted (which will happen by Azure in the configured number of days, currently 90 days).
"
resourceGroupName" tThe name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
"j
skuName" [The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
"¦
softDeleteRetentionDaysB The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.

> **Note:** This field can only be configured one time and cannot be updated.

<!-- TODO: Remove `contact` and Notes in 4.0 -->
"=
tagsB2" -A mapping of tags to assign to the resource.
"w
tenantId" gThe Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
"^
vaultUri" NThe URI of the Key Vault, used for performing operations on keys and secrets.
*í\
u
keyvaultManagedHardwareSecurityModuleJazure:keyvault/managedHardwareSecurityModule:ManagedHardwareSecurityModule4Manages a Key Vault Managed Hardware Security Module.

> **Note:** The Azure Provider includes a Feature Toggle which will purge a Key Vault Managed Hardware Security Module resource on destroy, rather than the default soft-delete. See `purge_soft_deleted_hardware_security_modules_on_destroy` for more information.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const current = azure.core.getClientConfig({});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleManagedHardwareSecurityModule = new azure.keyvault.ManagedHardwareSecurityModule("example", {
    name: "exampleKVHsm",
    resourceGroupName: example.name,
    location: example.location,
    skuName: "Standard_B1",
    purgeProtectionEnabled: false,
    softDeleteRetentionDays: 90,
    tenantId: current.then(current => current.tenantId),
    adminObjectIds: [current.then(current => current.objectId)],
    tags: {
        Env: "Test",
    },
});
```
```python
import pulumi
import pulumi_azure as azure

current = azure.core.get_client_config()
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_managed_hardware_security_module = azure.keyvault.ManagedHardwareSecurityModule("example",
    name="exampleKVHsm",
    resource_group_name=example.name,
    location=example.location,
    sku_name="Standard_B1",
    purge_protection_enabled=False,
    soft_delete_retention_days=90,
    tenant_id=current.tenant_id,
    admin_object_ids=[current.object_id],
    tags={
        "Env": "Test",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleManagedHardwareSecurityModule = new Azure.KeyVault.ManagedHardwareSecurityModule("example", new()
    {
        Name = "exampleKVHsm",
        ResourceGroupName = example.Name,
        Location = example.Location,
        SkuName = "Standard_B1",
        PurgeProtectionEnabled = false,
        SoftDeleteRetentionDays = 90,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        AdminObjectIds = new[]
        {
            current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
        },
        Tags = 
        {
            { "Env", "Test" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewManagedHardwareSecurityModule(ctx, "example", &keyvault.ManagedHardwareSecurityModuleArgs{
			Name:                    pulumi.String("exampleKVHsm"),
			ResourceGroupName:       example.Name,
			Location:                example.Location,
			SkuName:                 pulumi.String("Standard_B1"),
			PurgeProtectionEnabled:  pulumi.Bool(false),
			SoftDeleteRetentionDays: pulumi.Int(90),
			TenantId:                pulumi.String(current.TenantId),
			AdminObjectIds: pulumi.StringArray{
				pulumi.String(current.ObjectId),
			},
			Tags: pulumi.StringMap{
				"Env": pulumi.String("Test"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.ManagedHardwareSecurityModule;
import com.pulumi.azure.keyvault.ManagedHardwareSecurityModuleArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleManagedHardwareSecurityModule = new ManagedHardwareSecurityModule("exampleManagedHardwareSecurityModule", ManagedHardwareSecurityModuleArgs.builder()
            .name("exampleKVHsm")
            .resourceGroupName(example.name())
            .location(example.location())
            .skuName("Standard_B1")
            .purgeProtectionEnabled(false)
            .softDeleteRetentionDays(90)
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .adminObjectIds(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
            .tags(Map.of("Env", "Test"))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleManagedHardwareSecurityModule:
    type: azure:keyvault:ManagedHardwareSecurityModule
    name: example
    properties:
      name: exampleKVHsm
      resourceGroupName: ${example.name}
      location: ${example.location}
      skuName: Standard_B1
      purgeProtectionEnabled: false
      softDeleteRetentionDays: 90
      tenantId: ${current.tenantId}
      adminObjectIds:
        - ${current.objectId}
      tags:
        Env: Test
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Key Vault Managed Hardware Security Module can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/managedHardwareSecurityModule:ManagedHardwareSecurityModule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.KeyVault/managedHSMs/hsm1
```

®
adminObjectIds*" Specifies a list of administrators object IDs for the key vault Managed Hardware Security Module. Changing this forces a new resource to be created.

locationB" uSpecifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.

nameB" ySpecifies the name of the Key Vault Managed Hardware Security Module. Changing this forces a new resource to be created.
Ú
networkAclsB:

keyvault(ManagedHardwareSecurityModuleNetworkAcls`azure:keyvault/ManagedHardwareSecurityModuleNetworkAcls:ManagedHardwareSecurityModuleNetworkAcls)A `network_acls` block as defined below.

publicNetworkAccessEnabledB
 zWhether traffic from public networks is permitted. Defaults to `true`. Changing this forces a new resource to be created.
¥
purgeProtectionEnabledB
 Is Purge Protection enabled for this Key Vault Managed Hardware Security Module? Changing this forces a new resource to be created.
¯
resourceGroupName" The name of the resource group in which to create the Key Vault Managed Hardware Security Module. Changing this forces a new resource to be created.
¾
$securityDomainKeyVaultCertificateIdsB*" A list of KeyVault certificates resource IDs (minimum of three and up to a maximum of 10) to activate this Managed HSM. More information see [activate-your-managed-hsm](https://learn.microsoft.com/azure/key-vault/managed-hsm/quick-create-cli#activate-your-managed-hsm)
ï
securityDomainQuorumB ÐSpecifies the minimum number of shares required to decrypt the security domain for recovery. This is required when `security_domain_key_vault_certificate_ids` is specified. Valid values are between 2 and 10.
²
skuName" ¢The Name of the SKU used for this Key Vault Managed Hardware Security Module. Possible value is `Standard_B1`. Changing this forces a new resource to be created.
Ü
softDeleteRetentionDaysB ºThe number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` days. Defaults to `90`. Changing this forces a new resource to be created.
=
tagsB2" -A mapping of tags to assign to the resource.
Ì
tenantId" »The Azure Active Directory Tenant ID that should be used for authenticating requests to the key vault Managed Hardware Security Module. Changing this forces a new resource to be created.
"®
adminObjectIds*" Specifies a list of administrators object IDs for the key vault Managed Hardware Security Module. Changing this forces a new resource to be created.
"q
hsmUri" cThe URI of the Key Vault Managed Hardware Security Module, used for performing operations on keys.
"
location" uSpecifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
"
name" ySpecifies the name of the Key Vault Managed Hardware Security Module. Changing this forces a new resource to be created.
"×
networkAcls:

keyvault(ManagedHardwareSecurityModuleNetworkAcls`azure:keyvault/ManagedHardwareSecurityModuleNetworkAcls:ManagedHardwareSecurityModuleNetworkAcls)A `network_acls` block as defined below.
"
publicNetworkAccessEnabledB
 zWhether traffic from public networks is permitted. Defaults to `true`. Changing this forces a new resource to be created.
"¥
purgeProtectionEnabledB
 Is Purge Protection enabled for this Key Vault Managed Hardware Security Module? Changing this forces a new resource to be created.
"¯
resourceGroupName" The name of the resource group in which to create the Key Vault Managed Hardware Security Module. Changing this forces a new resource to be created.
"
securityDomainEncryptedData" |This attribute can be used for disaster recovery or when creating another Managed HSM that shares the same security domain.
"¾
$securityDomainKeyVaultCertificateIdsB*" A list of KeyVault certificates resource IDs (minimum of three and up to a maximum of 10) to activate this Managed HSM. More information see [activate-your-managed-hsm](https://learn.microsoft.com/azure/key-vault/managed-hsm/quick-create-cli#activate-your-managed-hsm)
"ï
securityDomainQuorumB ÐSpecifies the minimum number of shares required to decrypt the security domain for recovery. This is required when `security_domain_key_vault_certificate_ids` is specified. Valid values are between 2 and 10.
"²
skuName" ¢The Name of the SKU used for this Key Vault Managed Hardware Security Module. Possible value is `Standard_B1`. Changing this forces a new resource to be created.
"Ü
softDeleteRetentionDaysB ºThe number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` days. Defaults to `90`. Changing this forces a new resource to be created.
"=
tagsB2" -A mapping of tags to assign to the resource.
"Ì
tenantId" »The Azure Active Directory Tenant ID that should be used for authenticating requests to the key vault Managed Hardware Security Module. Changing this forces a new resource to be created.
*4
~
keyvault ManagedHardwareSecurityModuleKeyPazure:keyvault/managedHardwareSecurityModuleKey:ManagedHardwareSecurityModuleKeyëManages a Key Vault Managed Hardware Security Module Key.

> **Note:** The Azure Provider includes a Feature Toggle which will purge a Key Vault Managed Hardware Security Module Key resource on destroy, rather than the default soft-delete. See `purge_soft_deleted_hardware_security_modules_on_destroy` for more information.

<!--Start PulumiCodeChooser -->
```yaml
resources:
  example:
    type: azure:keyvault:ManagedHardwareSecurityModule
    properties:
      name: example
      resourceGroupName: ${exampleAzurermResourceGroup.name}
      location: ${exampleAzurermResourceGroup.location}
      skuName: Standard_B1
      tenantId: ${current.tenantId}
      adminObjectIds:
        - ${current.objectId}
      purgeProtectionEnabled: false
      activeConfig:
        - securityDomainCertificate:
            - ${cert[0].id}
            - ${cert[1].id}
            - ${cert[2].id}
          securityDomainQuorum: 2
  # this gives your service principal the HSM Crypto User role which lets you create and destroy hsm keys
  hsm-crypto-user:
    type: azure:keyvault:ManagedHardwareSecurityModuleRoleAssignment
    properties:
      managedHsmId: ${test.id}
      name: 1e243909-064c-6ac3-84e9-1c8bf8d6ad22
      scope: /keys
      roleDefinitionId: /Microsoft.KeyVault/providers/Microsoft.Authorization/roleDefinitions/21dbd100-6940-42c2-9190-5d6cb909625b
      principalId: ${current.objectId}
  # this gives your service principal the HSM Crypto Officer role which lets you purge hsm keys
  hsm-crypto-officer:
    type: azure:keyvault:ManagedHardwareSecurityModuleRoleAssignment
    properties:
      managedHsmId: ${test.id}
      name: 1e243909-064c-6ac3-84e9-1c8bf8d6ad23
      scope: /keys
      roleDefinitionId: /Microsoft.KeyVault/providers/Microsoft.Authorization/roleDefinitions/515eb02d-2335-4d2d-92f2-b1cbdf9c3778
      principalId: ${current.objectId}
  exampleManagedHardwareSecurityModuleKey:
    type: azure:keyvault:ManagedHardwareSecurityModuleKey
    name: example
    properties:
      name: example
      managedHsmId: ${test.id}
      keyType: EC-HSM
      curve: P-521
      keyOpts:
        - sign
    options:
      dependsOn:
        - ${testAzurermKeyVaultManagedHardwareSecurityModuleRoleAssignment}
        - ${test1}
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Key Vault Managed Hardware Security Module Key can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/managedHardwareSecurityModuleKey:ManagedHardwareSecurityModuleKey example https://exampleHSM.managedhsm.azure.net/keys/exampleKey
```

ì
curveB" ÜSpecifies the curve to use when creating an `EC-HSM` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field is required if `key_type` is `EC-HSM`. Changing this forces a new resource to be created.
ÿ
expirationDateB" æExpiration UTC datetime (Y-m-d'T'H:M:S'Z'). When this parameter gets changed on reruns, if newer date is ahead of current date, an update is performed. If the newer date is before the current date, resource will be force created.
¾
keyOpts*" ¬A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case-sensitive.
Þ
keySizeB ÌSpecifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `key_type` is `RSA-HSM` or `oct-HSM`. Changing this forces a new resource to be created.
Î
keyType" ¾Specifies the Key Type to use for this Key Vault Managed Hardware Security Module Key. Possible values are `EC-HSM`, `oct-HSM` and `RSA-HSM`. More details see [HSM-protected keys](https://learn.microsoft.com/en-us/azure/key-vault/keys/about-keys#hsm-protected-keys). Changing this forces a new resource to be created.
«
managedHsmId" Specifies the ID of the Key Vault Managed Hardware Security Module that they key will be owned by. Changing this forces a new resource to be created.

nameB" }Specifies the name of the Key Vault Managed Hardware Security Module Key. Changing this forces a new resource to be created.

notBeforeDateB" ñKey not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').

> **Note:** Once `expiration_date` is set, it's not possible to unset the key even if it is deleted & recreated as underlying Azure API uses the restore of the purged key.
=
tagsB2" -A mapping of tags to assign to the resource.
"ì
curveB" ÜSpecifies the curve to use when creating an `EC-HSM` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field is required if `key_type` is `EC-HSM`. Changing this forces a new resource to be created.
"ÿ
expirationDateB" æExpiration UTC datetime (Y-m-d'T'H:M:S'Z'). When this parameter gets changed on reruns, if newer date is ahead of current date, an update is performed. If the newer date is before the current date, resource will be force created.
"¾
keyOpts*" ¬A list of JSON web key operations. Possible values include: `decrypt`, `encrypt`, `sign`, `unwrapKey`, `verify` and `wrapKey`. Please note these values are case-sensitive.
"Þ
keySizeB ÌSpecifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `key_type` is `RSA-HSM` or `oct-HSM`. Changing this forces a new resource to be created.
"Î
keyType" ¾Specifies the Key Type to use for this Key Vault Managed Hardware Security Module Key. Possible values are `EC-HSM`, `oct-HSM` and `RSA-HSM`. More details see [HSM-protected keys](https://learn.microsoft.com/en-us/azure/key-vault/keys/about-keys#hsm-protected-keys). Changing this forces a new resource to be created.
"«
managedHsmId" Specifies the ID of the Key Vault Managed Hardware Security Module that they key will be owned by. Changing this forces a new resource to be created.
"
name" }Specifies the name of the Key Vault Managed Hardware Security Module Key. Changing this forces a new resource to be created.
"
notBeforeDateB" ñKey not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').

> **Note:** Once `expiration_date` is set, it's not possible to unset the key even if it is deleted & recreated as underlying Azure API uses the restore of the purged key.
"=
tagsB2" -A mapping of tags to assign to the resource.
"[
versionedId" HThe versioned Key Vault Secret Managed Hardware Security Module Key ID.
*ñ6
¨
keyvault.ManagedHardwareSecurityModuleKeyRotationPolicylazure:keyvault/managedHardwareSecurityModuleKeyRotationPolicy:ManagedHardwareSecurityModuleKeyRotationPolicyû(Manages a Managed HSM Key rotation policy.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = new azure.keyvault.ManagedHardwareSecurityModuleKey("example", {
    name: "example-key",
    managedHsmId: exampleAzurermKeyVaultManagedHardwareSecurityModule.id,
    keyType: "EC-HSM",
    curve: "P-521",
    keyOpts: ["sign"],
});
const exampleManagedHardwareSecurityModuleKeyRotationPolicy = new azure.keyvault.ManagedHardwareSecurityModuleKeyRotationPolicy("example", {
    managedHsmKeyId: example.id,
    expireAfter: "P60D",
    timeBeforeExpiry: "P30D",
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.keyvault.ManagedHardwareSecurityModuleKey("example",
    name="example-key",
    managed_hsm_id=example_azurerm_key_vault_managed_hardware_security_module["id"],
    key_type="EC-HSM",
    curve="P-521",
    key_opts=["sign"])
example_managed_hardware_security_module_key_rotation_policy = azure.keyvault.ManagedHardwareSecurityModuleKeyRotationPolicy("example",
    managed_hsm_key_id=example.id,
    expire_after="P60D",
    time_before_expiry="P30D")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = new Azure.KeyVault.ManagedHardwareSecurityModuleKey("example", new()
    {
        Name = "example-key",
        ManagedHsmId = exampleAzurermKeyVaultManagedHardwareSecurityModule.Id,
        KeyType = "EC-HSM",
        Curve = "P-521",
        KeyOpts = new[]
        {
            "sign",
        },
    });

    var exampleManagedHardwareSecurityModuleKeyRotationPolicy = new Azure.KeyVault.ManagedHardwareSecurityModuleKeyRotationPolicy("example", new()
    {
        ManagedHsmKeyId = example.Id,
        ExpireAfter = "P60D",
        TimeBeforeExpiry = "P30D",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := keyvault.NewManagedHardwareSecurityModuleKey(ctx, "example", &keyvault.ManagedHardwareSecurityModuleKeyArgs{
			Name:         pulumi.String("example-key"),
			ManagedHsmId: pulumi.Any(exampleAzurermKeyVaultManagedHardwareSecurityModule.Id),
			KeyType:      pulumi.String("EC-HSM"),
			Curve:        pulumi.String("P-521"),
			KeyOpts: pulumi.StringArray{
				pulumi.String("sign"),
			},
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewManagedHardwareSecurityModuleKeyRotationPolicy(ctx, "example", &keyvault.ManagedHardwareSecurityModuleKeyRotationPolicyArgs{
			ManagedHsmKeyId:  example.ID(),
			ExpireAfter:      pulumi.String("P60D"),
			TimeBeforeExpiry: pulumi.String("P30D"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.keyvault.ManagedHardwareSecurityModuleKey;
import com.pulumi.azure.keyvault.ManagedHardwareSecurityModuleKeyArgs;
import com.pulumi.azure.keyvault.ManagedHardwareSecurityModuleKeyRotationPolicy;
import com.pulumi.azure.keyvault.ManagedHardwareSecurityModuleKeyRotationPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new ManagedHardwareSecurityModuleKey("example", ManagedHardwareSecurityModuleKeyArgs.builder()
            .name("example-key")
            .managedHsmId(exampleAzurermKeyVaultManagedHardwareSecurityModule.id())
            .keyType("EC-HSM")
            .curve("P-521")
            .keyOpts("sign")
            .build());

        var exampleManagedHardwareSecurityModuleKeyRotationPolicy = new ManagedHardwareSecurityModuleKeyRotationPolicy("exampleManagedHardwareSecurityModuleKeyRotationPolicy", ManagedHardwareSecurityModuleKeyRotationPolicyArgs.builder()
            .managedHsmKeyId(example.id())
            .expireAfter("P60D")
            .timeBeforeExpiry("P30D")
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:keyvault:ManagedHardwareSecurityModuleKey
    properties:
      name: example-key
      managedHsmId: ${exampleAzurermKeyVaultManagedHardwareSecurityModule.id}
      keyType: EC-HSM
      curve: P-521
      keyOpts:
        - sign
  exampleManagedHardwareSecurityModuleKeyRotationPolicy:
    type: azure:keyvault:ManagedHardwareSecurityModuleKeyRotationPolicy
    name: example
    properties:
      managedHsmKeyId: ${example.id}
      expireAfter: P60D
      timeBeforeExpiry: P30D
```
<!--End PulumiCodeChooser -->

## Import

Managed HSM Key rotation policy can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/managedHardwareSecurityModuleKeyRotationPolicy:ManagedHardwareSecurityModuleKeyRotationPolicy example https://example-hsm.managedhsm.azure.net/keys/example
```

¸
expireAfter" ¤Specify the expiration duration on a newly rotated key as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `P28D`.

managedHsmKeyId" iThe ID of the Managed HSM Key. Changing this forces a new Managed HSM Key rotation policy to be created.
ñ
timeAfterCreationB" ÕRotate automatically at a duration after key creation as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `time_after_creation` or `time_before_expiry` should be specified.
ï
timeBeforeExpiryB" ÔRotate automatically at a duration before key expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `time_after_creation` or `time_before_expiry` should be specified.
"¸
expireAfter" ¤Specify the expiration duration on a newly rotated key as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `P28D`.
"
managedHsmKeyId" iThe ID of the Managed HSM Key. Changing this forces a new Managed HSM Key rotation policy to be created.
"ñ
timeAfterCreationB" ÕRotate automatically at a duration after key creation as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `time_after_creation` or `time_before_expiry` should be specified.
"ï
timeBeforeExpiryB" ÔRotate automatically at a duration before key expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `time_after_creation` or `time_before_expiry` should be specified.
*

keyvault+ManagedHardwareSecurityModuleRoleAssignmentfazure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignmentûManages a Managed Hardware Security Module Role Assignment.

## Import

Managed Hardware Security Modules can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignment example https://0000.managedhsm.azure.net///RoleAssignment/00000000-0000-0000-0000-000000000000
```


managedHsmId" The ID of a Managed Hardware Security Module resource. Changing this forces a new Managed Hardware Security Module to be created.
*
Ä
nameB" µThe name in GUID notation which should be used for this Managed Hardware Security Module Role Assignment. Changing this forces a new Managed Hardware Security Module to be created.
Ë
principalId" ·The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new Managed Hardware Security Module to be created.

roleDefinitionId" }The resource ID of the role definition to assign. Changing this forces a new Managed Hardware Security Module to be created.

scope" ~Specifies the scope to create the role assignment. Changing this forces a new Managed Hardware Security Module to be created.
"
managedHsmId" The ID of a Managed Hardware Security Module resource. Changing this forces a new Managed Hardware Security Module to be created.
*
"Â
name" µThe name in GUID notation which should be used for this Managed Hardware Security Module Role Assignment. Changing this forces a new Managed Hardware Security Module to be created.
"Ë
principalId" ·The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new Managed Hardware Security Module to be created.
"O

resourceId" =(Deprecated) The resource id of created assignment resource.
"
roleDefinitionId" }The resource ID of the role definition to assign. Changing this forces a new Managed Hardware Security Module to be created.
"
scope" ~Specifies the scope to create the role assignment. Changing this forces a new Managed Hardware Security Module to be created.
*Ö

keyvault+ManagedHardwareSecurityModuleRoleDefinitionfazure:keyvault/managedHardwareSecurityModuleRoleDefinition:ManagedHardwareSecurityModuleRoleDefinition¹Manages a KeyVault Managed Hardware Security Module Role Definition. This resource works together with Managed hardware security module resource.

## Example Usage

<!--Start PulumiCodeChooser -->
```yaml
resources:
  example:
    type: azure:keyvault:ManagedHardwareSecurityModule
    properties:
      name: example
      resourceGroupName: ${exampleAzurermResourceGroup.name}
      location: ${exampleAzurermResourceGroup.location}
      skuName: Standard_B1
      tenantId: ${current.tenantId}
      adminObjectIds:
        - ${current.objectId}
      purgeProtectionEnabled: false
      activeConfig:
        - securityDomainCertificate:
            - ${cert[0].id}
            - ${cert[1].id}
            - ${cert[2].id}
          securityDomainQuorum: 2
  exampleManagedHardwareSecurityModuleRoleDefinition:
    type: azure:keyvault:ManagedHardwareSecurityModuleRoleDefinition
    name: example
    properties:
      name: 7d206142-bf01-11ed-80bc-00155d61ee9e
      vaultBaseUrl: ${example.hsmUri}
      description: desc foo
      permissions:
        - dataActions:
            - Microsoft.KeyVault/managedHsm/keys/read/action
```
<!--End PulumiCodeChooser -->

## Import

KeyVaults can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/managedHardwareSecurityModuleRoleDefinition:ManagedHardwareSecurityModuleRoleDefinition example https://0000.managedhsm.azure.net///RoleDefinition/00000000-0000-0000-0000-000000000000
```

W
descriptionB" BSpecifies a text description about this KeyVault Role Definition.

managedHsmId" 
nameB" The name which should be used for this KeyVault Role Definition. Changing this forces a new KeyVault Role Definition to be created.

permissionsÉBÆ*Ã:À
½
keyvault5ManagedHardwareSecurityModuleRoleDefinitionPermissionzazure:keyvault/ManagedHardwareSecurityModuleRoleDefinitionPermission:ManagedHardwareSecurityModuleRoleDefinitionPermission2One or more `permission` blocks as defined below.
D
roleNameB" 2Specify a name for this KeyVault Role Definition.
"W
descriptionB" BSpecifies a text description about this KeyVault Role Definition.
"
managedHsmId" "
name" The name which should be used for this KeyVault Role Definition. Changing this forces a new KeyVault Role Definition to be created.
"
permissionsÉBÆ*Ã:À
½
keyvault5ManagedHardwareSecurityModuleRoleDefinitionPermissionzazure:keyvault/ManagedHardwareSecurityModuleRoleDefinitionPermission:ManagedHardwareSecurityModuleRoleDefinitionPermission2One or more `permission` blocks as defined below.
"\
resourceManagerId" CThe ID of the role definition resource without Key Vault base URL.
"D
roleNameB" 2Specify a name for this KeyVault Role Definition.
"h
roleType" XThe type of the role definition. Possible values are `AKVBuiltInRole` and `CustomRole`.
*Ýé
]
keyvaultManagedStorageAccount:azure:keyvault/managedStorageAccount:ManagedStorageAccountð×Manages a Key Vault Managed Storage Account.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const current = azure.core.getClientConfig({});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "storageaccountname",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "keyvaultname",
    location: example.location,
    resourceGroupName: example.name,
    tenantId: current.then(current => current.tenantId),
    skuName: "standard",
    accessPolicies: [{
        tenantId: current.then(current => current.tenantId),
        objectId: current.then(current => current.objectId),
        secretPermissions: [
            "Get",
            "Delete",
        ],
        storagePermissions: [
            "Get",
            "List",
            "Set",
            "SetSAS",
            "GetSAS",
            "DeleteSAS",
            "Update",
            "RegenerateKey",
        ],
    }],
});
const exampleManagedStorageAccount = new azure.keyvault.ManagedStorageAccount("example", {
    name: "examplemanagedstorage",
    keyVaultId: exampleKeyVault.id,
    storageAccountId: exampleAccount.id,
    storageAccountKey: "key1",
    regenerateKeyAutomatically: false,
    regenerationPeriod: "P1D",
});
```
```python
import pulumi
import pulumi_azure as azure

current = azure.core.get_client_config()
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="storageaccountname",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_key_vault = azure.keyvault.KeyVault("example",
    name="keyvaultname",
    location=example.location,
    resource_group_name=example.name,
    tenant_id=current.tenant_id,
    sku_name="standard",
    access_policies=[{
        "tenant_id": current.tenant_id,
        "object_id": current.object_id,
        "secret_permissions": [
            "Get",
            "Delete",
        ],
        "storage_permissions": [
            "Get",
            "List",
            "Set",
            "SetSAS",
            "GetSAS",
            "DeleteSAS",
            "Update",
            "RegenerateKey",
        ],
    }])
example_managed_storage_account = azure.keyvault.ManagedStorageAccount("example",
    name="examplemanagedstorage",
    key_vault_id=example_key_vault.id,
    storage_account_id=example_account.id,
    storage_account_key="key1",
    regenerate_key_automatically=False,
    regeneration_period="P1D")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "storageaccountname",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "keyvaultname",
        Location = example.Location,
        ResourceGroupName = example.Name,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SkuName = "standard",
        AccessPolicies = new[]
        {
            new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
            {
                TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
                ObjectId = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
                SecretPermissions = new[]
                {
                    "Get",
                    "Delete",
                },
                StoragePermissions = new[]
                {
                    "Get",
                    "List",
                    "Set",
                    "SetSAS",
                    "GetSAS",
                    "DeleteSAS",
                    "Update",
                    "RegenerateKey",
                },
            },
        },
    });

    var exampleManagedStorageAccount = new Azure.KeyVault.ManagedStorageAccount("example", new()
    {
        Name = "examplemanagedstorage",
        KeyVaultId = exampleKeyVault.Id,
        StorageAccountId = exampleAccount.Id,
        StorageAccountKey = "key1",
        RegenerateKeyAutomatically = false,
        RegenerationPeriod = "P1D",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("storageaccountname"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:              pulumi.String("keyvaultname"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			TenantId:          pulumi.String(current.TenantId),
			SkuName:           pulumi.String("standard"),
			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
				&keyvault.KeyVaultAccessPolicyArgs{
					TenantId: pulumi.String(current.TenantId),
					ObjectId: pulumi.String(current.ObjectId),
					SecretPermissions: pulumi.StringArray{
						pulumi.String("Get"),
						pulumi.String("Delete"),
					},
					StoragePermissions: pulumi.StringArray{
						pulumi.String("Get"),
						pulumi.String("List"),
						pulumi.String("Set"),
						pulumi.String("SetSAS"),
						pulumi.String("GetSAS"),
						pulumi.String("DeleteSAS"),
						pulumi.String("Update"),
						pulumi.String("RegenerateKey"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewManagedStorageAccount(ctx, "example", &keyvault.ManagedStorageAccountArgs{
			Name:                       pulumi.String("examplemanagedstorage"),
			KeyVaultId:                 exampleKeyVault.ID(),
			StorageAccountId:           exampleAccount.ID(),
			StorageAccountKey:          pulumi.String("key1"),
			RegenerateKeyAutomatically: pulumi.Bool(false),
			RegenerationPeriod:         pulumi.String("P1D"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
import com.pulumi.azure.keyvault.ManagedStorageAccount;
import com.pulumi.azure.keyvault.ManagedStorageAccountArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("storageaccountname")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("keyvaultname")
            .location(example.location())
            .resourceGroupName(example.name())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .skuName("standard")
            .accessPolicies(KeyVaultAccessPolicyArgs.builder()
                .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
                .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
                .secretPermissions(                
                    "Get",
                    "Delete")
                .storagePermissions(                
                    "Get",
                    "List",
                    "Set",
                    "SetSAS",
                    "GetSAS",
                    "DeleteSAS",
                    "Update",
                    "RegenerateKey")
                .build())
            .build());

        var exampleManagedStorageAccount = new ManagedStorageAccount("exampleManagedStorageAccount", ManagedStorageAccountArgs.builder()
            .name("examplemanagedstorage")
            .keyVaultId(exampleKeyVault.id())
            .storageAccountId(exampleAccount.id())
            .storageAccountKey("key1")
            .regenerateKeyAutomatically(false)
            .regenerationPeriod("P1D")
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: storageaccountname
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: keyvaultname
      location: ${example.location}
      resourceGroupName: ${example.name}
      tenantId: ${current.tenantId}
      skuName: standard
      accessPolicies:
        - tenantId: ${current.tenantId}
          objectId: ${current.objectId}
          secretPermissions:
            - Get
            - Delete
          storagePermissions:
            - Get
            - List
            - Set
            - SetSAS
            - GetSAS
            - DeleteSAS
            - Update
            - RegenerateKey
  exampleManagedStorageAccount:
    type: azure:keyvault:ManagedStorageAccount
    name: example
    properties:
      name: examplemanagedstorage
      keyVaultId: ${exampleKeyVault.id}
      storageAccountId: ${exampleAccount.id}
      storageAccountKey: key1
      regenerateKeyAutomatically: false
      regenerationPeriod: P1D
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->


### Automatically Regenerate Storage Account Access Key)

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";
import * as azuread from "@pulumi/azuread";

const current = azure.core.getClientConfig({});
const test = azuread.getServicePrincipal({
    applicationId: "cfa8b339-82a2-471a-a3c9-0fc0be7a4093",
});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "storageaccountname",
    resourceGroupName: example.name,
    location: example.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "keyvaultname",
    location: example.location,
    resourceGroupName: example.name,
    tenantId: current.then(current => current.tenantId),
    skuName: "standard",
    accessPolicies: [{
        tenantId: current.then(current => current.tenantId),
        objectId: current.then(current => current.objectId),
        secretPermissions: [
            "Get",
            "Delete",
        ],
        storagePermissions: [
            "Get",
            "List",
            "Set",
            "SetSAS",
            "GetSAS",
            "DeleteSAS",
            "Update",
            "RegenerateKey",
        ],
    }],
});
const exampleAssignment = new azure.authorization.Assignment("example", {
    scope: exampleAccount.id,
    roleDefinitionName: "Storage Account Key Operator Service Role",
    principalId: test.then(test => test.id),
});
const exampleManagedStorageAccount = new azure.keyvault.ManagedStorageAccount("example", {
    name: "examplemanagedstorage",
    keyVaultId: exampleKeyVault.id,
    storageAccountId: exampleAccount.id,
    storageAccountKey: "key1",
    regenerateKeyAutomatically: true,
    regenerationPeriod: "P1D",
}, {
    dependsOn: [exampleAssignment],
});
```
```python
import pulumi
import pulumi_azure as azure
import pulumi_azuread as azuread

current = azure.core.get_client_config()
test = azuread.get_service_principal(application_id="cfa8b339-82a2-471a-a3c9-0fc0be7a4093")
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="storageaccountname",
    resource_group_name=example.name,
    location=example.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_key_vault = azure.keyvault.KeyVault("example",
    name="keyvaultname",
    location=example.location,
    resource_group_name=example.name,
    tenant_id=current.tenant_id,
    sku_name="standard",
    access_policies=[{
        "tenant_id": current.tenant_id,
        "object_id": current.object_id,
        "secret_permissions": [
            "Get",
            "Delete",
        ],
        "storage_permissions": [
            "Get",
            "List",
            "Set",
            "SetSAS",
            "GetSAS",
            "DeleteSAS",
            "Update",
            "RegenerateKey",
        ],
    }])
example_assignment = azure.authorization.Assignment("example",
    scope=example_account.id,
    role_definition_name="Storage Account Key Operator Service Role",
    principal_id=test.id)
example_managed_storage_account = azure.keyvault.ManagedStorageAccount("example",
    name="examplemanagedstorage",
    key_vault_id=example_key_vault.id,
    storage_account_id=example_account.id,
    storage_account_key="key1",
    regenerate_key_automatically=True,
    regeneration_period="P1D",
    opts = pulumi.ResourceOptions(depends_on=[example_assignment]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;
using AzureAD = Pulumi.AzureAD;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var test = AzureAD.GetServicePrincipal.Invoke(new()
    {
        ApplicationId = "cfa8b339-82a2-471a-a3c9-0fc0be7a4093",
    });

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "storageaccountname",
        ResourceGroupName = example.Name,
        Location = example.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "keyvaultname",
        Location = example.Location,
        ResourceGroupName = example.Name,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SkuName = "standard",
        AccessPolicies = new[]
        {
            new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
            {
                TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
                ObjectId = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
                SecretPermissions = new[]
                {
                    "Get",
                    "Delete",
                },
                StoragePermissions = new[]
                {
                    "Get",
                    "List",
                    "Set",
                    "SetSAS",
                    "GetSAS",
                    "DeleteSAS",
                    "Update",
                    "RegenerateKey",
                },
            },
        },
    });

    var exampleAssignment = new Azure.Authorization.Assignment("example", new()
    {
        Scope = exampleAccount.Id,
        RoleDefinitionName = "Storage Account Key Operator Service Role",
        PrincipalId = test.Apply(getServicePrincipalResult => getServicePrincipalResult.Id),
    });

    var exampleManagedStorageAccount = new Azure.KeyVault.ManagedStorageAccount("example", new()
    {
        Name = "examplemanagedstorage",
        KeyVaultId = exampleKeyVault.Id,
        StorageAccountId = exampleAccount.Id,
        StorageAccountKey = "key1",
        RegenerateKeyAutomatically = true,
        RegenerationPeriod = "P1D",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            exampleAssignment,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/authorization"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		test, err := azuread.LookupServicePrincipal(ctx, &azuread.LookupServicePrincipalArgs{
			ApplicationId: pulumi.StringRef("cfa8b339-82a2-471a-a3c9-0fc0be7a4093"),
		}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("storageaccountname"),
			ResourceGroupName:      example.Name,
			Location:               example.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:              pulumi.String("keyvaultname"),
			Location:          example.Location,
			ResourceGroupName: example.Name,
			TenantId:          pulumi.String(current.TenantId),
			SkuName:           pulumi.String("standard"),
			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
				&keyvault.KeyVaultAccessPolicyArgs{
					TenantId: pulumi.String(current.TenantId),
					ObjectId: pulumi.String(current.ObjectId),
					SecretPermissions: pulumi.StringArray{
						pulumi.String("Get"),
						pulumi.String("Delete"),
					},
					StoragePermissions: pulumi.StringArray{
						pulumi.String("Get"),
						pulumi.String("List"),
						pulumi.String("Set"),
						pulumi.String("SetSAS"),
						pulumi.String("GetSAS"),
						pulumi.String("DeleteSAS"),
						pulumi.String("Update"),
						pulumi.String("RegenerateKey"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		exampleAssignment, err := authorization.NewAssignment(ctx, "example", &authorization.AssignmentArgs{
			Scope:              exampleAccount.ID(),
			RoleDefinitionName: pulumi.String("Storage Account Key Operator Service Role"),
			PrincipalId:        pulumi.String(test.Id),
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewManagedStorageAccount(ctx, "example", &keyvault.ManagedStorageAccountArgs{
			Name:                       pulumi.String("examplemanagedstorage"),
			KeyVaultId:                 exampleKeyVault.ID(),
			StorageAccountId:           exampleAccount.ID(),
			StorageAccountKey:          pulumi.String("key1"),
			RegenerateKeyAutomatically: pulumi.Bool(true),
			RegenerationPeriod:         pulumi.String("P1D"),
		}, pulumi.DependsOn([]pulumi.Resource{
			exampleAssignment,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azuread.AzureadFunctions;
import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
import com.pulumi.azure.authorization.Assignment;
import com.pulumi.azure.authorization.AssignmentArgs;
import com.pulumi.azure.keyvault.ManagedStorageAccount;
import com.pulumi.azure.keyvault.ManagedStorageAccountArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        final var test = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
            .applicationId("cfa8b339-82a2-471a-a3c9-0fc0be7a4093")
            .build());

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("storageaccountname")
            .resourceGroupName(example.name())
            .location(example.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("keyvaultname")
            .location(example.location())
            .resourceGroupName(example.name())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .skuName("standard")
            .accessPolicies(KeyVaultAccessPolicyArgs.builder()
                .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
                .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
                .secretPermissions(                
                    "Get",
                    "Delete")
                .storagePermissions(                
                    "Get",
                    "List",
                    "Set",
                    "SetSAS",
                    "GetSAS",
                    "DeleteSAS",
                    "Update",
                    "RegenerateKey")
                .build())
            .build());

        var exampleAssignment = new Assignment("exampleAssignment", AssignmentArgs.builder()
            .scope(exampleAccount.id())
            .roleDefinitionName("Storage Account Key Operator Service Role")
            .principalId(test.applyValue(getServicePrincipalResult -> getServicePrincipalResult.id()))
            .build());

        var exampleManagedStorageAccount = new ManagedStorageAccount("exampleManagedStorageAccount", ManagedStorageAccountArgs.builder()
            .name("examplemanagedstorage")
            .keyVaultId(exampleKeyVault.id())
            .storageAccountId(exampleAccount.id())
            .storageAccountKey("key1")
            .regenerateKeyAutomatically(true)
            .regenerationPeriod("P1D")
            .build(), CustomResourceOptions.builder()
                .dependsOn(exampleAssignment)
                .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: storageaccountname
      resourceGroupName: ${example.name}
      location: ${example.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: keyvaultname
      location: ${example.location}
      resourceGroupName: ${example.name}
      tenantId: ${current.tenantId}
      skuName: standard
      accessPolicies:
        - tenantId: ${current.tenantId}
          objectId: ${current.objectId}
          secretPermissions:
            - Get
            - Delete
          storagePermissions:
            - Get
            - List
            - Set
            - SetSAS
            - GetSAS
            - DeleteSAS
            - Update
            - RegenerateKey
  exampleAssignment:
    type: azure:authorization:Assignment
    name: example
    properties:
      scope: ${exampleAccount.id}
      roleDefinitionName: Storage Account Key Operator Service Role
      principalId: ${test.id}
  exampleManagedStorageAccount:
    type: azure:keyvault:ManagedStorageAccount
    name: example
    properties:
      name: examplemanagedstorage
      keyVaultId: ${exampleKeyVault.id}
      storageAccountId: ${exampleAccount.id}
      storageAccountKey: key1
      regenerateKeyAutomatically: true
      regenerationPeriod: P1D
    options:
      dependsOn:
        - ${exampleAssignment}
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
  test:
    fn::invoke:
      function: azuread:getServicePrincipal
      arguments:
        applicationId: cfa8b339-82a2-471a-a3c9-0fc0be7a4093
```
<!--End PulumiCodeChooser -->

## Import

Key Vault Managed Storage Accounts can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/managedStorageAccount:ManagedStorageAccount example https://example-keyvault.vault.azure.net/storage/exampleStorageAcc01
```



keyVaultId" The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.
¥
nameB" The name which should be used for this Key Vault Managed Storage Account. Changing this forces a new Key Vault Managed Storage Account to be created.
ð
regenerateKeyAutomaticallyB
 ËShould Storage Account access key be regenerated periodically?

> **NOTE:** Azure Key Vault application needs to have access to Storage Account for auto regeneration to work. Example can be found above.
¼
regenerationPeriodB" How often Storage Account access key should be regenerated. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
7
storageAccountId" The ID of the Storage Account.

storageAccountKey" fWhich Storage Account access key that is managed by Key Vault. Possible values are `key1` and `key2`.

tagsB2" A mapping of tags which should be assigned to the Key Vault Managed Storage Account. Changing this forces a new resource to be created.
"

keyVaultId" The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.
"£
name" The name which should be used for this Key Vault Managed Storage Account. Changing this forces a new Key Vault Managed Storage Account to be created.
"ð
regenerateKeyAutomaticallyB
 ËShould Storage Account access key be regenerated periodically?

> **NOTE:** Azure Key Vault application needs to have access to Storage Account for auto regeneration to work. Example can be found above.
"¼
regenerationPeriodB" How often Storage Account access key should be regenerated. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
"7
storageAccountId" The ID of the Storage Account.
"
storageAccountKey" fWhich Storage Account access key that is managed by Key Vault. Possible values are `key1` and `key2`.
"
tagsB2" A mapping of tags which should be assigned to the Key Vault Managed Storage Account. Changing this forces a new resource to be created.
*Ö³

keyvault'ManagedStorageAccountSasTokenDefinition^azure:keyvault/managedStorageAccountSasTokenDefinition:ManagedStorageAccountSasTokenDefinitionÈ¥Manages a Key Vault Managed Storage Account SAS Definition.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.core.getClientConfig({});
const exampleResourceGroup = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleAccount = new azure.storage.Account("example", {
    name: "storageaccountname",
    resourceGroupName: exampleResourceGroup.name,
    location: exampleResourceGroup.location,
    accountTier: "Standard",
    accountReplicationType: "LRS",
});
const exampleGetAccountSAS = azure.storage.getAccountSASOutput({
    connectionString: exampleAccount.primaryConnectionString,
    httpsOnly: true,
    resourceTypes: {
        service: true,
        container: false,
        object: false,
    },
    services: {
        blob: true,
        queue: false,
        table: false,
        file: false,
    },
    start: "2021-04-30T00:00:00Z",
    expiry: "2023-04-30T00:00:00Z",
    permissions: {
        read: true,
        write: true,
        "delete": false,
        list: false,
        add: true,
        create: true,
        update: false,
        process: false,
        tag: false,
        filter: false,
    },
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "example-keyvault",
    location: exampleResourceGroup.location,
    resourceGroupName: exampleResourceGroup.name,
    tenantId: example.then(example => example.tenantId),
    skuName: "standard",
    accessPolicies: [{
        tenantId: example.then(example => example.tenantId),
        objectId: example.then(example => example.objectId),
        secretPermissions: [
            "Get",
            "Delete",
        ],
        storagePermissions: [
            "Get",
            "List",
            "Set",
            "SetSAS",
            "GetSAS",
            "DeleteSAS",
            "Update",
            "RegenerateKey",
        ],
    }],
});
const exampleManagedStorageAccount = new azure.keyvault.ManagedStorageAccount("example", {
    name: "examplemanagedstorage",
    keyVaultId: exampleKeyVault.id,
    storageAccountId: exampleAccount.id,
    storageAccountKey: "key1",
    regenerateKeyAutomatically: false,
    regenerationPeriod: "P1D",
});
const exampleManagedStorageAccountSasTokenDefinition = new azure.keyvault.ManagedStorageAccountSasTokenDefinition("example", {
    name: "examplesasdefinition",
    validityPeriod: "P1D",
    managedStorageAccountId: exampleManagedStorageAccount.id,
    sasTemplateUri: exampleGetAccountSAS.apply(exampleGetAccountSAS => exampleGetAccountSAS.sas),
    sasType: "account",
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.core.get_client_config()
example_resource_group = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_account = azure.storage.Account("example",
    name="storageaccountname",
    resource_group_name=example_resource_group.name,
    location=example_resource_group.location,
    account_tier="Standard",
    account_replication_type="LRS")
example_get_account_sas = azure.storage.get_account_sas_output(connection_string=example_account.primary_connection_string,
    https_only=True,
    resource_types={
        "service": True,
        "container": False,
        "object": False,
    },
    services={
        "blob": True,
        "queue": False,
        "table": False,
        "file": False,
    },
    start="2021-04-30T00:00:00Z",
    expiry="2023-04-30T00:00:00Z",
    permissions={
        "read": True,
        "write": True,
        "delete": False,
        "list": False,
        "add": True,
        "create": True,
        "update": False,
        "process": False,
        "tag": False,
        "filter": False,
    })
example_key_vault = azure.keyvault.KeyVault("example",
    name="example-keyvault",
    location=example_resource_group.location,
    resource_group_name=example_resource_group.name,
    tenant_id=example.tenant_id,
    sku_name="standard",
    access_policies=[{
        "tenant_id": example.tenant_id,
        "object_id": example.object_id,
        "secret_permissions": [
            "Get",
            "Delete",
        ],
        "storage_permissions": [
            "Get",
            "List",
            "Set",
            "SetSAS",
            "GetSAS",
            "DeleteSAS",
            "Update",
            "RegenerateKey",
        ],
    }])
example_managed_storage_account = azure.keyvault.ManagedStorageAccount("example",
    name="examplemanagedstorage",
    key_vault_id=example_key_vault.id,
    storage_account_id=example_account.id,
    storage_account_key="key1",
    regenerate_key_automatically=False,
    regeneration_period="P1D")
example_managed_storage_account_sas_token_definition = azure.keyvault.ManagedStorageAccountSasTokenDefinition("example",
    name="examplesasdefinition",
    validity_period="P1D",
    managed_storage_account_id=example_managed_storage_account.id,
    sas_template_uri=example_get_account_sas.sas,
    sas_type="account")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.Core.GetClientConfig.Invoke();

    var exampleResourceGroup = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleAccount = new Azure.Storage.Account("example", new()
    {
        Name = "storageaccountname",
        ResourceGroupName = exampleResourceGroup.Name,
        Location = exampleResourceGroup.Location,
        AccountTier = "Standard",
        AccountReplicationType = "LRS",
    });

    var exampleGetAccountSAS = Azure.Storage.GetAccountSAS.Invoke(new()
    {
        ConnectionString = exampleAccount.PrimaryConnectionString,
        HttpsOnly = true,
        ResourceTypes = new Azure.Storage.Inputs.GetAccountSASResourceTypesInputArgs
        {
            Service = true,
            Container = false,
            Object = false,
        },
        Services = new Azure.Storage.Inputs.GetAccountSASServicesInputArgs
        {
            Blob = true,
            Queue = false,
            Table = false,
            File = false,
        },
        Start = "2021-04-30T00:00:00Z",
        Expiry = "2023-04-30T00:00:00Z",
        Permissions = new Azure.Storage.Inputs.GetAccountSASPermissionsInputArgs
        {
            Read = true,
            Write = true,
            Delete = false,
            List = false,
            Add = true,
            Create = true,
            Update = false,
            Process = false,
            Tag = false,
            Filter = false,
        },
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "example-keyvault",
        Location = exampleResourceGroup.Location,
        ResourceGroupName = exampleResourceGroup.Name,
        TenantId = example.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SkuName = "standard",
        AccessPolicies = new[]
        {
            new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
            {
                TenantId = example.Apply(getClientConfigResult => getClientConfigResult.TenantId),
                ObjectId = example.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
                SecretPermissions = new[]
                {
                    "Get",
                    "Delete",
                },
                StoragePermissions = new[]
                {
                    "Get",
                    "List",
                    "Set",
                    "SetSAS",
                    "GetSAS",
                    "DeleteSAS",
                    "Update",
                    "RegenerateKey",
                },
            },
        },
    });

    var exampleManagedStorageAccount = new Azure.KeyVault.ManagedStorageAccount("example", new()
    {
        Name = "examplemanagedstorage",
        KeyVaultId = exampleKeyVault.Id,
        StorageAccountId = exampleAccount.Id,
        StorageAccountKey = "key1",
        RegenerateKeyAutomatically = false,
        RegenerationPeriod = "P1D",
    });

    var exampleManagedStorageAccountSasTokenDefinition = new Azure.KeyVault.ManagedStorageAccountSasTokenDefinition("example", new()
    {
        Name = "examplesasdefinition",
        ValidityPeriod = "P1D",
        ManagedStorageAccountId = exampleManagedStorageAccount.Id,
        SasTemplateUri = exampleGetAccountSAS.Apply(getAccountSASResult => getAccountSASResult.Sas),
        SasType = "account",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
			Name:                   pulumi.String("storageaccountname"),
			ResourceGroupName:      exampleResourceGroup.Name,
			Location:               exampleResourceGroup.Location,
			AccountTier:            pulumi.String("Standard"),
			AccountReplicationType: pulumi.String("LRS"),
		})
		if err != nil {
			return err
		}
		exampleGetAccountSAS := storage.GetAccountSASOutput(ctx, storage.GetAccountSASOutputArgs{
			ConnectionString: exampleAccount.PrimaryConnectionString,
			HttpsOnly:        pulumi.Bool(true),
			ResourceTypes: &storage.GetAccountSASResourceTypesArgs{
				Service:   pulumi.Bool(true),
				Container: pulumi.Bool(false),
				Object:    pulumi.Bool(false),
			},
			Services: &storage.GetAccountSASServicesArgs{
				Blob:  pulumi.Bool(true),
				Queue: pulumi.Bool(false),
				Table: pulumi.Bool(false),
				File:  pulumi.Bool(false),
			},
			Start:  pulumi.String("2021-04-30T00:00:00Z"),
			Expiry: pulumi.String("2023-04-30T00:00:00Z"),
			Permissions: &storage.GetAccountSASPermissionsArgs{
				Read:    pulumi.Bool(true),
				Write:   pulumi.Bool(true),
				Delete:  pulumi.Bool(false),
				List:    pulumi.Bool(false),
				Add:     pulumi.Bool(true),
				Create:  pulumi.Bool(true),
				Update:  pulumi.Bool(false),
				Process: pulumi.Bool(false),
				Tag:     pulumi.Bool(false),
				Filter:  pulumi.Bool(false),
			},
		}, nil)
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:              pulumi.String("example-keyvault"),
			Location:          exampleResourceGroup.Location,
			ResourceGroupName: exampleResourceGroup.Name,
			TenantId:          pulumi.String(example.TenantId),
			SkuName:           pulumi.String("standard"),
			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
				&keyvault.KeyVaultAccessPolicyArgs{
					TenantId: pulumi.String(example.TenantId),
					ObjectId: pulumi.String(example.ObjectId),
					SecretPermissions: pulumi.StringArray{
						pulumi.String("Get"),
						pulumi.String("Delete"),
					},
					StoragePermissions: pulumi.StringArray{
						pulumi.String("Get"),
						pulumi.String("List"),
						pulumi.String("Set"),
						pulumi.String("SetSAS"),
						pulumi.String("GetSAS"),
						pulumi.String("DeleteSAS"),
						pulumi.String("Update"),
						pulumi.String("RegenerateKey"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		exampleManagedStorageAccount, err := keyvault.NewManagedStorageAccount(ctx, "example", &keyvault.ManagedStorageAccountArgs{
			Name:                       pulumi.String("examplemanagedstorage"),
			KeyVaultId:                 exampleKeyVault.ID(),
			StorageAccountId:           exampleAccount.ID(),
			StorageAccountKey:          pulumi.String("key1"),
			RegenerateKeyAutomatically: pulumi.Bool(false),
			RegenerationPeriod:         pulumi.String("P1D"),
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewManagedStorageAccountSasTokenDefinition(ctx, "example", &keyvault.ManagedStorageAccountSasTokenDefinitionArgs{
			Name:                    pulumi.String("examplesasdefinition"),
			ValidityPeriod:          pulumi.String("P1D"),
			ManagedStorageAccountId: exampleManagedStorageAccount.ID(),
			SasTemplateUri: pulumi.String(exampleGetAccountSAS.ApplyT(func(exampleGetAccountSAS storage.GetAccountSASResult) (*string, error) {
				return &exampleGetAccountSAS.Sas, nil
			}).(pulumi.StringPtrOutput)),
			SasType: pulumi.String("account"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.storage.Account;
import com.pulumi.azure.storage.AccountArgs;
import com.pulumi.azure.storage.StorageFunctions;
import com.pulumi.azure.storage.inputs.GetAccountSASArgs;
import com.pulumi.azure.storage.inputs.GetAccountSASResourceTypesArgs;
import com.pulumi.azure.storage.inputs.GetAccountSASServicesArgs;
import com.pulumi.azure.storage.inputs.GetAccountSASPermissionsArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
import com.pulumi.azure.keyvault.ManagedStorageAccount;
import com.pulumi.azure.keyvault.ManagedStorageAccountArgs;
import com.pulumi.azure.keyvault.ManagedStorageAccountSasTokenDefinition;
import com.pulumi.azure.keyvault.ManagedStorageAccountSasTokenDefinitionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = CoreFunctions.getClientConfig();

        var exampleResourceGroup = new ResourceGroup("exampleResourceGroup", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleAccount = new Account("exampleAccount", AccountArgs.builder()
            .name("storageaccountname")
            .resourceGroupName(exampleResourceGroup.name())
            .location(exampleResourceGroup.location())
            .accountTier("Standard")
            .accountReplicationType("LRS")
            .build());

        final var exampleGetAccountSAS = StorageFunctions.getAccountSAS(GetAccountSASArgs.builder()
            .connectionString(exampleAccount.primaryConnectionString())
            .httpsOnly(true)
            .resourceTypes(GetAccountSASResourceTypesArgs.builder()
                .service(true)
                .container(false)
                .object(false)
                .build())
            .services(GetAccountSASServicesArgs.builder()
                .blob(true)
                .queue(false)
                .table(false)
                .file(false)
                .build())
            .start("2021-04-30T00:00:00Z")
            .expiry("2023-04-30T00:00:00Z")
            .permissions(GetAccountSASPermissionsArgs.builder()
                .read(true)
                .write(true)
                .delete(false)
                .list(false)
                .add(true)
                .create(true)
                .update(false)
                .process(false)
                .tag(false)
                .filter(false)
                .build())
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("example-keyvault")
            .location(exampleResourceGroup.location())
            .resourceGroupName(exampleResourceGroup.name())
            .tenantId(example.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .skuName("standard")
            .accessPolicies(KeyVaultAccessPolicyArgs.builder()
                .tenantId(example.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
                .objectId(example.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
                .secretPermissions(                
                    "Get",
                    "Delete")
                .storagePermissions(                
                    "Get",
                    "List",
                    "Set",
                    "SetSAS",
                    "GetSAS",
                    "DeleteSAS",
                    "Update",
                    "RegenerateKey")
                .build())
            .build());

        var exampleManagedStorageAccount = new ManagedStorageAccount("exampleManagedStorageAccount", ManagedStorageAccountArgs.builder()
            .name("examplemanagedstorage")
            .keyVaultId(exampleKeyVault.id())
            .storageAccountId(exampleAccount.id())
            .storageAccountKey("key1")
            .regenerateKeyAutomatically(false)
            .regenerationPeriod("P1D")
            .build());

        var exampleManagedStorageAccountSasTokenDefinition = new ManagedStorageAccountSasTokenDefinition("exampleManagedStorageAccountSasTokenDefinition", ManagedStorageAccountSasTokenDefinitionArgs.builder()
            .name("examplesasdefinition")
            .validityPeriod("P1D")
            .managedStorageAccountId(exampleManagedStorageAccount.id())
            .sasTemplateUri(exampleGetAccountSAS.applyValue(getAccountSASResult -> getAccountSASResult).applyValue(exampleGetAccountSAS -> exampleGetAccountSAS.applyValue(getAccountSASResult -> getAccountSASResult.sas())))
            .sasType("account")
            .build());

    }
}
```
```yaml
resources:
  exampleResourceGroup:
    type: azure:core:ResourceGroup
    name: example
    properties:
      name: example-resources
      location: West Europe
  exampleAccount:
    type: azure:storage:Account
    name: example
    properties:
      name: storageaccountname
      resourceGroupName: ${exampleResourceGroup.name}
      location: ${exampleResourceGroup.location}
      accountTier: Standard
      accountReplicationType: LRS
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: example-keyvault
      location: ${exampleResourceGroup.location}
      resourceGroupName: ${exampleResourceGroup.name}
      tenantId: ${example.tenantId}
      skuName: standard
      accessPolicies:
        - tenantId: ${example.tenantId}
          objectId: ${example.objectId}
          secretPermissions:
            - Get
            - Delete
          storagePermissions:
            - Get
            - List
            - Set
            - SetSAS
            - GetSAS
            - DeleteSAS
            - Update
            - RegenerateKey
  exampleManagedStorageAccount:
    type: azure:keyvault:ManagedStorageAccount
    name: example
    properties:
      name: examplemanagedstorage
      keyVaultId: ${exampleKeyVault.id}
      storageAccountId: ${exampleAccount.id}
      storageAccountKey: key1
      regenerateKeyAutomatically: false
      regenerationPeriod: P1D
  exampleManagedStorageAccountSasTokenDefinition:
    type: azure:keyvault:ManagedStorageAccountSasTokenDefinition
    name: example
    properties:
      name: examplesasdefinition
      validityPeriod: P1D
      managedStorageAccountId: ${exampleManagedStorageAccount.id}
      sasTemplateUri: ${exampleGetAccountSAS.sas}
      sasType: account
variables:
  example:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
  exampleGetAccountSAS:
    fn::invoke:
      function: azure:storage:getAccountSAS
      arguments:
        connectionString: ${exampleAccount.primaryConnectionString}
        httpsOnly: true
        resourceTypes:
          service: true
          container: false
          object: false
        services:
          blob: true
          queue: false
          table: false
          file: false
        start: 2021-04-30T00:00:00Z
        expiry: 2023-04-30T00:00:00Z
        permissions:
          read: true
          write: true
          delete: false
          list: false
          add: true
          create: true
          update: false
          process: false
          tag: false
          filter: false
```
<!--End PulumiCodeChooser -->

## Import

Key Vaults can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/managedStorageAccountSasTokenDefinition:ManagedStorageAccountSasTokenDefinition example https://example-keyvault.vault.azure.net/storage/exampleStorageAcc01/sas/exampleSasDefinition01
```

F
managedStorageAccountId" 'The ID of the Managed Storage Account.
E
nameB" 7The name which should be used for this SAS Definition.
á
sasTemplateUri" ÊThe SAS definition token template signed with an arbitrary key. Tokens created according to the SAS definition will have the same properties as the template, but regenerated with a new validity period.
r
sasType" cThe type of SAS token the SAS definition will create. Possible values are `account` and `service`.

tagsB2" uA mapping of tags which should be assigned to the SAS Definition. Changing this forces a new resource to be created.

validityPeriod" Validity period of SAS token. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
"F
managedStorageAccountId" 'The ID of the Managed Storage Account.
"C
name" 7The name which should be used for this SAS Definition.
"á
sasTemplateUri" ÊThe SAS definition token template signed with an arbitrary key. Tokens created according to the SAS definition will have the same properties as the template, but regenerated with a new validity period.
"r
sasType" cThe type of SAS token the SAS definition will create. Possible values are `account` and `service`.
"`
secretId" PThe ID of the Secret that is created by Managed Storage Account SAS Definition.
"
tagsB2" uA mapping of tags which should be assigned to the SAS Definition. Changing this forces a new resource to be created.
"
validityPeriod" Validity period of SAS token. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
*¥Y
0
keyvaultSecretazure:keyvault/secret:Secret§FManages a Key Vault Secret.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const current = azure.core.getClientConfig({});
const example = new azure.core.ResourceGroup("example", {
    name: "example-resources",
    location: "West Europe",
});
const exampleKeyVault = new azure.keyvault.KeyVault("example", {
    name: "examplekeyvault",
    location: example.location,
    resourceGroupName: example.name,
    tenantId: current.then(current => current.tenantId),
    skuName: "premium",
    softDeleteRetentionDays: 7,
    accessPolicies: [{
        tenantId: current.then(current => current.tenantId),
        objectId: current.then(current => current.objectId),
        keyPermissions: [
            "Create",
            "Get",
        ],
        secretPermissions: [
            "Set",
            "Get",
            "Delete",
            "Purge",
            "Recover",
        ],
    }],
});
const exampleSecret = new azure.keyvault.Secret("example", {
    name: "secret-sauce",
    value: "szechuan",
    keyVaultId: exampleKeyVault.id,
});
```
```python
import pulumi
import pulumi_azure as azure

current = azure.core.get_client_config()
example = azure.core.ResourceGroup("example",
    name="example-resources",
    location="West Europe")
example_key_vault = azure.keyvault.KeyVault("example",
    name="examplekeyvault",
    location=example.location,
    resource_group_name=example.name,
    tenant_id=current.tenant_id,
    sku_name="premium",
    soft_delete_retention_days=7,
    access_policies=[{
        "tenant_id": current.tenant_id,
        "object_id": current.object_id,
        "key_permissions": [
            "Create",
            "Get",
        ],
        "secret_permissions": [
            "Set",
            "Get",
            "Delete",
            "Purge",
            "Recover",
        ],
    }])
example_secret = azure.keyvault.Secret("example",
    name="secret-sauce",
    value="szechuan",
    key_vault_id=example_key_vault.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var current = Azure.Core.GetClientConfig.Invoke();

    var example = new Azure.Core.ResourceGroup("example", new()
    {
        Name = "example-resources",
        Location = "West Europe",
    });

    var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    {
        Name = "examplekeyvault",
        Location = example.Location,
        ResourceGroupName = example.Name,
        TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
        SkuName = "premium",
        SoftDeleteRetentionDays = 7,
        AccessPolicies = new[]
        {
            new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
            {
                TenantId = current.Apply(getClientConfigResult => getClientConfigResult.TenantId),
                ObjectId = current.Apply(getClientConfigResult => getClientConfigResult.ObjectId),
                KeyPermissions = new[]
                {
                    "Create",
                    "Get",
                },
                SecretPermissions = new[]
                {
                    "Set",
                    "Get",
                    "Delete",
                    "Purge",
                    "Recover",
                },
            },
        },
    });

    var exampleSecret = new Azure.KeyVault.Secret("example", new()
    {
        Name = "secret-sauce",
        Value = "szechuan",
        KeyVaultId = exampleKeyVault.Id,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
			Name:     pulumi.String("example-resources"),
			Location: pulumi.String("West Europe"),
		})
		if err != nil {
			return err
		}
		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
			Name:                    pulumi.String("examplekeyvault"),
			Location:                example.Location,
			ResourceGroupName:       example.Name,
			TenantId:                pulumi.String(current.TenantId),
			SkuName:                 pulumi.String("premium"),
			SoftDeleteRetentionDays: pulumi.Int(7),
			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
				&keyvault.KeyVaultAccessPolicyArgs{
					TenantId: pulumi.String(current.TenantId),
					ObjectId: pulumi.String(current.ObjectId),
					KeyPermissions: pulumi.StringArray{
						pulumi.String("Create"),
						pulumi.String("Get"),
					},
					SecretPermissions: pulumi.StringArray{
						pulumi.String("Set"),
						pulumi.String("Get"),
						pulumi.String("Delete"),
						pulumi.String("Purge"),
						pulumi.String("Recover"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = keyvault.NewSecret(ctx, "example", &keyvault.SecretArgs{
			Name:       pulumi.String("secret-sauce"),
			Value:      pulumi.String("szechuan"),
			KeyVaultId: exampleKeyVault.ID(),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.core.CoreFunctions;
import com.pulumi.azure.core.ResourceGroup;
import com.pulumi.azure.core.ResourceGroupArgs;
import com.pulumi.azure.keyvault.KeyVault;
import com.pulumi.azure.keyvault.KeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.KeyVaultAccessPolicyArgs;
import com.pulumi.azure.keyvault.Secret;
import com.pulumi.azure.keyvault.SecretArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = CoreFunctions.getClientConfig();

        var example = new ResourceGroup("example", ResourceGroupArgs.builder()
            .name("example-resources")
            .location("West Europe")
            .build());

        var exampleKeyVault = new KeyVault("exampleKeyVault", KeyVaultArgs.builder()
            .name("examplekeyvault")
            .location(example.location())
            .resourceGroupName(example.name())
            .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
            .skuName("premium")
            .softDeleteRetentionDays(7)
            .accessPolicies(KeyVaultAccessPolicyArgs.builder()
                .tenantId(current.applyValue(getClientConfigResult -> getClientConfigResult.tenantId()))
                .objectId(current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()))
                .keyPermissions(                
                    "Create",
                    "Get")
                .secretPermissions(                
                    "Set",
                    "Get",
                    "Delete",
                    "Purge",
                    "Recover")
                .build())
            .build());

        var exampleSecret = new Secret("exampleSecret", SecretArgs.builder()
            .name("secret-sauce")
            .value("szechuan")
            .keyVaultId(exampleKeyVault.id())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: azure:core:ResourceGroup
    properties:
      name: example-resources
      location: West Europe
  exampleKeyVault:
    type: azure:keyvault:KeyVault
    name: example
    properties:
      name: examplekeyvault
      location: ${example.location}
      resourceGroupName: ${example.name}
      tenantId: ${current.tenantId}
      skuName: premium
      softDeleteRetentionDays: 7
      accessPolicies:
        - tenantId: ${current.tenantId}
          objectId: ${current.objectId}
          keyPermissions:
            - Create
            - Get
          secretPermissions:
            - Set
            - Get
            - Delete
            - Purge
            - Recover
  exampleSecret:
    type: azure:keyvault:Secret
    name: example
    properties:
      name: secret-sauce
      value: szechuan
      keyVaultId: ${exampleKeyVault.id}
variables:
  current:
    fn::invoke:
      function: azure:core:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Key Vault Secrets which are Enabled can be imported using the `resource id`, e.g.

```sh
$ pulumi import azure:keyvault/secret:Secret example "https://example-keyvault.vault.azure.net/secrets/example/fdf067c93bbb4b22bff4d8b7a9a56217"
```

J
contentTypeB" 5Specifies the content type for the Key Vault Secret.
D
expirationDateB" ,Expiration UTC datetime (Y-m-d'T'H:M:S'Z').


keyVaultId" oThe ID of the Key Vault where the Secret should be created. Changing this forces a new resource to be created.
m
nameB" _Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.
[
notBeforeDateB" DKey not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').
=
tagsB2" -A mapping of tags to assign to the resource.
ö
value" èSpecifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.

> **Note:** Key Vault strips newlines. To preserve newlines in multi-line secrets try replacing them with `\n` or by base 64 encoding them with `replace(file("my_secret_file"), "/\n/", "\n")` or `base64encode(file("my_secret_file"))`, respectively.
"J
contentTypeB" 5Specifies the content type for the Key Vault Secret.
"D
expirationDateB" ,Expiration UTC datetime (Y-m-d'T'H:M:S'Z').
"

keyVaultId" oThe ID of the Key Vault where the Secret should be created. Changing this forces a new resource to be created.
"k
name" _Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.
"[
notBeforeDateB" DKey not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').
"Ð

resourceId" ½The (Versioned) ID for this Key Vault Secret. This property points to a specific version of a Key Vault Secret, as such using this won't auto-rotate values if used in other Azure Services.
"Ç
resourceVersionlessId" ©The Versionless ID of the Key Vault Secret. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Secret is updated.
"=
tagsB2" -A mapping of tags to assign to the resource.
"ö
value" èSpecifies the value of the Key Vault Secret. Changing this will create a new version of the Key Vault Secret.

> **Note:** Key Vault strips newlines. To preserve newlines in multi-line secrets try replacing them with `\n` or by base 64 encoding them with `replace(file("my_secret_file"), "/\n/", "\n")` or `base64encode(file("my_secret_file"))`, respectively.
"<
version" -The current version of the Key Vault Secret.
":
versionlessId" %The Base ID of the Key Vault Secret.
2ì"
>
	hdinsight
getCluster%azure:hdinsight/getCluster:getClusterßUse this data source to access information about an existing HDInsight Cluster.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.hdinsight.getCluster({
    name: "example",
    resourceGroupName: "example-resources",
});
export const httpsEndpoint = example.then(example => example.httpsEndpoint);
export const clusterId = example.then(example => example.clusterId);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.hdinsight.get_cluster(name="example",
    resource_group_name="example-resources")
pulumi.export("httpsEndpoint", example.https_endpoint)
pulumi.export("clusterId", example.cluster_id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.HDInsight.GetCluster.Invoke(new()
    {
        Name = "example",
        ResourceGroupName = "example-resources",
    });

    return new Dictionary<string, object?>
    {
        ["httpsEndpoint"] = example.Apply(getClusterResult => getClusterResult.HttpsEndpoint),
        ["clusterId"] = example.Apply(getClusterResult => getClusterResult.ClusterId),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/hdinsight"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := hdinsight.GetCluster(ctx, &hdinsight.GetClusterArgs{
			Name:              "example",
			ResourceGroupName: "example-resources",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("httpsEndpoint", example.HttpsEndpoint)
		ctx.Export("clusterId", example.ClusterId)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.hdinsight.HdinsightFunctions;
import com.pulumi.azure.hdinsight.inputs.GetClusterArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = HdinsightFunctions.getCluster(GetClusterArgs.builder()
            .name("example")
            .resourceGroupName("example-resources")
            .build());

        ctx.export("httpsEndpoint", example.applyValue(getClusterResult -> getClusterResult.httpsEndpoint()));
        ctx.export("clusterId", example.applyValue(getClusterResult -> getClusterResult.clusterId()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:hdinsight:getCluster
      arguments:
        name: example
        resourceGroupName: example-resources
outputs:
  httpsEndpoint: ${example.httpsEndpoint}
  clusterId: ${example.clusterId}
```
<!--End PulumiCodeChooser -->
:
name" .Specifies the name of this HDInsight Cluster.
j
resourceGroupName" QSpecifies the name of the Resource Group in which this HDInsight Cluster exists.
"+
	clusterId" The HDInsight Cluster ID.
"Y
clusterVersion" CThe version of HDInsights which is used on this HDInsight Cluster.
"Z
componentVersions2" ?A map of versions of software used on this HDInsights Cluster.
"m
edgeSshEndpoint" VThe SSH Endpoint of the Edge Node for this HDInsight Cluster, if an Edge Node exists.
"
gatewaysY*W:U
S
	hdinsightgetClusterGateway3azure:hdinsight/getClusterGateway:getClusterGateway$A `gateway` block as defined below.
"D
httpsEndpoint" /The HTTPS Endpoint for this HDInsight Cluster.
"E
id" ;The provider-assigned unique ID for this managed resource.
"X
kafkaRestProxyEndpoint" :The Kafka Rest Proxy Endpoint for this HDInsight Cluster.
"U
kind" IThe kind of HDInsight Cluster this is, such as a Spark or Storm cluster.
"I
location" 9The Azure Region in which this HDInsight Cluster exists.
"(
name" The HDInsight Cluster name.
"
resourceGroupName" "@
sshEndpoint" -The SSH Endpoint for this HDInsight Cluster.
"?
tags2" 1A map of tags assigned to the HDInsight Cluster.
"6
tier" *The SKU / Tier of this HDInsight Cluster.
"8
tlsMinVersion" #The minimal supported TLS version.
2½
O

healthcaregetDicomService0azure:healthcare/getDicomService:getDicomService²Use this data source to access information about an existing Healthcare DICOM Service

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.healthcare.getDicomService({
    name: "example-healthcare_dicom_service",
    workspaceId: exampleAzurermHealthcareWorkspace.id,
});
export const azurermHealthcareDicomService = example.then(example => example.id);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.healthcare.get_dicom_service(name="example-healthcare_dicom_service",
    workspace_id=example_azurerm_healthcare_workspace["id"])
pulumi.export("azurermHealthcareDicomService", example.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.Healthcare.GetDicomService.Invoke(new()
    {
        Name = "example-healthcare_dicom_service",
        WorkspaceId = exampleAzurermHealthcareWorkspace.Id,
    });

    return new Dictionary<string, object?>
    {
        ["azurermHealthcareDicomService"] = example.Apply(getDicomServiceResult => getDicomServiceResult.Id),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/healthcare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := healthcare.LookupDicomService(ctx, &healthcare.LookupDicomServiceArgs{
			Name:        "example-healthcare_dicom_service",
			WorkspaceId: exampleAzurermHealthcareWorkspace.Id,
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("azurermHealthcareDicomService", example.Id)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.healthcare.HealthcareFunctions;
import com.pulumi.azure.healthcare.inputs.GetDicomServiceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = HealthcareFunctions.getDicomService(GetDicomServiceArgs.builder()
            .name("example-healthcare_dicom_service")
            .workspaceId(exampleAzurermHealthcareWorkspace.id())
            .build());

        ctx.export("azurermHealthcareDicomService", example.applyValue(getDicomServiceResult -> getDicomServiceResult.id()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:healthcare:getDicomService
      arguments:
        name: example-healthcare_dicom_service
        workspaceId: ${exampleAzurermHealthcareWorkspace.id}
outputs:
  azurermHealthcareDicomService: ${example.id}
```
<!--End PulumiCodeChooser -->
5
name" )The name of the Healthcare DICOM Service
d
workspaceId" QThe id of the Healthcare Workspace in which the Healthcare DICOM Service exists.
"Á
authentications*}:{
y

healthcaregetDicomServiceAuthenticationLazure:healthcare/getDicomServiceAuthentication:getDicomServiceAuthentication-The `authentication` block as defined below.
"E
id" ;The provider-assigned unique ID for this managed resource.
"{

identitiesm*k:i
g

healthcaregetDicomServiceIdentity@azure:healthcare/getDicomServiceIdentity:getDicomServiceIdentity"P
location" @The Azure Region where the Healthcare DICOM Service is located.
"

name" "
privateEndpoints*:~
|

healthcaregetDicomServicePrivateEndpointNazure:healthcare/getDicomServicePrivateEndpoint:getDicomServicePrivateEndpoint"<

serviceUrl" *The url of the Healthcare DICOM Services.
"F
tags2" 8A map of tags assigned to the Healthcare DICOM Service.
"
workspaceId" 2à
L

healthcaregetFhirService.azure:healthcare/getFhirService:getFhirServiceUse this data source to access information about an existing Healthcare FHIR Service(Fast Healthcare Interoperability Resources).

5
name" )The name of the Healthcare FHIR Service.
I
tagsB2" 9The map of tags assigned to the Healthcare FHIR Service.
c
workspaceId" PThe id of the Healthcare Workspace in which the Healthcare FHIR Service exists.
"X
accessPolicyObjectIds*" 9The list of the access policies of the service instance.
"¾
authentications|*z:x
v

healthcaregetFhirServiceAuthenticationJazure:healthcare/getFhirServiceAuthentication:getFhirServiceAuthentication-The `authentication` block as defined below.
"
%configurationExportStorageAccountName" ^The name of the storage account which the operation configuration information is exported to.
"
 containerRegistryLoginServerUrls*" gThe list of azure container registry settings used for convert data operation of the service instance.
"
cors[*Y:W
U

healthcaregetFhirServiceCor4azure:healthcare/getFhirServiceCor:getFhirServiceCor#The `cors` block as defined below.
"E
id" ;The provider-assigned unique ID for this managed resource.
"¡

identitiesj*h:f
d

healthcaregetFhirServiceIdentity>azure:healthcare/getFhirServiceIdentity:getFhirServiceIdentity'The `identity` block as defined below.
"5
kind" )The kind of the Healthcare FHIR Service.
"O
location" ?The Azure Region where the Healthcare FHIR Service is located.
"

name" "I
tagsB2" 9The map of tags assigned to the Healthcare FHIR Service.
"
workspaceId" 2¹
U

healthcaregetMedtechService4azure:healthcare/getMedtechService:getMedtechServiceºUse this data source to access information about an existing Healthcare Med Tech Service

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.healthcare.getMedtechService({
    name: "tfexmedtech",
    workspaceId: "tfexwks",
});
export const azurermHealthcareMedtechServiceId = example.then(example => example.id);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.healthcare.get_medtech_service(name="tfexmedtech",
    workspace_id="tfexwks")
pulumi.export("azurermHealthcareMedtechServiceId", example.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.Healthcare.GetMedtechService.Invoke(new()
    {
        Name = "tfexmedtech",
        WorkspaceId = "tfexwks",
    });

    return new Dictionary<string, object?>
    {
        ["azurermHealthcareMedtechServiceId"] = example.Apply(getMedtechServiceResult => getMedtechServiceResult.Id),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/healthcare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := healthcare.LookupMedtechService(ctx, &healthcare.LookupMedtechServiceArgs{
			Name:        "tfexmedtech",
			WorkspaceId: "tfexwks",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("azurermHealthcareMedtechServiceId", example.Id)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.healthcare.HealthcareFunctions;
import com.pulumi.azure.healthcare.inputs.GetMedtechServiceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = HealthcareFunctions.getMedtechService(GetMedtechServiceArgs.builder()
            .name("tfexmedtech")
            .workspaceId("tfexwks")
            .build());

        ctx.export("azurermHealthcareMedtechServiceId", example.applyValue(getMedtechServiceResult -> getMedtechServiceResult.id()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:healthcare:getMedtechService
      arguments:
        name: tfexmedtech
        workspaceId: tfexwks
outputs:
  azurermHealthcareMedtechServiceId: ${example.id}
```
<!--End PulumiCodeChooser -->
9
name" -The name of the Healthcare Med Tech Service.
g
workspaceId" TThe id of the Healthcare Workspace in which the Healthcare Med Tech Service exists.
"F
deviceMappingJson" -The Device Mappings of the Med Tech Service.
"i
eventhubConsumerGroupName" HThe Consumer Group of the Event Hub of the Healthcare Med Tech Service.
"R
eventhubName" >The name of the Event Hub of the Healthcare Med Tech Service.
"e
eventhubNamespaceName" HThe namespace name of the Event Hub of the Healthcare Med Tech Service.
"E
id" ;The provider-assigned unique ID for this managed resource.
"ª

identitiess*q:o
m

healthcaregetMedtechServiceIdentityDazure:healthcare/getMedtechServiceIdentity:getMedtechServiceIdentity'The `identity` block as defined below.
"

name" "
workspaceId" 2Æ 
@

healthcare
getService&azure:healthcare/getService:getServiceíUse this data source to access information about an existing Healthcare Service

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.healthcare.getService({
    name: "example-healthcare_service",
    resourceGroupName: "example-resources",
    location: "westus2",
});
export const healthcareServiceId = example.then(example => example.id);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.healthcare.get_service(name="example-healthcare_service",
    resource_group_name="example-resources",
    location="westus2")
pulumi.export("healthcareServiceId", example.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.Healthcare.GetService.Invoke(new()
    {
        Name = "example-healthcare_service",
        ResourceGroupName = "example-resources",
        Location = "westus2",
    });

    return new Dictionary<string, object?>
    {
        ["healthcareServiceId"] = example.Apply(getServiceResult => getServiceResult.Id),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/healthcare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := healthcare.LookupService(ctx, &healthcare.LookupServiceArgs{
			Name:              "example-healthcare_service",
			ResourceGroupName: "example-resources",
			Location:          "westus2",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("healthcareServiceId", example.Id)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.healthcare.HealthcareFunctions;
import com.pulumi.azure.healthcare.inputs.GetServiceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = HealthcareFunctions.getService(GetServiceArgs.builder()
            .name("example-healthcare_service")
            .resourceGroupName("example-resources")
            .location("westus2")
            .build());

        ctx.export("healthcareServiceId", example.applyValue(getServiceResult -> getServiceResult.id()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:healthcare:getService
      arguments:
        name: example-healthcare_service
        resourceGroupName: example-resources
        location: westus2
outputs:
  healthcareServiceId: ${example.id}
```
<!--End PulumiCodeChooser -->
?
location" /The Azure Region where the Service is located.
:
name" .Specifies the name of the Healthcare Service.
`
resourceGroupName" GThe name of the Resource Group in which the Healthcare Service exists.
"
accessPolicyObjectIds*" "÷
authenticationConfigurations*:


healthcare%getServiceAuthenticationConfiguration\azure:healthcare/getServiceAuthenticationConfiguration:getServiceAuthenticationConfiguration:An `authentication_configuration` block as defined below.
"À
corsConfigurationsy*w:u
s

healthcaregetServiceCorsConfigurationHazure:healthcare/getServiceCorsConfiguration:getServiceCorsConfiguration/A `cors_configuration` block as defined below.
"u
 cosmosdbKeyVaultKeyVersionlessId" MThe versionless Key Vault Key ID for CMK encryption of the backing database.
"O
cosmosdbThroughput 5The provisioned throughput for the backing database.
"E
id" ;The provider-assigned unique ID for this managed resource.
"%
kind" The type of the service.
"?
location" /The Azure Region where the Service is located.
"

name" "
resourceGroupName" ";
tags2" -A mapping of tags to assign to the resource.
2Ë
F

healthcaregetWorkspace*azure:healthcare/getWorkspace:getWorkspaceêUse this data source to access information about an existing Healthcare Workspace

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.healthcare.getWorkspace({
    name: "example-healthcare_service",
    resourceGroupName: "example-resources",
});
export const healthcareWorkspaceId = example.then(example => example.id);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.healthcare.get_workspace(name="example-healthcare_service",
    resource_group_name="example-resources")
pulumi.export("healthcareWorkspaceId", example.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.Healthcare.GetWorkspace.Invoke(new()
    {
        Name = "example-healthcare_service",
        ResourceGroupName = "example-resources",
    });

    return new Dictionary<string, object?>
    {
        ["healthcareWorkspaceId"] = example.Apply(getWorkspaceResult => getWorkspaceResult.Id),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/healthcare"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := healthcare.LookupWorkspace(ctx, &healthcare.LookupWorkspaceArgs{
			Name:              "example-healthcare_service",
			ResourceGroupName: "example-resources",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("healthcareWorkspaceId", example.Id)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.healthcare.HealthcareFunctions;
import com.pulumi.azure.healthcare.inputs.GetWorkspaceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = HealthcareFunctions.getWorkspace(GetWorkspaceArgs.builder()
            .name("example-healthcare_service")
            .resourceGroupName("example-resources")
            .build());

        ctx.export("healthcareWorkspaceId", example.applyValue(getWorkspaceResult -> getWorkspaceResult.id()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:healthcare:getWorkspace
      arguments:
        name: example-healthcare_service
        resourceGroupName: example-resources
outputs:
  healthcareWorkspaceId: ${example.id}
```
<!--End PulumiCodeChooser -->
2
name" &The name of the Healthcare Workspace.
b
resourceGroupName" IThe name of the Resource Group in which the Healthcare Workspace exists.
"E
id" ;The provider-assigned unique ID for this managed resource.
"L
location" <The Azure Region where the Healthcare Workspace is located.
"

name" "
resourceGroupName" "B
tags2" 4A map of tags assigned to the Healthcare Workspace.
2
&
iotgetDpsazure:iot/getDps:getDps¯Use this data source to access information about an existing IotHub Device Provisioning Service.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.iot.getDps({
    name: "iot_hub_dps_test",
    resourceGroupName: "iothub_dps_rg",
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.iot.get_dps(name="iot_hub_dps_test",
    resource_group_name="iothub_dps_rg")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.Iot.GetDps.Invoke(new()
    {
        Name = "iot_hub_dps_test",
        ResourceGroupName = "iothub_dps_rg",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := iot.GetDps(ctx, &iot.GetDpsArgs{
			Name:              "iot_hub_dps_test",
			ResourceGroupName: "iothub_dps_rg",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.iot.IotFunctions;
import com.pulumi.azure.iot.inputs.GetDpsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = IotFunctions.getDps(GetDpsArgs.builder()
            .name("iot_hub_dps_test")
            .resourceGroupName("iothub_dps_rg")
            .build());

    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:iot:getDps
      arguments:
        name: iot_hub_dps_test
        resourceGroupName: iothub_dps_rg
```
<!--End PulumiCodeChooser -->
P
name" DSpecifies the name of the Iot Device Provisioning Service resource.
w
resourceGroupName" ^The name of the resource group under which the Iot Device Provisioning Service is located in.

tagsB2" "V
allocationPolicy" >The allocation policy of the IoT Device Provisioning Service.
"^
deviceProvisioningHostName" <The device endpoint of the IoT Device Provisioning Service.
"E
id" ;The provider-assigned unique ID for this managed resource.
"M
idScope" >The unique identifier of the IoT Device Provisioning Service.
"i
location" YSpecifies the supported Azure location where the IoT Device Provisioning Service exists.
"

name" "
resourceGroupName" "^
serviceOperationsHostName" =The service endpoint of the IoT Device Provisioning Service.
"
tagsB2" 2ò
\
iotgetDpsSharedAccessPolicy;azure:iot/getDpsSharedAccessPolicy:getDpsSharedAccessPolicyðUse this data source to access information about an existing IotHub Device Provisioning Service Shared Access Policy

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.iot.getDpsSharedAccessPolicy({
    name: "example",
    resourceGroupName: exampleAzurermResourceGroup.name,
    iothubDpsName: exampleAzurermIothubDps.name,
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.iot.get_dps_shared_access_policy(name="example",
    resource_group_name=example_azurerm_resource_group["name"],
    iothub_dps_name=example_azurerm_iothub_dps["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.Iot.GetDpsSharedAccessPolicy.Invoke(new()
    {
        Name = "example",
        ResourceGroupName = exampleAzurermResourceGroup.Name,
        IothubDpsName = exampleAzurermIothubDps.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := iot.LookupDpsSharedAccessPolicy(ctx, &iot.LookupDpsSharedAccessPolicyArgs{
			Name:              "example",
			ResourceGroupName: exampleAzurermResourceGroup.Name,
			IothubDpsName:     exampleAzurermIothubDps.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.iot.IotFunctions;
import com.pulumi.azure.iot.inputs.GetDpsSharedAccessPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = IotFunctions.getDpsSharedAccessPolicy(GetDpsSharedAccessPolicyArgs.builder()
            .name("example")
            .resourceGroupName(exampleAzurermResourceGroup.name())
            .iothubDpsName(exampleAzurermIothubDps.name())
            .build());

    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:iot:getDpsSharedAccessPolicy
      arguments:
        name: example
        resourceGroupName: ${exampleAzurermResourceGroup.name}
        iothubDpsName: ${exampleAzurermIothubDps.name}
```
<!--End PulumiCodeChooser -->
~
iothubDpsName" iSpecifies the name of the IoT Hub Device Provisioning service to which the Shared Access Policy belongs.
C
name" 7Specifies the name of the IotHub Shared Access Policy.

resourceGroupName" fSpecifies the name of the resource group under which the IotHub Shared Access Policy resource exists.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
iothubDpsName" "

name" "Z
primaryConnectionString" ;The primary connection string of the Shared Access Policy.
"K

primaryKey" 9The primary key used to create the authentication token.
"
resourceGroupName" "^
secondaryConnectionString" =The secondary connection string of the Shared Access Policy.
"O
secondaryKey" ;The secondary key used to create the authentication token.
2ù
/
iot	getIotHubazure:iot/getIotHub:getIotHubÐUse this data source to access information about an existing IoTHub.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.iot.getIotHub({
    name: "existing",
    resourceGroupName: "existing",
});
export const id = example.then(example => example.id);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.iot.get_iot_hub(name="existing",
    resource_group_name="existing")
pulumi.export("id", example.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.Iot.GetIotHub.Invoke(new()
    {
        Name = "existing",
        ResourceGroupName = "existing",
    });

    return new Dictionary<string, object?>
    {
        ["id"] = example.Apply(getIotHubResult => getIotHubResult.Id),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := iot.GetIotHub(ctx, &iot.GetIotHubArgs{
			Name:              "existing",
			ResourceGroupName: "existing",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("id", example.Id)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.iot.IotFunctions;
import com.pulumi.azure.iot.inputs.GetIotHubArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = IotFunctions.getIotHub(GetIotHubArgs.builder()
            .name("existing")
            .resourceGroupName("existing")
            .build());

        ctx.export("id", example.applyValue(getIotHubResult -> getIotHubResult.id()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:iot:getIotHub
      arguments:
        name: existing
        resourceGroupName: existing
outputs:
  id: ${example.id}
```
<!--End PulumiCodeChooser -->
%
name" The name of this IoTHub.
Q
resourceGroupName" 8The name of the Resource Group where the IoTHub exists.
J
tagsB2" :A mapping of tags which should be assigned to the IoTHub.
",
hostname" The Hostname of the IoTHub.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

identitiesM*K:I
G
iotgetIotHubIdentity-azure:iot/getIotHubIdentity:getIotHubIdentity%A `identity` block as defined below.
"

name" "
resourceGroupName" "
tagsB2" 2í
S
iotgetSharedAccessPolicy5azure:iot/getSharedAccessPolicy:getSharedAccessPolicyUse this data source to access information about an existing IotHub Shared Access Policy

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.iot.getSharedAccessPolicy({
    name: "example",
    resourceGroupName: exampleAzurermResourceGroup.name,
    iothubName: exampleAzurermIothub.name,
});
```
```python
import pulumi
import pulumi_azure as azure

example = azure.iot.get_shared_access_policy(name="example",
    resource_group_name=example_azurerm_resource_group["name"],
    iothub_name=example_azurerm_iothub["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.Iot.GetSharedAccessPolicy.Invoke(new()
    {
        Name = "example",
        ResourceGroupName = exampleAzurermResourceGroup.Name,
        IothubName = exampleAzurermIothub.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/iot"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := iot.LookupSharedAccessPolicy(ctx, &iot.LookupSharedAccessPolicyArgs{
			Name:              "example",
			ResourceGroupName: exampleAzurermResourceGroup.Name,
			IothubName:        exampleAzurermIothub.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.iot.IotFunctions;
import com.pulumi.azure.iot.inputs.GetSharedAccessPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = IotFunctions.getSharedAccessPolicy(GetSharedAccessPolicyArgs.builder()
            .name("example")
            .resourceGroupName(exampleAzurermResourceGroup.name())
            .iothubName(exampleAzurermIothub.name())
            .build());

    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:iot:getSharedAccessPolicy
      arguments:
        name: example
        resourceGroupName: ${exampleAzurermResourceGroup.name}
        iothubName: ${exampleAzurermIothub.name}
```
<!--End PulumiCodeChooser -->
U

iothubName" CThe name of the IoTHub to which this Shared Access Policy belongs.
L
name" @Specifies the name of the IotHub Shared Access Policy resource.

resourceGroupName" gThe name of the resource group under which the IotHub Shared Access Policy resource has to be created.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

iothubName" "

name" "Z
primaryConnectionString" ;The primary connection string of the Shared Access Policy.
"K

primaryKey" 9The primary key used to create the authentication token.
"
resourceGroupName" "^
secondaryConnectionString" =The secondary connection string of the Shared Access Policy.
"O
secondaryKey" ;The secondary key used to create the authentication token.
2é
K
keyvaultgetAccessPolicy.azure:keyvault/getAccessPolicy:getAccessPolicyÈUse this data source to access information about the permissions from the Management Key Vault Templates.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const contributor = azure.keyvault.getAccessPolicy({
    name: "Key Management",
});
export const accessPolicyKeyPermissions = contributor.then(contributor => contributor.keyPermissions);
```
```python
import pulumi
import pulumi_azure as azure

contributor = azure.keyvault.get_access_policy(name="Key Management")
pulumi.export("accessPolicyKeyPermissions", contributor.key_permissions)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var contributor = Azure.KeyVault.GetAccessPolicy.Invoke(new()
    {
        Name = "Key Management",
    });

    return new Dictionary<string, object?>
    {
        ["accessPolicyKeyPermissions"] = contributor.Apply(getAccessPolicyResult => getAccessPolicyResult.KeyPermissions),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		contributor, err := keyvault.LookupAccessPolicy(ctx, &keyvault.LookupAccessPolicyArgs{
			Name: "Key Management",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("accessPolicyKeyPermissions", contributor.KeyPermissions)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.keyvault.KeyvaultFunctions;
import com.pulumi.azure.keyvault.inputs.GetAccessPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var contributor = KeyvaultFunctions.getAccessPolicy(GetAccessPolicyArgs.builder()
            .name("Key Management")
            .build());

        ctx.export("accessPolicyKeyPermissions", contributor.applyValue(getAccessPolicyResult -> getAccessPolicyResult.keyPermissions()));
    }
}
```
```yaml
variables:
  contributor:
    fn::invoke:
      function: azure:keyvault:getAccessPolicy
      arguments:
        name: Key Management
outputs:
  accessPolicyKeyPermissions: ${contributor.keyPermissions}
```
<!--End PulumiCodeChooser -->

name" Specifies the name of the Management Template. Possible values are: `Key Management`,
`Secret Management`, `Certificate Management`, `Key & Secret Management`, `Key & Certificate Management`,
`Secret & Certificate Management`,  `Key, Secret, & Certificate Management`
"R
certificatePermissions*" 2the certificate permissions for the access policy
"E
id" ;The provider-assigned unique ID for this managed resource.
"B
keyPermissions*" *the key permissions for the access policy
"

name" "H
secretPermissions*" -the secret permissions for the access policy
2Ä/
H
keyvaultgetCertificate,azure:keyvault/getCertificate:getCertificateUse this data source to access information about an existing Key Vault Certificate.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.keyvault.getKeyVault({
    name: "examplekv",
    resourceGroupName: "some-resource-group",
});
const exampleGetCertificate = example.then(example => azure.keyvault.getCertificate({
    name: "secret-sauce",
    keyVaultId: example.id,
}));
export const certificateThumbprint = exampleGetCertificate.then(exampleGetCertificate => exampleGetCertificate.thumbprint);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.keyvault.get_key_vault(name="examplekv",
    resource_group_name="some-resource-group")
example_get_certificate = azure.keyvault.get_certificate(name="secret-sauce",
    key_vault_id=example.id)
pulumi.export("certificateThumbprint", example_get_certificate.thumbprint)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.KeyVault.GetKeyVault.Invoke(new()
    {
        Name = "examplekv",
        ResourceGroupName = "some-resource-group",
    });

    var exampleGetCertificate = Azure.KeyVault.GetCertificate.Invoke(new()
    {
        Name = "secret-sauce",
        KeyVaultId = example.Apply(getKeyVaultResult => getKeyVaultResult.Id),
    });

    return new Dictionary<string, object?>
    {
        ["certificateThumbprint"] = exampleGetCertificate.Apply(getCertificateResult => getCertificateResult.Thumbprint),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := keyvault.LookupKeyVault(ctx, &keyvault.LookupKeyVaultArgs{
			Name:              "examplekv",
			ResourceGroupName: "some-resource-group",
		}, nil)
		if err != nil {
			return err
		}
		exampleGetCertificate, err := keyvault.LookupCertificate(ctx, &keyvault.LookupCertificateArgs{
			Name:       "secret-sauce",
			KeyVaultId: example.Id,
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("certificateThumbprint", exampleGetCertificate.Thumbprint)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.keyvault.KeyvaultFunctions;
import com.pulumi.azure.keyvault.inputs.GetKeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.GetCertificateArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = KeyvaultFunctions.getKeyVault(GetKeyVaultArgs.builder()
            .name("examplekv")
            .resourceGroupName("some-resource-group")
            .build());

        final var exampleGetCertificate = KeyvaultFunctions.getCertificate(GetCertificateArgs.builder()
            .name("secret-sauce")
            .keyVaultId(example.applyValue(getKeyVaultResult -> getKeyVaultResult.id()))
            .build());

        ctx.export("certificateThumbprint", exampleGetCertificate.applyValue(getCertificateResult -> getCertificateResult.thumbprint()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:keyvault:getKeyVault
      arguments:
        name: examplekv
        resourceGroupName: some-resource-group
  exampleGetCertificate:
    fn::invoke:
      function: azure:keyvault:getCertificate
      arguments:
        name: secret-sauce
        keyVaultId: ${example.id}
outputs:
  certificateThumbprint: ${exampleGetCertificate.thumbprint}
```
<!--End PulumiCodeChooser -->


keyVaultId" Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
=
name" 1Specifies the name of the Key Vault Certificate.

versionB" öSpecifies the version of the certificate to look up.  (Defaults to latest)

**NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
"_
certificateData" HThe raw Key Vault Certificate data represented as a hexadecimal string.
"`
certificateDataBase64" CThe raw Key Vault Certificate data represented as a base64 string.
"Ê
certificatePolicies*:}
{
keyvaultgetCertificateCertificatePolicyNazure:keyvault/getCertificateCertificatePolicy:getCertificateCertificatePolicy/A `certificate_policy` block as defined below.
"=
expires" .Expiry date of certificate in RFC3339 format.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

keyVaultId" "0
name" $The name of the Certificate Issuer.
"C
	notBefore" 2Not Before date of certificate in RFC3339 format.
"á
resourceManagerId" ÇThe (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.
"Ø
resourceManagerVersionlessId" ³The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
";
secretId" +The ID of the associated Key Vault Secret.
";
tags2" -A mapping of tags to assign to the resource.
"h

thumbprint" VThe X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
"A
version" 2The current version of the Key Vault Certificate.
"?
versionlessId" *The Base ID of the Key Vault Certificate.
"@
versionlessSecretId" %The Base ID of the Key Vault Secret.
2×)
T
keyvaultgetCertificateData4azure:keyvault/getCertificateData:getCertificateData Use this data source to access data stored in an existing Key Vault Certificate.

> **Note:** This data source uses the `GetSecret` function of the Azure API, to get the key of the certificate. Therefore you need secret/get permission

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.keyvault.getKeyVault({
    name: "examplekv",
    resourceGroupName: "some-resource-group",
});
const exampleGetCertificateData = example.then(example => azure.keyvault.getCertificateData({
    name: "secret-sauce",
    keyVaultId: example.id,
}));
export const examplePem = exampleGetCertificateData.then(exampleGetCertificateData => exampleGetCertificateData.pem);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.keyvault.get_key_vault(name="examplekv",
    resource_group_name="some-resource-group")
example_get_certificate_data = azure.keyvault.get_certificate_data(name="secret-sauce",
    key_vault_id=example.id)
pulumi.export("examplePem", example_get_certificate_data.pem)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.KeyVault.GetKeyVault.Invoke(new()
    {
        Name = "examplekv",
        ResourceGroupName = "some-resource-group",
    });

    var exampleGetCertificateData = Azure.KeyVault.GetCertificateData.Invoke(new()
    {
        Name = "secret-sauce",
        KeyVaultId = example.Apply(getKeyVaultResult => getKeyVaultResult.Id),
    });

    return new Dictionary<string, object?>
    {
        ["examplePem"] = exampleGetCertificateData.Apply(getCertificateDataResult => getCertificateDataResult.Pem),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := keyvault.LookupKeyVault(ctx, &keyvault.LookupKeyVaultArgs{
			Name:              "examplekv",
			ResourceGroupName: "some-resource-group",
		}, nil)
		if err != nil {
			return err
		}
		exampleGetCertificateData, err := keyvault.GetCertificateData(ctx, &keyvault.GetCertificateDataArgs{
			Name:       "secret-sauce",
			KeyVaultId: example.Id,
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("examplePem", exampleGetCertificateData.Pem)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.keyvault.KeyvaultFunctions;
import com.pulumi.azure.keyvault.inputs.GetKeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.GetCertificateDataArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = KeyvaultFunctions.getKeyVault(GetKeyVaultArgs.builder()
            .name("examplekv")
            .resourceGroupName("some-resource-group")
            .build());

        final var exampleGetCertificateData = KeyvaultFunctions.getCertificateData(GetCertificateDataArgs.builder()
            .name("secret-sauce")
            .keyVaultId(example.applyValue(getKeyVaultResult -> getKeyVaultResult.id()))
            .build());

        ctx.export("examplePem", exampleGetCertificateData.applyValue(getCertificateDataResult -> getCertificateDataResult.pem()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:keyvault:getKeyVault
      arguments:
        name: examplekv
        resourceGroupName: some-resource-group
  exampleGetCertificateData:
    fn::invoke:
      function: azure:keyvault:getCertificateData
      arguments:
        name: secret-sauce
        keyVaultId: ${example.id}
outputs:
  examplePem: ${exampleGetCertificateData.pem}
```
<!--End PulumiCodeChooser -->


keyVaultId" Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
8
name" ,Specifies the name of the Key Vault Secret.

versionB" øSpecifies the version of the certificate to look up.  (Defaults to latest)

> **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
"
certificatesCount vAmount of certificates in the chain in case Key Vault Certificate is a bundle (e.g. has an intermediate certificate).
"=
expires" .Expiry date of certificate in RFC3339 format.
"S
hex" HThe raw Key Vault Certificate data represented as a hexadecimal string.
"E
id" ;The provider-assigned unique ID for this managed resource.
"*
key" The Key Vault Certificate Key.
"

keyVaultId" "

name" "C
	notBefore" 2Not Before date of certificate in RFC3339 format.
"4
pem" )The Key Vault Certificate in PEM format.
";
tags2" -A mapping of tags to assign to the resource.
"
version" 2à$
Z
keyvaultgetCertificateIssuer8azure:keyvault/getCertificateIssuer:getCertificateIssuerÿUse this data source to access information about an existing Key Vault Certificate Issuer.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.keyvault.getKeyVault({
    name: "mykeyvault",
    resourceGroupName: "some-resource-group",
});
const exampleGetCertificateIssuer = example.then(example => azure.keyvault.getCertificateIssuer({
    name: "existing",
    keyVaultId: example.id,
}));
export const id = exampleGetCertificateIssuer.then(exampleGetCertificateIssuer => exampleGetCertificateIssuer.id);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.keyvault.get_key_vault(name="mykeyvault",
    resource_group_name="some-resource-group")
example_get_certificate_issuer = azure.keyvault.get_certificate_issuer(name="existing",
    key_vault_id=example.id)
pulumi.export("id", example_get_certificate_issuer.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.KeyVault.GetKeyVault.Invoke(new()
    {
        Name = "mykeyvault",
        ResourceGroupName = "some-resource-group",
    });

    var exampleGetCertificateIssuer = Azure.KeyVault.GetCertificateIssuer.Invoke(new()
    {
        Name = "existing",
        KeyVaultId = example.Apply(getKeyVaultResult => getKeyVaultResult.Id),
    });

    return new Dictionary<string, object?>
    {
        ["id"] = exampleGetCertificateIssuer.Apply(getCertificateIssuerResult => getCertificateIssuerResult.Id),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := keyvault.LookupKeyVault(ctx, &keyvault.LookupKeyVaultArgs{
			Name:              "mykeyvault",
			ResourceGroupName: "some-resource-group",
		}, nil)
		if err != nil {
			return err
		}
		exampleGetCertificateIssuer, err := keyvault.LookupCertificateIssuer(ctx, &keyvault.LookupCertificateIssuerArgs{
			Name:       "existing",
			KeyVaultId: example.Id,
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("id", exampleGetCertificateIssuer.Id)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.keyvault.KeyvaultFunctions;
import com.pulumi.azure.keyvault.inputs.GetKeyVaultArgs;
import com.pulumi.azure.keyvault.inputs.GetCertificateIssuerArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = KeyvaultFunctions.getKeyVault(GetKeyVaultArgs.builder()
            .name("mykeyvault")
            .resourceGroupName("some-resource-group")
            .build());

        final var exampleGetCertificateIssuer = KeyvaultFunctions.getCertificateIssuer(GetCertificateIssuerArgs.builder()
            .name("existing")
            .keyVaultId(example.applyValue(getKeyVaultResult -> getKeyVaultResult.id()))
            .build());

        ctx.export("id", exampleGetCertificateIssuer.applyValue(getCertificateIssuerResult -> getCertificateIssuerResult.id()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:keyvault:getKeyVault
      arguments:
        name: mykeyvault
        resourceGroupName: some-resource-group
  exampleGetCertificateIssuer:
    fn::invoke:
      function: azure:keyvault:getCertificateIssuer
      arguments:
        name: existing
        keyVaultId: ${example.id}
outputs:
  id: ${exampleGetCertificateIssuer.id}
```
<!--End PulumiCodeChooser -->
U

keyVaultId" CThe ID of the Key Vault in which to locate the Certificate Issuer.
:
name" .The name of the Key Vault Certificate Issuer.
"M
	accountId" <The account number with the third-party Certificate Issuer.
"¦
adminso*m:k
i
keyvaultgetCertificateIssuerAdminBazure:keyvault/getCertificateIssuerAdmin:getCertificateIssuerAdmin+A list of `admin` blocks as defined below.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

keyVaultId" "

name" "J
orgId" =The organization ID with the third-party Certificate Issuer.
"D
providerName" 0The name of the third-party Certificate Issuer.
2
K
keyvaultgetCertificates.azure:keyvault/getCertificates:getCertificatesZUse this data source to retrieve a list of certificate names from an existing Key Vault.

z
includePendingB
 bSpecifies whether to include certificates which are not completely provisioned. Defaults to true.
Í

keyVaultId" ºSpecifies the ID of the Key Vault instance to fetch certificate names from, available on the `azure.keyvault.KeyVault` Data Source / Resource.

**NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
"¸
certificatesr*p:n
l
keyvaultgetCertificatesCertificateDazure:keyvault/getCertificatesCertificate:getCertificatesCertificate4One or more `certificates` blocks as defined below.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
includePendingB
 "$

keyVaultId" The Key Vault ID.
"S
names*" DList containing names of certificates that exist in this Key Vault.
2ó
Q
keyvaultgetEncryptedValue2azure:keyvault/getEncryptedValue:getEncryptedValue5Encrypts or Decrypts a value using a Key Vault Key.


	algorithm" The Algorithm which should be used to Decrypt/Encrypt this Value. Possible values are `RSA1_5`, `RSA-OAEP` and `RSA-OAEP-256`.
p
encryptedDataB" YThe Base64 URL Encoded Encrypted Data which should be decrypted into `plain_text_value`.
e
keyVaultKeyId" PThe ID of the Key Vault Key which should be used to Decrypt/Encrypt this Value.
þ
plainTextValueB" åThe plain-text value which should be Encrypted into `encrypted_data`.

> **Note:** One of either `encrypted_data` or `plain_text_value` must be specified and is used to populate the encrypted/decrypted value for the other field.
"
	algorithm" "Ý
decodedPlainTextValue" ¿The Base64URL decoded string of `plain_text_value`. Because the API would remove padding characters of `plain_text_value` when encrypting, this attribute is useful to get the original value.
"
encryptedDataB" "E
id" ;The provider-assigned unique ID for this managed resource.
"
keyVaultKeyId" "
plainTextValueB" 2ô 
0
keyvaultgetKeyazure:keyvault/getKey:getKey Use this data source to access information about an existing Key Vault Key.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.keyvault.getKey({
    name: "secret-sauce",
    keyVaultId: existing.id,
});
export const keyType = example.then(example => example.keyType);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.keyvault.get_key(name="secret-sauce",
    key_vault_id=existing["id"])
pulumi.export("keyType", example.key_type)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.KeyVault.GetKey.Invoke(new()
    {
        Name = "secret-sauce",
        KeyVaultId = existing.Id,
    });

    return new Dictionary<string, object?>
    {
        ["keyType"] = example.Apply(getKeyResult => getKeyResult.KeyType),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := keyvault.LookupKey(ctx, &keyvault.LookupKeyArgs{
			Name:       "secret-sauce",
			KeyVaultId: existing.Id,
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("keyType", example.KeyType)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.keyvault.KeyvaultFunctions;
import com.pulumi.azure.keyvault.inputs.GetKeyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = KeyvaultFunctions.getKey(GetKeyArgs.builder()
            .name("secret-sauce")
            .keyVaultId(existing.id())
            .build());

        ctx.export("keyType", example.applyValue(getKeyResult -> getKeyResult.keyType()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:keyvault:getKey
      arguments:
        name: secret-sauce
        keyVaultId: ${existing.id}
outputs:
  keyType: ${example.keyType}
```
<!--End PulumiCodeChooser -->
Æ

keyVaultId" ³Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.

**NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
5
name" )Specifies the name of the Key Vault Key.
"6
curve" )The EC Curve name of this Key Vault Key.
"8
e" /The RSA public exponent of this Key Vault Key.
"E
id" ;The provider-assigned unique ID for this managed resource.
"R
keyOpts*" AA list of JSON web key operations assigned to this Key Vault Key
"9
keySize *Specifies the Size of this Key Vault Key.
"<
keyType" -Specifies the Key Type of this Key Vault Key
"

keyVaultId" "0
n" 'The RSA modulus of this Key Vault Key.
"

name" "N
publicKeyOpenssh" 6The OpenSSH encoded public key of this Key Vault Key.
"F
publicKeyPem" 2The PEM encoded public key of this Key Vault Key.
"Ê

resourceId" ·The (Versioned) ID for this Key Vault Key. This property points to a specific version of a Key Vault Key, as such using this won't auto-rotate values if used in other Azure Services.
"Á
resourceVersionlessId" £The Versionless ID of the Key Vault Key. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Key is updated.
"@
tags2" 2A mapping of tags assigned to this Key Vault Key.
"9
version" *The current version of the Key Vault Key.
"7
versionlessId" "The Base ID of the Key Vault Key.
"3
x" *The EC X component of this Key Vault Key.
"3
y" *The EC Y component of this Key Vault Key.
2!
?
keyvaultgetKeyVault&azure:keyvault/getKeyVault:getKeyVaultÁUse this data source to access information about an existing Key Vault.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.keyvault.getKeyVault({
    name: "mykeyvault",
    resourceGroupName: "some-resource-group",
});
export const vaultUri = example.then(example => example.vaultUri);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.keyvault.get_key_vault(name="mykeyvault",
    resource_group_name="some-resource-group")
pulumi.export("vaultUri", example.vault_uri)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.KeyVault.GetKeyVault.Invoke(new()
    {
        Name = "mykeyvault",
        ResourceGroupName = "some-resource-group",
    });

    return new Dictionary<string, object?>
    {
        ["vaultUri"] = example.Apply(getKeyVaultResult => getKeyVaultResult.VaultUri),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := keyvault.LookupKeyVault(ctx, &keyvault.LookupKeyVaultArgs{
			Name:              "mykeyvault",
			ResourceGroupName: "some-resource-group",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("vaultUri", example.VaultUri)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.keyvault.KeyvaultFunctions;
import com.pulumi.azure.keyvault.inputs.GetKeyVaultArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = KeyvaultFunctions.getKeyVault(GetKeyVaultArgs.builder()
            .name("mykeyvault")
            .resourceGroupName("some-resource-group")
            .build());

        ctx.export("vaultUri", example.applyValue(getKeyVaultResult -> getKeyVaultResult.vaultUri()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:keyvault:getKeyVault
      arguments:
        name: mykeyvault
        resourceGroupName: some-resource-group
outputs:
  vaultUri: ${example.vaultUri}
```
<!--End PulumiCodeChooser -->
1
name" %Specifies the name of the Key Vault.
W
resourceGroupName" >The name of the Resource Group in which the Key Vault exists.
"²
accessPoliciesi*g:e
c
keyvaultgetKeyVaultAccessPolicy>azure:keyvault/getKeyVaultAccessPolicy:getKeyVaultAccessPolicy5One or more `access_policy` blocks as defined below.
"
enableRbacAuthorization
 aIs Role Based Access Control (RBAC) for authorization of data actions enabled on this Key Vault?
"s
enabledForDeployment
 WCan Azure Virtual Machines retrieve certificates stored as secrets from the Key Vault?
"_
enabledForDiskEncryption
 ?Can Azure Disk Encryption retrieve secrets from the Key Vault?
"d
enabledForTemplateDeployment
 @Can Azure Resource Manager retrieve secrets from the Key Vault?
"E
id" ;The provider-assigned unique ID for this managed resource.
"@
location" 0The Azure Region in which the Key Vault exists.
"

name" "r
networkAclsc*a:_
]
keyvaultgetKeyVaultNetworkAcl:azure:keyvault/getKeyVaultNetworkAcl:getKeyVaultNetworkAcl"V
publicNetworkAccessEnabled
 4Is public network access enabled on this Key Vault?
"M
purgeProtectionEnabled
 /Is purge protection enabled on this Key Vault?
"
resourceGroupName" "<
skuName" -The Name of the SKU used for this Key Vault.
";
tags2" -A mapping of tags assigned to the Key Vault.
"g
tenantId" WThe Azure Active Directory Tenant ID used to authenticate requests for this Key Vault.
"T
vaultUri" DThe URI of the vault for performing operations on keys and secrets.
2!
~
keyvault getManagedHardwareSecurityModulePazure:keyvault/getManagedHardwareSecurityModule:getManagedHardwareSecurityModuleïUse this data source to access information about an existing Key Vault Managed Hardware Security Module.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.keyvault.getManagedHardwareSecurityModule({
    name: "mykeyvaultHsm",
    resourceGroupName: "some-resource-group",
});
export const hsmUri = example.then(example => example.hsmUri);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.keyvault.get_managed_hardware_security_module(name="mykeyvaultHsm",
    resource_group_name="some-resource-group")
pulumi.export("hsmUri", example.hsm_uri)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.KeyVault.GetManagedHardwareSecurityModule.Invoke(new()
    {
        Name = "mykeyvaultHsm",
        ResourceGroupName = "some-resource-group",
    });

    return new Dictionary<string, object?>
    {
        ["hsmUri"] = example.Apply(getManagedHardwareSecurityModuleResult => getManagedHardwareSecurityModuleResult.HsmUri),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := keyvault.LookupManagedHardwareSecurityModule(ctx, &keyvault.LookupManagedHardwareSecurityModuleArgs{
			Name:              "mykeyvaultHsm",
			ResourceGroupName: "some-resource-group",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("hsmUri", example.HsmUri)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.keyvault.KeyvaultFunctions;
import com.pulumi.azure.keyvault.inputs.GetManagedHardwareSecurityModuleArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = KeyvaultFunctions.getManagedHardwareSecurityModule(GetManagedHardwareSecurityModuleArgs.builder()
            .name("mykeyvaultHsm")
            .resourceGroupName("some-resource-group")
            .build());

        ctx.export("hsmUri", example.applyValue(getManagedHardwareSecurityModuleResult -> getManagedHardwareSecurityModuleResult.hsmUri()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:keyvault:getManagedHardwareSecurityModule
      arguments:
        name: mykeyvaultHsm
        resourceGroupName: some-resource-group
outputs:
  hsmUri: ${example.hsmUri}
```
<!--End PulumiCodeChooser -->
H
name" <The name of the Key Vault Managed Hardware Security Module.
x
resourceGroupName" _The name of the Resource Group in which the Key Vault Managed Hardware Security Module exists.
"z
adminObjectIds*" bSpecifies a list of administrators object IDs for the key vault Managed Hardware Security Module.
"e
hsmUri" WThe URI of the Hardware Security Module for performing operations on keys and secrets.
"E
id" ;The provider-assigned unique ID for this managed resource.
"a
location" QThe Azure Region in which the Key Vault managed Hardware Security Module exists.
"

name" "n
purgeProtectionEnabled
 PIs purge protection enabled on this Key Vault Managed Hardware Security Module?
"
resourceGroupName" "]
skuName" NThe Name of the SKU used for this Key Vault Managed Hardware Security Module.
"b
softDeleteRetentionDays CThe number of days that items should be retained for soft-deleted.
"\
tags2" NA mapping of tags assigned to the Key Vault Managed Hardware Security Module.
"
tenantId" yThe Azure Active Directory Tenant ID used for authenticating requests to the Key Vault Managed Hardware Security Module.
2(

keyvault#getManagedHardwareSecurityModuleKeyVazure:keyvault/getManagedHardwareSecurityModuleKey:getManagedHardwareSecurityModuleKeyUse this data source to access information about an existing Managed Hardware Security Module Key.

> **Note:** All arguments including the secret value will be stored in the raw state as plain-text.
[Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

export = async () => {
    const example = await azure.keyvault.getManagedHardwareSecurityModuleKey({
        managedHsmId: exampleAzurermKeyVaultManagedHardwareSecurityModule.id,
        name: exampleAzurermKeyVaultManagedHardwareSecurityModuleKey.name,
    });
    return {
        "hsm-key-vesrion": example.version,
    };
}
```
```python
import pulumi
import pulumi_azure as azure

example = azure.keyvault.get_managed_hardware_security_module_key(managed_hsm_id=example_azurerm_key_vault_managed_hardware_security_module["id"],
    name=example_azurerm_key_vault_managed_hardware_security_module_key["name"])
pulumi.export("hsm-key-vesrion", example.version)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.KeyVault.GetManagedHardwareSecurityModuleKey.Invoke(new()
    {
        ManagedHsmId = exampleAzurermKeyVaultManagedHardwareSecurityModule.Id,
        Name = exampleAzurermKeyVaultManagedHardwareSecurityModuleKey.Name,
    });

    return new Dictionary<string, object?>
    {
        ["hsm-key-vesrion"] = example.Apply(getManagedHardwareSecurityModuleKeyResult => getManagedHardwareSecurityModuleKeyResult.Version),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := keyvault.LookupManagedHardwareSecurityModuleKey(ctx, &keyvault.LookupManagedHardwareSecurityModuleKeyArgs{
			ManagedHsmId: exampleAzurermKeyVaultManagedHardwareSecurityModule.Id,
			Name:         exampleAzurermKeyVaultManagedHardwareSecurityModuleKey.Name,
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("hsm-key-vesrion", example.Version)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.keyvault.KeyvaultFunctions;
import com.pulumi.azure.keyvault.inputs.GetManagedHardwareSecurityModuleKeyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = KeyvaultFunctions.getManagedHardwareSecurityModuleKey(GetManagedHardwareSecurityModuleKeyArgs.builder()
            .managedHsmId(exampleAzurermKeyVaultManagedHardwareSecurityModule.id())
            .name(exampleAzurermKeyVaultManagedHardwareSecurityModuleKey.name())
            .build());

        ctx.export("hsm-key-vesrion", example.applyValue(getManagedHardwareSecurityModuleKeyResult -> getManagedHardwareSecurityModuleKeyResult.version()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:keyvault:getManagedHardwareSecurityModuleKey
      arguments:
        managedHsmId: ${exampleAzurermKeyVaultManagedHardwareSecurityModule.id}
        name: ${exampleAzurermKeyVaultManagedHardwareSecurityModuleKey.name}
outputs:
  hsm-key-vesrion: ${example.version}
```
<!--End PulumiCodeChooser -->
­
managedHsmId" Specifies the ID of the Managed Hardware Security Module instance where the Secret resides, available on the `azure.keyvault.ManagedHardwareSecurityModuleKey` Data Source / Resource.

**NOTE:** The Managed Hardware Security Module must be in the same subscription as the provider. If the Managed Hardware Security Module is in another subscription, you must create an aliased provider for that subscription.
L
name" @Specifies the name of the Managed Hardware Security Module Key.
"M
curve" @The EC Curve name of this Managed Hardware Security Module Key.
"
expirationDate" "E
id" ;The provider-assigned unique ID for this managed resource.
"i
keyOpts*" XA list of JSON web key operations assigned to this Managed Hardware Security Module Key
"P
keySize ASpecifies the Size of this Managed Hardware Security Module Key.
"S
keyType" DSpecifies the Key Type of this Managed Hardware Security Module Key
"
managedHsmId" "

name" "
notBeforeDate" "W
tags2" IA mapping of tags assigned to this Managed Hardware Security Module Key.
"P
version" AThe current version of the Managed Hardware Security Module Key.
"Q
versionedId" >The versioned ID of the Managed Hardware Security Module Key.
2Ø
¨
keyvault.getManagedHardwareSecurityModuleRoleDefinitionlazure:keyvault/getManagedHardwareSecurityModuleRoleDefinition:getManagedHardwareSecurityModuleRoleDefinitionÀUse this data source to access information about an existing KeyVault Role Definition.

## Example Usage

<!--Start PulumiCodeChooser -->
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.keyvault.KeyvaultFunctions;
import com.pulumi.azure.keyvault.inputs.GetManagedHardwareSecurityModuleRoleDefinitionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = KeyvaultFunctions.getManagedHardwareSecurityModuleRoleDefinition(GetManagedHardwareSecurityModuleRoleDefinitionArgs.builder()
            .vaultBaseUrl(test.hsmUri())
            .name("21dbd100-6940-42c2-9190-5d6cb909625b")
            .build());

        ctx.export("id", example.applyValue(getManagedHardwareSecurityModuleRoleDefinitionResult -> getManagedHardwareSecurityModuleRoleDefinitionResult.resourceManagerId()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:keyvault:getManagedHardwareSecurityModuleRoleDefinition
      arguments:
        vaultBaseUrl: ${test.hsmUri}
        name: 21dbd100-6940-42c2-9190-5d6cb909625b
outputs:
  id: ${example.resourceManagerId}
```
<!--End PulumiCodeChooser -->

managedHsmId" H
name" <The name in UUID notation of this KeyVault Role Definition.
"`
assignableScopes*" FA list of assignable role scope. Possible values are `/` and `/keys`.
"?
description" ,A text description of this role definition.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
managedHsmId" "

name" "
permissionsÐ*Í:Ê
Ç
keyvault8getManagedHardwareSecurityModuleRoleDefinitionPermissionazure:keyvault/getManagedHardwareSecurityModuleRoleDefinitionPermission:getManagedHardwareSecurityModuleRoleDefinitionPermission'A `permission` block as defined below.
"R
resourceManagerId" 9The ID of the role definition resource without base url.
"6
roleName" &The role name of the role definition.
"h
roleType" XThe type of the role definition. Possible values are `AKVBuiltInRole` and `CustomRole`.
2· 
9
keyvault	getSecret"azure:keyvault/getSecret:getSecretÕUse this data source to access information about an existing Key Vault Secret.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as azure from "@pulumi/azure";

const example = azure.keyvault.getSecret({
    name: "secret-sauce",
    keyVaultId: existing.id,
});
export const secretValue = example.then(example => example.value);
```
```python
import pulumi
import pulumi_azure as azure

example = azure.keyvault.get_secret(name="secret-sauce",
    key_vault_id=existing["id"])
pulumi.export("secretValue", example.value)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Azure = Pulumi.Azure;

return await Deployment.RunAsync(() => 
{
    var example = Azure.KeyVault.GetSecret.Invoke(new()
    {
        Name = "secret-sauce",
        KeyVaultId = existing.Id,
    });

    return new Dictionary<string, object?>
    {
        ["secretValue"] = example.Apply(getSecretResult => getSecretResult.Value),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		example, err := keyvault.LookupSecret(ctx, &keyvault.LookupSecretArgs{
			Name:       "secret-sauce",
			KeyVaultId: existing.Id,
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("secretValue", example.Value)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.azure.keyvault.KeyvaultFunctions;
import com.pulumi.azure.keyvault.inputs.GetSecretArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = KeyvaultFunctions.getSecret(GetSecretArgs.builder()
            .name("secret-sauce")
            .keyVaultId(existing.id())
            .build());

        ctx.export("secretValue", example.applyValue(getSecretResult -> getSecretResult.value()));
    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: azure:keyvault:getSecret
      arguments:
        name: secret-sauce
        keyVaultId: ${existing.id}
outputs:
  secretValue: ${example.value}
```
<!--End PulumiCodeChooser -->


keyVaultId" Specifies the ID of the Key Vault instance to fetch secret names from, available on the `azure.keyvault.KeyVault` Data Source / Resource.
8
name" ,Specifies the name of the Key Vault Secret.
¥
versionB" Specifies the version of the Key Vault Secret. Defaults to the current version of the Key Vault Secret.

**NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
">
contentType" +The content type for the Key Vault Secret.
"f
expirationDate" PThe date and time at which the Key Vault Secret expires and is no longer valid.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

keyVaultId" "

name" "R
notBeforeDate" =The earliest date at which the Key Vault Secret can be used.
"Ð

resourceId" ½The (Versioned) ID for this Key Vault Secret. This property points to a specific version of a Key Vault Secret, as such using this won't auto-rotate values if used in other Azure Services.
"Ç
resourceVersionlessId" ©The Versionless ID of the Key Vault Secret. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Secret is updated.
"2
tags2" $Any tags assigned to this resource.
"0
value" #The value of the Key Vault Secret.
"
versionB" "ª
versionlessId" The Versionless ID of the Key Vault Secret. This can be used to always get latest secret value, and enable fetching automatically rotating secrets.
2£
<
keyvault
getSecrets$azure:keyvault/getSecrets:getSecrets\Use this data source to retrieve a list of secret names from an existing Key Vault Secret.

È

keyVaultId" µSpecifies the ID of the Key Vault instance to fetch secret names from, available on the `azure.keyvault.KeyVault` Data Source / Resource.

**NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

keyVaultId" "N
names*" ?List containing names of secrets that exist in this Key Vault.
"
secretsT*R:P
N
keyvaultgetSecretsSecret0azure:keyvault/getSecretsSecret:getSecretsSecret/One or more `secrets` blocks as defined below.
:ö	
°
	frontdoor0CustomHttpsConfigurationCustomHttpsConfigurationqazure:frontdoor/CustomHttpsConfigurationCustomHttpsConfiguration:CustomHttpsConfigurationCustomHttpsConfigurationÀ
½t
"azureKeyVaultCertificateSecretNameB" HThe name of the Key Vault secret representing the full certificate PFX.
è
%azureKeyVaultCertificateSecretVersionB" ¸The version of the Key Vault secret representing the full certificate PFX.

> **Note:** In order to enable the use of your own custom `HTTPS certificate` you must grant `Azure Front Door Service` access to your key vault. For instructions on how to configure your `Key Vault` correctly please refer to the [product documentation](https://docs.microsoft.com/azure/frontdoor/front-door-custom-domain-https#option-2-use-your-own-certificate).
a
azureKeyVaultCertificateVaultIdB" 8The ID of the Key Vault containing the SSL certificate.
ú
certificateSourceB" ÞCertificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.

The following attributes are only valid if `certificate_source` is set to `AzureKeyVault`:
A
minimumTlsVersionB" &Minimum client TLS version supported.

provisioningStateB" 
provisioningSubstateB" :Î
h
	frontdoorFirewallPolicyCustomRuleAazure:frontdoor/FirewallPolicyCustomRule:FirewallPolicyCustomRuleá
Þz
action" lThe action to perform when the rule is matched. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
I
enabledB
 8Is the rule is enabled or disabled? Defaults to `true`.

matchConditionsB*:

	frontdoor&FirewallPolicyCustomRuleMatchCondition]azure:frontdoor/FirewallPolicyCustomRuleMatchCondition:FirewallPolicyCustomRuleMatchConditiondOne or more `match_condition` block defined below. Can support up to `10` `match_condition` blocks.
t
name" hGets name of the resource that is unique within a policy. This name can be used to access the resource.

priorityB xThe priority of the rule. Rules with a lower value will be evaluated before rules with a higher value. Defaults to `1`.
Y
rateLimitDurationInMinutesB 5The rate limit duration in minutes. Defaults to `1`.
H
rateLimitThresholdB ,The rate limit threshold. Defaults to `10`.
R
type" FThe type of rule. Possible values are `MatchRule` or `RateLimitRule`.
:¨	

	frontdoor&FirewallPolicyCustomRuleMatchCondition]azure:frontdoor/FirewallPolicyCustomRuleMatchCondition:FirewallPolicyCustomRuleMatchCondition
È
matchValues*" ²Up to `600` possible values to match. Limit is in total across all `match_condition` blocks and `match_values` arguments. String value itself can be up to `256` characters long.
Ô
matchVariable" ¾The request variable to compare with. Possible values are `Cookies`, `PostArgs`, `QueryString`, `RemoteAddr`, `RequestBody`, `RequestHeader`, `RequestMethod`, `RequestUri`, or `SocketAddr`.
J
negationConditionB
 /Should the result of the condition be negated.
þ
operator" íComparison type to use for matching with the variable value. Possible values are `Any`, `BeginsWith`, `Contains`, `EndsWith`, `Equal`, `GeoMatch`, `GreaterThan`, `GreaterThanOrEqual`, `IPMatch`, `LessThan`, `LessThanOrEqual` or `RegEx`.

selectorB" qMatch against a specific key if the `match_variable` is `QueryString`, `PostArgs`, `RequestHeader` or `Cookies`.


transformsB*" Up to `5` transforms to apply. Possible values are `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `URLDecode` or`URLEncode`.
:®
k
	frontdoorFirewallPolicyManagedRuleCazure:frontdoor/FirewallPolicyManagedRule:FirewallPolicyManagedRule¾
»Ô

exclusionsB*:

	frontdoor"FirewallPolicyManagedRuleExclusionUazure:frontdoor/FirewallPolicyManagedRuleExclusion:FirewallPolicyManagedRuleExclusion1One or more `exclusion` blocks as defined below.
Ï
	overridesB*:

	frontdoor!FirewallPolicyManagedRuleOverrideSazure:frontdoor/FirewallPolicyManagedRuleOverride:FirewallPolicyManagedRuleOverride0One or more `override` blocks as defined below.
D
type" 8The name of the managed rule to use with this resource.
J
version" ;The version on the managed rule to use with this resource.
:

	frontdoor"FirewallPolicyManagedRuleExclusionUazure:frontdoor/FirewallPolicyManagedRuleExclusion:FirewallPolicyManagedRuleExclusionõ
òª
matchVariable" The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
Ü
operator" ËComparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
d
selector" TSelector for the value in the `match_variable` attribute this exclusion applies to.
:Ó

	frontdoor!FirewallPolicyManagedRuleOverrideSazure:frontdoor/FirewallPolicyManagedRuleOverride:FirewallPolicyManagedRuleOverrideÊ
Çì

exclusionsªB§*¤:¡

	frontdoor*FirewallPolicyManagedRuleOverrideExclusioneazure:frontdoor/FirewallPolicyManagedRuleOverrideExclusion:FirewallPolicyManagedRuleOverrideExclusion1One or more `exclusion` blocks as defined below.
9
ruleGroupName" $The managed rule group to override.

rulesB*:

	frontdoor%FirewallPolicyManagedRuleOverrideRule[azure:frontdoor/FirewallPolicyManagedRuleOverrideRule:FirewallPolicyManagedRuleOverrideRulesOne or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
:

	frontdoor*FirewallPolicyManagedRuleOverrideExclusioneazure:frontdoor/FirewallPolicyManagedRuleOverrideExclusion:FirewallPolicyManagedRuleOverrideExclusionõ
òª
matchVariable" The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
Ü
operator" ËComparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
d
selector" TSelector for the value in the `match_variable` attribute this exclusion applies to.
:

	frontdoor%FirewallPolicyManagedRuleOverrideRule[azure:frontdoor/FirewallPolicyManagedRuleOverrideRule:FirewallPolicyManagedRuleOverrideRule
z
action" lThe action to be applied when the rule matches. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
W
enabledB
 FIs the managed rule override enabled or disabled. Defaults to `false`
ø

exclusions¶B³*°:­
ª
	frontdoor.FirewallPolicyManagedRuleOverrideRuleExclusionmazure:frontdoor/FirewallPolicyManagedRuleOverrideRuleExclusion:FirewallPolicyManagedRuleOverrideRuleExclusion1One or more `exclusion` blocks as defined below.
/
ruleId" !Identifier for the managed rule.
:¥
ª
	frontdoor.FirewallPolicyManagedRuleOverrideRuleExclusionmazure:frontdoor/FirewallPolicyManagedRuleOverrideRuleExclusion:FirewallPolicyManagedRuleOverrideRuleExclusionõ
òª
matchVariable" The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
Ü
operator" ËComparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
d
selector" TSelector for the value in the `match_variable` attribute this exclusion applies to.
:
\
	frontdoorFrontdoorBackendPool9azure:frontdoor/FrontdoorBackendPool:FrontdoorBackendPool¦
£©
backendsw*u:s
q
	frontdoorFrontdoorBackendPoolBackendGazure:frontdoor/FrontdoorBackendPoolBackend:FrontdoorBackendPoolBackend$A `backend` block as defined below.

healthProbeName" qSpecifies the name of the `backend_pool_health_probe` block within this resource to use for this `Backend Pool`.
%
idB" The ID of the FrontDoor.

loadBalancingName" sSpecifies the name of the `backend_pool_load_balancing` block within this resource to use for this `Backend Pool`.
4
name" (Specifies the name of the Backend Pool.
:°
q
	frontdoorFrontdoorBackendPoolBackendGazure:frontdoor/FrontdoorBackendPoolBackend:FrontdoorBackendPoolBackendº
·<
address" -Location of the backend (IP address or FQDN)
v
enabledB
 eSpecifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
K

hostHeader" 9The value to use as the host header sent to the backend.
U
httpPort EThe HTTP TCP port number. Possible values are between `1` - `65535`.
W
	httpsPort FThe HTTPS TCP port number. Possible values are between `1` - `65535`.
¨
priorityB Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
W
weightB GWeight of this endpoint for load balancing purposes. Defaults to `50`.
:ß
}
	frontdoorFrontdoorBackendPoolHealthProbeOazure:frontdoor/FrontdoorBackendPoolHealthProbe:FrontdoorBackendPoolHealthProbeÝ
ÚC
enabledB
 2Is this health probe enabled? Defaults to `true`.
%
idB" The ID of the FrontDoor.
_
intervalInSecondsB DThe number of seconds between each Health Probe. Defaults to `120`.
4
name" (Specifies the name of the Health Probe.
D
pathB" 6The path to use for the Health Probe. Default is `/`.

probeMethodB" ûSpecifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: `GET` and `HEAD`. Defaults to `GET`.

> **NOTE:** Use the `HEAD` method if you do not need to check the response body of your health probe.
{
protocolB" iProtocol scheme to use for the Health Probe. Possible values are `Http` and `Https`. Defaults to `Http`.
:Þ

	frontdoor!FrontdoorBackendPoolLoadBalancingSazure:frontdoor/FrontdoorBackendPoolLoadBalancing:FrontdoorBackendPoolLoadBalancingÕ
Ò
additionalLatencyMillisecondsB kThe additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to `0`.
%
idB" The ID of the FrontDoor.
5
name" )Specifies the name of the Load Balancer.
e

sampleSizeB QThe number of samples to consider for load balancing decisions. Defaults to `4`.
v
successfulSamplesRequiredB SThe number of samples within the sample period that must succeed. Defaults to `2`.
:Ò
q
	frontdoorFrontdoorBackendPoolSettingGazure:frontdoor/FrontdoorBackendPoolSetting:FrontdoorBackendPoolSettingÜ
Ùô
%backendPoolsSendReceiveTimeoutSecondsB ÄSpecifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between `0` - `240`. Defaults to `60`.
ß
'enforceBackendPoolsCertificateNameCheck
 ¯Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.

> **NOTE:** `backend_pools_send_receive_timeout_seconds` and `enforce_backend_pools_certificate_name_check` apply to all backend pools.
:¡
z
	frontdoorFrontdoorExplicitResourceOrderMazure:frontdoor/FrontdoorExplicitResourceOrder:FrontdoorExplicitResourceOrder¢
#
backendPoolHealthProbeIdsB*" 
backendPoolIdsB*" %
backendPoolLoadBalancingIdsB*" 
frontendEndpointIdsB*" 
routingRuleIdsB*" :ÿ
k
	frontdoorFrontdoorFrontendEndpointCazure:frontdoor/FrontdoorFrontendEndpoint:FrontdoorFrontendEndpoint
¶
hostName" ¥Specifies the host name of the `frontend_endpoint`. Must be a domain name. In order to use a name.azurefd.net domain, the name value must match the Front Door name.
%
idB" The ID of the FrontDoor.
;
name" /Specifies the name of the `frontend_endpoint`.

sessionAffinityEnabledB
 iWhether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
s
sessionAffinityTtlSecondsB PThe TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
l
"webApplicationFirewallPolicyLinkIdB" @Defines the Web Application Firewall policy `ID` for each host.
:	
\
	frontdoorFrontdoorRoutingRule9azure:frontdoor/FrontdoorRoutingRule:FrontdoorRoutingRule¯
¬{
acceptedProtocols*" `Protocol schemes to match for the Backend Routing Rule. Possible values are `Http` and `Https`.

enabledB
 t`Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
ý
forwardingConfigurationªB§:¤
¡
	frontdoor+FrontdoorRoutingRuleForwardingConfigurationgazure:frontdoor/FrontdoorRoutingRuleForwardingConfiguration:FrontdoorRoutingRuleForwardingConfiguration5A `forwarding_configuration` block as defined below.

frontendEndpoints*" hThe names of the `frontend_endpoint` blocks within this resource to associate with this `routing_rule`.
%
idB" The ID of the FrontDoor.
4
name" (Specifies the name of the Routing Rule.
L
patternsToMatches*" 1The route patterns for the Backend Routing Rule.
ó
redirectConfiguration¤B¡:

	frontdoor)FrontdoorRoutingRuleRedirectConfigurationcazure:frontdoor/FrontdoorRoutingRuleRedirectConfiguration:FrontdoorRoutingRuleRedirectConfiguration3A `redirect_configuration` block as defined below.
:ð
¡
	frontdoor+FrontdoorRoutingRuleForwardingConfigurationgazure:frontdoor/FrontdoorRoutingRuleForwardingConfiguration:FrontdoorRoutingRuleForwardingConfigurationÉ

Æ
b
backendPoolName" KSpecifies the name of the Backend Pool to forward the incoming traffic to.
ý
cacheDurationB" åSpecify the minimum caching duration (in ISO8601 notation e.g. `P1DT2H` for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. `cache_duration` works only in combination with `cache_enabled` set to `true`.
|
cacheEnabledB
 fSpecifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
Ð
!cacheQueryParameterStripDirectiveB" ¤Defines cache behaviour in relation to query string parameters. Valid options are `StripAll`, `StripAllExcept`, `StripOnly` or `StripNone`. Defaults to `StripAll`.
²
cacheQueryParametersB*" Specify query parameters (array). Works only in combination with `cache_query_parameter_strip_directive` set to `StripAllExcept` or `StripOnly`.

cacheUseDynamicCompressionB
 kWhether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
¯
customForwardingPathB" Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.

forwardingProtocolB" yProtocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
:»

	frontdoor)FrontdoorRoutingRuleRedirectConfigurationcazure:frontdoor/FrontdoorRoutingRuleRedirectConfiguration:FrontdoorRoutingRuleRedirectConfiguration

customFragmentB" jThe destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
D

customHostB" 0Set this to change the URL for the redirection.
n

customPathB" ZThe path to retain as per the incoming request, or update in the URL for the redirection.
\
customQueryStringB" AReplace any existing query string from the incoming request URL.
x
redirectProtocol" `Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`.

redirectType" mStatus code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`.
:²
M
	frontdoorRulesEngineRule/azure:frontdoor/RulesEngineRule:RulesEngineRuleà
Ý
actioneBc:a
_
	frontdoorRulesEngineRuleAction;azure:frontdoor/RulesEngineRuleAction:RulesEngineRuleAction$An `action` block as defined below.
Ê
matchConditionsB}*{:y
w
	frontdoorRulesEngineRuleMatchConditionKazure:frontdoor/RulesEngineRuleMatchCondition:RulesEngineRuleMatchCondition6One or more `match_condition` block as defined below.
"
name" The name of the rule.
R
priority BPriority of the rule, must be unique per rules engine definition.
:
_
	frontdoorRulesEngineRuleAction;azure:frontdoor/RulesEngineRuleAction:RulesEngineRuleAction²
¯Ò
requestHeadersB*:

	frontdoor"RulesEngineRuleActionRequestHeaderUazure:frontdoor/RulesEngineRuleActionRequestHeader:RulesEngineRuleActionRequestHeader+A `request_header` block as defined below.
×
responseHeadersB*:

	frontdoor#RulesEngineRuleActionResponseHeaderWazure:frontdoor/RulesEngineRuleActionResponseHeader:RulesEngineRuleActionResponseHeader,A `response_header` block as defined below.
:®

	frontdoor"RulesEngineRuleActionRequestHeaderUazure:frontdoor/RulesEngineRuleActionRequestHeader:RulesEngineRuleActionRequestHeader¢
K
headerActionTypeB" 1can be set to `Overwrite`, `Append` or `Delete`.
*

headerNameB" header name (string).
$
valueB" value name (string).
:±

	frontdoor#RulesEngineRuleActionResponseHeaderWazure:frontdoor/RulesEngineRuleActionResponseHeader:RulesEngineRuleActionResponseHeader¢
K
headerActionTypeB" 1can be set to `Overwrite`, `Append` or `Delete`.
*

headerNameB" header name (string).
$
valueB" value name (string).
:ú
w
	frontdoorRulesEngineRuleMatchConditionKazure:frontdoor/RulesEngineRuleMatchCondition:RulesEngineRuleMatchConditionþ
ûm
negateConditionB
 Tcan be set to `true` or `false` to negate the given condition. Defaults to `false`.
±
operator"  can be set to `Any`, `IPMatch`, `GeoMatch`, `Equal`, `Contains`, `LessThan`, `GreaterThan`, `LessThanOrEqual`, `GreaterThanOrEqual`, `BeginsWith` or `EndsWith`
£
selectorB" match against a specific key when `variable` is set to `PostArgs` or `RequestHeader`. It cannot be used with `QueryString` and `RequestMethod`.


transformsB*" ucan be set to one or more values out of `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `UrlDecode` and `UrlEncode`
;
valuesB*" )(array) can contain one or more strings.
ä
variableB" Ñcan be set to `IsMobile`, `RemoteAddr`, `RequestMethod`, `QueryString`, `PostArgs`, `RequestURI`, `RequestPath`, `RequestFilename`, `RequestFilenameExtension`,`RequestHeader`,`RequestBody` or `RequestScheme`.
:
t
	hdinsightHBaseClusterComponentVersionIazure:hdinsight/HBaseClusterComponentVersion:HBaseClusterComponentVersion

hbase" The version of HBase which should be used for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
:²
t
	hdinsightHBaseClusterComputeIsolationIazure:hdinsight/HBaseClusterComputeIsolation:HBaseClusterComputeIsolation¹
¶
computeIsolationEnabledB
 eThis field indicates whether enable compute isolation or not. Possible values are `true` or `false`.
+
hostSkuB" The name of the host SKU.
:
n
	hdinsightHBaseClusterDiskEncryptionEazure:hdinsight/HBaseClusterDiskEncryption:HBaseClusterDiskEncryption

encryptionAlgorithmB" jThis is an algorithm identifier for encryption. Possible values are `RSA1_5`, `RSA-OAEP`, `RSA-OAEP-256`.
h
encryptionAtHostEnabledB
 GThis is indicator to show whether resource disk encryption is enabled.
4
keyVaultKeyIdB" The ID of the key vault key.
m
keyVaultManagedIdentityIdB" JThis is the resource ID of Managed Identity used to access the key vault.
:ÿ
_
	hdinsightHBaseClusterExtension;azure:hdinsight/HBaseClusterExtension:HBaseClusterExtension
P
logAnalyticsWorkspaceId" 1The workspace ID of the log analytics extension.
D

primaryKey" 2The workspace key of the log analytics extension.
:
Y
	hdinsightHBaseClusterGateway7azure:hdinsight/HBaseClusterGateway:HBaseClusterGateway¬
©¸
password" §The password used for the Ambari Portal.

> **NOTE:** This password must be different from the one used for the `head_node`, `worker_node` and `zookeeper_node` roles.
l
username" \The username used for the Ambari Portal. Changing this forces a new resource to be created.
:á
b
	hdinsightHBaseClusterMetastores=azure:hdinsight/HBaseClusterMetastores:HBaseClusterMetastoresú
÷ª
ambarizBx:v
t
	hdinsightHBaseClusterMetastoresAmbariIazure:hdinsight/HBaseClusterMetastoresAmbari:HBaseClusterMetastoresAmbari$An `ambari` block as defined below.

hivetBr:p
n
	hdinsightHBaseClusterMetastoresHiveEazure:hdinsight/HBaseClusterMetastoresHive:HBaseClusterMetastoresHive!A `hive` block as defined below.
¥
ooziewBu:s
q
	hdinsightHBaseClusterMetastoresOozieGazure:hdinsight/HBaseClusterMetastoresOozie:HBaseClusterMetastoresOozie#An `oozie` block as defined below.
:¶
t
	hdinsightHBaseClusterMetastoresAmbariIazure:hdinsight/HBaseClusterMetastoresAmbari:HBaseClusterMetastoresAmbari½
º|
databaseName" hThe external Hive metastore's existing SQL database. Changing this forces a new resource to be created.

password" wThe external Ambari metastore's existing SQL server admin password. Changing this forces a new resource to be created.
¥
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore. Changing this forces a new resource to be created.

username" wThe external Ambari metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:ª
n
	hdinsightHBaseClusterMetastoresHiveEazure:hdinsight/HBaseClusterMetastoresHive:HBaseClusterMetastoresHive·
´|
databaseName" hThe external Hive metastore's existing SQL database. Changing this forces a new resource to be created.

password" uThe external Hive metastore's existing SQL server admin password. Changing this forces a new resource to be created.
£
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore. Changing this forces a new resource to be created.

username" uThe external Hive metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:±
q
	hdinsightHBaseClusterMetastoresOozieGazure:hdinsight/HBaseClusterMetastoresOozie:HBaseClusterMetastoresOozie»
¸}
databaseName" iThe external Oozie metastore's existing SQL database. Changing this forces a new resource to be created.

password" vThe external Oozie metastore's existing SQL server admin password. Changing this forces a new resource to be created.
¤
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore. Changing this forces a new resource to be created.

username" vThe external Oozie metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:ÿ
Y
	hdinsightHBaseClusterMonitor7azure:hdinsight/HBaseClusterMonitor:HBaseClusterMonitor¡
S
logAnalyticsWorkspaceId" 4The Operations Management Suite (OMS) workspace ID.
G

primaryKey" 5The Operations Management Suite (OMS) workspace key.
:¾
Y
	hdinsightHBaseClusterNetwork7azure:hdinsight/HBaseClusterNetwork:HBaseClusterNetworkà
Ýª
connectionDirectionB" The direction of the resource provider connection. Possible values include `Inbound` or `Outbound`. Defaults to `Inbound`. Changing this forces a new resource to be created.

> **NOTE:** To enable the private link the `connection_direction` must be set to `Outbound`.
­
privateLinkEnabledB
 Is the private link enabled? Possible values include `true` or `false`. Defaults to `false`. Changing this forces a new resource to be created.
:à

	hdinsight$HBaseClusterPrivateLinkConfigurationYazure:hdinsight/HBaseClusterPrivateLinkConfiguration:HBaseClusterPrivateLinkConfigurationÎ
Ë9
groupId" *The ID of the private link service group.
Ó
ipConfiguration¿:¼
¹
	hdinsight3HBaseClusterPrivateLinkConfigurationIpConfigurationwazure:hdinsight/HBaseClusterPrivateLinkConfigurationIpConfiguration:HBaseClusterPrivateLinkConfigurationIpConfiguration8
name" ,The name of the private link configuration.
:Î
¹
	hdinsight3HBaseClusterPrivateLinkConfigurationIpConfigurationwazure:hdinsight/HBaseClusterPrivateLinkConfigurationIpConfiguration:HBaseClusterPrivateLinkConfigurationIpConfiguration
t
name" hSpecifies the name for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
E
primaryB
 4Indicates whether this IP configuration is primary.
J
privateIpAddressB" 0The private IP address of the IP configuration.
o
privateIpAllocationMethodB" LThe private IP allocation method. The only possible value now is `Dynamic`.

subnetIdB" :ð
S
	hdinsightHBaseClusterRoles3azure:hdinsight/HBaseClusterRoles:HBaseClusterRoles
£
headNodeo:m
k
	hdinsightHBaseClusterRolesHeadNodeCazure:hdinsight/HBaseClusterRolesHeadNode:HBaseClusterRolesHeadNode&A `head_node` block as defined above.
­

workerNodeu:s
q
	hdinsightHBaseClusterRolesWorkerNodeGazure:hdinsight/HBaseClusterRolesWorkerNode:HBaseClusterRolesWorkerNode(A `worker_node` block as defined below.
¼
zookeeperNode~:|
z
	hdinsightHBaseClusterRolesZookeeperNodeMazure:hdinsight/HBaseClusterRolesZookeeperNode:HBaseClusterRolesZookeeperNode+A `zookeeper_node` block as defined below.
:×
k
	hdinsightHBaseClusterRolesHeadNodeCazure:hdinsight/HBaseClusterRolesHeadNode:HBaseClusterRolesHeadNodeç
äë
passwordB" ØThe Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).

scriptActionsB*:

	hdinsight%HBaseClusterRolesHeadNodeScriptAction[azure:hdinsight/HBaseClusterRolesHeadNodeScriptAction:HBaseClusterRolesHeadNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined below.
û
sshKeysB*" çA list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
©
subnetIdB" The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.

username" oThe Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.

virtualNetworkIdB" The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" þThe Size of the Virtual Machine which should be used as the Head Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_E96a_V4`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:§

	hdinsight%HBaseClusterRolesHeadNodeScriptAction[azure:hdinsight/HBaseClusterRolesHeadNodeScriptAction:HBaseClusterRolesHeadNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:
q
	hdinsightHBaseClusterRolesWorkerNodeGazure:hdinsight/HBaseClusterRolesWorkerNode:HBaseClusterRolesWorkerNode§
¤Ë
	autoscaleB:

	hdinsight$HBaseClusterRolesWorkerNodeAutoscaleYazure:hdinsight/HBaseClusterRolesWorkerNodeAutoscale:HBaseClusterRolesWorkerNodeAutoscale&A `autoscale` block as defined below.
í
passwordB" ÚThe Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).

scriptActions¡B*:

	hdinsight'HBaseClusterRolesWorkerNodeScriptAction_azure:hdinsight/HBaseClusterRolesWorkerNodeScriptAction:HBaseClusterRolesWorkerNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined above.
ý
sshKeysB*" éA list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
«
subnetIdB" The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
]
targetInstanceCount BThe number of instances which should be run for the Worker Nodes.

username" qThe Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
¡
virtualNetworkIdB" The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" The Size of the Virtual Machine which should be used as the Worker Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:Ý

	hdinsight$HBaseClusterRolesWorkerNodeAutoscaleYazure:hdinsight/HBaseClusterRolesWorkerNodeAutoscale:HBaseClusterRolesWorkerNodeAutoscaleË
ÈÅ

recurrence³B°:­
ª
	hdinsight.HBaseClusterRolesWorkerNodeAutoscaleRecurrencemazure:hdinsight/HBaseClusterRolesWorkerNodeAutoscaleRecurrence:HBaseClusterRolesWorkerNodeAutoscaleRecurrenceA `recurrence` block as defined below.

> **NOTE:** Either a `capacity` or `recurrence` block must be specified - but not both.
:
ª
	hdinsight.HBaseClusterRolesWorkerNodeAutoscaleRecurrencemazure:hdinsight/HBaseClusterRolesWorkerNodeAutoscaleRecurrence:HBaseClusterRolesWorkerNodeAutoscaleRecurrenceÑ
Î
	schedulesË*È:Å
Â
	hdinsight6HBaseClusterRolesWorkerNodeAutoscaleRecurrenceSchedule}azure:hdinsight/HBaseClusterRolesWorkerNodeAutoscaleRecurrenceSchedule:HBaseClusterRolesWorkerNodeAutoscaleRecurrenceSchedule.A list of `schedule` blocks as defined below.
@
timezone" 0The time zone for the autoscale schedule times.
:
Â
	hdinsight6HBaseClusterRolesWorkerNodeAutoscaleRecurrenceSchedule}azure:hdinsight/HBaseClusterRolesWorkerNodeAutoscaleRecurrenceSchedule:HBaseClusterRolesWorkerNodeAutoscaleRecurrenceScheduleÊ
Ç
days*" The days of the week to perform autoscale. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
Z
targetInstanceCount ?The number of worker nodes to autoscale at the specified time.
G
time" ;The time of day to perform the autoscale in 24hour format.
:­

	hdinsight'HBaseClusterRolesWorkerNodeScriptAction_azure:hdinsight/HBaseClusterRolesWorkerNodeScriptAction:HBaseClusterRolesWorkerNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:
z
	hdinsightHBaseClusterRolesZookeeperNodeMazure:hdinsight/HBaseClusterRolesZookeeperNode:HBaseClusterRolesZookeeperNode
ð
passwordB" ÝThe Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).
¥
scriptActionsªB§*¤:¡

	hdinsight*HBaseClusterRolesZookeeperNodeScriptActioneazure:hdinsight/HBaseClusterRolesZookeeperNodeScriptAction:HBaseClusterRolesZookeeperNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined above.

sshKeysB*" ìA list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
®
subnetIdB" The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.

username" tThe Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
¤
virtualNetworkIdB" The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:¶

	hdinsight*HBaseClusterRolesZookeeperNodeScriptActioneazure:hdinsight/HBaseClusterRolesZookeeperNodeScriptAction:HBaseClusterRolesZookeeperNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:§
q
	hdinsightHBaseClusterSecurityProfileGazure:hdinsight/HBaseClusterSecurityProfile:HBaseClusterSecurityProfile±
®
aaddsResourceId" qThe resource ID of the Azure Active Directory Domain Service. Changing this forces a new resource to be created.

clusterUsersGroupDnsB*" rA list of the distinguished names for the cluster user groups. Changing this forces a new resource to be created.
t

domainName" bThe name of the Azure Active Directory Domain. Changing this forces a new resource to be created.

domainUserPassword" kThe user password of the Azure Active Directory Domain. Changing this forces a new resource to be created.
|
domainUsername" fThe username of the Azure Active Directory Domain. Changing this forces a new resource to be created.

	ldapsUrls*" |A list of the LDAPS URLs to communicate with the Azure Active Directory. Changing this forces a new resource to be created.
~
msiResourceId" iThe User Assigned Identity for the HDInsight Cluster. Changing this forces a new resource to be created.
:À
n
	hdinsightHBaseClusterStorageAccountEazure:hdinsight/HBaseClusterStorageAccount:HBaseClusterStorageAccountÍ
Êõ
	isDefault
 ãIs this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.

> **NOTE:** One of the `storage_account` or `storage_account_gen2` blocks must be marked as the default.

storageAccountKey" zThe Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
Ê
storageContainerId" ¯The ID of the Storage Container. Changing this forces a new resource to be created.

> **NOTE:** This can be obtained from the `id` of the `azure.storage.Container` resource.
m
storageResourceIdB" RThe ID of the Storage Account. Changing this forces a new resource to be created.
:Ç
z
	hdinsightHBaseClusterStorageAccountGen2Mazure:hdinsight/HBaseClusterStorageAccountGen2:HBaseClusterStorageAccountGen2È
Åf
filesystemId" RThe ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
õ
	isDefault
 ãIs this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.

> **NOTE:** One of the `storage_account` or `storage_account_gen2` blocks must be marked as the default.
õ
managedIdentityResourceId" ÓThe ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.

> **NOTE:** This can be obtained from the `id` of the `azure.storage.Container` resource.
k
storageResourceId" RThe ID of the Storage Account. Changing this forces a new resource to be created.
:
w
	hdinsightHadoopClusterComponentVersionKazure:hdinsight/HadoopClusterComponentVersion:HadoopClusterComponentVersion

hadoop" The version of Hadoop which should be used for this HDInsight Hadoop Cluster. Changing this forces a new resource to be created.
:µ
w
	hdinsightHadoopClusterComputeIsolationKazure:hdinsight/HadoopClusterComputeIsolation:HadoopClusterComputeIsolation¹
¶
computeIsolationEnabledB
 eThis field indicates whether enable compute isolation or not. Possible values are `true` or `false`.
+
hostSkuB" The name of the host SKU.
:
q
	hdinsightHadoopClusterDiskEncryptionGazure:hdinsight/HadoopClusterDiskEncryption:HadoopClusterDiskEncryption

encryptionAlgorithmB" jThis is an algorithm identifier for encryption. Possible values are `RSA1_5`, `RSA-OAEP`, `RSA-OAEP-256`.
h
encryptionAtHostEnabledB
 GThis is indicator to show whether resource disk encryption is enabled.
4
keyVaultKeyIdB" The ID of the key vault key.
m
keyVaultManagedIdentityIdB" JThis is the resource ID of Managed Identity used to access the key vault.
:
b
	hdinsightHadoopClusterExtension=azure:hdinsight/HadoopClusterExtension:HadoopClusterExtension
P
logAnalyticsWorkspaceId" 1The workspace ID of the log analytics extension.
D

primaryKey" 2The workspace key of the log analytics extension.
:
\
	hdinsightHadoopClusterGateway9azure:hdinsight/HadoopClusterGateway:HadoopClusterGateway¬
©¸
password" §The password used for the Ambari Portal.

> **NOTE:** This password must be different from the one used for the `head_node`, `worker_node` and `zookeeper_node` roles.
l
username" \The username used for the Ambari Portal. Changing this forces a new resource to be created.
:í
e
	hdinsightHadoopClusterMetastores?azure:hdinsight/HadoopClusterMetastores:HadoopClusterMetastores
­
ambari}B{:y
w
	hdinsightHadoopClusterMetastoresAmbariKazure:hdinsight/HadoopClusterMetastoresAmbari:HadoopClusterMetastoresAmbari$An `ambari` block as defined below.
¢
hivewBu:s
q
	hdinsightHadoopClusterMetastoresHiveGazure:hdinsight/HadoopClusterMetastoresHive:HadoopClusterMetastoresHive!A `hive` block as defined below.
¨
ooziezBx:v
t
	hdinsightHadoopClusterMetastoresOozieIazure:hdinsight/HadoopClusterMetastoresOozie:HadoopClusterMetastoresOozie#An `oozie` block as defined below.
:¹
w
	hdinsightHadoopClusterMetastoresAmbariKazure:hdinsight/HadoopClusterMetastoresAmbari:HadoopClusterMetastoresAmbari½
º|
databaseName" hThe external Hive metastore's existing SQL database. Changing this forces a new resource to be created.

password" wThe external Ambari metastore's existing SQL server admin password. Changing this forces a new resource to be created.
¥
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore. Changing this forces a new resource to be created.

username" wThe external Ambari metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:­
q
	hdinsightHadoopClusterMetastoresHiveGazure:hdinsight/HadoopClusterMetastoresHive:HadoopClusterMetastoresHive·
´|
databaseName" hThe external Hive metastore's existing SQL database. Changing this forces a new resource to be created.

password" uThe external Hive metastore's existing SQL server admin password. Changing this forces a new resource to be created.
£
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore. Changing this forces a new resource to be created.

username" uThe external Hive metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:´
t
	hdinsightHadoopClusterMetastoresOozieIazure:hdinsight/HadoopClusterMetastoresOozie:HadoopClusterMetastoresOozie»
¸}
databaseName" iThe external Oozie metastore's existing SQL database. Changing this forces a new resource to be created.

password" vThe external Oozie metastore's existing SQL server admin password. Changing this forces a new resource to be created.
¤
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore. Changing this forces a new resource to be created.

username" vThe external Oozie metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:
\
	hdinsightHadoopClusterMonitor9azure:hdinsight/HadoopClusterMonitor:HadoopClusterMonitor¡
S
logAnalyticsWorkspaceId" 4The Operations Management Suite (OMS) workspace ID.
G

primaryKey" 5The Operations Management Suite (OMS) workspace key.
:Â
\
	hdinsightHadoopClusterNetwork9azure:hdinsight/HadoopClusterNetwork:HadoopClusterNetworká
Þ«
connectionDirectionB" The direction of the resource provider connection. Possible values include `Inbound` or `Outbound`. Defaults to `Inbound`. Changing this forces a new resource to be created.

> **NOTE:** To enabled the private link the `connection_direction` must be set to `Outbound`.
­
privateLinkEnabledB
 Is the private link enabled? Possible values include `true` or `false`. Defaults to `false`. Changing this forces a new resource to be created.
:æ

	hdinsight%HadoopClusterPrivateLinkConfiguration[azure:hdinsight/HadoopClusterPrivateLinkConfiguration:HadoopClusterPrivateLinkConfigurationÑ
Î9
groupId" *The ID of the private link service group.
Ö
ipConfigurationÂ:¿
¼
	hdinsight4HadoopClusterPrivateLinkConfigurationIpConfigurationyazure:hdinsight/HadoopClusterPrivateLinkConfigurationIpConfiguration:HadoopClusterPrivateLinkConfigurationIpConfiguration8
name" ,The name of the private link configuration.
: 
¼
	hdinsight4HadoopClusterPrivateLinkConfigurationIpConfigurationyazure:hdinsight/HadoopClusterPrivateLinkConfigurationIpConfiguration:HadoopClusterPrivateLinkConfigurationIpConfigurationÞ
Ûu
name" iSpecifies the name for this HDInsight Hadoop Cluster. Changing this forces a new resource to be created.
E
primaryB
 4Indicates whether this IP configuration is primary.

privateIpAddressB" o
privateIpAllocationMethodB" LThe private IP allocation method. The only possible value now is `Dynamic`.

subnetIdB" :¨
V
	hdinsightHadoopClusterRoles5azure:hdinsight/HadoopClusterRoles:HadoopClusterRolesÍ
Ê¨
edgeNodetBr:p
n
	hdinsightHadoopClusterRolesEdgeNodeEazure:hdinsight/HadoopClusterRolesEdgeNode:HadoopClusterRolesEdgeNode&A `edge_node` block as defined below.
¦
headNoder:p
n
	hdinsightHadoopClusterRolesHeadNodeEazure:hdinsight/HadoopClusterRolesHeadNode:HadoopClusterRolesHeadNode&A `head_node` block as defined above.
°

workerNodex:v
t
	hdinsightHadoopClusterRolesWorkerNodeIazure:hdinsight/HadoopClusterRolesWorkerNode:HadoopClusterRolesWorkerNode(A `worker_node` block as defined below.
À
zookeeperNode:
}
	hdinsightHadoopClusterRolesZookeeperNodeOazure:hdinsight/HadoopClusterRolesZookeeperNode:HadoopClusterRolesZookeeperNode+A `zookeeper_node` block as defined below.
:ó
n
	hdinsightHadoopClusterRolesEdgeNodeEazure:hdinsight/HadoopClusterRolesEdgeNode:HadoopClusterRolesEdgeNode
ý°
httpsEndpoints¡B*:

	hdinsight'HadoopClusterRolesEdgeNodeHttpsEndpoint_azure:hdinsight/HadoopClusterRolesEdgeNodeHttpsEndpoint:HadoopClusterRolesEdgeNodeHttpsEndpointzThe HTTPS Connectivity Endpoint for this HDInsight Hadoop Cluster. One or more `https_endpoints` blocks as defined below.
ý
installScriptActions°*­:ª
§
	hdinsight-HadoopClusterRolesEdgeNodeInstallScriptActionkazure:hdinsight/HadoopClusterRolesEdgeNodeInstallScriptAction:HadoopClusterRolesEdgeNodeInstallScriptAction2A `install_script_action` block as defined below.
]
targetInstanceCount BThe number of instances which should be run for the Worker Nodes.

uninstallScriptActions¹B¶*³:°
­
	hdinsight/HadoopClusterRolesEdgeNodeUninstallScriptActionoazure:hdinsight/HadoopClusterRolesEdgeNodeUninstallScriptAction:HadoopClusterRolesEdgeNodeUninstallScriptAction5A `uninstall_script_actions` block as defined below.
Ú
vmSize" ËThe Size of the Virtual Machine which should be used as the Edge Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`.
:

	hdinsight'HadoopClusterRolesEdgeNodeHttpsEndpoint_azure:hdinsight/HadoopClusterRolesEdgeNodeHttpsEndpoint:HadoopClusterRolesEdgeNodeHttpsEndpointò
ïC
accessModesB*" ,A list of access modes for the application.
=
destinationPortB $The destination port to connect to.
f
disableGatewayAuthB
 JThe value indicates whether the gateway authentication is enabled or not.
B
privateIpAddressB" (The private ip address of the endpoint.
=
subDomainSuffixB" $The application's subdomain suffix.
:÷
§
	hdinsight-HadoopClusterRolesEdgeNodeInstallScriptActionkazure:hdinsight/HadoopClusterRolesEdgeNodeInstallScriptAction:HadoopClusterRolesEdgeNodeInstallScriptActionÊ
Ç3
name" 'The name of the install script action.
3

parametersB" The parameters for the script.
[
uri" PThe URI pointing to the script to run during the installation of the edge node.
:ÿ
­
	hdinsight/HadoopClusterRolesEdgeNodeUninstallScriptActionoazure:hdinsight/HadoopClusterRolesEdgeNodeUninstallScriptAction:HadoopClusterRolesEdgeNodeUninstallScriptActionÌ
É5
name" )The name of the uninstall script action.
3

parametersB" The parameters for the script.
[
uri" PThe URI pointing to the script to run during the installation of the edge node.
:Ý
n
	hdinsightHadoopClusterRolesHeadNodeEazure:hdinsight/HadoopClusterRolesHeadNode:HadoopClusterRolesHeadNodeê
çë
passwordB" ØThe Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).

scriptActionsB*:

	hdinsight&HadoopClusterRolesHeadNodeScriptAction]azure:hdinsight/HadoopClusterRolesHeadNodeScriptAction:HadoopClusterRolesHeadNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined below.
û
sshKeysB*" çA list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
©
subnetIdB" The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.

username" oThe Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.

virtualNetworkIdB" The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" þThe Size of the Virtual Machine which should be used as the Head Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:ª

	hdinsight&HadoopClusterRolesHeadNodeScriptAction]azure:hdinsight/HadoopClusterRolesHeadNodeScriptAction:HadoopClusterRolesHeadNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:¦
t
	hdinsightHadoopClusterRolesWorkerNodeIazure:hdinsight/HadoopClusterRolesWorkerNode:HadoopClusterRolesWorkerNode­
ªÎ
	autoscaleB:

	hdinsight%HadoopClusterRolesWorkerNodeAutoscale[azure:hdinsight/HadoopClusterRolesWorkerNodeAutoscale:HadoopClusterRolesWorkerNodeAutoscale&A `autoscale` block as defined below.
í
passwordB" ÚThe Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).

scriptActions¤B¡*:

	hdinsight(HadoopClusterRolesWorkerNodeScriptActionaazure:hdinsight/HadoopClusterRolesWorkerNodeScriptAction:HadoopClusterRolesWorkerNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined above.
ý
sshKeysB*" éA list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
«
subnetIdB" The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
]
targetInstanceCount BThe number of instances which should be run for the Worker Nodes.

username" qThe Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
¡
virtualNetworkIdB" The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" The Size of the Virtual Machine which should be used as the Worker Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:Ê

	hdinsight%HadoopClusterRolesWorkerNodeAutoscale[azure:hdinsight/HadoopClusterRolesWorkerNodeAutoscale:HadoopClusterRolesWorkerNodeAutoscaleµ
²ä
capacity°B­:ª
§
	hdinsight-HadoopClusterRolesWorkerNodeAutoscaleCapacitykazure:hdinsight/HadoopClusterRolesWorkerNodeAutoscaleCapacity:HadoopClusterRolesWorkerNodeAutoscaleCapacity%A `capacity` block as defined below.
È

recurrence¶B³:°
­
	hdinsight/HadoopClusterRolesWorkerNodeAutoscaleRecurrenceoazure:hdinsight/HadoopClusterRolesWorkerNodeAutoscaleRecurrence:HadoopClusterRolesWorkerNodeAutoscaleRecurrenceA `recurrence` block as defined below.

> **NOTE:** Either a `capacity` or `recurrence` block must be specified - but not both.
:
§
	hdinsight-HadoopClusterRolesWorkerNodeAutoscaleCapacitykazure:hdinsight/HadoopClusterRolesWorkerNodeAutoscaleCapacity:HadoopClusterRolesWorkerNodeAutoscaleCapacityß
Ül
maxInstanceCount TThe maximum number of worker nodes to autoscale to based on the cluster's activity.
l
minInstanceCount TThe minimum number of worker nodes to autoscale to based on the cluster's activity.
:
­
	hdinsight/HadoopClusterRolesWorkerNodeAutoscaleRecurrenceoazure:hdinsight/HadoopClusterRolesWorkerNodeAutoscaleRecurrence:HadoopClusterRolesWorkerNodeAutoscaleRecurrenceÔ
Ñ
	schedulesÎ*Ë:È
Å
	hdinsight7HadoopClusterRolesWorkerNodeAutoscaleRecurrenceScheduleazure:hdinsight/HadoopClusterRolesWorkerNodeAutoscaleRecurrenceSchedule:HadoopClusterRolesWorkerNodeAutoscaleRecurrenceSchedule.A list of `schedule` blocks as defined below.
@
timezone" 0The time zone for the autoscale schedule times.
:
Å
	hdinsight7HadoopClusterRolesWorkerNodeAutoscaleRecurrenceScheduleazure:hdinsight/HadoopClusterRolesWorkerNodeAutoscaleRecurrenceSchedule:HadoopClusterRolesWorkerNodeAutoscaleRecurrenceScheduleÊ
Ç
days*" The days of the week to perform autoscale. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
Z
targetInstanceCount ?The number of worker nodes to autoscale at the specified time.
G
time" ;The time of day to perform the autoscale in 24hour format.
:°

	hdinsight(HadoopClusterRolesWorkerNodeScriptActionaazure:hdinsight/HadoopClusterRolesWorkerNodeScriptAction:HadoopClusterRolesWorkerNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:
}
	hdinsightHadoopClusterRolesZookeeperNodeOazure:hdinsight/HadoopClusterRolesZookeeperNode:HadoopClusterRolesZookeeperNode
ð
passwordB" ÝThe Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).
¨
scriptActions­Bª*§:¤
¡
	hdinsight+HadoopClusterRolesZookeeperNodeScriptActiongazure:hdinsight/HadoopClusterRolesZookeeperNodeScriptAction:HadoopClusterRolesZookeeperNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined above.

sshKeysB*" ìA list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
®
subnetIdB" The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.

username" tThe Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
¤
virtualNetworkIdB" The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:¹
¡
	hdinsight+HadoopClusterRolesZookeeperNodeScriptActiongazure:hdinsight/HadoopClusterRolesZookeeperNodeScriptAction:HadoopClusterRolesZookeeperNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:ª
t
	hdinsightHadoopClusterSecurityProfileIazure:hdinsight/HadoopClusterSecurityProfile:HadoopClusterSecurityProfile±
®
aaddsResourceId" qThe resource ID of the Azure Active Directory Domain Service. Changing this forces a new resource to be created.

clusterUsersGroupDnsB*" rA list of the distinguished names for the cluster user groups. Changing this forces a new resource to be created.
t

domainName" bThe name of the Azure Active Directory Domain. Changing this forces a new resource to be created.

domainUserPassword" kThe user password of the Azure Active Directory Domain. Changing this forces a new resource to be created.
|
domainUsername" fThe username of the Azure Active Directory Domain. Changing this forces a new resource to be created.

	ldapsUrls*" |A list of the LDAPS URLs to communicate with the Azure Active Directory. Changing this forces a new resource to be created.
~
msiResourceId" iThe User Assigned Identity for the HDInsight Cluster. Changing this forces a new resource to be created.
:Ã
q
	hdinsightHadoopClusterStorageAccountGazure:hdinsight/HadoopClusterStorageAccount:HadoopClusterStorageAccountÍ
Êõ
	isDefault
 ãIs this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.

> **NOTE:** One of the `storage_account` or `storage_account_gen2` blocks must be marked as the default.

storageAccountKey" zThe Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
Ê
storageContainerId" ¯The ID of the Storage Container. Changing this forces a new resource to be created.

> **NOTE:** This can be obtained from the `id` of the `azure.storage.Container` resource.
m
storageResourceIdB" RThe ID of the Storage Account. Changing this forces a new resource to be created.
:Ê
}
	hdinsightHadoopClusterStorageAccountGen2Oazure:hdinsight/HadoopClusterStorageAccountGen2:HadoopClusterStorageAccountGen2È
Åf
filesystemId" RThe ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
õ
	isDefault
 ãIs this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.

> **NOTE:** One of the `storage_account` or `storage_account_gen2` blocks must be marked as the default.
õ
managedIdentityResourceId" ÓThe ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.

> **NOTE:** This can be obtained from the `id` of the `azure.storage.Container` resource.
k
storageResourceId" RThe ID of the Storage Account. Changing this forces a new resource to be created.
:Ð

	hdinsight'InteractiveQueryClusterComponentVersion_azure:hdinsight/InteractiveQueryClusterComponentVersion:InteractiveQueryClusterComponentVersionµ
²¯
interactiveHive" The version of Interactive Query which should be used for this HDInsight Interactive Query Cluster. Changing this forces a new resource to be created.
:Ô

	hdinsight'InteractiveQueryClusterComputeIsolation_azure:hdinsight/InteractiveQueryClusterComputeIsolation:InteractiveQueryClusterComputeIsolation¹
¶
computeIsolationEnabledB
 eThis field indicates whether enable compute isolation or not. Possible values are `true` or `false`.
+
hostSkuB" The name of the host SKU.
:±

	hdinsight%InteractiveQueryClusterDiskEncryption[azure:hdinsight/InteractiveQueryClusterDiskEncryption:InteractiveQueryClusterDiskEncryption

encryptionAlgorithmB" jThis is an algorithm identifier for encryption. Possible values are `RSA1_5`, `RSA-OAEP`, `RSA-OAEP-256`.
h
encryptionAtHostEnabledB
 GThis is indicator to show whether resource disk encryption is enabled.
4
keyVaultKeyIdB" The ID of the key vault key.
m
keyVaultManagedIdentityIdB" JThis is the resource ID of Managed Identity used to access the key vault.
:¡

	hdinsight InteractiveQueryClusterExtensionQazure:hdinsight/InteractiveQueryClusterExtension:InteractiveQueryClusterExtension
P
logAnalyticsWorkspaceId" 1The workspace ID of the log analytics extension.
D

primaryKey" 2The workspace key of the log analytics extension.
:«
z
	hdinsightInteractiveQueryClusterGatewayMazure:hdinsight/InteractiveQueryClusterGateway:InteractiveQueryClusterGateway¬
©¸
password" §The password used for the Ambari Portal.

> **NOTE:** This password must be different from the one used for the `head_node`, `worker_node` and `zookeeper_node` roles.
l
username" \The username used for the Ambari Portal. Changing this forces a new resource to be created.
:ò

	hdinsight!InteractiveQueryClusterMetastoresSazure:hdinsight/InteractiveQueryClusterMetastores:InteractiveQueryClusterMetastoresé
æÏ
ambariB:

	hdinsight'InteractiveQueryClusterMetastoresAmbari_azure:hdinsight/InteractiveQueryClusterMetastoresAmbari:InteractiveQueryClusterMetastoresAmbari$An `ambari` block as defined below.
Ä
hiveB:

	hdinsight%InteractiveQueryClusterMetastoresHive[azure:hdinsight/InteractiveQueryClusterMetastoresHive:InteractiveQueryClusterMetastoresHive!A `hive` block as defined below.
Ê
oozieB:

	hdinsight&InteractiveQueryClusterMetastoresOozie]azure:hdinsight/InteractiveQueryClusterMetastoresOozie:InteractiveQueryClusterMetastoresOozie#An `oozie` block as defined below.
:Ø

	hdinsight'InteractiveQueryClusterMetastoresAmbari_azure:hdinsight/InteractiveQueryClusterMetastoresAmbari:InteractiveQueryClusterMetastoresAmbari½
º|
databaseName" hThe external Hive metastore's existing SQL database. Changing this forces a new resource to be created.

password" wThe external Ambari metastore's existing SQL server admin password. Changing this forces a new resource to be created.
¥
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore. Changing this forces a new resource to be created.

username" wThe external Ambari metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:Ì

	hdinsight%InteractiveQueryClusterMetastoresHive[azure:hdinsight/InteractiveQueryClusterMetastoresHive:InteractiveQueryClusterMetastoresHive·
´|
databaseName" hThe external Hive metastore's existing SQL database. Changing this forces a new resource to be created.

password" uThe external Hive metastore's existing SQL server admin password. Changing this forces a new resource to be created.
£
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore. Changing this forces a new resource to be created.

username" uThe external Hive metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:Ó

	hdinsight&InteractiveQueryClusterMetastoresOozie]azure:hdinsight/InteractiveQueryClusterMetastoresOozie:InteractiveQueryClusterMetastoresOozie»
¸}
databaseName" iThe external Oozie metastore's existing SQL database. Changing this forces a new resource to be created.

password" vThe external Oozie metastore's existing SQL server admin password. Changing this forces a new resource to be created.
¤
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore. Changing this forces a new resource to be created.

username" vThe external Oozie metastore's existing SQL server admin username. Changing this forces a new resource to be created.
: 
z
	hdinsightInteractiveQueryClusterMonitorMazure:hdinsight/InteractiveQueryClusterMonitor:InteractiveQueryClusterMonitor¡
S
logAnalyticsWorkspaceId" 4The Operations Management Suite (OMS) workspace ID.
G

primaryKey" 5The Operations Management Suite (OMS) workspace key.
:à
z
	hdinsightInteractiveQueryClusterNetworkMazure:hdinsight/InteractiveQueryClusterNetwork:InteractiveQueryClusterNetworká
Þ«
connectionDirectionB" The direction of the resource provider connection. Possible values include `Inbound` or `Outbound`. Defaults to `Inbound`. Changing this forces a new resource to be created.

> **NOTE:** To enabled the private link the `connection_direction` must be set to `Outbound`.
­
privateLinkEnabledB
 Is the private link enabled? Possible values include `true` or `false`. Defaults to `false`. Changing this forces a new resource to be created.
:£
­
	hdinsight/InteractiveQueryClusterPrivateLinkConfigurationoazure:hdinsight/InteractiveQueryClusterPrivateLinkConfiguration:InteractiveQueryClusterPrivateLinkConfigurationð
í9
groupId" *The ID of the private link service group.
õ
ipConfigurationá:Þ
Û
	hdinsight>InteractiveQueryClusterPrivateLinkConfigurationIpConfigurationazure:hdinsight/InteractiveQueryClusterPrivateLinkConfigurationIpConfiguration:InteractiveQueryClusterPrivateLinkConfigurationIpConfiguration8
name" ,The name of the private link configuration.
:ý
Û
	hdinsight>InteractiveQueryClusterPrivateLinkConfigurationIpConfigurationazure:hdinsight/InteractiveQueryClusterPrivateLinkConfigurationIpConfiguration:InteractiveQueryClusterPrivateLinkConfigurationIpConfiguration

name" tSpecifies the name for this HDInsight Interactive Query Cluster. Changing this forces a new resource to be created.
E
primaryB
 4Indicates whether this IP configuration is primary.
J
privateIpAddressB" 0The private IP address of the IP configuration.
o
privateIpAllocationMethodB" LThe private IP allocation method. The only possible value now is `Dynamic`.

subnetIdB" :ý
t
	hdinsightInteractiveQueryClusterRolesIazure:hdinsight/InteractiveQueryClusterRoles:InteractiveQueryClusterRoles
Ç
headNode:

	hdinsight$InteractiveQueryClusterRolesHeadNodeYazure:hdinsight/InteractiveQueryClusterRolesHeadNode:InteractiveQueryClusterRolesHeadNode&A `head_node` block as defined above.
Ñ

workerNode:

	hdinsight&InteractiveQueryClusterRolesWorkerNode]azure:hdinsight/InteractiveQueryClusterRolesWorkerNode:InteractiveQueryClusterRolesWorkerNode(A `worker_node` block as defined below.
à
zookeeperNode¡:

	hdinsight)InteractiveQueryClusterRolesZookeeperNodecazure:hdinsight/InteractiveQueryClusterRolesZookeeperNode:InteractiveQueryClusterRolesZookeeperNode+A `zookeeper_node` block as defined below.
:

	hdinsight$InteractiveQueryClusterRolesHeadNodeYazure:hdinsight/InteractiveQueryClusterRolesHeadNode:InteractiveQueryClusterRolesHeadNodeõ
òë
passwordB" ØThe Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).
·
scriptActions¼B¹*¶:³
°
	hdinsight0InteractiveQueryClusterRolesHeadNodeScriptActionqazure:hdinsight/InteractiveQueryClusterRolesHeadNodeScriptAction:InteractiveQueryClusterRolesHeadNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined below.
û
sshKeysB*" çA list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
©
subnetIdB" The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.

username" oThe Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.

virtualNetworkIdB" The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
ú
vmSize" ëThe Size of the Virtual Machine which should be used as the Head Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.

> **NOTE:** High memory instances must be specified for the Head Node (Azure suggests a `Standard_D13_V2`).
:È
°
	hdinsight0InteractiveQueryClusterRolesHeadNodeScriptActionqazure:hdinsight/InteractiveQueryClusterRolesHeadNodeScriptAction:InteractiveQueryClusterRolesHeadNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:î 

	hdinsight&InteractiveQueryClusterRolesWorkerNode]azure:hdinsight/InteractiveQueryClusterRolesWorkerNode:InteractiveQueryClusterRolesWorkerNodeÖ
Óì
	autoscale¶B³:°
­
	hdinsight/InteractiveQueryClusterRolesWorkerNodeAutoscaleoazure:hdinsight/InteractiveQueryClusterRolesWorkerNodeAutoscale:InteractiveQueryClusterRolesWorkerNodeAutoscale&A `autoscale` block as defined below.
í
passwordB" ÚThe Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).
½
scriptActionsÂB¿*¼:¹
¶
	hdinsight2InteractiveQueryClusterRolesWorkerNodeScriptActionuazure:hdinsight/InteractiveQueryClusterRolesWorkerNodeScriptAction:InteractiveQueryClusterRolesWorkerNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined above.
ý
sshKeysB*" éA list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
«
subnetIdB" The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
]
targetInstanceCount BThe number of instances which should be run for the Worker Nodes.

username" qThe Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
¡
virtualNetworkIdB" The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
ü
vmSize" íThe Size of the Virtual Machine which should be used as the Worker Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.

> **NOTE:** High memory instances must be specified for the Head Node (Azure suggests a `Standard_D14_V2`).
:Æ
­
	hdinsight/InteractiveQueryClusterRolesWorkerNodeAutoscaleoazure:hdinsight/InteractiveQueryClusterRolesWorkerNodeAutoscale:InteractiveQueryClusterRolesWorkerNodeAutoscale


recurrenceÕBÒ:Ï
Ì
	hdinsight9InteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrenceazure:hdinsight/InteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrence:InteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrence'A `recurrence` block as defined below.
:Å
Ì
	hdinsight9InteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrenceazure:hdinsight/InteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrence:InteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrenceó
ð«
	schedulesí*ê:ç
ä
	hdinsightAInteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrenceScheduleazure:hdinsight/InteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrenceSchedule:InteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrenceSchedule.A list of `schedule` blocks as defined below.
@
timezone" 0The time zone for the autoscale schedule times.
:´
ä
	hdinsightAInteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrenceScheduleazure:hdinsight/InteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrenceSchedule:InteractiveQueryClusterRolesWorkerNodeAutoscaleRecurrenceScheduleÊ
Ç
days*" The days of the week to perform autoscale. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
Z
targetInstanceCount ?The number of worker nodes to autoscale at the specified time.
G
time" ;The time of day to perform the autoscale in 24hour format.
:Î
¶
	hdinsight2InteractiveQueryClusterRolesWorkerNodeScriptActionuazure:hdinsight/InteractiveQueryClusterRolesWorkerNodeScriptAction:InteractiveQueryClusterRolesWorkerNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:×

	hdinsight)InteractiveQueryClusterRolesZookeeperNodecazure:hdinsight/InteractiveQueryClusterRolesZookeeperNode:InteractiveQueryClusterRolesZookeeperNode¶
³ð
passwordB" ÝThe Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).
Æ
scriptActionsËBÈ*Å:Â
¿
	hdinsight5InteractiveQueryClusterRolesZookeeperNodeScriptAction{azure:hdinsight/InteractiveQueryClusterRolesZookeeperNodeScriptAction:InteractiveQueryClusterRolesZookeeperNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined above.

sshKeysB*" ìA list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
®
subnetIdB" The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.

username" tThe Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
¤
virtualNetworkIdB" The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:×
¿
	hdinsight5InteractiveQueryClusterRolesZookeeperNodeScriptAction{azure:hdinsight/InteractiveQueryClusterRolesZookeeperNodeScriptAction:InteractiveQueryClusterRolesZookeeperNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:É

	hdinsight&InteractiveQueryClusterSecurityProfile]azure:hdinsight/InteractiveQueryClusterSecurityProfile:InteractiveQueryClusterSecurityProfile±
®
aaddsResourceId" qThe resource ID of the Azure Active Directory Domain Service. Changing this forces a new resource to be created.

clusterUsersGroupDnsB*" rA list of the distinguished names for the cluster user groups. Changing this forces a new resource to be created.
t

domainName" bThe name of the Azure Active Directory Domain. Changing this forces a new resource to be created.

domainUserPassword" kThe user password of the Azure Active Directory Domain. Changing this forces a new resource to be created.
|
domainUsername" fThe username of the Azure Active Directory Domain. Changing this forces a new resource to be created.

	ldapsUrls*" |A list of the LDAPS URLs to communicate with the Azure Active Directory. Changing this forces a new resource to be created.
~
msiResourceId" iThe User Assigned Identity for the HDInsight Cluster. Changing this forces a new resource to be created.
:â

	hdinsight%InteractiveQueryClusterStorageAccount[azure:hdinsight/InteractiveQueryClusterStorageAccount:InteractiveQueryClusterStorageAccountÍ
Êõ
	isDefault
 ãIs this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.

> **NOTE:** One of the `storage_account` or `storage_account_gen2` blocks must be marked as the default.

storageAccountKey" zThe Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
Ê
storageContainerId" ¯The ID of the Storage Container. Changing this forces a new resource to be created.

> **NOTE:** This can be obtained from the `id` of the `azure.storage.Container` resource.
m
storageResourceIdB" RThe ID of the Storage Account. Changing this forces a new resource to be created.
:é

	hdinsight)InteractiveQueryClusterStorageAccountGen2cazure:hdinsight/InteractiveQueryClusterStorageAccountGen2:InteractiveQueryClusterStorageAccountGen2È
Åf
filesystemId" RThe ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
õ
	isDefault
 ãIs this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.

> **NOTE:** One of the `storage_account` or `storage_account_gen2` blocks must be marked as the default.
õ
managedIdentityResourceId" ÓThe ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.

> **NOTE:** This can be obtained from the `id` of the `azure.storage.Container` resource.
k
storageResourceId" RThe ID of the Storage Account. Changing this forces a new resource to be created.
:
t
	hdinsightKafkaClusterComponentVersionIazure:hdinsight/KafkaClusterComponentVersion:KafkaClusterComponentVersion

kafka" The version of Kafka which should be used for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.
:²
t
	hdinsightKafkaClusterComputeIsolationIazure:hdinsight/KafkaClusterComputeIsolation:KafkaClusterComputeIsolation¹
¶
computeIsolationEnabledB
 eThis field indicates whether enable compute isolation or not. Possible values are `true` or `false`.
+
hostSkuB" The name of the host SKU.
:
n
	hdinsightKafkaClusterDiskEncryptionEazure:hdinsight/KafkaClusterDiskEncryption:KafkaClusterDiskEncryption

encryptionAlgorithmB" jThis is an algorithm identifier for encryption. Possible values are `RSA1_5`, `RSA-OAEP`, `RSA-OAEP-256`.
h
encryptionAtHostEnabledB
 GThis is indicator to show whether resource disk encryption is enabled.
4
keyVaultKeyIdB" The ID of the key vault key.
m
keyVaultManagedIdentityIdB" JThis is the resource ID of Managed Identity used to access the key vault.
:ÿ
_
	hdinsightKafkaClusterExtension;azure:hdinsight/KafkaClusterExtension:KafkaClusterExtension
P
logAnalyticsWorkspaceId" 1The workspace ID of the log analytics extension.
D

primaryKey" 2The workspace key of the log analytics extension.
:
Y
	hdinsightKafkaClusterGateway7azure:hdinsight/KafkaClusterGateway:KafkaClusterGateway¬
©¸
password" §The password used for the Ambari Portal.

> **NOTE:** This password must be different from the one used for the `head_node`, `worker_node` and `zookeeper_node` roles.
l
username" \The username used for the Ambari Portal. Changing this forces a new resource to be created.
:á
b
	hdinsightKafkaClusterMetastores=azure:hdinsight/KafkaClusterMetastores:KafkaClusterMetastoresú
÷ª
ambarizBx:v
t
	hdinsightKafkaClusterMetastoresAmbariIazure:hdinsight/KafkaClusterMetastoresAmbari:KafkaClusterMetastoresAmbari$An `ambari` block as defined below.

hivetBr:p
n
	hdinsightKafkaClusterMetastoresHiveEazure:hdinsight/KafkaClusterMetastoresHive:KafkaClusterMetastoresHive!A `hive` block as defined below.
¥
ooziewBu:s
q
	hdinsightKafkaClusterMetastoresOozieGazure:hdinsight/KafkaClusterMetastoresOozie:KafkaClusterMetastoresOozie#An `oozie` block as defined below.
:¶
t
	hdinsightKafkaClusterMetastoresAmbariIazure:hdinsight/KafkaClusterMetastoresAmbari:KafkaClusterMetastoresAmbari½
º|
databaseName" hThe external Hive metastore's existing SQL database. Changing this forces a new resource to be created.

password" wThe external Ambari metastore's existing SQL server admin password. Changing this forces a new resource to be created.
¥
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore. Changing this forces a new resource to be created.

username" wThe external Ambari metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:ª
n
	hdinsightKafkaClusterMetastoresHiveEazure:hdinsight/KafkaClusterMetastoresHive:KafkaClusterMetastoresHive·
´|
databaseName" hThe external Hive metastore's existing SQL database. Changing this forces a new resource to be created.

password" uThe external Hive metastore's existing SQL server admin password. Changing this forces a new resource to be created.
£
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore. Changing this forces a new resource to be created.

username" uThe external Hive metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:±
q
	hdinsightKafkaClusterMetastoresOozieGazure:hdinsight/KafkaClusterMetastoresOozie:KafkaClusterMetastoresOozie»
¸}
databaseName" iThe external Oozie metastore's existing SQL database. Changing this forces a new resource to be created.

password" vThe external Oozie metastore's existing SQL server admin password. Changing this forces a new resource to be created.
¤
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore. Changing this forces a new resource to be created.

username" vThe external Oozie metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:ÿ
Y
	hdinsightKafkaClusterMonitor7azure:hdinsight/KafkaClusterMonitor:KafkaClusterMonitor¡
S
logAnalyticsWorkspaceId" 4The Operations Management Suite (OMS) workspace ID.
G

primaryKey" 5The Operations Management Suite (OMS) workspace key.
:¿
Y
	hdinsightKafkaClusterNetwork7azure:hdinsight/KafkaClusterNetwork:KafkaClusterNetworká
Þ«
connectionDirectionB" The direction of the resource provider connection. Possible values include `Inbound` or `Outbound`. Defaults to `Inbound`. Changing this forces a new resource to be created.

> **NOTE:** To enabled the private link the `connection_direction` must be set to `Outbound`.
­
privateLinkEnabledB
 Is the private link enabled? Possible values include `true` or `false`. Defaults to `false`. Changing this forces a new resource to be created.
:à

	hdinsight$KafkaClusterPrivateLinkConfigurationYazure:hdinsight/KafkaClusterPrivateLinkConfiguration:KafkaClusterPrivateLinkConfigurationÎ
Ë9
groupId" *The ID of the private link service group.
Ó
ipConfiguration¿:¼
¹
	hdinsight3KafkaClusterPrivateLinkConfigurationIpConfigurationwazure:hdinsight/KafkaClusterPrivateLinkConfigurationIpConfiguration:KafkaClusterPrivateLinkConfigurationIpConfiguration8
name" ,The name of the private link configuration.
:Î
¹
	hdinsight3KafkaClusterPrivateLinkConfigurationIpConfigurationwazure:hdinsight/KafkaClusterPrivateLinkConfigurationIpConfiguration:KafkaClusterPrivateLinkConfigurationIpConfiguration
t
name" hSpecifies the name for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.
E
primaryB
 4Indicates whether this IP configuration is primary.
J
privateIpAddressB" 0The private IP address of the IP configuration.
o
privateIpAllocationMethodB" LThe private IP allocation method. The only possible value now is `Dynamic`.

subnetIdB" :Ê
_
	hdinsightKafkaClusterRestProxy;azure:hdinsight/KafkaClusterRestProxy:KafkaClusterRestProxyæ
ãx
securityGroupId" aThe Azure Active Directory Security Group ID. Changing this forces a new resource to be created.
æ
securityGroupName" ÌThe Azure Active Directory Security Group name. Changing this forces a new resource to be created.

> **Note:** The `security_group_name` property will be Required in version 3.0 of the AzureRM Provider.
:¨
S
	hdinsightKafkaClusterRoles3azure:hdinsight/KafkaClusterRoles:KafkaClusterRolesÐ
Í£
headNodeo:m
k
	hdinsightKafkaClusterRolesHeadNodeCazure:hdinsight/KafkaClusterRolesHeadNode:KafkaClusterRolesHeadNode&A `head_node` block as defined above.
µ
kafkaManagementNodeB:

	hdinsight$KafkaClusterRolesKafkaManagementNodeYazure:hdinsight/KafkaClusterRolesKafkaManagementNode:KafkaClusterRolesKafkaManagementNodeA `kafka_management_node` block as defined below.

> **Note:** This property has been deprecated and will be removed in version 4.0.
­

workerNodeu:s
q
	hdinsightKafkaClusterRolesWorkerNodeGazure:hdinsight/KafkaClusterRolesWorkerNode:KafkaClusterRolesWorkerNode(A `worker_node` block as defined below.
¼
zookeeperNode~:|
z
	hdinsightKafkaClusterRolesZookeeperNodeMazure:hdinsight/KafkaClusterRolesZookeeperNode:KafkaClusterRolesZookeeperNode+A `zookeeper_node` block as defined below.
:×
k
	hdinsightKafkaClusterRolesHeadNodeCazure:hdinsight/KafkaClusterRolesHeadNode:KafkaClusterRolesHeadNodeç
äë
passwordB" ØThe Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).

scriptActionsB*:

	hdinsight%KafkaClusterRolesHeadNodeScriptAction[azure:hdinsight/KafkaClusterRolesHeadNodeScriptAction:KafkaClusterRolesHeadNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined below.
û
sshKeysB*" çA list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
©
subnetIdB" The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.

username" oThe Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.

virtualNetworkIdB" The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" þThe Size of the Virtual Machine which should be used as the Head Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:§

	hdinsight%KafkaClusterRolesHeadNodeScriptAction[azure:hdinsight/KafkaClusterRolesHeadNodeScriptAction:KafkaClusterRolesHeadNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:ß

	hdinsight$KafkaClusterRolesKafkaManagementNodeYazure:hdinsight/KafkaClusterRolesKafkaManagementNode:KafkaClusterRolesKafkaManagementNodeÍ
Ê÷
passwordB" äThe Password associated with the local administrator for the Kafka Management Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).
·
scriptActions¼B¹*¶:³
°
	hdinsight0KafkaClusterRolesKafkaManagementNodeScriptActionqazure:hdinsight/KafkaClusterRolesKafkaManagementNodeScriptAction:KafkaClusterRolesKafkaManagementNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined below.

sshKeysB*" óA list of SSH Keys which should be used for the local administrator on the Kafka Management Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
µ
subnetIdB" ¢The ID of the Subnet within the Virtual Network where the Kafka Management Nodes should be provisioned within. Changing this forces a new resource to be created.

usernameB" ôThe Username of the local administrator for the Kafka Management Nodes.

> **NOTE:** The `username` value is automatically generated by the service and cannot be user specified. This property will become `Computed` only in 4.0 of the provider.
«
virtualNetworkIdB" The ID of the Virtual Network where the Kafka Management Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" The Size of the Virtual Machine which should be used as the Kafka Management Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:È
°
	hdinsight0KafkaClusterRolesKafkaManagementNodeScriptActionqazure:hdinsight/KafkaClusterRolesKafkaManagementNodeScriptAction:KafkaClusterRolesKafkaManagementNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:
q
	hdinsightKafkaClusterRolesWorkerNodeGazure:hdinsight/KafkaClusterRolesWorkerNode:KafkaClusterRolesWorkerNode
µ
numberOfDisksPerNode The number of Data Disks which should be assigned to each Worker Node, which can be between 1 and 8. Changing this forces a new resource to be created.
í
passwordB" ÚThe Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).

scriptActions¡B*:

	hdinsight'KafkaClusterRolesWorkerNodeScriptAction_azure:hdinsight/KafkaClusterRolesWorkerNodeScriptAction:KafkaClusterRolesWorkerNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined below.
ý
sshKeysB*" éA list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
«
subnetIdB" The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
]
targetInstanceCount BThe number of instances which should be run for the Worker Nodes.

username" qThe Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
¡
virtualNetworkIdB" The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" The Size of the Virtual Machine which should be used as the Worker Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:­

	hdinsight'KafkaClusterRolesWorkerNodeScriptAction_azure:hdinsight/KafkaClusterRolesWorkerNodeScriptAction:KafkaClusterRolesWorkerNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:
z
	hdinsightKafkaClusterRolesZookeeperNodeMazure:hdinsight/KafkaClusterRolesZookeeperNode:KafkaClusterRolesZookeeperNode
ð
passwordB" ÝThe Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).
¥
scriptActionsªB§*¤:¡

	hdinsight*KafkaClusterRolesZookeeperNodeScriptActioneazure:hdinsight/KafkaClusterRolesZookeeperNodeScriptAction:KafkaClusterRolesZookeeperNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined below.

sshKeysB*" ìA list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
®
subnetIdB" The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.

username" tThe Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
¤
virtualNetworkIdB" The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:¶

	hdinsight*KafkaClusterRolesZookeeperNodeScriptActioneazure:hdinsight/KafkaClusterRolesZookeeperNodeScriptAction:KafkaClusterRolesZookeeperNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:§
q
	hdinsightKafkaClusterSecurityProfileGazure:hdinsight/KafkaClusterSecurityProfile:KafkaClusterSecurityProfile±
®
aaddsResourceId" qThe resource ID of the Azure Active Directory Domain Service. Changing this forces a new resource to be created.

clusterUsersGroupDnsB*" rA list of the distinguished names for the cluster user groups. Changing this forces a new resource to be created.
t

domainName" bThe name of the Azure Active Directory Domain. Changing this forces a new resource to be created.

domainUserPassword" kThe user password of the Azure Active Directory Domain. Changing this forces a new resource to be created.
|
domainUsername" fThe username of the Azure Active Directory Domain. Changing this forces a new resource to be created.

	ldapsUrls*" |A list of the LDAPS URLs to communicate with the Azure Active Directory. Changing this forces a new resource to be created.
~
msiResourceId" iThe User Assigned Identity for the HDInsight Cluster. Changing this forces a new resource to be created.
:À
n
	hdinsightKafkaClusterStorageAccountEazure:hdinsight/KafkaClusterStorageAccount:KafkaClusterStorageAccountÍ
Êõ
	isDefault
 ãIs this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.

> **NOTE:** One of the `storage_account` or `storage_account_gen2` blocks must be marked as the default.

storageAccountKey" zThe Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
Ê
storageContainerId" ¯The ID of the Storage Container. Changing this forces a new resource to be created.

> **NOTE:** This can be obtained from the `id` of the `azure.storage.Container` resource.
m
storageResourceIdB" RThe ID of the Storage Account. Changing this forces a new resource to be created.
:Ç
z
	hdinsightKafkaClusterStorageAccountGen2Mazure:hdinsight/KafkaClusterStorageAccountGen2:KafkaClusterStorageAccountGen2È
Åf
filesystemId" RThe ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
õ
	isDefault
 ãIs this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.

> **NOTE:** One of the `storage_account` or `storage_account_gen2` blocks must be marked as the default.
õ
managedIdentityResourceId" ÓThe ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.

> **NOTE:** This can be obtained from the `id` of the `azure.storage.Container` resource.
k
storageResourceId" RThe ID of the Storage Account. Changing this forces a new resource to be created.
:
t
	hdinsightSparkClusterComponentVersionIazure:hdinsight/SparkClusterComponentVersion:SparkClusterComponentVersion

spark" The version of Spark which should be used for this HDInsight Spark Cluster. Changing this forces a new resource to be created.
:²
t
	hdinsightSparkClusterComputeIsolationIazure:hdinsight/SparkClusterComputeIsolation:SparkClusterComputeIsolation¹
¶
computeIsolationEnabledB
 eThis field indicates whether enable compute isolation or not. Possible values are `true` or `false`.
+
hostSkuB" The name of the host SKU.
:
n
	hdinsightSparkClusterDiskEncryptionEazure:hdinsight/SparkClusterDiskEncryption:SparkClusterDiskEncryption

encryptionAlgorithmB" jThis is an algorithm identifier for encryption. Possible values are `RSA1_5`, `RSA-OAEP`, `RSA-OAEP-256`.
h
encryptionAtHostEnabledB
 GThis is indicator to show whether resource disk encryption is enabled.
4
keyVaultKeyIdB" The ID of the key vault key.
m
keyVaultManagedIdentityIdB" JThis is the resource ID of Managed Identity used to access the key vault.
:ÿ
_
	hdinsightSparkClusterExtension;azure:hdinsight/SparkClusterExtension:SparkClusterExtension
P
logAnalyticsWorkspaceId" 1The workspace ID of the log analytics extension.
D

primaryKey" 2The workspace key of the log analytics extension.
:
Y
	hdinsightSparkClusterGateway7azure:hdinsight/SparkClusterGateway:SparkClusterGateway¬
©¸
password" §The password used for the Ambari Portal.

> **NOTE:** This password must be different from the one used for the `head_node`, `worker_node` and `zookeeper_node` roles.
l
username" \The username used for the Ambari Portal. Changing this forces a new resource to be created.
:á
b
	hdinsightSparkClusterMetastores=azure:hdinsight/SparkClusterMetastores:SparkClusterMetastoresú
÷ª
ambarizBx:v
t
	hdinsightSparkClusterMetastoresAmbariIazure:hdinsight/SparkClusterMetastoresAmbari:SparkClusterMetastoresAmbari$An `ambari` block as defined below.

hivetBr:p
n
	hdinsightSparkClusterMetastoresHiveEazure:hdinsight/SparkClusterMetastoresHive:SparkClusterMetastoresHive!A `hive` block as defined below.
¥
ooziewBu:s
q
	hdinsightSparkClusterMetastoresOozieGazure:hdinsight/SparkClusterMetastoresOozie:SparkClusterMetastoresOozie#An `oozie` block as defined below.
:¶
t
	hdinsightSparkClusterMetastoresAmbariIazure:hdinsight/SparkClusterMetastoresAmbari:SparkClusterMetastoresAmbari½
º|
databaseName" hThe external Hive metastore's existing SQL database. Changing this forces a new resource to be created.

password" wThe external Ambari metastore's existing SQL server admin password. Changing this forces a new resource to be created.
¥
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Ambari metastore. Changing this forces a new resource to be created.

username" wThe external Ambari metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:ª
n
	hdinsightSparkClusterMetastoresHiveEazure:hdinsight/SparkClusterMetastoresHive:SparkClusterMetastoresHive·
´|
databaseName" hThe external Hive metastore's existing SQL database. Changing this forces a new resource to be created.

password" uThe external Hive metastore's existing SQL server admin password. Changing this forces a new resource to be created.
£
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Hive metastore. Changing this forces a new resource to be created.

username" uThe external Hive metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:±
q
	hdinsightSparkClusterMetastoresOozieGazure:hdinsight/SparkClusterMetastoresOozie:SparkClusterMetastoresOozie»
¸}
databaseName" iThe external Oozie metastore's existing SQL database. Changing this forces a new resource to be created.

password" vThe external Oozie metastore's existing SQL server admin password. Changing this forces a new resource to be created.
¤
server" The fully-qualified domain name (FQDN) of the SQL server to use for the external Oozie metastore. Changing this forces a new resource to be created.

username" vThe external Oozie metastore's existing SQL server admin username. Changing this forces a new resource to be created.
:ÿ
Y
	hdinsightSparkClusterMonitor7azure:hdinsight/SparkClusterMonitor:SparkClusterMonitor¡
S
logAnalyticsWorkspaceId" 4The Operations Management Suite (OMS) workspace ID.
G

primaryKey" 5The Operations Management Suite (OMS) workspace key.
:¿
Y
	hdinsightSparkClusterNetwork7azure:hdinsight/SparkClusterNetwork:SparkClusterNetworká
Þ«
connectionDirectionB" The direction of the resource provider connection. Possible values include `Inbound` or `Outbound`. Defaults to `Inbound`. Changing this forces a new resource to be created.

> **NOTE:** To enabled the private link the `connection_direction` must be set to `Outbound`.
­
privateLinkEnabledB
 Is the private link enabled? Possible values include `true` or `false`. Defaults to `false`. Changing this forces a new resource to be created.
:à

	hdinsight$SparkClusterPrivateLinkConfigurationYazure:hdinsight/SparkClusterPrivateLinkConfiguration:SparkClusterPrivateLinkConfigurationÎ
Ë9
groupId" *The ID of the private link service group.
Ó
ipConfiguration¿:¼
¹
	hdinsight3SparkClusterPrivateLinkConfigurationIpConfigurationwazure:hdinsight/SparkClusterPrivateLinkConfigurationIpConfiguration:SparkClusterPrivateLinkConfigurationIpConfiguration8
name" ,The name of the private link configuration.
:Î
¹
	hdinsight3SparkClusterPrivateLinkConfigurationIpConfigurationwazure:hdinsight/SparkClusterPrivateLinkConfigurationIpConfiguration:SparkClusterPrivateLinkConfigurationIpConfiguration
t
name" hSpecifies the name for this HDInsight Spark Cluster. Changing this forces a new resource to be created.
E
primaryB
 4Indicates whether this IP configuration is primary.
J
privateIpAddressB" 0The private IP address of the IP configuration.
o
privateIpAllocationMethodB" LThe private IP allocation method. The only possible value now is `Dynamic`.

subnetIdB" :ð
S
	hdinsightSparkClusterRoles3azure:hdinsight/SparkClusterRoles:SparkClusterRoles
£
headNodeo:m
k
	hdinsightSparkClusterRolesHeadNodeCazure:hdinsight/SparkClusterRolesHeadNode:SparkClusterRolesHeadNode&A `head_node` block as defined above.
­

workerNodeu:s
q
	hdinsightSparkClusterRolesWorkerNodeGazure:hdinsight/SparkClusterRolesWorkerNode:SparkClusterRolesWorkerNode(A `worker_node` block as defined below.
¼
zookeeperNode~:|
z
	hdinsightSparkClusterRolesZookeeperNodeMazure:hdinsight/SparkClusterRolesZookeeperNode:SparkClusterRolesZookeeperNode+A `zookeeper_node` block as defined below.
:Ç
k
	hdinsightSparkClusterRolesHeadNodeCazure:hdinsight/SparkClusterRolesHeadNode:SparkClusterRolesHeadNode×
Ôë
passwordB" ØThe Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).

scriptActionsB*:

	hdinsight%SparkClusterRolesHeadNodeScriptAction[azure:hdinsight/SparkClusterRolesHeadNodeScriptAction:SparkClusterRolesHeadNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined below.
û
sshKeysB*" çA list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
©
subnetIdB" The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.

username" oThe Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.

virtualNetworkIdB" The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
ý
vmSize" îThe Size of the Virtual Machine which should be used as the Head Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:§

	hdinsight%SparkClusterRolesHeadNodeScriptAction[azure:hdinsight/SparkClusterRolesHeadNodeScriptAction:SparkClusterRolesHeadNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:
q
	hdinsightSparkClusterRolesWorkerNodeGazure:hdinsight/SparkClusterRolesWorkerNode:SparkClusterRolesWorkerNode§
¤Ë
	autoscaleB:

	hdinsight$SparkClusterRolesWorkerNodeAutoscaleYazure:hdinsight/SparkClusterRolesWorkerNodeAutoscale:SparkClusterRolesWorkerNodeAutoscale&A `autoscale` block as defined below.
í
passwordB" ÚThe Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).

scriptActions¡B*:

	hdinsight'SparkClusterRolesWorkerNodeScriptAction_azure:hdinsight/SparkClusterRolesWorkerNodeScriptAction:SparkClusterRolesWorkerNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined above.
ý
sshKeysB*" éA list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
«
subnetIdB" The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
]
targetInstanceCount BThe number of instances which should be run for the Worker Nodes.

username" qThe Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
¡
virtualNetworkIdB" The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" The Size of the Virtual Machine which should be used as the Worker Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:Á

	hdinsight$SparkClusterRolesWorkerNodeAutoscaleYazure:hdinsight/SparkClusterRolesWorkerNodeAutoscale:SparkClusterRolesWorkerNodeAutoscale¯
¬á
capacity­Bª:§
¤
	hdinsight,SparkClusterRolesWorkerNodeAutoscaleCapacityiazure:hdinsight/SparkClusterRolesWorkerNodeAutoscaleCapacity:SparkClusterRolesWorkerNodeAutoscaleCapacity%A `capacity` block as defined below.
Å

recurrence³B°:­
ª
	hdinsight.SparkClusterRolesWorkerNodeAutoscaleRecurrencemazure:hdinsight/SparkClusterRolesWorkerNodeAutoscaleRecurrence:SparkClusterRolesWorkerNodeAutoscaleRecurrenceA `recurrence` block as defined below.

> **NOTE:** Either a `capacity` or `recurrence` block must be specified - but not both.
:
¤
	hdinsight,SparkClusterRolesWorkerNodeAutoscaleCapacityiazure:hdinsight/SparkClusterRolesWorkerNodeAutoscaleCapacity:SparkClusterRolesWorkerNodeAutoscaleCapacityß
Ül
maxInstanceCount TThe maximum number of worker nodes to autoscale to based on the cluster's activity.
l
minInstanceCount TThe minimum number of worker nodes to autoscale to based on the cluster's activity.
:
ª
	hdinsight.SparkClusterRolesWorkerNodeAutoscaleRecurrencemazure:hdinsight/SparkClusterRolesWorkerNodeAutoscaleRecurrence:SparkClusterRolesWorkerNodeAutoscaleRecurrenceÑ
Î
	schedulesË*È:Å
Â
	hdinsight6SparkClusterRolesWorkerNodeAutoscaleRecurrenceSchedule}azure:hdinsight/SparkClusterRolesWorkerNodeAutoscaleRecurrenceSchedule:SparkClusterRolesWorkerNodeAutoscaleRecurrenceSchedule.A list of `schedule` blocks as defined below.
@
timezone" 0The time zone for the autoscale schedule times.
:
Â
	hdinsight6SparkClusterRolesWorkerNodeAutoscaleRecurrenceSchedule}azure:hdinsight/SparkClusterRolesWorkerNodeAutoscaleRecurrenceSchedule:SparkClusterRolesWorkerNodeAutoscaleRecurrenceScheduleÊ
Ç
days*" The days of the week to perform autoscale. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
Z
targetInstanceCount ?The number of worker nodes to autoscale at the specified time.
G
time" ;The time of day to perform the autoscale in 24hour format.
:­

	hdinsight'SparkClusterRolesWorkerNodeScriptAction_azure:hdinsight/SparkClusterRolesWorkerNodeScriptAction:SparkClusterRolesWorkerNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:
z
	hdinsightSparkClusterRolesZookeeperNodeMazure:hdinsight/SparkClusterRolesZookeeperNode:SparkClusterRolesZookeeperNode
ð
passwordB" ÝThe Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.

> **NOTE:** If specified, this password must be at least 10 characters in length and must contain at least one digit, one uppercase and one lower case letter, one non-alphanumeric character (except characters ' " ` \).
¥
scriptActionsªB§*¤:¡

	hdinsight*SparkClusterRolesZookeeperNodeScriptActioneazure:hdinsight/SparkClusterRolesZookeeperNodeScriptAction:SparkClusterRolesZookeeperNodeScriptActiongThe script action which will run on the cluster. One or more `script_actions` blocks as defined above.

sshKeysB*" ìA list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.

> **NOTE:** Either a `password` or one or more `ssh_keys` must be specified - but not both.
®
subnetIdB" The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.

username" tThe Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
¤
virtualNetworkIdB" The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.

vmSize" The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Possible values are `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge`, `A5`, `A6`, `A7`, `A8`, `A9`, `A10`, `A11`, `Standard_A1_V2`, `Standard_A2_V2`, `Standard_A2m_V2`, `Standard_A3`, `Standard_A4_V2`, `Standard_A4m_V2`, `Standard_A8_V2`, `Standard_A8m_V2`, `Standard_D1`, `Standard_D2`, `Standard_D3`, `Standard_D4`, `Standard_D11`, `Standard_D12`, `Standard_D13`, `Standard_D14`, `Standard_D1_V2`, `Standard_D2_V2`, `Standard_D3_V2`, `Standard_D4_V2`, `Standard_D5_V2`, `Standard_D11_V2`, `Standard_D12_V2`, `Standard_D13_V2`, `Standard_D14_V2`, `Standard_DS1_V2`, `Standard_DS2_V2`, `Standard_DS3_V2`, `Standard_DS4_V2`, `Standard_DS5_V2`, `Standard_DS11_V2`, `Standard_DS12_V2`, `Standard_DS13_V2`, `Standard_DS14_V2`, `Standard_E2_V3`, `Standard_E4_V3`, `Standard_E8_V3`, `Standard_E16_V3`, `Standard_E20_V3`, `Standard_E32_V3`, `Standard_E64_V3`, `Standard_E64i_V3`, `Standard_E2s_V3`, `Standard_E4s_V3`, `Standard_E8s_V3`, `Standard_E16s_V3`, `Standard_E20s_V3`, `Standard_E32s_V3`, `Standard_E64s_V3`, `Standard_E64is_V3`, `Standard_D2a_V4`, `Standard_D4a_V4`, `Standard_D8a_V4`, `Standard_D16a_V4`, `Standard_D32a_V4`, `Standard_D48a_V4`, `Standard_D64a_V4`, `Standard_D96a_V4`, `Standard_E2a_V4`, `Standard_E4a_V4`, `Standard_E8a_V4`, `Standard_E16a_V4`, `Standard_E20a_V4`, `Standard_E32a_V4`, `Standard_E48a_V4`, `Standard_E64a_V4`, `Standard_E96a_V4`, `Standard_D2ads_V5`, `Standard_D4ads_V5`, `Standard_D8ads_V5`, `Standard_D16ads_V5`, `Standard_D32ads_V5`, `Standard_D48ads_V5`, `Standard_D64ads_V5`, `Standard_D96ads_V5`, `Standard_E2ads_V5`, `Standard_E4ads_V5`, `Standard_E8ads_V5`, `Standard_E16ads_V5`, `Standard_E20ads_V5`, `Standard_E32ads_V5`, `Standard_E48ads_V5`, `Standard_E64ads_V5`, `Standard_E96ads_V5`, `Standard_G1`, `Standard_G2`, `Standard_G3`, `Standard_G4`, `Standard_G5`, `Standard_F2s_V2`, `Standard_F4s_V2`, `Standard_F8s_V2`, `Standard_F16s_V2`, `Standard_F32s_V2`, `Standard_F64s_V2`, `Standard_F72s_V2`, `Standard_GS1`, `Standard_GS2`, `Standard_GS3`, `Standard_GS4`, `Standard_GS5` and `Standard_NC24`. Changing this forces a new resource to be created.
:¶

	hdinsight*SparkClusterRolesZookeeperNodeScriptActioneazure:hdinsight/SparkClusterRolesZookeeperNodeScriptAction:SparkClusterRolesZookeeperNodeScriptAction
+
name" The name of the script action.
<

parametersB" (The parameters for the script provided.
"
uri" The URI to the script.
:§
q
	hdinsightSparkClusterSecurityProfileGazure:hdinsight/SparkClusterSecurityProfile:SparkClusterSecurityProfile±
®
aaddsResourceId" qThe resource ID of the Azure Active Directory Domain Service. Changing this forces a new resource to be created.

clusterUsersGroupDnsB*" rA list of the distinguished names for the cluster user groups. Changing this forces a new resource to be created.
t

domainName" bThe name of the Azure Active Directory Domain. Changing this forces a new resource to be created.

domainUserPassword" kThe user password of the Azure Active Directory Domain. Changing this forces a new resource to be created.
|
domainUsername" fThe username of the Azure Active Directory Domain. Changing this forces a new resource to be created.

	ldapsUrls*" |A list of the LDAPS URLs to communicate with the Azure Active Directory. Changing this forces a new resource to be created.
~
msiResourceId" iThe User Assigned Identity for the HDInsight Cluster. Changing this forces a new resource to be created.
:À
n
	hdinsightSparkClusterStorageAccountEazure:hdinsight/SparkClusterStorageAccount:SparkClusterStorageAccountÍ
Êõ
	isDefault
 ãIs this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.

> **NOTE:** One of the `storage_account` or `storage_account_gen2` blocks must be marked as the default.

storageAccountKey" zThe Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
Ê
storageContainerId" ¯The ID of the Storage Container. Changing this forces a new resource to be created.

> **NOTE:** This can be obtained from the `id` of the `azure.storage.Container` resource.
m
storageResourceIdB" RThe ID of the Storage Account. Changing this forces a new resource to be created.
:Ç
z
	hdinsightSparkClusterStorageAccountGen2Mazure:hdinsight/SparkClusterStorageAccountGen2:SparkClusterStorageAccountGen2È
Åf
filesystemId" RThe ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
õ
	isDefault
 ãIs this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.

> **NOTE:** One of the `storage_account` or `storage_account_gen2` blocks must be marked as the default.
õ
managedIdentityResourceId" ÓThe ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.

> **NOTE:** This can be obtained from the `id` of the `azure.storage.Container` resource.
k
storageResourceId" RThe ID of the Storage Account. Changing this forces a new resource to be created.
:
S
	hdinsightgetClusterGateway3azure:hdinsight/getClusterGateway:getClusterGateway¨
¥-
enabled
 Is the Ambari Portal enabled?
9
password" )The password used for the Ambari Portal.
9
username" )The username used for the Ambari Portal.
:¯
p

healthcareDicomServiceAuthenticationFazure:healthcare/DicomServiceAuthentication:DicomServiceAuthenticationº
·¡
	audiencesB*" The intended audience to receive authentication tokens for the service. The default value is <https://dicom.azurehealthcareapis.azure.com>

	authorityB" :ì
^

healthcareDicomServiceIdentity:azure:healthcare/DicomServiceIdentity:DicomServiceIdentity
w
identityIdsB*" `A list of User Assigned Identity IDs which should be assigned to this Healthcare DICOM service.

principalIdB" 
tenantIdB" ã
type" ÖThe type of identity used for the Healthcare DICOM service. Possible values are `UserAssigned`, `SystemAssigned` and `SystemAssigned, UserAssigned`. If `UserAssigned` is set, an `identity_ids` must be set as well.
:¹
s

healthcareDicomServicePrivateEndpointHazure:healthcare/DicomServicePrivateEndpoint:DicomServicePrivateEndpointÁ
¾4
idB" (The ID of the Healthcare DICOM Service.

nameB" wSpecifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
:
m

healthcareFhirServiceAuthenticationDazure:healthcare/FhirServiceAuthentication:FhirServiceAuthentication«
¨X
audience" HThe intended audience to receive authentication tokens for the service.

	authority" ;
smartProxyEnabledB
  Whether smart proxy is enabled.
:û
O

healthcareFhirServiceCors0azure:healthcare/FhirServiceCors:FhirServiceCors§
¤A
allowedHeaders*" )A set of headers to be allowed via CORS.

allowedMethods*" The methods to be allowed via CORS. Possible values are `DELETE`, `GET`, `HEAD`, `MERGE`, `POST`, `OPTIONS`, `PATCH` and `PUT`.
A
allowedOrigins*" )A set of origins to be allowed via CORS.
A
credentialsAllowedB
 %If credentials are allowed via CORS.
=
maxAgeInSecondsB $The max age to be allowed via CORS.
:
[

healthcareFhirServiceIdentity8azure:healthcare/FhirServiceIdentity:FhirServiceIdentity¶
³
identityIdsB*" A list of one or more Resource IDs for User Assigned Managed identities to assign. Required when `type` is set to `UserAssigned`.

principalIdB" 
tenantIdB" m
type" aThe type of managed identity to assign. Possible values are `UserAssigned` and `SystemAssigned`.
:Ý
d

healthcareFhirServiceOciArtifact>azure:healthcare/FhirServiceOciArtifact:FhirServiceOciArtifactô
ñ
digestB" A digest of an image within Azure container registry used for export operations of the service instance to narrow the artifacts down.
p
	imageNameB" ]An image within Azure container registry used for export operations of the service instance.
c
loginServer" PAn Azure container registry used for export operations of the service instance.
:Ý
d

healthcareMedtechServiceIdentity>azure:healthcare/MedtechServiceIdentity:MedtechServiceIdentityô
ñ
identityIdsB*" kSpecifies a list of User Assigned Managed Identity IDs to be assigned to this Healthcare Med Tech Service.
e
principalIdB" PThe Principal ID associated with this System Assigned Managed Service Identity.
_
tenantIdB" MThe Tenant ID associated with this System Assigned Managed Service Identity.
¡
type" Specifies the type of Managed Service Identity that should be configured on this Healthcare Med Tech Service. Possible values are `SystemAssigned`.
:í


healthcare"ServiceAuthenticationConfigurationVazure:healthcare/ServiceAuthenticationConfiguration:ServiceAuthenticationConfigurationß
Ü
audienceB" }The intended audience to receive authentication tokens for the service. The default value is https://azurehealthcareapis.com
Ù
	authorityB" ÅThe Azure Active Directory (tenant) that serves as the authentication authority to access the service. The default authority is the Directory defined in the authentication scheme in use when running this provider.
Authority must be registered to Azure AD and in the following format: https://{Azure-AD-endpoint}/{tenant-id}.
l
smartProxyEnabledB
 Q(Boolean) Enables the 'SMART on FHIR' option for mobile and web implementations.
:¤
j

healthcareServiceCorsConfigurationBazure:healthcare/ServiceCorsConfiguration:ServiceCorsConfigurationµ
²I
allowCredentialsB
 /(Boolean) If credentials are allowed via CORS.
C
allowedHeadersB*" )A set of headers to be allowed via CORS.

allowedMethodsB*" The methods to be allowed via CORS. Possible values are `DELETE`, `GET`, `HEAD`, `MERGE`, `POST`, `OPTIONS`, `PATCH` and `PUT`.
C
allowedOriginsB*" )A set of origins to be allowed via CORS.
=
maxAgeInSecondsB $The max age to be allowed via CORS.
:á
O

healthcareServiceIdentity0azure:healthcare/ServiceIdentity:ServiceIdentity

principalIdB" 
tenantIdB" a
type" UThe type of managed identity to assign. The only possible value is `SystemAssigned`.
:Â


healthcare"WorkspacePrivateEndpointConnectionVazure:healthcare/WorkspacePrivateEndpointConnection:WorkspacePrivateEndpointConnection´
±0
idB" $The ID of the Healthcare Workspace.
}
nameB" oSpecifies the name of the Healthcare Workspace. Changing this forces a new Healthcare Workspace to be created.
:´
y

healthcaregetDicomServiceAuthenticationLazure:healthcare/getDicomServiceAuthentication:getDicomServiceAuthentication¶
³
	audiences*" The intended audience to receive authentication tokens for the service. The default value is <https://dicom.azurehealthcareapis.azure.com>

	authority" :±
g

healthcaregetDicomServiceIdentity@azure:healthcare/getDicomServiceIdentity:getDicomServiceIdentityF
D
identityIds*" 
principalId" 
tenantId" 

type" :í
|

healthcaregetDicomServicePrivateEndpointNazure:healthcare/getDicomServicePrivateEndpoint:getDicomServicePrivateEndpointm
k2
id" (The ID of the Healthcare DICOM Service.
5
name" )The name of the Healthcare DICOM Service
:È
v

healthcaregetFhirServiceAuthenticationJazure:healthcare/getFhirServiceAuthentication:getFhirServiceAuthenticationÍ
Ê
audience" The intended audience to receive authentication tokens for the service. The default value is `https://<name>.fhir.azurehealthcareapis.com`.

	authority" 
smartProxyEnabled
 : 
U

healthcaregetFhirServiceCor4azure:healthcare/getFhirServiceCor:getFhirServiceCorÆ
ÃC
allowedHeaders*" +The set of headers to be allowed via CORS.
<
allowedMethods*" $The methods to be allowed via CORS.
C
allowedOrigins*" +The set of origins to be allowed via CORS.
<
credentialsAllowed
 "Are credentials allowed via CORS?
;
maxAgeInSeconds $The max age to be allowed via CORS.
:
d

healthcaregetFhirServiceIdentity>azure:healthcare/getFhirServiceIdentity:getFhirServiceIdentity¥
¢
identityIds*" c
principalId" PThe Principal ID associated with this System Assigned Managed Service Identity.
]
tenantId" MThe Tenant ID associated with this System Assigned Managed Service Identity.
G
type" ;The type of identity used for the Healthcare FHIR service.
:
m

healthcaregetMedtechServiceIdentityDazure:healthcare/getMedtechServiceIdentity:getMedtechServiceIdentity£
 
identityIds*" 
principalId" yThe Principal ID of the System Assigned Managed Service Identity that is configured on this Healthcare Med Tech Service.

tenantId" vThe Tenant ID of the System Assigned Managed Service Identity that is configured on this Healthcare Med Tech Service.
q
type" eThe type of identity used for the Healthcare Med Tech Service. Possible values are `SystemAssigned`.
:Ó


healthcare%getServiceAuthenticationConfiguration\azure:healthcare/getServiceAuthenticationConfiguration:getServiceAuthenticationConfiguration¼
¹X
audience" HThe intended audience to receive authentication tokens for the service.
x
	authority" gThe Azure Active Directory (tenant) that serves as the authentication authority to access the service.
c
smartProxyEnabled
 JIs the 'SMART on FHIR' option for mobile and web implementations enabled?
:À
s

healthcaregetServiceCorsConfigurationHazure:healthcare/getServiceCorsConfiguration:getServiceCorsConfigurationÈ
Å>
allowCredentials
 &Are credentials are allowed via CORS?
C
allowedHeaders*" +The set of headers to be allowed via CORS.
<
allowedMethods*" $The methods to be allowed via CORS.
C
allowedOrigins*" +The set of origins to be allowed via CORS.
;
maxAgeInSeconds $The max age to be allowed via CORS.
:

e
hpcCacheAccessPolicyAccessRuleAazure:hpc/CacheAccessPolicyAccessRule:CacheAccessPolicyAccessRule°	
­	U
access" GThe access level for this rule. Possible values are: `rw`, `ro`, `no`.
S
anonymousGidB =The anonymous GID used when `root_squash_enabled` is `true`.
S
anonymousUidB =The anonymous UID used when `root_squash_enabled` is `true`.
ä
filterB" ÓThe filter applied to the `scope` for this rule. The filter's format depends on its scope: `default` scope matches all clients and has no filter value; `network` scope takes a CIDR format; `host` takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.

rootSquashEnabledB
 iWhether to enable [root squash](https://docs.microsoft.com/azure/hpc-cache/access-policies#root-squash)?
é
scope" ÛThe scope of this rule. The `scope` and (potentially) the `filter` determine which clients match the rule. Possible values are: `default`, `network`, `host`.

> **NOTE:** Each `access_rule` should set a unique `scope`.
]
submountAccessEnabledB
 >Whether allow access to subdirectories under the root export?
q
suidEnabledB
 \Whether [SUID](https://docs.microsoft.com/azure/hpc-cache/access-policies#suid) is allowed?
:º
\
hpcCacheDefaultAccessPolicy;azure:hpc/CacheDefaultAccessPolicy:CacheDefaultAccessPolicyÙ
ÖÓ
accessRules*~:|
z
hpc"CacheDefaultAccessPolicyAccessRuleOazure:hpc/CacheDefaultAccessPolicyAccessRule:CacheDefaultAccessPolicyAccessRuleAOne or more `access_rule` blocks (up to three) as defined above.
:¯

z
hpc"CacheDefaultAccessPolicyAccessRuleOazure:hpc/CacheDefaultAccessPolicyAccessRule:CacheDefaultAccessPolicyAccessRule°	
­	U
access" GThe access level for this rule. Possible values are: `rw`, `ro`, `no`.
S
anonymousGidB =The anonymous GID used when `root_squash_enabled` is `true`.
S
anonymousUidB =The anonymous UID used when `root_squash_enabled` is `true`.
ä
filterB" ÓThe filter applied to the `scope` for this rule. The filter's format depends on its scope: `default` scope matches all clients and has no filter value; `network` scope takes a CIDR format; `host` takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.

rootSquashEnabledB
 iWhether to enable [root squash](https://docs.microsoft.com/azure/hpc-cache/access-policies#root-squash)?
é
scope" ÛThe scope of this rule. The `scope` and (potentially) the `filter` determine which clients match the rule. Possible values are: `default`, `network`, `host`.

> **Note:** Each `access_rule` should set a unique `scope`.
]
submountAccessEnabledB
 >Whether allow access to subdirectories under the root export?
q
suidEnabledB
 \Whether [SUID](https://docs.microsoft.com/azure/hpc-cache/access-policies#suid) is allowed?
:
k
hpcCacheDirectoryActiveDirectoryEazure:hpc/CacheDirectoryActiveDirectory:CacheDirectoryActiveDirectory¦
£{
cacheNetbiosName" cThe NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
n
dnsPrimaryIp" ZThe primary DNS IP address used to resolve the Active Directory domain controller's FQDN.
t
dnsSecondaryIpB" \The secondary DNS IP address used to resolve the Active Directory domain controller's FQDN.
]

domainName" KThe fully qualified domain name of the Active Directory domain controller.
E
domainNetbiosName" ,The Active Directory domain's NetBIOS name.
K
password" ;The password of the Active Directory domain administrator.
K
username" ;The username of the Active Directory domain administrator.
:Ç
V
hpcCacheDirectoryFlatFile7azure:hpc/CacheDirectoryFlatFile:CacheDirectoryFlatFileì
éq
groupFileUri" ]The URI of the file containing group information (`/etc/group` file format in Unix-like OS).
t
passwordFileUri" ]The URI of the file containing user information (`/etc/passwd` file format in Unix-like OS).
:Å
J
hpcCacheDirectoryLdap/azure:hpc/CacheDirectoryLdap:CacheDirectoryLdapö
óD
baseDn" 6The base distinguished name (DN) for the LDAP domain.

bind\BZ:X
V
hpcCacheDirectoryLdapBind7azure:hpc/CacheDirectoryLdapBind:CacheDirectoryLdapBind!A `bind` block as defined above.
h
certificateValidationUriB" FThe URI of the CA certificate to validate the LDAP secure connection.
µ
 downloadCertificateAutomaticallyB
 Whether the certificate should be automatically downloaded. This can be set to `true` only when `certificate_validation_uri` is provided.
D
	encryptedB
 1Whether the LDAP connection should be encrypted?
9
server" +The FQDN or IP address of the LDAP server.
:
V
hpcCacheDirectoryLdapBind7azure:hpc/CacheDirectoryLdapBind:CacheDirectoryLdapBind±
®^
dn" TThe Bind Distinguished Name (DN) identity to be used in the secure LDAP connection.
L
password" <The Bind password to be used in the secure LDAP connection.
:Ù
,
hpcCacheDnsazure:hpc/CacheDns:CacheDns¨
¥?
searchDomainB" )The DNS search domain for the HPC Cache.
b
servers*" QA list of DNS servers for the HPC Cache. At most three IP(s) are allowed to set.
:þ
;
hpcCacheIdentity%azure:hpc/CacheIdentity:CacheIdentity¾
»
identityIdsB*" òSpecifies a list of User Assigned Managed Identity IDs to be assigned to this HPC Cache. Changing this forces a new resource to be created.

> **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
U
principalIdB" @The Principal ID associated with this Managed Service Identity.
O
tenantIdB" =The Tenant ID associated with this Managed Service Identity.

type" öSpecifies the type of Managed Service Identity that should be configured on this HPC Cache. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both). Changing this forces a new resource to be created.
:Ð
q
hpcCacheNfsTargetNamespaceJunctionIazure:hpc/CacheNfsTargetNamespaceJunction:CacheNfsTargetNamespaceJunctionÚ
×g
accessPolicyNameB" MThe name of the access policy applied to this target. Defaults to `default`.
e
namespacePath" PThe client-facing file path of this NFS target within the HPC Cache NFS Target.
T
	nfsExport" CThe NFS export of this NFS target within the HPC Cache NFS Target.
®

targetPathB" The relative subdirectory path from the `nfs_export` to map to the `namespace_path`. Defaults to `""`, in which case the whole `nfs_export` is exported.
:
n
hsmModuleManagementNetworkProfileGazure:hsm/ModuleManagementNetworkProfile:ModuleManagementNetworkProfile¨
¥­
"networkInterfacePrivateIpAddresses*" The private IPv4 address of the network interface. Changing this forces a new Dedicated Hardware Security Module to be created.
s
subnetId" cThe ID of the subnet. Changing this forces a new Dedicated Hardware Security Module to be created.
:ý
P
hsmModuleNetworkProfile3azure:hsm/ModuleNetworkProfile:ModuleNetworkProfile¨
¥­
"networkInterfacePrivateIpAddresses*" The private IPv4 address of the network interface. Changing this forces a new Dedicated Hardware Security Module to be created.
s
subnetId" cThe ID of the subnet. Changing this forces a new Dedicated Hardware Security Module to be created.
:
M
iotIoTHubCloudToDevice1azure:iot/IoTHubCloudToDevice:IoTHubCloudToDevice·
´ò

defaultTtlB" ÝThe default time to live for cloud-to-device messages, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
¡
	feedbacksmBk*i:g
e
iotIoTHubCloudToDeviceFeedbackAazure:iot/IoTHubCloudToDeviceFeedback:IoTHubCloudToDeviceFeedback%A `feedback` block as defined below.

maxDeliveryCountB ~The maximum delivery count for cloud-to-device per-device queues. This value must be between `1` and `100`. Defaults to `10`.
:Ö
e
iotIoTHubCloudToDeviceFeedbackAazure:iot/IoTHubCloudToDeviceFeedback:IoTHubCloudToDeviceFeedbackì
éä
lockDurationB" ÍThe lock duration for the feedback queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT60S`.

maxDeliveryCountB oThe maximum delivery count for the feedback queue. This value must be between `1` and `100`. Defaults to `10`.
ó

timeToLiveB" ÞThe retention time for service-bound feedback messages, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
:½
>
iotIoTHubEndpoint'azure:iot/IoTHubEndpoint:IoTHubEndpointú
÷
authenticationTypeB" The type used to authenticate against the endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
ð
batchFrequencyInSecondsB ÎTime interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds. This attribute is applicable for endpoint type `AzureIotHub.StorageContainer`.
£
connectionStringB" The connection string for the endpoint. This attribute is mandatory and can only be specified when `authentication_type` is `keyBased`.

containerNameB" The name of storage container in the storage account. This attribute is mandatory for endpoint type `AzureIotHub.StorageContainer`.

encodingB" Encoding that is used to serialize messages to blobs. Supported values are `Avro`, `AvroDeflate` and `JSON`. Default value is `Avro`. This attribute is applicable for endpoint type `AzureIotHub.StorageContainer`. Changing this forces a new resource to be created.

endpointUriB" URI of the Service Bus or Event Hubs Namespace endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased` for endpoint type `AzureIotHub.ServiceBusQueue`, `AzureIotHub.ServiceBusTopic` or `AzureIotHub.EventHub`.


entityPathB" Name of the Service Bus Queue/Topic or Event Hub. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased` for endpoint type `AzureIotHub.ServiceBusQueue`, `AzureIotHub.ServiceBusTopic` or `AzureIotHub.EventHub`.
ù
fileNameFormatB" àFile name format for the blob. All parameters are mandatory but can be reordered. This attribute is applicable for endpoint type `AzureIotHub.StorageContainer`. Defaults to `{iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}`.
ì

identityIdB" ×The ID of the User Managed Identity used to authenticate against the endpoint.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the IoT Hub. If `identity_id` is omitted when `authentication_type` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.

> **NOTE:** An IoT Hub can only be updated to use the System-Assigned Managed Identity for `endpoint` since it is not possible to grant access to the endpoint until after creation. The extracted resources `azurerm_iothub_endpoint_*` can be used to configure Endpoints with the IoT Hub's System-Assigned Managed Identity without the need for an update.

maxChunkSizeInBytesB éMaximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB). This attribute is applicable for endpoint type `AzureIotHub.StorageContainer`.
Ä
name" ·The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`.
U
resourceGroupNameB" :The resource group in which the endpoint will be created.
³
type" ¦The type of the endpoint. Possible values are `AzureIotHub.StorageContainer`, `AzureIotHub.ServiceBusQueue`, `AzureIotHub.ServiceBusTopic` or `AzureIotHub.EventHub`.
:
D
iotIoTHubEnrichment+azure:iot/IoTHubEnrichment:IoTHubEnrichmentÀ
½E
endpointNames*" .The list of endpoints which will be enriched.
&
key" The key of the enrichment.
Ë
value" ½The value of the enrichment. Value can be any static string, the name of the IoT Hub sending the message (use `$iothubname`) or information from the device twin (ex: `$twin.tags.latitude`)
:¾
M
iotIoTHubFallbackRoute1azure:iot/IoTHubFallbackRoute:IoTHubFallbackRouteì
éÁ
	conditionB" ­The condition that is evaluated to apply the routing rule. Defaults to `true`. For grammar, see: <https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language>.
\
enabledB
 KUsed to specify whether the fallback route is enabled. Defaults to `true`.

endpointNamesB*" mThe endpoints to which messages that satisfy the condition are routed. Currently only 1 endpoint is allowed.
»
sourceB" ªThe source that the routing rule is to be applied to, such as `DeviceMessages`. Possible values include: `Invalid`, `DeviceMessages`, `TwinChangeEvents`, `DeviceLifecycleEvents`, `DeviceConnectionStateEvents`, `DeviceJobLifecycleEvents` and `DigitalTwinChangeEvents`. Defaults to `DeviceMessages`.
:
D
iotIoTHubFileUpload+azure:iot/IoTHubFileUpload:IoTHubFileUploadÏ
Ì¤
authenticationTypeB" The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
i
connectionString" QThe connection string for the Azure Storage account to which files are uploaded.
¸
containerName" ¢The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the connection_string specified.
¦

defaultTtlB" The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
Ë

identityIdB" ¶The ID of the User Managed Identity used to authenticate against the storage account.

> **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the IoT Hub. If `identity_id` is omitted when `authentication_type` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.

> **NOTE:** An IoT Hub can only be updated to use the System-Assigned Managed Identity for `file_upload` since it is not possible to grant access to the endpoint until after creation.
ô
lockDurationB" ÝThe lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.

maxDeliveryCountB jThe number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
v
notificationsB
 _Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.

sasTtlB" þThe period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
:
>
iotIoTHubIdentity'azure:iot/IoTHubIdentity:IoTHubIdentityÔ
ÑÕ
identityIdsB*" ½Specifies a list of User Assigned Managed Identity IDs to be assigned to this IoT Hub.

> **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
U
principalIdB" @The Principal ID associated with this Managed Service Identity.
O
tenantIdB" =The Tenant ID associated with this Managed Service Identity.
Î
type" ÁSpecifies the type of Managed Service Identity that should be configured on this IoT Hub. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
:À
P
iotIoTHubNetworkRuleSet3azure:iot/IoTHubNetworkRuleSet:IoTHubNetworkRuleSetë
è
applyToBuiltinEventhubEndpointB
 tDetermines if Network Rule Set is also applied to the BuiltIn EventHub EndPoint of the IotHub. Defaults to `false`.

defaultActionB" Default Action for Network Rule Set. Possible values are `DefaultActionDeny`, `DefaultActionAllow`. Defaults to `DefaultActionDeny`.
¦
ipRulesjBh*f:d
b
iotIoTHubNetworkRuleSetIpRule?azure:iot/IoTHubNetworkRuleSetIpRule:IoTHubNetworkRuleSetIpRule/One or more `ip_rule` blocks as defined below.
:Ó
b
iotIoTHubNetworkRuleSetIpRule?azure:iot/IoTHubNetworkRuleSetIpRule:IoTHubNetworkRuleSetIpRuleì
éy
actionB" iThe desired action for requests captured by this rule. Possible values are `Allow`. Defaults to `Allow`.
E
ipMask" 7The IP address range in CIDR notation for the ip rule.
%
name" The name of the ip rule.
:é
5
iotIoTHubRoute!azure:iot/IoTHubRoute:IoTHubRoute¯
¬Á
	conditionB" ­The condition that is evaluated to apply the routing rule. Defaults to `true`. For grammar, see: <https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language>.
;
enabled
 ,Used to specify whether a route is enabled.
f
endpointNames*" OThe list of endpoints to which messages that satisfy the condition are routed.
#
name" The name of the route.

source" The source that the routing rule is to be applied to, such as `DeviceMessages`. Possible values include: `Invalid`, `DeviceMessages`, `TwinChangeEvents`, `DeviceLifecycleEvents`, `DeviceConnectionStateEvents`, `DeviceJobLifecycleEvents` and `DigitalTwinChangeEvents`.
:¼
\
iotIoTHubSharedAccessPolicy;azure:iot/IoTHubSharedAccessPolicy:IoTHubSharedAccessPolicyÛ
Ø7
keyNameB" &The name of the shared access policy.
K
permissionsB" 6The permissions assigned to the shared access policy.
%

primaryKeyB" The primary key.
)
secondaryKeyB" The secondary key.
:Ð
/
iot	IoTHubSkuazure:iot/IoTHubSku:IoTHubSku

capacity rThe number of provisioned IoT Hub units.

> **NOTE:** Only one IotHub can be on the `Free` tier per subscription.

name" The name of the sku. Possible values are `B1`, `B2`, `B3`, `F1`, `S1`, `S2`, and `S3`.

> **NOTE:** The `F1` sku is on `Free` tier.
:õ
w
iot!IotHubDeviceUpdateAccountIdentityMazure:iot/IotHubDeviceUpdateAccountIdentity:IotHubDeviceUpdateAccountIdentityù
öá
identityIdsB*" ÉA list of User Assigned Managed Identity IDs to be assigned to this IoT Hub Device Update Account.

> **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.

principalIdB" The Principal ID for the Service Principal associated with the Managed Service Identity of this IoT Hub Device Update Account.

tenantIdB" |The Tenant ID for the Service Principal associated with the Managed Service Identity of this IoT Hub Device Update Account.
ç
type" ÚSpecifies the type of Managed Service Identity that should be configured on this IoT Hub Device Update Account. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned` (to enable both).
:½
ª
iot2IotHubDeviceUpdateInstanceDiagnosticStorageAccountoazure:iot/IotHubDeviceUpdateInstanceDiagnosticStorageAccount:IotHubDeviceUpdateInstanceDiagnosticStorageAccount
M
connectionString" 5Connection String of the Diagnostic Storage Account.
9
id" /Resource ID of the Diagnostic Storage Account.
:©
S
iotIotHubDpsIpFilterRule5azure:iot/IotHubDpsIpFilterRule:IotHubDpsIpFilterRuleÑ
Îl
action" ^The desired action for requests captured by this rule. Possible values are `Accept`, `Reject`
B
ipMask" 4The IP address range in CIDR notation for the rule.
$
name" The name of the filter.
t
targetB" dTarget for requests captured by this rule. Possible values are `all`, `deviceApi` and `serviceApi`.
:»
J
iotIotHubDpsLinkedHub/azure:iot/IotHubDpsLinkedHub:IotHubDpsLinkedHubì
éN
allocationWeightB 4The weight applied to the IoT Hub. Defaults to `1`.
s
applyAllocationPolicyB
 TDetermines whether to apply allocation policies to the IoT Hub. Defaults to `true`.
I
connectionString" 1The connection string to connect to the IoT Hub.
(
hostnameB" The IoT Hub hostname.
-
location" The location of the IoT hub.
:Ù
8
iotIotHubDpsSku#azure:iot/IotHubDpsSku:IotHubDpsSku
Q
capacity AThe number of provisioned IoT Device Provisioning Service units.
D
name" 8The name of the sku. Currently can only be set to `S1`.
:ï
h
iotSecurityDeviceGroupAllowRuleCazure:iot/SecurityDeviceGroupAllowRule:SecurityDeviceGroupAllowRule
ÿ
connectionFromIpsNotAllowedsB*" eSpecifies which IP is not allowed to be connected to in current device group for inbound connection.

connectionToIpsNotAllowedsB*" fSpecifies which IP is not allowed to be connected to in current device group for outbound connection.
m
localUsersNotAllowedsB*" LSpecifies which local user is not allowed to login in current device group.
o
processesNotAllowedsB*" OSpecifies which process is not allowed to be executed in current device group.
:â
h
iotSecurityDeviceGroupRangeRuleCazure:iot/SecurityDeviceGroupRangeRule:SecurityDeviceGroupRangeRuleõ
òS
duration" CSpecifies the time range. represented in ISO 8601 duration format.
;
max 0The maximum threshold in the given time window.
;
min 0The minimum threshold in the given time window.
 
type" The type of supported rule type. Possible Values are `ActiveConnectionsNotInAllowedRange`, `AmqpC2DMessagesNotInAllowedRange`, `MqttC2DMessagesNotInAllowedRange`, `HttpC2DMessagesNotInAllowedRange`, `AmqpC2DRejectedMessagesNotInAllowedRange`, `MqttC2DRejectedMessagesNotInAllowedRange`, `HttpC2DRejectedMessagesNotInAllowedRange`, `AmqpD2CMessagesNotInAllowedRange`, `MqttD2CMessagesNotInAllowedRange`, `HttpD2CMessagesNotInAllowedRange`, `DirectMethodInvokesNotInAllowedRange`, `FailedLocalLoginsNotInAllowedRange`, `FileUploadsNotInAllowedRange`, `QueuePurgesNotInAllowedRange`, `TwinUpdatesNotInAllowedRange` and `UnauthorizedOperationsNotInAllowedRange`.
:»
}
iot#SecuritySolutionAdditionalWorkspaceQazure:iot/SecuritySolutionAdditionalWorkspace:SecuritySolutionAdditionalWorkspace¹
¶o
	dataTypes*" \A list of data types which sent to workspace. Possible values are `Alerts` and `RawEvents`.
C
workspaceId" 0The resource ID of the Log Analytics Workspace.
:â

iot&SecuritySolutionRecommendationsEnabledWazure:iot/SecuritySolutionRecommendationsEnabled:SecuritySolutionRecommendationsEnabledÖ
Ók
acrAuthenticationB
 PIs Principal Authentication enabled for the ACR repository? Defaults to `true`.
b
agentSendUnutilizedMsgB
 BIs Agent send underutilized messages enabled? Defaults to `true`.
b
baselineB
 PIs Security related system configuration issues identified? Defaults to `true`.
R
edgeHubMemOptimizeB
 6Is IoT Edge Hub memory optimized? Defaults to `true`.
Z
edgeLoggingOptionB
 ?Is logging configured for IoT Edge module? Defaults to `true`.
s
inconsistentModuleSettingsB
 OIs inconsistent module settings enabled for SecurityGroup? Defaults to `true`.
Q
installAgentB
 ;is Azure IoT Security agent installed? Defaults to `true`.
Q
ipFilterDenyAllB
 8Is Default IP filter policy denied? Defaults to `true`.
k
ipFilterPermissiveRuleB
 KIs IP filter rule source allowable IP range too large? Defaults to `true`.
H
	openPortsB
 5Is any ports open on the device? Defaults to `true`.

permissiveFirewallPolicyB
 gDoes firewall policy exist which allow necessary communication to/from the device? Defaults to `true`.
q
permissiveInputFirewallRulesB
 KIs only necessary addresses or ports are permitted in? Defaults to `true`.
s
permissiveOutputFirewallRulesB
 LIs only necessary addresses or ports are permitted out? Defaults to `true`.
j
privilegedDockerOptionsB
 IIs high level permissions are needed for the module? Defaults to `true`.
X
sharedCredentialsB
 =Is any credentials shared among devices? Defaults to `true`.
`
vulnerableTlsCipherSuiteB
 >Does TLS cipher suite need to be updated? Defaults to `true`.
:å
G
iotgetIotHubIdentity-azure:iot/getIotHubIdentity:getIotHubIdentity
f
identityIds*" QThe list of User Managed Identity IDs which are assigned to the Virtual Machine.
c
principalId" PThe ID of the System Managed Service Principal assigned to the Virtual Machine.
n
tenantId" ^The ID of the Tenant of the System Managed Service Principal assigned to the Virtual Machine.
W
type" KThe identity type of the Managed Identity assigned to the Virtual Machine.
:²
[

iotcentralApplicationIdentity8azure:iotcentral/ApplicationIdentity:ApplicationIdentityÒ
ÏU
principalIdB" @The Principal ID associated with this Managed Service Identity.
O
tenantIdB" =The Tenant ID associated with this Managed Service Identity.
¤
type" Specifies the type of Managed Service Identity that should be configured on this IoT Central Application. The only possible value is `SystemAssigned`.
:ò


iotcentralApplicationNetworkRuleSetIpRulePazure:iotcentral/ApplicationNetworkRuleSetIpRule:ApplicationNetworkRuleSetIpRuleo
mE
ipMask" 7The IP address range in CIDR notation for the IP Rule.
$
name" The name of the IP Rule
:ÿ
]
keyvaultCertifiateCertificate:azure:keyvault/CertifiateCertificate:CertifiateCertificate
9
contents" )The base64-encoded certificate contents.
Ü
passwordB" ÉThe password associated with the certificate.

> **NOTE:** A PEM certificate is already base64 encoded. To successfully import, the `contents` property should include a PEM encoded X509 certificate and a private_key in pkcs8 format. There should only be linux style `\n` line endings and the whole block should have the PEM begin/end blocks around the certificate data and the private key data.

To convert a private key to pkcs8 format with openssl use:
```shell
openssl pkcs8 -topk8 -nocrypt -in private_key.pem > private_key_pk8.pem
```

The PEM content should look something like:
```text
-----BEGIN CERTIFICATE-----
aGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8K
:
aGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8K
-----END CERTIFICATE-----
-----BEGIN PRIVATE KEY-----
d29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQK
:
d29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQK
-----END PRIVATE KEY-----
```
:¬
x
keyvaultCertifiateCertificateAttributeLazure:keyvault/CertifiateCertificateAttribute:CertifiateCertificateAttribute¯
¬?
createdB" .The create time of the Key Vault Certificate.
?
enabledB
 .whether the Key Vault Certificate is enabled.
@
expiresB" /The expires time of the Key Vault Certificate.
K
	notBeforeB" 8The not before valid time of the Key Vault Certificate.
Q
recoveryLevelB" :The deletion recovery level of the Key Vault Certificate.
F
updatedB" 5The recent update time of the Key Vault Certificate.
:ë

o
keyvaultCertifiateCertificatePolicyFazure:keyvault/CertifiateCertificatePolicy:CertifiateCertificatePolicy÷	
ô	ê
issuerParameters¥:¢

keyvault+CertifiateCertificatePolicyIssuerParametersfazure:keyvault/CertifiateCertificatePolicyIssuerParameters:CertifiateCertificatePolicyIssuerParameters.A `issuer_parameters` block as defined below.
Û
keyProperties:

keyvault(CertifiateCertificatePolicyKeyProperties`azure:keyvault/CertifiateCertificatePolicyKeyProperties:CertifiateCertificatePolicyKeyProperties+A `key_properties` block as defined below.
ç
lifetimeActions¥B¢*:

keyvault)CertifiateCertificatePolicyLifetimeActionbazure:keyvault/CertifiateCertificatePolicyLifetimeAction:CertifiateCertificatePolicyLifetimeAction,A `lifetime_action` block as defined below.
ê
secretProperties¥:¢

keyvault+CertifiateCertificatePolicySecretPropertiesfazure:keyvault/CertifiateCertificatePolicySecretProperties:CertifiateCertificatePolicySecretProperties.A `secret_properties` block as defined below.
Ï
x509CertificatePropertiesÃBÀ:½
º
keyvault4CertifiateCertificatePolicyX509CertificatePropertiesxazure:keyvault/CertifiateCertificatePolicyX509CertificateProperties:CertifiateCertificatePolicyX509CertificatePropertieslA `x509_certificate_properties` block as defined below. Required when `certificate` block is not specified.
:

keyvault+CertifiateCertificatePolicyIssuerParametersfazure:keyvault/CertifiateCertificatePolicyIssuerParameters:CertifiateCertificatePolicyIssuerParametersÞ
ÛØ
name" ËThe name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones).
:

keyvault(CertifiateCertificatePolicyKeyProperties`azure:keyvault/CertifiateCertificatePolicyKeyProperties:CertifiateCertificatePolicyKeyProperties
þÖ
curveB" ÆSpecifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`.
2

exportable
  Is this certificate exportable?
Û
keySizeB ÉThe size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
j
keyType" [Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
%
reuseKey
 Is the key reusable?
:ï

keyvault)CertifiateCertificatePolicyLifetimeActionbazure:keyvault/CertifiateCertificatePolicyLifetimeAction:CertifiateCertificatePolicyLifetimeActionÐ
Íá
action±:®
«
keyvault/CertifiateCertificatePolicyLifetimeActionActionnazure:keyvault/CertifiateCertificatePolicyLifetimeActionAction:CertifiateCertificatePolicyLifetimeActionAction#A `action` block as defined below.
æ
trigger´:±
®
keyvault0CertifiateCertificatePolicyLifetimeActionTriggerpazure:keyvault/CertifiateCertificatePolicyLifetimeActionTrigger:CertifiateCertificatePolicyLifetimeActionTrigger$A `trigger` block as defined below.
:Î
«
keyvault/CertifiateCertificatePolicyLifetimeActionActionnazure:keyvault/CertifiateCertificatePolicyLifetimeActionAction:CertifiateCertificatePolicyLifetimeActionAction


actionType" The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`.
:
®
keyvault0CertifiateCertificatePolicyLifetimeActionTriggerpazure:keyvault/CertifiateCertificatePolicyLifetimeActionTrigger:CertifiateCertificatePolicyLifetimeActionTriggerä
á¬
daysBeforeExpiryB The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetime_percentage`.
¯
lifetimePercentageB The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `days_before_expiry`.
:³

keyvault+CertifiateCertificatePolicySecretPropertiesfazure:keyvault/CertifiateCertificatePolicySecretProperties:CertifiateCertificatePolicySecretProperties

contentType" uThe Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
:å
º
keyvault4CertifiateCertificatePolicyX509CertificatePropertiesxazure:keyvault/CertifiateCertificatePolicyX509CertificateProperties:CertifiateCertificatePolicyX509CertificateProperties¥
¢E
extendedKeyUsagesB*" (A list of Extended/Enhanced Key Usages.

	keyUsages*" òA list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
*
subject" The Certificate's Subject.
Ý
subjectAlternativeNamesB:

keyvaultKCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames¦azure:keyvault/CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames:CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames6A `subject_alternative_names` block as defined below.
D
validityInMonths ,The Certificates Validity Period in Months.
:

keyvaultKCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames¦azure:keyvault/CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames:CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesþ
û[
dnsNamesB*" GA list of alternative DNS names (FQDNs) identified by the Certificate.
L
emailsB*" :A list of email addresses identified by this Certificate.
N
upnsB*" >A list of User Principal Names identified by the Certificate.
:	
`
keyvaultCertificateCertificate<azure:keyvault/CertificateCertificate:CertificateCertificate
9
contents" )The base64-encoded certificate contents.
Ü
passwordB" ÉThe password associated with the certificate.

> **NOTE:** A PEM certificate is already base64 encoded. To successfully import, the `contents` property should include a PEM encoded X509 certificate and a private_key in pkcs8 format. There should only be linux style `\n` line endings and the whole block should have the PEM begin/end blocks around the certificate data and the private key data.

To convert a private key to pkcs8 format with openssl use:
```shell
openssl pkcs8 -topk8 -nocrypt -in private_key.pem > private_key_pk8.pem
```

The PEM content should look something like:
```text
-----BEGIN CERTIFICATE-----
aGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8K
:
aGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8K
-----END CERTIFICATE-----
-----BEGIN PRIVATE KEY-----
d29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQK
:
d29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQK
-----END PRIVATE KEY-----
```
:¯
{
keyvaultCertificateCertificateAttributeNazure:keyvault/CertificateCertificateAttribute:CertificateCertificateAttribute¯
¬?
createdB" .The create time of the Key Vault Certificate.
?
enabledB
 .whether the Key Vault Certificate is enabled.
@
expiresB" /The expires time of the Key Vault Certificate.
K
	notBeforeB" 8The not before valid time of the Key Vault Certificate.
Q
recoveryLevelB" :The deletion recovery level of the Key Vault Certificate.
F
updatedB" 5The recent update time of the Key Vault Certificate.
:ý

r
keyvaultCertificateCertificatePolicyHazure:keyvault/CertificateCertificatePolicy:CertificateCertificatePolicy


í
issuerParameters¨:¥
¢
keyvault,CertificateCertificatePolicyIssuerParametershazure:keyvault/CertificateCertificatePolicyIssuerParameters:CertificateCertificatePolicyIssuerParameters.A `issuer_parameters` block as defined below.
Þ
keyProperties:

keyvault)CertificateCertificatePolicyKeyPropertiesbazure:keyvault/CertificateCertificatePolicyKeyProperties:CertificateCertificatePolicyKeyProperties+A `key_properties` block as defined below.
ê
lifetimeActions¨B¥*¢:

keyvault*CertificateCertificatePolicyLifetimeActiondazure:keyvault/CertificateCertificatePolicyLifetimeAction:CertificateCertificatePolicyLifetimeAction,A `lifetime_action` block as defined below.
í
secretProperties¨:¥
¢
keyvault,CertificateCertificatePolicySecretPropertieshazure:keyvault/CertificateCertificatePolicySecretProperties:CertificateCertificatePolicySecretProperties.A `secret_properties` block as defined below.
Ò
x509CertificatePropertiesÆBÃ:À
½
keyvault5CertificateCertificatePolicyX509CertificatePropertieszazure:keyvault/CertificateCertificatePolicyX509CertificateProperties:CertificateCertificatePolicyX509CertificatePropertieslA `x509_certificate_properties` block as defined below. Required when `certificate` block is not specified.
:
¢
keyvault,CertificateCertificatePolicyIssuerParametershazure:keyvault/CertificateCertificatePolicyIssuerParameters:CertificateCertificatePolicyIssuerParametersÞ
ÛØ
name" ËThe name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones).
: 

keyvault)CertificateCertificatePolicyKeyPropertiesbazure:keyvault/CertificateCertificatePolicyKeyProperties:CertificateCertificatePolicyKeyProperties
þÖ
curveB" ÆSpecifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `key_type` is `EC` or `EC-HSM`.
2

exportable
  Is this certificate exportable?
Û
keySizeB ÉThe size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
j
keyType" [Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
%
reuseKey
 Is the key reusable?
:ø

keyvault*CertificateCertificatePolicyLifetimeActiondazure:keyvault/CertificateCertificatePolicyLifetimeAction:CertificateCertificatePolicyLifetimeActionÖ
Óä
action´:±
®
keyvault0CertificateCertificatePolicyLifetimeActionActionpazure:keyvault/CertificateCertificatePolicyLifetimeActionAction:CertificateCertificatePolicyLifetimeActionAction#A `action` block as defined below.
é
trigger·:´
±
keyvault1CertificateCertificatePolicyLifetimeActionTriggerrazure:keyvault/CertificateCertificatePolicyLifetimeActionTrigger:CertificateCertificatePolicyLifetimeActionTrigger$A `trigger` block as defined below.
:Ñ
®
keyvault0CertificateCertificatePolicyLifetimeActionActionpazure:keyvault/CertificateCertificatePolicyLifetimeActionAction:CertificateCertificatePolicyLifetimeActionAction


actionType" The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`.
:
±
keyvault1CertificateCertificatePolicyLifetimeActionTriggerrazure:keyvault/CertificateCertificatePolicyLifetimeActionTrigger:CertificateCertificatePolicyLifetimeActionTriggerä
á¬
daysBeforeExpiryB The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetime_percentage`.
¯
lifetimePercentageB The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `days_before_expiry`.
:¶
¢
keyvault,CertificateCertificatePolicySecretPropertieshazure:keyvault/CertificateCertificatePolicySecretProperties:CertificateCertificatePolicySecretProperties

contentType" uThe Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
:ë
½
keyvault5CertificateCertificatePolicyX509CertificatePropertieszazure:keyvault/CertificateCertificatePolicyX509CertificateProperties:CertificateCertificatePolicyX509CertificateProperties¨
¥E
extendedKeyUsagesB*" (A list of Extended/Enhanced Key Usages.

	keyUsages*" òA list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
*
subject" The Certificate's Subject.
à
subjectAlternativeNamesB:

keyvaultLCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames¨azure:keyvault/CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames:CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames6A `subject_alternative_names` block as defined below.
D
validityInMonths ,The Certificates Validity Period in Months.
:

keyvaultLCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames¨azure:keyvault/CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames:CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesþ
û[
dnsNamesB*" GA list of alternative DNS names (FQDNs) identified by the Certificate.
L
emailsB*" :A list of email addresses identified by this Certificate.
N
upnsB*" >A list of User Principal Names identified by the Certificate.
:õ
l
keyvaultCertificateContactsContactDazure:keyvault/CertificateContactsContact:CertificateContactsContact
,
email" E-mail address of the contact.
#
nameB" Name of the contact.
,
phoneB" Phone number of the contact.
:¡
`
keyvaultCertificateIssuerAdmin<azure:keyvault/CertificateIssuerAdmin:CertificateIssuerAdmin¼
¹1
emailAddress" E-mail address of the admin.
,
	firstNameB" First name of the admin.
*
lastNameB" Last name of the admin.
*
phoneB" Phone number of the admin.
:ª
Q
keyvaultKeyRotationPolicy2azure:keyvault/KeyRotationPolicy:KeyRotationPolicyÔ
Ñ¨
	automaticrBp:n
l
keyvaultKeyRotationPolicyAutomaticDazure:keyvault/KeyRotationPolicyAutomatic:KeyRotationPolicyAutomatic'An `automatic` block as defined below.

expireAfterB" yExpire a Key Vault Key after given duration as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).

notifyBeforeExpiryB" vNotify at a given duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
:ª
l
keyvaultKeyRotationPolicyAutomaticDazure:keyvault/KeyRotationPolicyAutomatic:KeyRotationPolicyAutomatic¹
¶
timeAfterCreationB" }Rotate automatically at a duration after create as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).

timeBeforeExpiryB" ~Rotate automatically at a duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
:¤
Z
keyvaultKeyVaultAccessPolicy8azure:keyvault/KeyVaultAccessPolicy:KeyVaultAccessPolicyÅ
ÂR
applicationIdB" ;The object ID of an Application in Azure Active Directory.
®
certificatePermissionsB*" List of certificate permissions, must be one or more from the following: `Backup`, `Create`, `Delete`, `DeleteIssuers`, `Get`, `GetIssuers`, `Import`, `List`, `ListIssuers`, `ManageContacts`, `ManageIssuers`, `Purge`, `Recover`, `Restore`, `SetIssuers` and `Update`.
ª
keyPermissionsB*" List of key permissions. Possible values are `Backup`, `Create`, `Decrypt`, `Delete`, `Encrypt`, `Get`, `Import`, `List`, `Purge`, `Recover`, `Restore`, `Sign`, `UnwrapKey`, `Update`, `Verify`, `WrapKey`, `Release`, `Rotate`, `GetRotationPolicy` and `SetRotationPolicy`.
À
objectId" ¯The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
®
secretPermissionsB*" List of secret permissions, must be one or more from the following: `Backup`, `Delete`, `Get`, `List`, `Purge`, `Recover`, `Restore` and `Set`.
÷
storagePermissionsB*" ØList of storage permissions, must be one or more from the following: `Backup`, `Delete`, `DeleteSAS`, `Get`, `GetSAS`, `List`, `ListSAS`, `Purge`, `Recover`, `RegenerateKey`, `Restore`, `Set`, `SetSAS` and `Update`.

tenantId" The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Must match the `tenant_id` used above.
:Ô
K
keyvaultKeyVaultContact.azure:keyvault/KeyVaultContact:KeyVaultContact
,
email" E-mail address of the contact.
#
nameB" Name of the contact.
,
phoneB" Phone number of the contact.
:Ë
W
keyvaultKeyVaultNetworkAcls6azure:keyvault/KeyVaultNetworkAcls:KeyVaultNetworkAclsï
ìt
bypass" fSpecifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.

defaultAction" The Default Action to use when no rules match from `ip_rules` / `virtual_network_subnet_ids`. Possible values are `Allow` and `Deny`.
j
ipRulesB*" WOne or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
i
virtualNetworkSubnetIdsB*" FOne or more Subnet IDs which should be able to access this Key Vault.
:ï

keyvault(ManagedHardwareSecurityModuleNetworkAcls`azure:keyvault/ManagedHardwareSecurityModuleNetworkAcls:ManagedHardwareSecurityModuleNetworkAclsÓ
Ðt
bypass" fSpecifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
X
defaultAction" CThe Default Action to use. Possible values are `Allow` and `Deny`.
:¡%
½
keyvault5ManagedHardwareSecurityModuleRoleDefinitionPermissionzazure:keyvault/ManagedHardwareSecurityModuleRoleDefinitionPermission:ManagedHardwareSecurityModuleRoleDefinitionPermissionÞ#
Û#
actionsB*" One or more Allowed Actions, such as `*`, `Microsoft.Resources/subscriptions/resourceGroups/read`. See ['Azure Resource Manager resource provider operations'](https://docs.microsoft.com/azure/role-based-access-control/resource-provider-operations) for details.
È
dataActionsB*" °Specifies a list of data action permission to grant. Possible values are `Microsoft.KeyVault/managedHsm/keys/read/action`, `Microsoft.KeyVault/managedHsm/keys/write/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action`, `Microsoft.KeyVault/managedHsm/keys/backup/action`, `Microsoft.KeyVault/managedHsm/keys/restore/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/delete/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/read/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/read/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action`, `Microsoft.KeyVault/managedHsm/keys/encrypt/action`, `Microsoft.KeyVault/managedHsm/keys/decrypt/action`, `Microsoft.KeyVault/managedHsm/keys/wrap/action`, `Microsoft.KeyVault/managedHsm/keys/unwrap/action`, `Microsoft.KeyVault/managedHsm/keys/sign/action`, `Microsoft.KeyVault/managedHsm/keys/verify/action`, `Microsoft.KeyVault/managedHsm/keys/create`, `Microsoft.KeyVault/managedHsm/keys/delete`, `Microsoft.KeyVault/managedHsm/keys/export/action`, `Microsoft.KeyVault/managedHsm/keys/release/action`, `Microsoft.KeyVault/managedHsm/keys/import/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete`, `Microsoft.KeyVault/managedHsm/securitydomain/download/action`, `Microsoft.KeyVault/managedHsm/securitydomain/download/read`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/action`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/read`, `Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read`, `Microsoft.KeyVault/managedHsm/backup/start/action`, `Microsoft.KeyVault/managedHsm/restore/start/action`, `Microsoft.KeyVault/managedHsm/backup/status/action`, `Microsoft.KeyVault/managedHsm/restore/status/action` and `Microsoft.KeyVault/managedHsm/rng/action`.


notActionsB*" One or more Disallowed Actions, such as `*`, `Microsoft.Resources/subscriptions/resourceGroups/read`. See ['Azure Resource Manager resource provider operations'](https://docs.microsoft.com/azure/role-based-access-control/resource-provider-operations) for details.
Ï
notDataActionsB*" ´Specifies a list of data action permission not to grant. Possible values are `Microsoft.KeyVault/managedHsm/keys/read/action`, `Microsoft.KeyVault/managedHsm/keys/write/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action`, `Microsoft.KeyVault/managedHsm/keys/backup/action`, `Microsoft.KeyVault/managedHsm/keys/restore/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/delete/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/read/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/read/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action`, `Microsoft.KeyVault/managedHsm/keys/encrypt/action`, `Microsoft.KeyVault/managedHsm/keys/decrypt/action`, `Microsoft.KeyVault/managedHsm/keys/wrap/action`, `Microsoft.KeyVault/managedHsm/keys/unwrap/action`, `Microsoft.KeyVault/managedHsm/keys/sign/action`, `Microsoft.KeyVault/managedHsm/keys/verify/action`, `Microsoft.KeyVault/managedHsm/keys/create`, `Microsoft.KeyVault/managedHsm/keys/delete`, `Microsoft.KeyVault/managedHsm/keys/export/action`, `Microsoft.KeyVault/managedHsm/keys/release/action`, `Microsoft.KeyVault/managedHsm/keys/import/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete`, `Microsoft.KeyVault/managedHsm/securitydomain/download/action`, `Microsoft.KeyVault/managedHsm/securitydomain/download/read`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/action`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/read`, `Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read`, `Microsoft.KeyVault/managedHsm/backup/start/action`, `Microsoft.KeyVault/managedHsm/restore/start/action`, `Microsoft.KeyVault/managedHsm/backup/status/action`, `Microsoft.KeyVault/managedHsm/restore/status/action` and `Microsoft.KeyVault/managedHsm/rng/action`.
:ñ

{
keyvaultgetCertificateCertificatePolicyNazure:keyvault/getCertificateCertificatePolicy:getCertificateCertificatePolicyñ	
î	ö
issuerParameters±*®:«
¨
keyvault.getCertificateCertificatePolicyIssuerParameterlazure:keyvault/getCertificateCertificatePolicyIssuerParameter:getCertificateCertificatePolicyIssuerParameter.A `issuer_parameters` block as defined below.
ä
keyProperties¥*¢:

keyvault*getCertificateCertificatePolicyKeyPropertydazure:keyvault/getCertificateCertificatePolicyKeyProperty:getCertificateCertificatePolicyKeyProperty+A `key_properties` block as defined below.
ð
lifetimeActions®*«:¨
¥
keyvault-getCertificateCertificatePolicyLifetimeActionjazure:keyvault/getCertificateCertificatePolicyLifetimeAction:getCertificateCertificatePolicyLifetimeAction,A `lifetime_action` block as defined below.
ó
secretProperties®*«:¨
¥
keyvault-getCertificateCertificatePolicySecretPropertyjazure:keyvault/getCertificateCertificatePolicySecretProperty:getCertificateCertificatePolicySecretProperty.A `secret_properties` block as defined below.
¢
x509CertificatePropertiesÉ*Æ:Ã
À
keyvault6getCertificateCertificatePolicyX509CertificateProperty|azure:keyvault/getCertificateCertificatePolicyX509CertificateProperty:getCertificateCertificatePolicyX509CertificateProperty9An `x509_certificate_properties` block as defined below.
:î
¨
keyvault.getCertificateCertificatePolicyIssuerParameterlazure:keyvault/getCertificateCertificatePolicyIssuerParameter:getCertificateCertificatePolicyIssuerParameterA
?=
name" 1Specifies the name of the Key Vault Certificate.
:

keyvault*getCertificateCertificatePolicyKeyPropertydazure:keyvault/getCertificateCertificatePolicyKeyProperty:getCertificateCertificatePolicyKeyPropertyè
å
curve" 2

exportable
  Is this Certificate Exportable?
<
keySize -The size of the Key used in the Certificate.
=
keyType" .Specifies the Type of Key, for example `RSA`.
%
reuseKey
 Is the key reusable?
:
¥
keyvault-getCertificateCertificatePolicyLifetimeActionjazure:keyvault/getCertificateCertificatePolicyLifetimeAction:getCertificateCertificatePolicyLifetimeActionð
íñ
actionsÀ*½:º
·
keyvault3getCertificateCertificatePolicyLifetimeActionActionvazure:keyvault/getCertificateCertificatePolicyLifetimeActionAction:getCertificateCertificatePolicyLifetimeActionAction#A `action` block as defined below.
ö
triggersÃ*À:½
º
keyvault4getCertificateCertificatePolicyLifetimeActionTriggerxazure:keyvault/getCertificateCertificatePolicyLifetimeActionTrigger:getCertificateCertificatePolicyLifetimeActionTrigger$A `trigger` block as defined below.
:
·
keyvault3getCertificateCertificatePolicyLifetimeActionActionvazure:keyvault/getCertificateCertificatePolicyLifetimeActionAction:getCertificateCertificatePolicyLifetimeActionActiona
_]

actionType" KThe Type of action to be performed when the lifetime trigger is triggerec.
:Ó
º
keyvault4getCertificateCertificatePolicyLifetimeActionTriggerxazure:keyvault/getCertificateCertificatePolicyLifetimeActionTrigger:getCertificateCertificatePolicyLifetimeActionTrigger

daysBeforeExpiry kThe number of days before the Certificate expires that the action associated with this Trigger should run.

lifetimePercentage mThe percentage at which during the Certificates Lifetime the action associated with this Trigger should run.
:½
¥
keyvault-getCertificateCertificatePolicySecretPropertyjazure:keyvault/getCertificateCertificatePolicySecretProperty:getCertificateCertificatePolicySecretProperty

contentType" yThe Content-Type of the Certificate, for example `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
:¡
À
keyvault6getCertificateCertificatePolicyX509CertificateProperty|azure:keyvault/getCertificateCertificatePolicyX509CertificateProperty:getCertificateCertificatePolicyX509CertificatePropertyÛ
ØC
extendedKeyUsages*" (A list of Extended/Enhanced Key Usages.
<
	keyUsages*" )A list of uses associated with this Key.
*
subject" The Certificate's Subject.
à
subjectAlternativeNames*:

keyvaultLgetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName¨azure:keyvault/getCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName:getCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName6A `subject_alternative_names` block as defined below.
D
validityInMonths ,The Certificates Validity Period in Months.
:

keyvaultLgetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName¨azure:keyvault/getCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName:getCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameø
õY
dnsNames*" GA list of alternative DNS names (FQDNs) identified by the Certificate.
J
emails*" :A list of email addresses identified by this Certificate.
L
upns*" >A list of User Principal Names identified by the Certificate.
:¤
i
keyvaultgetCertificateIssuerAdminBazure:keyvault/getCertificateIssuerAdmin:getCertificateIssuerAdmin¶
³1
emailAddress" E-mail address of the admin.
*
	firstName" First name of the admin.
(
lastName" Last name of the admin.
(
phone" Phone number of the admin.
:§
l
keyvaultgetCertificatesCertificateDazure:keyvault/getCertificatesCertificate:getCertificatesCertificate¶
³4
enabled
 %Whether this certificate is enabled.
&
id" The ID of this certificate.
%
name" The name of certificate.
,
tags2" The tags of this certificate.
:ç
c
keyvaultgetKeyVaultAccessPolicy>azure:keyvault/getKeyVaultAccessPolicy:getKeyVaultAccessPolicyÿ
üL
applicationId" 7The Object ID of a Azure Active Directory Application.
d
certificatePermissions*" DA list of certificate permissions applicable to this Access Policy.
T
keyPermissions*" <A list of key permissions applicable to this Access Policy.
M
objectId" =An Object ID of a User, Service Principal or Security Group.
Z
secretPermissions*" ?A list of secret permissions applicable to this Access Policy.
\
storagePermissions*" @A list of storage permissions applicable to this Access Policy.
g
tenantId" WThe Azure Active Directory Tenant ID used to authenticate requests for this Key Vault.
:¸
]
keyvaultgetKeyVaultNetworkAcl:azure:keyvault/getKeyVaultNetworkAcl:getKeyVaultNetworkAclW
U
bypass" 
defaultAction" 
ipRules*" 
virtualNetworkSubnetIds*" :å
Ç
keyvault8getManagedHardwareSecurityModuleRoleDefinitionPermissionazure:keyvault/getManagedHardwareSecurityModuleRoleDefinitionPermission:getManagedHardwareSecurityModuleRoleDefinitionPermission
6
actions*" %A list of action permission granted.
?
dataActions*" *A list of data action permission granted.
K

notActions*" 7A list of action permission excluded (but not denied).
M
notDataActions*" 5(Optional) A list of data action permission granted.
:õ
N
keyvaultgetSecretsSecret0azure:keyvault/getSecretsSecret:getSecretsSecret¢
/
enabled
  Whether this secret is enabled.
!
id" The ID of this secret.
 
name" The name of secret.
'
tags2" The tags of this secret.
