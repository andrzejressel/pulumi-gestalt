
gcpGoogle Cloud"8.12.1*¥W
U
accesscontextmanagerAccessLevel0gcp:accesscontextmanager/accessLevel:AccessLevelùEAn AccessLevel is a label that can be applied to requests to GCP services,
along with a list of requirements necessary for the label to be applied.


To get more information about AccessLevel, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)
* How-to Guides
    * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)

> **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
you must specify a `billing_project` and set `user_project_override` to true
in the provider configuration. Otherwise the ACM API will return a 403 error.
Your account must have the `serviceusage.services.use` permission on the
`billing_project` you defined.

## Example Usage

### Access Context Manager Access Level Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "my policy",
});
const access_level = new gcp.accesscontextmanager.AccessLevel("access-level", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    name: pulumi.interpolate`accessPolicies/${access_policy.name}/accessLevels/chromeos_no_lock`,
    title: "chromeos_no_lock",
    basic: {
        conditions: [{
            devicePolicy: {
                requireScreenLock: true,
                osConstraints: [{
                    osType: "DESKTOP_CHROME_OS",
                }],
            },
            regions: [
                "CH",
                "IT",
                "US",
            ],
        }],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="my policy")
access_level = gcp.accesscontextmanager.AccessLevel("access-level",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
    title="chromeos_no_lock",
    basic={
        "conditions": [{
            "device_policy": {
                "require_screen_lock": True,
                "os_constraints": [{
                    "os_type": "DESKTOP_CHROME_OS",
                }],
            },
            "regions": [
                "CH",
                "IT",
                "US",
            ],
        }],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "my policy",
    });

    var access_level = new Gcp.AccessContextManager.AccessLevel("access-level", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
        Title = "chromeos_no_lock",
        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs
        {
            Conditions = new[]
            {
                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs
                {
                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs
                    {
                        RequireScreenLock = true,
                        OsConstraints = new[]
                        {
                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs
                            {
                                OsType = "DESKTOP_CHROME_OS",
                            },
                        },
                    },
                    Regions = new[]
                    {
                        "CH",
                        "IT",
                        "US",
                    },
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("my policy"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessLevel(ctx, "access-level", &accesscontextmanager.AccessLevelArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			Name: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v/accessLevels/chromeos_no_lock", name), nil
			}).(pulumi.StringOutput),
			Title: pulumi.String("chromeos_no_lock"),
			Basic: &accesscontextmanager.AccessLevelBasicArgs{
				Conditions: accesscontextmanager.AccessLevelBasicConditionArray{
					&accesscontextmanager.AccessLevelBasicConditionArgs{
						DevicePolicy: &accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{
							RequireScreenLock: pulumi.Bool(true),
							OsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{
								&accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{
									OsType: pulumi.String("DESKTOP_CHROME_OS"),
								},
							},
						},
						Regions: pulumi.StringArray{
							pulumi.String("CH"),
							pulumi.String("IT"),
							pulumi.String("US"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.AccessLevel;
import com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("my policy")
            .build());

        var access_level = new AccessLevel("access-level", AccessLevelArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/accessLevels/chromeos_no_lock", name)))
            .title("chromeos_no_lock")
            .basic(AccessLevelBasicArgs.builder()
                .conditions(AccessLevelBasicConditionArgs.builder()
                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()
                        .requireScreenLock(true)
                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()
                            .osType("DESKTOP_CHROME_OS")
                            .build())
                        .build())
                    .regions(                    
                        "CH",
                        "IT",
                        "US")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  access-level:
    type: gcp:accesscontextmanager:AccessLevel
    properties:
      parent: accessPolicies/${["access-policy"].name}
      name: accessPolicies/${["access-policy"].name}/accessLevels/chromeos_no_lock
      title: chromeos_no_lock
      basic:
        conditions:
          - devicePolicy:
              requireScreenLock: true
              osConstraints:
                - osType: DESKTOP_CHROME_OS
            regions:
              - CH
              - IT
              - US
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: my policy
```
<!--End PulumiCodeChooser -->

## Import

AccessLevel can be imported using any of these accepted formats:

* `{{name}}`

When using the `pulumi import` command, AccessLevel can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:accesscontextmanager/accessLevel:AccessLevel default {{name}}
```

â
basicjBh:f
d
accesscontextmanagerAccessLevelBasic:gcp:accesscontextmanager/AccessLevelBasic:AccessLevelBasicmA set of predefined conditions for the access level and a combining function.
Structure is documented below.
ë
custommBk:i
g
accesscontextmanagerAccessLevelCustom<gcp:accesscontextmanager/AccessLevelCustom:AccessLevelCustomñCustom access level conditions are set using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request.
See CEL spec at: https://github.com/google/cel-spec.
Structure is documented below.
[
descriptionB" FDescription of the AccessLevel and its use. Does not affect behavior.
Ñ
nameB" ÂResource name for the Access Level. The short_name component must begin
with a letter and only include alphanumeric and '_'.
Format: accessPolicies/{policy_id}/accessLevels/{short_name}


- - -
]
parent" OThe AccessPolicy this AccessLevel lives in.
Format: accessPolicies/{policy_id}
E
title" 8Human readable title. Must be unique within the Policy.
"â
basicjBh:f
d
accesscontextmanagerAccessLevelBasic:gcp:accesscontextmanager/AccessLevelBasic:AccessLevelBasicmA set of predefined conditions for the access level and a combining function.
Structure is documented below.
"ë
custommBk:i
g
accesscontextmanagerAccessLevelCustom<gcp:accesscontextmanager/AccessLevelCustom:AccessLevelCustomñCustom access level conditions are set using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request.
See CEL spec at: https://github.com/google/cel-spec.
Structure is documented below.
"[
descriptionB" FDescription of the AccessLevel and its use. Does not affect behavior.
"Ï
name" ÂResource name for the Access Level. The short_name component must begin
with a letter and only include alphanumeric and '_'.
Format: accessPolicies/{policy_id}/accessLevels/{short_name}


- - -
"]
parent" OThe AccessPolicy this AccessLevel lives in.
Format: accessPolicies/{policy_id}
"E
title" 8Human readable title. Must be unique within the Policy.
*
p
accesscontextmanagerAccessLevelConditionBgcp:accesscontextmanager/accessLevelCondition:AccessLevelConditionïxAllows configuring a single access level condition to be appended to an access level's conditions.
This resource is intended to be used in cases where it is not possible to compile a full list
of conditions to include in a `gcp.accesscontextmanager.AccessLevel` resource,
to enable them to be added separately.

> **Note:** If this resource is used alongside a `gcp.accesscontextmanager.AccessLevel` resource,
the access level resource must have a `lifecycle` block with `ignore_changes = [basic[0].conditions]` so
they don't fight over which service accounts should be included.


To get more information about AccessLevelCondition, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels)
* How-to Guides
    * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)

> **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
you must specify a `billing_project` and set `user_project_override` to true
in the provider configuration. Otherwise the ACM API will return a 403 error.
Your account must have the `serviceusage.services.use` permission on the
`billing_project` you defined.

## Example Usage

### Access Context Manager Access Level Condition Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "my policy",
});
const access_level_service_account = new gcp.accesscontextmanager.AccessLevel("access-level-service-account", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    name: pulumi.interpolate`accessPolicies/${access_policy.name}/accessLevels/chromeos_no_lock`,
    title: "chromeos_no_lock",
    basic: {
        conditions: [{
            devicePolicy: {
                requireScreenLock: true,
                osConstraints: [{
                    osType: "DESKTOP_CHROME_OS",
                }],
            },
            regions: [
                "CH",
                "IT",
                "US",
            ],
        }],
    },
});
const created_later = new gcp.serviceaccount.Account("created-later", {accountId: "my-account-id"});
const access_level_conditions = new gcp.accesscontextmanager.AccessLevelCondition("access-level-conditions", {
    accessLevel: access_level_service_account.name,
    ipSubnetworks: ["192.0.4.0/24"],
    members: [
        "user:test@google.com",
        "user:test2@google.com",
        pulumi.interpolate`serviceAccount:${created_later.email}`,
    ],
    negate: false,
    devicePolicy: {
        requireScreenLock: false,
        requireAdminApproval: false,
        requireCorpOwned: true,
        osConstraints: [{
            osType: "DESKTOP_CHROME_OS",
        }],
    },
    regions: [
        "IT",
        "US",
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="my policy")
access_level_service_account = gcp.accesscontextmanager.AccessLevel("access-level-service-account",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
    title="chromeos_no_lock",
    basic={
        "conditions": [{
            "device_policy": {
                "require_screen_lock": True,
                "os_constraints": [{
                    "os_type": "DESKTOP_CHROME_OS",
                }],
            },
            "regions": [
                "CH",
                "IT",
                "US",
            ],
        }],
    })
created_later = gcp.serviceaccount.Account("created-later", account_id="my-account-id")
access_level_conditions = gcp.accesscontextmanager.AccessLevelCondition("access-level-conditions",
    access_level=access_level_service_account.name,
    ip_subnetworks=["192.0.4.0/24"],
    members=[
        "user:test@google.com",
        "user:test2@google.com",
        created_later.email.apply(lambda email: f"serviceAccount:{email}"),
    ],
    negate=False,
    device_policy={
        "require_screen_lock": False,
        "require_admin_approval": False,
        "require_corp_owned": True,
        "os_constraints": [{
            "os_type": "DESKTOP_CHROME_OS",
        }],
    },
    regions=[
        "IT",
        "US",
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "my policy",
    });

    var access_level_service_account = new Gcp.AccessContextManager.AccessLevel("access-level-service-account", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
        Title = "chromeos_no_lock",
        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs
        {
            Conditions = new[]
            {
                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs
                {
                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs
                    {
                        RequireScreenLock = true,
                        OsConstraints = new[]
                        {
                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs
                            {
                                OsType = "DESKTOP_CHROME_OS",
                            },
                        },
                    },
                    Regions = new[]
                    {
                        "CH",
                        "IT",
                        "US",
                    },
                },
            },
        },
    });

    var created_later = new Gcp.ServiceAccount.Account("created-later", new()
    {
        AccountId = "my-account-id",
    });

    var access_level_conditions = new Gcp.AccessContextManager.AccessLevelCondition("access-level-conditions", new()
    {
        AccessLevel = access_level_service_account.Name,
        IpSubnetworks = new[]
        {
            "192.0.4.0/24",
        },
        Members = new[]
        {
            "user:test@google.com",
            "user:test2@google.com",
            created_later.Email.Apply(email => $"serviceAccount:{email}"),
        },
        Negate = false,
        DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelConditionDevicePolicyArgs
        {
            RequireScreenLock = false,
            RequireAdminApproval = false,
            RequireCorpOwned = true,
            OsConstraints = new[]
            {
                new Gcp.AccessContextManager.Inputs.AccessLevelConditionDevicePolicyOsConstraintArgs
                {
                    OsType = "DESKTOP_CHROME_OS",
                },
            },
        },
        Regions = new[]
        {
            "IT",
            "US",
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("my policy"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessLevel(ctx, "access-level-service-account", &accesscontextmanager.AccessLevelArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			Name: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v/accessLevels/chromeos_no_lock", name), nil
			}).(pulumi.StringOutput),
			Title: pulumi.String("chromeos_no_lock"),
			Basic: &accesscontextmanager.AccessLevelBasicArgs{
				Conditions: accesscontextmanager.AccessLevelBasicConditionArray{
					&accesscontextmanager.AccessLevelBasicConditionArgs{
						DevicePolicy: &accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{
							RequireScreenLock: pulumi.Bool(true),
							OsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{
								&accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{
									OsType: pulumi.String("DESKTOP_CHROME_OS"),
								},
							},
						},
						Regions: pulumi.StringArray{
							pulumi.String("CH"),
							pulumi.String("IT"),
							pulumi.String("US"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = serviceaccount.NewAccount(ctx, "created-later", &serviceaccount.AccountArgs{
			AccountId: pulumi.String("my-account-id"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessLevelCondition(ctx, "access-level-conditions", &accesscontextmanager.AccessLevelConditionArgs{
			AccessLevel: access_level_service_account.Name,
			IpSubnetworks: pulumi.StringArray{
				pulumi.String("192.0.4.0/24"),
			},
			Members: pulumi.StringArray{
				pulumi.String("user:test@google.com"),
				pulumi.String("user:test2@google.com"),
				created_later.Email.ApplyT(func(email string) (string, error) {
					return fmt.Sprintf("serviceAccount:%v", email), nil
				}).(pulumi.StringOutput),
			},
			Negate: pulumi.Bool(false),
			DevicePolicy: &accesscontextmanager.AccessLevelConditionDevicePolicyArgs{
				RequireScreenLock:    pulumi.Bool(false),
				RequireAdminApproval: pulumi.Bool(false),
				RequireCorpOwned:     pulumi.Bool(true),
				OsConstraints: accesscontextmanager.AccessLevelConditionDevicePolicyOsConstraintArray{
					&accesscontextmanager.AccessLevelConditionDevicePolicyOsConstraintArgs{
						OsType: pulumi.String("DESKTOP_CHROME_OS"),
					},
				},
			},
			Regions: pulumi.StringArray{
				pulumi.String("IT"),
				pulumi.String("US"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.AccessLevel;
import com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.accesscontextmanager.AccessLevelCondition;
import com.pulumi.gcp.accesscontextmanager.AccessLevelConditionArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelConditionDevicePolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("my policy")
            .build());

        var access_level_service_account = new AccessLevel("access-level-service-account", AccessLevelArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/accessLevels/chromeos_no_lock", name)))
            .title("chromeos_no_lock")
            .basic(AccessLevelBasicArgs.builder()
                .conditions(AccessLevelBasicConditionArgs.builder()
                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()
                        .requireScreenLock(true)
                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()
                            .osType("DESKTOP_CHROME_OS")
                            .build())
                        .build())
                    .regions(                    
                        "CH",
                        "IT",
                        "US")
                    .build())
                .build())
            .build());

        var created_later = new Account("created-later", AccountArgs.builder()
            .accountId("my-account-id")
            .build());

        var access_level_conditions = new AccessLevelCondition("access-level-conditions", AccessLevelConditionArgs.builder()
            .accessLevel(access_level_service_account.name())
            .ipSubnetworks("192.0.4.0/24")
            .members(            
                "user:test@google.com",
                "user:test2@google.com",
                created_later.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .negate(false)
            .devicePolicy(AccessLevelConditionDevicePolicyArgs.builder()
                .requireScreenLock(false)
                .requireAdminApproval(false)
                .requireCorpOwned(true)
                .osConstraints(AccessLevelConditionDevicePolicyOsConstraintArgs.builder()
                    .osType("DESKTOP_CHROME_OS")
                    .build())
                .build())
            .regions(            
                "IT",
                "US")
            .build());

    }
}
```
```yaml
resources:
  access-level-service-account:
    type: gcp:accesscontextmanager:AccessLevel
    properties:
      parent: accessPolicies/${["access-policy"].name}
      name: accessPolicies/${["access-policy"].name}/accessLevels/chromeos_no_lock
      title: chromeos_no_lock
      basic:
        conditions:
          - devicePolicy:
              requireScreenLock: true
              osConstraints:
                - osType: DESKTOP_CHROME_OS
            regions:
              - CH
              - IT
              - US
  created-later:
    type: gcp:serviceaccount:Account
    properties:
      accountId: my-account-id
  access-level-conditions:
    type: gcp:accesscontextmanager:AccessLevelCondition
    properties:
      accessLevel: ${["access-level-service-account"].name}
      ipSubnetworks:
        - 192.0.4.0/24
      members:
        - user:test@google.com
        - user:test2@google.com
        - serviceAccount:${["created-later"].email}
      negate: false
      devicePolicy:
        requireScreenLock: false
        requireAdminApproval: false
        requireCorpOwned: true
        osConstraints:
          - osType: DESKTOP_CHROME_OS
      regions:
        - IT
        - US
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: my policy
```
<!--End PulumiCodeChooser -->

## Import

This resource does not support import.

R
accessLevel" ?The name of the Access Level to add this condition to.


- - -
Ò
devicePolicyB:

accesscontextmanager AccessLevelConditionDevicePolicyZgcp:accesscontextmanager/AccessLevelConditionDevicePolicy:AccessLevelConditionDevicePolicy¡Device specific restrictions, all restrictions must hold for
the Condition to be true. If not specified, all devices are
allowed.
Structure is documented below.
º
ipSubnetworksB*"  A list of CIDR block IP subnetwork specification. May be IPv4
or IPv6.
Note that for a CIDR IP address block, the specified IP address
portion must be properly truncated (i.e. all the host bits must
be zero) or the input is considered malformed. For example,
"192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
is not. The originating IP of a request must be in one of the
listed subnets in order for this Condition to be true.
If empty, all IP addresses are allowed.
ì
membersB*" ØAn allowed list of members (users, service accounts).
Using groups is not supported yet.
The signed-in user originating the request must be a part of one
of the provided members. If not specified, a request may come
from any user (logged in/not logged in, not present in any
groups, etc.).
Formats: `user:{emailid}`, `serviceAccount:{emailid}`
Ê
negateB
 ¹Whether to negate the Condition. If true, the Condition becomes
a NAND over its non-empty fields, each field must be false for
the Condition overall to be satisfied. Defaults to false.

regionsB*" pThe request must originate from one of the provided
countries/regions.
Format: A valid ISO 3166-1 alpha-2 code.
¹
requiredAccessLevelsB*" A list of other access levels defined in the same Policy,
referenced by resource name. Referencing an AccessLevel which
does not exist is an error. All access levels listed must be
granted for the Condition to be true.
Format: accessPolicies/{policy_id}/accessLevels/{short_name}
ð
vpcNetworkSources¬B©*¦:£
 
accesscontextmanager$AccessLevelConditionVpcNetworkSourcebgcp:accesscontextmanager/AccessLevelConditionVpcNetworkSource:AccessLevelConditionVpcNetworkSource«The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together with `ip_subnetworks`.
Structure is documented below.
"R
accessLevel" ?The name of the Access Level to add this condition to.


- - -
"Ò
devicePolicyB:

accesscontextmanager AccessLevelConditionDevicePolicyZgcp:accesscontextmanager/AccessLevelConditionDevicePolicy:AccessLevelConditionDevicePolicy¡Device specific restrictions, all restrictions must hold for
the Condition to be true. If not specified, all devices are
allowed.
Structure is documented below.
"º
ipSubnetworksB*"  A list of CIDR block IP subnetwork specification. May be IPv4
or IPv6.
Note that for a CIDR IP address block, the specified IP address
portion must be properly truncated (i.e. all the host bits must
be zero) or the input is considered malformed. For example,
"192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
is not. The originating IP of a request must be in one of the
listed subnets in order for this Condition to be true.
If empty, all IP addresses are allowed.
"ì
membersB*" ØAn allowed list of members (users, service accounts).
Using groups is not supported yet.
The signed-in user originating the request must be a part of one
of the provided members. If not specified, a request may come
from any user (logged in/not logged in, not present in any
groups, etc.).
Formats: `user:{emailid}`, `serviceAccount:{emailid}`
"Ê
negateB
 ¹Whether to negate the Condition. If true, the Condition becomes
a NAND over its non-empty fields, each field must be false for
the Condition overall to be satisfied. Defaults to false.
"
regionsB*" pThe request must originate from one of the provided
countries/regions.
Format: A valid ISO 3166-1 alpha-2 code.
"¹
requiredAccessLevelsB*" A list of other access levels defined in the same Policy,
referenced by resource name. Referencing an AccessLevel which
does not exist is an error. All access levels listed must be
granted for the Condition to be true.
Format: accessPolicies/{policy_id}/accessLevels/{short_name}
"ð
vpcNetworkSources¬B©*¦:£
 
accesscontextmanager$AccessLevelConditionVpcNetworkSourcebgcp:accesscontextmanager/AccessLevelConditionVpcNetworkSource:AccessLevelConditionVpcNetworkSource«The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together with `ip_subnetworks`.
Structure is documented below.
*Õ}
X
accesscontextmanagerAccessLevels2gcp:accesscontextmanager/accessLevels:AccessLevelsw## Example Usage

### Access Context Manager Access Levels Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "my policy",
});
const access_levels = new gcp.accesscontextmanager.AccessLevels("access-levels", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    accessLevels: [
        {
            name: pulumi.interpolate`accessPolicies/${access_policy.name}/accessLevels/chromeos_no_lock`,
            title: "chromeos_no_lock",
            basic: {
                conditions: [{
                    devicePolicy: {
                        requireScreenLock: true,
                        osConstraints: [{
                            osType: "DESKTOP_CHROME_OS",
                        }],
                    },
                    regions: [
                        "CH",
                        "IT",
                        "US",
                    ],
                }],
            },
        },
        {
            name: pulumi.interpolate`accessPolicies/${access_policy.name}/accessLevels/mac_no_lock`,
            title: "mac_no_lock",
            basic: {
                conditions: [{
                    devicePolicy: {
                        requireScreenLock: true,
                        osConstraints: [{
                            osType: "DESKTOP_MAC",
                        }],
                    },
                    regions: [
                        "CH",
                        "IT",
                        "US",
                    ],
                }],
            },
        },
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="my policy")
access_levels = gcp.accesscontextmanager.AccessLevels("access-levels",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    access_levels=[
        {
            "name": access_policy.name.apply(lambda name: f"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
            "title": "chromeos_no_lock",
            "basic": {
                "conditions": [{
                    "device_policy": {
                        "require_screen_lock": True,
                        "os_constraints": [{
                            "os_type": "DESKTOP_CHROME_OS",
                        }],
                    },
                    "regions": [
                        "CH",
                        "IT",
                        "US",
                    ],
                }],
            },
        },
        {
            "name": access_policy.name.apply(lambda name: f"accessPolicies/{name}/accessLevels/mac_no_lock"),
            "title": "mac_no_lock",
            "basic": {
                "conditions": [{
                    "device_policy": {
                        "require_screen_lock": True,
                        "os_constraints": [{
                            "os_type": "DESKTOP_MAC",
                        }],
                    },
                    "regions": [
                        "CH",
                        "IT",
                        "US",
                    ],
                }],
            },
        },
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "my policy",
    });

    var access_levels = new Gcp.AccessContextManager.AccessLevels("access-levels", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        AccessLevelDetails = new[]
        {
            new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelArgs
            {
                Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
                Title = "chromeos_no_lock",
                Basic = new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicArgs
                {
                    Conditions = new[]
                    {
                        new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionArgs
                        {
                            DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionDevicePolicyArgs
                            {
                                RequireScreenLock = true,
                                OsConstraints = new[]
                                {
                                    new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs
                                    {
                                        OsType = "DESKTOP_CHROME_OS",
                                    },
                                },
                            },
                            Regions = new[]
                            {
                                "CH",
                                "IT",
                                "US",
                            },
                        },
                    },
                },
            },
            new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelArgs
            {
                Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/accessLevels/mac_no_lock"),
                Title = "mac_no_lock",
                Basic = new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicArgs
                {
                    Conditions = new[]
                    {
                        new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionArgs
                        {
                            DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionDevicePolicyArgs
                            {
                                RequireScreenLock = true,
                                OsConstraints = new[]
                                {
                                    new Gcp.AccessContextManager.Inputs.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs
                                    {
                                        OsType = "DESKTOP_MAC",
                                    },
                                },
                            },
                            Regions = new[]
                            {
                                "CH",
                                "IT",
                                "US",
                            },
                        },
                    },
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("my policy"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessLevels(ctx, "access-levels", &accesscontextmanager.AccessLevelsArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			AccessLevels: accesscontextmanager.AccessLevelsAccessLevelArray{
				&accesscontextmanager.AccessLevelsAccessLevelArgs{
					Name: access_policy.Name.ApplyT(func(name string) (string, error) {
						return fmt.Sprintf("accessPolicies/%v/accessLevels/chromeos_no_lock", name), nil
					}).(pulumi.StringOutput),
					Title: pulumi.String("chromeos_no_lock"),
					Basic: &accesscontextmanager.AccessLevelsAccessLevelBasicArgs{
						Conditions: accesscontextmanager.AccessLevelsAccessLevelBasicConditionArray{
							&accesscontextmanager.AccessLevelsAccessLevelBasicConditionArgs{
								DevicePolicy: &accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyArgs{
									RequireScreenLock: pulumi.Bool(true),
									OsConstraints: accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArray{
										&accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs{
											OsType: pulumi.String("DESKTOP_CHROME_OS"),
										},
									},
								},
								Regions: pulumi.StringArray{
									pulumi.String("CH"),
									pulumi.String("IT"),
									pulumi.String("US"),
								},
							},
						},
					},
				},
				&accesscontextmanager.AccessLevelsAccessLevelArgs{
					Name: access_policy.Name.ApplyT(func(name string) (string, error) {
						return fmt.Sprintf("accessPolicies/%v/accessLevels/mac_no_lock", name), nil
					}).(pulumi.StringOutput),
					Title: pulumi.String("mac_no_lock"),
					Basic: &accesscontextmanager.AccessLevelsAccessLevelBasicArgs{
						Conditions: accesscontextmanager.AccessLevelsAccessLevelBasicConditionArray{
							&accesscontextmanager.AccessLevelsAccessLevelBasicConditionArgs{
								DevicePolicy: &accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyArgs{
									RequireScreenLock: pulumi.Bool(true),
									OsConstraints: accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArray{
										&accesscontextmanager.AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs{
											OsType: pulumi.String("DESKTOP_MAC"),
										},
									},
								},
								Regions: pulumi.StringArray{
									pulumi.String("CH"),
									pulumi.String("IT"),
									pulumi.String("US"),
								},
							},
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.AccessLevels;
import com.pulumi.gcp.accesscontextmanager.AccessLevelsArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelsAccessLevelArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelsAccessLevelBasicArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("my policy")
            .build());

        var access_levels = new AccessLevels("access-levels", AccessLevelsArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .accessLevels(            
                AccessLevelsAccessLevelArgs.builder()
                    .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/accessLevels/chromeos_no_lock", name)))
                    .title("chromeos_no_lock")
                    .basic(AccessLevelsAccessLevelBasicArgs.builder()
                        .conditions(AccessLevelsAccessLevelBasicConditionArgs.builder()
                            .devicePolicy(AccessLevelsAccessLevelBasicConditionDevicePolicyArgs.builder()
                                .requireScreenLock(true)
                                .osConstraints(AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()
                                    .osType("DESKTOP_CHROME_OS")
                                    .build())
                                .build())
                            .regions(                            
                                "CH",
                                "IT",
                                "US")
                            .build())
                        .build())
                    .build(),
                AccessLevelsAccessLevelArgs.builder()
                    .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/accessLevels/mac_no_lock", name)))
                    .title("mac_no_lock")
                    .basic(AccessLevelsAccessLevelBasicArgs.builder()
                        .conditions(AccessLevelsAccessLevelBasicConditionArgs.builder()
                            .devicePolicy(AccessLevelsAccessLevelBasicConditionDevicePolicyArgs.builder()
                                .requireScreenLock(true)
                                .osConstraints(AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()
                                    .osType("DESKTOP_MAC")
                                    .build())
                                .build())
                            .regions(                            
                                "CH",
                                "IT",
                                "US")
                            .build())
                        .build())
                    .build())
            .build());

    }
}
```
```yaml
resources:
  access-levels:
    type: gcp:accesscontextmanager:AccessLevels
    properties:
      parent: accessPolicies/${["access-policy"].name}
      accessLevels:
        - name: accessPolicies/${["access-policy"].name}/accessLevels/chromeos_no_lock
          title: chromeos_no_lock
          basic:
            conditions:
              - devicePolicy:
                  requireScreenLock: true
                  osConstraints:
                    - osType: DESKTOP_CHROME_OS
                regions:
                  - CH
                  - IT
                  - US
        - name: accessPolicies/${["access-policy"].name}/accessLevels/mac_no_lock
          title: mac_no_lock
          basic:
            conditions:
              - devicePolicy:
                  requireScreenLock: true
                  osConstraints:
                    - osType: DESKTOP_MAC
                regions:
                  - CH
                  - IT
                  - US
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: my policy
```
<!--End PulumiCodeChooser -->

## Import

AccessLevels can be imported using any of these accepted formats:

* `{{parent}}/accessLevels`

* `{{parent}}`

When using the `pulumi import` command, AccessLevels can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:accesscontextmanager/accessLevels:AccessLevels default {{parent}}/accessLevels
```

```sh
$ pulumi import gcp:accesscontextmanager/accessLevels:AccessLevels default {{parent}}
```


accessLevelsB*}:{
y
accesscontextmanagerAccessLevelsAccessLevelHgcp:accesscontextmanager/AccessLevelsAccessLevel:AccessLevelsAccessLevel~The desired Access Levels that should replace all existing Access Levels in the Access Policy.
Structure is documented below.
e
parent" WThe AccessPolicy this AccessLevel lives in.
Format: accessPolicies/{policy_id}


- - -
"
accessLevelsB*}:{
y
accesscontextmanagerAccessLevelsAccessLevelHgcp:accesscontextmanager/AccessLevelsAccessLevel:AccessLevelsAccessLevel~The desired Access Levels that should replace all existing Access Levels in the Access Policy.
Structure is documented below.
"e
parent" WThe AccessPolicy this AccessLevel lives in.
Format: accessPolicies/{policy_id}


- - -
*úD
X
accesscontextmanagerAccessPolicy2gcp:accesscontextmanager/accessPolicy:AccessPolicy¼=AccessPolicy is a container for AccessLevels (which define the necessary
attributes to use GCP services) and ServicePerimeters (which define
regions of services able to freely pass data within a perimeter). An
access policy is globally visible within an organization, and the
restrictions it specifies apply to all projects within an organization.


To get more information about AccessPolicy, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies)
* How-to Guides
    * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)

> **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
you must specify a `billing_project` and set `user_project_override` to true
in the provider configuration. Otherwise the ACM API will return a 403 error.
Your account must have the `serviceusage.services.use` permission on the
`billing_project` you defined.

## Example Usage

### Access Context Manager Access Policy Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "Org Access Policy",
});
```
```python
import pulumi
import pulumi_gcp as gcp

access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="Org Access Policy")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "Org Access Policy",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("Org Access Policy"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("Org Access Policy")
            .build());

    }
}
```
```yaml
resources:
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: Org Access Policy
```
<!--End PulumiCodeChooser -->
### Access Context Manager Access Policy Scoped


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = new gcp.organizations.Project("project", {
    projectId: "my-project-name",
    name: "my-project-name",
    orgId: "123456789",
    deletionPolicy: "DELETE",
});
const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "Scoped Access Policy",
    scopes: pulumi.interpolate`projects/${project.number}`,
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.Project("project",
    project_id="my-project-name",
    name="my-project-name",
    org_id="123456789",
    deletion_policy="DELETE")
access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="Scoped Access Policy",
    scopes=project.number.apply(lambda number: f"projects/{number}"))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = new Gcp.Organizations.Project("project", new()
    {
        ProjectId = "my-project-name",
        Name = "my-project-name",
        OrgId = "123456789",
        DeletionPolicy = "DELETE",
    });

    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "Scoped Access Policy",
        Scopes = project.Number.Apply(number => $"projects/{number}"),
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
			ProjectId:      pulumi.String("my-project-name"),
			Name:           pulumi.String("my-project-name"),
			OrgId:          pulumi.String("123456789"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("Scoped Access Policy"),
			Scopes: project.Number.ApplyT(func(number string) (string, error) {
				return fmt.Sprintf("projects/%v", number), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var project = new Project("project", ProjectArgs.builder()
            .projectId("my-project-name")
            .name("my-project-name")
            .orgId("123456789")
            .deletionPolicy("DELETE")
            .build());

        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("Scoped Access Policy")
            .scopes(project.number().applyValue(number -> String.format("projects/%s", number)))
            .build());

    }
}
```
```yaml
resources:
  project:
    type: gcp:organizations:Project
    properties:
      projectId: my-project-name
      name: my-project-name
      orgId: '123456789'
      deletionPolicy: DELETE
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: Scoped Access Policy
      scopes: projects/${project.number}
```
<!--End PulumiCodeChooser -->

## Import

AccessPolicy can be imported using any of these accepted formats:

* `{{name}}`

When using the `pulumi import` command, AccessPolicy can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:accesscontextmanager/accessPolicy:AccessPolicy default {{name}}
```

{
parent" mThe parent of this AccessPolicy in the Cloud Resource Hierarchy.
Format: 'organizations/{{organization_id}}'

scopesB" wFolder or project on which this policy is applicable.
Format: 'folders/{{folder_id}}' or 'projects/{{project_number}}'
E
title" 8Human readable title. Does not affect behavior.


- - -
"<

createTime" *Time the AccessPolicy was created in UTC.
"G
name" ;Resource name of the AccessPolicy. Format: '{{policy_id}}'
"{
parent" mThe parent of this AccessPolicy in the Cloud Resource Hierarchy.
Format: 'organizations/{{organization_id}}'
"
scopesB" wFolder or project on which this policy is applicable.
Format: 'folders/{{folder_id}}' or 'projects/{{project_number}}'
"E
title" 8Human readable title. Does not affect behavior.


- - -
"<

updateTime" *Time the AccessPolicy was updated in UTC.
*Õ
v
accesscontextmanagerAccessPolicyIamBindingFgcp:accesscontextmanager/accessPolicyIamBinding:AccessPolicyIamBindingü¸Three different resources help you manage your IAM policy for Access Context Manager (VPC Service Controls) AccessPolicy. Each of these resources serves a different use case:

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Authoritative. Sets the IAM policy for the accesspolicy and replaces any existing policy already attached.
* `gcp.accesscontextmanager.AccessPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the accesspolicy are preserved.
* `gcp.accesscontextmanager.AccessPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the accesspolicy are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Retrieves the IAM policy for the accesspolicy

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamPolicy` **cannot** be used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamBinding` and `gcp.accesscontextmanager.AccessPolicyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamBinding` resources **can be** used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.accesscontextmanager.AccessPolicyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/accesscontextmanager.policyAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.accesscontextmanager.AccessPolicyIamPolicy("policy", {
    name: access_policy.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/accesscontextmanager.policyAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.accesscontextmanager.AccessPolicyIamPolicy("policy",
    name=access_policy["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/accesscontextmanager.policyAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.AccessContextManager.AccessPolicyIamPolicy("policy", new()
    {
        Name = access_policy.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/accesscontextmanager.policyAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessPolicyIamPolicy(ctx, "policy", &accesscontextmanager.AccessPolicyIamPolicyArgs{
			Name:       pulumi.Any(access_policy.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/accesscontextmanager.policyAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new AccessPolicyIamPolicy("policy", AccessPolicyIamPolicyArgs.builder()
            .name(access_policy.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:accesscontextmanager:AccessPolicyIamPolicy
    properties:
      name: ${["access-policy"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/accesscontextmanager.policyAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.accesscontextmanager.AccessPolicyIamBinding("binding", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.accesscontextmanager.AccessPolicyIamBinding("binding",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.AccessContextManager.AccessPolicyIamBinding("binding", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamBinding(ctx, "binding", &accesscontextmanager.AccessPolicyIamBindingArgs{
			Name: pulumi.Any(access_policy.Name),
			Role: pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBinding;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new AccessPolicyIamBinding("binding", AccessPolicyIamBindingArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:accesscontextmanager:AccessPolicyIamBinding
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.accesscontextmanager.AccessPolicyIamMember("member", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.accesscontextmanager.AccessPolicyIamMember("member",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.AccessContextManager.AccessPolicyIamMember("member", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamMember(ctx, "member", &accesscontextmanager.AccessPolicyIamMemberArgs{
			Name:   pulumi.Any(access_policy.Name),
			Role:   pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMember;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new AccessPolicyIamMember("member", AccessPolicyIamMemberArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:accesscontextmanager:AccessPolicyIamMember
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Access Context Manager (VPC Service Controls) AccessPolicy
Three different resources help you manage your IAM policy for Access Context Manager (VPC Service Controls) AccessPolicy. Each of these resources serves a different use case:

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Authoritative. Sets the IAM policy for the accesspolicy and replaces any existing policy already attached.
* `gcp.accesscontextmanager.AccessPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the accesspolicy are preserved.
* `gcp.accesscontextmanager.AccessPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the accesspolicy are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Retrieves the IAM policy for the accesspolicy

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamPolicy` **cannot** be used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamBinding` and `gcp.accesscontextmanager.AccessPolicyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamBinding` resources **can be** used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.accesscontextmanager.AccessPolicyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/accesscontextmanager.policyAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.accesscontextmanager.AccessPolicyIamPolicy("policy", {
    name: access_policy.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/accesscontextmanager.policyAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.accesscontextmanager.AccessPolicyIamPolicy("policy",
    name=access_policy["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/accesscontextmanager.policyAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.AccessContextManager.AccessPolicyIamPolicy("policy", new()
    {
        Name = access_policy.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/accesscontextmanager.policyAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessPolicyIamPolicy(ctx, "policy", &accesscontextmanager.AccessPolicyIamPolicyArgs{
			Name:       pulumi.Any(access_policy.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/accesscontextmanager.policyAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new AccessPolicyIamPolicy("policy", AccessPolicyIamPolicyArgs.builder()
            .name(access_policy.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:accesscontextmanager:AccessPolicyIamPolicy
    properties:
      name: ${["access-policy"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/accesscontextmanager.policyAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.accesscontextmanager.AccessPolicyIamBinding("binding", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.accesscontextmanager.AccessPolicyIamBinding("binding",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.AccessContextManager.AccessPolicyIamBinding("binding", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamBinding(ctx, "binding", &accesscontextmanager.AccessPolicyIamBindingArgs{
			Name: pulumi.Any(access_policy.Name),
			Role: pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBinding;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new AccessPolicyIamBinding("binding", AccessPolicyIamBindingArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:accesscontextmanager:AccessPolicyIamBinding
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.accesscontextmanager.AccessPolicyIamMember("member", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.accesscontextmanager.AccessPolicyIamMember("member",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.AccessContextManager.AccessPolicyIamMember("member", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamMember(ctx, "member", &accesscontextmanager.AccessPolicyIamMemberArgs{
			Name:   pulumi.Any(access_policy.Name),
			Role:   pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMember;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new AccessPolicyIamMember("member", AccessPolicyIamMemberArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:accesscontextmanager:AccessPolicyIamMember
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* accessPolicies/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Access Context Manager (VPC Service Controls) accesspolicy IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:accesscontextmanager/accessPolicyIamBinding:AccessPolicyIamBinding editor "accessPolicies/{{access_policy}} roles/accesscontextmanager.policyAdmin user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:accesscontextmanager/accessPolicyIamBinding:AccessPolicyIamBinding editor "accessPolicies/{{access_policy}} roles/accesscontextmanager.policyAdmin"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:accesscontextmanager/accessPolicyIamBinding:AccessPolicyIamBinding editor accessPolicies/{{access_policy}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

¨
	conditionB:

accesscontextmanagerAccessPolicyIamBindingConditionXgcp:accesscontextmanager/AccessPolicyIamBindingCondition:AccessPolicyIamBindingConditionÖ	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
I
nameB" ;Used to find the parent resource to bind the IAM policy to
è
role" ÛThe role that should be applied. Only one
`gcp.accesscontextmanager.AccessPolicyIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"¨
	conditionB:

accesscontextmanagerAccessPolicyIamBindingConditionXgcp:accesscontextmanager/AccessPolicyIamBindingCondition:AccessPolicyIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"Ö	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"G
name" ;Used to find the parent resource to bind the IAM policy to
"è
role" ÛThe role that should be applied. Only one
`gcp.accesscontextmanager.AccessPolicyIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*Õ
s
accesscontextmanagerAccessPolicyIamMemberDgcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMemberö¸Three different resources help you manage your IAM policy for Access Context Manager (VPC Service Controls) AccessPolicy. Each of these resources serves a different use case:

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Authoritative. Sets the IAM policy for the accesspolicy and replaces any existing policy already attached.
* `gcp.accesscontextmanager.AccessPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the accesspolicy are preserved.
* `gcp.accesscontextmanager.AccessPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the accesspolicy are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Retrieves the IAM policy for the accesspolicy

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamPolicy` **cannot** be used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamBinding` and `gcp.accesscontextmanager.AccessPolicyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamBinding` resources **can be** used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.accesscontextmanager.AccessPolicyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/accesscontextmanager.policyAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.accesscontextmanager.AccessPolicyIamPolicy("policy", {
    name: access_policy.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/accesscontextmanager.policyAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.accesscontextmanager.AccessPolicyIamPolicy("policy",
    name=access_policy["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/accesscontextmanager.policyAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.AccessContextManager.AccessPolicyIamPolicy("policy", new()
    {
        Name = access_policy.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/accesscontextmanager.policyAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessPolicyIamPolicy(ctx, "policy", &accesscontextmanager.AccessPolicyIamPolicyArgs{
			Name:       pulumi.Any(access_policy.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/accesscontextmanager.policyAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new AccessPolicyIamPolicy("policy", AccessPolicyIamPolicyArgs.builder()
            .name(access_policy.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:accesscontextmanager:AccessPolicyIamPolicy
    properties:
      name: ${["access-policy"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/accesscontextmanager.policyAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.accesscontextmanager.AccessPolicyIamBinding("binding", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.accesscontextmanager.AccessPolicyIamBinding("binding",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.AccessContextManager.AccessPolicyIamBinding("binding", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamBinding(ctx, "binding", &accesscontextmanager.AccessPolicyIamBindingArgs{
			Name: pulumi.Any(access_policy.Name),
			Role: pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBinding;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new AccessPolicyIamBinding("binding", AccessPolicyIamBindingArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:accesscontextmanager:AccessPolicyIamBinding
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.accesscontextmanager.AccessPolicyIamMember("member", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.accesscontextmanager.AccessPolicyIamMember("member",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.AccessContextManager.AccessPolicyIamMember("member", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamMember(ctx, "member", &accesscontextmanager.AccessPolicyIamMemberArgs{
			Name:   pulumi.Any(access_policy.Name),
			Role:   pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMember;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new AccessPolicyIamMember("member", AccessPolicyIamMemberArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:accesscontextmanager:AccessPolicyIamMember
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Access Context Manager (VPC Service Controls) AccessPolicy
Three different resources help you manage your IAM policy for Access Context Manager (VPC Service Controls) AccessPolicy. Each of these resources serves a different use case:

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Authoritative. Sets the IAM policy for the accesspolicy and replaces any existing policy already attached.
* `gcp.accesscontextmanager.AccessPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the accesspolicy are preserved.
* `gcp.accesscontextmanager.AccessPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the accesspolicy are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Retrieves the IAM policy for the accesspolicy

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamPolicy` **cannot** be used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamBinding` and `gcp.accesscontextmanager.AccessPolicyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamBinding` resources **can be** used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.accesscontextmanager.AccessPolicyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/accesscontextmanager.policyAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.accesscontextmanager.AccessPolicyIamPolicy("policy", {
    name: access_policy.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/accesscontextmanager.policyAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.accesscontextmanager.AccessPolicyIamPolicy("policy",
    name=access_policy["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/accesscontextmanager.policyAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.AccessContextManager.AccessPolicyIamPolicy("policy", new()
    {
        Name = access_policy.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/accesscontextmanager.policyAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessPolicyIamPolicy(ctx, "policy", &accesscontextmanager.AccessPolicyIamPolicyArgs{
			Name:       pulumi.Any(access_policy.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/accesscontextmanager.policyAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new AccessPolicyIamPolicy("policy", AccessPolicyIamPolicyArgs.builder()
            .name(access_policy.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:accesscontextmanager:AccessPolicyIamPolicy
    properties:
      name: ${["access-policy"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/accesscontextmanager.policyAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.accesscontextmanager.AccessPolicyIamBinding("binding", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.accesscontextmanager.AccessPolicyIamBinding("binding",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.AccessContextManager.AccessPolicyIamBinding("binding", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamBinding(ctx, "binding", &accesscontextmanager.AccessPolicyIamBindingArgs{
			Name: pulumi.Any(access_policy.Name),
			Role: pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBinding;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new AccessPolicyIamBinding("binding", AccessPolicyIamBindingArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:accesscontextmanager:AccessPolicyIamBinding
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.accesscontextmanager.AccessPolicyIamMember("member", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.accesscontextmanager.AccessPolicyIamMember("member",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.AccessContextManager.AccessPolicyIamMember("member", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamMember(ctx, "member", &accesscontextmanager.AccessPolicyIamMemberArgs{
			Name:   pulumi.Any(access_policy.Name),
			Role:   pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMember;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new AccessPolicyIamMember("member", AccessPolicyIamMemberArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:accesscontextmanager:AccessPolicyIamMember
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* accessPolicies/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Access Context Manager (VPC Service Controls) accesspolicy IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember editor "accessPolicies/{{access_policy}} roles/accesscontextmanager.policyAdmin user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember editor "accessPolicies/{{access_policy}} roles/accesscontextmanager.policyAdmin"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:accesscontextmanager/accessPolicyIamMember:AccessPolicyIamMember editor accessPolicies/{{access_policy}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

¥
	conditionB:

accesscontextmanagerAccessPolicyIamMemberConditionVgcp:accesscontextmanager/AccessPolicyIamMemberCondition:AccessPolicyIamMemberConditionÓ	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
I
nameB" ;Used to find the parent resource to bind the IAM policy to
è
role" ÛThe role that should be applied. Only one
`gcp.accesscontextmanager.AccessPolicyIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"¥
	conditionB:

accesscontextmanagerAccessPolicyIamMemberConditionVgcp:accesscontextmanager/AccessPolicyIamMemberCondition:AccessPolicyIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"Ó	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"G
name" ;Used to find the parent resource to bind the IAM policy to
"è
role" ÛThe role that should be applied. Only one
`gcp.accesscontextmanager.AccessPolicyIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*ú¼
s
accesscontextmanagerAccessPolicyIamPolicyDgcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicyö¸Three different resources help you manage your IAM policy for Access Context Manager (VPC Service Controls) AccessPolicy. Each of these resources serves a different use case:

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Authoritative. Sets the IAM policy for the accesspolicy and replaces any existing policy already attached.
* `gcp.accesscontextmanager.AccessPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the accesspolicy are preserved.
* `gcp.accesscontextmanager.AccessPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the accesspolicy are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Retrieves the IAM policy for the accesspolicy

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamPolicy` **cannot** be used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamBinding` and `gcp.accesscontextmanager.AccessPolicyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamBinding` resources **can be** used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.accesscontextmanager.AccessPolicyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/accesscontextmanager.policyAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.accesscontextmanager.AccessPolicyIamPolicy("policy", {
    name: access_policy.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/accesscontextmanager.policyAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.accesscontextmanager.AccessPolicyIamPolicy("policy",
    name=access_policy["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/accesscontextmanager.policyAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.AccessContextManager.AccessPolicyIamPolicy("policy", new()
    {
        Name = access_policy.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/accesscontextmanager.policyAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessPolicyIamPolicy(ctx, "policy", &accesscontextmanager.AccessPolicyIamPolicyArgs{
			Name:       pulumi.Any(access_policy.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/accesscontextmanager.policyAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new AccessPolicyIamPolicy("policy", AccessPolicyIamPolicyArgs.builder()
            .name(access_policy.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:accesscontextmanager:AccessPolicyIamPolicy
    properties:
      name: ${["access-policy"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/accesscontextmanager.policyAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.accesscontextmanager.AccessPolicyIamBinding("binding", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.accesscontextmanager.AccessPolicyIamBinding("binding",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.AccessContextManager.AccessPolicyIamBinding("binding", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamBinding(ctx, "binding", &accesscontextmanager.AccessPolicyIamBindingArgs{
			Name: pulumi.Any(access_policy.Name),
			Role: pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBinding;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new AccessPolicyIamBinding("binding", AccessPolicyIamBindingArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:accesscontextmanager:AccessPolicyIamBinding
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.accesscontextmanager.AccessPolicyIamMember("member", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.accesscontextmanager.AccessPolicyIamMember("member",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.AccessContextManager.AccessPolicyIamMember("member", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamMember(ctx, "member", &accesscontextmanager.AccessPolicyIamMemberArgs{
			Name:   pulumi.Any(access_policy.Name),
			Role:   pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMember;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new AccessPolicyIamMember("member", AccessPolicyIamMemberArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:accesscontextmanager:AccessPolicyIamMember
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Access Context Manager (VPC Service Controls) AccessPolicy
Three different resources help you manage your IAM policy for Access Context Manager (VPC Service Controls) AccessPolicy. Each of these resources serves a different use case:

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Authoritative. Sets the IAM policy for the accesspolicy and replaces any existing policy already attached.
* `gcp.accesscontextmanager.AccessPolicyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the accesspolicy are preserved.
* `gcp.accesscontextmanager.AccessPolicyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the accesspolicy are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.accesscontextmanager.AccessPolicyIamPolicy`: Retrieves the IAM policy for the accesspolicy

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamPolicy` **cannot** be used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamBinding` and `gcp.accesscontextmanager.AccessPolicyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.accesscontextmanager.AccessPolicyIamBinding` resources **can be** used in conjunction with `gcp.accesscontextmanager.AccessPolicyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.accesscontextmanager.AccessPolicyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/accesscontextmanager.policyAdmin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.accesscontextmanager.AccessPolicyIamPolicy("policy", {
    name: access_policy.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/accesscontextmanager.policyAdmin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.accesscontextmanager.AccessPolicyIamPolicy("policy",
    name=access_policy["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/accesscontextmanager.policyAdmin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.AccessContextManager.AccessPolicyIamPolicy("policy", new()
    {
        Name = access_policy.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/accesscontextmanager.policyAdmin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessPolicyIamPolicy(ctx, "policy", &accesscontextmanager.AccessPolicyIamPolicyArgs{
			Name:       pulumi.Any(access_policy.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/accesscontextmanager.policyAdmin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new AccessPolicyIamPolicy("policy", AccessPolicyIamPolicyArgs.builder()
            .name(access_policy.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:accesscontextmanager:AccessPolicyIamPolicy
    properties:
      name: ${["access-policy"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/accesscontextmanager.policyAdmin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.accesscontextmanager.AccessPolicyIamBinding("binding", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.accesscontextmanager.AccessPolicyIamBinding("binding",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.AccessContextManager.AccessPolicyIamBinding("binding", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamBinding(ctx, "binding", &accesscontextmanager.AccessPolicyIamBindingArgs{
			Name: pulumi.Any(access_policy.Name),
			Role: pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBinding;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new AccessPolicyIamBinding("binding", AccessPolicyIamBindingArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:accesscontextmanager:AccessPolicyIamBinding
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.accesscontextmanager.AccessPolicyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.accesscontextmanager.AccessPolicyIamMember("member", {
    name: access_policy.name,
    role: "roles/accesscontextmanager.policyAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.accesscontextmanager.AccessPolicyIamMember("member",
    name=access_policy["name"],
    role="roles/accesscontextmanager.policyAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.AccessContextManager.AccessPolicyIamMember("member", new()
    {
        Name = access_policy.Name,
        Role = "roles/accesscontextmanager.policyAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicyIamMember(ctx, "member", &accesscontextmanager.AccessPolicyIamMemberArgs{
			Name:   pulumi.Any(access_policy.Name),
			Role:   pulumi.String("roles/accesscontextmanager.policyAdmin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMember;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new AccessPolicyIamMember("member", AccessPolicyIamMemberArgs.builder()
            .name(access_policy.name())
            .role("roles/accesscontextmanager.policyAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:accesscontextmanager:AccessPolicyIamMember
    properties:
      name: ${["access-policy"].name}
      role: roles/accesscontextmanager.policyAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* accessPolicies/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Access Context Manager (VPC Service Controls) accesspolicy IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy editor "accessPolicies/{{access_policy}} roles/accesscontextmanager.policyAdmin user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy editor "accessPolicies/{{access_policy}} roles/accesscontextmanager.policyAdmin"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:accesscontextmanager/accessPolicyIamPolicy:AccessPolicyIamPolicy editor accessPolicies/{{access_policy}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

I
nameB" ;Used to find the parent resource to bind the IAM policy to
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"3
etag" '(Computed) The etag of the IAM policy.
"G
name" ;Used to find the parent resource to bind the IAM policy to
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
*Z
j
accesscontextmanagerAuthorizedOrgsDesc>gcp:accesscontextmanager/authorizedOrgsDesc:AuthorizedOrgsDescÚ8An authorized organizations description describes a list of organizations
(1) that have been authorized to use certain asset (for example, device) data
owned by different organizations at the enforcement points, or (2) with certain
asset (for example, device) have been authorized to access the resources in
another organization at the enforcement points.


To get more information about AuthorizedOrgsDesc, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.authorizedOrgsDescs)
* How-to Guides
    * [gcloud docs](https://cloud.google.com/beyondcorp-enterprise/docs/cross-org-authorization)

> **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
you must specify a `billing_project` and set `user_project_override` to true
in the provider configuration. Otherwise the ACM API will return a 403 error.
Your account must have the `serviceusage.services.use` permission on the
`billing_project` you defined.

## Example Usage

### Access Context Manager Authorized Orgs Desc Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const test_access = new gcp.accesscontextmanager.AccessPolicy("test-access", {
    parent: "organizations/",
    title: "my policy",
});
const authorized_orgs_desc = new gcp.accesscontextmanager.AuthorizedOrgsDesc("authorized-orgs-desc", {
    parent: pulumi.interpolate`accessPolicies/${test_access.name}`,
    name: pulumi.interpolate`accessPolicies/${test_access.name}/authorizedOrgsDescs/fakeDescName`,
    authorizationType: "AUTHORIZATION_TYPE_TRUST",
    assetType: "ASSET_TYPE_CREDENTIAL_STRENGTH",
    authorizationDirection: "AUTHORIZATION_DIRECTION_TO",
    orgs: [
        "organizations/12345",
        "organizations/98765",
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

test_access = gcp.accesscontextmanager.AccessPolicy("test-access",
    parent="organizations/",
    title="my policy")
authorized_orgs_desc = gcp.accesscontextmanager.AuthorizedOrgsDesc("authorized-orgs-desc",
    parent=test_access.name.apply(lambda name: f"accessPolicies/{name}"),
    name=test_access.name.apply(lambda name: f"accessPolicies/{name}/authorizedOrgsDescs/fakeDescName"),
    authorization_type="AUTHORIZATION_TYPE_TRUST",
    asset_type="ASSET_TYPE_CREDENTIAL_STRENGTH",
    authorization_direction="AUTHORIZATION_DIRECTION_TO",
    orgs=[
        "organizations/12345",
        "organizations/98765",
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var test_access = new Gcp.AccessContextManager.AccessPolicy("test-access", new()
    {
        Parent = "organizations/",
        Title = "my policy",
    });

    var authorized_orgs_desc = new Gcp.AccessContextManager.AuthorizedOrgsDesc("authorized-orgs-desc", new()
    {
        Parent = test_access.Name.Apply(name => $"accessPolicies/{name}"),
        Name = test_access.Name.Apply(name => $"accessPolicies/{name}/authorizedOrgsDescs/fakeDescName"),
        AuthorizationType = "AUTHORIZATION_TYPE_TRUST",
        AssetType = "ASSET_TYPE_CREDENTIAL_STRENGTH",
        AuthorizationDirection = "AUTHORIZATION_DIRECTION_TO",
        Orgs = new[]
        {
            "organizations/12345",
            "organizations/98765",
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicy(ctx, "test-access", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/"),
			Title:  pulumi.String("my policy"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAuthorizedOrgsDesc(ctx, "authorized-orgs-desc", &accesscontextmanager.AuthorizedOrgsDescArgs{
			Parent: test_access.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			Name: test_access.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v/authorizedOrgsDescs/fakeDescName", name), nil
			}).(pulumi.StringOutput),
			AuthorizationType:      pulumi.String("AUTHORIZATION_TYPE_TRUST"),
			AssetType:              pulumi.String("ASSET_TYPE_CREDENTIAL_STRENGTH"),
			AuthorizationDirection: pulumi.String("AUTHORIZATION_DIRECTION_TO"),
			Orgs: pulumi.StringArray{
				pulumi.String("organizations/12345"),
				pulumi.String("organizations/98765"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.AuthorizedOrgsDesc;
import com.pulumi.gcp.accesscontextmanager.AuthorizedOrgsDescArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var test_access = new AccessPolicy("test-access", AccessPolicyArgs.builder()
            .parent("organizations/")
            .title("my policy")
            .build());

        var authorized_orgs_desc = new AuthorizedOrgsDesc("authorized-orgs-desc", AuthorizedOrgsDescArgs.builder()
            .parent(test_access.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .name(test_access.name().applyValue(name -> String.format("accessPolicies/%s/authorizedOrgsDescs/fakeDescName", name)))
            .authorizationType("AUTHORIZATION_TYPE_TRUST")
            .assetType("ASSET_TYPE_CREDENTIAL_STRENGTH")
            .authorizationDirection("AUTHORIZATION_DIRECTION_TO")
            .orgs(            
                "organizations/12345",
                "organizations/98765")
            .build());

    }
}
```
```yaml
resources:
  authorized-orgs-desc:
    type: gcp:accesscontextmanager:AuthorizedOrgsDesc
    properties:
      parent: accessPolicies/${["test-access"].name}
      name: accessPolicies/${["test-access"].name}/authorizedOrgsDescs/fakeDescName
      authorizationType: AUTHORIZATION_TYPE_TRUST
      assetType: ASSET_TYPE_CREDENTIAL_STRENGTH
      authorizationDirection: AUTHORIZATION_DIRECTION_TO
      orgs:
        - organizations/12345
        - organizations/98765
  test-access:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/
      title: my policy
```
<!--End PulumiCodeChooser -->

## Import

AuthorizedOrgsDesc can be imported using any of these accepted formats:

* `{{name}}`

When using the `pulumi import` command, AuthorizedOrgsDesc can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:accesscontextmanager/authorizedOrgsDesc:AuthorizedOrgsDesc default {{name}}
```


	assetTypeB" The type of entities that need to use the authorization relationship during
evaluation, such as a device. Valid values are "ASSET_TYPE_DEVICE" and
"ASSET_TYPE_CREDENTIAL_STRENGTH".
Possible values are: `ASSET_TYPE_DEVICE`, `ASSET_TYPE_CREDENTIAL_STRENGTH`.
Ü
authorizationDirectionB" »The direction of the authorization relationship between this organization
and the organizations listed in the "orgs" field. The valid values for this
field include the following:
AUTHORIZATION_DIRECTION_FROM: Allows this organization to evaluate traffic
in the organizations listed in the `orgs` field.
AUTHORIZATION_DIRECTION_TO: Allows the organizations listed in the `orgs`
field to evaluate the traffic in this organization.
For the authorization relationship to take effect, all of the organizations
must authorize and specify the appropriate relationship direction. For
example, if organization A authorized organization B and C to evaluate its
traffic, by specifying "AUTHORIZATION_DIRECTION_TO" as the authorization
direction, organizations B and C must specify
"AUTHORIZATION_DIRECTION_FROM" as the authorization direction in their
"AuthorizedOrgsDesc" resource.
Possible values are: `AUTHORIZATION_DIRECTION_TO`, `AUTHORIZATION_DIRECTION_FROM`.
ª
authorizationTypeB" A granular control type for authorization levels. Valid value is "AUTHORIZATION_TYPE_TRUST".
Possible values are: `AUTHORIZATION_TYPE_TRUST`.
Ë
nameB" ¼Resource name for the `AuthorizedOrgsDesc`. Format:
`accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}`.
The `authorized_orgs_desc` component must begin with a letter, followed by
alphanumeric characters or `_`.
After you create an `AuthorizedOrgsDesc`, you cannot change its `name`.


- - -

orgsB*" ~The list of organization ids in this AuthorizedOrgsDesc.
Format: `organizations/<org_number>`
Example: `organizations/123456`
b
parent" TRequired. Resource name for the access policy which owns this `AuthorizedOrgsDesc`.
"
	assetTypeB" The type of entities that need to use the authorization relationship during
evaluation, such as a device. Valid values are "ASSET_TYPE_DEVICE" and
"ASSET_TYPE_CREDENTIAL_STRENGTH".
Possible values are: `ASSET_TYPE_DEVICE`, `ASSET_TYPE_CREDENTIAL_STRENGTH`.
"Ü
authorizationDirectionB" »The direction of the authorization relationship between this organization
and the organizations listed in the "orgs" field. The valid values for this
field include the following:
AUTHORIZATION_DIRECTION_FROM: Allows this organization to evaluate traffic
in the organizations listed in the `orgs` field.
AUTHORIZATION_DIRECTION_TO: Allows the organizations listed in the `orgs`
field to evaluate the traffic in this organization.
For the authorization relationship to take effect, all of the organizations
must authorize and specify the appropriate relationship direction. For
example, if organization A authorized organization B and C to evaluate its
traffic, by specifying "AUTHORIZATION_DIRECTION_TO" as the authorization
direction, organizations B and C must specify
"AUTHORIZATION_DIRECTION_FROM" as the authorization direction in their
"AuthorizedOrgsDesc" resource.
Possible values are: `AUTHORIZATION_DIRECTION_TO`, `AUTHORIZATION_DIRECTION_FROM`.
"ª
authorizationTypeB" A granular control type for authorization levels. Valid value is "AUTHORIZATION_TYPE_TRUST".
Possible values are: `AUTHORIZATION_TYPE_TRUST`.
"B

createTime" 0Time the AuthorizedOrgsDesc was created in UTC.
"É
name" ¼Resource name for the `AuthorizedOrgsDesc`. Format:
`accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}`.
The `authorized_orgs_desc` component must begin with a letter, followed by
alphanumeric characters or `_`.
After you create an `AuthorizedOrgsDesc`, you cannot change its `name`.


- - -
"
orgsB*" ~The list of organization ids in this AuthorizedOrgsDesc.
Format: `organizations/<org_number>`
Example: `organizations/123456`
"b
parent" TRequired. Resource name for the access policy which owns this `AuthorizedOrgsDesc`.
"B

updateTime" 0Time the AuthorizedOrgsDesc was updated in UTC.
*¡
X
accesscontextmanagerEgressPolicy2gcp:accesscontextmanager/egressPolicy:EgressPolicyöThis resource has been deprecated, please refer to ServicePerimeterEgressPolicy.


To get more information about EgressPolicy, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters#egresspolicy)

## Import

EgressPolicy can be imported using any of these accepted formats:

* `{{egress_policy_name}}/{{resource}}`

When using the `pulumi import` command, EgressPolicy can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:accesscontextmanager/egressPolicy:EgressPolicy default {{egress_policy_name}}/{{resource}}
```

[
egressPolicyName" CThe name of the Service Perimeter to add this resource to.


- - -
H
resource" 8A GCP resource that is inside of the service perimeter.
"[
egressPolicyName" CThe name of the Service Perimeter to add this resource to.


- - -
"H
resource" 8A GCP resource that is inside of the service perimeter.
*óu
p
accesscontextmanagerGcpUserAccessBindingBgcp:accesscontextmanager/gcpUserAccessBinding:GcpUserAccessBindingîgRestricts access to Cloud Console and Google Cloud APIs for a set of users using Context-Aware Access.


To get more information about GcpUserAccessBinding, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/organizations.gcpUserAccessBindings)

## Example Usage

### Access Context Manager Gcp User Access Binding Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as std from "@pulumi/std";

const group = new gcp.cloudidentity.Group("group", {
    displayName: "my-identity-group",
    parent: "customers/A01b123xz",
    groupKey: {
        id: "my-identity-group@example.com",
    },
    labels: {
        "cloudidentity.googleapis.com/groups.discussion_forum": "",
    },
});
const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "my policy",
});
const accessLevelIdForUserAccessBinding = new gcp.accesscontextmanager.AccessLevel("access_level_id_for_user_access_binding", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    name: pulumi.interpolate`accessPolicies/${access_policy.name}/accessLevels/chromeos_no_lock`,
    title: "chromeos_no_lock",
    basic: {
        conditions: [{
            devicePolicy: {
                requireScreenLock: true,
                osConstraints: [{
                    osType: "DESKTOP_CHROME_OS",
                }],
            },
            regions: ["US"],
        }],
    },
});
const gcpUserAccessBinding = new gcp.accesscontextmanager.GcpUserAccessBinding("gcp_user_access_binding", {
    organizationId: "123456789",
    groupKey: std.trimprefixOutput({
        input: group.id,
        prefix: "groups/",
    }).apply(invoke => invoke.result),
    accessLevels: accessLevelIdForUserAccessBinding.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_std as std

group = gcp.cloudidentity.Group("group",
    display_name="my-identity-group",
    parent="customers/A01b123xz",
    group_key={
        "id": "my-identity-group@example.com",
    },
    labels={
        "cloudidentity.googleapis.com/groups.discussion_forum": "",
    })
access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="my policy")
access_level_id_for_user_access_binding = gcp.accesscontextmanager.AccessLevel("access_level_id_for_user_access_binding",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
    title="chromeos_no_lock",
    basic={
        "conditions": [{
            "device_policy": {
                "require_screen_lock": True,
                "os_constraints": [{
                    "os_type": "DESKTOP_CHROME_OS",
                }],
            },
            "regions": ["US"],
        }],
    })
gcp_user_access_binding = gcp.accesscontextmanager.GcpUserAccessBinding("gcp_user_access_binding",
    organization_id="123456789",
    group_key=std.trimprefix_output(input=group.id,
        prefix="groups/").apply(lambda invoke: invoke.result),
    access_levels=access_level_id_for_user_access_binding.name)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var @group = new Gcp.CloudIdentity.Group("group", new()
    {
        DisplayName = "my-identity-group",
        Parent = "customers/A01b123xz",
        GroupKey = new Gcp.CloudIdentity.Inputs.GroupGroupKeyArgs
        {
            Id = "my-identity-group@example.com",
        },
        Labels = 
        {
            { "cloudidentity.googleapis.com/groups.discussion_forum", "" },
        },
    });

    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "my policy",
    });

    var accessLevelIdForUserAccessBinding = new Gcp.AccessContextManager.AccessLevel("access_level_id_for_user_access_binding", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
        Title = "chromeos_no_lock",
        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs
        {
            Conditions = new[]
            {
                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs
                {
                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs
                    {
                        RequireScreenLock = true,
                        OsConstraints = new[]
                        {
                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs
                            {
                                OsType = "DESKTOP_CHROME_OS",
                            },
                        },
                    },
                    Regions = new[]
                    {
                        "US",
                    },
                },
            },
        },
    });

    var gcpUserAccessBinding = new Gcp.AccessContextManager.GcpUserAccessBinding("gcp_user_access_binding", new()
    {
        OrganizationId = "123456789",
        GroupKey = Std.Trimprefix.Invoke(new()
        {
            Input = @group.Id,
            Prefix = "groups/",
        }).Apply(invoke => invoke.Result),
        AccessLevels = accessLevelIdForUserAccessBinding.Name,
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/cloudidentity"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		group, err := cloudidentity.NewGroup(ctx, "group", &cloudidentity.GroupArgs{
			DisplayName: pulumi.String("my-identity-group"),
			Parent:      pulumi.String("customers/A01b123xz"),
			GroupKey: &cloudidentity.GroupGroupKeyArgs{
				Id: pulumi.String("my-identity-group@example.com"),
			},
			Labels: pulumi.StringMap{
				"cloudidentity.googleapis.com/groups.discussion_forum": pulumi.String(""),
			},
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("my policy"),
		})
		if err != nil {
			return err
		}
		accessLevelIdForUserAccessBinding, err := accesscontextmanager.NewAccessLevel(ctx, "access_level_id_for_user_access_binding", &accesscontextmanager.AccessLevelArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			Name: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v/accessLevels/chromeos_no_lock", name), nil
			}).(pulumi.StringOutput),
			Title: pulumi.String("chromeos_no_lock"),
			Basic: &accesscontextmanager.AccessLevelBasicArgs{
				Conditions: accesscontextmanager.AccessLevelBasicConditionArray{
					&accesscontextmanager.AccessLevelBasicConditionArgs{
						DevicePolicy: &accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{
							RequireScreenLock: pulumi.Bool(true),
							OsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{
								&accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{
									OsType: pulumi.String("DESKTOP_CHROME_OS"),
								},
							},
						},
						Regions: pulumi.StringArray{
							pulumi.String("US"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewGcpUserAccessBinding(ctx, "gcp_user_access_binding", &accesscontextmanager.GcpUserAccessBindingArgs{
			OrganizationId: pulumi.String("123456789"),
			GroupKey: pulumi.String(std.TrimprefixOutput(ctx, std.TrimprefixOutputArgs{
				Input:  group.ID(),
				Prefix: pulumi.String("groups/"),
			}, nil).ApplyT(func(invoke std.TrimprefixResult) (*string, error) {
				return invoke.Result, nil
			}).(pulumi.StringPtrOutput)),
			AccessLevels: accessLevelIdForUserAccessBinding.Name,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.cloudidentity.Group;
import com.pulumi.gcp.cloudidentity.GroupArgs;
import com.pulumi.gcp.cloudidentity.inputs.GroupGroupKeyArgs;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.AccessLevel;
import com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;
import com.pulumi.gcp.accesscontextmanager.GcpUserAccessBinding;
import com.pulumi.gcp.accesscontextmanager.GcpUserAccessBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var group = new Group("group", GroupArgs.builder()
            .displayName("my-identity-group")
            .parent("customers/A01b123xz")
            .groupKey(GroupGroupKeyArgs.builder()
                .id("my-identity-group@example.com")
                .build())
            .labels(Map.of("cloudidentity.googleapis.com/groups.discussion_forum", ""))
            .build());

        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("my policy")
            .build());

        var accessLevelIdForUserAccessBinding = new AccessLevel("accessLevelIdForUserAccessBinding", AccessLevelArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/accessLevels/chromeos_no_lock", name)))
            .title("chromeos_no_lock")
            .basic(AccessLevelBasicArgs.builder()
                .conditions(AccessLevelBasicConditionArgs.builder()
                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()
                        .requireScreenLock(true)
                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()
                            .osType("DESKTOP_CHROME_OS")
                            .build())
                        .build())
                    .regions("US")
                    .build())
                .build())
            .build());

        var gcpUserAccessBinding = new GcpUserAccessBinding("gcpUserAccessBinding", GcpUserAccessBindingArgs.builder()
            .organizationId("123456789")
            .groupKey(StdFunctions.trimprefix().applyValue(invoke -> invoke.result()))
            .accessLevels(accessLevelIdForUserAccessBinding.name())
            .build());

    }
}
```
```yaml
resources:
  group:
    type: gcp:cloudidentity:Group
    properties:
      displayName: my-identity-group
      parent: customers/A01b123xz
      groupKey:
        id: my-identity-group@example.com
      labels:
        cloudidentity.googleapis.com/groups.discussion_forum: ""
  accessLevelIdForUserAccessBinding:
    type: gcp:accesscontextmanager:AccessLevel
    name: access_level_id_for_user_access_binding
    properties:
      parent: accessPolicies/${["access-policy"].name}
      name: accessPolicies/${["access-policy"].name}/accessLevels/chromeos_no_lock
      title: chromeos_no_lock
      basic:
        conditions:
          - devicePolicy:
              requireScreenLock: true
              osConstraints:
                - osType: DESKTOP_CHROME_OS
            regions:
              - US
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: my policy
  gcpUserAccessBinding:
    type: gcp:accesscontextmanager:GcpUserAccessBinding
    name: gcp_user_access_binding
    properties:
      organizationId: '123456789'
      groupKey:
        fn::invoke:
          function: std:trimprefix
          arguments:
            input: ${group.id}
            prefix: groups/
          return: result
      accessLevels: ${accessLevelIdForUserAccessBinding.name}
```
<!--End PulumiCodeChooser -->

## Import

GcpUserAccessBinding can be imported using any of these accepted formats:

* `{{name}}`

When using the `pulumi import` command, GcpUserAccessBinding can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:accesscontextmanager/gcpUserAccessBinding:GcpUserAccessBinding default {{name}}
```

ø
accessLevels" ãRequired. Access level that a user must have to be granted access. Only one access level is supported, not multiple. This repeated field must have exactly one element. Example: "accessPolicies/9522/accessLevels/device_trusted"
é
groupKey" ØRequired. Immutable. Google Group id whose members are subject to this binding's restrictions. See "id" in the G Suite Directory API's Groups resource. If a group's email address/alias is changed, this resource will continue to point at the changed group. This field does not accept group email addresses or aliases. Example: "01d520gv4vjcrht"
G
organizationId" 1Required. ID of the parent organization.


- - -
"ø
accessLevels" ãRequired. Access level that a user must have to be granted access. Only one access level is supported, not multiple. This repeated field must have exactly one element. Example: "accessPolicies/9522/accessLevels/device_trusted"
"é
groupKey" ØRequired. Immutable. Google Group id whose members are subject to this binding's restrictions. See "id" in the G Suite Directory API's Groups resource. If a group's email address/alias is changed, this resource will continue to point at the changed group. This field does not accept group email addresses or aliases. Example: "01d520gv4vjcrht"
"­
name"  Immutable. Assigned by the server during creation. The last segment has an arbitrary length and has only URI unreserved characters (as defined by RFC 3986 Section 2.3). Should not be specified by the client during creation. Example: "organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N"
"G
organizationId" 1Required. ID of the parent organization.


- - -
*¯
[
accesscontextmanagerIngressPolicy4gcp:accesscontextmanager/ingressPolicy:IngressPolicyÿThis resource has been deprecated, please refer to ServicePerimeterIngressPolicy.


To get more information about IngressPolicy, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters#ingresspolicy)

## Import

IngressPolicy can be imported using any of these accepted formats:

* `{{ingress_policy_name}}/{{resource}}`

When using the `pulumi import` command, IngressPolicy can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:accesscontextmanager/ingressPolicy:IngressPolicy default {{ingress_policy_name}}/{{resource}}
```

\
ingressPolicyName" CThe name of the Service Perimeter to add this resource to.


- - -
H
resource" 8A GCP resource that is inside of the service perimeter.
"\
ingressPolicyName" CThe name of the Service Perimeter to add this resource to.


- - -
"H
resource" 8A GCP resource that is inside of the service perimeter.
*ùË
d
accesscontextmanagerServicePerimeter:gcp:accesscontextmanager/servicePerimeter:ServicePerimeterServicePerimeter describes a set of GCP resources which can freely import
and export data amongst themselves, but not export outside of the
ServicePerimeter. If a request with a source within this ServicePerimeter
has a target outside of the ServicePerimeter, the request will be blocked.
Otherwise the request is allowed. There are two types of Service Perimeter
- Regular and Bridge. Regular Service Perimeters cannot overlap, a single
GCP project can only belong to a single regular Service Perimeter. Service
Perimeter Bridges can contain only GCP projects as members, a single GCP
project may belong to multiple Service Perimeter Bridges.


To get more information about ServicePerimeter, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters)
* How-to Guides
    * [Guide to Ingress and Egress Rules](https://cloud.google.com/vpc-service-controls/docs/ingress-egress-rules)
    * [Service Perimeter Quickstart](https://cloud.google.com/vpc-service-controls/docs/quickstart)

> **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
you must specify a `billing_project` and set `user_project_override` to true
in the provider configuration. Otherwise the ACM API will return a 403 error.
Your account must have the `serviceusage.services.use` permission on the
`billing_project` you defined.

## Example Usage

### Access Context Manager Service Perimeter Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "my policy",
});
const service_perimeter = new gcp.accesscontextmanager.ServicePerimeter("service-perimeter", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    name: pulumi.interpolate`accessPolicies/${access_policy.name}/servicePerimeters/restrict_storage`,
    title: "restrict_storage",
    status: {
        restrictedServices: ["storage.googleapis.com"],
    },
});
const access_level = new gcp.accesscontextmanager.AccessLevel("access-level", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    name: pulumi.interpolate`accessPolicies/${access_policy.name}/accessLevels/chromeos_no_lock`,
    title: "chromeos_no_lock",
    basic: {
        conditions: [{
            devicePolicy: {
                requireScreenLock: false,
                osConstraints: [{
                    osType: "DESKTOP_CHROME_OS",
                }],
            },
            regions: [
                "CH",
                "IT",
                "US",
            ],
        }],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="my policy")
service_perimeter = gcp.accesscontextmanager.ServicePerimeter("service-perimeter",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/servicePerimeters/restrict_storage"),
    title="restrict_storage",
    status={
        "restricted_services": ["storage.googleapis.com"],
    })
access_level = gcp.accesscontextmanager.AccessLevel("access-level",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
    title="chromeos_no_lock",
    basic={
        "conditions": [{
            "device_policy": {
                "require_screen_lock": False,
                "os_constraints": [{
                    "os_type": "DESKTOP_CHROME_OS",
                }],
            },
            "regions": [
                "CH",
                "IT",
                "US",
            ],
        }],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "my policy",
    });

    var service_perimeter = new Gcp.AccessContextManager.ServicePerimeter("service-perimeter", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/servicePerimeters/restrict_storage"),
        Title = "restrict_storage",
        Status = new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusArgs
        {
            RestrictedServices = new[]
            {
                "storage.googleapis.com",
            },
        },
    });

    var access_level = new Gcp.AccessContextManager.AccessLevel("access-level", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
        Title = "chromeos_no_lock",
        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs
        {
            Conditions = new[]
            {
                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs
                {
                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs
                    {
                        RequireScreenLock = false,
                        OsConstraints = new[]
                        {
                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs
                            {
                                OsType = "DESKTOP_CHROME_OS",
                            },
                        },
                    },
                    Regions = new[]
                    {
                        "CH",
                        "IT",
                        "US",
                    },
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("my policy"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewServicePerimeter(ctx, "service-perimeter", &accesscontextmanager.ServicePerimeterArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			Name: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v/servicePerimeters/restrict_storage", name), nil
			}).(pulumi.StringOutput),
			Title: pulumi.String("restrict_storage"),
			Status: &accesscontextmanager.ServicePerimeterStatusArgs{
				RestrictedServices: pulumi.StringArray{
					pulumi.String("storage.googleapis.com"),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessLevel(ctx, "access-level", &accesscontextmanager.AccessLevelArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			Name: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v/accessLevels/chromeos_no_lock", name), nil
			}).(pulumi.StringOutput),
			Title: pulumi.String("chromeos_no_lock"),
			Basic: &accesscontextmanager.AccessLevelBasicArgs{
				Conditions: accesscontextmanager.AccessLevelBasicConditionArray{
					&accesscontextmanager.AccessLevelBasicConditionArgs{
						DevicePolicy: &accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{
							RequireScreenLock: pulumi.Bool(false),
							OsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{
								&accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{
									OsType: pulumi.String("DESKTOP_CHROME_OS"),
								},
							},
						},
						Regions: pulumi.StringArray{
							pulumi.String("CH"),
							pulumi.String("IT"),
							pulumi.String("US"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeter;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeterArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimeterStatusArgs;
import com.pulumi.gcp.accesscontextmanager.AccessLevel;
import com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("my policy")
            .build());

        var service_perimeter = new ServicePerimeter("service-perimeter", ServicePerimeterArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/servicePerimeters/restrict_storage", name)))
            .title("restrict_storage")
            .status(ServicePerimeterStatusArgs.builder()
                .restrictedServices("storage.googleapis.com")
                .build())
            .build());

        var access_level = new AccessLevel("access-level", AccessLevelArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/accessLevels/chromeos_no_lock", name)))
            .title("chromeos_no_lock")
            .basic(AccessLevelBasicArgs.builder()
                .conditions(AccessLevelBasicConditionArgs.builder()
                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()
                        .requireScreenLock(false)
                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()
                            .osType("DESKTOP_CHROME_OS")
                            .build())
                        .build())
                    .regions(                    
                        "CH",
                        "IT",
                        "US")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  service-perimeter:
    type: gcp:accesscontextmanager:ServicePerimeter
    properties:
      parent: accessPolicies/${["access-policy"].name}
      name: accessPolicies/${["access-policy"].name}/servicePerimeters/restrict_storage
      title: restrict_storage
      status:
        restrictedServices:
          - storage.googleapis.com
  access-level:
    type: gcp:accesscontextmanager:AccessLevel
    properties:
      parent: accessPolicies/${["access-policy"].name}
      name: accessPolicies/${["access-policy"].name}/accessLevels/chromeos_no_lock
      title: chromeos_no_lock
      basic:
        conditions:
          - devicePolicy:
              requireScreenLock: false
              osConstraints:
                - osType: DESKTOP_CHROME_OS
            regions:
              - CH
              - IT
              - US
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: my policy
```
<!--End PulumiCodeChooser -->
### Access Context Manager Service Perimeter Secure Data Exchange


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "my policy",
});
const secure_data_exchange = new gcp.accesscontextmanager.ServicePerimeters("secure-data-exchange", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    servicePerimeters: [
        {
            name: pulumi.interpolate`accessPolicies/${access_policy.name}/servicePerimeters/`,
            title: "",
            status: {
                restrictedServices: ["storage.googleapis.com"],
            },
        },
        {
            name: pulumi.interpolate`accessPolicies/${access_policy.name}/servicePerimeters/`,
            title: "",
            status: {
                restrictedServices: ["bigtable.googleapis.com"],
                vpcAccessibleServices: {
                    enableRestriction: true,
                    allowedServices: ["bigquery.googleapis.com"],
                },
            },
        },
    ],
});
const access_level = new gcp.accesscontextmanager.AccessLevel("access-level", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    name: pulumi.interpolate`accessPolicies/${access_policy.name}/accessLevels/secure_data_exchange`,
    title: "secure_data_exchange",
    basic: {
        conditions: [{
            devicePolicy: {
                requireScreenLock: false,
                osConstraints: [{
                    osType: "DESKTOP_CHROME_OS",
                }],
            },
            regions: [
                "CH",
                "IT",
                "US",
            ],
        }],
    },
});
const test_access = new gcp.accesscontextmanager.ServicePerimeter("test-access", {
    parent: `accessPolicies/${test_accessGoogleAccessContextManagerAccessPolicy.name}`,
    name: `accessPolicies/${test_accessGoogleAccessContextManagerAccessPolicy.name}/servicePerimeters/%s`,
    title: "%s",
    perimeterType: "PERIMETER_TYPE_REGULAR",
    status: {
        restrictedServices: [
            "bigquery.googleapis.com",
            "storage.googleapis.com",
        ],
        accessLevels: [access_level.name],
        vpcAccessibleServices: {
            enableRestriction: true,
            allowedServices: [
                "bigquery.googleapis.com",
                "storage.googleapis.com",
            ],
        },
        ingressPolicies: [{
            ingressFrom: {
                sources: [{
                    accessLevel: test_accessGoogleAccessContextManagerAccessLevel.name,
                }],
                identityType: "ANY_IDENTITY",
            },
            ingressTo: {
                resources: ["*"],
                operations: [
                    {
                        serviceName: "bigquery.googleapis.com",
                        methodSelectors: [
                            {
                                method: "BigQueryStorage.ReadRows",
                            },
                            {
                                method: "TableService.ListTables",
                            },
                            {
                                permission: "bigquery.jobs.get",
                            },
                        ],
                    },
                    {
                        serviceName: "storage.googleapis.com",
                        methodSelectors: [{
                            method: "google.storage.objects.create",
                        }],
                    },
                ],
            },
        }],
        egressPolicies: [{
            egressFrom: {
                identityType: "ANY_USER_ACCOUNT",
            },
        }],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="my policy")
secure_data_exchange = gcp.accesscontextmanager.ServicePerimeters("secure-data-exchange",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    service_perimeters=[
        {
            "name": access_policy.name.apply(lambda name: f"accessPolicies/{name}/servicePerimeters/"),
            "title": "",
            "status": {
                "restricted_services": ["storage.googleapis.com"],
            },
        },
        {
            "name": access_policy.name.apply(lambda name: f"accessPolicies/{name}/servicePerimeters/"),
            "title": "",
            "status": {
                "restricted_services": ["bigtable.googleapis.com"],
                "vpc_accessible_services": {
                    "enable_restriction": True,
                    "allowed_services": ["bigquery.googleapis.com"],
                },
            },
        },
    ])
access_level = gcp.accesscontextmanager.AccessLevel("access-level",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/accessLevels/secure_data_exchange"),
    title="secure_data_exchange",
    basic={
        "conditions": [{
            "device_policy": {
                "require_screen_lock": False,
                "os_constraints": [{
                    "os_type": "DESKTOP_CHROME_OS",
                }],
            },
            "regions": [
                "CH",
                "IT",
                "US",
            ],
        }],
    })
test_access = gcp.accesscontextmanager.ServicePerimeter("test-access",
    parent=f"accessPolicies/{test_access_google_access_context_manager_access_policy['name']}",
    name=f"accessPolicies/{test_access_google_access_context_manager_access_policy['name']}/servicePerimeters/%s",
    title="%s",
    perimeter_type="PERIMETER_TYPE_REGULAR",
    status={
        "restricted_services": [
            "bigquery.googleapis.com",
            "storage.googleapis.com",
        ],
        "access_levels": [access_level.name],
        "vpc_accessible_services": {
            "enable_restriction": True,
            "allowed_services": [
                "bigquery.googleapis.com",
                "storage.googleapis.com",
            ],
        },
        "ingress_policies": [{
            "ingress_from": {
                "sources": [{
                    "access_level": test_access_google_access_context_manager_access_level["name"],
                }],
                "identity_type": "ANY_IDENTITY",
            },
            "ingress_to": {
                "resources": ["*"],
                "operations": [
                    {
                        "service_name": "bigquery.googleapis.com",
                        "method_selectors": [
                            {
                                "method": "BigQueryStorage.ReadRows",
                            },
                            {
                                "method": "TableService.ListTables",
                            },
                            {
                                "permission": "bigquery.jobs.get",
                            },
                        ],
                    },
                    {
                        "service_name": "storage.googleapis.com",
                        "method_selectors": [{
                            "method": "google.storage.objects.create",
                        }],
                    },
                ],
            },
        }],
        "egress_policies": [{
            "egress_from": {
                "identity_type": "ANY_USER_ACCOUNT",
            },
        }],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "my policy",
    });

    var secure_data_exchange = new Gcp.AccessContextManager.ServicePerimeters("secure-data-exchange", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        ServicePerimeterDetails = new[]
        {
            new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterArgs
            {
                Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/servicePerimeters/"),
                Title = "",
                Status = new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterStatusArgs
                {
                    RestrictedServices = new[]
                    {
                        "storage.googleapis.com",
                    },
                },
            },
            new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterArgs
            {
                Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/servicePerimeters/"),
                Title = "",
                Status = new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterStatusArgs
                {
                    RestrictedServices = new[]
                    {
                        "bigtable.googleapis.com",
                    },
                    VpcAccessibleServices = new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterStatusVpcAccessibleServicesArgs
                    {
                        EnableRestriction = true,
                        AllowedServices = new[]
                        {
                            "bigquery.googleapis.com",
                        },
                    },
                },
            },
        },
    });

    var access_level = new Gcp.AccessContextManager.AccessLevel("access-level", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/accessLevels/secure_data_exchange"),
        Title = "secure_data_exchange",
        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs
        {
            Conditions = new[]
            {
                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs
                {
                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs
                    {
                        RequireScreenLock = false,
                        OsConstraints = new[]
                        {
                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs
                            {
                                OsType = "DESKTOP_CHROME_OS",
                            },
                        },
                    },
                    Regions = new[]
                    {
                        "CH",
                        "IT",
                        "US",
                    },
                },
            },
        },
    });

    var test_access = new Gcp.AccessContextManager.ServicePerimeter("test-access", new()
    {
        Parent = $"accessPolicies/{test_accessGoogleAccessContextManagerAccessPolicy.Name}",
        Name = $"accessPolicies/{test_accessGoogleAccessContextManagerAccessPolicy.Name}/servicePerimeters/%s",
        Title = "%s",
        PerimeterType = "PERIMETER_TYPE_REGULAR",
        Status = new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusArgs
        {
            RestrictedServices = new[]
            {
                "bigquery.googleapis.com",
                "storage.googleapis.com",
            },
            AccessLevels = new[]
            {
                access_level.Name,
            },
            VpcAccessibleServices = new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusVpcAccessibleServicesArgs
            {
                EnableRestriction = true,
                AllowedServices = new[]
                {
                    "bigquery.googleapis.com",
                    "storage.googleapis.com",
                },
            },
            IngressPolicies = new[]
            {
                new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusIngressPolicyArgs
                {
                    IngressFrom = new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusIngressPolicyIngressFromArgs
                    {
                        Sources = new[]
                        {
                            new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusIngressPolicyIngressFromSourceArgs
                            {
                                AccessLevel = test_accessGoogleAccessContextManagerAccessLevel.Name,
                            },
                        },
                        IdentityType = "ANY_IDENTITY",
                    },
                    IngressTo = new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusIngressPolicyIngressToArgs
                    {
                        Resources = new[]
                        {
                            "*",
                        },
                        Operations = new[]
                        {
                            new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusIngressPolicyIngressToOperationArgs
                            {
                                ServiceName = "bigquery.googleapis.com",
                                MethodSelectors = new[]
                                {
                                    new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs
                                    {
                                        Method = "BigQueryStorage.ReadRows",
                                    },
                                    new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs
                                    {
                                        Method = "TableService.ListTables",
                                    },
                                    new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs
                                    {
                                        Permission = "bigquery.jobs.get",
                                    },
                                },
                            },
                            new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusIngressPolicyIngressToOperationArgs
                            {
                                ServiceName = "storage.googleapis.com",
                                MethodSelectors = new[]
                                {
                                    new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs
                                    {
                                        Method = "google.storage.objects.create",
                                    },
                                },
                            },
                        },
                    },
                },
            },
            EgressPolicies = new[]
            {
                new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusEgressPolicyArgs
                {
                    EgressFrom = new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusEgressPolicyEgressFromArgs
                    {
                        IdentityType = "ANY_USER_ACCOUNT",
                    },
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("my policy"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewServicePerimeters(ctx, "secure-data-exchange", &accesscontextmanager.ServicePerimetersArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			ServicePerimeters: accesscontextmanager.ServicePerimetersServicePerimeterArray{
				&accesscontextmanager.ServicePerimetersServicePerimeterArgs{
					Name: access_policy.Name.ApplyT(func(name string) (string, error) {
						return fmt.Sprintf("accessPolicies/%v/servicePerimeters/", name), nil
					}).(pulumi.StringOutput),
					Title: pulumi.String(""),
					Status: &accesscontextmanager.ServicePerimetersServicePerimeterStatusArgs{
						RestrictedServices: pulumi.StringArray{
							pulumi.String("storage.googleapis.com"),
						},
					},
				},
				&accesscontextmanager.ServicePerimetersServicePerimeterArgs{
					Name: access_policy.Name.ApplyT(func(name string) (string, error) {
						return fmt.Sprintf("accessPolicies/%v/servicePerimeters/", name), nil
					}).(pulumi.StringOutput),
					Title: pulumi.String(""),
					Status: &accesscontextmanager.ServicePerimetersServicePerimeterStatusArgs{
						RestrictedServices: pulumi.StringArray{
							pulumi.String("bigtable.googleapis.com"),
						},
						VpcAccessibleServices: &accesscontextmanager.ServicePerimetersServicePerimeterStatusVpcAccessibleServicesArgs{
							EnableRestriction: pulumi.Bool(true),
							AllowedServices: pulumi.StringArray{
								pulumi.String("bigquery.googleapis.com"),
							},
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessLevel(ctx, "access-level", &accesscontextmanager.AccessLevelArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			Name: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v/accessLevels/secure_data_exchange", name), nil
			}).(pulumi.StringOutput),
			Title: pulumi.String("secure_data_exchange"),
			Basic: &accesscontextmanager.AccessLevelBasicArgs{
				Conditions: accesscontextmanager.AccessLevelBasicConditionArray{
					&accesscontextmanager.AccessLevelBasicConditionArgs{
						DevicePolicy: &accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{
							RequireScreenLock: pulumi.Bool(false),
							OsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{
								&accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{
									OsType: pulumi.String("DESKTOP_CHROME_OS"),
								},
							},
						},
						Regions: pulumi.StringArray{
							pulumi.String("CH"),
							pulumi.String("IT"),
							pulumi.String("US"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewServicePerimeter(ctx, "test-access", &accesscontextmanager.ServicePerimeterArgs{
			Parent:        pulumi.Sprintf("accessPolicies/%v", test_accessGoogleAccessContextManagerAccessPolicy.Name),
			Name:          pulumi.Sprintf("accessPolicies/%v%v", test_accessGoogleAccessContextManagerAccessPolicy.Name, "/servicePerimeters/%s"),
			Title:         pulumi.String("%s"),
			PerimeterType: pulumi.String("PERIMETER_TYPE_REGULAR"),
			Status: &accesscontextmanager.ServicePerimeterStatusArgs{
				RestrictedServices: pulumi.StringArray{
					pulumi.String("bigquery.googleapis.com"),
					pulumi.String("storage.googleapis.com"),
				},
				AccessLevels: pulumi.StringArray{
					access_level.Name,
				},
				VpcAccessibleServices: &accesscontextmanager.ServicePerimeterStatusVpcAccessibleServicesArgs{
					EnableRestriction: pulumi.Bool(true),
					AllowedServices: pulumi.StringArray{
						pulumi.String("bigquery.googleapis.com"),
						pulumi.String("storage.googleapis.com"),
					},
				},
				IngressPolicies: accesscontextmanager.ServicePerimeterStatusIngressPolicyArray{
					&accesscontextmanager.ServicePerimeterStatusIngressPolicyArgs{
						IngressFrom: &accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressFromArgs{
							Sources: accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressFromSourceArray{
								&accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressFromSourceArgs{
									AccessLevel: pulumi.Any(test_accessGoogleAccessContextManagerAccessLevel.Name),
								},
							},
							IdentityType: pulumi.String("ANY_IDENTITY"),
						},
						IngressTo: &accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressToArgs{
							Resources: pulumi.StringArray{
								pulumi.String("*"),
							},
							Operations: accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressToOperationArray{
								&accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressToOperationArgs{
									ServiceName: pulumi.String("bigquery.googleapis.com"),
									MethodSelectors: accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArray{
										&accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs{
											Method: pulumi.String("BigQueryStorage.ReadRows"),
										},
										&accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs{
											Method: pulumi.String("TableService.ListTables"),
										},
										&accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs{
											Permission: pulumi.String("bigquery.jobs.get"),
										},
									},
								},
								&accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressToOperationArgs{
									ServiceName: pulumi.String("storage.googleapis.com"),
									MethodSelectors: accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArray{
										&accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs{
											Method: pulumi.String("google.storage.objects.create"),
										},
									},
								},
							},
						},
					},
				},
				EgressPolicies: accesscontextmanager.ServicePerimeterStatusEgressPolicyArray{
					&accesscontextmanager.ServicePerimeterStatusEgressPolicyArgs{
						EgressFrom: &accesscontextmanager.ServicePerimeterStatusEgressPolicyEgressFromArgs{
							IdentityType: pulumi.String("ANY_USER_ACCOUNT"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeters;
import com.pulumi.gcp.accesscontextmanager.ServicePerimetersArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimetersServicePerimeterArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimetersServicePerimeterStatusArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimetersServicePerimeterStatusVpcAccessibleServicesArgs;
import com.pulumi.gcp.accesscontextmanager.AccessLevel;
import com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeter;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeterArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimeterStatusArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimeterStatusVpcAccessibleServicesArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("my policy")
            .build());

        var secure_data_exchange = new ServicePerimeters("secure-data-exchange", ServicePerimetersArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .servicePerimeters(            
                ServicePerimetersServicePerimeterArgs.builder()
                    .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/servicePerimeters/", name)))
                    .title("")
                    .status(ServicePerimetersServicePerimeterStatusArgs.builder()
                        .restrictedServices("storage.googleapis.com")
                        .build())
                    .build(),
                ServicePerimetersServicePerimeterArgs.builder()
                    .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/servicePerimeters/", name)))
                    .title("")
                    .status(ServicePerimetersServicePerimeterStatusArgs.builder()
                        .restrictedServices("bigtable.googleapis.com")
                        .vpcAccessibleServices(ServicePerimetersServicePerimeterStatusVpcAccessibleServicesArgs.builder()
                            .enableRestriction(true)
                            .allowedServices("bigquery.googleapis.com")
                            .build())
                        .build())
                    .build())
            .build());

        var access_level = new AccessLevel("access-level", AccessLevelArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/accessLevels/secure_data_exchange", name)))
            .title("secure_data_exchange")
            .basic(AccessLevelBasicArgs.builder()
                .conditions(AccessLevelBasicConditionArgs.builder()
                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()
                        .requireScreenLock(false)
                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()
                            .osType("DESKTOP_CHROME_OS")
                            .build())
                        .build())
                    .regions(                    
                        "CH",
                        "IT",
                        "US")
                    .build())
                .build())
            .build());

        var test_access = new ServicePerimeter("test-access", ServicePerimeterArgs.builder()
            .parent(String.format("accessPolicies/%s", test_accessGoogleAccessContextManagerAccessPolicy.name()))
            .name(String.format("accessPolicies/%s/servicePerimeters/%s", test_accessGoogleAccessContextManagerAccessPolicy.name()))
            .title("%s")
            .perimeterType("PERIMETER_TYPE_REGULAR")
            .status(ServicePerimeterStatusArgs.builder()
                .restrictedServices(                
                    "bigquery.googleapis.com",
                    "storage.googleapis.com")
                .accessLevels(access_level.name())
                .vpcAccessibleServices(ServicePerimeterStatusVpcAccessibleServicesArgs.builder()
                    .enableRestriction(true)
                    .allowedServices(                    
                        "bigquery.googleapis.com",
                        "storage.googleapis.com")
                    .build())
                .ingressPolicies(ServicePerimeterStatusIngressPolicyArgs.builder()
                    .ingressFrom(ServicePerimeterStatusIngressPolicyIngressFromArgs.builder()
                        .sources(ServicePerimeterStatusIngressPolicyIngressFromSourceArgs.builder()
                            .accessLevel(test_accessGoogleAccessContextManagerAccessLevel.name())
                            .build())
                        .identityType("ANY_IDENTITY")
                        .build())
                    .ingressTo(ServicePerimeterStatusIngressPolicyIngressToArgs.builder()
                        .resources("*")
                        .operations(                        
                            ServicePerimeterStatusIngressPolicyIngressToOperationArgs.builder()
                                .serviceName("bigquery.googleapis.com")
                                .methodSelectors(                                
                                    ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs.builder()
                                        .method("BigQueryStorage.ReadRows")
                                        .build(),
                                    ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs.builder()
                                        .method("TableService.ListTables")
                                        .build(),
                                    ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs.builder()
                                        .permission("bigquery.jobs.get")
                                        .build())
                                .build(),
                            ServicePerimeterStatusIngressPolicyIngressToOperationArgs.builder()
                                .serviceName("storage.googleapis.com")
                                .methodSelectors(ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorArgs.builder()
                                    .method("google.storage.objects.create")
                                    .build())
                                .build())
                        .build())
                    .build())
                .egressPolicies(ServicePerimeterStatusEgressPolicyArgs.builder()
                    .egressFrom(ServicePerimeterStatusEgressPolicyEgressFromArgs.builder()
                        .identityType("ANY_USER_ACCOUNT")
                        .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  secure-data-exchange:
    type: gcp:accesscontextmanager:ServicePerimeters
    properties:
      parent: accessPolicies/${["access-policy"].name}
      servicePerimeters:
        - name: accessPolicies/${["access-policy"].name}/servicePerimeters/
          title: ""
          status:
            restrictedServices:
              - storage.googleapis.com
        - name: accessPolicies/${["access-policy"].name}/servicePerimeters/
          title: ""
          status:
            restrictedServices:
              - bigtable.googleapis.com
            vpcAccessibleServices:
              enableRestriction: true
              allowedServices:
                - bigquery.googleapis.com
  access-level:
    type: gcp:accesscontextmanager:AccessLevel
    properties:
      parent: accessPolicies/${["access-policy"].name}
      name: accessPolicies/${["access-policy"].name}/accessLevels/secure_data_exchange
      title: secure_data_exchange
      basic:
        conditions:
          - devicePolicy:
              requireScreenLock: false
              osConstraints:
                - osType: DESKTOP_CHROME_OS
            regions:
              - CH
              - IT
              - US
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: my policy
  test-access:
    type: gcp:accesscontextmanager:ServicePerimeter
    properties:
      parent: accessPolicies/${["test-accessGoogleAccessContextManagerAccessPolicy"].name}
      name: accessPolicies/${["test-accessGoogleAccessContextManagerAccessPolicy"].name}/servicePerimeters/%s
      title: '%s'
      perimeterType: PERIMETER_TYPE_REGULAR
      status:
        restrictedServices:
          - bigquery.googleapis.com
          - storage.googleapis.com
        accessLevels:
          - ${["access-level"].name}
        vpcAccessibleServices:
          enableRestriction: true
          allowedServices:
            - bigquery.googleapis.com
            - storage.googleapis.com
        ingressPolicies:
          - ingressFrom:
              sources:
                - accessLevel: ${["test-accessGoogleAccessContextManagerAccessLevel"].name}
              identityType: ANY_IDENTITY
            ingressTo:
              resources:
                - '*'
              operations:
                - serviceName: bigquery.googleapis.com
                  methodSelectors:
                    - method: BigQueryStorage.ReadRows
                    - method: TableService.ListTables
                    - permission: bigquery.jobs.get
                - serviceName: storage.googleapis.com
                  methodSelectors:
                    - method: google.storage.objects.create
        egressPolicies:
          - egressFrom:
              identityType: ANY_USER_ACCOUNT
```
<!--End PulumiCodeChooser -->
### Access Context Manager Service Perimeter Dry-Run


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "my policy",
});
const service_perimeter = new gcp.accesscontextmanager.ServicePerimeter("service-perimeter", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    name: pulumi.interpolate`accessPolicies/${access_policy.name}/servicePerimeters/restrict_bigquery_dryrun_storage`,
    title: "restrict_bigquery_dryrun_storage",
    status: {
        restrictedServices: ["bigquery.googleapis.com"],
    },
    spec: {
        restrictedServices: ["storage.googleapis.com"],
    },
    useExplicitDryRunSpec: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="my policy")
service_perimeter = gcp.accesscontextmanager.ServicePerimeter("service-perimeter",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/servicePerimeters/restrict_bigquery_dryrun_storage"),
    title="restrict_bigquery_dryrun_storage",
    status={
        "restricted_services": ["bigquery.googleapis.com"],
    },
    spec={
        "restricted_services": ["storage.googleapis.com"],
    },
    use_explicit_dry_run_spec=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "my policy",
    });

    var service_perimeter = new Gcp.AccessContextManager.ServicePerimeter("service-perimeter", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/servicePerimeters/restrict_bigquery_dryrun_storage"),
        Title = "restrict_bigquery_dryrun_storage",
        Status = new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusArgs
        {
            RestrictedServices = new[]
            {
                "bigquery.googleapis.com",
            },
        },
        Spec = new Gcp.AccessContextManager.Inputs.ServicePerimeterSpecArgs
        {
            RestrictedServices = new[]
            {
                "storage.googleapis.com",
            },
        },
        UseExplicitDryRunSpec = true,
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("my policy"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewServicePerimeter(ctx, "service-perimeter", &accesscontextmanager.ServicePerimeterArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			Name: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v/servicePerimeters/restrict_bigquery_dryrun_storage", name), nil
			}).(pulumi.StringOutput),
			Title: pulumi.String("restrict_bigquery_dryrun_storage"),
			Status: &accesscontextmanager.ServicePerimeterStatusArgs{
				RestrictedServices: pulumi.StringArray{
					pulumi.String("bigquery.googleapis.com"),
				},
			},
			Spec: &accesscontextmanager.ServicePerimeterSpecArgs{
				RestrictedServices: pulumi.StringArray{
					pulumi.String("storage.googleapis.com"),
				},
			},
			UseExplicitDryRunSpec: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeter;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeterArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimeterStatusArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimeterSpecArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("my policy")
            .build());

        var service_perimeter = new ServicePerimeter("service-perimeter", ServicePerimeterArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/servicePerimeters/restrict_bigquery_dryrun_storage", name)))
            .title("restrict_bigquery_dryrun_storage")
            .status(ServicePerimeterStatusArgs.builder()
                .restrictedServices("bigquery.googleapis.com")
                .build())
            .spec(ServicePerimeterSpecArgs.builder()
                .restrictedServices("storage.googleapis.com")
                .build())
            .useExplicitDryRunSpec(true)
            .build());

    }
}
```
```yaml
resources:
  service-perimeter:
    type: gcp:accesscontextmanager:ServicePerimeter
    properties:
      parent: accessPolicies/${["access-policy"].name}
      name: accessPolicies/${["access-policy"].name}/servicePerimeters/restrict_bigquery_dryrun_storage
      title: restrict_bigquery_dryrun_storage
      status:
        restrictedServices:
          - bigquery.googleapis.com
      spec:
        restrictedServices:
          - storage.googleapis.com
      useExplicitDryRunSpec: true
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: my policy
```
<!--End PulumiCodeChooser -->

## Import

ServicePerimeter can be imported using any of these accepted formats:

* `{{name}}`

When using the `pulumi import` command, ServicePerimeter can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:accesscontextmanager/servicePerimeter:ServicePerimeter default {{name}}
```

`
descriptionB" KDescription of the ServicePerimeter and its use. Does not affect
behavior.
Ú
nameB" ËResource name for the ServicePerimeter. The short_name component must
begin with a letter and only include alphanumeric and '_'.
Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}


- - -
b
parent" TThe AccessPolicy this ServicePerimeter lives in.
Format: accessPolicies/{policy_id}
ß
perimeterTypeB" ÇSpecifies the type of the Perimeter. There are two types: regular and
bridge. Regular Service Perimeter contains resources, access levels,
and restricted services. Every resource can be in at most
ONE regular Service Perimeter.
In addition to being in a regular service perimeter, a resource can also
be in zero or more perimeter bridges. A perimeter bridge only contains
resources. Cross project operations are permitted if all effected
resources share some perimeter (whether bridge or regular). Perimeter
Bridge does not contain access levels or services: those are governed
entirely by the regular perimeter that resource is in.
Perimeter Bridges are typically useful when building more complex
topologies with many independent perimeters that need to share some data
with a common perimeter, but should not be able to share data among
themselves.
Default value is `PERIMETER_TYPE_REGULAR`.
Possible values are: `PERIMETER_TYPE_REGULAR`, `PERIMETER_TYPE_BRIDGE`.

specvBt:r
p
accesscontextmanagerServicePerimeterSpecBgcp:accesscontextmanager/ServicePerimeterSpec:ServicePerimeterSpecProposed (or dry run) ServicePerimeter configuration.
This configuration allows to specify and test ServicePerimeter configuration
without enforcing actual access restrictions. Only allowed to be set when
the `useExplicitDryRunSpec` flag is set.
Structure is documented below.
¼
status|Bz:x
v
accesscontextmanagerServicePerimeterStatusFgcp:accesscontextmanager/ServicePerimeterStatus:ServicePerimeterStatus³ServicePerimeter configuration. Specifies sets of resources,
restricted services and access levels that determine
perimeter content and boundaries.
Structure is documented below.
E
title" 8Human readable title. Must be unique within the Policy.
Ø
useExplicitDryRunSpecB
 ¸Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
for all Service Perimeters, and that spec is identical to the status for those
Service Perimeters. When this flag is set, it inhibits the generation of the
implicit spec, thereby allowing the user to explicitly provide a
configuration ("spec") to use in a dry-run version of the Service Perimeter.
This allows the user to test changes to the enforced config ("status") without
actually enforcing them. This testing is done through analyzing the differences
between currently enforced and suggested restrictions. useExplicitDryRunSpec must
bet set to True if any of the fields in the spec are set to non-default values.
"<

createTime" *Time the AccessPolicy was created in UTC.
"`
descriptionB" KDescription of the ServicePerimeter and its use. Does not affect
behavior.
"Ø
name" ËResource name for the ServicePerimeter. The short_name component must
begin with a letter and only include alphanumeric and '_'.
Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}


- - -
"b
parent" TThe AccessPolicy this ServicePerimeter lives in.
Format: accessPolicies/{policy_id}
"ß
perimeterTypeB" ÇSpecifies the type of the Perimeter. There are two types: regular and
bridge. Regular Service Perimeter contains resources, access levels,
and restricted services. Every resource can be in at most
ONE regular Service Perimeter.
In addition to being in a regular service perimeter, a resource can also
be in zero or more perimeter bridges. A perimeter bridge only contains
resources. Cross project operations are permitted if all effected
resources share some perimeter (whether bridge or regular). Perimeter
Bridge does not contain access levels or services: those are governed
entirely by the regular perimeter that resource is in.
Perimeter Bridges are typically useful when building more complex
topologies with many independent perimeters that need to share some data
with a common perimeter, but should not be able to share data among
themselves.
Default value is `PERIMETER_TYPE_REGULAR`.
Possible values are: `PERIMETER_TYPE_REGULAR`, `PERIMETER_TYPE_BRIDGE`.
"
specvBt:r
p
accesscontextmanagerServicePerimeterSpecBgcp:accesscontextmanager/ServicePerimeterSpec:ServicePerimeterSpecProposed (or dry run) ServicePerimeter configuration.
This configuration allows to specify and test ServicePerimeter configuration
without enforcing actual access restrictions. Only allowed to be set when
the `useExplicitDryRunSpec` flag is set.
Structure is documented below.
"¼
status|Bz:x
v
accesscontextmanagerServicePerimeterStatusFgcp:accesscontextmanager/ServicePerimeterStatus:ServicePerimeterStatus³ServicePerimeter configuration. Specifies sets of resources,
restricted services and access levels that determine
perimeter content and boundaries.
Structure is documented below.
"E
title" 8Human readable title. Must be unique within the Policy.
"<

updateTime" *Time the AccessPolicy was updated in UTC.
"Ø
useExplicitDryRunSpecB
 ¸Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
for all Service Perimeters, and that spec is identical to the status for those
Service Perimeters. When this flag is set, it inhibits the generation of the
implicit spec, thereby allowing the user to explicitly provide a
configuration ("spec") to use in a dry-run version of the Service Perimeter.
This allows the user to test changes to the enforced config ("status") without
actually enforcing them. This testing is done through analyzing the differences
between currently enforced and suggested restrictions. useExplicitDryRunSpec must
bet set to True if any of the fields in the spec are set to non-default values.
*¥

accesscontextmanager"ServicePerimeterDryRunEgressPolicy^gcp:accesscontextmanager/servicePerimeterDryRunEgressPolicy:ServicePerimeterDryRunEgressPolicyManage a single EgressPolicy in the spec (dry-run) configuration for a service perimeter.
EgressPolicies match requests based on egressFrom and egressTo stanzas.
For an EgressPolicy to match, both egressFrom and egressTo stanzas must be matched.
If an EgressPolicy matches a request, the request is allowed to span the ServicePerimeter
boundary. For example, an EgressPolicy can be used to allow VMs on networks
within the ServicePerimeter to access a defined set of projects outside the
perimeter in certain contexts (e.g. to read data from a Cloud Storage bucket
or query against a BigQuery dataset).

> **Note:** By default, updates to this resource will remove the EgressPolicy from the
from the perimeter and add it back in a non-atomic manner. To ensure that the new EgressPolicy
is added before the old one is removed, add a `lifecycle` block with `create_before_destroy = true` to this resource.
> **Note:** If this resource is used alongside a `gcp.accesscontextmanager.ServicePerimeter` resource,
the service perimeter resource must have a `lifecycle` block with `ignore_changes = [spec[0].egress_policies]` so
they don't fight over which egress rules should be in the policy.


To get more information about ServicePerimeterDryRunEgressPolicy, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters#egresspolicy)
* How-to Guides
    * [Guide to Ingress and Egress Rules](https://cloud.google.com/vpc-service-controls/docs/ingress-egress-rules)

## Example Usage

Å

egressFromÁB¾:»
¸
accesscontextmanager,ServicePerimeterDryRunEgressPolicyEgressFromrgcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressFrom:ServicePerimeterDryRunEgressPolicyEgressFromsDefines conditions on the source of a request causing this `EgressPolicy` to apply.
Structure is documented below.
Ú
egressTo»B¸:µ
²
accesscontextmanager*ServicePerimeterDryRunEgressPolicyEgressTongcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressTo:ServicePerimeterDryRunEgressPolicyEgressToDefines the conditions on the `ApiOperation` and destination resources that
cause this `EgressPolicy` to apply.
Structure is documented below.
T
	perimeter" CThe name of the Service Perimeter to add this resource to.


- - -
"Å

egressFromÁB¾:»
¸
accesscontextmanager,ServicePerimeterDryRunEgressPolicyEgressFromrgcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressFrom:ServicePerimeterDryRunEgressPolicyEgressFromsDefines conditions on the source of a request causing this `EgressPolicy` to apply.
Structure is documented below.
"Ú
egressTo»B¸:µ
²
accesscontextmanager*ServicePerimeterDryRunEgressPolicyEgressTongcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressTo:ServicePerimeterDryRunEgressPolicyEgressToDefines the conditions on the `ApiOperation` and destination resources that
cause this `EgressPolicy` to apply.
Structure is documented below.
"T
	perimeter" CThe name of the Service Perimeter to add this resource to.


- - -
*è

accesscontextmanager#ServicePerimeterDryRunIngressPolicy`gcp:accesscontextmanager/servicePerimeterDryRunIngressPolicy:ServicePerimeterDryRunIngressPolicy«Manage a single IngressPolicy in the spec (dry-run) configuration for a service perimeter.
IngressPolicies match requests based on ingressFrom and ingressTo stanzas. For an ingress policy to match,
both the ingressFrom and ingressTo stanzas must be matched. If an IngressPolicy matches a request,
the request is allowed through the perimeter boundary from outside the perimeter.
For example, access from the internet can be allowed either based on an AccessLevel or,
for traffic hosted on Google Cloud, the project of the source network.
For access from private networks, using the project of the hosting network is required.
Individual ingress policies can be limited by restricting which services and/
or actions they match using the ingressTo field.

> **Note:** By default, updates to this resource will remove the IngressPolicy from the
from the perimeter and add it back in a non-atomic manner. To ensure that the new IngressPolicy
is added before the old one is removed, add a `lifecycle` block with `create_before_destroy = true` to this resource.
> **Note:** If this resource is used alongside a `gcp.accesscontextmanager.ServicePerimeter` resource,
the service perimeter resource must have a `lifecycle` block with `ignore_changes = [spec[0].ingress_policies]` so
they don't fight over which ingress rules should be in the policy.


To get more information about ServicePerimeterDryRunIngressPolicy, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters#ingresspolicy)
* How-to Guides
    * [Guide to Ingress and Egress Rules](https://cloud.google.com/vpc-service-controls/docs/ingress-egress-rules)

## Example Usage

Ñ
ingressFromÇBÄ:Á
¾
accesscontextmanager.ServicePerimeterDryRunIngressPolicyIngressFromvgcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressFrom:ServicePerimeterDryRunIngressPolicyIngressFromxDefines the conditions on the source of a request causing this `IngressPolicy`
to apply.
Structure is documented below.
à
	ingressToÁB¾:»
¸
accesscontextmanager,ServicePerimeterDryRunIngressPolicyIngressTorgcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressTo:ServicePerimeterDryRunIngressPolicyIngressToDefines the conditions on the `ApiOperation` and request destination that cause
this `IngressPolicy` to apply.
Structure is documented below.
T
	perimeter" CThe name of the Service Perimeter to add this resource to.


- - -
"Ñ
ingressFromÇBÄ:Á
¾
accesscontextmanager.ServicePerimeterDryRunIngressPolicyIngressFromvgcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressFrom:ServicePerimeterDryRunIngressPolicyIngressFromxDefines the conditions on the source of a request causing this `IngressPolicy`
to apply.
Structure is documented below.
"à
	ingressToÁB¾:»
¸
accesscontextmanager,ServicePerimeterDryRunIngressPolicyIngressTorgcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressTo:ServicePerimeterDryRunIngressPolicyIngressToDefines the conditions on the `ApiOperation` and request destination that cause
this `IngressPolicy` to apply.
Structure is documented below.
"T
	perimeter" CThe name of the Service Perimeter to add this resource to.


- - -
*¨O

accesscontextmanagerServicePerimeterDryRunResourceVgcp:accesscontextmanager/servicePerimeterDryRunResource:ServicePerimeterDryRunResource¼JAllows configuring a single GCP resource that should be inside of the `spec` block of a dry run service perimeter.
This resource is intended to be used in cases where it is not possible to compile a full list
of projects to include in a `gcp.accesscontextmanager.ServicePerimeter` resource,
to enable them to be added separately.
If your perimeter is NOT in dry-run mode use `gcp.accesscontextmanager.ServicePerimeterResource` instead.

> **Note:** If this resource is used alongside a `gcp.accesscontextmanager.ServicePerimeter` resource,
the service perimeter resource must have a `lifecycle` block with `ignore_changes = [spec[0].resources]` so
they don't fight over which resources should be in the policy.


To get more information about ServicePerimeterDryRunResource, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters)
* How-to Guides
    * [Service Perimeter Quickstart](https://cloud.google.com/vpc-service-controls/docs/quickstart)

> **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
you must specify a `billing_project` and set `user_project_override` to true
in the provider configuration. Otherwise the ACM API will return a 403 error.
Your account must have the `serviceusage.services.use` permission on the
`billing_project` you defined.

## Example Usage

### Access Context Manager Service Perimeter Dry Run Resource Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "my policy",
});
const service_perimeter_dry_run_resourceServicePerimeter = new gcp.accesscontextmanager.ServicePerimeter("service-perimeter-dry-run-resource", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    name: pulumi.interpolate`accessPolicies/${access_policy.name}/servicePerimeters/restrict_all`,
    title: "restrict_all",
    spec: {
        restrictedServices: ["storage.googleapis.com"],
    },
    useExplicitDryRunSpec: true,
});
const service_perimeter_dry_run_resource = new gcp.accesscontextmanager.ServicePerimeterDryRunResource("service-perimeter-dry-run-resource", {
    perimeterName: service_perimeter_dry_run_resourceServicePerimeter.name,
    resource: "projects/987654321",
});
```
```python
import pulumi
import pulumi_gcp as gcp

access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="my policy")
service_perimeter_dry_run_resource_service_perimeter = gcp.accesscontextmanager.ServicePerimeter("service-perimeter-dry-run-resource",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/servicePerimeters/restrict_all"),
    title="restrict_all",
    spec={
        "restricted_services": ["storage.googleapis.com"],
    },
    use_explicit_dry_run_spec=True)
service_perimeter_dry_run_resource = gcp.accesscontextmanager.ServicePerimeterDryRunResource("service-perimeter-dry-run-resource",
    perimeter_name=service_perimeter_dry_run_resource_service_perimeter.name,
    resource="projects/987654321")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "my policy",
    });

    var service_perimeter_dry_run_resourceServicePerimeter = new Gcp.AccessContextManager.ServicePerimeter("service-perimeter-dry-run-resource", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/servicePerimeters/restrict_all"),
        Title = "restrict_all",
        Spec = new Gcp.AccessContextManager.Inputs.ServicePerimeterSpecArgs
        {
            RestrictedServices = new[]
            {
                "storage.googleapis.com",
            },
        },
        UseExplicitDryRunSpec = true,
    });

    var service_perimeter_dry_run_resource = new Gcp.AccessContextManager.ServicePerimeterDryRunResource("service-perimeter-dry-run-resource", new()
    {
        PerimeterName = service_perimeter_dry_run_resourceServicePerimeter.Name,
        Resource = "projects/987654321",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("my policy"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewServicePerimeter(ctx, "service-perimeter-dry-run-resource", &accesscontextmanager.ServicePerimeterArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			Name: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v/servicePerimeters/restrict_all", name), nil
			}).(pulumi.StringOutput),
			Title: pulumi.String("restrict_all"),
			Spec: &accesscontextmanager.ServicePerimeterSpecArgs{
				RestrictedServices: pulumi.StringArray{
					pulumi.String("storage.googleapis.com"),
				},
			},
			UseExplicitDryRunSpec: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewServicePerimeterDryRunResource(ctx, "service-perimeter-dry-run-resource", &accesscontextmanager.ServicePerimeterDryRunResourceArgs{
			PerimeterName: service_perimeter_dry_run_resourceServicePerimeter.Name,
			Resource:      pulumi.String("projects/987654321"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeter;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeterArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimeterSpecArgs;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeterDryRunResource;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeterDryRunResourceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("my policy")
            .build());

        var service_perimeter_dry_run_resourceServicePerimeter = new ServicePerimeter("service-perimeter-dry-run-resourceServicePerimeter", ServicePerimeterArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/servicePerimeters/restrict_all", name)))
            .title("restrict_all")
            .spec(ServicePerimeterSpecArgs.builder()
                .restrictedServices("storage.googleapis.com")
                .build())
            .useExplicitDryRunSpec(true)
            .build());

        var service_perimeter_dry_run_resource = new ServicePerimeterDryRunResource("service-perimeter-dry-run-resource", ServicePerimeterDryRunResourceArgs.builder()
            .perimeterName(service_perimeter_dry_run_resourceServicePerimeter.name())
            .resource("projects/987654321")
            .build());

    }
}
```
```yaml
resources:
  service-perimeter-dry-run-resource:
    type: gcp:accesscontextmanager:ServicePerimeterDryRunResource
    properties:
      perimeterName: ${["service-perimeter-dry-run-resourceServicePerimeter"].name}
      resource: projects/987654321
  service-perimeter-dry-run-resourceServicePerimeter:
    type: gcp:accesscontextmanager:ServicePerimeter
    name: service-perimeter-dry-run-resource
    properties:
      parent: accessPolicies/${["access-policy"].name}
      name: accessPolicies/${["access-policy"].name}/servicePerimeters/restrict_all
      title: restrict_all
      spec:
        restrictedServices:
          - storage.googleapis.com
      useExplicitDryRunSpec: true
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: my policy
```
<!--End PulumiCodeChooser -->

## Import

ServicePerimeterDryRunResource can be imported using any of these accepted formats:

* `{{perimeter_name}}/{{resource}}`

When using the `pulumi import` command, ServicePerimeterDryRunResource can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:accesscontextmanager/servicePerimeterDryRunResource:ServicePerimeterDryRunResource default {{perimeter_name}}/{{resource}}
```

X
perimeterName" CThe name of the Service Perimeter to add this resource to.


- - -

resource" A GCP resource that is inside of the service perimeter.
Currently only projects are allowed.
Format: projects/{project_number}
"X
perimeterName" CThe name of the Service Perimeter to add this resource to.


- - -
"
resource" A GCP resource that is inside of the service perimeter.
Currently only projects are allowed.
Format: projects/{project_number}
*Ê

accesscontextmanagerServicePerimeterEgressPolicyRgcp:accesscontextmanager/servicePerimeterEgressPolicy:ServicePerimeterEgressPolicyManage a single EgressPolicy in the status (enforced) configuration for a service perimeter.
EgressPolicies match requests based on egressFrom and egressTo stanzas.
For an EgressPolicy to match, both egressFrom and egressTo stanzas must be matched.
If an EgressPolicy matches a request, the request is allowed to span the ServicePerimeter
boundary. For example, an EgressPolicy can be used to allow VMs on networks
within the ServicePerimeter to access a defined set of projects outside the
perimeter in certain contexts (e.g. to read data from a Cloud Storage bucket
or query against a BigQuery dataset).

> **Note:** By default, updates to this resource will remove the EgressPolicy from the
from the perimeter and add it back in a non-atomic manner. To ensure that the new EgressPolicy
is added before the old one is removed, add a `lifecycle` block with `create_before_destroy = true` to this resource.
> **Note:** If this resource is used alongside a `gcp.accesscontextmanager.ServicePerimeter` resource,
the service perimeter resource must have a `lifecycle` block with `ignore_changes = [status[0].egress_policies]` so
they don't fight over which egress rules should be in the policy.


To get more information about ServicePerimeterEgressPolicy, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters#egresspolicy)
* How-to Guides
    * [Guide to Ingress and Egress Rules](https://cloud.google.com/vpc-service-controls/docs/ingress-egress-rules)

## Example Usage

³

egressFrom¯B¬:©
¦
accesscontextmanager&ServicePerimeterEgressPolicyEgressFromfgcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressFrom:ServicePerimeterEgressPolicyEgressFromsDefines conditions on the source of a request causing this `EgressPolicy` to apply.
Structure is documented below.
È
egressTo©B¦:£
 
accesscontextmanager$ServicePerimeterEgressPolicyEgressTobgcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressTo:ServicePerimeterEgressPolicyEgressToDefines the conditions on the `ApiOperation` and destination resources that
cause this `EgressPolicy` to apply.
Structure is documented below.
T
	perimeter" CThe name of the Service Perimeter to add this resource to.


- - -
"³

egressFrom¯B¬:©
¦
accesscontextmanager&ServicePerimeterEgressPolicyEgressFromfgcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressFrom:ServicePerimeterEgressPolicyEgressFromsDefines conditions on the source of a request causing this `EgressPolicy` to apply.
Structure is documented below.
"È
egressTo©B¦:£
 
accesscontextmanager$ServicePerimeterEgressPolicyEgressTobgcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressTo:ServicePerimeterEgressPolicyEgressToDefines the conditions on the `ApiOperation` and destination resources that
cause this `EgressPolicy` to apply.
Structure is documented below.
"T
	perimeter" CThe name of the Service Perimeter to add this resource to.


- - -
*

accesscontextmanagerServicePerimeterIngressPolicyTgcp:accesscontextmanager/servicePerimeterIngressPolicy:ServicePerimeterIngressPolicyªManage a single IngressPolicy in the status (enforced) configuration for a service perimeter.
IngressPolicies match requests based on ingressFrom and ingressTo stanzas. For an ingress policy to match,
both the ingressFrom and ingressTo stanzas must be matched. If an IngressPolicy matches a request,
the request is allowed through the perimeter boundary from outside the perimeter.
For example, access from the internet can be allowed either based on an AccessLevel or,
for traffic hosted on Google Cloud, the project of the source network.
For access from private networks, using the project of the hosting network is required.
Individual ingress policies can be limited by restricting which services and/
or actions they match using the ingressTo field.

> **Note:** By default, updates to this resource will remove the IngressPolicy from the
from the perimeter and add it back in a non-atomic manner. To ensure that the new IngressPolicy
is added before the old one is removed, add a `lifecycle` block with `create_before_destroy = true` to this resource.
> **Note:** If this resource is used alongside a `gcp.accesscontextmanager.ServicePerimeter` resource,
the service perimeter resource must have a `lifecycle` block with `ignore_changes = [status[0].ingress_policies]` so
they don't fight over which ingress rules should be in the policy.


To get more information about ServicePerimeterIngressPolicy, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters#ingresspolicy)
* How-to Guides
    * [Guide to Ingress and Egress Rules](https://cloud.google.com/vpc-service-controls/docs/ingress-egress-rules)

## Example Usage

¿
ingressFromµB²:¯
¬
accesscontextmanager(ServicePerimeterIngressPolicyIngressFromjgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressFrom:ServicePerimeterIngressPolicyIngressFromxDefines the conditions on the source of a request causing this `IngressPolicy`
to apply.
Structure is documented below.
Î
	ingressTo¯B¬:©
¦
accesscontextmanager&ServicePerimeterIngressPolicyIngressTofgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressTo:ServicePerimeterIngressPolicyIngressToDefines the conditions on the `ApiOperation` and request destination that cause
this `IngressPolicy` to apply.
Structure is documented below.
T
	perimeter" CThe name of the Service Perimeter to add this resource to.


- - -
"¿
ingressFromµB²:¯
¬
accesscontextmanager(ServicePerimeterIngressPolicyIngressFromjgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressFrom:ServicePerimeterIngressPolicyIngressFromxDefines the conditions on the source of a request causing this `IngressPolicy`
to apply.
Structure is documented below.
"Î
	ingressTo¯B¬:©
¦
accesscontextmanager&ServicePerimeterIngressPolicyIngressTofgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressTo:ServicePerimeterIngressPolicyIngressToDefines the conditions on the `ApiOperation` and request destination that cause
this `IngressPolicy` to apply.
Structure is documented below.
"T
	perimeter" CThe name of the Service Perimeter to add this resource to.


- - -
*K
|
accesscontextmanagerServicePerimeterResourceJgcp:accesscontextmanager/servicePerimeterResource:ServicePerimeterResource®FAllows configuring a single GCP resource that should be inside the `status` block of a service perimeter.
This resource is intended to be used in cases where it is not possible to compile a full list
of projects to include in a `gcp.accesscontextmanager.ServicePerimeter` resource,
to enable them to be added separately.
If your perimeter is in dry-run mode use `gcp.accesscontextmanager.ServicePerimeterDryRunResource` instead.

> **Note:** If this resource is used alongside a `gcp.accesscontextmanager.ServicePerimeter` resource,
the service perimeter resource must have a `lifecycle` block with `ignore_changes = [status[0].resources]` so
they don't fight over which resources should be in the policy.


To get more information about ServicePerimeterResource, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters)
* How-to Guides
    * [Service Perimeter Quickstart](https://cloud.google.com/vpc-service-controls/docs/quickstart)

> **Warning:** If you are using User ADCs (Application Default Credentials) with this resource,
you must specify a `billing_project` and set `user_project_override` to true
in the provider configuration. Otherwise the ACM API will return a 403 error.
Your account must have the `serviceusage.services.use` permission on the
`billing_project` you defined.

## Example Usage

### Access Context Manager Service Perimeter Resource Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "my policy",
});
const service_perimeter_resourceServicePerimeter = new gcp.accesscontextmanager.ServicePerimeter("service-perimeter-resource", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    name: pulumi.interpolate`accessPolicies/${access_policy.name}/servicePerimeters/restrict_all`,
    title: "restrict_all",
    status: {
        restrictedServices: ["storage.googleapis.com"],
    },
});
const service_perimeter_resource = new gcp.accesscontextmanager.ServicePerimeterResource("service-perimeter-resource", {
    perimeterName: service_perimeter_resourceServicePerimeter.name,
    resource: "projects/987654321",
});
```
```python
import pulumi
import pulumi_gcp as gcp

access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="my policy")
service_perimeter_resource_service_perimeter = gcp.accesscontextmanager.ServicePerimeter("service-perimeter-resource",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/servicePerimeters/restrict_all"),
    title="restrict_all",
    status={
        "restricted_services": ["storage.googleapis.com"],
    })
service_perimeter_resource = gcp.accesscontextmanager.ServicePerimeterResource("service-perimeter-resource",
    perimeter_name=service_perimeter_resource_service_perimeter.name,
    resource="projects/987654321")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "my policy",
    });

    var service_perimeter_resourceServicePerimeter = new Gcp.AccessContextManager.ServicePerimeter("service-perimeter-resource", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/servicePerimeters/restrict_all"),
        Title = "restrict_all",
        Status = new Gcp.AccessContextManager.Inputs.ServicePerimeterStatusArgs
        {
            RestrictedServices = new[]
            {
                "storage.googleapis.com",
            },
        },
    });

    var service_perimeter_resource = new Gcp.AccessContextManager.ServicePerimeterResource("service-perimeter-resource", new()
    {
        PerimeterName = service_perimeter_resourceServicePerimeter.Name,
        Resource = "projects/987654321",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("my policy"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewServicePerimeter(ctx, "service-perimeter-resource", &accesscontextmanager.ServicePerimeterArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			Name: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v/servicePerimeters/restrict_all", name), nil
			}).(pulumi.StringOutput),
			Title: pulumi.String("restrict_all"),
			Status: &accesscontextmanager.ServicePerimeterStatusArgs{
				RestrictedServices: pulumi.StringArray{
					pulumi.String("storage.googleapis.com"),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewServicePerimeterResource(ctx, "service-perimeter-resource", &accesscontextmanager.ServicePerimeterResourceArgs{
			PerimeterName: service_perimeter_resourceServicePerimeter.Name,
			Resource:      pulumi.String("projects/987654321"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeter;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeterArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimeterStatusArgs;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeterResource;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeterResourceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("my policy")
            .build());

        var service_perimeter_resourceServicePerimeter = new ServicePerimeter("service-perimeter-resourceServicePerimeter", ServicePerimeterArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/servicePerimeters/restrict_all", name)))
            .title("restrict_all")
            .status(ServicePerimeterStatusArgs.builder()
                .restrictedServices("storage.googleapis.com")
                .build())
            .build());

        var service_perimeter_resource = new ServicePerimeterResource("service-perimeter-resource", ServicePerimeterResourceArgs.builder()
            .perimeterName(service_perimeter_resourceServicePerimeter.name())
            .resource("projects/987654321")
            .build());

    }
}
```
```yaml
resources:
  service-perimeter-resource:
    type: gcp:accesscontextmanager:ServicePerimeterResource
    properties:
      perimeterName: ${["service-perimeter-resourceServicePerimeter"].name}
      resource: projects/987654321
  service-perimeter-resourceServicePerimeter:
    type: gcp:accesscontextmanager:ServicePerimeter
    name: service-perimeter-resource
    properties:
      parent: accessPolicies/${["access-policy"].name}
      name: accessPolicies/${["access-policy"].name}/servicePerimeters/restrict_all
      title: restrict_all
      status:
        restrictedServices:
          - storage.googleapis.com
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: my policy
```
<!--End PulumiCodeChooser -->

## Import

ServicePerimeterResource can be imported using any of these accepted formats:

* `{{perimeter_name}}/{{resource}}`

When using the `pulumi import` command, ServicePerimeterResource can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:accesscontextmanager/servicePerimeterResource:ServicePerimeterResource default {{perimeter_name}}/{{resource}}
```

X
perimeterName" CThe name of the Service Perimeter to add this resource to.


- - -

resource" A GCP resource that is inside of the service perimeter.
Currently only projects are allowed.
Format: projects/{project_number}
"X
perimeterName" CThe name of the Service Perimeter to add this resource to.


- - -
"
resource" A GCP resource that is inside of the service perimeter.
Currently only projects are allowed.
Format: projects/{project_number}
*Ë~
g
accesscontextmanagerServicePerimeters<gcp:accesscontextmanager/servicePerimeters:ServicePerimetersùvReplace all existing Service Perimeters in an Access Policy with the Service Perimeters provided. This is done atomically.
This is a bulk edit of all Service Perimeters and may override existing Service Perimeters created by `gcp.accesscontextmanager.ServicePerimeter`,
thus causing a permadiff if used alongside `gcp.accesscontextmanager.ServicePerimeter` on the same parent.


To get more information about ServicePerimeters, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters)
* How-to Guides
    * [Guide to Ingress and Egress Rules](https://cloud.google.com/vpc-service-controls/docs/ingress-egress-rules)
    * [Service Perimeter Quickstart](https://cloud.google.com/vpc-service-controls/docs/quickstart)

## Example Usage

### Access Context Manager Service Perimeters Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const access_policy = new gcp.accesscontextmanager.AccessPolicy("access-policy", {
    parent: "organizations/123456789",
    title: "my policy",
});
const service_perimeter = new gcp.accesscontextmanager.ServicePerimeters("service-perimeter", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    servicePerimeters: [
        {
            name: pulumi.interpolate`accessPolicies/${access_policy.name}/servicePerimeters/`,
            title: "",
            status: {
                restrictedServices: ["storage.googleapis.com"],
            },
        },
        {
            name: pulumi.interpolate`accessPolicies/${access_policy.name}/servicePerimeters/`,
            title: "",
            status: {
                restrictedServices: ["bigtable.googleapis.com"],
            },
        },
    ],
});
const access_level = new gcp.accesscontextmanager.AccessLevel("access-level", {
    parent: pulumi.interpolate`accessPolicies/${access_policy.name}`,
    name: pulumi.interpolate`accessPolicies/${access_policy.name}/accessLevels/chromeos_no_lock`,
    title: "chromeos_no_lock",
    basic: {
        conditions: [{
            devicePolicy: {
                requireScreenLock: false,
                osConstraints: [{
                    osType: "DESKTOP_CHROME_OS",
                }],
            },
            regions: [
                "CH",
                "IT",
                "US",
            ],
        }],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

access_policy = gcp.accesscontextmanager.AccessPolicy("access-policy",
    parent="organizations/123456789",
    title="my policy")
service_perimeter = gcp.accesscontextmanager.ServicePerimeters("service-perimeter",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    service_perimeters=[
        {
            "name": access_policy.name.apply(lambda name: f"accessPolicies/{name}/servicePerimeters/"),
            "title": "",
            "status": {
                "restricted_services": ["storage.googleapis.com"],
            },
        },
        {
            "name": access_policy.name.apply(lambda name: f"accessPolicies/{name}/servicePerimeters/"),
            "title": "",
            "status": {
                "restricted_services": ["bigtable.googleapis.com"],
            },
        },
    ])
access_level = gcp.accesscontextmanager.AccessLevel("access-level",
    parent=access_policy.name.apply(lambda name: f"accessPolicies/{name}"),
    name=access_policy.name.apply(lambda name: f"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
    title="chromeos_no_lock",
    basic={
        "conditions": [{
            "device_policy": {
                "require_screen_lock": False,
                "os_constraints": [{
                    "os_type": "DESKTOP_CHROME_OS",
                }],
            },
            "regions": [
                "CH",
                "IT",
                "US",
            ],
        }],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var access_policy = new Gcp.AccessContextManager.AccessPolicy("access-policy", new()
    {
        Parent = "organizations/123456789",
        Title = "my policy",
    });

    var service_perimeter = new Gcp.AccessContextManager.ServicePerimeters("service-perimeter", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        ServicePerimeterDetails = new[]
        {
            new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterArgs
            {
                Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/servicePerimeters/"),
                Title = "",
                Status = new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterStatusArgs
                {
                    RestrictedServices = new[]
                    {
                        "storage.googleapis.com",
                    },
                },
            },
            new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterArgs
            {
                Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/servicePerimeters/"),
                Title = "",
                Status = new Gcp.AccessContextManager.Inputs.ServicePerimetersServicePerimeterStatusArgs
                {
                    RestrictedServices = new[]
                    {
                        "bigtable.googleapis.com",
                    },
                },
            },
        },
    });

    var access_level = new Gcp.AccessContextManager.AccessLevel("access-level", new()
    {
        Parent = access_policy.Name.Apply(name => $"accessPolicies/{name}"),
        Name = access_policy.Name.Apply(name => $"accessPolicies/{name}/accessLevels/chromeos_no_lock"),
        Title = "chromeos_no_lock",
        Basic = new Gcp.AccessContextManager.Inputs.AccessLevelBasicArgs
        {
            Conditions = new[]
            {
                new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionArgs
                {
                    DevicePolicy = new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyArgs
                    {
                        RequireScreenLock = false,
                        OsConstraints = new[]
                        {
                            new Gcp.AccessContextManager.Inputs.AccessLevelBasicConditionDevicePolicyOsConstraintArgs
                            {
                                OsType = "DESKTOP_CHROME_OS",
                            },
                        },
                    },
                    Regions = new[]
                    {
                        "CH",
                        "IT",
                        "US",
                    },
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.NewAccessPolicy(ctx, "access-policy", &accesscontextmanager.AccessPolicyArgs{
			Parent: pulumi.String("organizations/123456789"),
			Title:  pulumi.String("my policy"),
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewServicePerimeters(ctx, "service-perimeter", &accesscontextmanager.ServicePerimetersArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			ServicePerimeters: accesscontextmanager.ServicePerimetersServicePerimeterArray{
				&accesscontextmanager.ServicePerimetersServicePerimeterArgs{
					Name: access_policy.Name.ApplyT(func(name string) (string, error) {
						return fmt.Sprintf("accessPolicies/%v/servicePerimeters/", name), nil
					}).(pulumi.StringOutput),
					Title: pulumi.String(""),
					Status: &accesscontextmanager.ServicePerimetersServicePerimeterStatusArgs{
						RestrictedServices: pulumi.StringArray{
							pulumi.String("storage.googleapis.com"),
						},
					},
				},
				&accesscontextmanager.ServicePerimetersServicePerimeterArgs{
					Name: access_policy.Name.ApplyT(func(name string) (string, error) {
						return fmt.Sprintf("accessPolicies/%v/servicePerimeters/", name), nil
					}).(pulumi.StringOutput),
					Title: pulumi.String(""),
					Status: &accesscontextmanager.ServicePerimetersServicePerimeterStatusArgs{
						RestrictedServices: pulumi.StringArray{
							pulumi.String("bigtable.googleapis.com"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.NewAccessLevel(ctx, "access-level", &accesscontextmanager.AccessLevelArgs{
			Parent: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v", name), nil
			}).(pulumi.StringOutput),
			Name: access_policy.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("accessPolicies/%v/accessLevels/chromeos_no_lock", name), nil
			}).(pulumi.StringOutput),
			Title: pulumi.String("chromeos_no_lock"),
			Basic: &accesscontextmanager.AccessLevelBasicArgs{
				Conditions: accesscontextmanager.AccessLevelBasicConditionArray{
					&accesscontextmanager.AccessLevelBasicConditionArgs{
						DevicePolicy: &accesscontextmanager.AccessLevelBasicConditionDevicePolicyArgs{
							RequireScreenLock: pulumi.Bool(false),
							OsConstraints: accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArray{
								&accesscontextmanager.AccessLevelBasicConditionDevicePolicyOsConstraintArgs{
									OsType: pulumi.String("DESKTOP_CHROME_OS"),
								},
							},
						},
						Regions: pulumi.StringArray{
							pulumi.String("CH"),
							pulumi.String("IT"),
							pulumi.String("US"),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccessPolicy;
import com.pulumi.gcp.accesscontextmanager.AccessPolicyArgs;
import com.pulumi.gcp.accesscontextmanager.ServicePerimeters;
import com.pulumi.gcp.accesscontextmanager.ServicePerimetersArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimetersServicePerimeterArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimetersServicePerimeterStatusArgs;
import com.pulumi.gcp.accesscontextmanager.AccessLevel;
import com.pulumi.gcp.accesscontextmanager.AccessLevelArgs;
import com.pulumi.gcp.accesscontextmanager.inputs.AccessLevelBasicArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var access_policy = new AccessPolicy("access-policy", AccessPolicyArgs.builder()
            .parent("organizations/123456789")
            .title("my policy")
            .build());

        var service_perimeter = new ServicePerimeters("service-perimeter", ServicePerimetersArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .servicePerimeters(            
                ServicePerimetersServicePerimeterArgs.builder()
                    .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/servicePerimeters/", name)))
                    .title("")
                    .status(ServicePerimetersServicePerimeterStatusArgs.builder()
                        .restrictedServices("storage.googleapis.com")
                        .build())
                    .build(),
                ServicePerimetersServicePerimeterArgs.builder()
                    .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/servicePerimeters/", name)))
                    .title("")
                    .status(ServicePerimetersServicePerimeterStatusArgs.builder()
                        .restrictedServices("bigtable.googleapis.com")
                        .build())
                    .build())
            .build());

        var access_level = new AccessLevel("access-level", AccessLevelArgs.builder()
            .parent(access_policy.name().applyValue(name -> String.format("accessPolicies/%s", name)))
            .name(access_policy.name().applyValue(name -> String.format("accessPolicies/%s/accessLevels/chromeos_no_lock", name)))
            .title("chromeos_no_lock")
            .basic(AccessLevelBasicArgs.builder()
                .conditions(AccessLevelBasicConditionArgs.builder()
                    .devicePolicy(AccessLevelBasicConditionDevicePolicyArgs.builder()
                        .requireScreenLock(false)
                        .osConstraints(AccessLevelBasicConditionDevicePolicyOsConstraintArgs.builder()
                            .osType("DESKTOP_CHROME_OS")
                            .build())
                        .build())
                    .regions(                    
                        "CH",
                        "IT",
                        "US")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  service-perimeter:
    type: gcp:accesscontextmanager:ServicePerimeters
    properties:
      parent: accessPolicies/${["access-policy"].name}
      servicePerimeters:
        - name: accessPolicies/${["access-policy"].name}/servicePerimeters/
          title: ""
          status:
            restrictedServices:
              - storage.googleapis.com
        - name: accessPolicies/${["access-policy"].name}/servicePerimeters/
          title: ""
          status:
            restrictedServices:
              - bigtable.googleapis.com
  access-level:
    type: gcp:accesscontextmanager:AccessLevel
    properties:
      parent: accessPolicies/${["access-policy"].name}
      name: accessPolicies/${["access-policy"].name}/accessLevels/chromeos_no_lock
      title: chromeos_no_lock
      basic:
        conditions:
          - devicePolicy:
              requireScreenLock: false
              osConstraints:
                - osType: DESKTOP_CHROME_OS
            regions:
              - CH
              - IT
              - US
  access-policy:
    type: gcp:accesscontextmanager:AccessPolicy
    properties:
      parent: organizations/123456789
      title: my policy
```
<!--End PulumiCodeChooser -->

## Import

ServicePerimeters can be imported using any of these accepted formats:

* `{{parent}}/servicePerimeters`

* `{{parent}}`

When using the `pulumi import` command, ServicePerimeters can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:accesscontextmanager/servicePerimeters:ServicePerimeters default {{parent}}/servicePerimeters
```

```sh
$ pulumi import gcp:accesscontextmanager/servicePerimeters:ServicePerimeters default {{parent}}
```

j
parent" \The AccessPolicy this ServicePerimeter lives in.
Format: accessPolicies/{policy_id}


- - -
Ä
servicePerimeters£B *:

accesscontextmanager!ServicePerimetersServicePerimeter\gcp:accesscontextmanager/ServicePerimetersServicePerimeter:ServicePerimetersServicePerimeterThe desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
Structure is documented below.
"j
parent" \The AccessPolicy this ServicePerimeter lives in.
Format: accessPolicies/{policy_id}


- - -
"Ä
servicePerimeters£B *:

accesscontextmanager!ServicePerimetersServicePerimeter\gcp:accesscontextmanager/ServicePerimetersServicePerimeter:ServicePerimetersServicePerimeterThe desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
Structure is documented below.
*¶8
<
activedirectoryDomain!gcp:activedirectory/domain:DomainÀCreates a Microsoft AD domain


To get more information about Domain, see:

* [API documentation](https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains)
* How-to Guides
    * [Managed Microsoft Active Directory Quickstart](https://cloud.google.com/managed-microsoft-ad/docs/quickstarts)

## Example Usage

### Active Directory Domain Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const ad_domain = new gcp.activedirectory.Domain("ad-domain", {
    domainName: "tfgen.org.com",
    locations: ["us-central1"],
    reservedIpRange: "192.168.255.0/24",
    deletionProtection: false,
});
```
```python
import pulumi
import pulumi_gcp as gcp

ad_domain = gcp.activedirectory.Domain("ad-domain",
    domain_name="tfgen.org.com",
    locations=["us-central1"],
    reserved_ip_range="192.168.255.0/24",
    deletion_protection=False)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var ad_domain = new Gcp.ActiveDirectory.Domain("ad-domain", new()
    {
        DomainName = "tfgen.org.com",
        Locations = new[]
        {
            "us-central1",
        },
        ReservedIpRange = "192.168.255.0/24",
        DeletionProtection = false,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/activedirectory"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := activedirectory.NewDomain(ctx, "ad-domain", &activedirectory.DomainArgs{
			DomainName: pulumi.String("tfgen.org.com"),
			Locations: pulumi.StringArray{
				pulumi.String("us-central1"),
			},
			ReservedIpRange:    pulumi.String("192.168.255.0/24"),
			DeletionProtection: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.activedirectory.Domain;
import com.pulumi.gcp.activedirectory.DomainArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var ad_domain = new Domain("ad-domain", DomainArgs.builder()
            .domainName("tfgen.org.com")
            .locations("us-central1")
            .reservedIpRange("192.168.255.0/24")
            .deletionProtection(false)
            .build());

    }
}
```
```yaml
resources:
  ad-domain:
    type: gcp:activedirectory:Domain
    properties:
      domainName: tfgen.org.com
      locations:
        - us-central1
      reservedIpRange: 192.168.255.0/24
      deletionProtection: false
```
<!--End PulumiCodeChooser -->

## Import

Domain can be imported using any of these accepted formats:

* `{{project}}/{{name}}`

* `{{project}} {{name}}`

* `{{name}}`

When using the `pulumi import` command, Domain can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:activedirectory/domain:Domain default {{project}}/{{name}}
```

```sh
$ pulumi import gcp:activedirectory/domain:Domain default "{{project}} {{name}}"
```

```sh
$ pulumi import gcp:activedirectory/domain:Domain default {{name}}
```


adminB" The name of delegated administrator account used to perform Active Directory operations.
If not specified, setupadmin will be used.

authorizedNetworksB*" æThe full names of the Google Compute Engine networks the domain instance is connected to. The domain is only available on networks listed in authorizedNetworks.
If CIDR subnets overlap between networks, domain creation will fail.

deletionProtectionB
 Ú

domainName" ÇThe fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions
of https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.


- - -

labelsB2" þResource labels that can contain user-provided metadata
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
Õ
	locations*" ÁLocations where domain needs to be provisioned. [regions][compute/docs/regions-zones/]
e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
ß
reservedIpRange" ÇThe CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger.
Ranges must be unique and non-overlapping with existing subnets in authorizedNetworks
"
adminB" The name of delegated administrator account used to perform Active Directory operations.
If not specified, setupadmin will be used.
"
authorizedNetworksB*" æThe full names of the Google Compute Engine networks the domain instance is connected to. The domain is only available on networks listed in authorizedNetworks.
If CIDR subnets overlap between networks, domain creation will fail.
"
deletionProtectionB
 "Ú

domainName" ÇThe fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions
of https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.


- - -
"¦
effectiveLabels2" All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"Å
fqdn" ¸The fully-qualified domain name of the exposed domain used by clients to connect to the service.
Similar to what would be chosen for an Active Directory set up on an internal network.
"
labelsB2" þResource labels that can contain user-provided metadata
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"Õ
	locations*" ÁLocations where domain needs to be provisioned. [regions][compute/docs/regions-zones/]
e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.
"x
name" lThe unique name of the domain using the format: `projects/{project}/locations/global/domains/{domainName}`.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"ß
reservedIpRange" ÇThe CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger.
Ranges must be unique and non-overlapping with existing subnets in authorizedNetworks
*ù
K
activedirectoryDomainTrust+gcp:activedirectory/domainTrust:DomainTrust³Adds a trust between Active Directory domains


To get more information about DomainTrust, see:

* [API documentation](https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains/attachTrust)
* How-to Guides
    * [Active Directory Trust](https://cloud.google.com/managed-microsoft-ad/docs/create-one-way-trust)



## Example Usage

### Active Directory Domain Trust Basic


<!--Start PulumiCodeChooser -->
```yaml
resources:
  ad-domain-trust:
    type: gcp:activedirectory:DomainTrust
    properties:
      domain: test-managed-ad.com
      targetDomainName: example-gcp.com
      targetDnsIpAddresses:
        - 10.1.0.100
      trustDirection: OUTBOUND
      trustType: FOREST
      trustHandshakeSecret: Testing1!
      deletionProtection: false
```
<!--End PulumiCodeChooser -->

## Import

DomainTrust can be imported using any of these accepted formats:

* `projects/{{project}}/locations/global/domains/{{domain}}/{{target_domain_name}}`

* `{{project}}/{{domain}}/{{target_domain_name}}`

* `{{domain}}/{{target_domain_name}}`

When using the `pulumi import` command, DomainTrust can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:activedirectory/domainTrust:DomainTrust default projects/{{project}}/locations/global/domains/{{domain}}/{{target_domain_name}}
```

```sh
$ pulumi import gcp:activedirectory/domainTrust:DomainTrust default {{project}}/{{domain}}/{{target_domain_name}}
```

```sh
$ pulumi import gcp:activedirectory/domainTrust:DomainTrust default {{domain}}/{{target_domain_name}}
```

Ö
domain" ÇThe fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions
of https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.

selectiveAuthenticationB
 lWhether the trusted side has forest/domain wide access or selective access to an approved set of resources.
|
targetDnsIpAddresses*" ^The target DNS server IP addresses which can resolve the remote domain involved in the trust.
o
targetDomainName" WThe fully qualified target domain name which will be in trust with the current domain.
¬
trustDirection" The trust direction, which decides if the current domain is trusted, trusting, or both.
Possible values are: `INBOUND`, `OUTBOUND`, `BIDIRECTIONAL`.
Â
trustHandshakeSecret" ¥The trust secret used for the handshake with the target domain. This will not be stored.
**Note**: This property is sensitive and will not be displayed in the plan.
q
	trustType" `The type of trust represented by the trust resource.
Possible values are: `FOREST`, `EXTERNAL`.
"Ö
domain" ÇThe fully qualified domain name. e.g. mydomain.myorganization.com, with the restrictions
of https://cloud.google.com/managed-microsoft-ad/reference/rest/v1/projects.locations.global.domains.


- - -
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"
selectiveAuthenticationB
 lWhether the trusted side has forest/domain wide access or selective access to an approved set of resources.
"|
targetDnsIpAddresses*" ^The target DNS server IP addresses which can resolve the remote domain involved in the trust.
"o
targetDomainName" WThe fully qualified target domain name which will be in trust with the current domain.
"¬
trustDirection" The trust direction, which decides if the current domain is trusted, trusting, or both.
Possible values are: `INBOUND`, `OUTBOUND`, `BIDIRECTIONAL`.
"Â
trustHandshakeSecret" ¥The trust secret used for the handshake with the target domain. This will not be stored.
**Note**: This property is sensitive and will not be displayed in the plan.
"q
	trustType" `The type of trust represented by the trust resource.
Possible values are: `FOREST`, `EXTERNAL`.
*´
?
activedirectoryPeering#gcp:activedirectory/peering:Peering¼
## Example Usage

### Active Directory Peering Basic


<!--Start PulumiCodeChooser -->
```yaml
resources:
  ad-domain-peering:
    type: gcp:activedirectory:Peering
    properties:
      domainResource: ${["ad-domain"].name}
      peeringId: ad-domain-peering
      authorizedNetwork: ${["peered-network"].id}
      deletionProtection: false
      labels:
        foo: bar
  ad-domain:
    type: gcp:activedirectory:Domain
    properties:
      domainName: ad.test.hashicorptest.com
      locations:
        - us-central1
      reservedIpRange: 192.168.255.0/24
      authorizedNetworks:
        - ${["source-network"].id}
      deletionProtection: false
  peered-network:
    type: gcp:compute:Network
    properties:
      project: ${compute.project}
      name: ad-peered-network
  source-network:
    type: gcp:compute:Network
    properties:
      name: ad-network
  compute:
    type: gcp:projects:Service
    properties:
      project: ${["peered-project"].projectId}
      service: compute.googleapis.com
  peered-project:
    type: gcp:organizations:Project
    properties:
      name: my-peered-project
      projectId: my-peered-project
      orgId: '123456789'
      billingAccount: 000000-0000000-0000000-000000
      deletionPolicy: DELETE
```
<!--End PulumiCodeChooser -->

## Import

This resource does not support import.

á
authorizedNetwork" ÇThe full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that CIDR subnets do not overlap between networks, else peering creation will fail.
Ã
domainResource" ¬Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form projects/{projectId}/locations/global/domains/{domainName}

labelsB2" þResource labels that can contain user-provided metadata
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.

	peeringId" - - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
3
statusB" #The current state of this Peering.
f
statusMessageB" OAdditional information about the current status of this peering, if available.
"á
authorizedNetwork" ÇThe full names of the Google Compute Engine networks to which the instance is connected. Caller needs to make sure that CIDR subnets do not overlap between networks, else peering creation will fail.
"Ã
domainResource" ¬Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form projects/{projectId}/locations/global/domains/{domainName}
"¦
effectiveLabels2" All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"
labelsB2" þResource labels that can contain user-provided metadata
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"¢
name" Unique name of the peering in this scope including projects and location using the form: projects/{projectId}/locations/global/peerings/{peeringId}.
"
	peeringId" - - -
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"3
statusB" #The current state of this Peering.
"f
statusMessageB" OAdditional information about the current status of this peering, if available.
*µß
,
alloydbBackupgcp:alloydb/backup:Backup­An AlloyDB Backup.


To get more information about Backup, see:

* [API documentation](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.backups/create)
* How-to Guides
    * [AlloyDB](https://cloud.google.com/alloydb/docs/)

## Example Usage

### Alloydb Backup Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const defaultNetwork = new gcp.compute.Network("default", {name: "alloydb-network"});
const defaultCluster = new gcp.alloydb.Cluster("default", {
    clusterId: "alloydb-cluster",
    location: "us-central1",
    networkConfig: {
        network: defaultNetwork.id,
    },
});
const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
    name: "alloydb-cluster",
    addressType: "INTERNAL",
    purpose: "VPC_PEERING",
    prefixLength: 16,
    network: defaultNetwork.id,
});
const vpcConnection = new gcp.servicenetworking.Connection("vpc_connection", {
    network: defaultNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [privateIpAlloc.name],
});
const defaultInstance = new gcp.alloydb.Instance("default", {
    cluster: defaultCluster.name,
    instanceId: "alloydb-instance",
    instanceType: "PRIMARY",
}, {
    dependsOn: [vpcConnection],
});
const _default = new gcp.alloydb.Backup("default", {
    location: "us-central1",
    backupId: "alloydb-backup",
    clusterName: defaultCluster.name,
}, {
    dependsOn: [defaultInstance],
});
```
```python
import pulumi
import pulumi_gcp as gcp

default_network = gcp.compute.Network("default", name="alloydb-network")
default_cluster = gcp.alloydb.Cluster("default",
    cluster_id="alloydb-cluster",
    location="us-central1",
    network_config={
        "network": default_network.id,
    })
private_ip_alloc = gcp.compute.GlobalAddress("private_ip_alloc",
    name="alloydb-cluster",
    address_type="INTERNAL",
    purpose="VPC_PEERING",
    prefix_length=16,
    network=default_network.id)
vpc_connection = gcp.servicenetworking.Connection("vpc_connection",
    network=default_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[private_ip_alloc.name])
default_instance = gcp.alloydb.Instance("default",
    cluster=default_cluster.name,
    instance_id="alloydb-instance",
    instance_type="PRIMARY",
    opts = pulumi.ResourceOptions(depends_on=[vpc_connection]))
default = gcp.alloydb.Backup("default",
    location="us-central1",
    backup_id="alloydb-backup",
    cluster_name=default_cluster.name,
    opts = pulumi.ResourceOptions(depends_on=[default_instance]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var defaultNetwork = new Gcp.Compute.Network("default", new()
    {
        Name = "alloydb-network",
    });

    var defaultCluster = new Gcp.Alloydb.Cluster("default", new()
    {
        ClusterId = "alloydb-cluster",
        Location = "us-central1",
        NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
        {
            Network = defaultNetwork.Id,
        },
    });

    var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    {
        Name = "alloydb-cluster",
        AddressType = "INTERNAL",
        Purpose = "VPC_PEERING",
        PrefixLength = 16,
        Network = defaultNetwork.Id,
    });

    var vpcConnection = new Gcp.ServiceNetworking.Connection("vpc_connection", new()
    {
        Network = defaultNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            privateIpAlloc.Name,
        },
    });

    var defaultInstance = new Gcp.Alloydb.Instance("default", new()
    {
        Cluster = defaultCluster.Name,
        InstanceId = "alloydb-instance",
        InstanceType = "PRIMARY",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vpcConnection,
        },
    });

    var @default = new Gcp.Alloydb.Backup("default", new()
    {
        Location = "us-central1",
        BackupId = "alloydb-backup",
        ClusterName = defaultCluster.Name,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            defaultInstance,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
			Name: pulumi.String("alloydb-network"),
		})
		if err != nil {
			return err
		}
		defaultCluster, err := alloydb.NewCluster(ctx, "default", &alloydb.ClusterArgs{
			ClusterId: pulumi.String("alloydb-cluster"),
			Location:  pulumi.String("us-central1"),
			NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
				Network: defaultNetwork.ID(),
			},
		})
		if err != nil {
			return err
		}
		privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
			Name:         pulumi.String("alloydb-cluster"),
			AddressType:  pulumi.String("INTERNAL"),
			Purpose:      pulumi.String("VPC_PEERING"),
			PrefixLength: pulumi.Int(16),
			Network:      defaultNetwork.ID(),
		})
		if err != nil {
			return err
		}
		vpcConnection, err := servicenetworking.NewConnection(ctx, "vpc_connection", &servicenetworking.ConnectionArgs{
			Network: defaultNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				privateIpAlloc.Name,
			},
		})
		if err != nil {
			return err
		}
		defaultInstance, err := alloydb.NewInstance(ctx, "default", &alloydb.InstanceArgs{
			Cluster:      defaultCluster.Name,
			InstanceId:   pulumi.String("alloydb-instance"),
			InstanceType: pulumi.String("PRIMARY"),
		}, pulumi.DependsOn([]pulumi.Resource{
			vpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = alloydb.NewBackup(ctx, "default", &alloydb.BackupArgs{
			Location:    pulumi.String("us-central1"),
			BackupId:    pulumi.String("alloydb-backup"),
			ClusterName: defaultCluster.Name,
		}, pulumi.DependsOn([]pulumi.Resource{
			defaultInstance,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.alloydb.Cluster;
import com.pulumi.gcp.alloydb.ClusterArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterNetworkConfigArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.alloydb.Instance;
import com.pulumi.gcp.alloydb.InstanceArgs;
import com.pulumi.gcp.alloydb.Backup;
import com.pulumi.gcp.alloydb.BackupArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()
            .name("alloydb-network")
            .build());

        var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
            .clusterId("alloydb-cluster")
            .location("us-central1")
            .networkConfig(ClusterNetworkConfigArgs.builder()
                .network(defaultNetwork.id())
                .build())
            .build());

        var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
            .name("alloydb-cluster")
            .addressType("INTERNAL")
            .purpose("VPC_PEERING")
            .prefixLength(16)
            .network(defaultNetwork.id())
            .build());

        var vpcConnection = new Connection("vpcConnection", ConnectionArgs.builder()
            .network(defaultNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(privateIpAlloc.name())
            .build());

        var defaultInstance = new Instance("defaultInstance", InstanceArgs.builder()
            .cluster(defaultCluster.name())
            .instanceId("alloydb-instance")
            .instanceType("PRIMARY")
            .build(), CustomResourceOptions.builder()
                .dependsOn(vpcConnection)
                .build());

        var default_ = new Backup("default", BackupArgs.builder()
            .location("us-central1")
            .backupId("alloydb-backup")
            .clusterName(defaultCluster.name())
            .build(), CustomResourceOptions.builder()
                .dependsOn(defaultInstance)
                .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:alloydb:Backup
    properties:
      location: us-central1
      backupId: alloydb-backup
      clusterName: ${defaultCluster.name}
    options:
      dependsOn:
        - ${defaultInstance}
  defaultCluster:
    type: gcp:alloydb:Cluster
    name: default
    properties:
      clusterId: alloydb-cluster
      location: us-central1
      networkConfig:
        network: ${defaultNetwork.id}
  defaultInstance:
    type: gcp:alloydb:Instance
    name: default
    properties:
      cluster: ${defaultCluster.name}
      instanceId: alloydb-instance
      instanceType: PRIMARY
    options:
      dependsOn:
        - ${vpcConnection}
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: alloydb-cluster
      addressType: INTERNAL
      purpose: VPC_PEERING
      prefixLength: 16
      network: ${defaultNetwork.id}
  vpcConnection:
    type: gcp:servicenetworking:Connection
    name: vpc_connection
    properties:
      network: ${defaultNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${privateIpAlloc.name}
  defaultNetwork:
    type: gcp:compute:Network
    name: default
    properties:
      name: alloydb-network
```
<!--End PulumiCodeChooser -->
### Alloydb Backup Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const defaultNetwork = new gcp.compute.Network("default", {name: "alloydb-network"});
const defaultCluster = new gcp.alloydb.Cluster("default", {
    clusterId: "alloydb-cluster",
    location: "us-central1",
    networkConfig: {
        network: defaultNetwork.id,
    },
});
const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
    name: "alloydb-cluster",
    addressType: "INTERNAL",
    purpose: "VPC_PEERING",
    prefixLength: 16,
    network: defaultNetwork.id,
});
const vpcConnection = new gcp.servicenetworking.Connection("vpc_connection", {
    network: defaultNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [privateIpAlloc.name],
});
const defaultInstance = new gcp.alloydb.Instance("default", {
    cluster: defaultCluster.name,
    instanceId: "alloydb-instance",
    instanceType: "PRIMARY",
}, {
    dependsOn: [vpcConnection],
});
const _default = new gcp.alloydb.Backup("default", {
    location: "us-central1",
    backupId: "alloydb-backup",
    clusterName: defaultCluster.name,
    description: "example description",
    type: "ON_DEMAND",
    labels: {
        label: "key",
    },
}, {
    dependsOn: [defaultInstance],
});
```
```python
import pulumi
import pulumi_gcp as gcp

default_network = gcp.compute.Network("default", name="alloydb-network")
default_cluster = gcp.alloydb.Cluster("default",
    cluster_id="alloydb-cluster",
    location="us-central1",
    network_config={
        "network": default_network.id,
    })
private_ip_alloc = gcp.compute.GlobalAddress("private_ip_alloc",
    name="alloydb-cluster",
    address_type="INTERNAL",
    purpose="VPC_PEERING",
    prefix_length=16,
    network=default_network.id)
vpc_connection = gcp.servicenetworking.Connection("vpc_connection",
    network=default_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[private_ip_alloc.name])
default_instance = gcp.alloydb.Instance("default",
    cluster=default_cluster.name,
    instance_id="alloydb-instance",
    instance_type="PRIMARY",
    opts = pulumi.ResourceOptions(depends_on=[vpc_connection]))
default = gcp.alloydb.Backup("default",
    location="us-central1",
    backup_id="alloydb-backup",
    cluster_name=default_cluster.name,
    description="example description",
    type="ON_DEMAND",
    labels={
        "label": "key",
    },
    opts = pulumi.ResourceOptions(depends_on=[default_instance]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var defaultNetwork = new Gcp.Compute.Network("default", new()
    {
        Name = "alloydb-network",
    });

    var defaultCluster = new Gcp.Alloydb.Cluster("default", new()
    {
        ClusterId = "alloydb-cluster",
        Location = "us-central1",
        NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
        {
            Network = defaultNetwork.Id,
        },
    });

    var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    {
        Name = "alloydb-cluster",
        AddressType = "INTERNAL",
        Purpose = "VPC_PEERING",
        PrefixLength = 16,
        Network = defaultNetwork.Id,
    });

    var vpcConnection = new Gcp.ServiceNetworking.Connection("vpc_connection", new()
    {
        Network = defaultNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            privateIpAlloc.Name,
        },
    });

    var defaultInstance = new Gcp.Alloydb.Instance("default", new()
    {
        Cluster = defaultCluster.Name,
        InstanceId = "alloydb-instance",
        InstanceType = "PRIMARY",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vpcConnection,
        },
    });

    var @default = new Gcp.Alloydb.Backup("default", new()
    {
        Location = "us-central1",
        BackupId = "alloydb-backup",
        ClusterName = defaultCluster.Name,
        Description = "example description",
        Type = "ON_DEMAND",
        Labels = 
        {
            { "label", "key" },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            defaultInstance,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
			Name: pulumi.String("alloydb-network"),
		})
		if err != nil {
			return err
		}
		defaultCluster, err := alloydb.NewCluster(ctx, "default", &alloydb.ClusterArgs{
			ClusterId: pulumi.String("alloydb-cluster"),
			Location:  pulumi.String("us-central1"),
			NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
				Network: defaultNetwork.ID(),
			},
		})
		if err != nil {
			return err
		}
		privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
			Name:         pulumi.String("alloydb-cluster"),
			AddressType:  pulumi.String("INTERNAL"),
			Purpose:      pulumi.String("VPC_PEERING"),
			PrefixLength: pulumi.Int(16),
			Network:      defaultNetwork.ID(),
		})
		if err != nil {
			return err
		}
		vpcConnection, err := servicenetworking.NewConnection(ctx, "vpc_connection", &servicenetworking.ConnectionArgs{
			Network: defaultNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				privateIpAlloc.Name,
			},
		})
		if err != nil {
			return err
		}
		defaultInstance, err := alloydb.NewInstance(ctx, "default", &alloydb.InstanceArgs{
			Cluster:      defaultCluster.Name,
			InstanceId:   pulumi.String("alloydb-instance"),
			InstanceType: pulumi.String("PRIMARY"),
		}, pulumi.DependsOn([]pulumi.Resource{
			vpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = alloydb.NewBackup(ctx, "default", &alloydb.BackupArgs{
			Location:    pulumi.String("us-central1"),
			BackupId:    pulumi.String("alloydb-backup"),
			ClusterName: defaultCluster.Name,
			Description: pulumi.String("example description"),
			Type:        pulumi.String("ON_DEMAND"),
			Labels: pulumi.StringMap{
				"label": pulumi.String("key"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			defaultInstance,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.alloydb.Cluster;
import com.pulumi.gcp.alloydb.ClusterArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterNetworkConfigArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.alloydb.Instance;
import com.pulumi.gcp.alloydb.InstanceArgs;
import com.pulumi.gcp.alloydb.Backup;
import com.pulumi.gcp.alloydb.BackupArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()
            .name("alloydb-network")
            .build());

        var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
            .clusterId("alloydb-cluster")
            .location("us-central1")
            .networkConfig(ClusterNetworkConfigArgs.builder()
                .network(defaultNetwork.id())
                .build())
            .build());

        var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
            .name("alloydb-cluster")
            .addressType("INTERNAL")
            .purpose("VPC_PEERING")
            .prefixLength(16)
            .network(defaultNetwork.id())
            .build());

        var vpcConnection = new Connection("vpcConnection", ConnectionArgs.builder()
            .network(defaultNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(privateIpAlloc.name())
            .build());

        var defaultInstance = new Instance("defaultInstance", InstanceArgs.builder()
            .cluster(defaultCluster.name())
            .instanceId("alloydb-instance")
            .instanceType("PRIMARY")
            .build(), CustomResourceOptions.builder()
                .dependsOn(vpcConnection)
                .build());

        var default_ = new Backup("default", BackupArgs.builder()
            .location("us-central1")
            .backupId("alloydb-backup")
            .clusterName(defaultCluster.name())
            .description("example description")
            .type("ON_DEMAND")
            .labels(Map.of("label", "key"))
            .build(), CustomResourceOptions.builder()
                .dependsOn(defaultInstance)
                .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:alloydb:Backup
    properties:
      location: us-central1
      backupId: alloydb-backup
      clusterName: ${defaultCluster.name}
      description: example description
      type: ON_DEMAND
      labels:
        label: key
    options:
      dependsOn:
        - ${defaultInstance}
  defaultCluster:
    type: gcp:alloydb:Cluster
    name: default
    properties:
      clusterId: alloydb-cluster
      location: us-central1
      networkConfig:
        network: ${defaultNetwork.id}
  defaultInstance:
    type: gcp:alloydb:Instance
    name: default
    properties:
      cluster: ${defaultCluster.name}
      instanceId: alloydb-instance
      instanceType: PRIMARY
    options:
      dependsOn:
        - ${vpcConnection}
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: alloydb-cluster
      addressType: INTERNAL
      purpose: VPC_PEERING
      prefixLength: 16
      network: ${defaultNetwork.id}
  vpcConnection:
    type: gcp:servicenetworking:Connection
    name: vpc_connection
    properties:
      network: ${defaultNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${privateIpAlloc.name}
  defaultNetwork:
    type: gcp:compute:Network
    name: default
    properties:
      name: alloydb-network
```
<!--End PulumiCodeChooser -->

## Import

Backup can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/backups/{{backup_id}}`

* `{{project}}/{{location}}/{{backup_id}}`

* `{{location}}/{{backup_id}}`

When using the `pulumi import` command, Backup can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:alloydb/backup:Backup default projects/{{project}}/locations/{{location}}/backups/{{backup_id}}
```

```sh
$ pulumi import gcp:alloydb/backup:Backup default {{project}}/{{location}}/{{backup_id}}
```

```sh
$ pulumi import gcp:alloydb/backup:Backup default {{location}}/{{backup_id}}
```

ã
annotationsB2" ËAnnotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field `effective_annotations` for all of the annotations present on the resource.
.
backupId" The ID of the alloydb backup.

clusterName" zThe full resource name of the backup source cluster (e.g., projects/{project}/locations/{location}/clusters/{clusterId}).
>
descriptionB" )User-provided description of the backup.
S
displayNameB" >User-settable and human-readable display name for the Backup.
£
encryptionConfigbB`:^
\
alloydbBackupEncryptionConfig9gcp:alloydb/BackupEncryptionConfig:BackupEncryptionConfigªEncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
Structure is documented below.
÷
labelsB2" äUser-defined labels for the alloydb backup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
M
location" =The location where the alloydb backup should reside.


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.

typeB" The backup type, which suggests the trigger for the backup.
Possible values are: `TYPE_UNSPECIFIED`, `ON_DEMAND`, `AUTOMATED`, `CONTINUOUS`.
"ã
annotationsB2" ËAnnotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field `effective_annotations` for all of the annotations present on the resource.
".
backupId" The ID of the alloydb backup.
"
clusterName" zThe full resource name of the backup source cluster (e.g., projects/{project}/locations/{location}/clusters/{clusterId}).
"o

clusterUid" ]Output only. The system-generated UID of the cluster which was used to create this resource.
"á

createTime" ÎOutput only. Create time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"á

deleteTime" ÎOutput only. Delete time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
">
descriptionB" )User-provided description of the backup.
"S
displayNameB" >User-settable and human-readable display name for the Backup.
"
effectiveAnnotations2" "¦
effectiveLabels2" All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"£
encryptionConfigbB`:^
\
alloydbBackupEncryptionConfig9gcp:alloydb/BackupEncryptionConfig:BackupEncryptionConfigªEncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
Structure is documented below.
"Þ
encryptionInfos\*Z:X
V
alloydbBackupEncryptionInfo5gcp:alloydb/BackupEncryptionInfo:BackupEncryptionInfomEncryptionInfo describes the encryption information of a cluster or a backup.
Structure is documented below.
"K
etag" ?For Resource freshness validation (https://google.aip.dev/154)
"Î
expiryQuantities\*Z:X
V
alloydbBackupExpiryQuantity5gcp:alloydb/BackupExpiryQuantity:BackupExpiryQuantityÛOutput only. The QuantityBasedExpiry of the backup, specified by the backup's retention policy.
Once the expiry quantity is over retention, the backup is eligible to be garbage collected.
Structure is documented below.
"É

expiryTime" ¶Output only. The time at which after the backup is eligible to be garbage collected.
It is the duration specified by the backup's retention policy, added to the backup's createTime.
"÷
labelsB2" äUser-defined labels for the alloydb backup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"M
location" =The location where the alloydb backup should reside.


- - -
"
name" yOutput only. The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backupId}
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"ÿ
reconciling
 ëOutput only. Reconciling (https://google.aip.dev/128#reconciliation), if true, indicates that the service is actively updating the resource.
This can happen due to user-triggered updates or system actions like failover or maintenance.
"?
	sizeBytes" .Output only. The size of the backup in bytes.
";
state" .Output only. The current state of the backup.
"
type" The backup type, which suggests the trigger for the backup.
Possible values are: `TYPE_UNSPECIFIED`, `ON_DEMAND`, `AUTOMATED`, `CONTINUOUS`.
"
uid" Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
"á

updateTime" ÎOutput only. Update time stamp. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*ªÍ
/
alloydbClustergcp:alloydb/cluster:Clusterîñ## Example Usage

### Alloydb Cluster Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const defaultNetwork = new gcp.compute.Network("default", {name: "alloydb-cluster"});
const _default = new gcp.alloydb.Cluster("default", {
    clusterId: "alloydb-cluster",
    location: "us-central1",
    networkConfig: {
        network: defaultNetwork.id,
    },
});
const project = gcp.organizations.getProject({});
```
```python
import pulumi
import pulumi_gcp as gcp

default_network = gcp.compute.Network("default", name="alloydb-cluster")
default = gcp.alloydb.Cluster("default",
    cluster_id="alloydb-cluster",
    location="us-central1",
    network_config={
        "network": default_network.id,
    })
project = gcp.organizations.get_project()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var defaultNetwork = new Gcp.Compute.Network("default", new()
    {
        Name = "alloydb-cluster",
    });

    var @default = new Gcp.Alloydb.Cluster("default", new()
    {
        ClusterId = "alloydb-cluster",
        Location = "us-central1",
        NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
        {
            Network = defaultNetwork.Id,
        },
    });

    var project = Gcp.Organizations.GetProject.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
			Name: pulumi.String("alloydb-cluster"),
		})
		if err != nil {
			return err
		}
		_, err = alloydb.NewCluster(ctx, "default", &alloydb.ClusterArgs{
			ClusterId: pulumi.String("alloydb-cluster"),
			Location:  pulumi.String("us-central1"),
			NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
				Network: defaultNetwork.ID(),
			},
		})
		if err != nil {
			return err
		}
		_, err = organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.alloydb.Cluster;
import com.pulumi.gcp.alloydb.ClusterArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterNetworkConfigArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()
            .name("alloydb-cluster")
            .build());

        var default_ = new Cluster("default", ClusterArgs.builder()
            .clusterId("alloydb-cluster")
            .location("us-central1")
            .networkConfig(ClusterNetworkConfigArgs.builder()
                .network(defaultNetwork.id())
                .build())
            .build());

        final var project = OrganizationsFunctions.getProject();

    }
}
```
```yaml
resources:
  default:
    type: gcp:alloydb:Cluster
    properties:
      clusterId: alloydb-cluster
      location: us-central1
      networkConfig:
        network: ${defaultNetwork.id}
  defaultNetwork:
    type: gcp:compute:Network
    name: default
    properties:
      name: alloydb-cluster
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Alloydb Cluster Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.compute.Network("default", {name: "alloydb-cluster-full"});
const full = new gcp.alloydb.Cluster("full", {
    clusterId: "alloydb-cluster-full",
    location: "us-central1",
    networkConfig: {
        network: _default.id,
    },
    databaseVersion: "POSTGRES_15",
    initialUser: {
        user: "alloydb-cluster-full",
        password: "alloydb-cluster-full",
    },
    continuousBackupConfig: {
        enabled: true,
        recoveryWindowDays: 14,
    },
    automatedBackupPolicy: {
        location: "us-central1",
        backupWindow: "1800s",
        enabled: true,
        weeklySchedule: {
            daysOfWeeks: ["MONDAY"],
            startTimes: [{
                hours: 23,
                minutes: 0,
                seconds: 0,
                nanos: 0,
            }],
        },
        quantityBasedRetention: {
            count: 1,
        },
        labels: {
            test: "alloydb-cluster-full",
        },
    },
    labels: {
        test: "alloydb-cluster-full",
    },
});
const project = gcp.organizations.getProject({});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.compute.Network("default", name="alloydb-cluster-full")
full = gcp.alloydb.Cluster("full",
    cluster_id="alloydb-cluster-full",
    location="us-central1",
    network_config={
        "network": default.id,
    },
    database_version="POSTGRES_15",
    initial_user={
        "user": "alloydb-cluster-full",
        "password": "alloydb-cluster-full",
    },
    continuous_backup_config={
        "enabled": True,
        "recovery_window_days": 14,
    },
    automated_backup_policy={
        "location": "us-central1",
        "backup_window": "1800s",
        "enabled": True,
        "weekly_schedule": {
            "days_of_weeks": ["MONDAY"],
            "start_times": [{
                "hours": 23,
                "minutes": 0,
                "seconds": 0,
                "nanos": 0,
            }],
        },
        "quantity_based_retention": {
            "count": 1,
        },
        "labels": {
            "test": "alloydb-cluster-full",
        },
    },
    labels={
        "test": "alloydb-cluster-full",
    })
project = gcp.organizations.get_project()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.Compute.Network("default", new()
    {
        Name = "alloydb-cluster-full",
    });

    var full = new Gcp.Alloydb.Cluster("full", new()
    {
        ClusterId = "alloydb-cluster-full",
        Location = "us-central1",
        NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
        {
            Network = @default.Id,
        },
        DatabaseVersion = "POSTGRES_15",
        InitialUser = new Gcp.Alloydb.Inputs.ClusterInitialUserArgs
        {
            User = "alloydb-cluster-full",
            Password = "alloydb-cluster-full",
        },
        ContinuousBackupConfig = new Gcp.Alloydb.Inputs.ClusterContinuousBackupConfigArgs
        {
            Enabled = true,
            RecoveryWindowDays = 14,
        },
        AutomatedBackupPolicy = new Gcp.Alloydb.Inputs.ClusterAutomatedBackupPolicyArgs
        {
            Location = "us-central1",
            BackupWindow = "1800s",
            Enabled = true,
            WeeklySchedule = new Gcp.Alloydb.Inputs.ClusterAutomatedBackupPolicyWeeklyScheduleArgs
            {
                DaysOfWeeks = new[]
                {
                    "MONDAY",
                },
                StartTimes = new[]
                {
                    new Gcp.Alloydb.Inputs.ClusterAutomatedBackupPolicyWeeklyScheduleStartTimeArgs
                    {
                        Hours = 23,
                        Minutes = 0,
                        Seconds = 0,
                        Nanos = 0,
                    },
                },
            },
            QuantityBasedRetention = new Gcp.Alloydb.Inputs.ClusterAutomatedBackupPolicyQuantityBasedRetentionArgs
            {
                Count = 1,
            },
            Labels = 
            {
                { "test", "alloydb-cluster-full" },
            },
        },
        Labels = 
        {
            { "test", "alloydb-cluster-full" },
        },
    });

    var project = Gcp.Organizations.GetProject.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
			Name: pulumi.String("alloydb-cluster-full"),
		})
		if err != nil {
			return err
		}
		_, err = alloydb.NewCluster(ctx, "full", &alloydb.ClusterArgs{
			ClusterId: pulumi.String("alloydb-cluster-full"),
			Location:  pulumi.String("us-central1"),
			NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
				Network: _default.ID(),
			},
			DatabaseVersion: pulumi.String("POSTGRES_15"),
			InitialUser: &alloydb.ClusterInitialUserArgs{
				User:     pulumi.String("alloydb-cluster-full"),
				Password: pulumi.String("alloydb-cluster-full"),
			},
			ContinuousBackupConfig: &alloydb.ClusterContinuousBackupConfigArgs{
				Enabled:            pulumi.Bool(true),
				RecoveryWindowDays: pulumi.Int(14),
			},
			AutomatedBackupPolicy: &alloydb.ClusterAutomatedBackupPolicyArgs{
				Location:     pulumi.String("us-central1"),
				BackupWindow: pulumi.String("1800s"),
				Enabled:      pulumi.Bool(true),
				WeeklySchedule: &alloydb.ClusterAutomatedBackupPolicyWeeklyScheduleArgs{
					DaysOfWeeks: pulumi.StringArray{
						pulumi.String("MONDAY"),
					},
					StartTimes: alloydb.ClusterAutomatedBackupPolicyWeeklyScheduleStartTimeArray{
						&alloydb.ClusterAutomatedBackupPolicyWeeklyScheduleStartTimeArgs{
							Hours:   pulumi.Int(23),
							Minutes: pulumi.Int(0),
							Seconds: pulumi.Int(0),
							Nanos:   pulumi.Int(0),
						},
					},
				},
				QuantityBasedRetention: &alloydb.ClusterAutomatedBackupPolicyQuantityBasedRetentionArgs{
					Count: pulumi.Int(1),
				},
				Labels: pulumi.StringMap{
					"test": pulumi.String("alloydb-cluster-full"),
				},
			},
			Labels: pulumi.StringMap{
				"test": pulumi.String("alloydb-cluster-full"),
			},
		})
		if err != nil {
			return err
		}
		_, err = organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.alloydb.Cluster;
import com.pulumi.gcp.alloydb.ClusterArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterNetworkConfigArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterInitialUserArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterContinuousBackupConfigArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterAutomatedBackupPolicyArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterAutomatedBackupPolicyWeeklyScheduleArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterAutomatedBackupPolicyQuantityBasedRetentionArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Network("default", NetworkArgs.builder()
            .name("alloydb-cluster-full")
            .build());

        var full = new Cluster("full", ClusterArgs.builder()
            .clusterId("alloydb-cluster-full")
            .location("us-central1")
            .networkConfig(ClusterNetworkConfigArgs.builder()
                .network(default_.id())
                .build())
            .databaseVersion("POSTGRES_15")
            .initialUser(ClusterInitialUserArgs.builder()
                .user("alloydb-cluster-full")
                .password("alloydb-cluster-full")
                .build())
            .continuousBackupConfig(ClusterContinuousBackupConfigArgs.builder()
                .enabled(true)
                .recoveryWindowDays(14)
                .build())
            .automatedBackupPolicy(ClusterAutomatedBackupPolicyArgs.builder()
                .location("us-central1")
                .backupWindow("1800s")
                .enabled(true)
                .weeklySchedule(ClusterAutomatedBackupPolicyWeeklyScheduleArgs.builder()
                    .daysOfWeeks("MONDAY")
                    .startTimes(ClusterAutomatedBackupPolicyWeeklyScheduleStartTimeArgs.builder()
                        .hours(23)
                        .minutes(0)
                        .seconds(0)
                        .nanos(0)
                        .build())
                    .build())
                .quantityBasedRetention(ClusterAutomatedBackupPolicyQuantityBasedRetentionArgs.builder()
                    .count(1)
                    .build())
                .labels(Map.of("test", "alloydb-cluster-full"))
                .build())
            .labels(Map.of("test", "alloydb-cluster-full"))
            .build());

        final var project = OrganizationsFunctions.getProject();

    }
}
```
```yaml
resources:
  full:
    type: gcp:alloydb:Cluster
    properties:
      clusterId: alloydb-cluster-full
      location: us-central1
      networkConfig:
        network: ${default.id}
      databaseVersion: POSTGRES_15
      initialUser:
        user: alloydb-cluster-full
        password: alloydb-cluster-full
      continuousBackupConfig:
        enabled: true
        recoveryWindowDays: 14
      automatedBackupPolicy:
        location: us-central1
        backupWindow: 1800s
        enabled: true
        weeklySchedule:
          daysOfWeeks:
            - MONDAY
          startTimes:
            - hours: 23
              minutes: 0
              seconds: 0
              nanos: 0
        quantityBasedRetention:
          count: 1
        labels:
          test: alloydb-cluster-full
      labels:
        test: alloydb-cluster-full
  default:
    type: gcp:compute:Network
    properties:
      name: alloydb-cluster-full
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Alloydb Cluster Restore


<!--Start PulumiCodeChooser -->
```yaml
resources:
  source:
    type: gcp:alloydb:Cluster
    properties:
      clusterId: alloydb-source-cluster
      location: us-central1
      network: ${default.id}
      initialUser:
        password: alloydb-source-cluster
  sourceInstance:
    type: gcp:alloydb:Instance
    name: source
    properties:
      cluster: ${source.name}
      instanceId: alloydb-instance
      instanceType: PRIMARY
      machineConfig:
        cpuCount: 2
    options:
      dependsOn:
        - ${vpcConnection}
  sourceBackup:
    type: gcp:alloydb:Backup
    name: source
    properties:
      backupId: alloydb-backup
      location: us-central1
      clusterName: ${source.name}
    options:
      dependsOn:
        - ${sourceInstance}
  restoredFromBackup:
    type: gcp:alloydb:Cluster
    name: restored_from_backup
    properties:
      clusterId: alloydb-backup-restored
      location: us-central1
      networkConfig:
        network: ${default.id}
      restoreBackupSource:
        backupName: ${sourceBackup.name}
  restoredViaPitr:
    type: gcp:alloydb:Cluster
    name: restored_via_pitr
    properties:
      clusterId: alloydb-pitr-restored
      location: us-central1
      networkConfig:
        network: ${default.id}
      restoreContinuousBackupSource:
        cluster: ${source.name}
        pointInTime: 2023-08-03T19:19:00.094Z
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: alloydb-source-cluster
      addressType: INTERNAL
      purpose: VPC_PEERING
      prefixLength: 16
      network: ${default.id}
  vpcConnection:
    type: gcp:servicenetworking:Connection
    name: vpc_connection
    properties:
      network: ${default.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${privateIpAlloc.name}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
  default:
    fn::invoke:
      function: gcp:compute:getNetwork
      arguments:
        name: alloydb-network
```
<!--End PulumiCodeChooser -->
### Alloydb Secondary Cluster Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.compute.Network("default", {name: "alloydb-secondary-cluster"});
const primary = new gcp.alloydb.Cluster("primary", {
    clusterId: "alloydb-primary-cluster",
    location: "us-central1",
    networkConfig: {
        network: _default.id,
    },
});
const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
    name: "alloydb-secondary-cluster",
    addressType: "INTERNAL",
    purpose: "VPC_PEERING",
    prefixLength: 16,
    network: _default.id,
});
const vpcConnection = new gcp.servicenetworking.Connection("vpc_connection", {
    network: _default.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [privateIpAlloc.name],
});
const primaryInstance = new gcp.alloydb.Instance("primary", {
    cluster: primary.name,
    instanceId: "alloydb-primary-instance",
    instanceType: "PRIMARY",
    machineConfig: {
        cpuCount: 2,
    },
}, {
    dependsOn: [vpcConnection],
});
const secondary = new gcp.alloydb.Cluster("secondary", {
    clusterId: "alloydb-secondary-cluster",
    location: "us-east1",
    networkConfig: {
        network: _default.id,
    },
    clusterType: "SECONDARY",
    continuousBackupConfig: {
        enabled: false,
    },
    secondaryConfig: {
        primaryClusterName: primary.name,
    },
}, {
    dependsOn: [primaryInstance],
});
const project = gcp.organizations.getProject({});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.compute.Network("default", name="alloydb-secondary-cluster")
primary = gcp.alloydb.Cluster("primary",
    cluster_id="alloydb-primary-cluster",
    location="us-central1",
    network_config={
        "network": default.id,
    })
private_ip_alloc = gcp.compute.GlobalAddress("private_ip_alloc",
    name="alloydb-secondary-cluster",
    address_type="INTERNAL",
    purpose="VPC_PEERING",
    prefix_length=16,
    network=default.id)
vpc_connection = gcp.servicenetworking.Connection("vpc_connection",
    network=default.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[private_ip_alloc.name])
primary_instance = gcp.alloydb.Instance("primary",
    cluster=primary.name,
    instance_id="alloydb-primary-instance",
    instance_type="PRIMARY",
    machine_config={
        "cpu_count": 2,
    },
    opts = pulumi.ResourceOptions(depends_on=[vpc_connection]))
secondary = gcp.alloydb.Cluster("secondary",
    cluster_id="alloydb-secondary-cluster",
    location="us-east1",
    network_config={
        "network": default.id,
    },
    cluster_type="SECONDARY",
    continuous_backup_config={
        "enabled": False,
    },
    secondary_config={
        "primary_cluster_name": primary.name,
    },
    opts = pulumi.ResourceOptions(depends_on=[primary_instance]))
project = gcp.organizations.get_project()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.Compute.Network("default", new()
    {
        Name = "alloydb-secondary-cluster",
    });

    var primary = new Gcp.Alloydb.Cluster("primary", new()
    {
        ClusterId = "alloydb-primary-cluster",
        Location = "us-central1",
        NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
        {
            Network = @default.Id,
        },
    });

    var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    {
        Name = "alloydb-secondary-cluster",
        AddressType = "INTERNAL",
        Purpose = "VPC_PEERING",
        PrefixLength = 16,
        Network = @default.Id,
    });

    var vpcConnection = new Gcp.ServiceNetworking.Connection("vpc_connection", new()
    {
        Network = @default.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            privateIpAlloc.Name,
        },
    });

    var primaryInstance = new Gcp.Alloydb.Instance("primary", new()
    {
        Cluster = primary.Name,
        InstanceId = "alloydb-primary-instance",
        InstanceType = "PRIMARY",
        MachineConfig = new Gcp.Alloydb.Inputs.InstanceMachineConfigArgs
        {
            CpuCount = 2,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vpcConnection,
        },
    });

    var secondary = new Gcp.Alloydb.Cluster("secondary", new()
    {
        ClusterId = "alloydb-secondary-cluster",
        Location = "us-east1",
        NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
        {
            Network = @default.Id,
        },
        ClusterType = "SECONDARY",
        ContinuousBackupConfig = new Gcp.Alloydb.Inputs.ClusterContinuousBackupConfigArgs
        {
            Enabled = false,
        },
        SecondaryConfig = new Gcp.Alloydb.Inputs.ClusterSecondaryConfigArgs
        {
            PrimaryClusterName = primary.Name,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            primaryInstance,
        },
    });

    var project = Gcp.Organizations.GetProject.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
			Name: pulumi.String("alloydb-secondary-cluster"),
		})
		if err != nil {
			return err
		}
		primary, err := alloydb.NewCluster(ctx, "primary", &alloydb.ClusterArgs{
			ClusterId: pulumi.String("alloydb-primary-cluster"),
			Location:  pulumi.String("us-central1"),
			NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
				Network: _default.ID(),
			},
		})
		if err != nil {
			return err
		}
		privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
			Name:         pulumi.String("alloydb-secondary-cluster"),
			AddressType:  pulumi.String("INTERNAL"),
			Purpose:      pulumi.String("VPC_PEERING"),
			PrefixLength: pulumi.Int(16),
			Network:      _default.ID(),
		})
		if err != nil {
			return err
		}
		vpcConnection, err := servicenetworking.NewConnection(ctx, "vpc_connection", &servicenetworking.ConnectionArgs{
			Network: _default.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				privateIpAlloc.Name,
			},
		})
		if err != nil {
			return err
		}
		primaryInstance, err := alloydb.NewInstance(ctx, "primary", &alloydb.InstanceArgs{
			Cluster:      primary.Name,
			InstanceId:   pulumi.String("alloydb-primary-instance"),
			InstanceType: pulumi.String("PRIMARY"),
			MachineConfig: &alloydb.InstanceMachineConfigArgs{
				CpuCount: pulumi.Int(2),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			vpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = alloydb.NewCluster(ctx, "secondary", &alloydb.ClusterArgs{
			ClusterId: pulumi.String("alloydb-secondary-cluster"),
			Location:  pulumi.String("us-east1"),
			NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
				Network: _default.ID(),
			},
			ClusterType: pulumi.String("SECONDARY"),
			ContinuousBackupConfig: &alloydb.ClusterContinuousBackupConfigArgs{
				Enabled: pulumi.Bool(false),
			},
			SecondaryConfig: &alloydb.ClusterSecondaryConfigArgs{
				PrimaryClusterName: primary.Name,
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			primaryInstance,
		}))
		if err != nil {
			return err
		}
		_, err = organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.alloydb.Cluster;
import com.pulumi.gcp.alloydb.ClusterArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterNetworkConfigArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.alloydb.Instance;
import com.pulumi.gcp.alloydb.InstanceArgs;
import com.pulumi.gcp.alloydb.inputs.InstanceMachineConfigArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterContinuousBackupConfigArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterSecondaryConfigArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Network("default", NetworkArgs.builder()
            .name("alloydb-secondary-cluster")
            .build());

        var primary = new Cluster("primary", ClusterArgs.builder()
            .clusterId("alloydb-primary-cluster")
            .location("us-central1")
            .networkConfig(ClusterNetworkConfigArgs.builder()
                .network(default_.id())
                .build())
            .build());

        var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
            .name("alloydb-secondary-cluster")
            .addressType("INTERNAL")
            .purpose("VPC_PEERING")
            .prefixLength(16)
            .network(default_.id())
            .build());

        var vpcConnection = new Connection("vpcConnection", ConnectionArgs.builder()
            .network(default_.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(privateIpAlloc.name())
            .build());

        var primaryInstance = new Instance("primaryInstance", InstanceArgs.builder()
            .cluster(primary.name())
            .instanceId("alloydb-primary-instance")
            .instanceType("PRIMARY")
            .machineConfig(InstanceMachineConfigArgs.builder()
                .cpuCount(2)
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(vpcConnection)
                .build());

        var secondary = new Cluster("secondary", ClusterArgs.builder()
            .clusterId("alloydb-secondary-cluster")
            .location("us-east1")
            .networkConfig(ClusterNetworkConfigArgs.builder()
                .network(default_.id())
                .build())
            .clusterType("SECONDARY")
            .continuousBackupConfig(ClusterContinuousBackupConfigArgs.builder()
                .enabled(false)
                .build())
            .secondaryConfig(ClusterSecondaryConfigArgs.builder()
                .primaryClusterName(primary.name())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(primaryInstance)
                .build());

        final var project = OrganizationsFunctions.getProject();

    }
}
```
```yaml
resources:
  primary:
    type: gcp:alloydb:Cluster
    properties:
      clusterId: alloydb-primary-cluster
      location: us-central1
      networkConfig:
        network: ${default.id}
  primaryInstance:
    type: gcp:alloydb:Instance
    name: primary
    properties:
      cluster: ${primary.name}
      instanceId: alloydb-primary-instance
      instanceType: PRIMARY
      machineConfig:
        cpuCount: 2
    options:
      dependsOn:
        - ${vpcConnection}
  secondary:
    type: gcp:alloydb:Cluster
    properties:
      clusterId: alloydb-secondary-cluster
      location: us-east1
      networkConfig:
        network: ${default.id}
      clusterType: SECONDARY
      continuousBackupConfig:
        enabled: false
      secondaryConfig:
        primaryClusterName: ${primary.name}
    options:
      dependsOn:
        - ${primaryInstance}
  default:
    type: gcp:compute:Network
    properties:
      name: alloydb-secondary-cluster
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: alloydb-secondary-cluster
      addressType: INTERNAL
      purpose: VPC_PEERING
      prefixLength: 16
      network: ${default.id}
  vpcConnection:
    type: gcp:servicenetworking:Connection
    name: vpc_connection
    properties:
      network: ${default.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${privateIpAlloc.name}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Cluster can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/clusters/{{cluster_id}}`

* `{{project}}/{{location}}/{{cluster_id}}`

* `{{location}}/{{cluster_id}}`

* `{{cluster_id}}`

When using the `pulumi import` command, Cluster can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:alloydb/cluster:Cluster default projects/{{project}}/locations/{{location}}/clusters/{{cluster_id}}
```

```sh
$ pulumi import gcp:alloydb/cluster:Cluster default {{project}}/{{location}}/{{cluster_id}}
```

```sh
$ pulumi import gcp:alloydb/cluster:Cluster default {{location}}/{{cluster_id}}
```

```sh
$ pulumi import gcp:alloydb/cluster:Cluster default {{cluster_id}}
```

ã
annotationsB2" ËAnnotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field `effective_annotations` for all of the annotations present on the resource.

automatedBackupPolicytBr:p
n
alloydbClusterAutomatedBackupPolicyEgcp:alloydb/ClusterAutomatedBackupPolicy:ClusterAutomatedBackupPolicy{The automated backup policy for this cluster. AutomatedBackupPolicy is disabled by default.
Structure is documented below.
0
	clusterId" The ID of the alloydb cluster.

clusterTypeB" The type of cluster. If not set, defaults to PRIMARY.
Default value is `PRIMARY`.
Possible values are: `PRIMARY`, `SECONDARY`.
ì
continuousBackupConfigwBu:s
q
alloydbClusterContinuousBackupConfigGgcp:alloydb/ClusterContinuousBackupConfig:ClusterContinuousBackupConfigØThe continuous backup config for this cluster.
If no policy is provided then the default policy will be used. The default policy takes one backup a day and retains backups for 14 days.
Structure is documented below.
½
databaseVersionB" £The database engine major version. This is an optional field and it's populated at the Cluster creation time. This field cannot be changed after cluster creation.
Ã
deletionPolicyB" ªPolicy to determine if the cluster should be deleted forcefully.
Deleting a cluster forcefully, deletes the cluster and all its associated instances within the cluster.
Deleting a Secondary cluster with a secondary instance REQUIRES setting deletion_policy = "FORCE" otherwise an error is returned. This is needed as there is no support to delete just the secondary instance, and the only way to delete secondary instance is to delete the associated secondary cluster forcefully which also deletes the secondary instance.
Possible values: DEFAULT, FORCE
T
displayNameB" ?User-settable and human-readable display name for the Cluster.
¦
encryptionConfigeBc:a
_
alloydbClusterEncryptionConfig;gcp:alloydb/ClusterEncryptionConfig:ClusterEncryptionConfigªEncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
Structure is documented below.
M
etagB" ?For Resource freshness validation (https://google.aip.dev/154)
µ
initialUserVBT:R
P
alloydbClusterInitialUser1gcp:alloydb/ClusterInitialUser:ClusterInitialUserNInitial user to setup during cluster creation.
Structure is documented below.

labelsB2" óUser-defined labels for the alloydb cluster.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
N
location" >The location where the alloydb cluster should reside.


- - -
õ
maintenanceUpdatePolicyzBx:v
t
alloydbClusterMaintenanceUpdatePolicyIgcp:alloydb/ClusterMaintenanceUpdatePolicy:ClusterMaintenanceUpdatePolicy^MaintenanceUpdatePolicy defines the policy for system updates.
Structure is documented below.
¹
networkConfig\BZ:X
V
alloydbClusterNetworkConfig5gcp:alloydb/ClusterNetworkConfig:ClusterNetworkConfigJMetadata related to network configuration.
Structure is documented below.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
¿
	pscConfigPBN:L
J
alloydbClusterPscConfig-gcp:alloydb/ClusterPscConfig:ClusterPscConfig`Configuration for Private Service Connect (PSC) for the cluster.
Structure is documented below.

restoreBackupSourcenBl:j
h
alloydbClusterRestoreBackupSourceAgcp:alloydb/ClusterRestoreBackupSource:ClusterRestoreBackupSourceThe source when restoring from a backup. Conflicts with 'restore_continuous_backup_source', both can't be set together.
Structure is documented below.
Ô
restoreContinuousBackupSourceB:

alloydb$ClusterRestoreContinuousBackupSourceUgcp:alloydb/ClusterRestoreContinuousBackupSource:ClusterRestoreContinuousBackupSource The source when restoring via point in time recovery (PITR). Conflicts with 'restore_backup_source', both can't be set together.
Structure is documented below.
 
secondaryConfigbB`:^
\
alloydbClusterSecondaryConfig9gcp:alloydb/ClusterSecondaryConfig:ClusterSecondaryConfig¨Configuration of the secondary cluster for Cross Region Replication. This should be set if and only if the cluster is of type SECONDARY.
Structure is documented below.
e
subscriptionTypeB" KThe subscrition type of cluster.
Possible values are: `TRIAL`, `STANDARD`.
"ã
annotationsB2" ËAnnotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field `effective_annotations` for all of the annotations present on the resource.
"
automatedBackupPolicyr:p
n
alloydbClusterAutomatedBackupPolicyEgcp:alloydb/ClusterAutomatedBackupPolicy:ClusterAutomatedBackupPolicy{The automated backup policy for this cluster. AutomatedBackupPolicy is disabled by default.
Structure is documented below.
"¨
backupSourcesY*W:U
S
alloydbClusterBackupSource3gcp:alloydb/ClusterBackupSource:ClusterBackupSource<Cluster created from backup.
Structure is documented below.
"0
	clusterId" The ID of the alloydb cluster.
"
clusterTypeB" The type of cluster. If not set, defaults to PRIMARY.
Default value is `PRIMARY`.
Possible values are: `PRIMARY`, `SECONDARY`.
"ê
continuousBackupConfigu:s
q
alloydbClusterContinuousBackupConfigGgcp:alloydb/ClusterContinuousBackupConfig:ClusterContinuousBackupConfigØThe continuous backup config for this cluster.
If no policy is provided then the default policy will be used. The default policy takes one backup a day and retains backups for 14 days.
Structure is documented below.
"ù
continuousBackupInfosq*o:m
k
alloydbClusterContinuousBackupInfoCgcp:alloydb/ClusterContinuousBackupInfo:ClusterContinuousBackupInfomContinuousBackupInfo describes the continuous backup properties of a cluster.
Structure is documented below.
"»
databaseVersion" £The database engine major version. This is an optional field and it's populated at the Cluster creation time. This field cannot be changed after cluster creation.
"Ã
deletionPolicyB" ªPolicy to determine if the cluster should be deleted forcefully.
Deleting a cluster forcefully, deletes the cluster and all its associated instances within the cluster.
Deleting a Secondary cluster with a secondary instance REQUIRES setting deletion_policy = "FORCE" otherwise an error is returned. This is needed as there is no support to delete just the secondary instance, and the only way to delete secondary instance is to delete the associated secondary cluster forcefully which also deletes the secondary instance.
Possible values: DEFAULT, FORCE
"T
displayNameB" ?User-settable and human-readable display name for the Cluster.
"
effectiveAnnotations2" "¦
effectiveLabels2" All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"¦
encryptionConfigeBc:a
_
alloydbClusterEncryptionConfig;gcp:alloydb/ClusterEncryptionConfig:ClusterEncryptionConfigªEncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
Structure is documented below.
"ý
encryptionInfos_*]:[
Y
alloydbClusterEncryptionInfo7gcp:alloydb/ClusterEncryptionInfo:ClusterEncryptionInfo(Output)
Output only. The encryption information for the WALs and backups required for ContinuousBackup.
Structure is documented below.
"M
etagB" ?For Resource freshness validation (https://google.aip.dev/154)
"µ
initialUserVBT:R
P
alloydbClusterInitialUser1gcp:alloydb/ClusterInitialUser:ClusterInitialUserNInitial user to setup during cluster creation.
Structure is documented below.
"
labelsB2" óUser-defined labels for the alloydb cluster.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"N
location" >The location where the alloydb cluster should reside.


- - -
"õ
maintenanceUpdatePolicyzBx:v
t
alloydbClusterMaintenanceUpdatePolicyIgcp:alloydb/ClusterMaintenanceUpdatePolicy:ClusterMaintenanceUpdatePolicy^MaintenanceUpdatePolicy defines the policy for system updates.
Structure is documented below.
"º
migrationSourcesb*`:^
\
alloydbClusterMigrationSource9gcp:alloydb/ClusterMigrationSource:ClusterMigrationSourceBCluster created via DMS migration.
Structure is documented below.
".
name" "The name of the cluster resource.
"·
networkConfigZ:X
V
alloydbClusterNetworkConfig5gcp:alloydb/ClusterNetworkConfig:ClusterNetworkConfigJMetadata related to network configuration.
Structure is documented below.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"¿
	pscConfigPBN:L
J
alloydbClusterPscConfig-gcp:alloydb/ClusterPscConfig:ClusterPscConfig`Configuration for Private Service Connect (PSC) for the cluster.
Structure is documented below.
"
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"Ó
reconciling
 ¿Output only. Reconciling (https://google.aip.dev/128#reconciliation).
Set to true if the current state of Cluster does not match the user's intended state, and the service is actively updating the resource to reconcile them.
This can happen due to user-triggered updates or system actions like failover or maintenance.
"
restoreBackupSourcenBl:j
h
alloydbClusterRestoreBackupSourceAgcp:alloydb/ClusterRestoreBackupSource:ClusterRestoreBackupSourceThe source when restoring from a backup. Conflicts with 'restore_continuous_backup_source', both can't be set together.
Structure is documented below.
"Ô
restoreContinuousBackupSourceB:

alloydb$ClusterRestoreContinuousBackupSourceUgcp:alloydb/ClusterRestoreContinuousBackupSource:ClusterRestoreContinuousBackupSource The source when restoring via point in time recovery (PITR). Conflicts with 'restore_backup_source', both can't be set together.
Structure is documented below.
" 
secondaryConfigbB`:^
\
alloydbClusterSecondaryConfig9gcp:alloydb/ClusterSecondaryConfig:ClusterSecondaryConfig¨Configuration of the secondary cluster for Cross Region Replication. This should be set if and only if the cluster is of type SECONDARY.
Structure is documented below.
"D
state" 7Output only. The current serving state of the cluster.
"c
subscriptionType" KThe subscrition type of cluster.
Possible values are: `TRIAL`, `STANDARD`.
"Ð
trialMetadatas\*Z:X
V
alloydbClusterTrialMetadata5gcp:alloydb/ClusterTrialMetadata:ClusterTrialMetadata`Contains information and all metadata related to TRIAL clusters.
Structure is documented below.
"5
uid" *The system-generated UID of the resource.
*¯
2
alloydbInstancegcp:alloydb/instance:InstanceÑ## Example Usage

### Alloydb Instance Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const defaultNetwork = new gcp.compute.Network("default", {name: "alloydb-network"});
const defaultCluster = new gcp.alloydb.Cluster("default", {
    clusterId: "alloydb-cluster",
    location: "us-central1",
    networkConfig: {
        network: defaultNetwork.id,
    },
    initialUser: {
        password: "alloydb-cluster",
    },
});
const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
    name: "alloydb-cluster",
    addressType: "INTERNAL",
    purpose: "VPC_PEERING",
    prefixLength: 16,
    network: defaultNetwork.id,
});
const vpcConnection = new gcp.servicenetworking.Connection("vpc_connection", {
    network: defaultNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [privateIpAlloc.name],
});
const _default = new gcp.alloydb.Instance("default", {
    cluster: defaultCluster.name,
    instanceId: "alloydb-instance",
    instanceType: "PRIMARY",
    machineConfig: {
        cpuCount: 2,
    },
}, {
    dependsOn: [vpcConnection],
});
const project = gcp.organizations.getProject({});
```
```python
import pulumi
import pulumi_gcp as gcp

default_network = gcp.compute.Network("default", name="alloydb-network")
default_cluster = gcp.alloydb.Cluster("default",
    cluster_id="alloydb-cluster",
    location="us-central1",
    network_config={
        "network": default_network.id,
    },
    initial_user={
        "password": "alloydb-cluster",
    })
private_ip_alloc = gcp.compute.GlobalAddress("private_ip_alloc",
    name="alloydb-cluster",
    address_type="INTERNAL",
    purpose="VPC_PEERING",
    prefix_length=16,
    network=default_network.id)
vpc_connection = gcp.servicenetworking.Connection("vpc_connection",
    network=default_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[private_ip_alloc.name])
default = gcp.alloydb.Instance("default",
    cluster=default_cluster.name,
    instance_id="alloydb-instance",
    instance_type="PRIMARY",
    machine_config={
        "cpu_count": 2,
    },
    opts = pulumi.ResourceOptions(depends_on=[vpc_connection]))
project = gcp.organizations.get_project()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var defaultNetwork = new Gcp.Compute.Network("default", new()
    {
        Name = "alloydb-network",
    });

    var defaultCluster = new Gcp.Alloydb.Cluster("default", new()
    {
        ClusterId = "alloydb-cluster",
        Location = "us-central1",
        NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
        {
            Network = defaultNetwork.Id,
        },
        InitialUser = new Gcp.Alloydb.Inputs.ClusterInitialUserArgs
        {
            Password = "alloydb-cluster",
        },
    });

    var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    {
        Name = "alloydb-cluster",
        AddressType = "INTERNAL",
        Purpose = "VPC_PEERING",
        PrefixLength = 16,
        Network = defaultNetwork.Id,
    });

    var vpcConnection = new Gcp.ServiceNetworking.Connection("vpc_connection", new()
    {
        Network = defaultNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            privateIpAlloc.Name,
        },
    });

    var @default = new Gcp.Alloydb.Instance("default", new()
    {
        Cluster = defaultCluster.Name,
        InstanceId = "alloydb-instance",
        InstanceType = "PRIMARY",
        MachineConfig = new Gcp.Alloydb.Inputs.InstanceMachineConfigArgs
        {
            CpuCount = 2,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vpcConnection,
        },
    });

    var project = Gcp.Organizations.GetProject.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
			Name: pulumi.String("alloydb-network"),
		})
		if err != nil {
			return err
		}
		defaultCluster, err := alloydb.NewCluster(ctx, "default", &alloydb.ClusterArgs{
			ClusterId: pulumi.String("alloydb-cluster"),
			Location:  pulumi.String("us-central1"),
			NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
				Network: defaultNetwork.ID(),
			},
			InitialUser: &alloydb.ClusterInitialUserArgs{
				Password: pulumi.String("alloydb-cluster"),
			},
		})
		if err != nil {
			return err
		}
		privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
			Name:         pulumi.String("alloydb-cluster"),
			AddressType:  pulumi.String("INTERNAL"),
			Purpose:      pulumi.String("VPC_PEERING"),
			PrefixLength: pulumi.Int(16),
			Network:      defaultNetwork.ID(),
		})
		if err != nil {
			return err
		}
		vpcConnection, err := servicenetworking.NewConnection(ctx, "vpc_connection", &servicenetworking.ConnectionArgs{
			Network: defaultNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				privateIpAlloc.Name,
			},
		})
		if err != nil {
			return err
		}
		_, err = alloydb.NewInstance(ctx, "default", &alloydb.InstanceArgs{
			Cluster:      defaultCluster.Name,
			InstanceId:   pulumi.String("alloydb-instance"),
			InstanceType: pulumi.String("PRIMARY"),
			MachineConfig: &alloydb.InstanceMachineConfigArgs{
				CpuCount: pulumi.Int(2),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			vpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.alloydb.Cluster;
import com.pulumi.gcp.alloydb.ClusterArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterNetworkConfigArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterInitialUserArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.alloydb.Instance;
import com.pulumi.gcp.alloydb.InstanceArgs;
import com.pulumi.gcp.alloydb.inputs.InstanceMachineConfigArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()
            .name("alloydb-network")
            .build());

        var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
            .clusterId("alloydb-cluster")
            .location("us-central1")
            .networkConfig(ClusterNetworkConfigArgs.builder()
                .network(defaultNetwork.id())
                .build())
            .initialUser(ClusterInitialUserArgs.builder()
                .password("alloydb-cluster")
                .build())
            .build());

        var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
            .name("alloydb-cluster")
            .addressType("INTERNAL")
            .purpose("VPC_PEERING")
            .prefixLength(16)
            .network(defaultNetwork.id())
            .build());

        var vpcConnection = new Connection("vpcConnection", ConnectionArgs.builder()
            .network(defaultNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(privateIpAlloc.name())
            .build());

        var default_ = new Instance("default", InstanceArgs.builder()
            .cluster(defaultCluster.name())
            .instanceId("alloydb-instance")
            .instanceType("PRIMARY")
            .machineConfig(InstanceMachineConfigArgs.builder()
                .cpuCount(2)
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(vpcConnection)
                .build());

        final var project = OrganizationsFunctions.getProject();

    }
}
```
```yaml
resources:
  default:
    type: gcp:alloydb:Instance
    properties:
      cluster: ${defaultCluster.name}
      instanceId: alloydb-instance
      instanceType: PRIMARY
      machineConfig:
        cpuCount: 2
    options:
      dependsOn:
        - ${vpcConnection}
  defaultCluster:
    type: gcp:alloydb:Cluster
    name: default
    properties:
      clusterId: alloydb-cluster
      location: us-central1
      networkConfig:
        network: ${defaultNetwork.id}
      initialUser:
        password: alloydb-cluster
  defaultNetwork:
    type: gcp:compute:Network
    name: default
    properties:
      name: alloydb-network
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: alloydb-cluster
      addressType: INTERNAL
      purpose: VPC_PEERING
      prefixLength: 16
      network: ${defaultNetwork.id}
  vpcConnection:
    type: gcp:servicenetworking:Connection
    name: vpc_connection
    properties:
      network: ${defaultNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${privateIpAlloc.name}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Alloydb Secondary Instance Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.compute.Network("default", {name: "alloydb-secondary-network"});
const primary = new gcp.alloydb.Cluster("primary", {
    clusterId: "alloydb-primary-cluster",
    location: "us-central1",
    networkConfig: {
        network: _default.id,
    },
});
const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
    name: "alloydb-secondary-instance",
    addressType: "INTERNAL",
    purpose: "VPC_PEERING",
    prefixLength: 16,
    network: _default.id,
});
const vpcConnection = new gcp.servicenetworking.Connection("vpc_connection", {
    network: _default.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [privateIpAlloc.name],
});
const primaryInstance = new gcp.alloydb.Instance("primary", {
    cluster: primary.name,
    instanceId: "alloydb-primary-instance",
    instanceType: "PRIMARY",
    machineConfig: {
        cpuCount: 2,
    },
}, {
    dependsOn: [vpcConnection],
});
const secondary = new gcp.alloydb.Cluster("secondary", {
    clusterId: "alloydb-secondary-cluster",
    location: "us-east1",
    networkConfig: {
        network: defaultGoogleComputeNetwork.id,
    },
    clusterType: "SECONDARY",
    continuousBackupConfig: {
        enabled: false,
    },
    secondaryConfig: {
        primaryClusterName: primary.name,
    },
    deletionPolicy: "FORCE",
}, {
    dependsOn: [primaryInstance],
});
const secondaryInstance = new gcp.alloydb.Instance("secondary", {
    cluster: secondary.name,
    instanceId: "alloydb-secondary-instance",
    instanceType: secondary.clusterType,
    machineConfig: {
        cpuCount: 2,
    },
}, {
    dependsOn: [vpcConnection],
});
const project = gcp.organizations.getProject({});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.compute.Network("default", name="alloydb-secondary-network")
primary = gcp.alloydb.Cluster("primary",
    cluster_id="alloydb-primary-cluster",
    location="us-central1",
    network_config={
        "network": default.id,
    })
private_ip_alloc = gcp.compute.GlobalAddress("private_ip_alloc",
    name="alloydb-secondary-instance",
    address_type="INTERNAL",
    purpose="VPC_PEERING",
    prefix_length=16,
    network=default.id)
vpc_connection = gcp.servicenetworking.Connection("vpc_connection",
    network=default.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[private_ip_alloc.name])
primary_instance = gcp.alloydb.Instance("primary",
    cluster=primary.name,
    instance_id="alloydb-primary-instance",
    instance_type="PRIMARY",
    machine_config={
        "cpu_count": 2,
    },
    opts = pulumi.ResourceOptions(depends_on=[vpc_connection]))
secondary = gcp.alloydb.Cluster("secondary",
    cluster_id="alloydb-secondary-cluster",
    location="us-east1",
    network_config={
        "network": default_google_compute_network["id"],
    },
    cluster_type="SECONDARY",
    continuous_backup_config={
        "enabled": False,
    },
    secondary_config={
        "primary_cluster_name": primary.name,
    },
    deletion_policy="FORCE",
    opts = pulumi.ResourceOptions(depends_on=[primary_instance]))
secondary_instance = gcp.alloydb.Instance("secondary",
    cluster=secondary.name,
    instance_id="alloydb-secondary-instance",
    instance_type=secondary.cluster_type,
    machine_config={
        "cpu_count": 2,
    },
    opts = pulumi.ResourceOptions(depends_on=[vpc_connection]))
project = gcp.organizations.get_project()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.Compute.Network("default", new()
    {
        Name = "alloydb-secondary-network",
    });

    var primary = new Gcp.Alloydb.Cluster("primary", new()
    {
        ClusterId = "alloydb-primary-cluster",
        Location = "us-central1",
        NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
        {
            Network = @default.Id,
        },
    });

    var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    {
        Name = "alloydb-secondary-instance",
        AddressType = "INTERNAL",
        Purpose = "VPC_PEERING",
        PrefixLength = 16,
        Network = @default.Id,
    });

    var vpcConnection = new Gcp.ServiceNetworking.Connection("vpc_connection", new()
    {
        Network = @default.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            privateIpAlloc.Name,
        },
    });

    var primaryInstance = new Gcp.Alloydb.Instance("primary", new()
    {
        Cluster = primary.Name,
        InstanceId = "alloydb-primary-instance",
        InstanceType = "PRIMARY",
        MachineConfig = new Gcp.Alloydb.Inputs.InstanceMachineConfigArgs
        {
            CpuCount = 2,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vpcConnection,
        },
    });

    var secondary = new Gcp.Alloydb.Cluster("secondary", new()
    {
        ClusterId = "alloydb-secondary-cluster",
        Location = "us-east1",
        NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
        {
            Network = defaultGoogleComputeNetwork.Id,
        },
        ClusterType = "SECONDARY",
        ContinuousBackupConfig = new Gcp.Alloydb.Inputs.ClusterContinuousBackupConfigArgs
        {
            Enabled = false,
        },
        SecondaryConfig = new Gcp.Alloydb.Inputs.ClusterSecondaryConfigArgs
        {
            PrimaryClusterName = primary.Name,
        },
        DeletionPolicy = "FORCE",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            primaryInstance,
        },
    });

    var secondaryInstance = new Gcp.Alloydb.Instance("secondary", new()
    {
        Cluster = secondary.Name,
        InstanceId = "alloydb-secondary-instance",
        InstanceType = secondary.ClusterType,
        MachineConfig = new Gcp.Alloydb.Inputs.InstanceMachineConfigArgs
        {
            CpuCount = 2,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vpcConnection,
        },
    });

    var project = Gcp.Organizations.GetProject.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
			Name: pulumi.String("alloydb-secondary-network"),
		})
		if err != nil {
			return err
		}
		primary, err := alloydb.NewCluster(ctx, "primary", &alloydb.ClusterArgs{
			ClusterId: pulumi.String("alloydb-primary-cluster"),
			Location:  pulumi.String("us-central1"),
			NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
				Network: _default.ID(),
			},
		})
		if err != nil {
			return err
		}
		privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
			Name:         pulumi.String("alloydb-secondary-instance"),
			AddressType:  pulumi.String("INTERNAL"),
			Purpose:      pulumi.String("VPC_PEERING"),
			PrefixLength: pulumi.Int(16),
			Network:      _default.ID(),
		})
		if err != nil {
			return err
		}
		vpcConnection, err := servicenetworking.NewConnection(ctx, "vpc_connection", &servicenetworking.ConnectionArgs{
			Network: _default.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				privateIpAlloc.Name,
			},
		})
		if err != nil {
			return err
		}
		primaryInstance, err := alloydb.NewInstance(ctx, "primary", &alloydb.InstanceArgs{
			Cluster:      primary.Name,
			InstanceId:   pulumi.String("alloydb-primary-instance"),
			InstanceType: pulumi.String("PRIMARY"),
			MachineConfig: &alloydb.InstanceMachineConfigArgs{
				CpuCount: pulumi.Int(2),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			vpcConnection,
		}))
		if err != nil {
			return err
		}
		secondary, err := alloydb.NewCluster(ctx, "secondary", &alloydb.ClusterArgs{
			ClusterId: pulumi.String("alloydb-secondary-cluster"),
			Location:  pulumi.String("us-east1"),
			NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
				Network: pulumi.Any(defaultGoogleComputeNetwork.Id),
			},
			ClusterType: pulumi.String("SECONDARY"),
			ContinuousBackupConfig: &alloydb.ClusterContinuousBackupConfigArgs{
				Enabled: pulumi.Bool(false),
			},
			SecondaryConfig: &alloydb.ClusterSecondaryConfigArgs{
				PrimaryClusterName: primary.Name,
			},
			DeletionPolicy: pulumi.String("FORCE"),
		}, pulumi.DependsOn([]pulumi.Resource{
			primaryInstance,
		}))
		if err != nil {
			return err
		}
		_, err = alloydb.NewInstance(ctx, "secondary", &alloydb.InstanceArgs{
			Cluster:      secondary.Name,
			InstanceId:   pulumi.String("alloydb-secondary-instance"),
			InstanceType: secondary.ClusterType,
			MachineConfig: &alloydb.InstanceMachineConfigArgs{
				CpuCount: pulumi.Int(2),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			vpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.alloydb.Cluster;
import com.pulumi.gcp.alloydb.ClusterArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterNetworkConfigArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.alloydb.Instance;
import com.pulumi.gcp.alloydb.InstanceArgs;
import com.pulumi.gcp.alloydb.inputs.InstanceMachineConfigArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterContinuousBackupConfigArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterSecondaryConfigArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Network("default", NetworkArgs.builder()
            .name("alloydb-secondary-network")
            .build());

        var primary = new Cluster("primary", ClusterArgs.builder()
            .clusterId("alloydb-primary-cluster")
            .location("us-central1")
            .networkConfig(ClusterNetworkConfigArgs.builder()
                .network(default_.id())
                .build())
            .build());

        var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
            .name("alloydb-secondary-instance")
            .addressType("INTERNAL")
            .purpose("VPC_PEERING")
            .prefixLength(16)
            .network(default_.id())
            .build());

        var vpcConnection = new Connection("vpcConnection", ConnectionArgs.builder()
            .network(default_.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(privateIpAlloc.name())
            .build());

        var primaryInstance = new Instance("primaryInstance", InstanceArgs.builder()
            .cluster(primary.name())
            .instanceId("alloydb-primary-instance")
            .instanceType("PRIMARY")
            .machineConfig(InstanceMachineConfigArgs.builder()
                .cpuCount(2)
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(vpcConnection)
                .build());

        var secondary = new Cluster("secondary", ClusterArgs.builder()
            .clusterId("alloydb-secondary-cluster")
            .location("us-east1")
            .networkConfig(ClusterNetworkConfigArgs.builder()
                .network(defaultGoogleComputeNetwork.id())
                .build())
            .clusterType("SECONDARY")
            .continuousBackupConfig(ClusterContinuousBackupConfigArgs.builder()
                .enabled(false)
                .build())
            .secondaryConfig(ClusterSecondaryConfigArgs.builder()
                .primaryClusterName(primary.name())
                .build())
            .deletionPolicy("FORCE")
            .build(), CustomResourceOptions.builder()
                .dependsOn(primaryInstance)
                .build());

        var secondaryInstance = new Instance("secondaryInstance", InstanceArgs.builder()
            .cluster(secondary.name())
            .instanceId("alloydb-secondary-instance")
            .instanceType(secondary.clusterType())
            .machineConfig(InstanceMachineConfigArgs.builder()
                .cpuCount(2)
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(vpcConnection)
                .build());

        final var project = OrganizationsFunctions.getProject();

    }
}
```
```yaml
resources:
  primary:
    type: gcp:alloydb:Cluster
    properties:
      clusterId: alloydb-primary-cluster
      location: us-central1
      networkConfig:
        network: ${default.id}
  primaryInstance:
    type: gcp:alloydb:Instance
    name: primary
    properties:
      cluster: ${primary.name}
      instanceId: alloydb-primary-instance
      instanceType: PRIMARY
      machineConfig:
        cpuCount: 2
    options:
      dependsOn:
        - ${vpcConnection}
  secondary:
    type: gcp:alloydb:Cluster
    properties:
      clusterId: alloydb-secondary-cluster
      location: us-east1
      networkConfig:
        network: ${defaultGoogleComputeNetwork.id}
      clusterType: SECONDARY
      continuousBackupConfig:
        enabled: false
      secondaryConfig:
        primaryClusterName: ${primary.name}
      deletionPolicy: FORCE
    options:
      dependsOn:
        - ${primaryInstance}
  secondaryInstance:
    type: gcp:alloydb:Instance
    name: secondary
    properties:
      cluster: ${secondary.name}
      instanceId: alloydb-secondary-instance
      instanceType: ${secondary.clusterType}
      machineConfig:
        cpuCount: 2
    options:
      dependsOn:
        - ${vpcConnection}
  default:
    type: gcp:compute:Network
    properties:
      name: alloydb-secondary-network
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: alloydb-secondary-instance
      addressType: INTERNAL
      purpose: VPC_PEERING
      prefixLength: 16
      network: ${default.id}
  vpcConnection:
    type: gcp:servicenetworking:Connection
    name: vpc_connection
    properties:
      network: ${default.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${privateIpAlloc.name}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Instance can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/instances/{{instance_id}}`

* `{{project}}/{{location}}/{{cluster}}/{{instance_id}}`

* `{{location}}/{{cluster}}/{{instance_id}}`

When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:alloydb/instance:Instance default projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/instances/{{instance_id}}
```

```sh
$ pulumi import gcp:alloydb/instance:Instance default {{project}}/{{location}}/{{cluster}}/{{instance_id}}
```

```sh
$ pulumi import gcp:alloydb/instance:Instance default {{location}}/{{cluster}}/{{instance_id}}
```

Ö
annotationsB2" ¾Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field `effective_annotations` for all of the annotations present on the resource.
ð
availabilityTypeB" Õ'Availability type of an Instance. Defaults to REGIONAL for both primary and read instances.
Note that primary and read instances can have different availability types.
Only READ_POOL instance supports ZONAL type. Users can't specify the zone for READ_POOL instance.
Zone is automatically chosen from the list of zones in the region specified.
Read pool of size 1 can only have zonal availability. Read pools with node count of 2 or more
can have regional availability (nodes are present in 2 or more zones in a region).'
Possible values are: `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, `REGIONAL`.
à
clientConnectionConfigzBx:v
t
alloydbInstanceClientConnectionConfigIgcp:alloydb/InstanceClientConnectionConfig:InstanceClientConnectionConfigJClient connection specific configurations.
Structure is documented below.

cluster" vIdentifies the alloydb cluster. Must be in the format
'projects/{project}/locations/{location}/clusters/{cluster_id}'
Ï
databaseFlagsB2" µDatabase flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
U
displayNameB" @User-settable and human-readable display name for the Instance.
Ú
gceZoneB" ÈThe Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
:

instanceId" (The ID of the alloydb instance.


- - -

instanceType" 
labelsB2" ôUser-defined labels for the alloydb instance.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
Û
machineConfig_B]:[
Y
alloydbInstanceMachineConfig7gcp:alloydb/InstanceMachineConfig:InstanceMachineConfigiConfigurations for the machines that host the underlying database engine.
Structure is documented below.
·
networkConfig_B]:[
Y
alloydbInstanceNetworkConfig7gcp:alloydb/InstanceNetworkConfig:InstanceNetworkConfigEInstance level network configuration.
Structure is documented below.
Ô
observabilityConfigqBo:m
k
alloydbInstanceObservabilityConfigCgcp:alloydb/InstanceObservabilityConfig:InstanceObservabilityConfigJConfiguration for enhanced query insights.
Structure is documented below.
ã
pscInstanceConfigkBi:g
e
alloydbInstancePscInstanceConfig?gcp:alloydb/InstancePscInstanceConfig:InstancePscInstanceConfigaConfiguration for Private Service Connect (PSC) for the instance.
Structure is documented below.
Ë
queryInsightsConfigqBo:m
k
alloydbInstanceQueryInsightsConfigCgcp:alloydb/InstanceQueryInsightsConfig:InstanceQueryInsightsConfigAConfiguration for query insights.
Structure is documented below.
ù
readPoolConfigbB`:^
\
alloydbInstanceReadPoolConfig9gcp:alloydb/InstanceReadPoolConfig:InstanceReadPoolConfigRead pool specific config. If the instance type is READ_POOL, this configuration must be provided.
Structure is documented below.
"Ö
annotationsB2" ¾Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels.
**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field `effective_annotations` for all of the annotations present on the resource.
"î
availabilityType" Õ'Availability type of an Instance. Defaults to REGIONAL for both primary and read instances.
Note that primary and read instances can have different availability types.
Only READ_POOL instance supports ZONAL type. Users can't specify the zone for READ_POOL instance.
Zone is automatically chosen from the list of zones in the region specified.
Read pool of size 1 can only have zonal availability. Read pools with node count of 2 or more
can have regional availability (nodes are present in 2 or more zones in a region).'
Possible values are: `AVAILABILITY_TYPE_UNSPECIFIED`, `ZONAL`, `REGIONAL`.
"Þ
clientConnectionConfigx:v
t
alloydbInstanceClientConnectionConfigIgcp:alloydb/InstanceClientConnectionConfig:InstanceClientConnectionConfigJClient connection specific configurations.
Structure is documented below.
"
cluster" vIdentifies the alloydb cluster. Must be in the format
'projects/{project}/locations/{location}/clusters/{cluster_id}'
"8

createTime" &Time the Instance was created in UTC.
"Í
databaseFlags2" µDatabase flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary.
"U
displayNameB" @User-settable and human-readable display name for the Instance.
"
effectiveAnnotations2" "¦
effectiveLabels2" All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"Ú
gceZoneB" ÈThe Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
":

instanceId" (The ID of the alloydb instance.


- - -
"
instanceType" "o
	ipAddress" ^The IP address for the Instance. This is the connection endpoint for an end-user application.
"
labelsB2" ôUser-defined labels for the alloydb instance.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"Ù
machineConfig]:[
Y
alloydbInstanceMachineConfig7gcp:alloydb/InstanceMachineConfig:InstanceMachineConfigiConfigurations for the machines that host the underlying database engine.
Structure is documented below.
"/
name" #The name of the instance resource.
"·
networkConfig_B]:[
Y
alloydbInstanceNetworkConfig7gcp:alloydb/InstanceNetworkConfig:InstanceNetworkConfigEInstance level network configuration.
Structure is documented below.
"Ò
observabilityConfigo:m
k
alloydbInstanceObservabilityConfigCgcp:alloydb/InstanceObservabilityConfig:InstanceObservabilityConfigJConfiguration for enhanced query insights.
Structure is documented below.
"Þ
outboundPublicIpAddresses*" ºThe outbound public IP addresses for the instance. This is available ONLY when
networkConfig.enableOutboundPublicIp is set to true. These IP addresses are used
for outbound connections.
"á
pscInstanceConfigi:g
e
alloydbInstancePscInstanceConfig?gcp:alloydb/InstancePscInstanceConfig:InstancePscInstanceConfigaConfiguration for Private Service Connect (PSC) for the instance.
Structure is documented below.
"È
publicIpAddress" °The public IP addresses for the Instance. This is available ONLY when
networkConfig.enablePublicIp is set to true. This is the connection
endpoint for an end-user application.
"
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"É
queryInsightsConfigo:m
k
alloydbInstanceQueryInsightsConfigCgcp:alloydb/InstanceQueryInsightsConfig:InstanceQueryInsightsConfigAConfiguration for query insights.
Structure is documented below.
"ù
readPoolConfigbB`:^
\
alloydbInstanceReadPoolConfig9gcp:alloydb/InstanceReadPoolConfig:InstanceReadPoolConfigRead pool specific config. If the instance type is READ_POOL, this configuration must be provided.
Structure is documented below.
"
reconciling
 úSet to true if the current state of Instance does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
"8
state" +The current state of the alloydb instance.
"5
uid" *The system-generated UID of the resource.
"8

updateTime" &Time the Instance was updated in UTC.
*±Ç
&
alloydbUsergcp:alloydb/user:User¸¿A database user in an AlloyDB cluster.


To get more information about User, see:

* [API documentation](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters.users/create)
* How-to Guides
    * [AlloyDB](https://cloud.google.com/alloydb/docs/)

## Example Usage

### Alloydb User Builtin


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const defaultCluster = new gcp.alloydb.Cluster("default", {
    clusterId: "alloydb-cluster",
    location: "us-central1",
    networkConfig: {
        network: defaultGoogleComputeNetwork.id,
    },
    initialUser: {
        password: "cluster_secret",
    },
});
const defaultNetwork = new gcp.compute.Network("default", {name: "alloydb-network"});
const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
    name: "alloydb-cluster",
    addressType: "INTERNAL",
    purpose: "VPC_PEERING",
    prefixLength: 16,
    network: defaultNetwork.id,
});
const vpcConnection = new gcp.servicenetworking.Connection("vpc_connection", {
    network: defaultNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [privateIpAlloc.name],
});
const _default = new gcp.alloydb.Instance("default", {
    cluster: defaultCluster.name,
    instanceId: "alloydb-instance",
    instanceType: "PRIMARY",
}, {
    dependsOn: [vpcConnection],
});
const project = gcp.organizations.getProject({});
const user1 = new gcp.alloydb.User("user1", {
    cluster: defaultCluster.name,
    userId: "user1",
    userType: "ALLOYDB_BUILT_IN",
    password: "user_secret",
    databaseRoles: ["alloydbsuperuser"],
}, {
    dependsOn: [_default],
});
```
```python
import pulumi
import pulumi_gcp as gcp

default_cluster = gcp.alloydb.Cluster("default",
    cluster_id="alloydb-cluster",
    location="us-central1",
    network_config={
        "network": default_google_compute_network["id"],
    },
    initial_user={
        "password": "cluster_secret",
    })
default_network = gcp.compute.Network("default", name="alloydb-network")
private_ip_alloc = gcp.compute.GlobalAddress("private_ip_alloc",
    name="alloydb-cluster",
    address_type="INTERNAL",
    purpose="VPC_PEERING",
    prefix_length=16,
    network=default_network.id)
vpc_connection = gcp.servicenetworking.Connection("vpc_connection",
    network=default_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[private_ip_alloc.name])
default = gcp.alloydb.Instance("default",
    cluster=default_cluster.name,
    instance_id="alloydb-instance",
    instance_type="PRIMARY",
    opts = pulumi.ResourceOptions(depends_on=[vpc_connection]))
project = gcp.organizations.get_project()
user1 = gcp.alloydb.User("user1",
    cluster=default_cluster.name,
    user_id="user1",
    user_type="ALLOYDB_BUILT_IN",
    password="user_secret",
    database_roles=["alloydbsuperuser"],
    opts = pulumi.ResourceOptions(depends_on=[default]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var defaultCluster = new Gcp.Alloydb.Cluster("default", new()
    {
        ClusterId = "alloydb-cluster",
        Location = "us-central1",
        NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
        {
            Network = defaultGoogleComputeNetwork.Id,
        },
        InitialUser = new Gcp.Alloydb.Inputs.ClusterInitialUserArgs
        {
            Password = "cluster_secret",
        },
    });

    var defaultNetwork = new Gcp.Compute.Network("default", new()
    {
        Name = "alloydb-network",
    });

    var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    {
        Name = "alloydb-cluster",
        AddressType = "INTERNAL",
        Purpose = "VPC_PEERING",
        PrefixLength = 16,
        Network = defaultNetwork.Id,
    });

    var vpcConnection = new Gcp.ServiceNetworking.Connection("vpc_connection", new()
    {
        Network = defaultNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            privateIpAlloc.Name,
        },
    });

    var @default = new Gcp.Alloydb.Instance("default", new()
    {
        Cluster = defaultCluster.Name,
        InstanceId = "alloydb-instance",
        InstanceType = "PRIMARY",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vpcConnection,
        },
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    var user1 = new Gcp.Alloydb.User("user1", new()
    {
        Cluster = defaultCluster.Name,
        UserId = "user1",
        UserType = "ALLOYDB_BUILT_IN",
        Password = "user_secret",
        DatabaseRoles = new[]
        {
            "alloydbsuperuser",
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            @default,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		defaultCluster, err := alloydb.NewCluster(ctx, "default", &alloydb.ClusterArgs{
			ClusterId: pulumi.String("alloydb-cluster"),
			Location:  pulumi.String("us-central1"),
			NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
				Network: pulumi.Any(defaultGoogleComputeNetwork.Id),
			},
			InitialUser: &alloydb.ClusterInitialUserArgs{
				Password: pulumi.String("cluster_secret"),
			},
		})
		if err != nil {
			return err
		}
		defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
			Name: pulumi.String("alloydb-network"),
		})
		if err != nil {
			return err
		}
		privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
			Name:         pulumi.String("alloydb-cluster"),
			AddressType:  pulumi.String("INTERNAL"),
			Purpose:      pulumi.String("VPC_PEERING"),
			PrefixLength: pulumi.Int(16),
			Network:      defaultNetwork.ID(),
		})
		if err != nil {
			return err
		}
		vpcConnection, err := servicenetworking.NewConnection(ctx, "vpc_connection", &servicenetworking.ConnectionArgs{
			Network: defaultNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				privateIpAlloc.Name,
			},
		})
		if err != nil {
			return err
		}
		_, err = alloydb.NewInstance(ctx, "default", &alloydb.InstanceArgs{
			Cluster:      defaultCluster.Name,
			InstanceId:   pulumi.String("alloydb-instance"),
			InstanceType: pulumi.String("PRIMARY"),
		}, pulumi.DependsOn([]pulumi.Resource{
			vpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = alloydb.NewUser(ctx, "user1", &alloydb.UserArgs{
			Cluster:  defaultCluster.Name,
			UserId:   pulumi.String("user1"),
			UserType: pulumi.String("ALLOYDB_BUILT_IN"),
			Password: pulumi.String("user_secret"),
			DatabaseRoles: pulumi.StringArray{
				pulumi.String("alloydbsuperuser"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			_default,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.alloydb.Cluster;
import com.pulumi.gcp.alloydb.ClusterArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterNetworkConfigArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterInitialUserArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.alloydb.Instance;
import com.pulumi.gcp.alloydb.InstanceArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.alloydb.User;
import com.pulumi.gcp.alloydb.UserArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
            .clusterId("alloydb-cluster")
            .location("us-central1")
            .networkConfig(ClusterNetworkConfigArgs.builder()
                .network(defaultGoogleComputeNetwork.id())
                .build())
            .initialUser(ClusterInitialUserArgs.builder()
                .password("cluster_secret")
                .build())
            .build());

        var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()
            .name("alloydb-network")
            .build());

        var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
            .name("alloydb-cluster")
            .addressType("INTERNAL")
            .purpose("VPC_PEERING")
            .prefixLength(16)
            .network(defaultNetwork.id())
            .build());

        var vpcConnection = new Connection("vpcConnection", ConnectionArgs.builder()
            .network(defaultNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(privateIpAlloc.name())
            .build());

        var default_ = new Instance("default", InstanceArgs.builder()
            .cluster(defaultCluster.name())
            .instanceId("alloydb-instance")
            .instanceType("PRIMARY")
            .build(), CustomResourceOptions.builder()
                .dependsOn(vpcConnection)
                .build());

        final var project = OrganizationsFunctions.getProject();

        var user1 = new User("user1", UserArgs.builder()
            .cluster(defaultCluster.name())
            .userId("user1")
            .userType("ALLOYDB_BUILT_IN")
            .password("user_secret")
            .databaseRoles("alloydbsuperuser")
            .build(), CustomResourceOptions.builder()
                .dependsOn(default_)
                .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:alloydb:Instance
    properties:
      cluster: ${defaultCluster.name}
      instanceId: alloydb-instance
      instanceType: PRIMARY
    options:
      dependsOn:
        - ${vpcConnection}
  defaultCluster:
    type: gcp:alloydb:Cluster
    name: default
    properties:
      clusterId: alloydb-cluster
      location: us-central1
      networkConfig:
        network: ${defaultGoogleComputeNetwork.id}
      initialUser:
        password: cluster_secret
  defaultNetwork:
    type: gcp:compute:Network
    name: default
    properties:
      name: alloydb-network
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: alloydb-cluster
      addressType: INTERNAL
      purpose: VPC_PEERING
      prefixLength: 16
      network: ${defaultNetwork.id}
  vpcConnection:
    type: gcp:servicenetworking:Connection
    name: vpc_connection
    properties:
      network: ${defaultNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${privateIpAlloc.name}
  user1:
    type: gcp:alloydb:User
    properties:
      cluster: ${defaultCluster.name}
      userId: user1
      userType: ALLOYDB_BUILT_IN
      password: user_secret
      databaseRoles:
        - alloydbsuperuser
    options:
      dependsOn:
        - ${default}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Alloydb User Iam


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const defaultNetwork = new gcp.compute.Network("default", {name: "alloydb-network"});
const defaultCluster = new gcp.alloydb.Cluster("default", {
    clusterId: "alloydb-cluster",
    location: "us-central1",
    networkConfig: {
        network: defaultNetwork.id,
    },
    initialUser: {
        password: "cluster_secret",
    },
});
const privateIpAlloc = new gcp.compute.GlobalAddress("private_ip_alloc", {
    name: "alloydb-cluster",
    addressType: "INTERNAL",
    purpose: "VPC_PEERING",
    prefixLength: 16,
    network: defaultNetwork.id,
});
const vpcConnection = new gcp.servicenetworking.Connection("vpc_connection", {
    network: defaultNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [privateIpAlloc.name],
});
const _default = new gcp.alloydb.Instance("default", {
    cluster: defaultCluster.name,
    instanceId: "alloydb-instance",
    instanceType: "PRIMARY",
}, {
    dependsOn: [vpcConnection],
});
const project = gcp.organizations.getProject({});
const user2 = new gcp.alloydb.User("user2", {
    cluster: defaultCluster.name,
    userId: "user2@foo.com",
    userType: "ALLOYDB_IAM_USER",
    databaseRoles: ["alloydbiamuser"],
}, {
    dependsOn: [_default],
});
```
```python
import pulumi
import pulumi_gcp as gcp

default_network = gcp.compute.Network("default", name="alloydb-network")
default_cluster = gcp.alloydb.Cluster("default",
    cluster_id="alloydb-cluster",
    location="us-central1",
    network_config={
        "network": default_network.id,
    },
    initial_user={
        "password": "cluster_secret",
    })
private_ip_alloc = gcp.compute.GlobalAddress("private_ip_alloc",
    name="alloydb-cluster",
    address_type="INTERNAL",
    purpose="VPC_PEERING",
    prefix_length=16,
    network=default_network.id)
vpc_connection = gcp.servicenetworking.Connection("vpc_connection",
    network=default_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[private_ip_alloc.name])
default = gcp.alloydb.Instance("default",
    cluster=default_cluster.name,
    instance_id="alloydb-instance",
    instance_type="PRIMARY",
    opts = pulumi.ResourceOptions(depends_on=[vpc_connection]))
project = gcp.organizations.get_project()
user2 = gcp.alloydb.User("user2",
    cluster=default_cluster.name,
    user_id="user2@foo.com",
    user_type="ALLOYDB_IAM_USER",
    database_roles=["alloydbiamuser"],
    opts = pulumi.ResourceOptions(depends_on=[default]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var defaultNetwork = new Gcp.Compute.Network("default", new()
    {
        Name = "alloydb-network",
    });

    var defaultCluster = new Gcp.Alloydb.Cluster("default", new()
    {
        ClusterId = "alloydb-cluster",
        Location = "us-central1",
        NetworkConfig = new Gcp.Alloydb.Inputs.ClusterNetworkConfigArgs
        {
            Network = defaultNetwork.Id,
        },
        InitialUser = new Gcp.Alloydb.Inputs.ClusterInitialUserArgs
        {
            Password = "cluster_secret",
        },
    });

    var privateIpAlloc = new Gcp.Compute.GlobalAddress("private_ip_alloc", new()
    {
        Name = "alloydb-cluster",
        AddressType = "INTERNAL",
        Purpose = "VPC_PEERING",
        PrefixLength = 16,
        Network = defaultNetwork.Id,
    });

    var vpcConnection = new Gcp.ServiceNetworking.Connection("vpc_connection", new()
    {
        Network = defaultNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            privateIpAlloc.Name,
        },
    });

    var @default = new Gcp.Alloydb.Instance("default", new()
    {
        Cluster = defaultCluster.Name,
        InstanceId = "alloydb-instance",
        InstanceType = "PRIMARY",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vpcConnection,
        },
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    var user2 = new Gcp.Alloydb.User("user2", new()
    {
        Cluster = defaultCluster.Name,
        UserId = "user2@foo.com",
        UserType = "ALLOYDB_IAM_USER",
        DatabaseRoles = new[]
        {
            "alloydbiamuser",
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            @default,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		defaultNetwork, err := compute.NewNetwork(ctx, "default", &compute.NetworkArgs{
			Name: pulumi.String("alloydb-network"),
		})
		if err != nil {
			return err
		}
		defaultCluster, err := alloydb.NewCluster(ctx, "default", &alloydb.ClusterArgs{
			ClusterId: pulumi.String("alloydb-cluster"),
			Location:  pulumi.String("us-central1"),
			NetworkConfig: &alloydb.ClusterNetworkConfigArgs{
				Network: defaultNetwork.ID(),
			},
			InitialUser: &alloydb.ClusterInitialUserArgs{
				Password: pulumi.String("cluster_secret"),
			},
		})
		if err != nil {
			return err
		}
		privateIpAlloc, err := compute.NewGlobalAddress(ctx, "private_ip_alloc", &compute.GlobalAddressArgs{
			Name:         pulumi.String("alloydb-cluster"),
			AddressType:  pulumi.String("INTERNAL"),
			Purpose:      pulumi.String("VPC_PEERING"),
			PrefixLength: pulumi.Int(16),
			Network:      defaultNetwork.ID(),
		})
		if err != nil {
			return err
		}
		vpcConnection, err := servicenetworking.NewConnection(ctx, "vpc_connection", &servicenetworking.ConnectionArgs{
			Network: defaultNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				privateIpAlloc.Name,
			},
		})
		if err != nil {
			return err
		}
		_, err = alloydb.NewInstance(ctx, "default", &alloydb.InstanceArgs{
			Cluster:      defaultCluster.Name,
			InstanceId:   pulumi.String("alloydb-instance"),
			InstanceType: pulumi.String("PRIMARY"),
		}, pulumi.DependsOn([]pulumi.Resource{
			vpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = alloydb.NewUser(ctx, "user2", &alloydb.UserArgs{
			Cluster:  defaultCluster.Name,
			UserId:   pulumi.String("user2@foo.com"),
			UserType: pulumi.String("ALLOYDB_IAM_USER"),
			DatabaseRoles: pulumi.StringArray{
				pulumi.String("alloydbiamuser"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			_default,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.alloydb.Cluster;
import com.pulumi.gcp.alloydb.ClusterArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterNetworkConfigArgs;
import com.pulumi.gcp.alloydb.inputs.ClusterInitialUserArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.alloydb.Instance;
import com.pulumi.gcp.alloydb.InstanceArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.alloydb.User;
import com.pulumi.gcp.alloydb.UserArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()
            .name("alloydb-network")
            .build());

        var defaultCluster = new Cluster("defaultCluster", ClusterArgs.builder()
            .clusterId("alloydb-cluster")
            .location("us-central1")
            .networkConfig(ClusterNetworkConfigArgs.builder()
                .network(defaultNetwork.id())
                .build())
            .initialUser(ClusterInitialUserArgs.builder()
                .password("cluster_secret")
                .build())
            .build());

        var privateIpAlloc = new GlobalAddress("privateIpAlloc", GlobalAddressArgs.builder()
            .name("alloydb-cluster")
            .addressType("INTERNAL")
            .purpose("VPC_PEERING")
            .prefixLength(16)
            .network(defaultNetwork.id())
            .build());

        var vpcConnection = new Connection("vpcConnection", ConnectionArgs.builder()
            .network(defaultNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(privateIpAlloc.name())
            .build());

        var default_ = new Instance("default", InstanceArgs.builder()
            .cluster(defaultCluster.name())
            .instanceId("alloydb-instance")
            .instanceType("PRIMARY")
            .build(), CustomResourceOptions.builder()
                .dependsOn(vpcConnection)
                .build());

        final var project = OrganizationsFunctions.getProject();

        var user2 = new User("user2", UserArgs.builder()
            .cluster(defaultCluster.name())
            .userId("user2@foo.com")
            .userType("ALLOYDB_IAM_USER")
            .databaseRoles("alloydbiamuser")
            .build(), CustomResourceOptions.builder()
                .dependsOn(default_)
                .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:alloydb:Instance
    properties:
      cluster: ${defaultCluster.name}
      instanceId: alloydb-instance
      instanceType: PRIMARY
    options:
      dependsOn:
        - ${vpcConnection}
  defaultCluster:
    type: gcp:alloydb:Cluster
    name: default
    properties:
      clusterId: alloydb-cluster
      location: us-central1
      networkConfig:
        network: ${defaultNetwork.id}
      initialUser:
        password: cluster_secret
  defaultNetwork:
    type: gcp:compute:Network
    name: default
    properties:
      name: alloydb-network
  privateIpAlloc:
    type: gcp:compute:GlobalAddress
    name: private_ip_alloc
    properties:
      name: alloydb-cluster
      addressType: INTERNAL
      purpose: VPC_PEERING
      prefixLength: 16
      network: ${defaultNetwork.id}
  vpcConnection:
    type: gcp:servicenetworking:Connection
    name: vpc_connection
    properties:
      network: ${defaultNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${privateIpAlloc.name}
  user2:
    type: gcp:alloydb:User
    properties:
      cluster: ${defaultCluster.name}
      userId: user2@foo.com
      userType: ALLOYDB_IAM_USER
      databaseRoles:
        - alloydbiamuser
    options:
      dependsOn:
        - ${default}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

User can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/users/{{user_id}}`

* `{{project}}/{{location}}/{{cluster}}/{{user_id}}`

* `{{location}}/{{cluster}}/{{user_id}}`

When using the `pulumi import` command, User can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:alloydb/user:User default projects/{{project}}/locations/{{location}}/clusters/{{cluster}}/users/{{user_id}}
```

```sh
$ pulumi import gcp:alloydb/user:User default {{project}}/{{location}}/{{cluster}}/{{user_id}}
```

```sh
$ pulumi import gcp:alloydb/user:User default {{location}}/{{cluster}}/{{user_id}}
```


cluster" vIdentifies the alloydb cluster. Must be in the format
'projects/{project}/locations/{location}/clusters/{cluster_id}'
H
databaseRolesB*" /List of database roles this database user has.
3
passwordB" !Password for this database user.
2
userId" $The database role name of the user.
l
userType" \The type of this user.
Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.


- - -
"
cluster" vIdentifies the alloydb cluster. Must be in the format
'projects/{project}/locations/{location}/clusters/{cluster_id}'
"H
databaseRolesB*" /List of database roles this database user has.
"y
name" mName of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.
"3
passwordB" !Password for this database user.
"2
userId" $The database role name of the user.
"l
userType" \The type of this user.
Possible values are: `ALLOYDB_BUILT_IN`, `ALLOYDB_IAM_USER`.


- - -
*Á$
)

apigatewayApigcp:apigateway/api:ApiáA consumable API that can be used by multiple Gateways.

To get more information about Api, see:

* [API documentation](https://cloud.google.com/api-gateway/docs/reference/rest/v1beta/projects.locations.apis)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/api-gateway/docs/quickstart)

## Example Usage

### Apigateway Api Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const api = new gcp.apigateway.Api("api", {apiId: "my-api"});
```
```python
import pulumi
import pulumi_gcp as gcp

api = gcp.apigateway.Api("api", api_id="my-api")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var api = new Gcp.ApiGateway.Api("api", new()
    {
        ApiId = "my-api",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApi(ctx, "api", &apigateway.ApiArgs{
			ApiId: pulumi.String("my-api"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.Api;
import com.pulumi.gcp.apigateway.ApiArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var api = new Api("api", ApiArgs.builder()
            .apiId("my-api")
            .build());

    }
}
```
```yaml
resources:
  api:
    type: gcp:apigateway:Api
    properties:
      apiId: my-api
```
<!--End PulumiCodeChooser -->

## Import

Api can be imported using any of these accepted formats:

* `projects/{{project}}/locations/global/apis/{{api_id}}`

* `{{project}}/{{api_id}}`

* `{{api_id}}`

When using the `pulumi import` command, Api can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigateway/api:Api default projects/{{project}}/locations/global/apis/{{api_id}}
```

```sh
$ pulumi import gcp:apigateway/api:Api default {{project}}/{{api_id}}
```

```sh
$ pulumi import gcp:apigateway/api:Api default {{api_id}}
```

r
apiId" eIdentifier to assign to the API. Must be unique within scope of the parent resource(project)


- - -
6
displayNameB" !A user-visible name for the API.

labelsB2" üResource labels to represent user-provided metadata.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
ò
managedServiceB" ÙImmutable. The name of a Google Managed Service ( https://cloud.google.com/service-infrastructure/docs/glossary#managed).
If not specified, a new Service will automatically be created in the same project as this API.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"r
apiId" eIdentifier to assign to the API. Must be unique within scope of the parent resource(project)


- - -
"=

createTime" +Creation timestamp in RFC3339 text format.
"4
displayName" !A user-visible name for the API.
"¦
effectiveLabels2" All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"
labelsB2" üResource labels to represent user-provided metadata.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"ð
managedService" ÙImmutable. The name of a Google Managed Service ( https://cloud.google.com/service-infrastructure/docs/glossary#managed).
If not specified, a new Service will automatically be created in the same project as this API.
"h
name" \The resource name of the API. Format `projects/{{project}}/locations/global/apis/{{apiId}}`
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
*Ô1
;

apigateway	ApiConfig"gcp:apigateway/apiConfig:ApiConfig¶An API Configuration is an association of an API Controller Config and a Gateway Config

To get more information about ApiConfig, see:

* [API documentation](https://cloud.google.com/api-gateway/docs/reference/rest/v1beta/projects.locations.apis.configs)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/api-gateway/docs/creating-api-config)

## Example Usage

## Import

ApiConfig can be imported using any of these accepted formats:

* `projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config_id}}`

* `{{project}}/{{api}}/{{api_config_id}}`

* `{{api}}/{{api_config_id}}`

When using the `pulumi import` command, ApiConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigateway/apiConfig:ApiConfig default projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config_id}}
```

```sh
$ pulumi import gcp:apigateway/apiConfig:ApiConfig default {{project}}/{{api}}/{{api_config_id}}
```

```sh
$ pulumi import gcp:apigateway/apiConfig:ApiConfig default {{api}}/{{api_config_id}}
```

4
api" )The API to attach the config to.


- - -
v
apiConfigIdB" aIdentifier to assign to the API Config. Must be unique within scope of the parent resource(api).
©
apiConfigIdPrefixB" Creates a unique name beginning with the
specified prefix. If this and api_config_id are unspecified, a random value is chosen for the name.
6
displayNameB" !A user-visible name for the API.
À
gatewayConfighBf:d
b

apigatewayApiConfigGatewayConfig<gcp:apigateway/ApiConfigGatewayConfig:ApiConfigGatewayConfigÄImmutable. Gateway specific configuration.
If not specified, backend authentication will be set to use OIDC authentication using the default compute service account
Structure is documented below.
é
grpcServicesdBb*`:^
\

apigatewayApiConfigGrpcService8gcp:apigateway/ApiConfigGrpcService:ApiConfigGrpcServicesgRPC service definition files. If specified, openapiDocuments must not be included.
Structure is documented below.

labelsB2" üResource labels to represent user-provided metadata.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
Õ
managedServiceConfigsB}*{:y
w

apigatewayApiConfigManagedServiceConfigJgcp:apigateway/ApiConfigManagedServiceConfig:ApiConfigManagedServiceConfigºOptional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents.
If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using "last one wins" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.
Structure is documented below.

openapiDocumentspBn*l:j
h

apigatewayApiConfigOpenapiDocument@gcp:apigateway/ApiConfigOpenapiDocument:ApiConfigOpenapiDocumentOpenAPI specification documents. If specified, grpcServices and managedServiceConfigs must not be included.
Structure is documented below.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"4
api" )The API to attach the config to.


- - -
"t
apiConfigId" aIdentifier to assign to the API Config. Must be unique within scope of the parent resource(api).
"§
apiConfigIdPrefix" Creates a unique name beginning with the
specified prefix. If this and api_config_id are unspecified, a random value is chosen for the name.
"4
displayName" !A user-visible name for the API.
"¦
effectiveLabels2" All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"À
gatewayConfighBf:d
b

apigatewayApiConfigGatewayConfig<gcp:apigateway/ApiConfigGatewayConfig:ApiConfigGatewayConfigÄImmutable. Gateway specific configuration.
If not specified, backend authentication will be set to use OIDC authentication using the default compute service account
Structure is documented below.
"é
grpcServicesdBb*`:^
\

apigatewayApiConfigGrpcService8gcp:apigateway/ApiConfigGrpcService:ApiConfigGrpcServicesgRPC service definition files. If specified, openapiDocuments must not be included.
Structure is documented below.
"
labelsB2" üResource labels to represent user-provided metadata.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"Õ
managedServiceConfigsB}*{:y
w

apigatewayApiConfigManagedServiceConfigJgcp:apigateway/ApiConfigManagedServiceConfig:ApiConfigManagedServiceConfigºOptional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents.
If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using "last one wins" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.
Structure is documented below.
"1
name" %The resource name of the API Config.
"
openapiDocumentspBn*l:j
h

apigatewayApiConfigOpenapiDocument@gcp:apigateway/ApiConfigOpenapiDocument:ApiConfigOpenapiDocumentOpenAPI specification documents. If specified, grpcServices and managedServiceConfigs must not be included.
Structure is documented below.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"
serviceConfigId" pThe ID of the associated Service Config (https://cloud.google.com/service-infrastructure/docs/glossary#config).
*Õ
Y

apigatewayApiConfigIamBinding6gcp:apigateway/apiConfigIamBinding:ApiConfigIamBindingä´Three different resources help you manage your IAM policy for API Gateway ApiConfig. Each of these resources serves a different use case:

* `gcp.apigateway.ApiConfigIamPolicy`: Authoritative. Sets the IAM policy for the apiconfig and replaces any existing policy already attached.
* `gcp.apigateway.ApiConfigIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the apiconfig are preserved.
* `gcp.apigateway.ApiConfigIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the apiconfig are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiConfigIamPolicy`: Retrieves the IAM policy for the apiconfig

> **Note:** `gcp.apigateway.ApiConfigIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiConfigIamBinding` and `gcp.apigateway.ApiConfigIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiConfigIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiConfigIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_config\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiConfigIamPolicy("policy", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiConfigIamPolicy("policy",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiConfigIamPolicy("policy", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiConfigIamPolicy(ctx, "policy", &apigateway.ApiConfigIamPolicyArgs{
			Api:        pulumi.Any(apiCfg.Api),
			ApiConfig:  pulumi.Any(apiCfg.ApiConfigId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicy;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiConfigIamPolicy("policy", ApiConfigIamPolicyArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiConfigIamPolicy
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiConfigIamBinding("binding", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiConfigIamBinding("binding",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiConfigIamBinding("binding", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamBinding(ctx, "binding", &apigateway.ApiConfigIamBindingArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamBinding;
import com.pulumi.gcp.apigateway.ApiConfigIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiConfigIamBinding("binding", ApiConfigIamBindingArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiConfigIamBinding
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiConfigIamMember("member", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiConfigIamMember("member",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiConfigIamMember("member", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamMember(ctx, "member", &apigateway.ApiConfigIamMemberArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Member:    pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamMember;
import com.pulumi.gcp.apigateway.ApiConfigIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiConfigIamMember("member", ApiConfigIamMemberArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiConfigIamMember
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for API Gateway ApiConfig
Three different resources help you manage your IAM policy for API Gateway ApiConfig. Each of these resources serves a different use case:

* `gcp.apigateway.ApiConfigIamPolicy`: Authoritative. Sets the IAM policy for the apiconfig and replaces any existing policy already attached.
* `gcp.apigateway.ApiConfigIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the apiconfig are preserved.
* `gcp.apigateway.ApiConfigIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the apiconfig are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiConfigIamPolicy`: Retrieves the IAM policy for the apiconfig

> **Note:** `gcp.apigateway.ApiConfigIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiConfigIamBinding` and `gcp.apigateway.ApiConfigIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiConfigIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiConfigIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_config\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiConfigIamPolicy("policy", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiConfigIamPolicy("policy",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiConfigIamPolicy("policy", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiConfigIamPolicy(ctx, "policy", &apigateway.ApiConfigIamPolicyArgs{
			Api:        pulumi.Any(apiCfg.Api),
			ApiConfig:  pulumi.Any(apiCfg.ApiConfigId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicy;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiConfigIamPolicy("policy", ApiConfigIamPolicyArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiConfigIamPolicy
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiConfigIamBinding("binding", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiConfigIamBinding("binding",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiConfigIamBinding("binding", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamBinding(ctx, "binding", &apigateway.ApiConfigIamBindingArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamBinding;
import com.pulumi.gcp.apigateway.ApiConfigIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiConfigIamBinding("binding", ApiConfigIamBindingArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiConfigIamBinding
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiConfigIamMember("member", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiConfigIamMember("member",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiConfigIamMember("member", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamMember(ctx, "member", &apigateway.ApiConfigIamMemberArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Member:    pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamMember;
import com.pulumi.gcp.apigateway.ApiConfigIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiConfigIamMember("member", ApiConfigIamMemberArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiConfigIamMember
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}}

* {{project}}/{{api}}/{{api_config}}

* {{api}}/{{api_config}}

* {{api_config}}

Any variables not passed in the import command will be taken from the provider configuration.

API Gateway apiconfig IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigateway/apiConfigIamBinding:ApiConfigIamBinding editor "projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}} roles/apigateway.viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigateway/apiConfigIamBinding:ApiConfigIamBinding editor "projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}} roles/apigateway.viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigateway/apiConfigIamBinding:ApiConfigIamBinding editor projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

g
api" \The API to attach the config to.
Used to find the parent resource to bind the IAM policy to

	apiConfig" 
	conditionzBx:v
t

apigatewayApiConfigIamBindingConditionHgcp:apigateway/ApiConfigIamBindingCondition:ApiConfigIamBindingConditionÖ	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
Û
role" ÎThe role that should be applied. Only one
`gcp.apigateway.ApiConfigIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"g
api" \The API to attach the config to.
Used to find the parent resource to bind the IAM policy to
"
	apiConfig" "
	conditionzBx:v
t

apigatewayApiConfigIamBindingConditionHgcp:apigateway/ApiConfigIamBindingCondition:ApiConfigIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"Ö	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"Û
role" ÎThe role that should be applied. Only one
`gcp.apigateway.ApiConfigIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*Õ
V

apigatewayApiConfigIamMember4gcp:apigateway/apiConfigIamMember:ApiConfigIamMemberÞ´Three different resources help you manage your IAM policy for API Gateway ApiConfig. Each of these resources serves a different use case:

* `gcp.apigateway.ApiConfigIamPolicy`: Authoritative. Sets the IAM policy for the apiconfig and replaces any existing policy already attached.
* `gcp.apigateway.ApiConfigIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the apiconfig are preserved.
* `gcp.apigateway.ApiConfigIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the apiconfig are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiConfigIamPolicy`: Retrieves the IAM policy for the apiconfig

> **Note:** `gcp.apigateway.ApiConfigIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiConfigIamBinding` and `gcp.apigateway.ApiConfigIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiConfigIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiConfigIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_config\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiConfigIamPolicy("policy", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiConfigIamPolicy("policy",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiConfigIamPolicy("policy", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiConfigIamPolicy(ctx, "policy", &apigateway.ApiConfigIamPolicyArgs{
			Api:        pulumi.Any(apiCfg.Api),
			ApiConfig:  pulumi.Any(apiCfg.ApiConfigId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicy;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiConfigIamPolicy("policy", ApiConfigIamPolicyArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiConfigIamPolicy
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiConfigIamBinding("binding", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiConfigIamBinding("binding",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiConfigIamBinding("binding", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamBinding(ctx, "binding", &apigateway.ApiConfigIamBindingArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamBinding;
import com.pulumi.gcp.apigateway.ApiConfigIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiConfigIamBinding("binding", ApiConfigIamBindingArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiConfigIamBinding
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiConfigIamMember("member", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiConfigIamMember("member",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiConfigIamMember("member", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamMember(ctx, "member", &apigateway.ApiConfigIamMemberArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Member:    pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamMember;
import com.pulumi.gcp.apigateway.ApiConfigIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiConfigIamMember("member", ApiConfigIamMemberArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiConfigIamMember
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for API Gateway ApiConfig
Three different resources help you manage your IAM policy for API Gateway ApiConfig. Each of these resources serves a different use case:

* `gcp.apigateway.ApiConfigIamPolicy`: Authoritative. Sets the IAM policy for the apiconfig and replaces any existing policy already attached.
* `gcp.apigateway.ApiConfigIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the apiconfig are preserved.
* `gcp.apigateway.ApiConfigIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the apiconfig are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiConfigIamPolicy`: Retrieves the IAM policy for the apiconfig

> **Note:** `gcp.apigateway.ApiConfigIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiConfigIamBinding` and `gcp.apigateway.ApiConfigIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiConfigIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiConfigIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_config\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiConfigIamPolicy("policy", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiConfigIamPolicy("policy",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiConfigIamPolicy("policy", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiConfigIamPolicy(ctx, "policy", &apigateway.ApiConfigIamPolicyArgs{
			Api:        pulumi.Any(apiCfg.Api),
			ApiConfig:  pulumi.Any(apiCfg.ApiConfigId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicy;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiConfigIamPolicy("policy", ApiConfigIamPolicyArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiConfigIamPolicy
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiConfigIamBinding("binding", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiConfigIamBinding("binding",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiConfigIamBinding("binding", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamBinding(ctx, "binding", &apigateway.ApiConfigIamBindingArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamBinding;
import com.pulumi.gcp.apigateway.ApiConfigIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiConfigIamBinding("binding", ApiConfigIamBindingArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiConfigIamBinding
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiConfigIamMember("member", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiConfigIamMember("member",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiConfigIamMember("member", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamMember(ctx, "member", &apigateway.ApiConfigIamMemberArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Member:    pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamMember;
import com.pulumi.gcp.apigateway.ApiConfigIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiConfigIamMember("member", ApiConfigIamMemberArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiConfigIamMember
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}}

* {{project}}/{{api}}/{{api_config}}

* {{api}}/{{api_config}}

* {{api_config}}

Any variables not passed in the import command will be taken from the provider configuration.

API Gateway apiconfig IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigateway/apiConfigIamMember:ApiConfigIamMember editor "projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}} roles/apigateway.viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigateway/apiConfigIamMember:ApiConfigIamMember editor "projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}} roles/apigateway.viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigateway/apiConfigIamMember:ApiConfigIamMember editor projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

g
api" \The API to attach the config to.
Used to find the parent resource to bind the IAM policy to

	apiConfig" 
	conditionwBu:s
q

apigatewayApiConfigIamMemberConditionFgcp:apigateway/ApiConfigIamMemberCondition:ApiConfigIamMemberConditionÓ	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
Û
role" ÎThe role that should be applied. Only one
`gcp.apigateway.ApiConfigIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"g
api" \The API to attach the config to.
Used to find the parent resource to bind the IAM policy to
"
	apiConfig" "
	conditionwBu:s
q

apigatewayApiConfigIamMemberConditionFgcp:apigateway/ApiConfigIamMemberCondition:ApiConfigIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"Ó	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"Û
role" ÎThe role that should be applied. Only one
`gcp.apigateway.ApiConfigIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*Ï½
V

apigatewayApiConfigIamPolicy4gcp:apigateway/apiConfigIamPolicy:ApiConfigIamPolicyÞ´Three different resources help you manage your IAM policy for API Gateway ApiConfig. Each of these resources serves a different use case:

* `gcp.apigateway.ApiConfigIamPolicy`: Authoritative. Sets the IAM policy for the apiconfig and replaces any existing policy already attached.
* `gcp.apigateway.ApiConfigIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the apiconfig are preserved.
* `gcp.apigateway.ApiConfigIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the apiconfig are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiConfigIamPolicy`: Retrieves the IAM policy for the apiconfig

> **Note:** `gcp.apigateway.ApiConfigIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiConfigIamBinding` and `gcp.apigateway.ApiConfigIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiConfigIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiConfigIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_config\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiConfigIamPolicy("policy", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiConfigIamPolicy("policy",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiConfigIamPolicy("policy", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiConfigIamPolicy(ctx, "policy", &apigateway.ApiConfigIamPolicyArgs{
			Api:        pulumi.Any(apiCfg.Api),
			ApiConfig:  pulumi.Any(apiCfg.ApiConfigId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicy;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiConfigIamPolicy("policy", ApiConfigIamPolicyArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiConfigIamPolicy
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiConfigIamBinding("binding", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiConfigIamBinding("binding",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiConfigIamBinding("binding", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamBinding(ctx, "binding", &apigateway.ApiConfigIamBindingArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamBinding;
import com.pulumi.gcp.apigateway.ApiConfigIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiConfigIamBinding("binding", ApiConfigIamBindingArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiConfigIamBinding
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiConfigIamMember("member", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiConfigIamMember("member",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiConfigIamMember("member", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamMember(ctx, "member", &apigateway.ApiConfigIamMemberArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Member:    pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamMember;
import com.pulumi.gcp.apigateway.ApiConfigIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiConfigIamMember("member", ApiConfigIamMemberArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiConfigIamMember
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for API Gateway ApiConfig
Three different resources help you manage your IAM policy for API Gateway ApiConfig. Each of these resources serves a different use case:

* `gcp.apigateway.ApiConfigIamPolicy`: Authoritative. Sets the IAM policy for the apiconfig and replaces any existing policy already attached.
* `gcp.apigateway.ApiConfigIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the apiconfig are preserved.
* `gcp.apigateway.ApiConfigIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the apiconfig are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiConfigIamPolicy`: Retrieves the IAM policy for the apiconfig

> **Note:** `gcp.apigateway.ApiConfigIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiConfigIamBinding` and `gcp.apigateway.ApiConfigIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiConfigIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiConfigIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_config\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiConfigIamPolicy("policy", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiConfigIamPolicy("policy",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiConfigIamPolicy("policy", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiConfigIamPolicy(ctx, "policy", &apigateway.ApiConfigIamPolicyArgs{
			Api:        pulumi.Any(apiCfg.Api),
			ApiConfig:  pulumi.Any(apiCfg.ApiConfigId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicy;
import com.pulumi.gcp.apigateway.ApiConfigIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiConfigIamPolicy("policy", ApiConfigIamPolicyArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiConfigIamPolicy
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiConfigIamBinding("binding", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiConfigIamBinding("binding",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiConfigIamBinding("binding", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamBinding(ctx, "binding", &apigateway.ApiConfigIamBindingArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamBinding;
import com.pulumi.gcp.apigateway.ApiConfigIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiConfigIamBinding("binding", ApiConfigIamBindingArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiConfigIamBinding
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiConfigIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiConfigIamMember("member", {
    api: apiCfg.api,
    apiConfig: apiCfg.apiConfigId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiConfigIamMember("member",
    api=api_cfg["api"],
    api_config=api_cfg["apiConfigId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiConfigIamMember("member", new()
    {
        Api = apiCfg.Api,
        ApiConfig = apiCfg.ApiConfigId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiConfigIamMember(ctx, "member", &apigateway.ApiConfigIamMemberArgs{
			Api:       pulumi.Any(apiCfg.Api),
			ApiConfig: pulumi.Any(apiCfg.ApiConfigId),
			Role:      pulumi.String("roles/apigateway.viewer"),
			Member:    pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiConfigIamMember;
import com.pulumi.gcp.apigateway.ApiConfigIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiConfigIamMember("member", ApiConfigIamMemberArgs.builder()
            .api(apiCfg.api())
            .apiConfig(apiCfg.apiConfigId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiConfigIamMember
    properties:
      api: ${apiCfg.api}
      apiConfig: ${apiCfg.apiConfigId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}}

* {{project}}/{{api}}/{{api_config}}

* {{api}}/{{api_config}}

* {{api_config}}

Any variables not passed in the import command will be taken from the provider configuration.

API Gateway apiconfig IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigateway/apiConfigIamPolicy:ApiConfigIamPolicy editor "projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}} roles/apigateway.viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigateway/apiConfigIamPolicy:ApiConfigIamPolicy editor "projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}} roles/apigateway.viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigateway/apiConfigIamPolicy:ApiConfigIamPolicy editor projects/{{project}}/locations/global/apis/{{api}}/configs/{{api_config}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

g
api" \The API to attach the config to.
Used to find the parent resource to bind the IAM policy to

	apiConfig" _

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"g
api" \The API to attach the config to.
Used to find the parent resource to bind the IAM policy to
"
	apiConfig" "3
etag" '(Computed) The etag of the IAM policy.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
*øÉ
G

apigatewayApiIamBinding*gcp:apigateway/apiIamBinding:ApiIamBindingæ«Three different resources help you manage your IAM policy for API Gateway Api. Each of these resources serves a different use case:

* `gcp.apigateway.ApiIamPolicy`: Authoritative. Sets the IAM policy for the api and replaces any existing policy already attached.
* `gcp.apigateway.ApiIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the api are preserved.
* `gcp.apigateway.ApiIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the api are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiIamPolicy`: Retrieves the IAM policy for the api

> **Note:** `gcp.apigateway.ApiIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiIamBinding` and `gcp.apigateway.ApiIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiIamPolicy("policy", {
    project: api.project,
    api: api.apiId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiIamPolicy("policy",
    project=api["project"],
    api=api["apiId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiIamPolicy("policy", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiIamPolicy(ctx, "policy", &apigateway.ApiIamPolicyArgs{
			Project:    pulumi.Any(api.Project),
			Api:        pulumi.Any(api.ApiId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiIamPolicy;
import com.pulumi.gcp.apigateway.ApiIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiIamPolicy("policy", ApiIamPolicyArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiIamPolicy
    properties:
      project: ${api.project}
      api: ${api.apiId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiIamBinding("binding", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiIamBinding("binding",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiIamBinding("binding", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamBinding(ctx, "binding", &apigateway.ApiIamBindingArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamBinding;
import com.pulumi.gcp.apigateway.ApiIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiIamBinding("binding", ApiIamBindingArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiIamBinding
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiIamMember("member", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiIamMember("member",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiIamMember("member", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamMember(ctx, "member", &apigateway.ApiIamMemberArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamMember;
import com.pulumi.gcp.apigateway.ApiIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiIamMember("member", ApiIamMemberArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiIamMember
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for API Gateway Api
Three different resources help you manage your IAM policy for API Gateway Api. Each of these resources serves a different use case:

* `gcp.apigateway.ApiIamPolicy`: Authoritative. Sets the IAM policy for the api and replaces any existing policy already attached.
* `gcp.apigateway.ApiIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the api are preserved.
* `gcp.apigateway.ApiIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the api are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiIamPolicy`: Retrieves the IAM policy for the api

> **Note:** `gcp.apigateway.ApiIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiIamBinding` and `gcp.apigateway.ApiIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiIamPolicy("policy", {
    project: api.project,
    api: api.apiId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiIamPolicy("policy",
    project=api["project"],
    api=api["apiId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiIamPolicy("policy", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiIamPolicy(ctx, "policy", &apigateway.ApiIamPolicyArgs{
			Project:    pulumi.Any(api.Project),
			Api:        pulumi.Any(api.ApiId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiIamPolicy;
import com.pulumi.gcp.apigateway.ApiIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiIamPolicy("policy", ApiIamPolicyArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiIamPolicy
    properties:
      project: ${api.project}
      api: ${api.apiId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiIamBinding("binding", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiIamBinding("binding",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiIamBinding("binding", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamBinding(ctx, "binding", &apigateway.ApiIamBindingArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamBinding;
import com.pulumi.gcp.apigateway.ApiIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiIamBinding("binding", ApiIamBindingArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiIamBinding
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiIamMember("member", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiIamMember("member",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiIamMember("member", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamMember(ctx, "member", &apigateway.ApiIamMemberArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamMember;
import com.pulumi.gcp.apigateway.ApiIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiIamMember("member", ApiIamMemberArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiIamMember
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/global/apis/{{api}}

* {{project}}/{{api}}

* {{api}}

Any variables not passed in the import command will be taken from the provider configuration.

API Gateway api IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigateway/apiIamBinding:ApiIamBinding editor "projects/{{project}}/locations/global/apis/{{api}} roles/apigateway.viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigateway/apiIamBinding:ApiIamBinding editor "projects/{{project}}/locations/global/apis/{{api}} roles/apigateway.viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigateway/apiIamBinding:ApiIamBinding editor projects/{{project}}/locations/global/apis/{{api}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

	
api" u
	conditionhBf:d
b

apigatewayApiIamBindingCondition<gcp:apigateway/ApiIamBindingCondition:ApiIamBindingConditionÖ	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
Õ
role" ÈThe role that should be applied. Only one
`gcp.apigateway.ApiIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"	
api" "u
	conditionhBf:d
b

apigatewayApiIamBindingCondition<gcp:apigateway/ApiIamBindingCondition:ApiIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"Ö	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"Õ
role" ÈThe role that should be applied. Only one
`gcp.apigateway.ApiIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*ãÉ
D

apigatewayApiIamMember(gcp:apigateway/apiIamMember:ApiIamMemberà«Three different resources help you manage your IAM policy for API Gateway Api. Each of these resources serves a different use case:

* `gcp.apigateway.ApiIamPolicy`: Authoritative. Sets the IAM policy for the api and replaces any existing policy already attached.
* `gcp.apigateway.ApiIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the api are preserved.
* `gcp.apigateway.ApiIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the api are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiIamPolicy`: Retrieves the IAM policy for the api

> **Note:** `gcp.apigateway.ApiIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiIamBinding` and `gcp.apigateway.ApiIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiIamPolicy("policy", {
    project: api.project,
    api: api.apiId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiIamPolicy("policy",
    project=api["project"],
    api=api["apiId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiIamPolicy("policy", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiIamPolicy(ctx, "policy", &apigateway.ApiIamPolicyArgs{
			Project:    pulumi.Any(api.Project),
			Api:        pulumi.Any(api.ApiId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiIamPolicy;
import com.pulumi.gcp.apigateway.ApiIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiIamPolicy("policy", ApiIamPolicyArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiIamPolicy
    properties:
      project: ${api.project}
      api: ${api.apiId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiIamBinding("binding", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiIamBinding("binding",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiIamBinding("binding", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamBinding(ctx, "binding", &apigateway.ApiIamBindingArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamBinding;
import com.pulumi.gcp.apigateway.ApiIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiIamBinding("binding", ApiIamBindingArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiIamBinding
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiIamMember("member", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiIamMember("member",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiIamMember("member", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamMember(ctx, "member", &apigateway.ApiIamMemberArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamMember;
import com.pulumi.gcp.apigateway.ApiIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiIamMember("member", ApiIamMemberArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiIamMember
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for API Gateway Api
Three different resources help you manage your IAM policy for API Gateway Api. Each of these resources serves a different use case:

* `gcp.apigateway.ApiIamPolicy`: Authoritative. Sets the IAM policy for the api and replaces any existing policy already attached.
* `gcp.apigateway.ApiIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the api are preserved.
* `gcp.apigateway.ApiIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the api are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiIamPolicy`: Retrieves the IAM policy for the api

> **Note:** `gcp.apigateway.ApiIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiIamBinding` and `gcp.apigateway.ApiIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiIamPolicy("policy", {
    project: api.project,
    api: api.apiId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiIamPolicy("policy",
    project=api["project"],
    api=api["apiId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiIamPolicy("policy", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiIamPolicy(ctx, "policy", &apigateway.ApiIamPolicyArgs{
			Project:    pulumi.Any(api.Project),
			Api:        pulumi.Any(api.ApiId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiIamPolicy;
import com.pulumi.gcp.apigateway.ApiIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiIamPolicy("policy", ApiIamPolicyArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiIamPolicy
    properties:
      project: ${api.project}
      api: ${api.apiId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiIamBinding("binding", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiIamBinding("binding",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiIamBinding("binding", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamBinding(ctx, "binding", &apigateway.ApiIamBindingArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamBinding;
import com.pulumi.gcp.apigateway.ApiIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiIamBinding("binding", ApiIamBindingArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiIamBinding
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiIamMember("member", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiIamMember("member",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiIamMember("member", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamMember(ctx, "member", &apigateway.ApiIamMemberArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamMember;
import com.pulumi.gcp.apigateway.ApiIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiIamMember("member", ApiIamMemberArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiIamMember
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/global/apis/{{api}}

* {{project}}/{{api}}

* {{api}}

Any variables not passed in the import command will be taken from the provider configuration.

API Gateway api IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigateway/apiIamMember:ApiIamMember editor "projects/{{project}}/locations/global/apis/{{api}} roles/apigateway.viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigateway/apiIamMember:ApiIamMember editor "projects/{{project}}/locations/global/apis/{{api}} roles/apigateway.viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigateway/apiIamMember:ApiIamMember editor projects/{{project}}/locations/global/apis/{{api}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

	
api" r
	conditioneBc:a
_

apigatewayApiIamMemberCondition:gcp:apigateway/ApiIamMemberCondition:ApiIamMemberConditionÓ	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
Õ
role" ÈThe role that should be applied. Only one
`gcp.apigateway.ApiIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"	
api" "r
	conditioneBc:a
_

apigatewayApiIamMemberCondition:gcp:apigateway/ApiIamMemberCondition:ApiIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"Ó	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"Õ
role" ÈThe role that should be applied. Only one
`gcp.apigateway.ApiIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*á²
D

apigatewayApiIamPolicy(gcp:apigateway/apiIamPolicy:ApiIamPolicyà«Three different resources help you manage your IAM policy for API Gateway Api. Each of these resources serves a different use case:

* `gcp.apigateway.ApiIamPolicy`: Authoritative. Sets the IAM policy for the api and replaces any existing policy already attached.
* `gcp.apigateway.ApiIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the api are preserved.
* `gcp.apigateway.ApiIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the api are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiIamPolicy`: Retrieves the IAM policy for the api

> **Note:** `gcp.apigateway.ApiIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiIamBinding` and `gcp.apigateway.ApiIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiIamPolicy("policy", {
    project: api.project,
    api: api.apiId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiIamPolicy("policy",
    project=api["project"],
    api=api["apiId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiIamPolicy("policy", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiIamPolicy(ctx, "policy", &apigateway.ApiIamPolicyArgs{
			Project:    pulumi.Any(api.Project),
			Api:        pulumi.Any(api.ApiId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiIamPolicy;
import com.pulumi.gcp.apigateway.ApiIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiIamPolicy("policy", ApiIamPolicyArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiIamPolicy
    properties:
      project: ${api.project}
      api: ${api.apiId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiIamBinding("binding", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiIamBinding("binding",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiIamBinding("binding", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamBinding(ctx, "binding", &apigateway.ApiIamBindingArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamBinding;
import com.pulumi.gcp.apigateway.ApiIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiIamBinding("binding", ApiIamBindingArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiIamBinding
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiIamMember("member", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiIamMember("member",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiIamMember("member", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamMember(ctx, "member", &apigateway.ApiIamMemberArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamMember;
import com.pulumi.gcp.apigateway.ApiIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiIamMember("member", ApiIamMemberArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiIamMember
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for API Gateway Api
Three different resources help you manage your IAM policy for API Gateway Api. Each of these resources serves a different use case:

* `gcp.apigateway.ApiIamPolicy`: Authoritative. Sets the IAM policy for the api and replaces any existing policy already attached.
* `gcp.apigateway.ApiIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the api are preserved.
* `gcp.apigateway.ApiIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the api are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.ApiIamPolicy`: Retrieves the IAM policy for the api

> **Note:** `gcp.apigateway.ApiIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.ApiIamBinding` and `gcp.apigateway.ApiIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.ApiIamBinding` resources **can be** used in conjunction with `gcp.apigateway.ApiIamMember` resources **only if** they do not grant privilege to the same role.



## google\_api\_gateway\_api\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.ApiIamPolicy("policy", {
    project: api.project,
    api: api.apiId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.ApiIamPolicy("policy",
    project=api["project"],
    api=api["apiId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.ApiIamPolicy("policy", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewApiIamPolicy(ctx, "policy", &apigateway.ApiIamPolicyArgs{
			Project:    pulumi.Any(api.Project),
			Api:        pulumi.Any(api.ApiId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.ApiIamPolicy;
import com.pulumi.gcp.apigateway.ApiIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ApiIamPolicy("policy", ApiIamPolicyArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:ApiIamPolicy
    properties:
      project: ${api.project}
      api: ${api.apiId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.ApiIamBinding("binding", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.ApiIamBinding("binding",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.ApiIamBinding("binding", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamBinding(ctx, "binding", &apigateway.ApiIamBindingArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamBinding;
import com.pulumi.gcp.apigateway.ApiIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ApiIamBinding("binding", ApiIamBindingArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:ApiIamBinding
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.ApiIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.ApiIamMember("member", {
    project: api.project,
    api: api.apiId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.ApiIamMember("member",
    project=api["project"],
    api=api["apiId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.ApiIamMember("member", new()
    {
        Project = api.Project,
        Api = api.ApiId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewApiIamMember(ctx, "member", &apigateway.ApiIamMemberArgs{
			Project: pulumi.Any(api.Project),
			Api:     pulumi.Any(api.ApiId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.ApiIamMember;
import com.pulumi.gcp.apigateway.ApiIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ApiIamMember("member", ApiIamMemberArgs.builder()
            .project(api.project())
            .api(api.apiId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:ApiIamMember
    properties:
      project: ${api.project}
      api: ${api.apiId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/global/apis/{{api}}

* {{project}}/{{api}}

* {{api}}

Any variables not passed in the import command will be taken from the provider configuration.

API Gateway api IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigateway/apiIamPolicy:ApiIamPolicy editor "projects/{{project}}/locations/global/apis/{{api}} roles/apigateway.viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigateway/apiIamPolicy:ApiIamPolicy editor "projects/{{project}}/locations/global/apis/{{api}} roles/apigateway.viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigateway/apiIamPolicy:ApiIamPolicy editor projects/{{project}}/locations/global/apis/{{api}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

	
api" _

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"	
api" "3
etag" '(Computed) The etag of the IAM policy.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
*§
5

apigatewayGatewaygcp:apigateway/gateway:GatewayÂA consumable API that can be used by multiple Gateways.

To get more information about Gateway, see:

* [API documentation](https://cloud.google.com/api-gateway/docs/reference/rest/v1beta/projects.locations.apis)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/api-gateway/docs/quickstart)

## Example Usage

## Import

Gateway can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/gateways/{{gateway_id}}`

* `{{project}}/{{region}}/{{gateway_id}}`

* `{{region}}/{{gateway_id}}`

* `{{gateway_id}}`

When using the `pulumi import` command, Gateway can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigateway/gateway:Gateway default projects/{{project}}/locations/{{region}}/gateways/{{gateway_id}}
```

```sh
$ pulumi import gcp:apigateway/gateway:Gateway default {{project}}/{{region}}/{{gateway_id}}
```

```sh
$ pulumi import gcp:apigateway/gateway:Gateway default {{region}}/{{gateway_id}}
```

```sh
$ pulumi import gcp:apigateway/gateway:Gateway default {{gateway_id}}
```


	apiConfig" þResource name of the API Config for this Gateway. Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}.
When changing api configs please ensure the new config is a new resource and the
lifecycle rule `create_before_destroy` is set.
6
displayNameB" !A user-visible name for the API.
{
	gatewayId" jIdentifier to assign to the Gateway. Must be unique within scope of the parent resource(project).


- - -

labelsB2" üResource labels to represent user-provided metadata.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
7
regionB" 'The region of the gateway for the API.
"
	apiConfig" þResource name of the API Config for this Gateway. Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}.
When changing api configs please ensure the new config is a new resource and the
lifecycle rule `create_before_destroy` is set.
"s
defaultHostname" \The default API Gateway host name of the form {gatewayId}-{hash}.{region_code}.gateway.dev.
"4
displayName" !A user-visible name for the API.
"¦
effectiveLabels2" All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"{
	gatewayId" jIdentifier to assign to the Gateway. Must be unique within scope of the parent resource(project).


- - -
"
labelsB2" üResource labels to represent user-provided metadata.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"k
name" _Resource name of the Gateway. Format: projects/{project}/locations/{region}/gateways/{gateway}
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"5
region" 'The region of the gateway for the API.
*Ïß
S

apigatewayGatewayIamBinding2gcp:apigateway/gatewayIamBinding:GatewayIamBinding÷»Three different resources help you manage your IAM policy for API Gateway Gateway. Each of these resources serves a different use case:

* `gcp.apigateway.GatewayIamPolicy`: Authoritative. Sets the IAM policy for the gateway and replaces any existing policy already attached.
* `gcp.apigateway.GatewayIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the gateway are preserved.
* `gcp.apigateway.GatewayIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the gateway are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.GatewayIamPolicy`: Retrieves the IAM policy for the gateway

> **Note:** `gcp.apigateway.GatewayIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.GatewayIamBinding` and `gcp.apigateway.GatewayIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.GatewayIamBinding` resources **can be** used in conjunction with `gcp.apigateway.GatewayIamMember` resources **only if** they do not grant privilege to the same role.


## google\_api\_gateway\_gateway\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.GatewayIamPolicy("policy", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.GatewayIamPolicy("policy",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.GatewayIamPolicy("policy", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewGatewayIamPolicy(ctx, "policy", &apigateway.GatewayIamPolicyArgs{
			Project:    pulumi.Any(apiGw.Project),
			Region:     pulumi.Any(apiGw.Region),
			Gateway:    pulumi.Any(apiGw.GatewayId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.GatewayIamPolicy;
import com.pulumi.gcp.apigateway.GatewayIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new GatewayIamPolicy("policy", GatewayIamPolicyArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:GatewayIamPolicy
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.GatewayIamBinding("binding", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.GatewayIamBinding("binding",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.GatewayIamBinding("binding", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamBinding(ctx, "binding", &apigateway.GatewayIamBindingArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamBinding;
import com.pulumi.gcp.apigateway.GatewayIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new GatewayIamBinding("binding", GatewayIamBindingArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:GatewayIamBinding
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.GatewayIamMember("member", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.GatewayIamMember("member",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.GatewayIamMember("member", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamMember(ctx, "member", &apigateway.GatewayIamMemberArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamMember;
import com.pulumi.gcp.apigateway.GatewayIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new GatewayIamMember("member", GatewayIamMemberArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:GatewayIamMember
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for API Gateway Gateway
Three different resources help you manage your IAM policy for API Gateway Gateway. Each of these resources serves a different use case:

* `gcp.apigateway.GatewayIamPolicy`: Authoritative. Sets the IAM policy for the gateway and replaces any existing policy already attached.
* `gcp.apigateway.GatewayIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the gateway are preserved.
* `gcp.apigateway.GatewayIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the gateway are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.GatewayIamPolicy`: Retrieves the IAM policy for the gateway

> **Note:** `gcp.apigateway.GatewayIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.GatewayIamBinding` and `gcp.apigateway.GatewayIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.GatewayIamBinding` resources **can be** used in conjunction with `gcp.apigateway.GatewayIamMember` resources **only if** they do not grant privilege to the same role.


## google\_api\_gateway\_gateway\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.GatewayIamPolicy("policy", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.GatewayIamPolicy("policy",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.GatewayIamPolicy("policy", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewGatewayIamPolicy(ctx, "policy", &apigateway.GatewayIamPolicyArgs{
			Project:    pulumi.Any(apiGw.Project),
			Region:     pulumi.Any(apiGw.Region),
			Gateway:    pulumi.Any(apiGw.GatewayId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.GatewayIamPolicy;
import com.pulumi.gcp.apigateway.GatewayIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new GatewayIamPolicy("policy", GatewayIamPolicyArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:GatewayIamPolicy
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.GatewayIamBinding("binding", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.GatewayIamBinding("binding",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.GatewayIamBinding("binding", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamBinding(ctx, "binding", &apigateway.GatewayIamBindingArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamBinding;
import com.pulumi.gcp.apigateway.GatewayIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new GatewayIamBinding("binding", GatewayIamBindingArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:GatewayIamBinding
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.GatewayIamMember("member", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.GatewayIamMember("member",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.GatewayIamMember("member", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamMember(ctx, "member", &apigateway.GatewayIamMemberArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamMember;
import com.pulumi.gcp.apigateway.GatewayIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new GatewayIamMember("member", GatewayIamMemberArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:GatewayIamMember
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{region}}/gateways/{{gateway}}

* {{project}}/{{region}}/{{gateway}}

* {{region}}/{{gateway}}

* {{gateway}}

Any variables not passed in the import command will be taken from the provider configuration.

API Gateway gateway IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigateway/gatewayIamBinding:GatewayIamBinding editor "projects/{{project}}/locations/{{region}}/gateways/{{gateway}} roles/apigateway.viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigateway/gatewayIamBinding:GatewayIamBinding editor "projects/{{project}}/locations/{{region}}/gateways/{{gateway}} roles/apigateway.viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigateway/gatewayIamBinding:GatewayIamBinding editor projects/{{project}}/locations/{{region}}/gateways/{{gateway}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.


	conditiontBr:p
n

apigatewayGatewayIamBindingConditionDgcp:apigateway/GatewayIamBindingCondition:GatewayIamBindingCondition
gateway" Ö	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
Æ
regionB" µThe region of the gateway for the API.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
Ù
role" ÌThe role that should be applied. Only one
`gcp.apigateway.GatewayIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"
	conditiontBr:p
n

apigatewayGatewayIamBindingConditionDgcp:apigateway/GatewayIamBindingCondition:GatewayIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"
gateway" "Ö	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"Ä
region" µThe region of the gateway for the API.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
"Ù
role" ÌThe role that should be applied. Only one
`gcp.apigateway.GatewayIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*¸ß
P

apigatewayGatewayIamMember0gcp:apigateway/gatewayIamMember:GatewayIamMemberñ»Three different resources help you manage your IAM policy for API Gateway Gateway. Each of these resources serves a different use case:

* `gcp.apigateway.GatewayIamPolicy`: Authoritative. Sets the IAM policy for the gateway and replaces any existing policy already attached.
* `gcp.apigateway.GatewayIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the gateway are preserved.
* `gcp.apigateway.GatewayIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the gateway are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.GatewayIamPolicy`: Retrieves the IAM policy for the gateway

> **Note:** `gcp.apigateway.GatewayIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.GatewayIamBinding` and `gcp.apigateway.GatewayIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.GatewayIamBinding` resources **can be** used in conjunction with `gcp.apigateway.GatewayIamMember` resources **only if** they do not grant privilege to the same role.


## google\_api\_gateway\_gateway\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.GatewayIamPolicy("policy", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.GatewayIamPolicy("policy",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.GatewayIamPolicy("policy", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewGatewayIamPolicy(ctx, "policy", &apigateway.GatewayIamPolicyArgs{
			Project:    pulumi.Any(apiGw.Project),
			Region:     pulumi.Any(apiGw.Region),
			Gateway:    pulumi.Any(apiGw.GatewayId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.GatewayIamPolicy;
import com.pulumi.gcp.apigateway.GatewayIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new GatewayIamPolicy("policy", GatewayIamPolicyArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:GatewayIamPolicy
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.GatewayIamBinding("binding", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.GatewayIamBinding("binding",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.GatewayIamBinding("binding", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamBinding(ctx, "binding", &apigateway.GatewayIamBindingArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamBinding;
import com.pulumi.gcp.apigateway.GatewayIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new GatewayIamBinding("binding", GatewayIamBindingArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:GatewayIamBinding
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.GatewayIamMember("member", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.GatewayIamMember("member",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.GatewayIamMember("member", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamMember(ctx, "member", &apigateway.GatewayIamMemberArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamMember;
import com.pulumi.gcp.apigateway.GatewayIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new GatewayIamMember("member", GatewayIamMemberArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:GatewayIamMember
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for API Gateway Gateway
Three different resources help you manage your IAM policy for API Gateway Gateway. Each of these resources serves a different use case:

* `gcp.apigateway.GatewayIamPolicy`: Authoritative. Sets the IAM policy for the gateway and replaces any existing policy already attached.
* `gcp.apigateway.GatewayIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the gateway are preserved.
* `gcp.apigateway.GatewayIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the gateway are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.GatewayIamPolicy`: Retrieves the IAM policy for the gateway

> **Note:** `gcp.apigateway.GatewayIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.GatewayIamBinding` and `gcp.apigateway.GatewayIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.GatewayIamBinding` resources **can be** used in conjunction with `gcp.apigateway.GatewayIamMember` resources **only if** they do not grant privilege to the same role.


## google\_api\_gateway\_gateway\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.GatewayIamPolicy("policy", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.GatewayIamPolicy("policy",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.GatewayIamPolicy("policy", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewGatewayIamPolicy(ctx, "policy", &apigateway.GatewayIamPolicyArgs{
			Project:    pulumi.Any(apiGw.Project),
			Region:     pulumi.Any(apiGw.Region),
			Gateway:    pulumi.Any(apiGw.GatewayId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.GatewayIamPolicy;
import com.pulumi.gcp.apigateway.GatewayIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new GatewayIamPolicy("policy", GatewayIamPolicyArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:GatewayIamPolicy
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.GatewayIamBinding("binding", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.GatewayIamBinding("binding",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.GatewayIamBinding("binding", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamBinding(ctx, "binding", &apigateway.GatewayIamBindingArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamBinding;
import com.pulumi.gcp.apigateway.GatewayIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new GatewayIamBinding("binding", GatewayIamBindingArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:GatewayIamBinding
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.GatewayIamMember("member", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.GatewayIamMember("member",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.GatewayIamMember("member", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamMember(ctx, "member", &apigateway.GatewayIamMemberArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamMember;
import com.pulumi.gcp.apigateway.GatewayIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new GatewayIamMember("member", GatewayIamMemberArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:GatewayIamMember
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{region}}/gateways/{{gateway}}

* {{project}}/{{region}}/{{gateway}}

* {{region}}/{{gateway}}

* {{gateway}}

Any variables not passed in the import command will be taken from the provider configuration.

API Gateway gateway IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigateway/gatewayIamMember:GatewayIamMember editor "projects/{{project}}/locations/{{region}}/gateways/{{gateway}} roles/apigateway.viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigateway/gatewayIamMember:GatewayIamMember editor "projects/{{project}}/locations/{{region}}/gateways/{{gateway}} roles/apigateway.viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigateway/gatewayIamMember:GatewayIamMember editor projects/{{project}}/locations/{{region}}/gateways/{{gateway}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

~
	conditionqBo:m
k

apigatewayGatewayIamMemberConditionBgcp:apigateway/GatewayIamMemberCondition:GatewayIamMemberCondition
gateway" Ó	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
Æ
regionB" µThe region of the gateway for the API.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
Ù
role" ÌThe role that should be applied. Only one
`gcp.apigateway.GatewayIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"~
	conditionqBo:m
k

apigatewayGatewayIamMemberConditionBgcp:apigateway/GatewayIamMemberCondition:GatewayIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"
gateway" "Ó	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"Ä
region" µThe region of the gateway for the API.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
"Ù
role" ÌThe role that should be applied. Only one
`gcp.apigateway.GatewayIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*È
P

apigatewayGatewayIamPolicy0gcp:apigateway/gatewayIamPolicy:GatewayIamPolicyñ»Three different resources help you manage your IAM policy for API Gateway Gateway. Each of these resources serves a different use case:

* `gcp.apigateway.GatewayIamPolicy`: Authoritative. Sets the IAM policy for the gateway and replaces any existing policy already attached.
* `gcp.apigateway.GatewayIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the gateway are preserved.
* `gcp.apigateway.GatewayIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the gateway are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.GatewayIamPolicy`: Retrieves the IAM policy for the gateway

> **Note:** `gcp.apigateway.GatewayIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.GatewayIamBinding` and `gcp.apigateway.GatewayIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.GatewayIamBinding` resources **can be** used in conjunction with `gcp.apigateway.GatewayIamMember` resources **only if** they do not grant privilege to the same role.


## google\_api\_gateway\_gateway\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.GatewayIamPolicy("policy", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.GatewayIamPolicy("policy",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.GatewayIamPolicy("policy", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewGatewayIamPolicy(ctx, "policy", &apigateway.GatewayIamPolicyArgs{
			Project:    pulumi.Any(apiGw.Project),
			Region:     pulumi.Any(apiGw.Region),
			Gateway:    pulumi.Any(apiGw.GatewayId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.GatewayIamPolicy;
import com.pulumi.gcp.apigateway.GatewayIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new GatewayIamPolicy("policy", GatewayIamPolicyArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:GatewayIamPolicy
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.GatewayIamBinding("binding", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.GatewayIamBinding("binding",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.GatewayIamBinding("binding", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamBinding(ctx, "binding", &apigateway.GatewayIamBindingArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamBinding;
import com.pulumi.gcp.apigateway.GatewayIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new GatewayIamBinding("binding", GatewayIamBindingArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:GatewayIamBinding
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.GatewayIamMember("member", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.GatewayIamMember("member",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.GatewayIamMember("member", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamMember(ctx, "member", &apigateway.GatewayIamMemberArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamMember;
import com.pulumi.gcp.apigateway.GatewayIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new GatewayIamMember("member", GatewayIamMemberArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:GatewayIamMember
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for API Gateway Gateway
Three different resources help you manage your IAM policy for API Gateway Gateway. Each of these resources serves a different use case:

* `gcp.apigateway.GatewayIamPolicy`: Authoritative. Sets the IAM policy for the gateway and replaces any existing policy already attached.
* `gcp.apigateway.GatewayIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the gateway are preserved.
* `gcp.apigateway.GatewayIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the gateway are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigateway.GatewayIamPolicy`: Retrieves the IAM policy for the gateway

> **Note:** `gcp.apigateway.GatewayIamPolicy` **cannot** be used in conjunction with `gcp.apigateway.GatewayIamBinding` and `gcp.apigateway.GatewayIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigateway.GatewayIamBinding` resources **can be** used in conjunction with `gcp.apigateway.GatewayIamMember` resources **only if** they do not grant privilege to the same role.


## google\_api\_gateway\_gateway\_iam\_policy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/apigateway.viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigateway.GatewayIamPolicy("policy", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/apigateway.viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigateway.GatewayIamPolicy("policy",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/apigateway.viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ApiGateway.GatewayIamPolicy("policy", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/apigateway.viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigateway.NewGatewayIamPolicy(ctx, "policy", &apigateway.GatewayIamPolicyArgs{
			Project:    pulumi.Any(apiGw.Project),
			Region:     pulumi.Any(apiGw.Region),
			Gateway:    pulumi.Any(apiGw.GatewayId),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigateway.GatewayIamPolicy;
import com.pulumi.gcp.apigateway.GatewayIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/apigateway.viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new GatewayIamPolicy("policy", GatewayIamPolicyArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigateway:GatewayIamPolicy
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/apigateway.viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigateway.GatewayIamBinding("binding", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigateway.GatewayIamBinding("binding",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ApiGateway.GatewayIamBinding("binding", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamBinding(ctx, "binding", &apigateway.GatewayIamBindingArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamBinding;
import com.pulumi.gcp.apigateway.GatewayIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new GatewayIamBinding("binding", GatewayIamBindingArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigateway:GatewayIamBinding
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigateway.GatewayIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigateway.GatewayIamMember("member", {
    project: apiGw.project,
    region: apiGw.region,
    gateway: apiGw.gatewayId,
    role: "roles/apigateway.viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigateway.GatewayIamMember("member",
    project=api_gw["project"],
    region=api_gw["region"],
    gateway=api_gw["gatewayId"],
    role="roles/apigateway.viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ApiGateway.GatewayIamMember("member", new()
    {
        Project = apiGw.Project,
        Region = apiGw.Region,
        Gateway = apiGw.GatewayId,
        Role = "roles/apigateway.viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigateway"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigateway.NewGatewayIamMember(ctx, "member", &apigateway.GatewayIamMemberArgs{
			Project: pulumi.Any(apiGw.Project),
			Region:  pulumi.Any(apiGw.Region),
			Gateway: pulumi.Any(apiGw.GatewayId),
			Role:    pulumi.String("roles/apigateway.viewer"),
			Member:  pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigateway.GatewayIamMember;
import com.pulumi.gcp.apigateway.GatewayIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new GatewayIamMember("member", GatewayIamMemberArgs.builder()
            .project(apiGw.project())
            .region(apiGw.region())
            .gateway(apiGw.gatewayId())
            .role("roles/apigateway.viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigateway:GatewayIamMember
    properties:
      project: ${apiGw.project}
      region: ${apiGw.region}
      gateway: ${apiGw.gatewayId}
      role: roles/apigateway.viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{region}}/gateways/{{gateway}}

* {{project}}/{{region}}/{{gateway}}

* {{region}}/{{gateway}}

* {{gateway}}

Any variables not passed in the import command will be taken from the provider configuration.

API Gateway gateway IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigateway/gatewayIamPolicy:GatewayIamPolicy editor "projects/{{project}}/locations/{{region}}/gateways/{{gateway}} roles/apigateway.viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigateway/gatewayIamPolicy:GatewayIamPolicy editor "projects/{{project}}/locations/{{region}}/gateways/{{gateway}} roles/apigateway.viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigateway/gatewayIamPolicy:GatewayIamPolicy editor projects/{{project}}/locations/{{region}}/gateways/{{gateway}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.


gateway" _

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
Æ
regionB" µThe region of the gateway for the API.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
"3
etag" '(Computed) The etag of the IAM policy.
"
gateway" "_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"Ä
region" µThe region of the gateway for the API.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
*ä±
<
apigeeAddonsConfig$gcp:apigee/addonsConfig:AddonsConfig ­Configures the add-ons for the Apigee organization. The existing add-on configuration will be fully replaced.


To get more information about AddonsConfig, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations#setaddons)
* How-to Guides
    * [Creating an API organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org)

## Example Usage

### Apigee Addons Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const testOrganization = new gcp.apigee.AddonsConfig("test_organization", {
    org: "test_organization",
    addonsConfig: {
        apiSecurityConfig: {
            enabled: true,
        },
        monetizationConfig: {
            enabled: true,
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

test_organization = gcp.apigee.AddonsConfig("test_organization",
    org="test_organization",
    addons_config={
        "api_security_config": {
            "enabled": True,
        },
        "monetization_config": {
            "enabled": True,
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var testOrganization = new Gcp.Apigee.AddonsConfig("test_organization", new()
    {
        Org = "test_organization",
        AddonsConfigDetails = new Gcp.Apigee.Inputs.AddonsConfigAddonsConfigArgs
        {
            ApiSecurityConfig = new Gcp.Apigee.Inputs.AddonsConfigAddonsConfigApiSecurityConfigArgs
            {
                Enabled = true,
            },
            MonetizationConfig = new Gcp.Apigee.Inputs.AddonsConfigAddonsConfigMonetizationConfigArgs
            {
                Enabled = true,
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewAddonsConfig(ctx, "test_organization", &apigee.AddonsConfigArgs{
			Org: pulumi.String("test_organization"),
			AddonsConfig: &apigee.AddonsConfigAddonsConfigArgs{
				ApiSecurityConfig: &apigee.AddonsConfigAddonsConfigApiSecurityConfigArgs{
					Enabled: pulumi.Bool(true),
				},
				MonetizationConfig: &apigee.AddonsConfigAddonsConfigMonetizationConfigArgs{
					Enabled: pulumi.Bool(true),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.AddonsConfig;
import com.pulumi.gcp.apigee.AddonsConfigArgs;
import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigArgs;
import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigApiSecurityConfigArgs;
import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigMonetizationConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var testOrganization = new AddonsConfig("testOrganization", AddonsConfigArgs.builder()
            .org("test_organization")
            .addonsConfig(AddonsConfigAddonsConfigArgs.builder()
                .apiSecurityConfig(AddonsConfigAddonsConfigApiSecurityConfigArgs.builder()
                    .enabled(true)
                    .build())
                .monetizationConfig(AddonsConfigAddonsConfigMonetizationConfigArgs.builder()
                    .enabled(true)
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  testOrganization:
    type: gcp:apigee:AddonsConfig
    name: test_organization
    properties:
      org: test_organization
      addonsConfig:
        apiSecurityConfig:
          enabled: true
        monetizationConfig:
          enabled: true
```
<!--End PulumiCodeChooser -->
### Apigee Addons Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigee = new gcp.projects.Service("apigee", {
    project: current.then(current => current.project),
    service: "apigee.googleapis.com",
});
const compute = new gcp.projects.Service("compute", {
    project: current.then(current => current.project),
    service: "compute.googleapis.com",
});
const servicenetworking = new gcp.projects.Service("servicenetworking", {
    project: current.then(current => current.project),
    service: "servicenetworking.googleapis.com",
});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {
    name: "apigee-network",
    project: current.then(current => current.project),
}, {
    dependsOn: [compute],
});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
    project: current.then(current => current.project),
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const org = new gcp.apigee.Organization("org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
    billingType: "EVALUATION",
}, {
    dependsOn: [
        apigeeVpcConnection,
        apigee,
    ],
});
const testOrganization = new gcp.apigee.AddonsConfig("test_organization", {
    org: org.name,
    addonsConfig: {
        integrationConfig: {
            enabled: true,
        },
        apiSecurityConfig: {
            enabled: true,
        },
        connectorsPlatformConfig: {
            enabled: true,
        },
        monetizationConfig: {
            enabled: true,
        },
        advancedApiOpsConfig: {
            enabled: true,
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee = gcp.projects.Service("apigee",
    project=current.project,
    service="apigee.googleapis.com")
compute = gcp.projects.Service("compute",
    project=current.project,
    service="compute.googleapis.com")
servicenetworking = gcp.projects.Service("servicenetworking",
    project=current.project,
    service="servicenetworking.googleapis.com")
apigee_network = gcp.compute.Network("apigee_network",
    name="apigee-network",
    project=current.project,
    opts = pulumi.ResourceOptions(depends_on=[compute]))
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id,
    project=current.project)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
org = gcp.apigee.Organization("org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    billing_type="EVALUATION",
    opts = pulumi.ResourceOptions(depends_on=[
            apigee_vpc_connection,
            apigee,
        ]))
test_organization = gcp.apigee.AddonsConfig("test_organization",
    org=org.name,
    addons_config={
        "integration_config": {
            "enabled": True,
        },
        "api_security_config": {
            "enabled": True,
        },
        "connectors_platform_config": {
            "enabled": True,
        },
        "monetization_config": {
            "enabled": True,
        },
        "advanced_api_ops_config": {
            "enabled": True,
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigee = new Gcp.Projects.Service("apigee", new()
    {
        Project = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        ServiceName = "apigee.googleapis.com",
    });

    var compute = new Gcp.Projects.Service("compute", new()
    {
        Project = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        ServiceName = "compute.googleapis.com",
    });

    var servicenetworking = new Gcp.Projects.Service("servicenetworking", new()
    {
        Project = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        ServiceName = "servicenetworking.googleapis.com",
    });

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
        Project = current.Apply(getClientConfigResult => getClientConfigResult.Project),
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            compute,
        },
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
        Project = current.Apply(getClientConfigResult => getClientConfigResult.Project),
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var org = new Gcp.Apigee.Organization("org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
        BillingType = "EVALUATION",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
            apigee,
        },
    });

    var testOrganization = new Gcp.Apigee.AddonsConfig("test_organization", new()
    {
        Org = org.Name,
        AddonsConfigDetails = new Gcp.Apigee.Inputs.AddonsConfigAddonsConfigArgs
        {
            IntegrationConfig = new Gcp.Apigee.Inputs.AddonsConfigAddonsConfigIntegrationConfigArgs
            {
                Enabled = true,
            },
            ApiSecurityConfig = new Gcp.Apigee.Inputs.AddonsConfigAddonsConfigApiSecurityConfigArgs
            {
                Enabled = true,
            },
            ConnectorsPlatformConfig = new Gcp.Apigee.Inputs.AddonsConfigAddonsConfigConnectorsPlatformConfigArgs
            {
                Enabled = true,
            },
            MonetizationConfig = new Gcp.Apigee.Inputs.AddonsConfigAddonsConfigMonetizationConfigArgs
            {
                Enabled = true,
            },
            AdvancedApiOpsConfig = new Gcp.Apigee.Inputs.AddonsConfigAddonsConfigAdvancedApiOpsConfigArgs
            {
                Enabled = true,
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigee, err := projects.NewService(ctx, "apigee", &projects.ServiceArgs{
			Project: pulumi.String(current.Project),
			Service: pulumi.String("apigee.googleapis.com"),
		})
		if err != nil {
			return err
		}
		compute, err := projects.NewService(ctx, "compute", &projects.ServiceArgs{
			Project: pulumi.String(current.Project),
			Service: pulumi.String("compute.googleapis.com"),
		})
		if err != nil {
			return err
		}
		_, err = projects.NewService(ctx, "servicenetworking", &projects.ServiceArgs{
			Project: pulumi.String(current.Project),
			Service: pulumi.String("servicenetworking.googleapis.com"),
		})
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name:    pulumi.String("apigee-network"),
			Project: pulumi.String(current.Project),
		}, pulumi.DependsOn([]pulumi.Resource{
			compute,
		}))
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
			Project:      pulumi.String(current.Project),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		org, err := apigee.NewOrganization(ctx, "org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
			BillingType:       pulumi.String("EVALUATION"),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
			apigee,
		}))
		if err != nil {
			return err
		}
		_, err = apigee.NewAddonsConfig(ctx, "test_organization", &apigee.AddonsConfigArgs{
			Org: org.Name,
			AddonsConfig: &apigee.AddonsConfigAddonsConfigArgs{
				IntegrationConfig: &apigee.AddonsConfigAddonsConfigIntegrationConfigArgs{
					Enabled: pulumi.Bool(true),
				},
				ApiSecurityConfig: &apigee.AddonsConfigAddonsConfigApiSecurityConfigArgs{
					Enabled: pulumi.Bool(true),
				},
				ConnectorsPlatformConfig: &apigee.AddonsConfigAddonsConfigConnectorsPlatformConfigArgs{
					Enabled: pulumi.Bool(true),
				},
				MonetizationConfig: &apigee.AddonsConfigAddonsConfigMonetizationConfigArgs{
					Enabled: pulumi.Bool(true),
				},
				AdvancedApiOpsConfig: &apigee.AddonsConfigAddonsConfigAdvancedApiOpsConfigArgs{
					Enabled: pulumi.Bool(true),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.projects.Service;
import com.pulumi.gcp.projects.ServiceArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.AddonsConfig;
import com.pulumi.gcp.apigee.AddonsConfigArgs;
import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigArgs;
import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigIntegrationConfigArgs;
import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigApiSecurityConfigArgs;
import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigConnectorsPlatformConfigArgs;
import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigMonetizationConfigArgs;
import com.pulumi.gcp.apigee.inputs.AddonsConfigAddonsConfigAdvancedApiOpsConfigArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigee = new Service("apigee", ServiceArgs.builder()
            .project(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .service("apigee.googleapis.com")
            .build());

        var compute = new Service("compute", ServiceArgs.builder()
            .project(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .service("compute.googleapis.com")
            .build());

        var servicenetworking = new Service("servicenetworking", ServiceArgs.builder()
            .project(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .service("servicenetworking.googleapis.com")
            .build());

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .project(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .build(), CustomResourceOptions.builder()
                .dependsOn(compute)
                .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .project(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var org = new Organization("org", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .billingType("EVALUATION")
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    apigeeVpcConnection,
                    apigee)
                .build());

        var testOrganization = new AddonsConfig("testOrganization", AddonsConfigArgs.builder()
            .org(org.name())
            .addonsConfig(AddonsConfigAddonsConfigArgs.builder()
                .integrationConfig(AddonsConfigAddonsConfigIntegrationConfigArgs.builder()
                    .enabled(true)
                    .build())
                .apiSecurityConfig(AddonsConfigAddonsConfigApiSecurityConfigArgs.builder()
                    .enabled(true)
                    .build())
                .connectorsPlatformConfig(AddonsConfigAddonsConfigConnectorsPlatformConfigArgs.builder()
                    .enabled(true)
                    .build())
                .monetizationConfig(AddonsConfigAddonsConfigMonetizationConfigArgs.builder()
                    .enabled(true)
                    .build())
                .advancedApiOpsConfig(AddonsConfigAddonsConfigAdvancedApiOpsConfigArgs.builder()
                    .enabled(true)
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  apigee:
    type: gcp:projects:Service
    properties:
      project: ${current.project}
      service: apigee.googleapis.com
  compute:
    type: gcp:projects:Service
    properties:
      project: ${current.project}
      service: compute.googleapis.com
  servicenetworking:
    type: gcp:projects:Service
    properties:
      project: ${current.project}
      service: servicenetworking.googleapis.com
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
      project: ${current.project}
    options:
      dependsOn:
        - ${compute}
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
      project: ${current.project}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  org:
    type: gcp:apigee:Organization
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
      billingType: EVALUATION
    options:
      dependsOn:
        - ${apigeeVpcConnection}
        - ${apigee}
  testOrganization:
    type: gcp:apigee:AddonsConfig
    name: test_organization
    properties:
      org: ${org.name}
      addonsConfig:
        integrationConfig:
          enabled: true
        apiSecurityConfig:
          enabled: true
        connectorsPlatformConfig:
          enabled: true
        monetizationConfig:
          enabled: true
        advancedApiOpsConfig:
          enabled: true
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

AddonsConfig can be imported using any of these accepted formats:

* `organizations/{{name}}`

* `{{name}}`

When using the `pulumi import` command, AddonsConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/addonsConfig:AddonsConfig default organizations/{{name}}
```

```sh
$ pulumi import gcp:apigee/addonsConfig:AddonsConfig default {{name}}
```

È
addonsConfigfBd:b
`
apigeeAddonsConfigAddonsConfig<gcp:apigee/AddonsConfigAddonsConfig:AddonsConfigAddonsConfigPAddon configurations of the Apigee organization.
Structure is documented below.
4
org" )Name of the Apigee organization.


- - -
"È
addonsConfigfBd:b
`
apigeeAddonsConfigAddonsConfig<gcp:apigee/AddonsConfigAddonsConfig:AddonsConfigAddonsConfigPAddon configurations of the Apigee organization.
Structure is documented below.
"4
org" )Name of the Apigee organization.


- - -
*µ
!
apigeeApigcp:apigee/api:ApiTo get more information about API proxies see, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.apis)
* How-to Guides
  * [API proxies](https://cloud.google.com/apigee/docs/resources)


## Import

An API proxy can be imported using any of these accepted formats:

* `{{org_id}}/apis/{{name}}`

* `{{org_id}}/{{name}}`

When using the `pulumi import` command, API proxy can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/api:Api default {{org_id}}/apis/{{name}}
```

```sh
$ pulumi import gcp:apigee/api:Api default {{org_id}}/{{name}}
```

:
configBundle" &Path to the config zip bundle.

- - -

detectMd5hashB" '
nameB" The ID of the API proxy.
O
orgId" BThe Apigee Organization name associated with the Apigee instance.
":
configBundle" &Path to the config zip bundle.

- - -
"
detectMd5hashB" "Y
latestRevisionId" AThe id of the most recently created revision for this API proxy.
"Æ
md5hash" ¶(Computed) Base 64 MD5 hash of the uploaded data. It is speculative as remote does not return hash of the bundle. Remote changes are detected using returned last_modified timestamp.
"
	metaDatas?*=:;
9
apigeeApiMetaData"gcp:apigee/ApiMetaData:ApiMetaDataBMetadata describing the API proxy.
Structure is documented below.
"%
name" The ID of the API proxy.
"O
orgId" BThe Apigee Organization name associated with the Apigee instance.
":
	revisions*" 'A list of revisions of this API proxy.
*¿Ø
0
apigeeAppGroupgcp:apigee/appGroup:AppGroupÉAn `AppGroup` in Apigee.


To get more information about AppGroup, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.appgroups)
* How-to Guides
    * [Organizing client app ownership](https://cloud.google.com/apigee/docs/api-platform/publish/organizing-client-app-ownership)

## Example Usage

### Apigee App Group Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "instance",
    location: "us-central1",
    orgId: apigeeOrg.id,
    peeringCidrRange: "SLASH_22",
});
const apigeeAppGroup = new gcp.apigee.AppGroup("apigee_app_group", {
    name: "my-app-group",
    displayName: "Test app group",
    channelId: "storefront",
    channelUri: "https://my-dev-portal.org/groups/my-group",
    status: "active",
    orgId: apigeeOrg.id,
}, {
    dependsOn: [apigeeInstance],
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="instance",
    location="us-central1",
    org_id=apigee_org.id,
    peering_cidr_range="SLASH_22")
apigee_app_group = gcp.apigee.AppGroup("apigee_app_group",
    name="my-app-group",
    display_name="Test app group",
    channel_id="storefront",
    channel_uri="https://my-dev-portal.org/groups/my-group",
    status="active",
    org_id=apigee_org.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_instance]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "instance",
        Location = "us-central1",
        OrgId = apigeeOrg.Id,
        PeeringCidrRange = "SLASH_22",
    });

    var apigeeAppGroup = new Gcp.Apigee.AppGroup("apigee_app_group", new()
    {
        Name = "my-app-group",
        DisplayName = "Test app group",
        ChannelId = "storefront",
        ChannelUri = "https://my-dev-portal.org/groups/my-group",
        Status = "active",
        OrgId = apigeeOrg.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeInstance,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:             pulumi.String("instance"),
			Location:         pulumi.String("us-central1"),
			OrgId:            apigeeOrg.ID(),
			PeeringCidrRange: pulumi.String("SLASH_22"),
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewAppGroup(ctx, "apigee_app_group", &apigee.AppGroupArgs{
			Name:        pulumi.String("my-app-group"),
			DisplayName: pulumi.String("Test app group"),
			ChannelId:   pulumi.String("storefront"),
			ChannelUri:  pulumi.String("https://my-dev-portal.org/groups/my-group"),
			Status:      pulumi.String("active"),
			OrgId:       apigeeOrg.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeInstance,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.gcp.apigee.AppGroup;
import com.pulumi.gcp.apigee.AppGroupArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("instance")
            .location("us-central1")
            .orgId(apigeeOrg.id())
            .peeringCidrRange("SLASH_22")
            .build());

        var apigeeAppGroup = new AppGroup("apigeeAppGroup", AppGroupArgs.builder()
            .name("my-app-group")
            .displayName("Test app group")
            .channelId("storefront")
            .channelUri("https://my-dev-portal.org/groups/my-group")
            .status("active")
            .orgId(apigeeOrg.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeInstance)
                .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: instance
      location: us-central1
      orgId: ${apigeeOrg.id}
      peeringCidrRange: SLASH_22
  apigeeAppGroup:
    type: gcp:apigee:AppGroup
    name: apigee_app_group
    properties:
      name: my-app-group
      displayName: Test app group
      channelId: storefront
      channelUri: https://my-dev-portal.org/groups/my-group
      status: active
      orgId: ${apigeeOrg.id}
    options:
      dependsOn:
        - ${apigeeInstance}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Apigee App Group With Attributes


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "instance",
    location: "us-central1",
    orgId: apigeeOrg.id,
    peeringCidrRange: "SLASH_22",
});
const apigeeAppGroup = new gcp.apigee.AppGroup("apigee_app_group", {
    name: "my-app-group",
    displayName: "Test app group",
    channelId: "storefront",
    channelUri: "https://my-dev-portal.org/groups/my-group",
    status: "active",
    orgId: apigeeOrg.id,
    attributes: [
        {
            name: "business_unit",
            value: "HR",
        },
        {
            name: "department",
            value: "payroll",
        },
    ],
}, {
    dependsOn: [apigeeInstance],
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="instance",
    location="us-central1",
    org_id=apigee_org.id,
    peering_cidr_range="SLASH_22")
apigee_app_group = gcp.apigee.AppGroup("apigee_app_group",
    name="my-app-group",
    display_name="Test app group",
    channel_id="storefront",
    channel_uri="https://my-dev-portal.org/groups/my-group",
    status="active",
    org_id=apigee_org.id,
    attributes=[
        {
            "name": "business_unit",
            "value": "HR",
        },
        {
            "name": "department",
            "value": "payroll",
        },
    ],
    opts = pulumi.ResourceOptions(depends_on=[apigee_instance]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "instance",
        Location = "us-central1",
        OrgId = apigeeOrg.Id,
        PeeringCidrRange = "SLASH_22",
    });

    var apigeeAppGroup = new Gcp.Apigee.AppGroup("apigee_app_group", new()
    {
        Name = "my-app-group",
        DisplayName = "Test app group",
        ChannelId = "storefront",
        ChannelUri = "https://my-dev-portal.org/groups/my-group",
        Status = "active",
        OrgId = apigeeOrg.Id,
        Attributes = new[]
        {
            new Gcp.Apigee.Inputs.AppGroupAttributeArgs
            {
                Name = "business_unit",
                Value = "HR",
            },
            new Gcp.Apigee.Inputs.AppGroupAttributeArgs
            {
                Name = "department",
                Value = "payroll",
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeInstance,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:             pulumi.String("instance"),
			Location:         pulumi.String("us-central1"),
			OrgId:            apigeeOrg.ID(),
			PeeringCidrRange: pulumi.String("SLASH_22"),
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewAppGroup(ctx, "apigee_app_group", &apigee.AppGroupArgs{
			Name:        pulumi.String("my-app-group"),
			DisplayName: pulumi.String("Test app group"),
			ChannelId:   pulumi.String("storefront"),
			ChannelUri:  pulumi.String("https://my-dev-portal.org/groups/my-group"),
			Status:      pulumi.String("active"),
			OrgId:       apigeeOrg.ID(),
			Attributes: apigee.AppGroupAttributeArray{
				&apigee.AppGroupAttributeArgs{
					Name:  pulumi.String("business_unit"),
					Value: pulumi.String("HR"),
				},
				&apigee.AppGroupAttributeArgs{
					Name:  pulumi.String("department"),
					Value: pulumi.String("payroll"),
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeInstance,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.gcp.apigee.AppGroup;
import com.pulumi.gcp.apigee.AppGroupArgs;
import com.pulumi.gcp.apigee.inputs.AppGroupAttributeArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("instance")
            .location("us-central1")
            .orgId(apigeeOrg.id())
            .peeringCidrRange("SLASH_22")
            .build());

        var apigeeAppGroup = new AppGroup("apigeeAppGroup", AppGroupArgs.builder()
            .name("my-app-group")
            .displayName("Test app group")
            .channelId("storefront")
            .channelUri("https://my-dev-portal.org/groups/my-group")
            .status("active")
            .orgId(apigeeOrg.id())
            .attributes(            
                AppGroupAttributeArgs.builder()
                    .name("business_unit")
                    .value("HR")
                    .build(),
                AppGroupAttributeArgs.builder()
                    .name("department")
                    .value("payroll")
                    .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeInstance)
                .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: instance
      location: us-central1
      orgId: ${apigeeOrg.id}
      peeringCidrRange: SLASH_22
  apigeeAppGroup:
    type: gcp:apigee:AppGroup
    name: apigee_app_group
    properties:
      name: my-app-group
      displayName: Test app group
      channelId: storefront
      channelUri: https://my-dev-portal.org/groups/my-group
      status: active
      orgId: ${apigeeOrg.id}
      attributes:
        - name: business_unit
          value: HR
        - name: department
          value: payroll
    options:
      dependsOn:
        - ${apigeeInstance}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

AppGroup can be imported using any of these accepted formats:

* `{{org_id}}/appgroups/{{name}}`

* `{{org_id}}/{{name}}`

When using the `pulumi import` command, AppGroup can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/appGroup:AppGroup default {{org_id}}/appgroups/{{name}}
```

```sh
$ pulumi import gcp:apigee/appGroup:AppGroup default {{org_id}}/{{name}}
```



attributesSBQ*O:M
K
apigeeAppGroupAttribute.gcp:apigee/AppGroupAttribute:AppGroupAttribute4A list of attributes
Structure is documented below.
V
	channelIdB" CChannel identifier identifies the owner maintaining this grouping.
J

channelUriB" 6A reference to the associated storefront/marketplace.
8
displayNameB" #App group name displayed in the UI
h
nameB" ZName of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.

orgId" rThe Apigee Organization associated with the Apigee app group,
in the format `organizations/{{org_name}}`.


- - -
ß
statusB" ÎValid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
Possible values are: `active`, `inactive`.
"<

appGroupId" *Internal identifier that cannot be edited
"

attributesSBQ*O:M
K
apigeeAppGroupAttribute.gcp:apigee/AppGroupAttribute:AppGroupAttribute4A list of attributes
Structure is documented below.
"V
	channelIdB" CChannel identifier identifies the owner maintaining this grouping.
"J

channelUriB" 6A reference to the associated storefront/marketplace.
";
	createdAt" *Created time as milliseconds since epoch.
"8
displayNameB" #App group name displayed in the UI
"A
lastModifiedAt" +Modified time as milliseconds since epoch.
"f
name" ZName of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._-$ %.
"
orgId" rThe Apigee Organization associated with the Apigee app group,
in the format `organizations/{{org_name}}`.


- - -
"7
organization" #App group name displayed in the UI
"ß
statusB" ÎValid values are active or inactive. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as active or inactive.
Possible values are: `active`, `inactive`.
*áÐ
3
apigee	Developergcp:apigee/developer:DeveloperëÂA `Developer` is an API consumer that can have apps registered in Apigee.


To get more information about Developer, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.developers)
* How-to Guides
    * [Creating a developer](https://cloud.google.com/apigee/docs/api-platform/publish/adding-developers-your-api-product)

## Example Usage

### Apigee Developer Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "my-instance",
    location: "us-central1",
    orgId: apigeeOrg.id,
    peeringCidrRange: "SLASH_22",
});
const apigeeDeveloper = new gcp.apigee.Developer("apigee_developer", {
    email: "john.doe@acme.com",
    firstName: "John",
    lastName: "Doe",
    userName: "john.doe",
    orgId: apigeeOrg.id,
}, {
    dependsOn: [apigeeInstance],
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="my-instance",
    location="us-central1",
    org_id=apigee_org.id,
    peering_cidr_range="SLASH_22")
apigee_developer = gcp.apigee.Developer("apigee_developer",
    email="john.doe@acme.com",
    first_name="John",
    last_name="Doe",
    user_name="john.doe",
    org_id=apigee_org.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_instance]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "my-instance",
        Location = "us-central1",
        OrgId = apigeeOrg.Id,
        PeeringCidrRange = "SLASH_22",
    });

    var apigeeDeveloper = new Gcp.Apigee.Developer("apigee_developer", new()
    {
        Email = "john.doe@acme.com",
        FirstName = "John",
        LastName = "Doe",
        UserName = "john.doe",
        OrgId = apigeeOrg.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeInstance,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:             pulumi.String("my-instance"),
			Location:         pulumi.String("us-central1"),
			OrgId:            apigeeOrg.ID(),
			PeeringCidrRange: pulumi.String("SLASH_22"),
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewDeveloper(ctx, "apigee_developer", &apigee.DeveloperArgs{
			Email:     pulumi.String("john.doe@acme.com"),
			FirstName: pulumi.String("John"),
			LastName:  pulumi.String("Doe"),
			UserName:  pulumi.String("john.doe"),
			OrgId:     apigeeOrg.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeInstance,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.gcp.apigee.Developer;
import com.pulumi.gcp.apigee.DeveloperArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("my-instance")
            .location("us-central1")
            .orgId(apigeeOrg.id())
            .peeringCidrRange("SLASH_22")
            .build());

        var apigeeDeveloper = new Developer("apigeeDeveloper", DeveloperArgs.builder()
            .email("john.doe@acme.com")
            .firstName("John")
            .lastName("Doe")
            .userName("john.doe")
            .orgId(apigeeOrg.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeInstance)
                .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: my-instance
      location: us-central1
      orgId: ${apigeeOrg.id}
      peeringCidrRange: SLASH_22
  apigeeDeveloper:
    type: gcp:apigee:Developer
    name: apigee_developer
    properties:
      email: john.doe@acme.com
      firstName: John
      lastName: Doe
      userName: john.doe
      orgId: ${apigeeOrg.id}
    options:
      dependsOn:
        - ${apigeeInstance}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Apigee Developer With Attributes


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "my-instance",
    location: "us-central1",
    orgId: apigeeOrg.id,
    peeringCidrRange: "SLASH_22",
});
const apigeeDeveloper = new gcp.apigee.Developer("apigee_developer", {
    email: "john.doe@acme.com",
    firstName: "John",
    lastName: "Doe",
    userName: "john.doe",
    attributes: [
        {
            name: "business_unit",
            value: "HR",
        },
        {
            name: "department",
            value: "payroll",
        },
    ],
    orgId: apigeeOrg.id,
}, {
    dependsOn: [apigeeInstance],
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="my-instance",
    location="us-central1",
    org_id=apigee_org.id,
    peering_cidr_range="SLASH_22")
apigee_developer = gcp.apigee.Developer("apigee_developer",
    email="john.doe@acme.com",
    first_name="John",
    last_name="Doe",
    user_name="john.doe",
    attributes=[
        {
            "name": "business_unit",
            "value": "HR",
        },
        {
            "name": "department",
            "value": "payroll",
        },
    ],
    org_id=apigee_org.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_instance]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "my-instance",
        Location = "us-central1",
        OrgId = apigeeOrg.Id,
        PeeringCidrRange = "SLASH_22",
    });

    var apigeeDeveloper = new Gcp.Apigee.Developer("apigee_developer", new()
    {
        Email = "john.doe@acme.com",
        FirstName = "John",
        LastName = "Doe",
        UserName = "john.doe",
        Attributes = new[]
        {
            new Gcp.Apigee.Inputs.DeveloperAttributeArgs
            {
                Name = "business_unit",
                Value = "HR",
            },
            new Gcp.Apigee.Inputs.DeveloperAttributeArgs
            {
                Name = "department",
                Value = "payroll",
            },
        },
        OrgId = apigeeOrg.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeInstance,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:             pulumi.String("my-instance"),
			Location:         pulumi.String("us-central1"),
			OrgId:            apigeeOrg.ID(),
			PeeringCidrRange: pulumi.String("SLASH_22"),
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewDeveloper(ctx, "apigee_developer", &apigee.DeveloperArgs{
			Email:     pulumi.String("john.doe@acme.com"),
			FirstName: pulumi.String("John"),
			LastName:  pulumi.String("Doe"),
			UserName:  pulumi.String("john.doe"),
			Attributes: apigee.DeveloperAttributeArray{
				&apigee.DeveloperAttributeArgs{
					Name:  pulumi.String("business_unit"),
					Value: pulumi.String("HR"),
				},
				&apigee.DeveloperAttributeArgs{
					Name:  pulumi.String("department"),
					Value: pulumi.String("payroll"),
				},
			},
			OrgId: apigeeOrg.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeInstance,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.gcp.apigee.Developer;
import com.pulumi.gcp.apigee.DeveloperArgs;
import com.pulumi.gcp.apigee.inputs.DeveloperAttributeArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("my-instance")
            .location("us-central1")
            .orgId(apigeeOrg.id())
            .peeringCidrRange("SLASH_22")
            .build());

        var apigeeDeveloper = new Developer("apigeeDeveloper", DeveloperArgs.builder()
            .email("john.doe@acme.com")
            .firstName("John")
            .lastName("Doe")
            .userName("john.doe")
            .attributes(            
                DeveloperAttributeArgs.builder()
                    .name("business_unit")
                    .value("HR")
                    .build(),
                DeveloperAttributeArgs.builder()
                    .name("department")
                    .value("payroll")
                    .build())
            .orgId(apigeeOrg.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeInstance)
                .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: my-instance
      location: us-central1
      orgId: ${apigeeOrg.id}
      peeringCidrRange: SLASH_22
  apigeeDeveloper:
    type: gcp:apigee:Developer
    name: apigee_developer
    properties:
      email: john.doe@acme.com
      firstName: John
      lastName: Doe
      userName: john.doe
      attributes:
        - name: business_unit
          value: HR
        - name: department
          value: payroll
      orgId: ${apigeeOrg.id}
    options:
      dependsOn:
        - ${apigeeInstance}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Developer can be imported using any of these accepted formats:

* `{{org_id}}/developers/{{email}}`

* `{{org_id}}/{{email}}`

When using the `pulumi import` command, Developer can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/developer:Developer default {{org_id}}/developers/{{email}}
```

```sh
$ pulumi import gcp:apigee/developer:Developer default {{org_id}}/{{email}}
```

Ð

attributesVBT*R:P
N
apigeeDeveloperAttribute0gcp:apigee/DeveloperAttribute:DeveloperAttributejDeveloper attributes (name/value pairs). The custom attribute limit is 18.
Structure is documented below.
°
email" ¢Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
.
	firstName" First name of the developer.
,
lastName" Last name of the developer.
~
orgId" qThe Apigee Organization associated with the Apigee instance,
in the format `organizations/{{org_name}}`.


- - -
G
userName" 7User name of the developer. Not used by Apigee hybrid.
"Ð

attributesVBT*R:P
N
apigeeDeveloperAttribute0gcp:apigee/DeveloperAttribute:DeveloperAttributejDeveloper attributes (name/value pairs). The custom attribute limit is 18.
Structure is documented below.
"V
	createdAt" ETime at which the developer was created in milliseconds since epoch.
"°
email" ¢Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only..
".
	firstName" First name of the developer.
"a
lastModifiedAt" KTime at which the developer was last modified in milliseconds since epoch.
",
lastName" Last name of the developer.
"~
orgId" qThe Apigee Organization associated with the Apigee instance,
in the format `organizations/{{org_name}}`.


- - -
"W
organizatioName" @Name of the Apigee organization in which the developer resides.
"M
status" ?Status of the developer. Valid values are active and inactive.
"G
userName" 7User name of the developer. Not used by Apigee hybrid.
*Ì]
N
apigeeEndpointAttachment0gcp:apigee/endpointAttachment:EndpointAttachmentUApigee Endpoint Attachment.


To get more information about EndpointAttachment, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.endpointAttachments/create)
* How-to Guides
    * [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)

## Example Usage

### Apigee Endpoint Attachment Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const apigeeEndpointAttachment = new gcp.apigee.EndpointAttachment("apigee_endpoint_attachment", {
    orgId: apigeeOrg.id,
    endpointAttachmentId: "test1",
    location: "{google_compute_service_attachment location}",
    serviceAttachment: "{google_compute_service_attachment id}",
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
apigee_endpoint_attachment = gcp.apigee.EndpointAttachment("apigee_endpoint_attachment",
    org_id=apigee_org.id,
    endpoint_attachment_id="test1",
    location="{google_compute_service_attachment location}",
    service_attachment="{google_compute_service_attachment id}")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var apigeeEndpointAttachment = new Gcp.Apigee.EndpointAttachment("apigee_endpoint_attachment", new()
    {
        OrgId = apigeeOrg.Id,
        EndpointAttachmentId = "test1",
        Location = "{google_compute_service_attachment location}",
        ServiceAttachment = "{google_compute_service_attachment id}",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = apigee.NewEndpointAttachment(ctx, "apigee_endpoint_attachment", &apigee.EndpointAttachmentArgs{
			OrgId:                apigeeOrg.ID(),
			EndpointAttachmentId: pulumi.String("test1"),
			Location:             pulumi.String("{google_compute_service_attachment location}"),
			ServiceAttachment:    pulumi.String("{google_compute_service_attachment id}"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.EndpointAttachment;
import com.pulumi.gcp.apigee.EndpointAttachmentArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var apigeeEndpointAttachment = new EndpointAttachment("apigeeEndpointAttachment", EndpointAttachmentArgs.builder()
            .orgId(apigeeOrg.id())
            .endpointAttachmentId("test1")
            .location("{google_compute_service_attachment location}")
            .serviceAttachment("{google_compute_service_attachment id}")
            .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  apigeeEndpointAttachment:
    type: gcp:apigee:EndpointAttachment
    name: apigee_endpoint_attachment
    properties:
      orgId: ${apigeeOrg.id}
      endpointAttachmentId: test1
      location: '{google_compute_service_attachment location}'
      serviceAttachment: '{google_compute_service_attachment id}'
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

EndpointAttachment can be imported using any of these accepted formats:

* `{{org_id}}/endpointAttachments/{{endpoint_attachment_id}}`

* `{{org_id}}/{{endpoint_attachment_id}}`

When using the `pulumi import` command, EndpointAttachment can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/endpointAttachment:EndpointAttachment default {{org_id}}/endpointAttachments/{{endpoint_attachment_id}}
```

```sh
$ pulumi import gcp:apigee/endpointAttachment:EndpointAttachment default {{org_id}}/{{endpoint_attachment_id}}
```

C
endpointAttachmentId" 'ID of the endpoint attachment.


- - -
5
location" %Location of the endpoint attachment.
v
orgId" iThe Apigee Organization associated with the Apigee instance,
in the format `organizations/{{org_name}}`.
K
serviceAttachment" 2Format: projects/*/regions/*/serviceAttachments/*
"^
connectionState" GState of the endpoint attachment connection to the service attachment.
"C
endpointAttachmentId" 'ID of the endpoint attachment.


- - -
"l
host" `Host that can be used in either HTTP Target Endpoint directly, or as the host in Target Server.
"5
location" %Location of the endpoint attachment.
"
name" Name of the Endpoint Attachment in the following format:
organizations/{organization}/endpointAttachments/{endpointAttachment}.
"v
orgId" iThe Apigee Organization associated with the Apigee instance,
in the format `organizations/{{org_name}}`.
"K
serviceAttachment" 2Format: projects/*/regions/*/serviceAttachments/*
*Q
0
apigeeEnvGroupgcp:apigee/envGroup:EnvGroupÔLAn `Environment group` in Apigee.


To get more information about Envgroup, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.envgroups/create)
* How-to Guides
    * [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)

## Example Usage

### Apigee Environment Group Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const envGrp = new gcp.apigee.EnvGroup("env_grp", {
    name: "my-envgroup",
    hostnames: ["abc.foo.com"],
    orgId: apigeeOrg.id,
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
env_grp = gcp.apigee.EnvGroup("env_grp",
    name="my-envgroup",
    hostnames=["abc.foo.com"],
    org_id=apigee_org.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var envGrp = new Gcp.Apigee.EnvGroup("env_grp", new()
    {
        Name = "my-envgroup",
        Hostnames = new[]
        {
            "abc.foo.com",
        },
        OrgId = apigeeOrg.Id,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = apigee.NewEnvGroup(ctx, "env_grp", &apigee.EnvGroupArgs{
			Name: pulumi.String("my-envgroup"),
			Hostnames: pulumi.StringArray{
				pulumi.String("abc.foo.com"),
			},
			OrgId: apigeeOrg.ID(),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.EnvGroup;
import com.pulumi.gcp.apigee.EnvGroupArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var envGrp = new EnvGroup("envGrp", EnvGroupArgs.builder()
            .name("my-envgroup")
            .hostnames("abc.foo.com")
            .orgId(apigeeOrg.id())
            .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  envGrp:
    type: gcp:apigee:EnvGroup
    name: env_grp
    properties:
      name: my-envgroup
      hostnames:
        - abc.foo.com
      orgId: ${apigeeOrg.id}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Envgroup can be imported using any of these accepted formats:

* `{{org_id}}/envgroups/{{name}}`

* `{{org_id}}/{{name}}`

When using the `pulumi import` command, Envgroup can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/envGroup:EnvGroup default {{org_id}}/envgroups/{{name}}
```

```sh
$ pulumi import gcp:apigee/envGroup:EnvGroup default {{org_id}}/{{name}}
```

9
	hostnamesB*" $Hostnames of the environment group.
8
nameB" *The resource ID of the environment group.

orgId" zThe Apigee Organization associated with the Apigee environment group,
in the format `organizations/{{org_name}}`.


- - -
"9
	hostnamesB*" $Hostnames of the environment group.
"6
name" *The resource ID of the environment group.
"
orgId" zThe Apigee Organization associated with the Apigee environment group,
in the format `organizations/{{org_name}}`.


- - -
*ã
N
apigeeEnvGroupAttachment0gcp:apigee/envGroupAttachment:EnvGroupAttachmentüAn `Environment Group attachment` in Apigee.


To get more information about EnvgroupAttachment, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.envgroups.attachments/create)
* How-to Guides
    * [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)

## Example Usage

## Import

EnvgroupAttachment can be imported using any of these accepted formats:

* `{{envgroup_id}}/attachments/{{name}}`

* `{{envgroup_id}}/{{name}}`

When using the `pulumi import` command, EnvgroupAttachment can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/envGroupAttachment:EnvGroupAttachment default {{envgroup_id}}/attachments/{{name}}
```

```sh
$ pulumi import gcp:apigee/envGroupAttachment:EnvGroupAttachment default {{envgroup_id}}/{{name}}
```

¨

envgroupId" The Apigee environment group associated with the Apigee environment,
in the format `organizations/{{org_name}}/envgroups/{{envgroup_name}}`.


- - -
7
environment" $The resource ID of the environment.
"¨

envgroupId" The Apigee environment group associated with the Apigee environment,
in the format `organizations/{{org_name}}/envgroups/{{envgroup_name}}`.


- - -
"7
environment" $The resource ID of the environment.
"J
name" >The name of the newly created  attachment (output parameter).
*»

9
apigeeEnvKeystore"gcp:apigee/envKeystore:EnvKeystoreAn `Environment KeyStore` in Apigee.


To get more information about EnvKeystore, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores/create)
* How-to Guides
    * [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)

## Import

EnvKeystore can be imported using any of these accepted formats:

* `{{env_id}}/keystores/{{name}}`

* `{{env_id}}/{{name}}`

When using the `pulumi import` command, EnvKeystore can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/envKeystore:EnvKeystore default {{env_id}}/keystores/{{name}}
```

```sh
$ pulumi import gcp:apigee/envKeystore:EnvKeystore default {{env_id}}/{{name}}
```

¡
envId" The Apigee environment group associated with the Apigee environment,
in the format `organizations/{{org_name}}/environments/{{env_name}}`.


- - -
6
nameB" (The name of the newly created keystore.
"+
aliases*" Aliases in this keystore.
"¡
envId" The Apigee environment group associated with the Apigee environment,
in the format `organizations/{{org_name}}/environments/{{env_name}}`.


- - -
"4
name" (The name of the newly created keystore.
*
?
apigeeEnvReferences&gcp:apigee/envReferences:EnvReferences¬An `Environment Reference` in Apigee.


To get more information about EnvReferences, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.references/create)
* How-to Guides
    * [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)

## Import

EnvReferences can be imported using any of these accepted formats:

* `{{env_id}}/references/{{name}}`

* `{{env_id}}/{{name}}`

When using the `pulumi import` command, EnvReferences can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/envReferences:EnvReferences default {{env_id}}/references/{{name}}
```

```sh
$ pulumi import gcp:apigee/envReferences:EnvReferences default {{env_id}}/{{name}}
```

O
descriptionB" :Optional. A human-readable description of this reference.
¡
envId" The Apigee environment group associated with the Apigee environment,
in the format `organizations/{{org_name}}/environments/{{env_name}}`.


- - -
o
nameB" aRequired. The resource id of this reference. Values must match the regular expression [\w\s-.]+.
µ
refers" ¦Required. The id of the resource to which this reference refers. Must be the id of a resource that exists in the parent environment and is of the given resourceType.
u
resourceType" aThe type of resource referred to by this reference. Valid values are 'KeyStore' or 'TrustStore'.
"O
descriptionB" :Optional. A human-readable description of this reference.
"¡
envId" The Apigee environment group associated with the Apigee environment,
in the format `organizations/{{org_name}}/environments/{{env_name}}`.


- - -
"m
name" aRequired. The resource id of this reference. Values must match the regular expression [\w\s-.]+.
"µ
refers" ¦Required. The id of the resource to which this reference refers. Must be the id of a resource that exists in the parent environment and is of the given resourceType.
"u
resourceType" aThe type of resource referred to by this reference. Valid values are 'KeyStore' or 'TrustStore'.
*ßl
9
apigeeEnvironment"gcp:apigee/environment:Environment·NAn `Environment` in Apigee.


To get more information about Environment, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments/create)
* How-to Guides
    * [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)

## Example Usage

### Apigee Environment Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const env = new gcp.apigee.Environment("env", {
    name: "my-environment",
    description: "Apigee Environment",
    displayName: "environment-1",
    orgId: apigeeOrg.id,
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
env = gcp.apigee.Environment("env",
    name="my-environment",
    description="Apigee Environment",
    display_name="environment-1",
    org_id=apigee_org.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var env = new Gcp.Apigee.Environment("env", new()
    {
        Name = "my-environment",
        Description = "Apigee Environment",
        DisplayName = "environment-1",
        OrgId = apigeeOrg.Id,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = apigee.NewEnvironment(ctx, "env", &apigee.EnvironmentArgs{
			Name:        pulumi.String("my-environment"),
			Description: pulumi.String("Apigee Environment"),
			DisplayName: pulumi.String("environment-1"),
			OrgId:       apigeeOrg.ID(),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Environment;
import com.pulumi.gcp.apigee.EnvironmentArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var env = new Environment("env", EnvironmentArgs.builder()
            .name("my-environment")
            .description("Apigee Environment")
            .displayName("environment-1")
            .orgId(apigeeOrg.id())
            .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  env:
    type: gcp:apigee:Environment
    properties:
      name: my-environment
      description: Apigee Environment
      displayName: environment-1
      orgId: ${apigeeOrg.id}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Environment can be imported using any of these accepted formats:

* `{{org_id}}/environments/{{name}}`

* `{{org_id}}/{{name}}`

When using the `pulumi import` command, Environment can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/environment:Environment default {{org_id}}/environments/{{name}}
```

```sh
$ pulumi import gcp:apigee/environment:Environment default {{org_id}}/{{name}}
```

ê
apiProxyTypeB" ÓOptional. API Proxy type supported by the environment. The type can be set when creating
the Environment and cannot be changed.
Possible values are: `API_PROXY_TYPE_UNSPECIFIED`, `PROGRAMMABLE`, `CONFIGURABLE`.

deploymentTypeB" ôOptional. Deployment type supported by the environment. The deployment type can be
set when creating the environment and cannot be changed. When you enable archive
deployment, you will be prevented from performing a subset of actions within the
environment, including:
Managing the deployment of API proxy or shared flow revisions;
Creating, updating, or deleting resource files;
Creating, updating, or deleting target servers.
Possible values are: `DEPLOYMENT_TYPE_UNSPECIFIED`, `PROXY`, `ARCHIVE`.
5
descriptionB"  Description of the environment.
6
displayNameB" !Display name of the environment.

forwardProxyUriB" ìOptional. URI of the forward proxy to be applied to the runtime instances in this environment. Must be in the format of {scheme}://{hostname}:{port}. Note that the scheme must be one of "http" or "https", and the port must be supplied.
2
nameB" $The resource ID of the environment.
à

nodeConfig]B[:Y
W
apigeeEnvironmentNodeConfig6gcp:apigee/EnvironmentNodeConfig:EnvironmentNodeConfigsNodeConfig for setting the min/max number of nodes associated with the environment.
Structure is documented below.

orgId" tThe Apigee Organization associated with the Apigee environment,
in the format `organizations/{{org_name}}`.


- - -
ç
typeB" ØTypes that can be selected for an Environment. Each of the types are
limited by capability and capacity. Refer to Apigee's public documentation
to understand about each of these types in details.
An Apigee org can support heterogeneous Environments.
Possible values are: `ENVIRONMENT_TYPE_UNSPECIFIED`, `BASE`, `INTERMEDIATE`, `COMPREHENSIVE`.
"è
apiProxyType" ÓOptional. API Proxy type supported by the environment. The type can be set when creating
the Environment and cannot be changed.
Possible values are: `API_PROXY_TYPE_UNSPECIFIED`, `PROGRAMMABLE`, `CONFIGURABLE`.
"
deploymentType" ôOptional. Deployment type supported by the environment. The deployment type can be
set when creating the environment and cannot be changed. When you enable archive
deployment, you will be prevented from performing a subset of actions within the
environment, including:
Managing the deployment of API proxy or shared flow revisions;
Creating, updating, or deleting resource files;
Creating, updating, or deleting target servers.
Possible values are: `DEPLOYMENT_TYPE_UNSPECIFIED`, `PROXY`, `ARCHIVE`.
"5
descriptionB"  Description of the environment.
"6
displayNameB" !Display name of the environment.
"
forwardProxyUriB" ìOptional. URI of the forward proxy to be applied to the runtime instances in this environment. Must be in the format of {scheme}://{hostname}:{port}. Note that the scheme must be one of "http" or "https", and the port must be supplied.
"0
name" $The resource ID of the environment.
"Þ

nodeConfig[:Y
W
apigeeEnvironmentNodeConfig6gcp:apigee/EnvironmentNodeConfig:EnvironmentNodeConfigsNodeConfig for setting the min/max number of nodes associated with the environment.
Structure is documented below.
"
orgId" tThe Apigee Organization associated with the Apigee environment,
in the format `organizations/{{org_name}}`.


- - -
"å
type" ØTypes that can be selected for an Environment. Each of the types are
limited by capability and capacity. Refer to Apigee's public documentation
to understand about each of these types in details.
An Apigee org can support heterogeneous Environments.
Possible values are: `ENVIRONMENT_TYPE_UNSPECIFIED`, `BASE`, `INTERMEDIATE`, `COMPREHENSIVE`.
*Ï
W
apigeeEnvironmentIamBinding6gcp:apigee/environmentIamBinding:EnvironmentIamBindingÜ³Three different resources help you manage your IAM policy for Apigee Environment. Each of these resources serves a different use case:

* `gcp.apigee.EnvironmentIamPolicy`: Authoritative. Sets the IAM policy for the environment and replaces any existing policy already attached.
* `gcp.apigee.EnvironmentIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the environment are preserved.
* `gcp.apigee.EnvironmentIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the environment are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigee.EnvironmentIamPolicy`: Retrieves the IAM policy for the environment

> **Note:** `gcp.apigee.EnvironmentIamPolicy` **cannot** be used in conjunction with `gcp.apigee.EnvironmentIamBinding` and `gcp.apigee.EnvironmentIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigee.EnvironmentIamBinding` resources **can be** used in conjunction with `gcp.apigee.EnvironmentIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.apigee.EnvironmentIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigee.EnvironmentIamPolicy("policy", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigee.EnvironmentIamPolicy("policy",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Apigee.EnvironmentIamPolicy("policy", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigee.NewEnvironmentIamPolicy(ctx, "policy", &apigee.EnvironmentIamPolicyArgs{
			OrgId:      pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:      pulumi.Any(apigeeEnvironment.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigee.EnvironmentIamPolicy;
import com.pulumi.gcp.apigee.EnvironmentIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new EnvironmentIamPolicy("policy", EnvironmentIamPolicyArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigee:EnvironmentIamPolicy
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigee.EnvironmentIamBinding("binding", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigee.EnvironmentIamBinding("binding",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Apigee.EnvironmentIamBinding("binding", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamBinding(ctx, "binding", &apigee.EnvironmentIamBindingArgs{
			OrgId: pulumi.Any(apigeeEnvironment.OrgId),
			EnvId: pulumi.Any(apigeeEnvironment.Name),
			Role:  pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamBinding;
import com.pulumi.gcp.apigee.EnvironmentIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new EnvironmentIamBinding("binding", EnvironmentIamBindingArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigee:EnvironmentIamBinding
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigee.EnvironmentIamMember("member", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigee.EnvironmentIamMember("member",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Apigee.EnvironmentIamMember("member", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamMember(ctx, "member", &apigee.EnvironmentIamMemberArgs{
			OrgId:  pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:  pulumi.Any(apigeeEnvironment.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamMember;
import com.pulumi.gcp.apigee.EnvironmentIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new EnvironmentIamMember("member", EnvironmentIamMemberArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigee:EnvironmentIamMember
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Apigee Environment
Three different resources help you manage your IAM policy for Apigee Environment. Each of these resources serves a different use case:

* `gcp.apigee.EnvironmentIamPolicy`: Authoritative. Sets the IAM policy for the environment and replaces any existing policy already attached.
* `gcp.apigee.EnvironmentIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the environment are preserved.
* `gcp.apigee.EnvironmentIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the environment are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigee.EnvironmentIamPolicy`: Retrieves the IAM policy for the environment

> **Note:** `gcp.apigee.EnvironmentIamPolicy` **cannot** be used in conjunction with `gcp.apigee.EnvironmentIamBinding` and `gcp.apigee.EnvironmentIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigee.EnvironmentIamBinding` resources **can be** used in conjunction with `gcp.apigee.EnvironmentIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.apigee.EnvironmentIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigee.EnvironmentIamPolicy("policy", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigee.EnvironmentIamPolicy("policy",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Apigee.EnvironmentIamPolicy("policy", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigee.NewEnvironmentIamPolicy(ctx, "policy", &apigee.EnvironmentIamPolicyArgs{
			OrgId:      pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:      pulumi.Any(apigeeEnvironment.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigee.EnvironmentIamPolicy;
import com.pulumi.gcp.apigee.EnvironmentIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new EnvironmentIamPolicy("policy", EnvironmentIamPolicyArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigee:EnvironmentIamPolicy
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigee.EnvironmentIamBinding("binding", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigee.EnvironmentIamBinding("binding",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Apigee.EnvironmentIamBinding("binding", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamBinding(ctx, "binding", &apigee.EnvironmentIamBindingArgs{
			OrgId: pulumi.Any(apigeeEnvironment.OrgId),
			EnvId: pulumi.Any(apigeeEnvironment.Name),
			Role:  pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamBinding;
import com.pulumi.gcp.apigee.EnvironmentIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new EnvironmentIamBinding("binding", EnvironmentIamBindingArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigee:EnvironmentIamBinding
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigee.EnvironmentIamMember("member", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigee.EnvironmentIamMember("member",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Apigee.EnvironmentIamMember("member", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamMember(ctx, "member", &apigee.EnvironmentIamMemberArgs{
			OrgId:  pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:  pulumi.Any(apigeeEnvironment.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamMember;
import com.pulumi.gcp.apigee.EnvironmentIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new EnvironmentIamMember("member", EnvironmentIamMemberArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigee:EnvironmentIamMember
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* {{org_id}}/environments/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Apigee environment IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigee/environmentIamBinding:EnvironmentIamBinding editor "{{org_id}}/environments/{{environment}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigee/environmentIamBinding:EnvironmentIamBinding editor "{{org_id}}/environments/{{environment}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigee/environmentIamBinding:EnvironmentIamBinding editor {{org_id}}/environments/{{environment}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.


	conditionxBv:t
r
apigeeEnvironmentIamBindingConditionHgcp:apigee/EnvironmentIamBindingCondition:EnvironmentIamBindingConditionH
envId" ;Used to find the parent resource to bind the IAM policy to
Ö	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

orgId" Ù
role" ÌThe role that should be applied. Only one
`gcp.apigee.EnvironmentIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"
	conditionxBv:t
r
apigeeEnvironmentIamBindingConditionHgcp:apigee/EnvironmentIamBindingCondition:EnvironmentIamBindingCondition"H
envId" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"Ö	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
orgId" "Ù
role" ÌThe role that should be applied. Only one
`gcp.apigee.EnvironmentIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*Ï
T
apigeeEnvironmentIamMember4gcp:apigee/environmentIamMember:EnvironmentIamMemberÖ³Three different resources help you manage your IAM policy for Apigee Environment. Each of these resources serves a different use case:

* `gcp.apigee.EnvironmentIamPolicy`: Authoritative. Sets the IAM policy for the environment and replaces any existing policy already attached.
* `gcp.apigee.EnvironmentIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the environment are preserved.
* `gcp.apigee.EnvironmentIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the environment are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigee.EnvironmentIamPolicy`: Retrieves the IAM policy for the environment

> **Note:** `gcp.apigee.EnvironmentIamPolicy` **cannot** be used in conjunction with `gcp.apigee.EnvironmentIamBinding` and `gcp.apigee.EnvironmentIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigee.EnvironmentIamBinding` resources **can be** used in conjunction with `gcp.apigee.EnvironmentIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.apigee.EnvironmentIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigee.EnvironmentIamPolicy("policy", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigee.EnvironmentIamPolicy("policy",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Apigee.EnvironmentIamPolicy("policy", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigee.NewEnvironmentIamPolicy(ctx, "policy", &apigee.EnvironmentIamPolicyArgs{
			OrgId:      pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:      pulumi.Any(apigeeEnvironment.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigee.EnvironmentIamPolicy;
import com.pulumi.gcp.apigee.EnvironmentIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new EnvironmentIamPolicy("policy", EnvironmentIamPolicyArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigee:EnvironmentIamPolicy
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigee.EnvironmentIamBinding("binding", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigee.EnvironmentIamBinding("binding",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Apigee.EnvironmentIamBinding("binding", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamBinding(ctx, "binding", &apigee.EnvironmentIamBindingArgs{
			OrgId: pulumi.Any(apigeeEnvironment.OrgId),
			EnvId: pulumi.Any(apigeeEnvironment.Name),
			Role:  pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamBinding;
import com.pulumi.gcp.apigee.EnvironmentIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new EnvironmentIamBinding("binding", EnvironmentIamBindingArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigee:EnvironmentIamBinding
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigee.EnvironmentIamMember("member", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigee.EnvironmentIamMember("member",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Apigee.EnvironmentIamMember("member", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamMember(ctx, "member", &apigee.EnvironmentIamMemberArgs{
			OrgId:  pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:  pulumi.Any(apigeeEnvironment.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamMember;
import com.pulumi.gcp.apigee.EnvironmentIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new EnvironmentIamMember("member", EnvironmentIamMemberArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigee:EnvironmentIamMember
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Apigee Environment
Three different resources help you manage your IAM policy for Apigee Environment. Each of these resources serves a different use case:

* `gcp.apigee.EnvironmentIamPolicy`: Authoritative. Sets the IAM policy for the environment and replaces any existing policy already attached.
* `gcp.apigee.EnvironmentIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the environment are preserved.
* `gcp.apigee.EnvironmentIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the environment are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigee.EnvironmentIamPolicy`: Retrieves the IAM policy for the environment

> **Note:** `gcp.apigee.EnvironmentIamPolicy` **cannot** be used in conjunction with `gcp.apigee.EnvironmentIamBinding` and `gcp.apigee.EnvironmentIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigee.EnvironmentIamBinding` resources **can be** used in conjunction with `gcp.apigee.EnvironmentIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.apigee.EnvironmentIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigee.EnvironmentIamPolicy("policy", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigee.EnvironmentIamPolicy("policy",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Apigee.EnvironmentIamPolicy("policy", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigee.NewEnvironmentIamPolicy(ctx, "policy", &apigee.EnvironmentIamPolicyArgs{
			OrgId:      pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:      pulumi.Any(apigeeEnvironment.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigee.EnvironmentIamPolicy;
import com.pulumi.gcp.apigee.EnvironmentIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new EnvironmentIamPolicy("policy", EnvironmentIamPolicyArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigee:EnvironmentIamPolicy
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigee.EnvironmentIamBinding("binding", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigee.EnvironmentIamBinding("binding",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Apigee.EnvironmentIamBinding("binding", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamBinding(ctx, "binding", &apigee.EnvironmentIamBindingArgs{
			OrgId: pulumi.Any(apigeeEnvironment.OrgId),
			EnvId: pulumi.Any(apigeeEnvironment.Name),
			Role:  pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamBinding;
import com.pulumi.gcp.apigee.EnvironmentIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new EnvironmentIamBinding("binding", EnvironmentIamBindingArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigee:EnvironmentIamBinding
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigee.EnvironmentIamMember("member", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigee.EnvironmentIamMember("member",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Apigee.EnvironmentIamMember("member", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamMember(ctx, "member", &apigee.EnvironmentIamMemberArgs{
			OrgId:  pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:  pulumi.Any(apigeeEnvironment.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamMember;
import com.pulumi.gcp.apigee.EnvironmentIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new EnvironmentIamMember("member", EnvironmentIamMemberArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigee:EnvironmentIamMember
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* {{org_id}}/environments/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Apigee environment IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigee/environmentIamMember:EnvironmentIamMember editor "{{org_id}}/environments/{{environment}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigee/environmentIamMember:EnvironmentIamMember editor "{{org_id}}/environments/{{environment}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigee/environmentIamMember:EnvironmentIamMember editor {{org_id}}/environments/{{environment}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.


	conditionuBs:q
o
apigeeEnvironmentIamMemberConditionFgcp:apigee/EnvironmentIamMemberCondition:EnvironmentIamMemberConditionH
envId" ;Used to find the parent resource to bind the IAM policy to
Ó	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

orgId" Ù
role" ÌThe role that should be applied. Only one
`gcp.apigee.EnvironmentIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"
	conditionuBs:q
o
apigeeEnvironmentIamMemberConditionFgcp:apigee/EnvironmentIamMemberCondition:EnvironmentIamMemberCondition"H
envId" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"Ó	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
orgId" "Ù
role" ÌThe role that should be applied. Only one
`gcp.apigee.EnvironmentIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*Õ·
T
apigeeEnvironmentIamPolicy4gcp:apigee/environmentIamPolicy:EnvironmentIamPolicyÖ³Three different resources help you manage your IAM policy for Apigee Environment. Each of these resources serves a different use case:

* `gcp.apigee.EnvironmentIamPolicy`: Authoritative. Sets the IAM policy for the environment and replaces any existing policy already attached.
* `gcp.apigee.EnvironmentIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the environment are preserved.
* `gcp.apigee.EnvironmentIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the environment are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigee.EnvironmentIamPolicy`: Retrieves the IAM policy for the environment

> **Note:** `gcp.apigee.EnvironmentIamPolicy` **cannot** be used in conjunction with `gcp.apigee.EnvironmentIamBinding` and `gcp.apigee.EnvironmentIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigee.EnvironmentIamBinding` resources **can be** used in conjunction with `gcp.apigee.EnvironmentIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.apigee.EnvironmentIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigee.EnvironmentIamPolicy("policy", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigee.EnvironmentIamPolicy("policy",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Apigee.EnvironmentIamPolicy("policy", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigee.NewEnvironmentIamPolicy(ctx, "policy", &apigee.EnvironmentIamPolicyArgs{
			OrgId:      pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:      pulumi.Any(apigeeEnvironment.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigee.EnvironmentIamPolicy;
import com.pulumi.gcp.apigee.EnvironmentIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new EnvironmentIamPolicy("policy", EnvironmentIamPolicyArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigee:EnvironmentIamPolicy
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigee.EnvironmentIamBinding("binding", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigee.EnvironmentIamBinding("binding",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Apigee.EnvironmentIamBinding("binding", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamBinding(ctx, "binding", &apigee.EnvironmentIamBindingArgs{
			OrgId: pulumi.Any(apigeeEnvironment.OrgId),
			EnvId: pulumi.Any(apigeeEnvironment.Name),
			Role:  pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamBinding;
import com.pulumi.gcp.apigee.EnvironmentIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new EnvironmentIamBinding("binding", EnvironmentIamBindingArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigee:EnvironmentIamBinding
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigee.EnvironmentIamMember("member", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigee.EnvironmentIamMember("member",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Apigee.EnvironmentIamMember("member", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamMember(ctx, "member", &apigee.EnvironmentIamMemberArgs{
			OrgId:  pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:  pulumi.Any(apigeeEnvironment.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamMember;
import com.pulumi.gcp.apigee.EnvironmentIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new EnvironmentIamMember("member", EnvironmentIamMemberArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigee:EnvironmentIamMember
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Apigee Environment
Three different resources help you manage your IAM policy for Apigee Environment. Each of these resources serves a different use case:

* `gcp.apigee.EnvironmentIamPolicy`: Authoritative. Sets the IAM policy for the environment and replaces any existing policy already attached.
* `gcp.apigee.EnvironmentIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the environment are preserved.
* `gcp.apigee.EnvironmentIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the environment are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.apigee.EnvironmentIamPolicy`: Retrieves the IAM policy for the environment

> **Note:** `gcp.apigee.EnvironmentIamPolicy` **cannot** be used in conjunction with `gcp.apigee.EnvironmentIamBinding` and `gcp.apigee.EnvironmentIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.apigee.EnvironmentIamBinding` resources **can be** used in conjunction with `gcp.apigee.EnvironmentIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.apigee.EnvironmentIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.apigee.EnvironmentIamPolicy("policy", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.apigee.EnvironmentIamPolicy("policy",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Apigee.EnvironmentIamPolicy("policy", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = apigee.NewEnvironmentIamPolicy(ctx, "policy", &apigee.EnvironmentIamPolicyArgs{
			OrgId:      pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:      pulumi.Any(apigeeEnvironment.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.apigee.EnvironmentIamPolicy;
import com.pulumi.gcp.apigee.EnvironmentIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new EnvironmentIamPolicy("policy", EnvironmentIamPolicyArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:apigee:EnvironmentIamPolicy
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.apigee.EnvironmentIamBinding("binding", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.apigee.EnvironmentIamBinding("binding",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Apigee.EnvironmentIamBinding("binding", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamBinding(ctx, "binding", &apigee.EnvironmentIamBindingArgs{
			OrgId: pulumi.Any(apigeeEnvironment.OrgId),
			EnvId: pulumi.Any(apigeeEnvironment.Name),
			Role:  pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamBinding;
import com.pulumi.gcp.apigee.EnvironmentIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new EnvironmentIamBinding("binding", EnvironmentIamBindingArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:apigee:EnvironmentIamBinding
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.apigee.EnvironmentIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.apigee.EnvironmentIamMember("member", {
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.apigee.EnvironmentIamMember("member",
    org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Apigee.EnvironmentIamMember("member", new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.NewEnvironmentIamMember(ctx, "member", &apigee.EnvironmentIamMemberArgs{
			OrgId:  pulumi.Any(apigeeEnvironment.OrgId),
			EnvId:  pulumi.Any(apigeeEnvironment.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.EnvironmentIamMember;
import com.pulumi.gcp.apigee.EnvironmentIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new EnvironmentIamMember("member", EnvironmentIamMemberArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:apigee:EnvironmentIamMember
    properties:
      orgId: ${apigeeEnvironment.orgId}
      envId: ${apigeeEnvironment.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* {{org_id}}/environments/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Apigee environment IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:apigee/environmentIamPolicy:EnvironmentIamPolicy editor "{{org_id}}/environments/{{environment}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:apigee/environmentIamPolicy:EnvironmentIamPolicy editor "{{org_id}}/environments/{{environment}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:apigee/environmentIamPolicy:EnvironmentIamPolicy editor {{org_id}}/environments/{{environment}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

H
envId" ;Used to find the parent resource to bind the IAM policy to

orgId" _

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"H
envId" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"
orgId" "_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
*â{
]
apigeeEnvironmentKeyvaluemaps:gcp:apigee/environmentKeyvaluemaps:EnvironmentKeyvaluemapsÔwCollection of key/value string pairs.


To get more information about EnvironmentKeyvaluemaps, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keyvaluemaps/create)
* How-to Guides
    * [Using key value maps](https://cloud.google.com/apigee/docs/api-platform/cache/key-value-maps)

## Example Usage

### Apigee Environment Keyvaluemaps Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const apigeeEnvironment = new gcp.apigee.Environment("apigee_environment", {
    orgId: apigeeOrg.id,
    name: "tf-test-env",
    description: "Apigee Environment",
    displayName: "Apigee Environment",
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "tf-test-instance",
    location: "us-central1",
    orgId: apigeeOrg.id,
});
const apigeeInstanceAttachment = new gcp.apigee.InstanceAttachment("apigee_instance_attachment", {
    instanceId: apigeeInstance.id,
    environment: apigeeEnvironment.name,
});
const apigeeEnvironmentKeyvaluemaps = new gcp.apigee.EnvironmentKeyvaluemaps("apigee_environment_keyvaluemaps", {
    envId: apigeeEnvironment.id,
    name: "tf-test-env-kvms",
}, {
    dependsOn: [
        apigeeOrg,
        apigeeEnvironment,
        apigeeInstance,
        apigeeInstanceAttachment,
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
apigee_environment = gcp.apigee.Environment("apigee_environment",
    org_id=apigee_org.id,
    name="tf-test-env",
    description="Apigee Environment",
    display_name="Apigee Environment")
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="tf-test-instance",
    location="us-central1",
    org_id=apigee_org.id)
apigee_instance_attachment = gcp.apigee.InstanceAttachment("apigee_instance_attachment",
    instance_id=apigee_instance.id,
    environment=apigee_environment.name)
apigee_environment_keyvaluemaps = gcp.apigee.EnvironmentKeyvaluemaps("apigee_environment_keyvaluemaps",
    env_id=apigee_environment.id,
    name="tf-test-env-kvms",
    opts = pulumi.ResourceOptions(depends_on=[
            apigee_org,
            apigee_environment,
            apigee_instance,
            apigee_instance_attachment,
        ]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var apigeeEnvironment = new Gcp.Apigee.Environment("apigee_environment", new()
    {
        OrgId = apigeeOrg.Id,
        Name = "tf-test-env",
        Description = "Apigee Environment",
        DisplayName = "Apigee Environment",
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "tf-test-instance",
        Location = "us-central1",
        OrgId = apigeeOrg.Id,
    });

    var apigeeInstanceAttachment = new Gcp.Apigee.InstanceAttachment("apigee_instance_attachment", new()
    {
        InstanceId = apigeeInstance.Id,
        Environment = apigeeEnvironment.Name,
    });

    var apigeeEnvironmentKeyvaluemaps = new Gcp.Apigee.EnvironmentKeyvaluemaps("apigee_environment_keyvaluemaps", new()
    {
        EnvId = apigeeEnvironment.Id,
        Name = "tf-test-env-kvms",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeOrg,
            apigeeEnvironment,
            apigeeInstance,
            apigeeInstanceAttachment,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		apigeeEnvironment, err := apigee.NewEnvironment(ctx, "apigee_environment", &apigee.EnvironmentArgs{
			OrgId:       apigeeOrg.ID(),
			Name:        pulumi.String("tf-test-env"),
			Description: pulumi.String("Apigee Environment"),
			DisplayName: pulumi.String("Apigee Environment"),
		})
		if err != nil {
			return err
		}
		apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:     pulumi.String("tf-test-instance"),
			Location: pulumi.String("us-central1"),
			OrgId:    apigeeOrg.ID(),
		})
		if err != nil {
			return err
		}
		apigeeInstanceAttachment, err := apigee.NewInstanceAttachment(ctx, "apigee_instance_attachment", &apigee.InstanceAttachmentArgs{
			InstanceId:  apigeeInstance.ID(),
			Environment: apigeeEnvironment.Name,
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewEnvironmentKeyvaluemaps(ctx, "apigee_environment_keyvaluemaps", &apigee.EnvironmentKeyvaluemapsArgs{
			EnvId: apigeeEnvironment.ID(),
			Name:  pulumi.String("tf-test-env-kvms"),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeOrg,
			apigeeEnvironment,
			apigeeInstance,
			apigeeInstanceAttachment,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Environment;
import com.pulumi.gcp.apigee.EnvironmentArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.gcp.apigee.InstanceAttachment;
import com.pulumi.gcp.apigee.InstanceAttachmentArgs;
import com.pulumi.gcp.apigee.EnvironmentKeyvaluemaps;
import com.pulumi.gcp.apigee.EnvironmentKeyvaluemapsArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var apigeeEnvironment = new Environment("apigeeEnvironment", EnvironmentArgs.builder()
            .orgId(apigeeOrg.id())
            .name("tf-test-env")
            .description("Apigee Environment")
            .displayName("Apigee Environment")
            .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("tf-test-instance")
            .location("us-central1")
            .orgId(apigeeOrg.id())
            .build());

        var apigeeInstanceAttachment = new InstanceAttachment("apigeeInstanceAttachment", InstanceAttachmentArgs.builder()
            .instanceId(apigeeInstance.id())
            .environment(apigeeEnvironment.name())
            .build());

        var apigeeEnvironmentKeyvaluemaps = new EnvironmentKeyvaluemaps("apigeeEnvironmentKeyvaluemaps", EnvironmentKeyvaluemapsArgs.builder()
            .envId(apigeeEnvironment.id())
            .name("tf-test-env-kvms")
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    apigeeOrg,
                    apigeeEnvironment,
                    apigeeInstance,
                    apigeeInstanceAttachment)
                .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  apigeeEnvironment:
    type: gcp:apigee:Environment
    name: apigee_environment
    properties:
      orgId: ${apigeeOrg.id}
      name: tf-test-env
      description: Apigee Environment
      displayName: Apigee Environment
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: tf-test-instance
      location: us-central1
      orgId: ${apigeeOrg.id}
  apigeeInstanceAttachment:
    type: gcp:apigee:InstanceAttachment
    name: apigee_instance_attachment
    properties:
      instanceId: ${apigeeInstance.id}
      environment: ${apigeeEnvironment.name}
  apigeeEnvironmentKeyvaluemaps:
    type: gcp:apigee:EnvironmentKeyvaluemaps
    name: apigee_environment_keyvaluemaps
    properties:
      envId: ${apigeeEnvironment.id}
      name: tf-test-env-kvms
    options:
      dependsOn:
        - ${apigeeOrg}
        - ${apigeeEnvironment}
        - ${apigeeInstance}
        - ${apigeeInstanceAttachment}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

EnvironmentKeyvaluemaps can be imported using any of these accepted formats:

* `{{env_id}}/keyvaluemaps/{{name}}`

* `{{env_id}}/{{name}}`

When using the `pulumi import` command, EnvironmentKeyvaluemaps can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/environmentKeyvaluemaps:EnvironmentKeyvaluemaps default {{env_id}}/keyvaluemaps/{{name}}
```

```sh
$ pulumi import gcp:apigee/environmentKeyvaluemaps:EnvironmentKeyvaluemaps default {{env_id}}/{{name}}
```

¡
envId" The Apigee environment group associated with the Apigee environment,
in the format `organizations/{{org_name}}/environments/{{env_name}}`.


- - -
1
nameB" #Required. ID of the key value map.
"¡
envId" The Apigee environment group associated with the Apigee environment,
in the format `organizations/{{org_name}}/environments/{{env_name}}`.


- - -
"/
name" #Required. ID of the key value map.
*
r
apigeeEnvironmentKeyvaluemapsEntriesHgcp:apigee/environmentKeyvaluemapsEntries:EnvironmentKeyvaluemapsEntries¸Creates key value entries in a key value map scoped to an environment.


To get more information about EnvironmentKeyvaluemapsEntries, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.keyvaluemaps.entries/create)
* How-to Guides
    * [Using key value maps](https://cloud.google.com/apigee/docs/api-platform/cache/key-value-maps)

## Example Usage

### Apigee Environment Keyvaluemaps Entries Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const apigeeEnvironment = new gcp.apigee.Environment("apigee_environment", {
    orgId: apigeeOrg.id,
    name: "tf-test-env",
    description: "Apigee Environment",
    displayName: "Apigee Environment",
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "tf-test-instance",
    location: "us-central1",
    orgId: apigeeOrg.id,
});
const apigeeInstanceAttachment = new gcp.apigee.InstanceAttachment("apigee_instance_attachment", {
    instanceId: apigeeInstance.id,
    environment: apigeeEnvironment.name,
});
const apigeeEnvironmentKeyvaluemaps = new gcp.apigee.EnvironmentKeyvaluemaps("apigee_environment_keyvaluemaps", {
    envId: createApigeeEnvironment.id,
    name: "tf-test-env-kvms",
}, {
    dependsOn: [
        apigeeOrg,
        apigeeEnvironment,
        apigeeInstance,
        apigeeInstanceAttachment,
    ],
});
const apigeeEnvironmentKeyvaluemapsEntries = new gcp.apigee.EnvironmentKeyvaluemapsEntries("apigee_environment_keyvaluemaps_entries", {
    envKeyvaluemapId: apigeeEnvironmentKeyvaluemaps.id,
    name: "testName",
    value: "testValue",
}, {
    dependsOn: [
        apigeeOrg,
        apigeeEnvironment,
        apigeeInstance,
        apigeeInstanceAttachment,
        apigeeEnvironmentKeyvaluemaps,
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
apigee_environment = gcp.apigee.Environment("apigee_environment",
    org_id=apigee_org.id,
    name="tf-test-env",
    description="Apigee Environment",
    display_name="Apigee Environment")
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="tf-test-instance",
    location="us-central1",
    org_id=apigee_org.id)
apigee_instance_attachment = gcp.apigee.InstanceAttachment("apigee_instance_attachment",
    instance_id=apigee_instance.id,
    environment=apigee_environment.name)
apigee_environment_keyvaluemaps = gcp.apigee.EnvironmentKeyvaluemaps("apigee_environment_keyvaluemaps",
    env_id=create_apigee_environment["id"],
    name="tf-test-env-kvms",
    opts = pulumi.ResourceOptions(depends_on=[
            apigee_org,
            apigee_environment,
            apigee_instance,
            apigee_instance_attachment,
        ]))
apigee_environment_keyvaluemaps_entries = gcp.apigee.EnvironmentKeyvaluemapsEntries("apigee_environment_keyvaluemaps_entries",
    env_keyvaluemap_id=apigee_environment_keyvaluemaps.id,
    name="testName",
    value="testValue",
    opts = pulumi.ResourceOptions(depends_on=[
            apigee_org,
            apigee_environment,
            apigee_instance,
            apigee_instance_attachment,
            apigee_environment_keyvaluemaps,
        ]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var apigeeEnvironment = new Gcp.Apigee.Environment("apigee_environment", new()
    {
        OrgId = apigeeOrg.Id,
        Name = "tf-test-env",
        Description = "Apigee Environment",
        DisplayName = "Apigee Environment",
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "tf-test-instance",
        Location = "us-central1",
        OrgId = apigeeOrg.Id,
    });

    var apigeeInstanceAttachment = new Gcp.Apigee.InstanceAttachment("apigee_instance_attachment", new()
    {
        InstanceId = apigeeInstance.Id,
        Environment = apigeeEnvironment.Name,
    });

    var apigeeEnvironmentKeyvaluemaps = new Gcp.Apigee.EnvironmentKeyvaluemaps("apigee_environment_keyvaluemaps", new()
    {
        EnvId = createApigeeEnvironment.Id,
        Name = "tf-test-env-kvms",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeOrg,
            apigeeEnvironment,
            apigeeInstance,
            apigeeInstanceAttachment,
        },
    });

    var apigeeEnvironmentKeyvaluemapsEntries = new Gcp.Apigee.EnvironmentKeyvaluemapsEntries("apigee_environment_keyvaluemaps_entries", new()
    {
        EnvKeyvaluemapId = apigeeEnvironmentKeyvaluemaps.Id,
        Name = "testName",
        Value = "testValue",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeOrg,
            apigeeEnvironment,
            apigeeInstance,
            apigeeInstanceAttachment,
            apigeeEnvironmentKeyvaluemaps,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		apigeeEnvironment, err := apigee.NewEnvironment(ctx, "apigee_environment", &apigee.EnvironmentArgs{
			OrgId:       apigeeOrg.ID(),
			Name:        pulumi.String("tf-test-env"),
			Description: pulumi.String("Apigee Environment"),
			DisplayName: pulumi.String("Apigee Environment"),
		})
		if err != nil {
			return err
		}
		apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:     pulumi.String("tf-test-instance"),
			Location: pulumi.String("us-central1"),
			OrgId:    apigeeOrg.ID(),
		})
		if err != nil {
			return err
		}
		apigeeInstanceAttachment, err := apigee.NewInstanceAttachment(ctx, "apigee_instance_attachment", &apigee.InstanceAttachmentArgs{
			InstanceId:  apigeeInstance.ID(),
			Environment: apigeeEnvironment.Name,
		})
		if err != nil {
			return err
		}
		apigeeEnvironmentKeyvaluemaps, err := apigee.NewEnvironmentKeyvaluemaps(ctx, "apigee_environment_keyvaluemaps", &apigee.EnvironmentKeyvaluemapsArgs{
			EnvId: pulumi.Any(createApigeeEnvironment.Id),
			Name:  pulumi.String("tf-test-env-kvms"),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeOrg,
			apigeeEnvironment,
			apigeeInstance,
			apigeeInstanceAttachment,
		}))
		if err != nil {
			return err
		}
		_, err = apigee.NewEnvironmentKeyvaluemapsEntries(ctx, "apigee_environment_keyvaluemaps_entries", &apigee.EnvironmentKeyvaluemapsEntriesArgs{
			EnvKeyvaluemapId: apigeeEnvironmentKeyvaluemaps.ID(),
			Name:             pulumi.String("testName"),
			Value:            pulumi.String("testValue"),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeOrg,
			apigeeEnvironment,
			apigeeInstance,
			apigeeInstanceAttachment,
			apigeeEnvironmentKeyvaluemaps,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Environment;
import com.pulumi.gcp.apigee.EnvironmentArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.gcp.apigee.InstanceAttachment;
import com.pulumi.gcp.apigee.InstanceAttachmentArgs;
import com.pulumi.gcp.apigee.EnvironmentKeyvaluemaps;
import com.pulumi.gcp.apigee.EnvironmentKeyvaluemapsArgs;
import com.pulumi.gcp.apigee.EnvironmentKeyvaluemapsEntries;
import com.pulumi.gcp.apigee.EnvironmentKeyvaluemapsEntriesArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var apigeeEnvironment = new Environment("apigeeEnvironment", EnvironmentArgs.builder()
            .orgId(apigeeOrg.id())
            .name("tf-test-env")
            .description("Apigee Environment")
            .displayName("Apigee Environment")
            .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("tf-test-instance")
            .location("us-central1")
            .orgId(apigeeOrg.id())
            .build());

        var apigeeInstanceAttachment = new InstanceAttachment("apigeeInstanceAttachment", InstanceAttachmentArgs.builder()
            .instanceId(apigeeInstance.id())
            .environment(apigeeEnvironment.name())
            .build());

        var apigeeEnvironmentKeyvaluemaps = new EnvironmentKeyvaluemaps("apigeeEnvironmentKeyvaluemaps", EnvironmentKeyvaluemapsArgs.builder()
            .envId(createApigeeEnvironment.id())
            .name("tf-test-env-kvms")
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    apigeeOrg,
                    apigeeEnvironment,
                    apigeeInstance,
                    apigeeInstanceAttachment)
                .build());

        var apigeeEnvironmentKeyvaluemapsEntries = new EnvironmentKeyvaluemapsEntries("apigeeEnvironmentKeyvaluemapsEntries", EnvironmentKeyvaluemapsEntriesArgs.builder()
            .envKeyvaluemapId(apigeeEnvironmentKeyvaluemaps.id())
            .name("testName")
            .value("testValue")
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    apigeeOrg,
                    apigeeEnvironment,
                    apigeeInstance,
                    apigeeInstanceAttachment,
                    apigeeEnvironmentKeyvaluemaps)
                .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  apigeeEnvironment:
    type: gcp:apigee:Environment
    name: apigee_environment
    properties:
      orgId: ${apigeeOrg.id}
      name: tf-test-env
      description: Apigee Environment
      displayName: Apigee Environment
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: tf-test-instance
      location: us-central1
      orgId: ${apigeeOrg.id}
  apigeeInstanceAttachment:
    type: gcp:apigee:InstanceAttachment
    name: apigee_instance_attachment
    properties:
      instanceId: ${apigeeInstance.id}
      environment: ${apigeeEnvironment.name}
  apigeeEnvironmentKeyvaluemaps:
    type: gcp:apigee:EnvironmentKeyvaluemaps
    name: apigee_environment_keyvaluemaps
    properties:
      envId: ${createApigeeEnvironment.id}
      name: tf-test-env-kvms
    options:
      dependsOn:
        - ${apigeeOrg}
        - ${apigeeEnvironment}
        - ${apigeeInstance}
        - ${apigeeInstanceAttachment}
  apigeeEnvironmentKeyvaluemapsEntries:
    type: gcp:apigee:EnvironmentKeyvaluemapsEntries
    name: apigee_environment_keyvaluemaps_entries
    properties:
      envKeyvaluemapId: ${apigeeEnvironmentKeyvaluemaps.id}
      name: testName
      value: testValue
    options:
      dependsOn:
        - ${apigeeOrg}
        - ${apigeeEnvironment}
        - ${apigeeInstance}
        - ${apigeeInstanceAttachment}
        - ${apigeeEnvironmentKeyvaluemaps}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

EnvironmentKeyvaluemapsEntries can be imported using any of these accepted formats:

* `{{env_keyvaluemap_id}}/entries/{{name}}`

* `{{env_keyvaluemap_id}}/{{name}}`

When using the `pulumi import` command, EnvironmentKeyvaluemapsEntries can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/environmentKeyvaluemapsEntries:EnvironmentKeyvaluemapsEntries default {{env_keyvaluemap_id}}/entries/{{name}}
```

```sh
$ pulumi import gcp:apigee/environmentKeyvaluemapsEntries:EnvironmentKeyvaluemapsEntries default {{env_keyvaluemap_id}}/{{name}}
```

×
envKeyvaluemapId" ¾The Apigee environment keyvalumaps Id associated with the Apigee environment,
in the format `organizations/{{org_name}}/environments/{{env_name}}/keyvaluemaps/{{keyvaluemap_name}}`.


- - -
j
nameB" \Required. Resource URI that can be used to identify the scope of the key value map entries.
c
value" VRequired. Data or payload that is being retrieved and associated with the unique key.
"×
envKeyvaluemapId" ¾The Apigee environment keyvalumaps Id associated with the Apigee environment,
in the format `organizations/{{org_name}}/environments/{{env_name}}/keyvaluemaps/{{keyvaluemap_name}}`.


- - -
"h
name" \Required. Resource URI that can be used to identify the scope of the key value map entries.
"c
value" VRequired. Data or payload that is being retrieved and associated with the unique key.
*Ö
0
apigeeFlowhookgcp:apigee/flowhook:FlowhookéRepresents a sharedflow attachment to a flowhook point.


To get more information about Flowhook, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.flowhooks#FlowHook)
* How-to Guides
    * [organizations.environments.flowhooks](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.flowhooks#FlowHook)

## Import

Flowhook can be imported using any of these accepted formats:

* `organizations/{{org_id}}/environments/{{environment}}/flowhooks/{{flow_hook_point}}`

* `{{org_id}}/{{environment}}/{{flow_hook_point}}`

When using the `pulumi import` command, Flowhook can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/flowhook:Flowhook default organizations/{{org_id}}/environments/{{environment}}/flowhooks/{{flow_hook_point}}
```

```sh
$ pulumi import gcp:apigee/flowhook:Flowhook default {{org_id}}/{{environment}}/{{flow_hook_point}}
```

ð
continueOnErrorB
 ÖFlag that specifies whether execution should continue if the flow hook throws an exception. Set to true to continue execution. Set to false to stop execution if the flow hook throws an exception. Defaults to true.
3
descriptionB" Description of the flow hook.
7
environment" $The resource ID of the environment.
©
flowHookPoint" Where in the API call flow the flow hook is invoked. Must be one of PreProxyFlowHook, PostProxyFlowHook, PreTargetFlowHook, or PostTargetFlowHook.
E
orgId" 8The Apigee Organization associated with the environment
F

sharedflow" 4Id of the Sharedflow attaching to a flowhook point.
"ð
continueOnErrorB
 ÖFlag that specifies whether execution should continue if the flow hook throws an exception. Set to true to continue execution. Set to false to stop execution if the flow hook throws an exception. Defaults to true.
"3
descriptionB" Description of the flow hook.
"7
environment" $The resource ID of the environment.
"©
flowHookPoint" Where in the API call flow the flow hook is invoked. Must be one of PreProxyFlowHook, PostProxyFlowHook, PreTargetFlowHook, or PostTargetFlowHook.
"E
orgId" 8The Apigee Organization associated with the environment
"F

sharedflow" 4Id of the Sharedflow attaching to a flowhook point.
*¸ù
0
apigeeInstancegcp:apigee/instance:InstanceÊÙAn `Instance` is the runtime dataplane in Apigee.


To get more information about Instance, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances/create)
* How-to Guides
    * [Creating a runtime instance](https://cloud.google.com/apigee/docs/api-platform/get-started/create-instance)

## Example Usage

### Apigee Instance Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "my-instance-name",
    location: "us-central1",
    orgId: apigeeOrg.id,
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="my-instance-name",
    location="us-central1",
    org_id=apigee_org.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "my-instance-name",
        Location = "us-central1",
        OrgId = apigeeOrg.Id,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:     pulumi.String("my-instance-name"),
			Location: pulumi.String("us-central1"),
			OrgId:    apigeeOrg.ID(),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("my-instance-name")
            .location("us-central1")
            .orgId(apigeeOrg.id())
            .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: my-instance-name
      location: us-central1
      orgId: ${apigeeOrg.id}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Apigee Instance Cidr Range


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 22,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "my-instance-name",
    location: "us-central1",
    orgId: apigeeOrg.id,
    peeringCidrRange: "SLASH_22",
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=22,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="my-instance-name",
    location="us-central1",
    org_id=apigee_org.id,
    peering_cidr_range="SLASH_22")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 22,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "my-instance-name",
        Location = "us-central1",
        OrgId = apigeeOrg.Id,
        PeeringCidrRange = "SLASH_22",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(22),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:             pulumi.String("my-instance-name"),
			Location:         pulumi.String("us-central1"),
			OrgId:            apigeeOrg.ID(),
			PeeringCidrRange: pulumi.String("SLASH_22"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(22)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("my-instance-name")
            .location("us-central1")
            .orgId(apigeeOrg.id())
            .peeringCidrRange("SLASH_22")
            .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 22
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: my-instance-name
      location: us-central1
      orgId: ${apigeeOrg.id}
      peeringCidrRange: SLASH_22
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Apigee Instance Ip Range


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 22,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "my-instance-name",
    location: "us-central1",
    orgId: apigeeOrg.id,
    ipRange: "10.87.8.0/22",
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=22,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="my-instance-name",
    location="us-central1",
    org_id=apigee_org.id,
    ip_range="10.87.8.0/22")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 22,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "my-instance-name",
        Location = "us-central1",
        OrgId = apigeeOrg.Id,
        IpRange = "10.87.8.0/22",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(22),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:     pulumi.String("my-instance-name"),
			Location: pulumi.String("us-central1"),
			OrgId:    apigeeOrg.ID(),
			IpRange:  pulumi.String("10.87.8.0/22"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(22)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("my-instance-name")
            .location("us-central1")
            .orgId(apigeeOrg.id())
            .ipRange("10.87.8.0/22")
            .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 22
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: my-instance-name
      location: us-central1
      orgId: ${apigeeOrg.id}
      ipRange: 10.87.8.0/22
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Apigee Instance Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeKeyring = new gcp.kms.KeyRing("apigee_keyring", {
    name: "apigee-keyring",
    location: "us-central1",
});
const apigeeKey = new gcp.kms.CryptoKey("apigee_key", {
    name: "apigee-key",
    keyRing: apigeeKeyring.id,
});
const apigeeSa = new gcp.projects.ServiceIdentity("apigee_sa", {
    project: project.projectId,
    service: apigee.service,
});
const apigeeSaKeyuser = new gcp.kms.CryptoKeyIAMMember("apigee_sa_keyuser", {
    cryptoKeyId: apigeeKey.id,
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: apigeeSa.member,
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    displayName: "apigee-org",
    description: "Auto-provisioned Apigee Org.",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
    runtimeDatabaseEncryptionKeyName: apigeeKey.id,
}, {
    dependsOn: [
        apigeeVpcConnection,
        apigeeSaKeyuser,
    ],
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "my-instance-name",
    location: "us-central1",
    description: "Auto-managed Apigee Runtime Instance",
    displayName: "my-instance-name",
    orgId: apigeeOrg.id,
    diskEncryptionKeyName: apigeeKey.id,
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_keyring = gcp.kms.KeyRing("apigee_keyring",
    name="apigee-keyring",
    location="us-central1")
apigee_key = gcp.kms.CryptoKey("apigee_key",
    name="apigee-key",
    key_ring=apigee_keyring.id)
apigee_sa = gcp.projects.ServiceIdentity("apigee_sa",
    project=project["projectId"],
    service=apigee["service"])
apigee_sa_keyuser = gcp.kms.CryptoKeyIAMMember("apigee_sa_keyuser",
    crypto_key_id=apigee_key.id,
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=apigee_sa.member)
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    display_name="apigee-org",
    description="Auto-provisioned Apigee Org.",
    project_id=current.project,
    authorized_network=apigee_network.id,
    runtime_database_encryption_key_name=apigee_key.id,
    opts = pulumi.ResourceOptions(depends_on=[
            apigee_vpc_connection,
            apigee_sa_keyuser,
        ]))
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="my-instance-name",
    location="us-central1",
    description="Auto-managed Apigee Runtime Instance",
    display_name="my-instance-name",
    org_id=apigee_org.id,
    disk_encryption_key_name=apigee_key.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeKeyring = new Gcp.Kms.KeyRing("apigee_keyring", new()
    {
        Name = "apigee-keyring",
        Location = "us-central1",
    });

    var apigeeKey = new Gcp.Kms.CryptoKey("apigee_key", new()
    {
        Name = "apigee-key",
        KeyRing = apigeeKeyring.Id,
    });

    var apigeeSa = new Gcp.Projects.ServiceIdentity("apigee_sa", new()
    {
        Project = project.ProjectId,
        Service = apigee.Service,
    });

    var apigeeSaKeyuser = new Gcp.Kms.CryptoKeyIAMMember("apigee_sa_keyuser", new()
    {
        CryptoKeyId = apigeeKey.Id,
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = apigeeSa.Member,
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        DisplayName = "apigee-org",
        Description = "Auto-provisioned Apigee Org.",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
        RuntimeDatabaseEncryptionKeyName = apigeeKey.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
            apigeeSaKeyuser,
        },
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "my-instance-name",
        Location = "us-central1",
        Description = "Auto-managed Apigee Runtime Instance",
        DisplayName = "my-instance-name",
        OrgId = apigeeOrg.Id,
        DiskEncryptionKeyName = apigeeKey.Id,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeKeyring, err := kms.NewKeyRing(ctx, "apigee_keyring", &kms.KeyRingArgs{
			Name:     pulumi.String("apigee-keyring"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		apigeeKey, err := kms.NewCryptoKey(ctx, "apigee_key", &kms.CryptoKeyArgs{
			Name:    pulumi.String("apigee-key"),
			KeyRing: apigeeKeyring.ID(),
		})
		if err != nil {
			return err
		}
		apigeeSa, err := projects.NewServiceIdentity(ctx, "apigee_sa", &projects.ServiceIdentityArgs{
			Project: pulumi.Any(project.ProjectId),
			Service: pulumi.Any(apigee.Service),
		})
		if err != nil {
			return err
		}
		apigeeSaKeyuser, err := kms.NewCryptoKeyIAMMember(ctx, "apigee_sa_keyuser", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: apigeeKey.ID(),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      apigeeSa.Member,
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:                  pulumi.String("us-central1"),
			DisplayName:                      pulumi.String("apigee-org"),
			Description:                      pulumi.String("Auto-provisioned Apigee Org."),
			ProjectId:                        pulumi.String(current.Project),
			AuthorizedNetwork:                apigeeNetwork.ID(),
			RuntimeDatabaseEncryptionKeyName: apigeeKey.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
			apigeeSaKeyuser,
		}))
		if err != nil {
			return err
		}
		_, err = apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:                  pulumi.String("my-instance-name"),
			Location:              pulumi.String("us-central1"),
			Description:           pulumi.String("Auto-managed Apigee Runtime Instance"),
			DisplayName:           pulumi.String("my-instance-name"),
			OrgId:                 apigeeOrg.ID(),
			DiskEncryptionKeyName: apigeeKey.ID(),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.kms.KeyRing;
import com.pulumi.gcp.kms.KeyRingArgs;
import com.pulumi.gcp.kms.CryptoKey;
import com.pulumi.gcp.kms.CryptoKeyArgs;
import com.pulumi.gcp.projects.ServiceIdentity;
import com.pulumi.gcp.projects.ServiceIdentityArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeKeyring = new KeyRing("apigeeKeyring", KeyRingArgs.builder()
            .name("apigee-keyring")
            .location("us-central1")
            .build());

        var apigeeKey = new CryptoKey("apigeeKey", CryptoKeyArgs.builder()
            .name("apigee-key")
            .keyRing(apigeeKeyring.id())
            .build());

        var apigeeSa = new ServiceIdentity("apigeeSa", ServiceIdentityArgs.builder()
            .project(project.projectId())
            .service(apigee.service())
            .build());

        var apigeeSaKeyuser = new CryptoKeyIAMMember("apigeeSaKeyuser", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(apigeeKey.id())
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(apigeeSa.member())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .displayName("apigee-org")
            .description("Auto-provisioned Apigee Org.")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .runtimeDatabaseEncryptionKeyName(apigeeKey.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    apigeeVpcConnection,
                    apigeeSaKeyuser)
                .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("my-instance-name")
            .location("us-central1")
            .description("Auto-managed Apigee Runtime Instance")
            .displayName("my-instance-name")
            .orgId(apigeeOrg.id())
            .diskEncryptionKeyName(apigeeKey.id())
            .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeKeyring:
    type: gcp:kms:KeyRing
    name: apigee_keyring
    properties:
      name: apigee-keyring
      location: us-central1
  apigeeKey:
    type: gcp:kms:CryptoKey
    name: apigee_key
    properties:
      name: apigee-key
      keyRing: ${apigeeKeyring.id}
  apigeeSa:
    type: gcp:projects:ServiceIdentity
    name: apigee_sa
    properties:
      project: ${project.projectId}
      service: ${apigee.service}
  apigeeSaKeyuser:
    type: gcp:kms:CryptoKeyIAMMember
    name: apigee_sa_keyuser
    properties:
      cryptoKeyId: ${apigeeKey.id}
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: ${apigeeSa.member}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      displayName: apigee-org
      description: Auto-provisioned Apigee Org.
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
      runtimeDatabaseEncryptionKeyName: ${apigeeKey.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
        - ${apigeeSaKeyuser}
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: my-instance-name
      location: us-central1
      description: Auto-managed Apigee Runtime Instance
      displayName: my-instance-name
      orgId: ${apigeeOrg.id}
      diskEncryptionKeyName: ${apigeeKey.id}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Instance can be imported using any of these accepted formats:

* `{{org_id}}/instances/{{name}}`

* `{{org_id}}/{{name}}`

When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/instance:Instance default {{org_id}}/instances/{{name}}
```

```sh
$ pulumi import gcp:apigee/instance:Instance default {{org_id}}/{{name}}
```

ï
consumerAcceptListsB*" ÏOptional. Customer accept list represents the list of projects (id/number) on customer
side that can privately connect to the service attachment. It is an optional field
which the customers can provide during the instance creation. By default, the customer
project associated with the Apigee organization will be included to the list.
2
descriptionB" Description of the instance.
ü
diskEncryptionKeyNameB" ÜCustomer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only.
Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
3
displayNameB" Display name of the instance.

ipRangeB" IP range represents the customer-provided CIDR block of length 22 that will be used for
the Apigee instance creation. This optional range, if provided, should be freely
available as part of larger named range the customer has allocated to the Service
Networking peering. If this is not provided, Apigee will automatically request for any
available /22 CIDR block from Service Networking. The customer should use this CIDR block
for configuring their firewall needs to allow traffic from Apigee.
Input format: "a.b.c.d/22"
N
location" >Required. Compute Engine location where the instance resides.
+
nameB" Resource ID of the instance.
~
orgId" qThe Apigee Organization associated with the Apigee instance,
in the format `organizations/{{org_name}}`.


- - -

peeringCidrRangeB" æThe size of the CIDR block range that will be reserved by the instance. For valid values,
see [CidrRange](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances#CidrRange) on the documentation.
"í
consumerAcceptLists*" ÏOptional. Customer accept list represents the list of projects (id/number) on customer
side that can privately connect to the service attachment. It is an optional field
which the customers can provide during the instance creation. By default, the customer
project associated with the Apigee organization will be included to the list.
"2
descriptionB" Description of the instance.
"ü
diskEncryptionKeyNameB" ÜCustomer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only.
Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
"3
displayNameB" Display name of the instance.
"z
host" nOutput only. Hostname or IP address of the exposed Apigee endpoint used by clients to connect to the service.
"
ipRangeB" IP range represents the customer-provided CIDR block of length 22 that will be used for
the Apigee instance creation. This optional range, if provided, should be freely
available as part of larger named range the customer has allocated to the Service
Networking peering. If this is not provided, Apigee will automatically request for any
available /22 CIDR block from Service Networking. The customer should use this CIDR block
for configuring their firewall needs to allow traffic from Apigee.
Input format: "a.b.c.d/22"
"N
location" >Required. Compute Engine location where the instance resides.
")
name" Resource ID of the instance.
"~
orgId" qThe Apigee Organization associated with the Apigee instance,
in the format `organizations/{{org_name}}`.


- - -
"ÿ
peeringCidrRange" æThe size of the CIDR block range that will be reserved by the instance. For valid values,
see [CidrRange](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances#CidrRange) on the documentation.
"E
port" 9Output only. Port number of the exposed Apigee endpoint.
"
serviceAttachment" êOutput only. Resource name of the service attachment created for the instance in
the format: projects/*/regions/*/serviceAttachments/* Apigee customers can privately
forward traffic to this service attachment using the PSC endpoints.
*È
N
apigeeInstanceAttachment0gcp:apigee/instanceAttachment:InstanceAttachmentóAn `Instance attachment` in Apigee.


To get more information about InstanceAttachment, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances.attachments/create)
* How-to Guides
    * [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)

## Example Usage

## Import

InstanceAttachment can be imported using any of these accepted formats:

* `{{instance_id}}/attachments/{{name}}`

* `{{instance_id}}/{{name}}`

When using the `pulumi import` command, InstanceAttachment can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/instanceAttachment:InstanceAttachment default {{instance_id}}/attachments/{{name}}
```

```sh
$ pulumi import gcp:apigee/instanceAttachment:InstanceAttachment default {{instance_id}}/{{name}}
```

7
environment" $The resource ID of the environment.


instanceId" The Apigee instance associated with the Apigee environment,
in the format `organizations/{{org_name}}/instances/{{instance_name}}`.


- - -
"7
environment" $The resource ID of the environment.
"

instanceId" The Apigee instance associated with the Apigee environment,
in the format `organizations/{{org_name}}/instances/{{instance_name}}`.


- - -
"J
name" >The name of the newly created  attachment (output parameter).
*¬
i
apigeeKeystoresAliasesKeyCertFileBgcp:apigee/keystoresAliasesKeyCertFile:KeystoresAliasesKeyCertFileâAn alias from a key/certificate pair.

To get more information about KeystoresAliasesKeyCertFile, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)
* How-to Guides
    * [Keystores Aliases](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)

## Import

KeystoresAliasesKeyCertFile can be imported using any of these accepted formats:

* `organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}`

* `{{org_id}}/{{environment}}/{{keystore}}/{{alias}}`

When using the `pulumi import` command, KeystoresAliasesKeyCertFile can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/keystoresAliasesKeyCertFile:KeystoresAliasesKeyCertFile default organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}
```

```sh
$ pulumi import gcp:apigee/keystoresAliasesKeyCertFile:KeystoresAliasesKeyCertFile default {{org_id}}/{{environment}}/{{keystore}}/{{alias}}
```


alias" Alias Name
!
cert" Cert content


- - -
ä
	certsInfoB:

apigee$KeystoresAliasesKeyCertFileCertsInfoTgcp:apigee/KeystoresAliasesKeyCertFileCertsInfo:KeystoresAliasesKeyCertFileCertsInfoGChain of certificates under this alias.
Structure is documented below.
9
environment" &Environment associated with the alias
B
keyB" 5Private Key content, omit if uploading to truststore

keystore" Keystore Name
U
orgId" HOrganization ID associated with the alias, without organization/ prefix
A
passwordB" /Password for the Private Key if it's encrypted
"
alias" Alias Name
"!
cert" Cert content


- - -
"á
	certsInfo:

apigee$KeystoresAliasesKeyCertFileCertsInfoTgcp:apigee/KeystoresAliasesKeyCertFileCertsInfo:KeystoresAliasesKeyCertFileCertsInfoGChain of certificates under this alias.
Structure is documented below.
"9
environment" &Environment associated with the alias
"B
keyB" 5Private Key content, omit if uploading to truststore
"
keystore" Keystore Name
"U
orgId" HOrganization ID associated with the alias, without organization/ prefix
"A
passwordB" /Password for the Private Key if it's encrypted
"#
type" Optional.Type of Alias
*Í
Z
apigeeKeystoresAliasesPkcs128gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12¶An alias from a pkcs12 file.

To get more information about KeystoresAliasesPkcs12, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)
* How-to Guides
    * [Keystores Aliases](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases)

## Import

KeystoresAliasesPkcs12 can be imported using any of these accepted formats:

* `organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}`

* `{{org_id}}/{{environment}}/{{keystore}}/{{alias}}`

When using the `pulumi import` command, KeystoresAliasesPkcs12 can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12 default organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}
```

```sh
$ pulumi import gcp:apigee/keystoresAliasesPkcs12:KeystoresAliasesPkcs12 default {{org_id}}/{{environment}}/{{keystore}}/{{alias}}
```


alias" Alias Name
9
environment" &Environment associated with the alias
'
file" PKCS12 file content

- - -
&
filehash" Hash of the pkcs file

keystore" Keystore Name
U
orgId" HOrganization ID associated with the alias, without organization/ prefix
A
passwordB" /Password for the PKCS12 file if it's encrypted
"
alias" Alias Name
"Ò

certsInfos{*y:w
u
apigeeKeystoresAliasesPkcs12CertsInfoJgcp:apigee/KeystoresAliasesPkcs12CertsInfo:KeystoresAliasesPkcs12CertsInfoGChain of certificates under this alias.
Structure is documented below.
"9
environment" &Environment associated with the alias
"'
file" PKCS12 file content

- - -
"&
filehash" Hash of the pkcs file
"
keystore" Keystore Name
"U
orgId" HOrganization ID associated with the alias, without organization/ prefix
"?
password" /Password for the PKCS12 file if it's encrypted
"#
type" Optional.Type of Alias
*ûÈ
r
apigeeKeystoresAliasesSelfSignedCertHgcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCertµ±An Environment Keystore Alias for Self Signed Certificate Format in Apigee


To get more information about KeystoresAliasesSelfSignedCert, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.keystores.aliases/create)
* How-to Guides
    * [Creating an environment](https://cloud.google.com/apigee/docs/api-platform/get-started/create-environment)

## Example Usage

### Apigee Env Keystore Alias Self Signed Cert


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = new gcp.organizations.Project("project", {
    projectId: "my-project",
    name: "my-project",
    orgId: "123456789",
    billingAccount: "000000-0000000-0000000-000000",
    deletionPolicy: "DELETE",
});
const apigee = new gcp.projects.Service("apigee", {
    project: project.projectId,
    service: "apigee.googleapis.com",
});
const servicenetworking = new gcp.projects.Service("servicenetworking", {
    project: project.projectId,
    service: "servicenetworking.googleapis.com",
}, {
    dependsOn: [apigee],
});
const compute = new gcp.projects.Service("compute", {
    project: project.projectId,
    service: "compute.googleapis.com",
}, {
    dependsOn: [servicenetworking],
});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {
    name: "apigee-network",
    project: project.projectId,
}, {
    dependsOn: [compute],
});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
    project: project.projectId,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
}, {
    dependsOn: [servicenetworking],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: project.projectId,
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [
        apigeeVpcConnection,
        apigee,
    ],
});
const apigeeEnvironmentKeystoreSsAlias = new gcp.apigee.Environment("apigee_environment_keystore_ss_alias", {
    orgId: apigeeOrg.id,
    name: "env-name",
    description: "Apigee Environment",
    displayName: "environment-1",
});
const apigeeEnvironmentKeystoreAlias = new gcp.apigee.EnvKeystore("apigee_environment_keystore_alias", {
    name: "env-keystore",
    envId: apigeeEnvironmentKeystoreSsAlias.id,
});
const apigeeEnvironmentKeystoreSsAliasKeystoresAliasesSelfSignedCert = new gcp.apigee.KeystoresAliasesSelfSignedCert("apigee_environment_keystore_ss_alias", {
    environment: apigeeEnvironmentKeystoreSsAlias.name,
    orgId: apigeeOrg.name,
    keystore: apigeeEnvironmentKeystoreAlias.name,
    alias: "alias",
    keySize: "1024",
    sigAlg: "SHA512withRSA",
    certValidityInDays: 4,
    subject: {
        commonName: "selfsigned_example",
        countryCode: "US",
        locality: "TX",
        org: "CCE",
        orgUnit: "PSO",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.Project("project",
    project_id="my-project",
    name="my-project",
    org_id="123456789",
    billing_account="000000-0000000-0000000-000000",
    deletion_policy="DELETE")
apigee = gcp.projects.Service("apigee",
    project=project.project_id,
    service="apigee.googleapis.com")
servicenetworking = gcp.projects.Service("servicenetworking",
    project=project.project_id,
    service="servicenetworking.googleapis.com",
    opts = pulumi.ResourceOptions(depends_on=[apigee]))
compute = gcp.projects.Service("compute",
    project=project.project_id,
    service="compute.googleapis.com",
    opts = pulumi.ResourceOptions(depends_on=[servicenetworking]))
apigee_network = gcp.compute.Network("apigee_network",
    name="apigee-network",
    project=project.project_id,
    opts = pulumi.ResourceOptions(depends_on=[compute]))
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id,
    project=project.project_id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name],
    opts = pulumi.ResourceOptions(depends_on=[servicenetworking]))
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=project.project_id,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[
            apigee_vpc_connection,
            apigee,
        ]))
apigee_environment_keystore_ss_alias = gcp.apigee.Environment("apigee_environment_keystore_ss_alias",
    org_id=apigee_org.id,
    name="env-name",
    description="Apigee Environment",
    display_name="environment-1")
apigee_environment_keystore_alias = gcp.apigee.EnvKeystore("apigee_environment_keystore_alias",
    name="env-keystore",
    env_id=apigee_environment_keystore_ss_alias.id)
apigee_environment_keystore_ss_alias_keystores_aliases_self_signed_cert = gcp.apigee.KeystoresAliasesSelfSignedCert("apigee_environment_keystore_ss_alias",
    environment=apigee_environment_keystore_ss_alias.name,
    org_id=apigee_org.name,
    keystore=apigee_environment_keystore_alias.name,
    alias="alias",
    key_size="1024",
    sig_alg="SHA512withRSA",
    cert_validity_in_days=4,
    subject={
        "common_name": "selfsigned_example",
        "country_code": "US",
        "locality": "TX",
        "org": "CCE",
        "org_unit": "PSO",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = new Gcp.Organizations.Project("project", new()
    {
        ProjectId = "my-project",
        Name = "my-project",
        OrgId = "123456789",
        BillingAccount = "000000-0000000-0000000-000000",
        DeletionPolicy = "DELETE",
    });

    var apigee = new Gcp.Projects.Service("apigee", new()
    {
        Project = project.ProjectId,
        ServiceName = "apigee.googleapis.com",
    });

    var servicenetworking = new Gcp.Projects.Service("servicenetworking", new()
    {
        Project = project.ProjectId,
        ServiceName = "servicenetworking.googleapis.com",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigee,
        },
    });

    var compute = new Gcp.Projects.Service("compute", new()
    {
        Project = project.ProjectId,
        ServiceName = "compute.googleapis.com",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            servicenetworking,
        },
    });

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
        Project = project.ProjectId,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            compute,
        },
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
        Project = project.ProjectId,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            servicenetworking,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = project.ProjectId,
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
            apigee,
        },
    });

    var apigeeEnvironmentKeystoreSsAlias = new Gcp.Apigee.Environment("apigee_environment_keystore_ss_alias", new()
    {
        OrgId = apigeeOrg.Id,
        Name = "env-name",
        Description = "Apigee Environment",
        DisplayName = "environment-1",
    });

    var apigeeEnvironmentKeystoreAlias = new Gcp.Apigee.EnvKeystore("apigee_environment_keystore_alias", new()
    {
        Name = "env-keystore",
        EnvId = apigeeEnvironmentKeystoreSsAlias.Id,
    });

    var apigeeEnvironmentKeystoreSsAliasKeystoresAliasesSelfSignedCert = new Gcp.Apigee.KeystoresAliasesSelfSignedCert("apigee_environment_keystore_ss_alias", new()
    {
        Environment = apigeeEnvironmentKeystoreSsAlias.Name,
        OrgId = apigeeOrg.Name,
        Keystore = apigeeEnvironmentKeystoreAlias.Name,
        Alias = "alias",
        KeySize = "1024",
        SigAlg = "SHA512withRSA",
        CertValidityInDays = 4,
        Subject = new Gcp.Apigee.Inputs.KeystoresAliasesSelfSignedCertSubjectArgs
        {
            CommonName = "selfsigned_example",
            CountryCode = "US",
            Locality = "TX",
            Org = "CCE",
            OrgUnit = "PSO",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
			ProjectId:      pulumi.String("my-project"),
			Name:           pulumi.String("my-project"),
			OrgId:          pulumi.String("123456789"),
			BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		apigee, err := projects.NewService(ctx, "apigee", &projects.ServiceArgs{
			Project: project.ProjectId,
			Service: pulumi.String("apigee.googleapis.com"),
		})
		if err != nil {
			return err
		}
		servicenetworking, err := projects.NewService(ctx, "servicenetworking", &projects.ServiceArgs{
			Project: project.ProjectId,
			Service: pulumi.String("servicenetworking.googleapis.com"),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigee,
		}))
		if err != nil {
			return err
		}
		compute, err := projects.NewService(ctx, "compute", &projects.ServiceArgs{
			Project: project.ProjectId,
			Service: pulumi.String("compute.googleapis.com"),
		}, pulumi.DependsOn([]pulumi.Resource{
			servicenetworking,
		}))
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name:    pulumi.String("apigee-network"),
			Project: project.ProjectId,
		}, pulumi.DependsOn([]pulumi.Resource{
			compute,
		}))
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
			Project:      project.ProjectId,
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			servicenetworking,
		}))
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         project.ProjectId,
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
			apigee,
		}))
		if err != nil {
			return err
		}
		apigeeEnvironmentKeystoreSsAlias, err := apigee.NewEnvironment(ctx, "apigee_environment_keystore_ss_alias", &apigee.EnvironmentArgs{
			OrgId:       apigeeOrg.ID(),
			Name:        pulumi.String("env-name"),
			Description: pulumi.String("Apigee Environment"),
			DisplayName: pulumi.String("environment-1"),
		})
		if err != nil {
			return err
		}
		apigeeEnvironmentKeystoreAlias, err := apigee.NewEnvKeystore(ctx, "apigee_environment_keystore_alias", &apigee.EnvKeystoreArgs{
			Name:  pulumi.String("env-keystore"),
			EnvId: apigeeEnvironmentKeystoreSsAlias.ID(),
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewKeystoresAliasesSelfSignedCert(ctx, "apigee_environment_keystore_ss_alias", &apigee.KeystoresAliasesSelfSignedCertArgs{
			Environment:        apigeeEnvironmentKeystoreSsAlias.Name,
			OrgId:              apigeeOrg.Name,
			Keystore:           apigeeEnvironmentKeystoreAlias.Name,
			Alias:              pulumi.String("alias"),
			KeySize:            pulumi.String("1024"),
			SigAlg:             pulumi.String("SHA512withRSA"),
			CertValidityInDays: pulumi.Int(4),
			Subject: &apigee.KeystoresAliasesSelfSignedCertSubjectArgs{
				CommonName:  pulumi.String("selfsigned_example"),
				CountryCode: pulumi.String("US"),
				Locality:    pulumi.String("TX"),
				Org:         pulumi.String("CCE"),
				OrgUnit:     pulumi.String("PSO"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.projects.Service;
import com.pulumi.gcp.projects.ServiceArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Environment;
import com.pulumi.gcp.apigee.EnvironmentArgs;
import com.pulumi.gcp.apigee.EnvKeystore;
import com.pulumi.gcp.apigee.EnvKeystoreArgs;
import com.pulumi.gcp.apigee.KeystoresAliasesSelfSignedCert;
import com.pulumi.gcp.apigee.KeystoresAliasesSelfSignedCertArgs;
import com.pulumi.gcp.apigee.inputs.KeystoresAliasesSelfSignedCertSubjectArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var project = new Project("project", ProjectArgs.builder()
            .projectId("my-project")
            .name("my-project")
            .orgId("123456789")
            .billingAccount("000000-0000000-0000000-000000")
            .deletionPolicy("DELETE")
            .build());

        var apigee = new Service("apigee", ServiceArgs.builder()
            .project(project.projectId())
            .service("apigee.googleapis.com")
            .build());

        var servicenetworking = new Service("servicenetworking", ServiceArgs.builder()
            .project(project.projectId())
            .service("servicenetworking.googleapis.com")
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigee)
                .build());

        var compute = new Service("compute", ServiceArgs.builder()
            .project(project.projectId())
            .service("compute.googleapis.com")
            .build(), CustomResourceOptions.builder()
                .dependsOn(servicenetworking)
                .build());

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .project(project.projectId())
            .build(), CustomResourceOptions.builder()
                .dependsOn(compute)
                .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .project(project.projectId())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build(), CustomResourceOptions.builder()
                .dependsOn(servicenetworking)
                .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(project.projectId())
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    apigeeVpcConnection,
                    apigee)
                .build());

        var apigeeEnvironmentKeystoreSsAlias = new Environment("apigeeEnvironmentKeystoreSsAlias", EnvironmentArgs.builder()
            .orgId(apigeeOrg.id())
            .name("env-name")
            .description("Apigee Environment")
            .displayName("environment-1")
            .build());

        var apigeeEnvironmentKeystoreAlias = new EnvKeystore("apigeeEnvironmentKeystoreAlias", EnvKeystoreArgs.builder()
            .name("env-keystore")
            .envId(apigeeEnvironmentKeystoreSsAlias.id())
            .build());

        var apigeeEnvironmentKeystoreSsAliasKeystoresAliasesSelfSignedCert = new KeystoresAliasesSelfSignedCert("apigeeEnvironmentKeystoreSsAliasKeystoresAliasesSelfSignedCert", KeystoresAliasesSelfSignedCertArgs.builder()
            .environment(apigeeEnvironmentKeystoreSsAlias.name())
            .orgId(apigeeOrg.name())
            .keystore(apigeeEnvironmentKeystoreAlias.name())
            .alias("alias")
            .keySize(1024)
            .sigAlg("SHA512withRSA")
            .certValidityInDays(4)
            .subject(KeystoresAliasesSelfSignedCertSubjectArgs.builder()
                .commonName("selfsigned_example")
                .countryCode("US")
                .locality("TX")
                .org("CCE")
                .orgUnit("PSO")
                .build())
            .build());

    }
}
```
```yaml
resources:
  project:
    type: gcp:organizations:Project
    properties:
      projectId: my-project
      name: my-project
      orgId: '123456789'
      billingAccount: 000000-0000000-0000000-000000
      deletionPolicy: DELETE
  apigee:
    type: gcp:projects:Service
    properties:
      project: ${project.projectId}
      service: apigee.googleapis.com
  servicenetworking:
    type: gcp:projects:Service
    properties:
      project: ${project.projectId}
      service: servicenetworking.googleapis.com
    options:
      dependsOn:
        - ${apigee}
  compute:
    type: gcp:projects:Service
    properties:
      project: ${project.projectId}
      service: compute.googleapis.com
    options:
      dependsOn:
        - ${servicenetworking}
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
      project: ${project.projectId}
    options:
      dependsOn:
        - ${compute}
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
      project: ${project.projectId}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
    options:
      dependsOn:
        - ${servicenetworking}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${project.projectId}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
        - ${apigee}
  apigeeEnvironmentKeystoreSsAlias:
    type: gcp:apigee:Environment
    name: apigee_environment_keystore_ss_alias
    properties:
      orgId: ${apigeeOrg.id}
      name: env-name
      description: Apigee Environment
      displayName: environment-1
  apigeeEnvironmentKeystoreAlias:
    type: gcp:apigee:EnvKeystore
    name: apigee_environment_keystore_alias
    properties:
      name: env-keystore
      envId: ${apigeeEnvironmentKeystoreSsAlias.id}
  apigeeEnvironmentKeystoreSsAliasKeystoresAliasesSelfSignedCert:
    type: gcp:apigee:KeystoresAliasesSelfSignedCert
    name: apigee_environment_keystore_ss_alias
    properties:
      environment: ${apigeeEnvironmentKeystoreSsAlias.name}
      orgId: ${apigeeOrg.name}
      keystore: ${apigeeEnvironmentKeystoreAlias.name}
      alias: alias
      keySize: 1024
      sigAlg: SHA512withRSA
      certValidityInDays: 4
      subject:
        commonName: selfsigned_example
        countryCode: US
        locality: TX
        org: CCE
        orgUnit: PSO
```
<!--End PulumiCodeChooser -->

## Import

KeystoresAliasesSelfSignedCert can be imported using any of these accepted formats:

* `organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}`

* `{{org_id}}/{{environment}}/{{keystore}}/{{alias}}`

When using the `pulumi import` command, KeystoresAliasesSelfSignedCert can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert default organizations/{{org_id}}/environments/{{environment}}/keystores/{{keystore}}/aliases/{{alias}}
```

```sh
$ pulumi import gcp:apigee/keystoresAliasesSelfSignedCert:KeystoresAliasesSelfSignedCert default {{org_id}}/{{environment}}/{{keystore}}/{{alias}}
```

ü
alias" îAlias for the key/certificate pair. Values must match the regular expression [\w\s-.]{1,255}.
This must be provided for all formats except selfsignedcert; self-signed certs may specify the alias in either
this parameter or the JSON body.
y
certValidityInDaysB ]Validity duration of certificate, in days. Accepts positive non-zero value. Defaults to 365.
/
environment" The Apigee environment name
C
keySizeB" 2Key size. Default and maximum value is 2048 bits.
M
keystore" =The Apigee keystore name associated in an Apigee environment
Q
orgId" DThe Apigee Organization name associated with the Apigee environment
|
sigAlg" nSignature algorithm to generate private key. Valid values are SHA512withRSA, SHA384withRSA, and SHA256withRSA
Ë
subject:

apigee%KeystoresAliasesSelfSignedCertSubjectVgcp:apigee/KeystoresAliasesSelfSignedCertSubject:KeystoresAliasesSelfSignedCertSubject0Subject details.
Structure is documented below.
»
subjectAlternativeDnsNamesÉBÆ:Ã
À
apigee8KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNames|gcp:apigee/KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNames:KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNamesQList of alternative host names. Maximum length is 255 characters for each value.
"ü
alias" îAlias for the key/certificate pair. Values must match the regular expression [\w\s-.]{1,255}.
This must be provided for all formats except selfsignedcert; self-signed certs may specify the alias in either
this parameter or the JSON body.
"y
certValidityInDaysB ]Validity duration of certificate, in days. Accepts positive non-zero value. Defaults to 365.
"î

certsInfos*:

apigee'KeystoresAliasesSelfSignedCertCertsInfoZgcp:apigee/KeystoresAliasesSelfSignedCertCertsInfo:KeystoresAliasesSelfSignedCertCertsInfoGChain of certificates under this alias.
Structure is documented below.
"/
environment" The Apigee environment name
"C
keySizeB" 2Key size. Default and maximum value is 2048 bits.
"M
keystore" =The Apigee keystore name associated in an Apigee environment
"Q
orgId" DThe Apigee Organization name associated with the Apigee environment
"|
sigAlg" nSignature algorithm to generate private key. Valid values are SHA512withRSA, SHA384withRSA, and SHA256withRSA
"Ë
subject:

apigee%KeystoresAliasesSelfSignedCertSubjectVgcp:apigee/KeystoresAliasesSelfSignedCertSubject:KeystoresAliasesSelfSignedCertSubject0Subject details.
Structure is documented below.
"»
subjectAlternativeDnsNamesÉBÆ:Ã
À
apigee8KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNames|gcp:apigee/KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNames:KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNamesQList of alternative host names. Maximum length is 255 characters for each value.
"#
type" Optional.Type of Alias
*ç
6
apigee
NatAddress gcp:apigee/natAddress:NatAddressòApigee NAT (network address translation) address. A NAT address is a static external IP address used for Internet egress traffic. This is not avaible for Apigee hybrid.


To get more information about NatAddress, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances.natAddresses)
* How-to Guides
    * [Provisioning NAT IPs](https://cloud.google.com/apigee/docs/api-platform/security/nat-provisioning)

## Example Usage

### Apigee Nat Address Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 21,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeKeyring = new gcp.kms.KeyRing("apigee_keyring", {
    name: "apigee-keyring",
    location: "us-central1",
});
const apigeeKey = new gcp.kms.CryptoKey("apigee_key", {
    name: "apigee-key",
    keyRing: apigeeKeyring.id,
});
const apigeeSa = new gcp.projects.ServiceIdentity("apigee_sa", {
    project: project.projectId,
    service: apigee.service,
});
const apigeeSaKeyuser = new gcp.kms.CryptoKeyIAMMember("apigee_sa_keyuser", {
    cryptoKeyId: apigeeKey.id,
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: apigeeSa.member,
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    displayName: "apigee-org",
    description: "Terraform-provisioned Apigee Org.",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
    runtimeDatabaseEncryptionKeyName: apigeeKey.id,
}, {
    dependsOn: [
        apigeeVpcConnection,
        apigeeSaKeyuser,
    ],
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "apigee-instance",
    location: "us-central1",
    description: "Terraform-managed Apigee Runtime Instance",
    displayName: "apigee-instance",
    orgId: apigeeOrg.id,
    diskEncryptionKeyName: apigeeKey.id,
});
const apigee_nat = new gcp.apigee.NatAddress("apigee-nat", {
    name: "my-nat-address",
    instanceId: apigeeInstance.id,
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=21,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_keyring = gcp.kms.KeyRing("apigee_keyring",
    name="apigee-keyring",
    location="us-central1")
apigee_key = gcp.kms.CryptoKey("apigee_key",
    name="apigee-key",
    key_ring=apigee_keyring.id)
apigee_sa = gcp.projects.ServiceIdentity("apigee_sa",
    project=project["projectId"],
    service=apigee["service"])
apigee_sa_keyuser = gcp.kms.CryptoKeyIAMMember("apigee_sa_keyuser",
    crypto_key_id=apigee_key.id,
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=apigee_sa.member)
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    display_name="apigee-org",
    description="Terraform-provisioned Apigee Org.",
    project_id=current.project,
    authorized_network=apigee_network.id,
    runtime_database_encryption_key_name=apigee_key.id,
    opts = pulumi.ResourceOptions(depends_on=[
            apigee_vpc_connection,
            apigee_sa_keyuser,
        ]))
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="apigee-instance",
    location="us-central1",
    description="Terraform-managed Apigee Runtime Instance",
    display_name="apigee-instance",
    org_id=apigee_org.id,
    disk_encryption_key_name=apigee_key.id)
apigee_nat = gcp.apigee.NatAddress("apigee-nat",
    name="my-nat-address",
    instance_id=apigee_instance.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 21,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeKeyring = new Gcp.Kms.KeyRing("apigee_keyring", new()
    {
        Name = "apigee-keyring",
        Location = "us-central1",
    });

    var apigeeKey = new Gcp.Kms.CryptoKey("apigee_key", new()
    {
        Name = "apigee-key",
        KeyRing = apigeeKeyring.Id,
    });

    var apigeeSa = new Gcp.Projects.ServiceIdentity("apigee_sa", new()
    {
        Project = project.ProjectId,
        Service = apigee.Service,
    });

    var apigeeSaKeyuser = new Gcp.Kms.CryptoKeyIAMMember("apigee_sa_keyuser", new()
    {
        CryptoKeyId = apigeeKey.Id,
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = apigeeSa.Member,
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        DisplayName = "apigee-org",
        Description = "Terraform-provisioned Apigee Org.",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
        RuntimeDatabaseEncryptionKeyName = apigeeKey.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
            apigeeSaKeyuser,
        },
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "apigee-instance",
        Location = "us-central1",
        Description = "Terraform-managed Apigee Runtime Instance",
        DisplayName = "apigee-instance",
        OrgId = apigeeOrg.Id,
        DiskEncryptionKeyName = apigeeKey.Id,
    });

    var apigee_nat = new Gcp.Apigee.NatAddress("apigee-nat", new()
    {
        Name = "my-nat-address",
        InstanceId = apigeeInstance.Id,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(21),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeKeyring, err := kms.NewKeyRing(ctx, "apigee_keyring", &kms.KeyRingArgs{
			Name:     pulumi.String("apigee-keyring"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		apigeeKey, err := kms.NewCryptoKey(ctx, "apigee_key", &kms.CryptoKeyArgs{
			Name:    pulumi.String("apigee-key"),
			KeyRing: apigeeKeyring.ID(),
		})
		if err != nil {
			return err
		}
		apigeeSa, err := projects.NewServiceIdentity(ctx, "apigee_sa", &projects.ServiceIdentityArgs{
			Project: pulumi.Any(project.ProjectId),
			Service: pulumi.Any(apigee.Service),
		})
		if err != nil {
			return err
		}
		apigeeSaKeyuser, err := kms.NewCryptoKeyIAMMember(ctx, "apigee_sa_keyuser", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: apigeeKey.ID(),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      apigeeSa.Member,
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:                  pulumi.String("us-central1"),
			DisplayName:                      pulumi.String("apigee-org"),
			Description:                      pulumi.String("Terraform-provisioned Apigee Org."),
			ProjectId:                        pulumi.String(current.Project),
			AuthorizedNetwork:                apigeeNetwork.ID(),
			RuntimeDatabaseEncryptionKeyName: apigeeKey.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
			apigeeSaKeyuser,
		}))
		if err != nil {
			return err
		}
		apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:                  pulumi.String("apigee-instance"),
			Location:              pulumi.String("us-central1"),
			Description:           pulumi.String("Terraform-managed Apigee Runtime Instance"),
			DisplayName:           pulumi.String("apigee-instance"),
			OrgId:                 apigeeOrg.ID(),
			DiskEncryptionKeyName: apigeeKey.ID(),
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewNatAddress(ctx, "apigee-nat", &apigee.NatAddressArgs{
			Name:       pulumi.String("my-nat-address"),
			InstanceId: apigeeInstance.ID(),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.kms.KeyRing;
import com.pulumi.gcp.kms.KeyRingArgs;
import com.pulumi.gcp.kms.CryptoKey;
import com.pulumi.gcp.kms.CryptoKeyArgs;
import com.pulumi.gcp.projects.ServiceIdentity;
import com.pulumi.gcp.projects.ServiceIdentityArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.gcp.apigee.NatAddress;
import com.pulumi.gcp.apigee.NatAddressArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(21)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeKeyring = new KeyRing("apigeeKeyring", KeyRingArgs.builder()
            .name("apigee-keyring")
            .location("us-central1")
            .build());

        var apigeeKey = new CryptoKey("apigeeKey", CryptoKeyArgs.builder()
            .name("apigee-key")
            .keyRing(apigeeKeyring.id())
            .build());

        var apigeeSa = new ServiceIdentity("apigeeSa", ServiceIdentityArgs.builder()
            .project(project.projectId())
            .service(apigee.service())
            .build());

        var apigeeSaKeyuser = new CryptoKeyIAMMember("apigeeSaKeyuser", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(apigeeKey.id())
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(apigeeSa.member())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .displayName("apigee-org")
            .description("Terraform-provisioned Apigee Org.")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .runtimeDatabaseEncryptionKeyName(apigeeKey.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    apigeeVpcConnection,
                    apigeeSaKeyuser)
                .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("apigee-instance")
            .location("us-central1")
            .description("Terraform-managed Apigee Runtime Instance")
            .displayName("apigee-instance")
            .orgId(apigeeOrg.id())
            .diskEncryptionKeyName(apigeeKey.id())
            .build());

        var apigee_nat = new NatAddress("apigee-nat", NatAddressArgs.builder()
            .name("my-nat-address")
            .instanceId(apigeeInstance.id())
            .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 21
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeKeyring:
    type: gcp:kms:KeyRing
    name: apigee_keyring
    properties:
      name: apigee-keyring
      location: us-central1
  apigeeKey:
    type: gcp:kms:CryptoKey
    name: apigee_key
    properties:
      name: apigee-key
      keyRing: ${apigeeKeyring.id}
  apigeeSa:
    type: gcp:projects:ServiceIdentity
    name: apigee_sa
    properties:
      project: ${project.projectId}
      service: ${apigee.service}
  apigeeSaKeyuser:
    type: gcp:kms:CryptoKeyIAMMember
    name: apigee_sa_keyuser
    properties:
      cryptoKeyId: ${apigeeKey.id}
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: ${apigeeSa.member}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      displayName: apigee-org
      description: Terraform-provisioned Apigee Org.
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
      runtimeDatabaseEncryptionKeyName: ${apigeeKey.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
        - ${apigeeSaKeyuser}
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: apigee-instance
      location: us-central1
      description: Terraform-managed Apigee Runtime Instance
      displayName: apigee-instance
      orgId: ${apigeeOrg.id}
      diskEncryptionKeyName: ${apigeeKey.id}
  apigee-nat:
    type: gcp:apigee:NatAddress
    properties:
      name: my-nat-address
      instanceId: ${apigeeInstance.id}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Apigee Nat Address With Activate


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 21,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeKeyring = new gcp.kms.KeyRing("apigee_keyring", {
    name: "apigee-keyring",
    location: "us-central1",
});
const apigeeKey = new gcp.kms.CryptoKey("apigee_key", {
    name: "apigee-key",
    keyRing: apigeeKeyring.id,
});
const apigeeSa = new gcp.projects.ServiceIdentity("apigee_sa", {
    project: project.projectId,
    service: apigee.service,
});
const apigeeSaKeyuser = new gcp.kms.CryptoKeyIAMMember("apigee_sa_keyuser", {
    cryptoKeyId: apigeeKey.id,
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: apigeeSa.member,
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    displayName: "apigee-org",
    description: "Terraform-provisioned Apigee Org.",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
    runtimeDatabaseEncryptionKeyName: apigeeKey.id,
}, {
    dependsOn: [
        apigeeVpcConnection,
        apigeeSaKeyuser,
    ],
});
const apigeeInstance = new gcp.apigee.Instance("apigee_instance", {
    name: "apigee-instance",
    location: "us-central1",
    description: "Terraform-managed Apigee Runtime Instance",
    displayName: "apigee-instance",
    orgId: apigeeOrg.id,
    diskEncryptionKeyName: apigeeKey.id,
});
const apigee_nat = new gcp.apigee.NatAddress("apigee-nat", {
    name: "my-nat-address",
    activate: true,
    instanceId: apigeeInstance.id,
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=21,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_keyring = gcp.kms.KeyRing("apigee_keyring",
    name="apigee-keyring",
    location="us-central1")
apigee_key = gcp.kms.CryptoKey("apigee_key",
    name="apigee-key",
    key_ring=apigee_keyring.id)
apigee_sa = gcp.projects.ServiceIdentity("apigee_sa",
    project=project["projectId"],
    service=apigee["service"])
apigee_sa_keyuser = gcp.kms.CryptoKeyIAMMember("apigee_sa_keyuser",
    crypto_key_id=apigee_key.id,
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=apigee_sa.member)
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    display_name="apigee-org",
    description="Terraform-provisioned Apigee Org.",
    project_id=current.project,
    authorized_network=apigee_network.id,
    runtime_database_encryption_key_name=apigee_key.id,
    opts = pulumi.ResourceOptions(depends_on=[
            apigee_vpc_connection,
            apigee_sa_keyuser,
        ]))
apigee_instance = gcp.apigee.Instance("apigee_instance",
    name="apigee-instance",
    location="us-central1",
    description="Terraform-managed Apigee Runtime Instance",
    display_name="apigee-instance",
    org_id=apigee_org.id,
    disk_encryption_key_name=apigee_key.id)
apigee_nat = gcp.apigee.NatAddress("apigee-nat",
    name="my-nat-address",
    activate=True,
    instance_id=apigee_instance.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 21,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeKeyring = new Gcp.Kms.KeyRing("apigee_keyring", new()
    {
        Name = "apigee-keyring",
        Location = "us-central1",
    });

    var apigeeKey = new Gcp.Kms.CryptoKey("apigee_key", new()
    {
        Name = "apigee-key",
        KeyRing = apigeeKeyring.Id,
    });

    var apigeeSa = new Gcp.Projects.ServiceIdentity("apigee_sa", new()
    {
        Project = project.ProjectId,
        Service = apigee.Service,
    });

    var apigeeSaKeyuser = new Gcp.Kms.CryptoKeyIAMMember("apigee_sa_keyuser", new()
    {
        CryptoKeyId = apigeeKey.Id,
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = apigeeSa.Member,
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        DisplayName = "apigee-org",
        Description = "Terraform-provisioned Apigee Org.",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
        RuntimeDatabaseEncryptionKeyName = apigeeKey.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
            apigeeSaKeyuser,
        },
    });

    var apigeeInstance = new Gcp.Apigee.Instance("apigee_instance", new()
    {
        Name = "apigee-instance",
        Location = "us-central1",
        Description = "Terraform-managed Apigee Runtime Instance",
        DisplayName = "apigee-instance",
        OrgId = apigeeOrg.Id,
        DiskEncryptionKeyName = apigeeKey.Id,
    });

    var apigee_nat = new Gcp.Apigee.NatAddress("apigee-nat", new()
    {
        Name = "my-nat-address",
        Activate = true,
        InstanceId = apigeeInstance.Id,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(21),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeKeyring, err := kms.NewKeyRing(ctx, "apigee_keyring", &kms.KeyRingArgs{
			Name:     pulumi.String("apigee-keyring"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		apigeeKey, err := kms.NewCryptoKey(ctx, "apigee_key", &kms.CryptoKeyArgs{
			Name:    pulumi.String("apigee-key"),
			KeyRing: apigeeKeyring.ID(),
		})
		if err != nil {
			return err
		}
		apigeeSa, err := projects.NewServiceIdentity(ctx, "apigee_sa", &projects.ServiceIdentityArgs{
			Project: pulumi.Any(project.ProjectId),
			Service: pulumi.Any(apigee.Service),
		})
		if err != nil {
			return err
		}
		apigeeSaKeyuser, err := kms.NewCryptoKeyIAMMember(ctx, "apigee_sa_keyuser", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: apigeeKey.ID(),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      apigeeSa.Member,
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:                  pulumi.String("us-central1"),
			DisplayName:                      pulumi.String("apigee-org"),
			Description:                      pulumi.String("Terraform-provisioned Apigee Org."),
			ProjectId:                        pulumi.String(current.Project),
			AuthorizedNetwork:                apigeeNetwork.ID(),
			RuntimeDatabaseEncryptionKeyName: apigeeKey.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
			apigeeSaKeyuser,
		}))
		if err != nil {
			return err
		}
		apigeeInstance, err := apigee.NewInstance(ctx, "apigee_instance", &apigee.InstanceArgs{
			Name:                  pulumi.String("apigee-instance"),
			Location:              pulumi.String("us-central1"),
			Description:           pulumi.String("Terraform-managed Apigee Runtime Instance"),
			DisplayName:           pulumi.String("apigee-instance"),
			OrgId:                 apigeeOrg.ID(),
			DiskEncryptionKeyName: apigeeKey.ID(),
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewNatAddress(ctx, "apigee-nat", &apigee.NatAddressArgs{
			Name:       pulumi.String("my-nat-address"),
			Activate:   pulumi.Bool(true),
			InstanceId: apigeeInstance.ID(),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.kms.KeyRing;
import com.pulumi.gcp.kms.KeyRingArgs;
import com.pulumi.gcp.kms.CryptoKey;
import com.pulumi.gcp.kms.CryptoKeyArgs;
import com.pulumi.gcp.projects.ServiceIdentity;
import com.pulumi.gcp.projects.ServiceIdentityArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Instance;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.gcp.apigee.NatAddress;
import com.pulumi.gcp.apigee.NatAddressArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(21)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeKeyring = new KeyRing("apigeeKeyring", KeyRingArgs.builder()
            .name("apigee-keyring")
            .location("us-central1")
            .build());

        var apigeeKey = new CryptoKey("apigeeKey", CryptoKeyArgs.builder()
            .name("apigee-key")
            .keyRing(apigeeKeyring.id())
            .build());

        var apigeeSa = new ServiceIdentity("apigeeSa", ServiceIdentityArgs.builder()
            .project(project.projectId())
            .service(apigee.service())
            .build());

        var apigeeSaKeyuser = new CryptoKeyIAMMember("apigeeSaKeyuser", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(apigeeKey.id())
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(apigeeSa.member())
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .displayName("apigee-org")
            .description("Terraform-provisioned Apigee Org.")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .runtimeDatabaseEncryptionKeyName(apigeeKey.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    apigeeVpcConnection,
                    apigeeSaKeyuser)
                .build());

        var apigeeInstance = new Instance("apigeeInstance", InstanceArgs.builder()
            .name("apigee-instance")
            .location("us-central1")
            .description("Terraform-managed Apigee Runtime Instance")
            .displayName("apigee-instance")
            .orgId(apigeeOrg.id())
            .diskEncryptionKeyName(apigeeKey.id())
            .build());

        var apigee_nat = new NatAddress("apigee-nat", NatAddressArgs.builder()
            .name("my-nat-address")
            .activate("true")
            .instanceId(apigeeInstance.id())
            .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 21
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeKeyring:
    type: gcp:kms:KeyRing
    name: apigee_keyring
    properties:
      name: apigee-keyring
      location: us-central1
  apigeeKey:
    type: gcp:kms:CryptoKey
    name: apigee_key
    properties:
      name: apigee-key
      keyRing: ${apigeeKeyring.id}
  apigeeSa:
    type: gcp:projects:ServiceIdentity
    name: apigee_sa
    properties:
      project: ${project.projectId}
      service: ${apigee.service}
  apigeeSaKeyuser:
    type: gcp:kms:CryptoKeyIAMMember
    name: apigee_sa_keyuser
    properties:
      cryptoKeyId: ${apigeeKey.id}
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: ${apigeeSa.member}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      displayName: apigee-org
      description: Terraform-provisioned Apigee Org.
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
      runtimeDatabaseEncryptionKeyName: ${apigeeKey.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
        - ${apigeeSaKeyuser}
  apigeeInstance:
    type: gcp:apigee:Instance
    name: apigee_instance
    properties:
      name: apigee-instance
      location: us-central1
      description: Terraform-managed Apigee Runtime Instance
      displayName: apigee-instance
      orgId: ${apigeeOrg.id}
      diskEncryptionKeyName: ${apigeeKey.id}
  apigee-nat:
    type: gcp:apigee:NatAddress
    properties:
      name: my-nat-address
      activate: 'true'
      instanceId: ${apigeeInstance.id}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

NatAddress can be imported using any of these accepted formats:

* `{{instance_id}}/natAddresses/{{name}}`

* `{{instance_id}}/{{name}}`

When using the `pulumi import` command, NatAddress can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/natAddress:NatAddress default {{instance_id}}/natAddresses/{{name}}
```

```sh
$ pulumi import gcp:apigee/natAddress:NatAddress default {{instance_id}}/{{name}}
```

[
activateB
 IFlag that specifies whether the reserved NAT address should be activate.


instanceId" The Apigee instance associated with the Apigee environment,
in the format `organizations/{{org_name}}/instances/{{instance_name}}`.


- - -
.
nameB"  Resource ID of the NAT address.
"[
activateB
 IFlag that specifies whether the reserved NAT address should be activate.
"

instanceId" The Apigee instance associated with the Apigee environment,
in the format `organizations/{{org_name}}/instances/{{instance_name}}`.


- - -
"/
	ipAddress" The allocated NAT IP address.
",
name"  Resource ID of the NAT address.
"*
state" State of the NAT IP address.
*Ç
<
apigeeOrganization$gcp:apigee/organization:OrganizationøAn `Organization` is the top-level container in Apigee.


To get more information about Organization, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations)
* How-to Guides
    * [Creating an API organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org)

## Example Usage

### Apigee Organization Cloud Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const org = new gcp.apigee.Organization("org", {
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [apigeeVpcConnection],
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
org = gcp.apigee.Organization("org",
    analytics_region="us-central1",
    project_id=current.project,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_vpc_connection]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var org = new Gcp.Apigee.Organization("org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewOrganization(ctx, "org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var org = new Organization("org", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeVpcConnection)
                .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  org:
    type: gcp:apigee:Organization
    properties:
      analyticsRegion: us-central1
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Apigee Organization Cloud Basic Disable Vpc Peering


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const org = new gcp.apigee.Organization("org", {
    description: "Terraform-provisioned basic Apigee Org without VPC Peering.",
    analyticsRegion: "us-central1",
    projectId: current.then(current => current.project),
    disableVpcPeering: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
org = gcp.apigee.Organization("org",
    description="Terraform-provisioned basic Apigee Org without VPC Peering.",
    analytics_region="us-central1",
    project_id=current.project,
    disable_vpc_peering=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var org = new Gcp.Apigee.Organization("org", new()
    {
        Description = "Terraform-provisioned basic Apigee Org without VPC Peering.",
        AnalyticsRegion = "us-central1",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        DisableVpcPeering = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		_, err = apigee.NewOrganization(ctx, "org", &apigee.OrganizationArgs{
			Description:       pulumi.String("Terraform-provisioned basic Apigee Org without VPC Peering."),
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         pulumi.String(current.Project),
			DisableVpcPeering: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var org = new Organization("org", OrganizationArgs.builder()
            .description("Terraform-provisioned basic Apigee Org without VPC Peering.")
            .analyticsRegion("us-central1")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .disableVpcPeering(true)
            .build());

    }
}
```
```yaml
resources:
  org:
    type: gcp:apigee:Organization
    properties:
      description: Terraform-provisioned basic Apigee Org without VPC Peering.
      analyticsRegion: us-central1
      projectId: ${current.project}
      disableVpcPeering: true
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Apigee Organization Cloud Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {name: "apigee-network"});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
});
const apigeeKeyring = new gcp.kms.KeyRing("apigee_keyring", {
    name: "apigee-keyring",
    location: "us-central1",
});
const apigeeKey = new gcp.kms.CryptoKey("apigee_key", {
    name: "apigee-key",
    keyRing: apigeeKeyring.id,
});
const apigeeSa = new gcp.projects.ServiceIdentity("apigee_sa", {
    project: project.projectId,
    service: apigee.service,
});
const apigeeSaKeyuser = new gcp.kms.CryptoKeyIAMMember("apigee_sa_keyuser", {
    cryptoKeyId: apigeeKey.id,
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: apigeeSa.member,
});
const org = new gcp.apigee.Organization("org", {
    analyticsRegion: "us-central1",
    displayName: "apigee-org",
    description: "Auto-provisioned Apigee Org.",
    projectId: current.then(current => current.project),
    authorizedNetwork: apigeeNetwork.id,
    runtimeDatabaseEncryptionKeyName: apigeeKey.id,
}, {
    dependsOn: [
        apigeeVpcConnection,
        apigeeSaKeyuser,
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_network = gcp.compute.Network("apigee_network", name="apigee-network")
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name])
apigee_keyring = gcp.kms.KeyRing("apigee_keyring",
    name="apigee-keyring",
    location="us-central1")
apigee_key = gcp.kms.CryptoKey("apigee_key",
    name="apigee-key",
    key_ring=apigee_keyring.id)
apigee_sa = gcp.projects.ServiceIdentity("apigee_sa",
    project=project["projectId"],
    service=apigee["service"])
apigee_sa_keyuser = gcp.kms.CryptoKeyIAMMember("apigee_sa_keyuser",
    crypto_key_id=apigee_key.id,
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=apigee_sa.member)
org = gcp.apigee.Organization("org",
    analytics_region="us-central1",
    display_name="apigee-org",
    description="Auto-provisioned Apigee Org.",
    project_id=current.project,
    authorized_network=apigee_network.id,
    runtime_database_encryption_key_name=apigee_key.id,
    opts = pulumi.ResourceOptions(depends_on=[
            apigee_vpc_connection,
            apigee_sa_keyuser,
        ]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    });

    var apigeeKeyring = new Gcp.Kms.KeyRing("apigee_keyring", new()
    {
        Name = "apigee-keyring",
        Location = "us-central1",
    });

    var apigeeKey = new Gcp.Kms.CryptoKey("apigee_key", new()
    {
        Name = "apigee-key",
        KeyRing = apigeeKeyring.Id,
    });

    var apigeeSa = new Gcp.Projects.ServiceIdentity("apigee_sa", new()
    {
        Project = project.ProjectId,
        Service = apigee.Service,
    });

    var apigeeSaKeyuser = new Gcp.Kms.CryptoKeyIAMMember("apigee_sa_keyuser", new()
    {
        CryptoKeyId = apigeeKey.Id,
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = apigeeSa.Member,
    });

    var org = new Gcp.Apigee.Organization("org", new()
    {
        AnalyticsRegion = "us-central1",
        DisplayName = "apigee-org",
        Description = "Auto-provisioned Apigee Org.",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        AuthorizedNetwork = apigeeNetwork.Id,
        RuntimeDatabaseEncryptionKeyName = apigeeKey.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
            apigeeSaKeyuser,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name: pulumi.String("apigee-network"),
		})
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		})
		if err != nil {
			return err
		}
		apigeeKeyring, err := kms.NewKeyRing(ctx, "apigee_keyring", &kms.KeyRingArgs{
			Name:     pulumi.String("apigee-keyring"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		apigeeKey, err := kms.NewCryptoKey(ctx, "apigee_key", &kms.CryptoKeyArgs{
			Name:    pulumi.String("apigee-key"),
			KeyRing: apigeeKeyring.ID(),
		})
		if err != nil {
			return err
		}
		apigeeSa, err := projects.NewServiceIdentity(ctx, "apigee_sa", &projects.ServiceIdentityArgs{
			Project: pulumi.Any(project.ProjectId),
			Service: pulumi.Any(apigee.Service),
		})
		if err != nil {
			return err
		}
		apigeeSaKeyuser, err := kms.NewCryptoKeyIAMMember(ctx, "apigee_sa_keyuser", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: apigeeKey.ID(),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      apigeeSa.Member,
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewOrganization(ctx, "org", &apigee.OrganizationArgs{
			AnalyticsRegion:                  pulumi.String("us-central1"),
			DisplayName:                      pulumi.String("apigee-org"),
			Description:                      pulumi.String("Auto-provisioned Apigee Org."),
			ProjectId:                        pulumi.String(current.Project),
			AuthorizedNetwork:                apigeeNetwork.ID(),
			RuntimeDatabaseEncryptionKeyName: apigeeKey.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
			apigeeSaKeyuser,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.kms.KeyRing;
import com.pulumi.gcp.kms.KeyRingArgs;
import com.pulumi.gcp.kms.CryptoKey;
import com.pulumi.gcp.kms.CryptoKeyArgs;
import com.pulumi.gcp.projects.ServiceIdentity;
import com.pulumi.gcp.projects.ServiceIdentityArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build());

        var apigeeKeyring = new KeyRing("apigeeKeyring", KeyRingArgs.builder()
            .name("apigee-keyring")
            .location("us-central1")
            .build());

        var apigeeKey = new CryptoKey("apigeeKey", CryptoKeyArgs.builder()
            .name("apigee-key")
            .keyRing(apigeeKeyring.id())
            .build());

        var apigeeSa = new ServiceIdentity("apigeeSa", ServiceIdentityArgs.builder()
            .project(project.projectId())
            .service(apigee.service())
            .build());

        var apigeeSaKeyuser = new CryptoKeyIAMMember("apigeeSaKeyuser", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(apigeeKey.id())
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(apigeeSa.member())
            .build());

        var org = new Organization("org", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .displayName("apigee-org")
            .description("Auto-provisioned Apigee Org.")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .authorizedNetwork(apigeeNetwork.id())
            .runtimeDatabaseEncryptionKeyName(apigeeKey.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    apigeeVpcConnection,
                    apigeeSaKeyuser)
                .build());

    }
}
```
```yaml
resources:
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
  apigeeKeyring:
    type: gcp:kms:KeyRing
    name: apigee_keyring
    properties:
      name: apigee-keyring
      location: us-central1
  apigeeKey:
    type: gcp:kms:CryptoKey
    name: apigee_key
    properties:
      name: apigee-key
      keyRing: ${apigeeKeyring.id}
  apigeeSa:
    type: gcp:projects:ServiceIdentity
    name: apigee_sa
    properties:
      project: ${project.projectId}
      service: ${apigee.service}
  apigeeSaKeyuser:
    type: gcp:kms:CryptoKeyIAMMember
    name: apigee_sa_keyuser
    properties:
      cryptoKeyId: ${apigeeKey.id}
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: ${apigeeSa.member}
  org:
    type: gcp:apigee:Organization
    properties:
      analyticsRegion: us-central1
      displayName: apigee-org
      description: Auto-provisioned Apigee Org.
      projectId: ${current.project}
      authorizedNetwork: ${apigeeNetwork.id}
      runtimeDatabaseEncryptionKeyName: ${apigeeKey.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
        - ${apigeeSaKeyuser}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Apigee Organization Cloud Full Disable Vpc Peering


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const current = gcp.organizations.getClientConfig({});
const apigeeKeyring = new gcp.kms.KeyRing("apigee_keyring", {
    name: "apigee-keyring",
    location: "us-central1",
});
const apigeeKey = new gcp.kms.CryptoKey("apigee_key", {
    name: "apigee-key",
    keyRing: apigeeKeyring.id,
});
const apigeeSa = new gcp.projects.ServiceIdentity("apigee_sa", {
    project: project.projectId,
    service: apigee.service,
});
const apigeeSaKeyuser = new gcp.kms.CryptoKeyIAMMember("apigee_sa_keyuser", {
    cryptoKeyId: apigeeKey.id,
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: apigeeSa.member,
});
const org = new gcp.apigee.Organization("org", {
    analyticsRegion: "us-central1",
    displayName: "apigee-org",
    description: "Terraform-provisioned Apigee Org without VPC Peering.",
    projectId: current.then(current => current.project),
    disableVpcPeering: true,
    runtimeDatabaseEncryptionKeyName: apigeeKey.id,
}, {
    dependsOn: [apigeeSaKeyuser],
});
```
```python
import pulumi
import pulumi_gcp as gcp

current = gcp.organizations.get_client_config()
apigee_keyring = gcp.kms.KeyRing("apigee_keyring",
    name="apigee-keyring",
    location="us-central1")
apigee_key = gcp.kms.CryptoKey("apigee_key",
    name="apigee-key",
    key_ring=apigee_keyring.id)
apigee_sa = gcp.projects.ServiceIdentity("apigee_sa",
    project=project["projectId"],
    service=apigee["service"])
apigee_sa_keyuser = gcp.kms.CryptoKeyIAMMember("apigee_sa_keyuser",
    crypto_key_id=apigee_key.id,
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=apigee_sa.member)
org = gcp.apigee.Organization("org",
    analytics_region="us-central1",
    display_name="apigee-org",
    description="Terraform-provisioned Apigee Org without VPC Peering.",
    project_id=current.project,
    disable_vpc_peering=True,
    runtime_database_encryption_key_name=apigee_key.id,
    opts = pulumi.ResourceOptions(depends_on=[apigee_sa_keyuser]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var current = Gcp.Organizations.GetClientConfig.Invoke();

    var apigeeKeyring = new Gcp.Kms.KeyRing("apigee_keyring", new()
    {
        Name = "apigee-keyring",
        Location = "us-central1",
    });

    var apigeeKey = new Gcp.Kms.CryptoKey("apigee_key", new()
    {
        Name = "apigee-key",
        KeyRing = apigeeKeyring.Id,
    });

    var apigeeSa = new Gcp.Projects.ServiceIdentity("apigee_sa", new()
    {
        Project = project.ProjectId,
        Service = apigee.Service,
    });

    var apigeeSaKeyuser = new Gcp.Kms.CryptoKeyIAMMember("apigee_sa_keyuser", new()
    {
        CryptoKeyId = apigeeKey.Id,
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = apigeeSa.Member,
    });

    var org = new Gcp.Apigee.Organization("org", new()
    {
        AnalyticsRegion = "us-central1",
        DisplayName = "apigee-org",
        Description = "Terraform-provisioned Apigee Org without VPC Peering.",
        ProjectId = current.Apply(getClientConfigResult => getClientConfigResult.Project),
        DisableVpcPeering = true,
        RuntimeDatabaseEncryptionKeyName = apigeeKey.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeSaKeyuser,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		current, err := organizations.GetClientConfig(ctx, map[string]interface{}{}, nil)
		if err != nil {
			return err
		}
		apigeeKeyring, err := kms.NewKeyRing(ctx, "apigee_keyring", &kms.KeyRingArgs{
			Name:     pulumi.String("apigee-keyring"),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		apigeeKey, err := kms.NewCryptoKey(ctx, "apigee_key", &kms.CryptoKeyArgs{
			Name:    pulumi.String("apigee-key"),
			KeyRing: apigeeKeyring.ID(),
		})
		if err != nil {
			return err
		}
		apigeeSa, err := projects.NewServiceIdentity(ctx, "apigee_sa", &projects.ServiceIdentityArgs{
			Project: pulumi.Any(project.ProjectId),
			Service: pulumi.Any(apigee.Service),
		})
		if err != nil {
			return err
		}
		apigeeSaKeyuser, err := kms.NewCryptoKeyIAMMember(ctx, "apigee_sa_keyuser", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: apigeeKey.ID(),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      apigeeSa.Member,
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewOrganization(ctx, "org", &apigee.OrganizationArgs{
			AnalyticsRegion:                  pulumi.String("us-central1"),
			DisplayName:                      pulumi.String("apigee-org"),
			Description:                      pulumi.String("Terraform-provisioned Apigee Org without VPC Peering."),
			ProjectId:                        pulumi.String(current.Project),
			DisableVpcPeering:                pulumi.Bool(true),
			RuntimeDatabaseEncryptionKeyName: apigeeKey.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeSaKeyuser,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.kms.KeyRing;
import com.pulumi.gcp.kms.KeyRingArgs;
import com.pulumi.gcp.kms.CryptoKey;
import com.pulumi.gcp.kms.CryptoKeyArgs;
import com.pulumi.gcp.projects.ServiceIdentity;
import com.pulumi.gcp.projects.ServiceIdentityArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var current = OrganizationsFunctions.getClientConfig();

        var apigeeKeyring = new KeyRing("apigeeKeyring", KeyRingArgs.builder()
            .name("apigee-keyring")
            .location("us-central1")
            .build());

        var apigeeKey = new CryptoKey("apigeeKey", CryptoKeyArgs.builder()
            .name("apigee-key")
            .keyRing(apigeeKeyring.id())
            .build());

        var apigeeSa = new ServiceIdentity("apigeeSa", ServiceIdentityArgs.builder()
            .project(project.projectId())
            .service(apigee.service())
            .build());

        var apigeeSaKeyuser = new CryptoKeyIAMMember("apigeeSaKeyuser", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(apigeeKey.id())
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(apigeeSa.member())
            .build());

        var org = new Organization("org", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .displayName("apigee-org")
            .description("Terraform-provisioned Apigee Org without VPC Peering.")
            .projectId(current.applyValue(getClientConfigResult -> getClientConfigResult.project()))
            .disableVpcPeering(true)
            .runtimeDatabaseEncryptionKeyName(apigeeKey.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigeeSaKeyuser)
                .build());

    }
}
```
```yaml
resources:
  apigeeKeyring:
    type: gcp:kms:KeyRing
    name: apigee_keyring
    properties:
      name: apigee-keyring
      location: us-central1
  apigeeKey:
    type: gcp:kms:CryptoKey
    name: apigee_key
    properties:
      name: apigee-key
      keyRing: ${apigeeKeyring.id}
  apigeeSa:
    type: gcp:projects:ServiceIdentity
    name: apigee_sa
    properties:
      project: ${project.projectId}
      service: ${apigee.service}
  apigeeSaKeyuser:
    type: gcp:kms:CryptoKeyIAMMember
    name: apigee_sa_keyuser
    properties:
      cryptoKeyId: ${apigeeKey.id}
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: ${apigeeSa.member}
  org:
    type: gcp:apigee:Organization
    properties:
      analyticsRegion: us-central1
      displayName: apigee-org
      description: Terraform-provisioned Apigee Org without VPC Peering.
      projectId: ${current.project}
      disableVpcPeering: true
      runtimeDatabaseEncryptionKeyName: ${apigeeKey.id}
    options:
      dependsOn:
        - ${apigeeSaKeyuser}
variables:
  current:
    fn::invoke:
      function: gcp:organizations:getClientConfig
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Organization can be imported using any of these accepted formats:

* `organizations/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Organization can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/organization:Organization default organizations/{{name}}
```

```sh
$ pulumi import gcp:apigee/organization:Organization default {{name}}
```

Ê
analyticsRegionB" °Primary GCP region for analytics data storage. For valid values, see [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).
d
 apiConsumerDataEncryptionKeyNameB" :Cloud KMS key name used for encrypting API consumer data.
î
apiConsumerDataLocationB" ÌThis field is needed only for customers using non-default data residency regions.
Apigee stores some control plane data only in single region.
This field determines which single region Apigee should use.

authorizedNetworkB" ùCompute Engine network used for Service Networking to be peered with Apigee runtime instances.
See [Getting started with the Service Networking API](https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started).
Valid only when `RuntimeType` is set to CLOUD. The value can be updated only when there are no runtime instances. For example: "default".
}
billingTypeB" hBilling type of the Apigee organization. See [Apigee pricing](https://cloud.google.com/apigee/pricing).
º
controlPlaneEncryptionKeyNameB" Cloud KMS key name used for encrypting control plane data that is stored in a multi region.
Only used for the data residency region "US" or "EU".
=
descriptionB" (Description of the Apigee organization.
Ó
disableVpcPeeringB
 ·Flag that specifies whether the VPC Peering through Private Google Access should be
disabled between the consumer network and Apigee. Required if an `authorizedNetwork`
on the consumer project is not provided, in which case the flag should be set to `true`.
Valid only when `RuntimeType` is set to CLOUD. The value must be set before the creation
of any Apigee runtime instance and can be updated only when there are no runtime instances.
B
displayNameB" -The display name of the Apigee organization.
Q
	projectId" @The project ID associated with the Apigee organization.


- - -
Æ

properties`B^:\
Z
apigeeOrganizationProperties8gcp:apigee/OrganizationProperties:OrganizationPropertiesVProperties defined in the Apigee organization profile.
Structure is documented below.

	retentionB" íOptional. This setting is applicable only for organizations that are soft-deleted (i.e., BillingType
is not EVALUATION). It controls how long Organization data will be retained after the initial delete
operation completes. During this period, the Organization may be restored to its last known state.
After this period, the Organization will no longer be able to be restored.
Default value is `DELETION_RETENTION_UNSPECIFIED`.
Possible values are: `DELETION_RETENTION_UNSPECIFIED`, `MINIMUM`.
ú
 runtimeDatabaseEncryptionKeyNameB" ÏCloud KMS key name used for encrypting the data that is stored and replicated across runtime instances.
Update is not allowed after the organization is created.
If not specified, a Google-Managed encryption key will be used.
Valid only when `RuntimeType` is CLOUD. For example: `projects/foo/locations/us/keyRings/bar/cryptoKeys/baz`.
¬
runtimeTypeB" Runtime type of the Apigee organization based on the Apigee subscription purchased.
Default value is `CLOUD`.
Possible values are: `CLOUD`, `HYBRID`.
"Ê
analyticsRegionB" °Primary GCP region for analytics data storage. For valid values, see [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).
"d
 apiConsumerDataEncryptionKeyNameB" :Cloud KMS key name used for encrypting API consumer data.
"î
apiConsumerDataLocationB" ÌThis field is needed only for customers using non-default data residency regions.
Apigee stores some control plane data only in single region.
This field determines which single region Apigee should use.
"M
apigeeProjectId" 6Output only. Project ID of the Apigee Tenant Project.
"
authorizedNetworkB" ùCompute Engine network used for Service Networking to be peered with Apigee runtime instances.
See [Getting started with the Service Networking API](https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started).
Valid only when `RuntimeType` is set to CLOUD. The value can be updated only when there are no runtime instances. For example: "default".
"{
billingType" hBilling type of the Apigee organization. See [Apigee pricing](https://cloud.google.com/apigee/pricing).
"²
caCertificate" Output only. Base64-encoded public certificate for the root CA of the Apigee organization.
Valid only when `RuntimeType` is CLOUD. A base64-encoded string.
"º
controlPlaneEncryptionKeyNameB" Cloud KMS key name used for encrypting control plane data that is stored in a multi region.
Only used for the data residency region "US" or "EU".
"=
descriptionB" (Description of the Apigee organization.
"Ó
disableVpcPeeringB
 ·Flag that specifies whether the VPC Peering through Private Google Access should be
disabled between the consumer network and Apigee. Required if an `authorizedNetwork`
on the consumer project is not provided, in which case the flag should be set to `true`.
Valid only when `RuntimeType` is set to CLOUD. The value must be set before the creation
of any Apigee runtime instance and can be updated only when there are no runtime instances.
"B
displayNameB" -The display name of the Apigee organization.
":
name" .Output only. Name of the Apigee organization.
"Q
	projectId" @The project ID associated with the Apigee organization.


- - -
"Ä

properties^:\
Z
apigeeOrganizationProperties8gcp:apigee/OrganizationProperties:OrganizationPropertiesVProperties defined in the Apigee organization profile.
Structure is documented below.
"
	retentionB" íOptional. This setting is applicable only for organizations that are soft-deleted (i.e., BillingType
is not EVALUATION). It controls how long Organization data will be retained after the initial delete
operation completes. During this period, the Organization may be restored to its last known state.
After this period, the Organization will no longer be able to be restored.
Default value is `DELETION_RETENTION_UNSPECIFIED`.
Possible values are: `DELETION_RETENTION_UNSPECIFIED`, `MINIMUM`.
"ú
 runtimeDatabaseEncryptionKeyNameB" ÏCloud KMS key name used for encrypting the data that is stored and replicated across runtime instances.
Update is not allowed after the organization is created.
If not specified, a Google-Managed encryption key will be used.
Valid only when `RuntimeType` is CLOUD. For example: `projects/foo/locations/us/keyRings/bar/cryptoKeys/baz`.
"¬
runtimeTypeB" Runtime type of the Apigee organization based on the Apigee subscription purchased.
Default value is `CLOUD`.
Possible values are: `CLOUD`, `HYBRID`.
"Ñ
subscriptionType" ¸Output only. Subscription type of the Apigee organization.
Valid values include trial (free, limited, and for evaluation purposes only) or paid (full subscription has been purchased).
*Î
6
apigee
Sharedflow gcp:apigee/sharedflow:SharedflowéYou can combine policies and resources into a shared flow that you can consume from multiple API proxies, and even from other shared flows. Although it's like a proxy, a shared flow has no endpoint. It can be used only from an API proxy or shared flow that's in the same organization as the shared flow itself.


To get more information about SharedFlow, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.sharedflows)
* How-to Guides
    * [Sharedflows](https://cloud.google.com/apigee/docs/resources)

## Import

SharedFlow can be imported using any of these accepted formats:

* `{{org_id}}/sharedflows/{{name}}`

* `{{org_id}}/{{name}}`

When using the `pulumi import` command, SharedFlow can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/sharedflow:Sharedflow default {{org_id}}/sharedflows/{{name}}
```

```sh
$ pulumi import gcp:apigee/sharedflow:Sharedflow default {{org_id}}/{{name}}
```

:
configBundle" &Path to the config zip bundle.

- - -

detectMd5hashB" )
nameB" The ID of the shared flow.
O
orgId" BThe Apigee Organization name associated with the Apigee instance.
":
configBundle" &Path to the config zip bundle.

- - -
"
detectMd5hashB" "[
latestRevisionId" CThe id of the most recently created revision for this shared flow.
"Æ
md5hash" ¶(Computed) Base 64 MD5 hash of the uploaded data. It is speculative as remote does not return hash of the bundle. Remote changes are detected using returned last_modified timestamp.
"§
	metaDatasT*R:P
N
apigeeSharedflowMetaData0gcp:apigee/SharedflowMetaData:SharedflowMetaDataDMetadata describing the shared flow.
Structure is documented below.
"'
name" The ID of the shared flow.
"O
orgId" BThe Apigee Organization name associated with the Apigee instance.
"<
	revisions*" )A list of revisions of this shared flow.
*¯
T
apigeeSharedflowDeployment4gcp:apigee/sharedflowDeployment:SharedflowDeploymentÄ	Deploys a revision of a sharedflow.


To get more information about SharedflowDeployment, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.sharedflows.revisions.deployments)
* How-to Guides
    * [sharedflows.revisions.deployments](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.sharedflows.revisions.deployments)

## Import

SharedflowDeployment can be imported using any of these accepted formats:

* `organizations/{{org_id}}/environments/{{environment}}/sharedflows/{{sharedflow_id}}/revisions/{{revision}}/deployments/{{name}}`

* `{{org_id}}/{{environment}}/{{sharedflow_id}}/{{revision}}/{{name}}`

When using the `pulumi import` command, SharedflowDeployment can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/sharedflowDeployment:SharedflowDeployment default organizations/{{org_id}}/environments/{{environment}}/sharedflows/{{sharedflow_id}}/revisions/{{revision}}/deployments/{{name}}
```

```sh
$ pulumi import gcp:apigee/sharedflowDeployment:SharedflowDeployment default {{org_id}}/{{environment}}/{{sharedflow_id}}/{{revision}}/{{name}}
```

7
environment" $The resource ID of the environment.
D
orgId" 7The Apigee Organization associated with the Sharedflow
C
revision" 3Revision of the Sharedflow to be deployed.


- - -
Ç
serviceAccountB" ®The service account represents the identity of the deployed proxy, and determines what permissions it has. The format must be {ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com.
9
sharedflowId" %Id of the Sharedflow to be deployed.
"7
environment" $The resource ID of the environment.
"D
orgId" 7The Apigee Organization associated with the Sharedflow
"C
revision" 3Revision of the Sharedflow to be deployed.


- - -
"Ç
serviceAccountB" ®The service account represents the identity of the deployed proxy, and determines what permissions it has. The format must be {ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com.
"9
sharedflowId" %Id of the Sharedflow to be deployed.
*êf
K
apigeeSyncAuthorization.gcp:apigee/syncAuthorization:SyncAuthorization¹YAuthorize the Synchronizer to download environment data from the control plane.


To get more information about SyncAuthorization, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations#getsyncauthorization)
* How-to Guides
    * [Enable Synchronizer access](https://cloud.google.com/apigee/docs/hybrid/v1.8/synchronizer-access#enable-synchronizer-access)

## Example Usage

### Apigee Sync Authorization Basic Test


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = new gcp.organizations.Project("project", {
    projectId: "my-project",
    name: "my-project",
    orgId: "123456789",
    billingAccount: "000000-0000000-0000000-000000",
    deletionPolicy: "DELETE",
});
const apigee = new gcp.projects.Service("apigee", {
    project: project.projectId,
    service: "apigee.googleapis.com",
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: project.projectId,
    runtimeType: "HYBRID",
}, {
    dependsOn: [apigee],
});
const serviceAccount = new gcp.serviceaccount.Account("service_account", {
    accountId: "my-account",
    displayName: "Service Account",
});
const synchronizer_iam = new gcp.projects.IAMMember("synchronizer-iam", {
    project: project.projectId,
    role: "roles/apigee.synchronizerManager",
    member: pulumi.interpolate`serviceAccount:${serviceAccount.email}`,
});
const apigeeSyncAuthorization = new gcp.apigee.SyncAuthorization("apigee_sync_authorization", {
    name: apigeeOrg.name,
    identities: [pulumi.interpolate`serviceAccount:${serviceAccount.email}`],
}, {
    dependsOn: [synchronizer_iam],
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.Project("project",
    project_id="my-project",
    name="my-project",
    org_id="123456789",
    billing_account="000000-0000000-0000000-000000",
    deletion_policy="DELETE")
apigee = gcp.projects.Service("apigee",
    project=project.project_id,
    service="apigee.googleapis.com")
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=project.project_id,
    runtime_type="HYBRID",
    opts = pulumi.ResourceOptions(depends_on=[apigee]))
service_account = gcp.serviceaccount.Account("service_account",
    account_id="my-account",
    display_name="Service Account")
synchronizer_iam = gcp.projects.IAMMember("synchronizer-iam",
    project=project.project_id,
    role="roles/apigee.synchronizerManager",
    member=service_account.email.apply(lambda email: f"serviceAccount:{email}"))
apigee_sync_authorization = gcp.apigee.SyncAuthorization("apigee_sync_authorization",
    name=apigee_org.name,
    identities=[service_account.email.apply(lambda email: f"serviceAccount:{email}")],
    opts = pulumi.ResourceOptions(depends_on=[synchronizer_iam]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = new Gcp.Organizations.Project("project", new()
    {
        ProjectId = "my-project",
        Name = "my-project",
        OrgId = "123456789",
        BillingAccount = "000000-0000000-0000000-000000",
        DeletionPolicy = "DELETE",
    });

    var apigee = new Gcp.Projects.Service("apigee", new()
    {
        Project = project.ProjectId,
        ServiceName = "apigee.googleapis.com",
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = project.ProjectId,
        RuntimeType = "HYBRID",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigee,
        },
    });

    var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    {
        AccountId = "my-account",
        DisplayName = "Service Account",
    });

    var synchronizer_iam = new Gcp.Projects.IAMMember("synchronizer-iam", new()
    {
        Project = project.ProjectId,
        Role = "roles/apigee.synchronizerManager",
        Member = serviceAccount.Email.Apply(email => $"serviceAccount:{email}"),
    });

    var apigeeSyncAuthorization = new Gcp.Apigee.SyncAuthorization("apigee_sync_authorization", new()
    {
        Name = apigeeOrg.Name,
        Identities = new[]
        {
            serviceAccount.Email.Apply(email => $"serviceAccount:{email}"),
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            synchronizer_iam,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
			ProjectId:      pulumi.String("my-project"),
			Name:           pulumi.String("my-project"),
			OrgId:          pulumi.String("123456789"),
			BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		apigee, err := projects.NewService(ctx, "apigee", &projects.ServiceArgs{
			Project: project.ProjectId,
			Service: pulumi.String("apigee.googleapis.com"),
		})
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion: pulumi.String("us-central1"),
			ProjectId:       project.ProjectId,
			RuntimeType:     pulumi.String("HYBRID"),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigee,
		}))
		if err != nil {
			return err
		}
		serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-account"),
			DisplayName: pulumi.String("Service Account"),
		})
		if err != nil {
			return err
		}
		_, err = projects.NewIAMMember(ctx, "synchronizer-iam", &projects.IAMMemberArgs{
			Project: project.ProjectId,
			Role:    pulumi.String("roles/apigee.synchronizerManager"),
			Member: serviceAccount.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewSyncAuthorization(ctx, "apigee_sync_authorization", &apigee.SyncAuthorizationArgs{
			Name: apigeeOrg.Name,
			Identities: pulumi.StringArray{
				serviceAccount.Email.ApplyT(func(email string) (string, error) {
					return fmt.Sprintf("serviceAccount:%v", email), nil
				}).(pulumi.StringOutput),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			synchronizer_iam,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.projects.Service;
import com.pulumi.gcp.projects.ServiceArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.projects.IAMMember;
import com.pulumi.gcp.projects.IAMMemberArgs;
import com.pulumi.gcp.apigee.SyncAuthorization;
import com.pulumi.gcp.apigee.SyncAuthorizationArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var project = new Project("project", ProjectArgs.builder()
            .projectId("my-project")
            .name("my-project")
            .orgId("123456789")
            .billingAccount("000000-0000000-0000000-000000")
            .deletionPolicy("DELETE")
            .build());

        var apigee = new Service("apigee", ServiceArgs.builder()
            .project(project.projectId())
            .service("apigee.googleapis.com")
            .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(project.projectId())
            .runtimeType("HYBRID")
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigee)
                .build());

        var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
            .accountId("my-account")
            .displayName("Service Account")
            .build());

        var synchronizer_iam = new IAMMember("synchronizer-iam", IAMMemberArgs.builder()
            .project(project.projectId())
            .role("roles/apigee.synchronizerManager")
            .member(serviceAccount.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

        var apigeeSyncAuthorization = new SyncAuthorization("apigeeSyncAuthorization", SyncAuthorizationArgs.builder()
            .name(apigeeOrg.name())
            .identities(serviceAccount.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build(), CustomResourceOptions.builder()
                .dependsOn(synchronizer_iam)
                .build());

    }
}
```
```yaml
resources:
  project:
    type: gcp:organizations:Project
    properties:
      projectId: my-project
      name: my-project
      orgId: '123456789'
      billingAccount: 000000-0000000-0000000-000000
      deletionPolicy: DELETE
  apigee:
    type: gcp:projects:Service
    properties:
      project: ${project.projectId}
      service: apigee.googleapis.com
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${project.projectId}
      runtimeType: HYBRID
    options:
      dependsOn:
        - ${apigee}
  serviceAccount:
    type: gcp:serviceaccount:Account
    name: service_account
    properties:
      accountId: my-account
      displayName: Service Account
  synchronizer-iam:
    type: gcp:projects:IAMMember
    properties:
      project: ${project.projectId}
      role: roles/apigee.synchronizerManager
      member: serviceAccount:${serviceAccount.email}
  apigeeSyncAuthorization:
    type: gcp:apigee:SyncAuthorization
    name: apigee_sync_authorization
    properties:
      name: ${apigeeOrg.name}
      identities:
        - serviceAccount:${serviceAccount.email}
    options:
      dependsOn:
        - ${["synchronizer-iam"]}
```
<!--End PulumiCodeChooser -->

## Import

SyncAuthorization can be imported using any of these accepted formats:

* `organizations/{{name}}/syncAuthorization`

* `{{name}}`

When using the `pulumi import` command, SyncAuthorization can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/syncAuthorization:SyncAuthorization default organizations/{{name}}/syncAuthorization
```

```sh
$ pulumi import gcp:apigee/syncAuthorization:SyncAuthorization default {{name}}
```



identities*" Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:service-account-name`.
The `service-account-name` is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
7
nameB" )Name of the Apigee organization.


- - -
"²
etag" ¥Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting each other.
Used internally during updates.
"

identities*" Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:service-account-name`.
The `service-account-name` is formatted like an email address. For example: my-synchronizer-manager-serviceAccount@my_project_id.iam.gserviceaccount.com
You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/v1.8/sa-about#create-the-service-accounts).
"5
name" )Name of the Apigee organization.


- - -
*º¦
<
apigeeTargetServer$gcp:apigee/targetServer:TargetServerìTargetServer configuration. TargetServers are used to decouple a proxy TargetEndpoint HTTPTargetConnections from concrete URLs for backend services.


To get more information about TargetServer, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.environments.targetservers/create)
* How-to Guides
    * [Load balancing across backend servers](https://cloud.google.com/apigee/docs/api-platform/deploy/load-balancing-across-backend-servers)

## Example Usage

### Apigee Target Server Test Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = new gcp.organizations.Project("project", {
    projectId: "my-project",
    name: "my-project",
    orgId: "123456789",
    billingAccount: "000000-0000000-0000000-000000",
    deletionPolicy: "DELETE",
});
const apigee = new gcp.projects.Service("apigee", {
    project: project.projectId,
    service: "apigee.googleapis.com",
});
const servicenetworking = new gcp.projects.Service("servicenetworking", {
    project: project.projectId,
    service: "servicenetworking.googleapis.com",
}, {
    dependsOn: [apigee],
});
const compute = new gcp.projects.Service("compute", {
    project: project.projectId,
    service: "compute.googleapis.com",
}, {
    dependsOn: [servicenetworking],
});
const apigeeNetwork = new gcp.compute.Network("apigee_network", {
    name: "apigee-network",
    project: project.projectId,
}, {
    dependsOn: [compute],
});
const apigeeRange = new gcp.compute.GlobalAddress("apigee_range", {
    name: "apigee-range",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: apigeeNetwork.id,
    project: project.projectId,
});
const apigeeVpcConnection = new gcp.servicenetworking.Connection("apigee_vpc_connection", {
    network: apigeeNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [apigeeRange.name],
}, {
    dependsOn: [servicenetworking],
});
const apigeeOrg = new gcp.apigee.Organization("apigee_org", {
    analyticsRegion: "us-central1",
    projectId: project.projectId,
    authorizedNetwork: apigeeNetwork.id,
}, {
    dependsOn: [
        apigeeVpcConnection,
        apigee,
    ],
});
const apigeeEnvironment = new gcp.apigee.Environment("apigee_environment", {
    orgId: apigeeOrg.id,
    name: "my-environment-name",
    description: "Apigee Environment",
    displayName: "environment-1",
});
const apigeeTargetServer = new gcp.apigee.TargetServer("apigee_target_server", {
    name: "my-target-server",
    description: "Apigee Target Server",
    protocol: "HTTP",
    host: "abc.foo.com",
    port: 8080,
    envId: apigeeEnvironment.id,
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.Project("project",
    project_id="my-project",
    name="my-project",
    org_id="123456789",
    billing_account="000000-0000000-0000000-000000",
    deletion_policy="DELETE")
apigee = gcp.projects.Service("apigee",
    project=project.project_id,
    service="apigee.googleapis.com")
servicenetworking = gcp.projects.Service("servicenetworking",
    project=project.project_id,
    service="servicenetworking.googleapis.com",
    opts = pulumi.ResourceOptions(depends_on=[apigee]))
compute = gcp.projects.Service("compute",
    project=project.project_id,
    service="compute.googleapis.com",
    opts = pulumi.ResourceOptions(depends_on=[servicenetworking]))
apigee_network = gcp.compute.Network("apigee_network",
    name="apigee-network",
    project=project.project_id,
    opts = pulumi.ResourceOptions(depends_on=[compute]))
apigee_range = gcp.compute.GlobalAddress("apigee_range",
    name="apigee-range",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=apigee_network.id,
    project=project.project_id)
apigee_vpc_connection = gcp.servicenetworking.Connection("apigee_vpc_connection",
    network=apigee_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[apigee_range.name],
    opts = pulumi.ResourceOptions(depends_on=[servicenetworking]))
apigee_org = gcp.apigee.Organization("apigee_org",
    analytics_region="us-central1",
    project_id=project.project_id,
    authorized_network=apigee_network.id,
    opts = pulumi.ResourceOptions(depends_on=[
            apigee_vpc_connection,
            apigee,
        ]))
apigee_environment = gcp.apigee.Environment("apigee_environment",
    org_id=apigee_org.id,
    name="my-environment-name",
    description="Apigee Environment",
    display_name="environment-1")
apigee_target_server = gcp.apigee.TargetServer("apigee_target_server",
    name="my-target-server",
    description="Apigee Target Server",
    protocol="HTTP",
    host="abc.foo.com",
    port=8080,
    env_id=apigee_environment.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = new Gcp.Organizations.Project("project", new()
    {
        ProjectId = "my-project",
        Name = "my-project",
        OrgId = "123456789",
        BillingAccount = "000000-0000000-0000000-000000",
        DeletionPolicy = "DELETE",
    });

    var apigee = new Gcp.Projects.Service("apigee", new()
    {
        Project = project.ProjectId,
        ServiceName = "apigee.googleapis.com",
    });

    var servicenetworking = new Gcp.Projects.Service("servicenetworking", new()
    {
        Project = project.ProjectId,
        ServiceName = "servicenetworking.googleapis.com",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigee,
        },
    });

    var compute = new Gcp.Projects.Service("compute", new()
    {
        Project = project.ProjectId,
        ServiceName = "compute.googleapis.com",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            servicenetworking,
        },
    });

    var apigeeNetwork = new Gcp.Compute.Network("apigee_network", new()
    {
        Name = "apigee-network",
        Project = project.ProjectId,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            compute,
        },
    });

    var apigeeRange = new Gcp.Compute.GlobalAddress("apigee_range", new()
    {
        Name = "apigee-range",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = apigeeNetwork.Id,
        Project = project.ProjectId,
    });

    var apigeeVpcConnection = new Gcp.ServiceNetworking.Connection("apigee_vpc_connection", new()
    {
        Network = apigeeNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            apigeeRange.Name,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            servicenetworking,
        },
    });

    var apigeeOrg = new Gcp.Apigee.Organization("apigee_org", new()
    {
        AnalyticsRegion = "us-central1",
        ProjectId = project.ProjectId,
        AuthorizedNetwork = apigeeNetwork.Id,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            apigeeVpcConnection,
            apigee,
        },
    });

    var apigeeEnvironment = new Gcp.Apigee.Environment("apigee_environment", new()
    {
        OrgId = apigeeOrg.Id,
        Name = "my-environment-name",
        Description = "Apigee Environment",
        DisplayName = "environment-1",
    });

    var apigeeTargetServer = new Gcp.Apigee.TargetServer("apigee_target_server", new()
    {
        Name = "my-target-server",
        Description = "Apigee Target Server",
        Protocol = "HTTP",
        Host = "abc.foo.com",
        Port = 8080,
        EnvId = apigeeEnvironment.Id,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
			ProjectId:      pulumi.String("my-project"),
			Name:           pulumi.String("my-project"),
			OrgId:          pulumi.String("123456789"),
			BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		apigee, err := projects.NewService(ctx, "apigee", &projects.ServiceArgs{
			Project: project.ProjectId,
			Service: pulumi.String("apigee.googleapis.com"),
		})
		if err != nil {
			return err
		}
		servicenetworking, err := projects.NewService(ctx, "servicenetworking", &projects.ServiceArgs{
			Project: project.ProjectId,
			Service: pulumi.String("servicenetworking.googleapis.com"),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigee,
		}))
		if err != nil {
			return err
		}
		compute, err := projects.NewService(ctx, "compute", &projects.ServiceArgs{
			Project: project.ProjectId,
			Service: pulumi.String("compute.googleapis.com"),
		}, pulumi.DependsOn([]pulumi.Resource{
			servicenetworking,
		}))
		if err != nil {
			return err
		}
		apigeeNetwork, err := compute.NewNetwork(ctx, "apigee_network", &compute.NetworkArgs{
			Name:    pulumi.String("apigee-network"),
			Project: project.ProjectId,
		}, pulumi.DependsOn([]pulumi.Resource{
			compute,
		}))
		if err != nil {
			return err
		}
		apigeeRange, err := compute.NewGlobalAddress(ctx, "apigee_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("apigee-range"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      apigeeNetwork.ID(),
			Project:      project.ProjectId,
		})
		if err != nil {
			return err
		}
		apigeeVpcConnection, err := servicenetworking.NewConnection(ctx, "apigee_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: apigeeNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				apigeeRange.Name,
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			servicenetworking,
		}))
		if err != nil {
			return err
		}
		apigeeOrg, err := apigee.NewOrganization(ctx, "apigee_org", &apigee.OrganizationArgs{
			AnalyticsRegion:   pulumi.String("us-central1"),
			ProjectId:         project.ProjectId,
			AuthorizedNetwork: apigeeNetwork.ID(),
		}, pulumi.DependsOn([]pulumi.Resource{
			apigeeVpcConnection,
			apigee,
		}))
		if err != nil {
			return err
		}
		apigeeEnvironment, err := apigee.NewEnvironment(ctx, "apigee_environment", &apigee.EnvironmentArgs{
			OrgId:       apigeeOrg.ID(),
			Name:        pulumi.String("my-environment-name"),
			Description: pulumi.String("Apigee Environment"),
			DisplayName: pulumi.String("environment-1"),
		})
		if err != nil {
			return err
		}
		_, err = apigee.NewTargetServer(ctx, "apigee_target_server", &apigee.TargetServerArgs{
			Name:        pulumi.String("my-target-server"),
			Description: pulumi.String("Apigee Target Server"),
			Protocol:    pulumi.String("HTTP"),
			Host:        pulumi.String("abc.foo.com"),
			Port:        pulumi.Int(8080),
			EnvId:       apigeeEnvironment.ID(),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.projects.Service;
import com.pulumi.gcp.projects.ServiceArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.apigee.Organization;
import com.pulumi.gcp.apigee.OrganizationArgs;
import com.pulumi.gcp.apigee.Environment;
import com.pulumi.gcp.apigee.EnvironmentArgs;
import com.pulumi.gcp.apigee.TargetServer;
import com.pulumi.gcp.apigee.TargetServerArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var project = new Project("project", ProjectArgs.builder()
            .projectId("my-project")
            .name("my-project")
            .orgId("123456789")
            .billingAccount("000000-0000000-0000000-000000")
            .deletionPolicy("DELETE")
            .build());

        var apigee = new Service("apigee", ServiceArgs.builder()
            .project(project.projectId())
            .service("apigee.googleapis.com")
            .build());

        var servicenetworking = new Service("servicenetworking", ServiceArgs.builder()
            .project(project.projectId())
            .service("servicenetworking.googleapis.com")
            .build(), CustomResourceOptions.builder()
                .dependsOn(apigee)
                .build());

        var compute = new Service("compute", ServiceArgs.builder()
            .project(project.projectId())
            .service("compute.googleapis.com")
            .build(), CustomResourceOptions.builder()
                .dependsOn(servicenetworking)
                .build());

        var apigeeNetwork = new Network("apigeeNetwork", NetworkArgs.builder()
            .name("apigee-network")
            .project(project.projectId())
            .build(), CustomResourceOptions.builder()
                .dependsOn(compute)
                .build());

        var apigeeRange = new GlobalAddress("apigeeRange", GlobalAddressArgs.builder()
            .name("apigee-range")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(apigeeNetwork.id())
            .project(project.projectId())
            .build());

        var apigeeVpcConnection = new Connection("apigeeVpcConnection", ConnectionArgs.builder()
            .network(apigeeNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(apigeeRange.name())
            .build(), CustomResourceOptions.builder()
                .dependsOn(servicenetworking)
                .build());

        var apigeeOrg = new Organization("apigeeOrg", OrganizationArgs.builder()
            .analyticsRegion("us-central1")
            .projectId(project.projectId())
            .authorizedNetwork(apigeeNetwork.id())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    apigeeVpcConnection,
                    apigee)
                .build());

        var apigeeEnvironment = new Environment("apigeeEnvironment", EnvironmentArgs.builder()
            .orgId(apigeeOrg.id())
            .name("my-environment-name")
            .description("Apigee Environment")
            .displayName("environment-1")
            .build());

        var apigeeTargetServer = new TargetServer("apigeeTargetServer", TargetServerArgs.builder()
            .name("my-target-server")
            .description("Apigee Target Server")
            .protocol("HTTP")
            .host("abc.foo.com")
            .port(8080)
            .envId(apigeeEnvironment.id())
            .build());

    }
}
```
```yaml
resources:
  project:
    type: gcp:organizations:Project
    properties:
      projectId: my-project
      name: my-project
      orgId: '123456789'
      billingAccount: 000000-0000000-0000000-000000
      deletionPolicy: DELETE
  apigee:
    type: gcp:projects:Service
    properties:
      project: ${project.projectId}
      service: apigee.googleapis.com
  servicenetworking:
    type: gcp:projects:Service
    properties:
      project: ${project.projectId}
      service: servicenetworking.googleapis.com
    options:
      dependsOn:
        - ${apigee}
  compute:
    type: gcp:projects:Service
    properties:
      project: ${project.projectId}
      service: compute.googleapis.com
    options:
      dependsOn:
        - ${servicenetworking}
  apigeeNetwork:
    type: gcp:compute:Network
    name: apigee_network
    properties:
      name: apigee-network
      project: ${project.projectId}
    options:
      dependsOn:
        - ${compute}
  apigeeRange:
    type: gcp:compute:GlobalAddress
    name: apigee_range
    properties:
      name: apigee-range
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${apigeeNetwork.id}
      project: ${project.projectId}
  apigeeVpcConnection:
    type: gcp:servicenetworking:Connection
    name: apigee_vpc_connection
    properties:
      network: ${apigeeNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${apigeeRange.name}
    options:
      dependsOn:
        - ${servicenetworking}
  apigeeOrg:
    type: gcp:apigee:Organization
    name: apigee_org
    properties:
      analyticsRegion: us-central1
      projectId: ${project.projectId}
      authorizedNetwork: ${apigeeNetwork.id}
    options:
      dependsOn:
        - ${apigeeVpcConnection}
        - ${apigee}
  apigeeEnvironment:
    type: gcp:apigee:Environment
    name: apigee_environment
    properties:
      orgId: ${apigeeOrg.id}
      name: my-environment-name
      description: Apigee Environment
      displayName: environment-1
  apigeeTargetServer:
    type: gcp:apigee:TargetServer
    name: apigee_target_server
    properties:
      name: my-target-server
      description: Apigee Target Server
      protocol: HTTP
      host: abc.foo.com
      port: 8080
      envId: ${apigeeEnvironment.id}
```
<!--End PulumiCodeChooser -->

## Import

TargetServer can be imported using any of these accepted formats:

* `{{env_id}}/targetservers/{{name}}`

* `{{env_id}}/{{name}}`

When using the `pulumi import` command, TargetServer can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apigee/targetServer:TargetServer default {{env_id}}/targetservers/{{name}}
```

```sh
$ pulumi import gcp:apigee/targetServer:TargetServer default {{env_id}}/{{name}}
```

H
descriptionB" 3A human-readable description of this TargetServer.
¡
envId" The Apigee environment group associated with the Apigee environment,
in the format `organizations/{{org_name}}/environments/{{env_name}}`.


- - -
l
host" `The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
Ú
	isEnabledB
 ÆEnabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
e
nameB" WThe resource id of this reference. Values must match the regular expression [\w\s-.]+.
u
port iThe port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.

protocolB" Immutable. The protocol used by this TargetServer.
Possible values are: `HTTP`, `HTTP2`, `GRPC_TARGET`, `GRPC`, `EXTERNAL_CALLOUT`.
Ô
sSlInfoWBU:S
Q
apigeeTargetServerSSlInfo2gcp:apigee/TargetServerSSlInfo:TargetServerSSlInfoïSpecifies TLS configuration info for this TargetServer. The JSON name is sSLInfo for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
Structure is documented below.
"H
descriptionB" 3A human-readable description of this TargetServer.
"¡
envId" The Apigee environment group associated with the Apigee environment,
in the format `organizations/{{org_name}}/environments/{{env_name}}`.


- - -
"l
host" `The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
"Ú
	isEnabledB
 ÆEnabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
"c
name" WThe resource id of this reference. Values must match the regular expression [\w\s-.]+.
"u
port iThe port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
"
protocol" Immutable. The protocol used by this TargetServer.
Possible values are: `HTTP`, `HTTP2`, `GRPC_TARGET`, `GRPC`, `EXTERNAL_CALLOUT`.
"Ô
sSlInfoWBU:S
Q
apigeeTargetServerSSlInfo2gcp:apigee/TargetServerSSlInfo:TargetServerSSlInfoïSpecifies TLS configuration info for this TargetServer. The JSON name is sSLInfo for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
Structure is documented below.
*¡8
?
	appengineApplication%gcp:appengine/application:ApplicationAllows creation and management of an App Engine application.

> App Engine applications cannot be deleted once they're created; you have to delete the
   entire project to delete the application. This provider will report the application has been
   successfully deleted; this is a limitation of the provider, and will go away in the future.
   This provider is not able to delete App Engine applications.



## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const myProject = new gcp.organizations.Project("my_project", {
    name: "My Project",
    projectId: "your-project-id",
    orgId: "1234567",
});
const app = new gcp.appengine.Application("app", {
    project: myProject.projectId,
    locationId: "us-central",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_project = gcp.organizations.Project("my_project",
    name="My Project",
    project_id="your-project-id",
    org_id="1234567")
app = gcp.appengine.Application("app",
    project=my_project.project_id,
    location_id="us-central")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var myProject = new Gcp.Organizations.Project("my_project", new()
    {
        Name = "My Project",
        ProjectId = "your-project-id",
        OrgId = "1234567",
    });

    var app = new Gcp.AppEngine.Application("app", new()
    {
        Project = myProject.ProjectId,
        LocationId = "us-central",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/appengine"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myProject, err := organizations.NewProject(ctx, "my_project", &organizations.ProjectArgs{
			Name:      pulumi.String("My Project"),
			ProjectId: pulumi.String("your-project-id"),
			OrgId:     pulumi.String("1234567"),
		})
		if err != nil {
			return err
		}
		_, err = appengine.NewApplication(ctx, "app", &appengine.ApplicationArgs{
			Project:    myProject.ProjectId,
			LocationId: pulumi.String("us-central"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.appengine.Application;
import com.pulumi.gcp.appengine.ApplicationArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var myProject = new Project("myProject", ProjectArgs.builder()
            .name("My Project")
            .projectId("your-project-id")
            .orgId("1234567")
            .build());

        var app = new Application("app", ApplicationArgs.builder()
            .project(myProject.projectId())
            .locationId("us-central")
            .build());

    }
}
```
```yaml
resources:
  myProject:
    type: gcp:organizations:Project
    name: my_project
    properties:
      name: My Project
      projectId: your-project-id
      orgId: '1234567'
  app:
    type: gcp:appengine:Application
    properties:
      project: ${myProject.projectId}
      locationId: us-central
```
<!--End PulumiCodeChooser -->

## Import

Applications can be imported using the ID of the project the application belongs to, e.g.

* `{{project-id}}`

When using the `pulumi import` command, Applications can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:appengine/application:Application default {{project-id}}
```

\

authDomainB" HThe domain to authenticate users with when using App Engine's User API.
½
databaseTypeB" ¦The type of the Cloud Firestore or Cloud Datastore database associated with this application.
Can be `CLOUD_FIRESTORE` or `CLOUD_DATASTORE_COMPATIBILITY` for new
instances.  To support old instances, the value `CLOUD_DATASTORE` is accepted by the provider, but will be rejected by the API.
To create a Cloud Firestore database without creating an App Engine application, use the
`gcp.firestore.Database`
resource instead.
Ï
featureSettingsrBp:n
l
	appengineApplicationFeatureSettingsCgcp:appengine/ApplicationFeatureSettings:ApplicationFeatureSettingsHA block of optional settings to configure specific App Engine features:

iapNBL:J
H
	appengineApplicationIap+gcp:appengine/ApplicationIap:ApplicationIap1Settings for enabling Cloud Identity Aware Proxy
k

locationId" YThe [location](https://cloud.google.com/appengine/docs/locations)
to serve the app from.
Á
projectB" ¯The project ID to create the application under.
~>**NOTE:** GCP only accepts project ID, not project number. If you are using number,
you may get a "Permission denied" error.
6
servingStatusB" The serving status of the app.
";
appId" .Identifier of the app, usually `{PROJECT_ID}`
"Z

authDomain" HThe domain to authenticate users with when using App Engine's User API.
"G

codeBucket" 5The GCS bucket code is being stored in for this app.
"»
databaseType" ¦The type of the Cloud Firestore or Cloud Datastore database associated with this application.
Can be `CLOUD_FIRESTORE` or `CLOUD_DATASTORE_COMPATIBILITY` for new
instances.  To support old instances, the value `CLOUD_DATASTORE` is accepted by the provider, but will be rejected by the API.
To create a Cloud Firestore database without creating an App Engine application, use the
`gcp.firestore.Database`
resource instead.
"M
defaultBucket" 8The GCS bucket content is being stored in for this app.
":
defaultHostname" #The default hostname for this app.
"Í
featureSettingsp:n
l
	appengineApplicationFeatureSettingsCgcp:appengine/ApplicationFeatureSettings:ApplicationFeatureSettingsHA block of optional settings to configure specific App Engine features:
"U
	gcrDomain" DThe GCR domain used for storing managed Docker images for this app.
"
iapL:J
H
	appengineApplicationIap+gcp:appengine/ApplicationIap:ApplicationIap1Settings for enabling Cloud Identity Aware Proxy
"k

locationId" YThe [location](https://cloud.google.com/appengine/docs/locations)
to serve the app from.
"@
name" 4Unique name of the app, usually `apps/{PROJECT_ID}`
"¿
project" ¯The project ID to create the application under.
~>**NOTE:** GCP only accepts project ID, not project number. If you are using number,
you may get a "Permission denied" error.
"4
servingStatus" The serving status of the app.
"à
urlDispatchRulesr*p:n
l
	appengineApplicationUrlDispatchRuleCgcp:appengine/ApplicationUrlDispatchRule:ApplicationUrlDispatchRuleXA list of dispatch rule blocks. Each block has a `domain`, `path`, and `service` field.
*Ì^
o
	appengineApplicationUrlDispatchRulesEgcp:appengine/applicationUrlDispatchRules:ApplicationUrlDispatchRulesYRules to match an HTTP request and dispatch that request to a service.


To get more information about ApplicationUrlDispatchRules, see:

* [API documentation](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps#UrlDispatchRule)

## Example Usage

### App Engine Application Url Dispatch Rules Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const bucket = new gcp.storage.Bucket("bucket", {
    name: "appengine-test-bucket",
    location: "US",
});
const object = new gcp.storage.BucketObject("object", {
    name: "hello-world.zip",
    bucket: bucket.name,
    source: new pulumi.asset.FileAsset("./test-fixtures/hello-world.zip"),
});
const adminV3 = new gcp.appengine.StandardAppVersion("admin_v3", {
    versionId: "v3",
    service: "admin",
    runtime: "nodejs20",
    entrypoint: {
        shell: "node ./app.js",
    },
    deployment: {
        zip: {
            sourceUrl: pulumi.interpolate`https://storage.googleapis.com/${bucket.name}/${object.name}`,
        },
    },
    envVariables: {
        port: "8080",
    },
    deleteServiceOnDestroy: true,
});
const webService = new gcp.appengine.ApplicationUrlDispatchRules("web_service", {dispatchRules: [
    {
        domain: "*",
        path: "/*",
        service: "default",
    },
    {
        domain: "*",
        path: "/admin/*",
        service: adminV3.service,
    },
]});
```
```python
import pulumi
import pulumi_gcp as gcp

bucket = gcp.storage.Bucket("bucket",
    name="appengine-test-bucket",
    location="US")
object = gcp.storage.BucketObject("object",
    name="hello-world.zip",
    bucket=bucket.name,
    source=pulumi.FileAsset("./test-fixtures/hello-world.zip"))
admin_v3 = gcp.appengine.StandardAppVersion("admin_v3",
    version_id="v3",
    service="admin",
    runtime="nodejs20",
    entrypoint={
        "shell": "node ./app.js",
    },
    deployment={
        "zip": {
            "source_url": pulumi.Output.all(
                bucketName=bucket.name,
                objectName=object.name
).apply(lambda resolved_outputs: f"https://storage.googleapis.com/{resolved_outputs['bucketName']}/{resolved_outputs['objectName']}")
,
        },
    },
    env_variables={
        "port": "8080",
    },
    delete_service_on_destroy=True)
web_service = gcp.appengine.ApplicationUrlDispatchRules("web_service", dispatch_rules=[
    {
        "domain": "*",
        "path": "/*",
        "service": "default",
    },
    {
        "domain": "*",
        "path": "/admin/*",
        "service": admin_v3.service,
    },
])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "appengine-test-bucket",
        Location = "US",
    });

    var @object = new Gcp.Storage.BucketObject("object", new()
    {
        Name = "hello-world.zip",
        Bucket = bucket.Name,
        Source = new FileAsset("./test-fixtures/hello-world.zip"),
    });

    var adminV3 = new Gcp.AppEngine.StandardAppVersion("admin_v3", new()
    {
        VersionId = "v3",
        Service = "admin",
        Runtime = "nodejs20",
        Entrypoint = new Gcp.AppEngine.Inputs.StandardAppVersionEntrypointArgs
        {
            Shell = "node ./app.js",
        },
        Deployment = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentArgs
        {
            Zip = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentZipArgs
            {
                SourceUrl = Output.Tuple(bucket.Name, @object.Name).Apply(values =>
                {
                    var bucketName = values.Item1;
                    var objectName = values.Item2;
                    return $"https://storage.googleapis.com/{bucketName}/{objectName}";
                }),
            },
        },
        EnvVariables = 
        {
            { "port", "8080" },
        },
        DeleteServiceOnDestroy = true,
    });

    var webService = new Gcp.AppEngine.ApplicationUrlDispatchRules("web_service", new()
    {
        DispatchRules = new[]
        {
            new Gcp.AppEngine.Inputs.ApplicationUrlDispatchRulesDispatchRuleArgs
            {
                Domain = "*",
                Path = "/*",
                Service = "default",
            },
            new Gcp.AppEngine.Inputs.ApplicationUrlDispatchRulesDispatchRuleArgs
            {
                Domain = "*",
                Path = "/admin/*",
                Service = adminV3.Service,
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/appengine"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:     pulumi.String("appengine-test-bucket"),
			Location: pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		object, err := storage.NewBucketObject(ctx, "object", &storage.BucketObjectArgs{
			Name:   pulumi.String("hello-world.zip"),
			Bucket: bucket.Name,
			Source: pulumi.NewFileAsset("./test-fixtures/hello-world.zip"),
		})
		if err != nil {
			return err
		}
		adminV3, err := appengine.NewStandardAppVersion(ctx, "admin_v3", &appengine.StandardAppVersionArgs{
			VersionId: pulumi.String("v3"),
			Service:   pulumi.String("admin"),
			Runtime:   pulumi.String("nodejs20"),
			Entrypoint: &appengine.StandardAppVersionEntrypointArgs{
				Shell: pulumi.String("node ./app.js"),
			},
			Deployment: &appengine.StandardAppVersionDeploymentArgs{
				Zip: &appengine.StandardAppVersionDeploymentZipArgs{
					SourceUrl: pulumi.All(bucket.Name, object.Name).ApplyT(func(_args []interface{}) (string, error) {
						bucketName := _args[0].(string)
						objectName := _args[1].(string)
						return fmt.Sprintf("https://storage.googleapis.com/%v/%v", bucketName, objectName), nil
					}).(pulumi.StringOutput),
				},
			},
			EnvVariables: pulumi.StringMap{
				"port": pulumi.String("8080"),
			},
			DeleteServiceOnDestroy: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		_, err = appengine.NewApplicationUrlDispatchRules(ctx, "web_service", &appengine.ApplicationUrlDispatchRulesArgs{
			DispatchRules: appengine.ApplicationUrlDispatchRulesDispatchRuleArray{
				&appengine.ApplicationUrlDispatchRulesDispatchRuleArgs{
					Domain:  pulumi.String("*"),
					Path:    pulumi.String("/*"),
					Service: pulumi.String("default"),
				},
				&appengine.ApplicationUrlDispatchRulesDispatchRuleArgs{
					Domain:  pulumi.String("*"),
					Path:    pulumi.String("/admin/*"),
					Service: adminV3.Service,
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.appengine.StandardAppVersion;
import com.pulumi.gcp.appengine.StandardAppVersionArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionEntrypointArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentZipArgs;
import com.pulumi.gcp.appengine.ApplicationUrlDispatchRules;
import com.pulumi.gcp.appengine.ApplicationUrlDispatchRulesArgs;
import com.pulumi.gcp.appengine.inputs.ApplicationUrlDispatchRulesDispatchRuleArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("appengine-test-bucket")
            .location("US")
            .build());

        var object = new BucketObject("object", BucketObjectArgs.builder()
            .name("hello-world.zip")
            .bucket(bucket.name())
            .source(new FileAsset("./test-fixtures/hello-world.zip"))
            .build());

        var adminV3 = new StandardAppVersion("adminV3", StandardAppVersionArgs.builder()
            .versionId("v3")
            .service("admin")
            .runtime("nodejs20")
            .entrypoint(StandardAppVersionEntrypointArgs.builder()
                .shell("node ./app.js")
                .build())
            .deployment(StandardAppVersionDeploymentArgs.builder()
                .zip(StandardAppVersionDeploymentZipArgs.builder()
                    .sourceUrl(Output.tuple(bucket.name(), object.name()).applyValue(values -> {
                        var bucketName = values.t1;
                        var objectName = values.t2;
                        return String.format("https://storage.googleapis.com/%s/%s", bucketName,objectName);
                    }))
                    .build())
                .build())
            .envVariables(Map.of("port", "8080"))
            .deleteServiceOnDestroy(true)
            .build());

        var webService = new ApplicationUrlDispatchRules("webService", ApplicationUrlDispatchRulesArgs.builder()
            .dispatchRules(            
                ApplicationUrlDispatchRulesDispatchRuleArgs.builder()
                    .domain("*")
                    .path("/*")
                    .service("default")
                    .build(),
                ApplicationUrlDispatchRulesDispatchRuleArgs.builder()
                    .domain("*")
                    .path("/admin/*")
                    .service(adminV3.service())
                    .build())
            .build());

    }
}
```
```yaml
resources:
  webService:
    type: gcp:appengine:ApplicationUrlDispatchRules
    name: web_service
    properties:
      dispatchRules:
        - domain: '*'
          path: /*
          service: default
        - domain: '*'
          path: /admin/*
          service: ${adminV3.service}
  adminV3:
    type: gcp:appengine:StandardAppVersion
    name: admin_v3
    properties:
      versionId: v3
      service: admin
      runtime: nodejs20
      entrypoint:
        shell: node ./app.js
      deployment:
        zip:
          sourceUrl: https://storage.googleapis.com/${bucket.name}/${object.name}
      envVariables:
        port: '8080'
      deleteServiceOnDestroy: true
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: appengine-test-bucket
      location: US
  object:
    type: gcp:storage:BucketObject
    properties:
      name: hello-world.zip
      bucket: ${bucket.name}
      source:
        fn::FileAsset: ./test-fixtures/hello-world.zip
```
<!--End PulumiCodeChooser -->

## Import

ApplicationUrlDispatchRules can be imported using any of these accepted formats:

* `{{project}}`

When using the `pulumi import` command, ApplicationUrlDispatchRules can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:appengine/applicationUrlDispatchRules:ApplicationUrlDispatchRules default {{project}}
```


dispatchRules*:

	appengine'ApplicationUrlDispatchRulesDispatchRule]gcp:appengine/ApplicationUrlDispatchRulesDispatchRule:ApplicationUrlDispatchRulesDispatchRulefRules to match an HTTP request and dispatch that request to a service.
Structure is documented below.

projectB" "
dispatchRules*:

	appengine'ApplicationUrlDispatchRulesDispatchRule]gcp:appengine/ApplicationUrlDispatchRulesDispatchRule:ApplicationUrlDispatchRulesDispatchRulefRules to match an HTTP request and dispatch that request to a service.
Structure is documented below.
"
project" *Í+
E
	appengineDomainMapping)gcp:appengine/domainMapping:DomainMapping½A domain serving an App Engine application.


To get more information about DomainMapping, see:

* [API documentation](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.domainMappings)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/appengine/docs/standard/python/mapping-custom-domains)

## Example Usage

### App Engine Domain Mapping Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const domainMapping = new gcp.appengine.DomainMapping("domain_mapping", {
    domainName: "verified-domain.com",
    sslSettings: {
        sslManagementType: "AUTOMATIC",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

domain_mapping = gcp.appengine.DomainMapping("domain_mapping",
    domain_name="verified-domain.com",
    ssl_settings={
        "ssl_management_type": "AUTOMATIC",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var domainMapping = new Gcp.AppEngine.DomainMapping("domain_mapping", new()
    {
        DomainName = "verified-domain.com",
        SslSettings = new Gcp.AppEngine.Inputs.DomainMappingSslSettingsArgs
        {
            SslManagementType = "AUTOMATIC",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/appengine"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := appengine.NewDomainMapping(ctx, "domain_mapping", &appengine.DomainMappingArgs{
			DomainName: pulumi.String("verified-domain.com"),
			SslSettings: &appengine.DomainMappingSslSettingsArgs{
				SslManagementType: pulumi.String("AUTOMATIC"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.appengine.DomainMapping;
import com.pulumi.gcp.appengine.DomainMappingArgs;
import com.pulumi.gcp.appengine.inputs.DomainMappingSslSettingsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var domainMapping = new DomainMapping("domainMapping", DomainMappingArgs.builder()
            .domainName("verified-domain.com")
            .sslSettings(DomainMappingSslSettingsArgs.builder()
                .sslManagementType("AUTOMATIC")
                .build())
            .build());

    }
}
```
```yaml
resources:
  domainMapping:
    type: gcp:appengine:DomainMapping
    name: domain_mapping
    properties:
      domainName: verified-domain.com
      sslSettings:
        sslManagementType: AUTOMATIC
```
<!--End PulumiCodeChooser -->

## Import

DomainMapping can be imported using any of these accepted formats:

* `apps/{{project}}/domainMappings/{{domain_name}}`

* `{{project}}/{{domain_name}}`

* `{{domain_name}}`

When using the `pulumi import` command, DomainMapping can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:appengine/domainMapping:DomainMapping default apps/{{project}}/domainMappings/{{domain_name}}
```

```sh
$ pulumi import gcp:appengine/domainMapping:DomainMapping default {{project}}/{{domain_name}}
```

```sh
$ pulumi import gcp:appengine/domainMapping:DomainMapping default {{domain_name}}
```

e

domainName" SRelative name of the domain serving the application. Example: example.com.


- - -
Ø
overrideStrategyB" ½Whether the domain creation should override any existing mappings for this domain.
By default, overrides are rejected.
Default value is `STRICT`.
Possible values are: `STRICT`, `OVERRIDE`.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
õ
sslSettingslBj:h
f
	appengineDomainMappingSslSettings?gcp:appengine/DomainMappingSslSettings:DomainMappingSslSettingsxSSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
Structure is documented below.
"e

domainName" SRelative name of the domain serving the application. Example: example.com.


- - -
"t
name" hRelative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
"Ø
overrideStrategyB" ½Whether the domain creation should override any existing mappings for this domain.
By default, overrides are rejected.
Default value is `STRICT`.
Possible values are: `STRICT`, `OVERRIDE`.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"ã
resourceRecordsu*s:q
o
	appengineDomainMappingResourceRecordEgcp:appengine/DomainMappingResourceRecord:DomainMappingResourceRecordØThe resource records required to configure this domain mapping. These records must be added to the domain's DNS
configuration in order to serve the application via this domain mapping.
Structure is documented below.
"ó
sslSettingsj:h
f
	appengineDomainMappingSslSettings?gcp:appengine/DomainMappingSslSettings:DomainMappingSslSettingsxSSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
Structure is documented below.
*£N
T
	appengineEngineSplitTraffic3gcp:appengine/engineSplitTraffic:EngineSplitTrafficGTraffic routing configuration for versions within a single service. Traffic splits define how traffic directed to the service is assigned to versions.


To get more information about ServiceSplitTraffic, see:

* [API documentation](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services)

## Example Usage

### App Engine Service Split Traffic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const bucket = new gcp.storage.Bucket("bucket", {
    name: "appengine-static-content",
    location: "US",
});
const object = new gcp.storage.BucketObject("object", {
    name: "hello-world.zip",
    bucket: bucket.name,
    source: new pulumi.asset.FileAsset("./test-fixtures/hello-world.zip"),
});
const liveappV1 = new gcp.appengine.StandardAppVersion("liveapp_v1", {
    versionId: "v1",
    service: "liveapp",
    deleteServiceOnDestroy: true,
    runtime: "nodejs20",
    entrypoint: {
        shell: "node ./app.js",
    },
    deployment: {
        zip: {
            sourceUrl: pulumi.interpolate`https://storage.googleapis.com/${bucket.name}/${object.name}`,
        },
    },
    envVariables: {
        port: "8080",
    },
});
const liveappV2 = new gcp.appengine.StandardAppVersion("liveapp_v2", {
    versionId: "v2",
    service: "liveapp",
    noopOnDestroy: true,
    runtime: "nodejs20",
    entrypoint: {
        shell: "node ./app.js",
    },
    deployment: {
        zip: {
            sourceUrl: pulumi.interpolate`https://storage.googleapis.com/${bucket.name}/${object.name}`,
        },
    },
    envVariables: {
        port: "8080",
    },
});
const liveapp = new gcp.appengine.EngineSplitTraffic("liveapp", {
    service: liveappV2.service,
    migrateTraffic: false,
    split: {
        shardBy: "IP",
        allocations: pulumi.all([liveappV1.versionId, liveappV2.versionId]).apply(([liveappV1VersionId, liveappV2VersionId]) => {
            [liveappV1VersionId]: 0.75,
            [liveappV2VersionId]: 0.25,
        }),
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

bucket = gcp.storage.Bucket("bucket",
    name="appengine-static-content",
    location="US")
object = gcp.storage.BucketObject("object",
    name="hello-world.zip",
    bucket=bucket.name,
    source=pulumi.FileAsset("./test-fixtures/hello-world.zip"))
liveapp_v1 = gcp.appengine.StandardAppVersion("liveapp_v1",
    version_id="v1",
    service="liveapp",
    delete_service_on_destroy=True,
    runtime="nodejs20",
    entrypoint={
        "shell": "node ./app.js",
    },
    deployment={
        "zip": {
            "source_url": pulumi.Output.all(
                bucketName=bucket.name,
                objectName=object.name
).apply(lambda resolved_outputs: f"https://storage.googleapis.com/{resolved_outputs['bucketName']}/{resolved_outputs['objectName']}")
,
        },
    },
    env_variables={
        "port": "8080",
    })
liveapp_v2 = gcp.appengine.StandardAppVersion("liveapp_v2",
    version_id="v2",
    service="liveapp",
    noop_on_destroy=True,
    runtime="nodejs20",
    entrypoint={
        "shell": "node ./app.js",
    },
    deployment={
        "zip": {
            "source_url": pulumi.Output.all(
                bucketName=bucket.name,
                objectName=object.name
).apply(lambda resolved_outputs: f"https://storage.googleapis.com/{resolved_outputs['bucketName']}/{resolved_outputs['objectName']}")
,
        },
    },
    env_variables={
        "port": "8080",
    })
liveapp = gcp.appengine.EngineSplitTraffic("liveapp",
    service=liveapp_v2.service,
    migrate_traffic=False,
    split={
        "shard_by": "IP",
        "allocations": pulumi.Output.all(
            liveappV1Version_id=liveapp_v1.version_id,
            liveappV2Version_id=liveapp_v2.version_id
).apply(lambda resolved_outputs: {
            resolved_outputs['liveappV1Version_id']: 0.75,
            resolved_outputs['liveappV2Version_id']: 0.25,
        })
,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "appengine-static-content",
        Location = "US",
    });

    var @object = new Gcp.Storage.BucketObject("object", new()
    {
        Name = "hello-world.zip",
        Bucket = bucket.Name,
        Source = new FileAsset("./test-fixtures/hello-world.zip"),
    });

    var liveappV1 = new Gcp.AppEngine.StandardAppVersion("liveapp_v1", new()
    {
        VersionId = "v1",
        Service = "liveapp",
        DeleteServiceOnDestroy = true,
        Runtime = "nodejs20",
        Entrypoint = new Gcp.AppEngine.Inputs.StandardAppVersionEntrypointArgs
        {
            Shell = "node ./app.js",
        },
        Deployment = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentArgs
        {
            Zip = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentZipArgs
            {
                SourceUrl = Output.Tuple(bucket.Name, @object.Name).Apply(values =>
                {
                    var bucketName = values.Item1;
                    var objectName = values.Item2;
                    return $"https://storage.googleapis.com/{bucketName}/{objectName}";
                }),
            },
        },
        EnvVariables = 
        {
            { "port", "8080" },
        },
    });

    var liveappV2 = new Gcp.AppEngine.StandardAppVersion("liveapp_v2", new()
    {
        VersionId = "v2",
        Service = "liveapp",
        NoopOnDestroy = true,
        Runtime = "nodejs20",
        Entrypoint = new Gcp.AppEngine.Inputs.StandardAppVersionEntrypointArgs
        {
            Shell = "node ./app.js",
        },
        Deployment = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentArgs
        {
            Zip = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentZipArgs
            {
                SourceUrl = Output.Tuple(bucket.Name, @object.Name).Apply(values =>
                {
                    var bucketName = values.Item1;
                    var objectName = values.Item2;
                    return $"https://storage.googleapis.com/{bucketName}/{objectName}";
                }),
            },
        },
        EnvVariables = 
        {
            { "port", "8080" },
        },
    });

    var liveapp = new Gcp.AppEngine.EngineSplitTraffic("liveapp", new()
    {
        Service = liveappV2.Service,
        MigrateTraffic = false,
        Split = new Gcp.AppEngine.Inputs.EngineSplitTrafficSplitArgs
        {
            ShardBy = "IP",
            Allocations = Output.Tuple(liveappV1.VersionId, liveappV2.VersionId).Apply(values =>
            {
                var liveappV1VersionId = values.Item1;
                var liveappV2VersionId = values.Item2;
                return 
                {
                    { liveappV1VersionId, 0.75 },
                    { liveappV2VersionId, 0.25 },
                };
            }),
        },
    });

});
```
```yaml
resources:
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: appengine-static-content
      location: US
  object:
    type: gcp:storage:BucketObject
    properties:
      name: hello-world.zip
      bucket: ${bucket.name}
      source:
        fn::FileAsset: ./test-fixtures/hello-world.zip
  liveappV1:
    type: gcp:appengine:StandardAppVersion
    name: liveapp_v1
    properties:
      versionId: v1
      service: liveapp
      deleteServiceOnDestroy: true
      runtime: nodejs20
      entrypoint:
        shell: node ./app.js
      deployment:
        zip:
          sourceUrl: https://storage.googleapis.com/${bucket.name}/${object.name}
      envVariables:
        port: '8080'
  liveappV2:
    type: gcp:appengine:StandardAppVersion
    name: liveapp_v2
    properties:
      versionId: v2
      service: liveapp
      noopOnDestroy: true
      runtime: nodejs20
      entrypoint:
        shell: node ./app.js
      deployment:
        zip:
          sourceUrl: https://storage.googleapis.com/${bucket.name}/${object.name}
      envVariables:
        port: '8080'
  liveapp:
    type: gcp:appengine:EngineSplitTraffic
    properties:
      service: ${liveappV2.service}
      migrateTraffic: false
      split:
        shardBy: IP
        allocations:
          ${liveappV1.versionId}: 0.75
          ${liveappV2.versionId}: 0.25
```
<!--End PulumiCodeChooser -->

## Import

ServiceSplitTraffic can be imported using any of these accepted formats:

* `apps/{{project}}/services/{{service}}`

* `{{project}}/{{service}}`

* `{{service}}`

When using the `pulumi import` command, ServiceSplitTraffic can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:appengine/engineSplitTraffic:EngineSplitTraffic default apps/{{project}}/services/{{service}}
```

```sh
$ pulumi import gcp:appengine/engineSplitTraffic:EngineSplitTraffic default {{project}}/{{service}}
```

```sh
$ pulumi import gcp:appengine/engineSplitTraffic:EngineSplitTraffic default {{service}}
```

Q
migrateTrafficB
 9If set to true traffic will be migrated to this version.

projectB" @
service" 1The name of the service these settings apply to.
ó
splitg:e
c
	appengineEngineSplitTrafficSplit=gcp:appengine/EngineSplitTrafficSplit:EngineSplitTrafficSplitMapping that defines fractional HTTP traffic diversion to different versions within the service.
Structure is documented below.
"Q
migrateTrafficB
 9If set to true traffic will be migrated to this version.
"
project" "@
service" 1The name of the service these settings apply to.
"ó
splitg:e
c
	appengineEngineSplitTrafficSplit=gcp:appengine/EngineSplitTrafficSplit:EngineSplitTrafficSplitMapping that defines fractional HTTP traffic diversion to different versions within the service.
Structure is documented below.
*Ò;
B
	appengineFirewallRule'gcp:appengine/firewallRule:FirewallRuleÛ/A single firewall rule that is evaluated against incoming traffic
and provides an action to take on matched requests.


To get more information about FirewallRule, see:

* [API documentation](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.firewall.ingressRules)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/appengine/docs/standard/python/creating-firewalls#creating_firewall_rules)

## Example Usage

### App Engine Firewall Rule Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const myProject = new gcp.organizations.Project("my_project", {
    name: "tf-test-project",
    projectId: "ae-project",
    orgId: "123456789",
    billingAccount: "000000-0000000-0000000-000000",
    deletionPolicy: "DELETE",
});
const app = new gcp.appengine.Application("app", {
    project: myProject.projectId,
    locationId: "us-central",
});
const rule = new gcp.appengine.FirewallRule("rule", {
    project: app.project,
    priority: 1000,
    action: "ALLOW",
    sourceRange: "*",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_project = gcp.organizations.Project("my_project",
    name="tf-test-project",
    project_id="ae-project",
    org_id="123456789",
    billing_account="000000-0000000-0000000-000000",
    deletion_policy="DELETE")
app = gcp.appengine.Application("app",
    project=my_project.project_id,
    location_id="us-central")
rule = gcp.appengine.FirewallRule("rule",
    project=app.project,
    priority=1000,
    action="ALLOW",
    source_range="*")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var myProject = new Gcp.Organizations.Project("my_project", new()
    {
        Name = "tf-test-project",
        ProjectId = "ae-project",
        OrgId = "123456789",
        BillingAccount = "000000-0000000-0000000-000000",
        DeletionPolicy = "DELETE",
    });

    var app = new Gcp.AppEngine.Application("app", new()
    {
        Project = myProject.ProjectId,
        LocationId = "us-central",
    });

    var rule = new Gcp.AppEngine.FirewallRule("rule", new()
    {
        Project = app.Project,
        Priority = 1000,
        Action = "ALLOW",
        SourceRange = "*",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/appengine"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myProject, err := organizations.NewProject(ctx, "my_project", &organizations.ProjectArgs{
			Name:           pulumi.String("tf-test-project"),
			ProjectId:      pulumi.String("ae-project"),
			OrgId:          pulumi.String("123456789"),
			BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		app, err := appengine.NewApplication(ctx, "app", &appengine.ApplicationArgs{
			Project:    myProject.ProjectId,
			LocationId: pulumi.String("us-central"),
		})
		if err != nil {
			return err
		}
		_, err = appengine.NewFirewallRule(ctx, "rule", &appengine.FirewallRuleArgs{
			Project:     app.Project,
			Priority:    pulumi.Int(1000),
			Action:      pulumi.String("ALLOW"),
			SourceRange: pulumi.String("*"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.appengine.Application;
import com.pulumi.gcp.appengine.ApplicationArgs;
import com.pulumi.gcp.appengine.FirewallRule;
import com.pulumi.gcp.appengine.FirewallRuleArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var myProject = new Project("myProject", ProjectArgs.builder()
            .name("tf-test-project")
            .projectId("ae-project")
            .orgId("123456789")
            .billingAccount("000000-0000000-0000000-000000")
            .deletionPolicy("DELETE")
            .build());

        var app = new Application("app", ApplicationArgs.builder()
            .project(myProject.projectId())
            .locationId("us-central")
            .build());

        var rule = new FirewallRule("rule", FirewallRuleArgs.builder()
            .project(app.project())
            .priority(1000)
            .action("ALLOW")
            .sourceRange("*")
            .build());

    }
}
```
```yaml
resources:
  myProject:
    type: gcp:organizations:Project
    name: my_project
    properties:
      name: tf-test-project
      projectId: ae-project
      orgId: '123456789'
      billingAccount: 000000-0000000-0000000-000000
      deletionPolicy: DELETE
  app:
    type: gcp:appengine:Application
    properties:
      project: ${myProject.projectId}
      locationId: us-central
  rule:
    type: gcp:appengine:FirewallRule
    properties:
      project: ${app.project}
      priority: 1000
      action: ALLOW
      sourceRange: '*'
```
<!--End PulumiCodeChooser -->

## Import

FirewallRule can be imported using any of these accepted formats:

* `apps/{{project}}/firewall/ingressRules/{{priority}}`

* `{{project}}/{{priority}}`

* `{{priority}}`

When using the `pulumi import` command, FirewallRule can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:appengine/firewallRule:FirewallRule default apps/{{project}}/firewall/ingressRules/{{priority}}
```

```sh
$ pulumi import gcp:appengine/firewallRule:FirewallRule default {{project}}/{{priority}}
```

```sh
$ pulumi import gcp:appengine/firewallRule:FirewallRule default {{priority}}
```

{
action" mThe action to take if this rule matches.
Possible values are: `UNSPECIFIED_ACTION`, `ALLOW`, `DENY`.


- - -
B
descriptionB" -An optional string description of this rule.
ª
priorityB A positive integer that defines the order of rule evaluation.
Rules with the lowest priority are evaluated first.
A default rule at priority Int32.MaxValue matches all IPv4 and
IPv6 traffic when no previous rule matches. Only the action of
this rule can be modified by the user.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
l
sourceRange" YIP address or range, defined using CIDR notation, of requests that this rule applies to.
"{
action" mThe action to take if this rule matches.
Possible values are: `UNSPECIFIED_ACTION`, `ALLOW`, `DENY`.


- - -
"B
descriptionB" -An optional string description of this rule.
"ª
priorityB A positive integer that defines the order of rule evaluation.
Rules with the lowest priority are evaluated first.
A default rule at priority Int32.MaxValue matches all IPv4 and
IPv6 traffic when no previous rule matches. Only the action of
this rule can be modified by the user.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"l
sourceRange" YIP address or range, defined using CIDR notation, of requests that this rule applies to.
*ä«
T
	appengineFlexibleAppVersion3gcp:appengine/flexibleAppVersion:FlexibleAppVersionÓFlexible App Version resource to create a new version of flexible GAE Application. Based on Google Compute Engine,
the App Engine flexible environment automatically scales your app up and down while also balancing the load.
Learn about the differences between the standard environment and the flexible environment
at https://cloud.google.com/appengine/docs/the-appengine-environments.

> **Note:** The App Engine flexible environment service account uses the member ID `service-[YOUR_PROJECT_NUMBER]@gae-api-prod.google.com.iam.gserviceaccount.com`
It should have the App Engine Flexible Environment Service Agent role, which will be applied when the `appengineflex.googleapis.com` service is enabled.


To get more information about FlexibleAppVersion, see:

* [API documentation](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/appengine/docs/flexible)

## Example Usage

### App Engine Flexible App Version


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const myProject = new gcp.organizations.Project("my_project", {
    name: "appeng-flex",
    projectId: "appeng-flex",
    orgId: "123456789",
    billingAccount: "000000-0000000-0000000-000000",
    deletionPolicy: "DELETE",
});
const app = new gcp.appengine.Application("app", {
    project: myProject.projectId,
    locationId: "us-central",
});
const service = new gcp.projects.Service("service", {
    project: myProject.projectId,
    service: "appengineflex.googleapis.com",
    disableDependentServices: false,
});
const customServiceAccount = new gcp.serviceaccount.Account("custom_service_account", {
    project: service.project,
    accountId: "my-account",
    displayName: "Custom Service Account",
});
const gaeApi = new gcp.projects.IAMMember("gae_api", {
    project: service.project,
    role: "roles/compute.networkUser",
    member: pulumi.interpolate`serviceAccount:${customServiceAccount.email}`,
});
const logsWriter = new gcp.projects.IAMMember("logs_writer", {
    project: service.project,
    role: "roles/logging.logWriter",
    member: pulumi.interpolate`serviceAccount:${customServiceAccount.email}`,
});
const storageViewer = new gcp.projects.IAMMember("storage_viewer", {
    project: service.project,
    role: "roles/storage.objectViewer",
    member: pulumi.interpolate`serviceAccount:${customServiceAccount.email}`,
});
const bucket = new gcp.storage.Bucket("bucket", {
    project: myProject.projectId,
    name: "appengine-static-content",
    location: "US",
});
const object = new gcp.storage.BucketObject("object", {
    name: "hello-world.zip",
    bucket: bucket.name,
    source: new pulumi.asset.FileAsset("./test-fixtures/hello-world.zip"),
});
const myappV1 = new gcp.appengine.FlexibleAppVersion("myapp_v1", {
    versionId: "v1",
    project: gaeApi.project,
    service: "default",
    runtime: "nodejs",
    flexibleRuntimeSettings: {
        operatingSystem: "ubuntu22",
        runtimeVersion: "20",
    },
    entrypoint: {
        shell: "node ./app.js",
    },
    deployment: {
        zip: {
            sourceUrl: pulumi.interpolate`https://storage.googleapis.com/${bucket.name}/${object.name}`,
        },
    },
    livenessCheck: {
        path: "/",
    },
    readinessCheck: {
        path: "/",
    },
    envVariables: {
        port: "8080",
    },
    handlers: [{
        urlRegex: ".*\\/my-path\\/*",
        securityLevel: "SECURE_ALWAYS",
        login: "LOGIN_REQUIRED",
        authFailAction: "AUTH_FAIL_ACTION_REDIRECT",
        staticFiles: {
            path: "my-other-path",
            uploadPathRegex: ".*\\/my-path\\/*",
        },
    }],
    automaticScaling: {
        coolDownPeriod: "120s",
        cpuUtilization: {
            targetUtilization: 0.5,
        },
    },
    noopOnDestroy: true,
    serviceAccount: customServiceAccount.email,
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_project = gcp.organizations.Project("my_project",
    name="appeng-flex",
    project_id="appeng-flex",
    org_id="123456789",
    billing_account="000000-0000000-0000000-000000",
    deletion_policy="DELETE")
app = gcp.appengine.Application("app",
    project=my_project.project_id,
    location_id="us-central")
service = gcp.projects.Service("service",
    project=my_project.project_id,
    service="appengineflex.googleapis.com",
    disable_dependent_services=False)
custom_service_account = gcp.serviceaccount.Account("custom_service_account",
    project=service.project,
    account_id="my-account",
    display_name="Custom Service Account")
gae_api = gcp.projects.IAMMember("gae_api",
    project=service.project,
    role="roles/compute.networkUser",
    member=custom_service_account.email.apply(lambda email: f"serviceAccount:{email}"))
logs_writer = gcp.projects.IAMMember("logs_writer",
    project=service.project,
    role="roles/logging.logWriter",
    member=custom_service_account.email.apply(lambda email: f"serviceAccount:{email}"))
storage_viewer = gcp.projects.IAMMember("storage_viewer",
    project=service.project,
    role="roles/storage.objectViewer",
    member=custom_service_account.email.apply(lambda email: f"serviceAccount:{email}"))
bucket = gcp.storage.Bucket("bucket",
    project=my_project.project_id,
    name="appengine-static-content",
    location="US")
object = gcp.storage.BucketObject("object",
    name="hello-world.zip",
    bucket=bucket.name,
    source=pulumi.FileAsset("./test-fixtures/hello-world.zip"))
myapp_v1 = gcp.appengine.FlexibleAppVersion("myapp_v1",
    version_id="v1",
    project=gae_api.project,
    service="default",
    runtime="nodejs",
    flexible_runtime_settings={
        "operating_system": "ubuntu22",
        "runtime_version": "20",
    },
    entrypoint={
        "shell": "node ./app.js",
    },
    deployment={
        "zip": {
            "source_url": pulumi.Output.all(
                bucketName=bucket.name,
                objectName=object.name
).apply(lambda resolved_outputs: f"https://storage.googleapis.com/{resolved_outputs['bucketName']}/{resolved_outputs['objectName']}")
,
        },
    },
    liveness_check={
        "path": "/",
    },
    readiness_check={
        "path": "/",
    },
    env_variables={
        "port": "8080",
    },
    handlers=[{
        "url_regex": ".*\\/my-path\\/*",
        "security_level": "SECURE_ALWAYS",
        "login": "LOGIN_REQUIRED",
        "auth_fail_action": "AUTH_FAIL_ACTION_REDIRECT",
        "static_files": {
            "path": "my-other-path",
            "upload_path_regex": ".*\\/my-path\\/*",
        },
    }],
    automatic_scaling={
        "cool_down_period": "120s",
        "cpu_utilization": {
            "target_utilization": 0.5,
        },
    },
    noop_on_destroy=True,
    service_account=custom_service_account.email)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var myProject = new Gcp.Organizations.Project("my_project", new()
    {
        Name = "appeng-flex",
        ProjectId = "appeng-flex",
        OrgId = "123456789",
        BillingAccount = "000000-0000000-0000000-000000",
        DeletionPolicy = "DELETE",
    });

    var app = new Gcp.AppEngine.Application("app", new()
    {
        Project = myProject.ProjectId,
        LocationId = "us-central",
    });

    var service = new Gcp.Projects.Service("service", new()
    {
        Project = myProject.ProjectId,
        ServiceName = "appengineflex.googleapis.com",
        DisableDependentServices = false,
    });

    var customServiceAccount = new Gcp.ServiceAccount.Account("custom_service_account", new()
    {
        Project = service.Project,
        AccountId = "my-account",
        DisplayName = "Custom Service Account",
    });

    var gaeApi = new Gcp.Projects.IAMMember("gae_api", new()
    {
        Project = service.Project,
        Role = "roles/compute.networkUser",
        Member = customServiceAccount.Email.Apply(email => $"serviceAccount:{email}"),
    });

    var logsWriter = new Gcp.Projects.IAMMember("logs_writer", new()
    {
        Project = service.Project,
        Role = "roles/logging.logWriter",
        Member = customServiceAccount.Email.Apply(email => $"serviceAccount:{email}"),
    });

    var storageViewer = new Gcp.Projects.IAMMember("storage_viewer", new()
    {
        Project = service.Project,
        Role = "roles/storage.objectViewer",
        Member = customServiceAccount.Email.Apply(email => $"serviceAccount:{email}"),
    });

    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Project = myProject.ProjectId,
        Name = "appengine-static-content",
        Location = "US",
    });

    var @object = new Gcp.Storage.BucketObject("object", new()
    {
        Name = "hello-world.zip",
        Bucket = bucket.Name,
        Source = new FileAsset("./test-fixtures/hello-world.zip"),
    });

    var myappV1 = new Gcp.AppEngine.FlexibleAppVersion("myapp_v1", new()
    {
        VersionId = "v1",
        Project = gaeApi.Project,
        Service = "default",
        Runtime = "nodejs",
        FlexibleRuntimeSettings = new Gcp.AppEngine.Inputs.FlexibleAppVersionFlexibleRuntimeSettingsArgs
        {
            OperatingSystem = "ubuntu22",
            RuntimeVersion = "20",
        },
        Entrypoint = new Gcp.AppEngine.Inputs.FlexibleAppVersionEntrypointArgs
        {
            Shell = "node ./app.js",
        },
        Deployment = new Gcp.AppEngine.Inputs.FlexibleAppVersionDeploymentArgs
        {
            Zip = new Gcp.AppEngine.Inputs.FlexibleAppVersionDeploymentZipArgs
            {
                SourceUrl = Output.Tuple(bucket.Name, @object.Name).Apply(values =>
                {
                    var bucketName = values.Item1;
                    var objectName = values.Item2;
                    return $"https://storage.googleapis.com/{bucketName}/{objectName}";
                }),
            },
        },
        LivenessCheck = new Gcp.AppEngine.Inputs.FlexibleAppVersionLivenessCheckArgs
        {
            Path = "/",
        },
        ReadinessCheck = new Gcp.AppEngine.Inputs.FlexibleAppVersionReadinessCheckArgs
        {
            Path = "/",
        },
        EnvVariables = 
        {
            { "port", "8080" },
        },
        Handlers = new[]
        {
            new Gcp.AppEngine.Inputs.FlexibleAppVersionHandlerArgs
            {
                UrlRegex = ".*\\/my-path\\/*",
                SecurityLevel = "SECURE_ALWAYS",
                Login = "LOGIN_REQUIRED",
                AuthFailAction = "AUTH_FAIL_ACTION_REDIRECT",
                StaticFiles = new Gcp.AppEngine.Inputs.FlexibleAppVersionHandlerStaticFilesArgs
                {
                    Path = "my-other-path",
                    UploadPathRegex = ".*\\/my-path\\/*",
                },
            },
        },
        AutomaticScaling = new Gcp.AppEngine.Inputs.FlexibleAppVersionAutomaticScalingArgs
        {
            CoolDownPeriod = "120s",
            CpuUtilization = new Gcp.AppEngine.Inputs.FlexibleAppVersionAutomaticScalingCpuUtilizationArgs
            {
                TargetUtilization = 0.5,
            },
        },
        NoopOnDestroy = true,
        ServiceAccount = customServiceAccount.Email,
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/appengine"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myProject, err := organizations.NewProject(ctx, "my_project", &organizations.ProjectArgs{
			Name:           pulumi.String("appeng-flex"),
			ProjectId:      pulumi.String("appeng-flex"),
			OrgId:          pulumi.String("123456789"),
			BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		_, err = appengine.NewApplication(ctx, "app", &appengine.ApplicationArgs{
			Project:    myProject.ProjectId,
			LocationId: pulumi.String("us-central"),
		})
		if err != nil {
			return err
		}
		service, err := projects.NewService(ctx, "service", &projects.ServiceArgs{
			Project:                  myProject.ProjectId,
			Service:                  pulumi.String("appengineflex.googleapis.com"),
			DisableDependentServices: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		customServiceAccount, err := serviceaccount.NewAccount(ctx, "custom_service_account", &serviceaccount.AccountArgs{
			Project:     service.Project,
			AccountId:   pulumi.String("my-account"),
			DisplayName: pulumi.String("Custom Service Account"),
		})
		if err != nil {
			return err
		}
		gaeApi, err := projects.NewIAMMember(ctx, "gae_api", &projects.IAMMemberArgs{
			Project: service.Project,
			Role:    pulumi.String("roles/compute.networkUser"),
			Member: customServiceAccount.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		_, err = projects.NewIAMMember(ctx, "logs_writer", &projects.IAMMemberArgs{
			Project: service.Project,
			Role:    pulumi.String("roles/logging.logWriter"),
			Member: customServiceAccount.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		_, err = projects.NewIAMMember(ctx, "storage_viewer", &projects.IAMMemberArgs{
			Project: service.Project,
			Role:    pulumi.String("roles/storage.objectViewer"),
			Member: customServiceAccount.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Project:  myProject.ProjectId,
			Name:     pulumi.String("appengine-static-content"),
			Location: pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		object, err := storage.NewBucketObject(ctx, "object", &storage.BucketObjectArgs{
			Name:   pulumi.String("hello-world.zip"),
			Bucket: bucket.Name,
			Source: pulumi.NewFileAsset("./test-fixtures/hello-world.zip"),
		})
		if err != nil {
			return err
		}
		_, err = appengine.NewFlexibleAppVersion(ctx, "myapp_v1", &appengine.FlexibleAppVersionArgs{
			VersionId: pulumi.String("v1"),
			Project:   gaeApi.Project,
			Service:   pulumi.String("default"),
			Runtime:   pulumi.String("nodejs"),
			FlexibleRuntimeSettings: &appengine.FlexibleAppVersionFlexibleRuntimeSettingsArgs{
				OperatingSystem: pulumi.String("ubuntu22"),
				RuntimeVersion:  pulumi.String("20"),
			},
			Entrypoint: &appengine.FlexibleAppVersionEntrypointArgs{
				Shell: pulumi.String("node ./app.js"),
			},
			Deployment: &appengine.FlexibleAppVersionDeploymentArgs{
				Zip: &appengine.FlexibleAppVersionDeploymentZipArgs{
					SourceUrl: pulumi.All(bucket.Name, object.Name).ApplyT(func(_args []interface{}) (string, error) {
						bucketName := _args[0].(string)
						objectName := _args[1].(string)
						return fmt.Sprintf("https://storage.googleapis.com/%v/%v", bucketName, objectName), nil
					}).(pulumi.StringOutput),
				},
			},
			LivenessCheck: &appengine.FlexibleAppVersionLivenessCheckArgs{
				Path: pulumi.String("/"),
			},
			ReadinessCheck: &appengine.FlexibleAppVersionReadinessCheckArgs{
				Path: pulumi.String("/"),
			},
			EnvVariables: pulumi.StringMap{
				"port": pulumi.String("8080"),
			},
			Handlers: appengine.FlexibleAppVersionHandlerArray{
				&appengine.FlexibleAppVersionHandlerArgs{
					UrlRegex:       pulumi.String(".*\\/my-path\\/*"),
					SecurityLevel:  pulumi.String("SECURE_ALWAYS"),
					Login:          pulumi.String("LOGIN_REQUIRED"),
					AuthFailAction: pulumi.String("AUTH_FAIL_ACTION_REDIRECT"),
					StaticFiles: &appengine.FlexibleAppVersionHandlerStaticFilesArgs{
						Path:            pulumi.String("my-other-path"),
						UploadPathRegex: pulumi.String(".*\\/my-path\\/*"),
					},
				},
			},
			AutomaticScaling: &appengine.FlexibleAppVersionAutomaticScalingArgs{
				CoolDownPeriod: pulumi.String("120s"),
				CpuUtilization: &appengine.FlexibleAppVersionAutomaticScalingCpuUtilizationArgs{
					TargetUtilization: pulumi.Float64(0.5),
				},
			},
			NoopOnDestroy:  pulumi.Bool(true),
			ServiceAccount: customServiceAccount.Email,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.appengine.Application;
import com.pulumi.gcp.appengine.ApplicationArgs;
import com.pulumi.gcp.projects.Service;
import com.pulumi.gcp.projects.ServiceArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.projects.IAMMember;
import com.pulumi.gcp.projects.IAMMemberArgs;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.appengine.FlexibleAppVersion;
import com.pulumi.gcp.appengine.FlexibleAppVersionArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionFlexibleRuntimeSettingsArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionEntrypointArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionDeploymentArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionDeploymentZipArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionLivenessCheckArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionReadinessCheckArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionHandlerArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionHandlerStaticFilesArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionAutomaticScalingArgs;
import com.pulumi.gcp.appengine.inputs.FlexibleAppVersionAutomaticScalingCpuUtilizationArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var myProject = new Project("myProject", ProjectArgs.builder()
            .name("appeng-flex")
            .projectId("appeng-flex")
            .orgId("123456789")
            .billingAccount("000000-0000000-0000000-000000")
            .deletionPolicy("DELETE")
            .build());

        var app = new Application("app", ApplicationArgs.builder()
            .project(myProject.projectId())
            .locationId("us-central")
            .build());

        var service = new Service("service", ServiceArgs.builder()
            .project(myProject.projectId())
            .service("appengineflex.googleapis.com")
            .disableDependentServices(false)
            .build());

        var customServiceAccount = new Account("customServiceAccount", AccountArgs.builder()
            .project(service.project())
            .accountId("my-account")
            .displayName("Custom Service Account")
            .build());

        var gaeApi = new IAMMember("gaeApi", IAMMemberArgs.builder()
            .project(service.project())
            .role("roles/compute.networkUser")
            .member(customServiceAccount.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

        var logsWriter = new IAMMember("logsWriter", IAMMemberArgs.builder()
            .project(service.project())
            .role("roles/logging.logWriter")
            .member(customServiceAccount.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

        var storageViewer = new IAMMember("storageViewer", IAMMemberArgs.builder()
            .project(service.project())
            .role("roles/storage.objectViewer")
            .member(customServiceAccount.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

        var bucket = new Bucket("bucket", BucketArgs.builder()
            .project(myProject.projectId())
            .name("appengine-static-content")
            .location("US")
            .build());

        var object = new BucketObject("object", BucketObjectArgs.builder()
            .name("hello-world.zip")
            .bucket(bucket.name())
            .source(new FileAsset("./test-fixtures/hello-world.zip"))
            .build());

        var myappV1 = new FlexibleAppVersion("myappV1", FlexibleAppVersionArgs.builder()
            .versionId("v1")
            .project(gaeApi.project())
            .service("default")
            .runtime("nodejs")
            .flexibleRuntimeSettings(FlexibleAppVersionFlexibleRuntimeSettingsArgs.builder()
                .operatingSystem("ubuntu22")
                .runtimeVersion("20")
                .build())
            .entrypoint(FlexibleAppVersionEntrypointArgs.builder()
                .shell("node ./app.js")
                .build())
            .deployment(FlexibleAppVersionDeploymentArgs.builder()
                .zip(FlexibleAppVersionDeploymentZipArgs.builder()
                    .sourceUrl(Output.tuple(bucket.name(), object.name()).applyValue(values -> {
                        var bucketName = values.t1;
                        var objectName = values.t2;
                        return String.format("https://storage.googleapis.com/%s/%s", bucketName,objectName);
                    }))
                    .build())
                .build())
            .livenessCheck(FlexibleAppVersionLivenessCheckArgs.builder()
                .path("/")
                .build())
            .readinessCheck(FlexibleAppVersionReadinessCheckArgs.builder()
                .path("/")
                .build())
            .envVariables(Map.of("port", "8080"))
            .handlers(FlexibleAppVersionHandlerArgs.builder()
                .urlRegex(".*\\/my-path\\/*")
                .securityLevel("SECURE_ALWAYS")
                .login("LOGIN_REQUIRED")
                .authFailAction("AUTH_FAIL_ACTION_REDIRECT")
                .staticFiles(FlexibleAppVersionHandlerStaticFilesArgs.builder()
                    .path("my-other-path")
                    .uploadPathRegex(".*\\/my-path\\/*")
                    .build())
                .build())
            .automaticScaling(FlexibleAppVersionAutomaticScalingArgs.builder()
                .coolDownPeriod("120s")
                .cpuUtilization(FlexibleAppVersionAutomaticScalingCpuUtilizationArgs.builder()
                    .targetUtilization(0.5)
                    .build())
                .build())
            .noopOnDestroy(true)
            .serviceAccount(customServiceAccount.email())
            .build());

    }
}
```
```yaml
resources:
  myProject:
    type: gcp:organizations:Project
    name: my_project
    properties:
      name: appeng-flex
      projectId: appeng-flex
      orgId: '123456789'
      billingAccount: 000000-0000000-0000000-000000
      deletionPolicy: DELETE
  app:
    type: gcp:appengine:Application
    properties:
      project: ${myProject.projectId}
      locationId: us-central
  service:
    type: gcp:projects:Service
    properties:
      project: ${myProject.projectId}
      service: appengineflex.googleapis.com
      disableDependentServices: false
  customServiceAccount:
    type: gcp:serviceaccount:Account
    name: custom_service_account
    properties:
      project: ${service.project}
      accountId: my-account
      displayName: Custom Service Account
  gaeApi:
    type: gcp:projects:IAMMember
    name: gae_api
    properties:
      project: ${service.project}
      role: roles/compute.networkUser
      member: serviceAccount:${customServiceAccount.email}
  logsWriter:
    type: gcp:projects:IAMMember
    name: logs_writer
    properties:
      project: ${service.project}
      role: roles/logging.logWriter
      member: serviceAccount:${customServiceAccount.email}
  storageViewer:
    type: gcp:projects:IAMMember
    name: storage_viewer
    properties:
      project: ${service.project}
      role: roles/storage.objectViewer
      member: serviceAccount:${customServiceAccount.email}
  myappV1:
    type: gcp:appengine:FlexibleAppVersion
    name: myapp_v1
    properties:
      versionId: v1
      project: ${gaeApi.project}
      service: default
      runtime: nodejs
      flexibleRuntimeSettings:
        operatingSystem: ubuntu22
        runtimeVersion: '20'
      entrypoint:
        shell: node ./app.js
      deployment:
        zip:
          sourceUrl: https://storage.googleapis.com/${bucket.name}/${object.name}
      livenessCheck:
        path: /
      readinessCheck:
        path: /
      envVariables:
        port: '8080'
      handlers:
        - urlRegex: .*\/my-path\/*
          securityLevel: SECURE_ALWAYS
          login: LOGIN_REQUIRED
          authFailAction: AUTH_FAIL_ACTION_REDIRECT
          staticFiles:
            path: my-other-path
            uploadPathRegex: .*\/my-path\/*
      automaticScaling:
        coolDownPeriod: 120s
        cpuUtilization:
          targetUtilization: 0.5
      noopOnDestroy: true
      serviceAccount: ${customServiceAccount.email}
  bucket:
    type: gcp:storage:Bucket
    properties:
      project: ${myProject.projectId}
      name: appengine-static-content
      location: US
  object:
    type: gcp:storage:BucketObject
    properties:
      name: hello-world.zip
      bucket: ${bucket.name}
      source:
        fn::FileAsset: ./test-fixtures/hello-world.zip
```
<!--End PulumiCodeChooser -->

## Import

FlexibleAppVersion can be imported using any of these accepted formats:

* `apps/{{project}}/services/{{service}}/versions/{{version_id}}`

* `{{project}}/{{service}}/{{version_id}}`

* `{{service}}/{{version_id}}`

When using the `pulumi import` command, FlexibleAppVersion can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:appengine/flexibleAppVersion:FlexibleAppVersion default apps/{{project}}/services/{{service}}/versions/{{version_id}}
```

```sh
$ pulumi import gcp:appengine/flexibleAppVersion:FlexibleAppVersion default {{project}}/{{service}}/{{version_id}}
```

```sh
$ pulumi import gcp:appengine/flexibleAppVersion:FlexibleAppVersion default {{service}}/{{version_id}}
```

¶
	apiConfiguBs:q
o
	appengineFlexibleAppVersionApiConfigEgcp:appengine/FlexibleAppVersionApiConfig:FlexibleAppVersionApiConfig2Serving configuration for Google Cloud Endpoints.

automaticScalingB:

	appengine"FlexibleAppVersionAutomaticScalingSgcp:appengine/FlexibleAppVersionAutomaticScaling:FlexibleAppVersionAutomaticScaling_Automatic scaling is based on request rate, response latencies, and other application metrics.
m
betaSettingsB2" UMetadata settings that are supplied to this version to enable beta runtime features.
Ç
defaultExpirationB" «Duration that static files should be cached by web proxies and browsers. Only applicable if the corresponding
StaticFilesHandler does not specify its own expiration time.
i
deleteServiceOnDestroyB
 IIf set to 'true', the service will be deleted if it is the last version.
Â

deploymentxBv:t
r
	appengineFlexibleAppVersionDeploymentGgcp:appengine/FlexibleAppVersionDeployment:FlexibleAppVersionDeployment:Code and application artifacts that make up this version.
ê
endpointsApiServiceB:

	appengine%FlexibleAppVersionEndpointsApiServiceYgcp:appengine/FlexibleAppVersionEndpointsApiService:FlexibleAppVersionEndpointsApiService:Code and application artifacts that make up this version.
¬

entrypointxBv:t
r
	appengineFlexibleAppVersionEntrypointGgcp:appengine/FlexibleAppVersionEntrypoint:FlexibleAppVersionEntrypoint$The entrypoint for the application.

envVariablesB2" ö
flexibleRuntimeSettings¢B:

	appengine)FlexibleAppVersionFlexibleRuntimeSettingsagcp:appengine/FlexibleAppVersionFlexibleRuntimeSettings:FlexibleAppVersionFlexibleRuntimeSettings6Runtime settings for App Engine flexible environment.
¯
handlersqBo*m:k
i
	appengineFlexibleAppVersionHandlerAgcp:appengine/FlexibleAppVersionHandler:FlexibleAppVersionHandler¯An ordered list of URL-matching patterns that should be applied to incoming requests. The first matching URL handles the
request and other request handlers are not attempted.
î
inboundServicesB*" ÒA list of the types of messages that this application is able to receive. Possible values: ["INBOUND_SERVICE_MAIL",
"INBOUND_SERVICE_MAIL_BOUNCE", "INBOUND_SERVICE_XMPP_ERROR", "INBOUND_SERVICE_XMPP_MESSAGE",
"INBOUND_SERVICE_XMPP_SUBSCRIBE", "INBOUND_SERVICE_XMPP_PRESENCE", "INBOUND_SERVICE_CHANNEL_PRESENCE",
"INBOUND_SERVICE_WARMUP"]
á
instanceClassB" ÉInstance class that is used to run this version. Valid values are AutomaticScaling: F1, F2, F4, F4_1G ManualScaling: B1,
B2, B4, B8, B4_1G Defaults to F1 for AutomaticScaling and B1 for ManualScaling.
¢
livenessCheck:}
{
	appengineFlexibleAppVersionLivenessCheckMgcp:appengine/FlexibleAppVersionLivenessCheck:FlexibleAppVersionLivenessCheckHealth checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
Structure is documented below.
¥
manualScalingB:}
{
	appengineFlexibleAppVersionManualScalingMgcp:appengine/FlexibleAppVersionManualScaling:FlexibleAppVersionManualScalingA service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of
its memory over time.

networkoBm:k
i
	appengineFlexibleAppVersionNetworkAgcp:appengine/FlexibleAppVersionNetwork:FlexibleAppVersionNetworkExtra network settings

nobuildFilesRegexB" dFiles that match this pattern will not be built into this version. Only applicable for Go runtimes.
V
noopOnDestroyB
 ?If set to 'true', the application version will not be deleted.

projectB" ¯
readinessCheck:
~
	appengine FlexibleAppVersionReadinessCheckOgcp:appengine/FlexibleAppVersionReadinessCheck:FlexibleAppVersionReadinessCheckConfigures readiness health checking for instances. Unhealthy instances are not put into the backend traffic rotation.
Structure is documented below.
¥
	resourcesuBs:q
o
	appengineFlexibleAppVersionResourcesEgcp:appengine/FlexibleAppVersionResources:FlexibleAppVersionResources!Machine resources for a version.
2
runtime" #Desired runtime. Example python27.
¨
runtimeApiVersionB" The version of the API in the given runtime environment. Please see the app.yaml reference for valid values at
'https://cloud.google.com/appengine/docs/standard/<language>/config/appref'\ Substitute '<language>' with 'python',
'java', 'php', 'ruby', 'go' or 'nodejs'.
]
runtimeChannelB" EThe channel of the runtime to use. Only available for some runtimes.
R
runtimeMainExecutablePathB" /The path or name of the app's main executable.
V
service" GAppEngine service resource. Can contain numbers, letters, and hyphens.
Û
serviceAccountB" ÂThe identity that the deployed version will run as. Admin API will use the App Engine Appspot service account as default
if this field is neither provided in app.yaml file nor through CLI flag.
Í
servingStatusB" µCurrent serving status of this version. Only the versions with a SERVING status create instances and can be billed.
Default value: "SERVING" Possible values: ["SERVING", "STOPPED"]
ç
	versionIdB" ÓRelative name of the version within the service. For example, 'v1'. Version names can contain only lowercase letters,
numbers, or hyphens. Reserved names,"default", "latest", and any name with the prefix "ah-".
Ø
vpcAccessConnectorB:

	appengine$FlexibleAppVersionVpcAccessConnectorWgcp:appengine/FlexibleAppVersionVpcAccessConnector:FlexibleAppVersionVpcAccessConnector,Enables VPC connectivity for standard apps.
"¶
	apiConfiguBs:q
o
	appengineFlexibleAppVersionApiConfigEgcp:appengine/FlexibleAppVersionApiConfig:FlexibleAppVersionApiConfig2Serving configuration for Google Cloud Endpoints.
"
automaticScalingB:

	appengine"FlexibleAppVersionAutomaticScalingSgcp:appengine/FlexibleAppVersionAutomaticScaling:FlexibleAppVersionAutomaticScaling_Automatic scaling is based on request rate, response latencies, and other application metrics.
"m
betaSettingsB2" UMetadata settings that are supplied to this version to enable beta runtime features.
"Ç
defaultExpirationB" «Duration that static files should be cached by web proxies and browsers. Only applicable if the corresponding
StaticFilesHandler does not specify its own expiration time.
"i
deleteServiceOnDestroyB
 IIf set to 'true', the service will be deleted if it is the last version.
"Â

deploymentxBv:t
r
	appengineFlexibleAppVersionDeploymentGgcp:appengine/FlexibleAppVersionDeployment:FlexibleAppVersionDeployment:Code and application artifacts that make up this version.
"ê
endpointsApiServiceB:

	appengine%FlexibleAppVersionEndpointsApiServiceYgcp:appengine/FlexibleAppVersionEndpointsApiService:FlexibleAppVersionEndpointsApiService:Code and application artifacts that make up this version.
"¬

entrypointxBv:t
r
	appengineFlexibleAppVersionEntrypointGgcp:appengine/FlexibleAppVersionEntrypoint:FlexibleAppVersionEntrypoint$The entrypoint for the application.
"
envVariablesB2" "ö
flexibleRuntimeSettings¢B:

	appengine)FlexibleAppVersionFlexibleRuntimeSettingsagcp:appengine/FlexibleAppVersionFlexibleRuntimeSettings:FlexibleAppVersionFlexibleRuntimeSettings6Runtime settings for App Engine flexible environment.
"­
handlerso*m:k
i
	appengineFlexibleAppVersionHandlerAgcp:appengine/FlexibleAppVersionHandler:FlexibleAppVersionHandler¯An ordered list of URL-matching patterns that should be applied to incoming requests. The first matching URL handles the
request and other request handlers are not attempted.
"î
inboundServicesB*" ÒA list of the types of messages that this application is able to receive. Possible values: ["INBOUND_SERVICE_MAIL",
"INBOUND_SERVICE_MAIL_BOUNCE", "INBOUND_SERVICE_XMPP_ERROR", "INBOUND_SERVICE_XMPP_MESSAGE",
"INBOUND_SERVICE_XMPP_SUBSCRIBE", "INBOUND_SERVICE_XMPP_PRESENCE", "INBOUND_SERVICE_CHANNEL_PRESENCE",
"INBOUND_SERVICE_WARMUP"]
"á
instanceClassB" ÉInstance class that is used to run this version. Valid values are AutomaticScaling: F1, F2, F4, F4_1G ManualScaling: B1,
B2, B4, B8, B4_1G Defaults to F1 for AutomaticScaling and B1 for ManualScaling.
"¢
livenessCheck:}
{
	appengineFlexibleAppVersionLivenessCheckMgcp:appengine/FlexibleAppVersionLivenessCheck:FlexibleAppVersionLivenessCheckHealth checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
Structure is documented below.
"¥
manualScalingB:}
{
	appengineFlexibleAppVersionManualScalingMgcp:appengine/FlexibleAppVersionManualScaling:FlexibleAppVersionManualScalingA service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of
its memory over time.
"I
name" =Full path to the Version resource in the API. Example, "v1".
"
networkoBm:k
i
	appengineFlexibleAppVersionNetworkAgcp:appengine/FlexibleAppVersionNetwork:FlexibleAppVersionNetworkExtra network settings
"
nobuildFilesRegexB" dFiles that match this pattern will not be built into this version. Only applicable for Go runtimes.
"V
noopOnDestroyB
 ?If set to 'true', the application version will not be deleted.
"
project" "¯
readinessCheck:
~
	appengine FlexibleAppVersionReadinessCheckOgcp:appengine/FlexibleAppVersionReadinessCheck:FlexibleAppVersionReadinessCheckConfigures readiness health checking for instances. Unhealthy instances are not put into the backend traffic rotation.
Structure is documented below.
"¥
	resourcesuBs:q
o
	appengineFlexibleAppVersionResourcesEgcp:appengine/FlexibleAppVersionResources:FlexibleAppVersionResources!Machine resources for a version.
"2
runtime" #Desired runtime. Example python27.
"¦
runtimeApiVersion" The version of the API in the given runtime environment. Please see the app.yaml reference for valid values at
'https://cloud.google.com/appengine/docs/standard/<language>/config/appref'\ Substitute '<language>' with 'python',
'java', 'php', 'ruby', 'go' or 'nodejs'.
"]
runtimeChannelB" EThe channel of the runtime to use. Only available for some runtimes.
"R
runtimeMainExecutablePathB" /The path or name of the app's main executable.
"V
service" GAppEngine service resource. Can contain numbers, letters, and hyphens.
"Ù
serviceAccount" ÂThe identity that the deployed version will run as. Admin API will use the App Engine Appspot service account as default
if this field is neither provided in app.yaml file nor through CLI flag.
"Í
servingStatusB" µCurrent serving status of this version. Only the versions with a SERVING status create instances and can be billed.
Default value: "SERVING" Possible values: ["SERVING", "STOPPED"]
"ç
	versionIdB" ÓRelative name of the version within the service. For example, 'v1'. Version names can contain only lowercase letters,
numbers, or hyphens. Reserved names,"default", "latest", and any name with the prefix "ah-".
"Ø
vpcAccessConnectorB:

	appengine$FlexibleAppVersionVpcAccessConnectorWgcp:appengine/FlexibleAppVersionVpcAccessConnector:FlexibleAppVersionVpcAccessConnector,Enables VPC connectivity for standard apps.
*¤\
`
	appengineServiceNetworkSettings;gcp:appengine/serviceNetworkSettings:ServiceNetworkSettingsVA NetworkSettings resource is a container for ingress settings for a version or service.


To get more information about ServiceNetworkSettings, see:

* [API documentation](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services)

## Example Usage

### App Engine Service Network Settings


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const bucket = new gcp.storage.Bucket("bucket", {
    name: "appengine-static-content",
    location: "US",
});
const object = new gcp.storage.BucketObject("object", {
    name: "hello-world.zip",
    bucket: bucket.name,
    source: new pulumi.asset.FileAsset("./test-fixtures/hello-world.zip"),
});
const internalapp = new gcp.appengine.StandardAppVersion("internalapp", {
    versionId: "v1",
    service: "internalapp",
    deleteServiceOnDestroy: true,
    runtime: "nodejs20",
    entrypoint: {
        shell: "node ./app.js",
    },
    deployment: {
        zip: {
            sourceUrl: pulumi.interpolate`https://storage.googleapis.com/${bucket.name}/${object.name}`,
        },
    },
    envVariables: {
        port: "8080",
    },
});
const internalappServiceNetworkSettings = new gcp.appengine.ServiceNetworkSettings("internalapp", {
    service: internalapp.service,
    networkSettings: {
        ingressTrafficAllowed: "INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

bucket = gcp.storage.Bucket("bucket",
    name="appengine-static-content",
    location="US")
object = gcp.storage.BucketObject("object",
    name="hello-world.zip",
    bucket=bucket.name,
    source=pulumi.FileAsset("./test-fixtures/hello-world.zip"))
internalapp = gcp.appengine.StandardAppVersion("internalapp",
    version_id="v1",
    service="internalapp",
    delete_service_on_destroy=True,
    runtime="nodejs20",
    entrypoint={
        "shell": "node ./app.js",
    },
    deployment={
        "zip": {
            "source_url": pulumi.Output.all(
                bucketName=bucket.name,
                objectName=object.name
).apply(lambda resolved_outputs: f"https://storage.googleapis.com/{resolved_outputs['bucketName']}/{resolved_outputs['objectName']}")
,
        },
    },
    env_variables={
        "port": "8080",
    })
internalapp_service_network_settings = gcp.appengine.ServiceNetworkSettings("internalapp",
    service=internalapp.service,
    network_settings={
        "ingress_traffic_allowed": "INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "appengine-static-content",
        Location = "US",
    });

    var @object = new Gcp.Storage.BucketObject("object", new()
    {
        Name = "hello-world.zip",
        Bucket = bucket.Name,
        Source = new FileAsset("./test-fixtures/hello-world.zip"),
    });

    var internalapp = new Gcp.AppEngine.StandardAppVersion("internalapp", new()
    {
        VersionId = "v1",
        Service = "internalapp",
        DeleteServiceOnDestroy = true,
        Runtime = "nodejs20",
        Entrypoint = new Gcp.AppEngine.Inputs.StandardAppVersionEntrypointArgs
        {
            Shell = "node ./app.js",
        },
        Deployment = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentArgs
        {
            Zip = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentZipArgs
            {
                SourceUrl = Output.Tuple(bucket.Name, @object.Name).Apply(values =>
                {
                    var bucketName = values.Item1;
                    var objectName = values.Item2;
                    return $"https://storage.googleapis.com/{bucketName}/{objectName}";
                }),
            },
        },
        EnvVariables = 
        {
            { "port", "8080" },
        },
    });

    var internalappServiceNetworkSettings = new Gcp.AppEngine.ServiceNetworkSettings("internalapp", new()
    {
        Service = internalapp.Service,
        NetworkSettings = new Gcp.AppEngine.Inputs.ServiceNetworkSettingsNetworkSettingsArgs
        {
            IngressTrafficAllowed = "INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY",
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/appengine"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:     pulumi.String("appengine-static-content"),
			Location: pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		object, err := storage.NewBucketObject(ctx, "object", &storage.BucketObjectArgs{
			Name:   pulumi.String("hello-world.zip"),
			Bucket: bucket.Name,
			Source: pulumi.NewFileAsset("./test-fixtures/hello-world.zip"),
		})
		if err != nil {
			return err
		}
		internalapp, err := appengine.NewStandardAppVersion(ctx, "internalapp", &appengine.StandardAppVersionArgs{
			VersionId:              pulumi.String("v1"),
			Service:                pulumi.String("internalapp"),
			DeleteServiceOnDestroy: pulumi.Bool(true),
			Runtime:                pulumi.String("nodejs20"),
			Entrypoint: &appengine.StandardAppVersionEntrypointArgs{
				Shell: pulumi.String("node ./app.js"),
			},
			Deployment: &appengine.StandardAppVersionDeploymentArgs{
				Zip: &appengine.StandardAppVersionDeploymentZipArgs{
					SourceUrl: pulumi.All(bucket.Name, object.Name).ApplyT(func(_args []interface{}) (string, error) {
						bucketName := _args[0].(string)
						objectName := _args[1].(string)
						return fmt.Sprintf("https://storage.googleapis.com/%v/%v", bucketName, objectName), nil
					}).(pulumi.StringOutput),
				},
			},
			EnvVariables: pulumi.StringMap{
				"port": pulumi.String("8080"),
			},
		})
		if err != nil {
			return err
		}
		_, err = appengine.NewServiceNetworkSettings(ctx, "internalapp", &appengine.ServiceNetworkSettingsArgs{
			Service: internalapp.Service,
			NetworkSettings: &appengine.ServiceNetworkSettingsNetworkSettingsArgs{
				IngressTrafficAllowed: pulumi.String("INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.appengine.StandardAppVersion;
import com.pulumi.gcp.appengine.StandardAppVersionArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionEntrypointArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentZipArgs;
import com.pulumi.gcp.appengine.ServiceNetworkSettings;
import com.pulumi.gcp.appengine.ServiceNetworkSettingsArgs;
import com.pulumi.gcp.appengine.inputs.ServiceNetworkSettingsNetworkSettingsArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("appengine-static-content")
            .location("US")
            .build());

        var object = new BucketObject("object", BucketObjectArgs.builder()
            .name("hello-world.zip")
            .bucket(bucket.name())
            .source(new FileAsset("./test-fixtures/hello-world.zip"))
            .build());

        var internalapp = new StandardAppVersion("internalapp", StandardAppVersionArgs.builder()
            .versionId("v1")
            .service("internalapp")
            .deleteServiceOnDestroy(true)
            .runtime("nodejs20")
            .entrypoint(StandardAppVersionEntrypointArgs.builder()
                .shell("node ./app.js")
                .build())
            .deployment(StandardAppVersionDeploymentArgs.builder()
                .zip(StandardAppVersionDeploymentZipArgs.builder()
                    .sourceUrl(Output.tuple(bucket.name(), object.name()).applyValue(values -> {
                        var bucketName = values.t1;
                        var objectName = values.t2;
                        return String.format("https://storage.googleapis.com/%s/%s", bucketName,objectName);
                    }))
                    .build())
                .build())
            .envVariables(Map.of("port", "8080"))
            .build());

        var internalappServiceNetworkSettings = new ServiceNetworkSettings("internalappServiceNetworkSettings", ServiceNetworkSettingsArgs.builder()
            .service(internalapp.service())
            .networkSettings(ServiceNetworkSettingsNetworkSettingsArgs.builder()
                .ingressTrafficAllowed("INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY")
                .build())
            .build());

    }
}
```
```yaml
resources:
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: appengine-static-content
      location: US
  object:
    type: gcp:storage:BucketObject
    properties:
      name: hello-world.zip
      bucket: ${bucket.name}
      source:
        fn::FileAsset: ./test-fixtures/hello-world.zip
  internalapp:
    type: gcp:appengine:StandardAppVersion
    properties:
      versionId: v1
      service: internalapp
      deleteServiceOnDestroy: true
      runtime: nodejs20
      entrypoint:
        shell: node ./app.js
      deployment:
        zip:
          sourceUrl: https://storage.googleapis.com/${bucket.name}/${object.name}
      envVariables:
        port: '8080'
  internalappServiceNetworkSettings:
    type: gcp:appengine:ServiceNetworkSettings
    name: internalapp
    properties:
      service: ${internalapp.service}
      networkSettings:
        ingressTrafficAllowed: INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY
```
<!--End PulumiCodeChooser -->

## Import

ServiceNetworkSettings can be imported using any of these accepted formats:

* `apps/{{project}}/services/{{service}}`

* `{{project}}/{{service}}`

* `{{service}}`

When using the `pulumi import` command, ServiceNetworkSettings can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:appengine/serviceNetworkSettings:ServiceNetworkSettings default apps/{{project}}/services/{{service}}
```

```sh
$ pulumi import gcp:appengine/serviceNetworkSettings:ServiceNetworkSettings default {{project}}/{{service}}
```

```sh
$ pulumi import gcp:appengine/serviceNetworkSettings:ServiceNetworkSettings default {{service}}
```


networkSettings:

	appengine%ServiceNetworkSettingsNetworkSettingsYgcp:appengine/ServiceNetworkSettingsNetworkSettings:ServiceNetworkSettingsNetworkSettings^Ingress settings for this service. Will apply to all versions.
Structure is documented below.

projectB" @
service" 1The name of the service these settings apply to.
"
networkSettings:

	appengine%ServiceNetworkSettingsNetworkSettingsYgcp:appengine/ServiceNetworkSettingsNetworkSettings:ServiceNetworkSettingsNetworkSettings^Ingress settings for this service. Will apply to all versions.
Structure is documented below.
"
project" "@
service" 1The name of the service these settings apply to.
*Óó
T
	appengineStandardAppVersion3gcp:appengine/standardAppVersion:StandardAppVersionì±Standard App Version resource to create a new version of standard GAE Application.
Learn about the differences between the standard environment and the flexible environment
at https://cloud.google.com/appengine/docs/the-appengine-environments.
Currently supporting Zip and File Containers.


To get more information about StandardAppVersion, see:

* [API documentation](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/appengine/docs/standard)

## Example Usage

### App Engine Standard App Version


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const customServiceAccount = new gcp.serviceaccount.Account("custom_service_account", {
    accountId: "my-account",
    displayName: "Custom Service Account",
});
const gaeApi = new gcp.projects.IAMMember("gae_api", {
    project: customServiceAccount.project,
    role: "roles/compute.networkUser",
    member: pulumi.interpolate`serviceAccount:${customServiceAccount.email}`,
});
const storageViewer = new gcp.projects.IAMMember("storage_viewer", {
    project: customServiceAccount.project,
    role: "roles/storage.objectViewer",
    member: pulumi.interpolate`serviceAccount:${customServiceAccount.email}`,
});
const bucket = new gcp.storage.Bucket("bucket", {
    name: "appengine-static-content",
    location: "US",
});
const object = new gcp.storage.BucketObject("object", {
    name: "hello-world.zip",
    bucket: bucket.name,
    source: new pulumi.asset.FileAsset("./test-fixtures/hello-world.zip"),
});
const myappV1 = new gcp.appengine.StandardAppVersion("myapp_v1", {
    versionId: "v1",
    service: "myapp",
    runtime: "nodejs20",
    entrypoint: {
        shell: "node ./app.js",
    },
    deployment: {
        zip: {
            sourceUrl: pulumi.interpolate`https://storage.googleapis.com/${bucket.name}/${object.name}`,
        },
    },
    envVariables: {
        port: "8080",
    },
    automaticScaling: {
        maxConcurrentRequests: 10,
        minIdleInstances: 1,
        maxIdleInstances: 3,
        minPendingLatency: "1s",
        maxPendingLatency: "5s",
        standardSchedulerSettings: {
            targetCpuUtilization: 0.5,
            targetThroughputUtilization: 0.75,
            minInstances: 2,
            maxInstances: 10,
        },
    },
    deleteServiceOnDestroy: true,
    serviceAccount: customServiceAccount.email,
});
const myappV2 = new gcp.appengine.StandardAppVersion("myapp_v2", {
    versionId: "v2",
    service: "myapp",
    runtime: "nodejs20",
    appEngineApis: true,
    entrypoint: {
        shell: "node ./app.js",
    },
    deployment: {
        zip: {
            sourceUrl: pulumi.interpolate`https://storage.googleapis.com/${bucket.name}/${object.name}`,
        },
    },
    envVariables: {
        port: "8080",
    },
    basicScaling: {
        maxInstances: 5,
    },
    noopOnDestroy: true,
    serviceAccount: customServiceAccount.email,
});
```
```python
import pulumi
import pulumi_gcp as gcp

custom_service_account = gcp.serviceaccount.Account("custom_service_account",
    account_id="my-account",
    display_name="Custom Service Account")
gae_api = gcp.projects.IAMMember("gae_api",
    project=custom_service_account.project,
    role="roles/compute.networkUser",
    member=custom_service_account.email.apply(lambda email: f"serviceAccount:{email}"))
storage_viewer = gcp.projects.IAMMember("storage_viewer",
    project=custom_service_account.project,
    role="roles/storage.objectViewer",
    member=custom_service_account.email.apply(lambda email: f"serviceAccount:{email}"))
bucket = gcp.storage.Bucket("bucket",
    name="appengine-static-content",
    location="US")
object = gcp.storage.BucketObject("object",
    name="hello-world.zip",
    bucket=bucket.name,
    source=pulumi.FileAsset("./test-fixtures/hello-world.zip"))
myapp_v1 = gcp.appengine.StandardAppVersion("myapp_v1",
    version_id="v1",
    service="myapp",
    runtime="nodejs20",
    entrypoint={
        "shell": "node ./app.js",
    },
    deployment={
        "zip": {
            "source_url": pulumi.Output.all(
                bucketName=bucket.name,
                objectName=object.name
).apply(lambda resolved_outputs: f"https://storage.googleapis.com/{resolved_outputs['bucketName']}/{resolved_outputs['objectName']}")
,
        },
    },
    env_variables={
        "port": "8080",
    },
    automatic_scaling={
        "max_concurrent_requests": 10,
        "min_idle_instances": 1,
        "max_idle_instances": 3,
        "min_pending_latency": "1s",
        "max_pending_latency": "5s",
        "standard_scheduler_settings": {
            "target_cpu_utilization": 0.5,
            "target_throughput_utilization": 0.75,
            "min_instances": 2,
            "max_instances": 10,
        },
    },
    delete_service_on_destroy=True,
    service_account=custom_service_account.email)
myapp_v2 = gcp.appengine.StandardAppVersion("myapp_v2",
    version_id="v2",
    service="myapp",
    runtime="nodejs20",
    app_engine_apis=True,
    entrypoint={
        "shell": "node ./app.js",
    },
    deployment={
        "zip": {
            "source_url": pulumi.Output.all(
                bucketName=bucket.name,
                objectName=object.name
).apply(lambda resolved_outputs: f"https://storage.googleapis.com/{resolved_outputs['bucketName']}/{resolved_outputs['objectName']}")
,
        },
    },
    env_variables={
        "port": "8080",
    },
    basic_scaling={
        "max_instances": 5,
    },
    noop_on_destroy=True,
    service_account=custom_service_account.email)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var customServiceAccount = new Gcp.ServiceAccount.Account("custom_service_account", new()
    {
        AccountId = "my-account",
        DisplayName = "Custom Service Account",
    });

    var gaeApi = new Gcp.Projects.IAMMember("gae_api", new()
    {
        Project = customServiceAccount.Project,
        Role = "roles/compute.networkUser",
        Member = customServiceAccount.Email.Apply(email => $"serviceAccount:{email}"),
    });

    var storageViewer = new Gcp.Projects.IAMMember("storage_viewer", new()
    {
        Project = customServiceAccount.Project,
        Role = "roles/storage.objectViewer",
        Member = customServiceAccount.Email.Apply(email => $"serviceAccount:{email}"),
    });

    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "appengine-static-content",
        Location = "US",
    });

    var @object = new Gcp.Storage.BucketObject("object", new()
    {
        Name = "hello-world.zip",
        Bucket = bucket.Name,
        Source = new FileAsset("./test-fixtures/hello-world.zip"),
    });

    var myappV1 = new Gcp.AppEngine.StandardAppVersion("myapp_v1", new()
    {
        VersionId = "v1",
        Service = "myapp",
        Runtime = "nodejs20",
        Entrypoint = new Gcp.AppEngine.Inputs.StandardAppVersionEntrypointArgs
        {
            Shell = "node ./app.js",
        },
        Deployment = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentArgs
        {
            Zip = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentZipArgs
            {
                SourceUrl = Output.Tuple(bucket.Name, @object.Name).Apply(values =>
                {
                    var bucketName = values.Item1;
                    var objectName = values.Item2;
                    return $"https://storage.googleapis.com/{bucketName}/{objectName}";
                }),
            },
        },
        EnvVariables = 
        {
            { "port", "8080" },
        },
        AutomaticScaling = new Gcp.AppEngine.Inputs.StandardAppVersionAutomaticScalingArgs
        {
            MaxConcurrentRequests = 10,
            MinIdleInstances = 1,
            MaxIdleInstances = 3,
            MinPendingLatency = "1s",
            MaxPendingLatency = "5s",
            StandardSchedulerSettings = new Gcp.AppEngine.Inputs.StandardAppVersionAutomaticScalingStandardSchedulerSettingsArgs
            {
                TargetCpuUtilization = 0.5,
                TargetThroughputUtilization = 0.75,
                MinInstances = 2,
                MaxInstances = 10,
            },
        },
        DeleteServiceOnDestroy = true,
        ServiceAccount = customServiceAccount.Email,
    });

    var myappV2 = new Gcp.AppEngine.StandardAppVersion("myapp_v2", new()
    {
        VersionId = "v2",
        Service = "myapp",
        Runtime = "nodejs20",
        AppEngineApis = true,
        Entrypoint = new Gcp.AppEngine.Inputs.StandardAppVersionEntrypointArgs
        {
            Shell = "node ./app.js",
        },
        Deployment = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentArgs
        {
            Zip = new Gcp.AppEngine.Inputs.StandardAppVersionDeploymentZipArgs
            {
                SourceUrl = Output.Tuple(bucket.Name, @object.Name).Apply(values =>
                {
                    var bucketName = values.Item1;
                    var objectName = values.Item2;
                    return $"https://storage.googleapis.com/{bucketName}/{objectName}";
                }),
            },
        },
        EnvVariables = 
        {
            { "port", "8080" },
        },
        BasicScaling = new Gcp.AppEngine.Inputs.StandardAppVersionBasicScalingArgs
        {
            MaxInstances = 5,
        },
        NoopOnDestroy = true,
        ServiceAccount = customServiceAccount.Email,
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/appengine"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		customServiceAccount, err := serviceaccount.NewAccount(ctx, "custom_service_account", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-account"),
			DisplayName: pulumi.String("Custom Service Account"),
		})
		if err != nil {
			return err
		}
		_, err = projects.NewIAMMember(ctx, "gae_api", &projects.IAMMemberArgs{
			Project: customServiceAccount.Project,
			Role:    pulumi.String("roles/compute.networkUser"),
			Member: customServiceAccount.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		_, err = projects.NewIAMMember(ctx, "storage_viewer", &projects.IAMMemberArgs{
			Project: customServiceAccount.Project,
			Role:    pulumi.String("roles/storage.objectViewer"),
			Member: customServiceAccount.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:     pulumi.String("appengine-static-content"),
			Location: pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		object, err := storage.NewBucketObject(ctx, "object", &storage.BucketObjectArgs{
			Name:   pulumi.String("hello-world.zip"),
			Bucket: bucket.Name,
			Source: pulumi.NewFileAsset("./test-fixtures/hello-world.zip"),
		})
		if err != nil {
			return err
		}
		_, err = appengine.NewStandardAppVersion(ctx, "myapp_v1", &appengine.StandardAppVersionArgs{
			VersionId: pulumi.String("v1"),
			Service:   pulumi.String("myapp"),
			Runtime:   pulumi.String("nodejs20"),
			Entrypoint: &appengine.StandardAppVersionEntrypointArgs{
				Shell: pulumi.String("node ./app.js"),
			},
			Deployment: &appengine.StandardAppVersionDeploymentArgs{
				Zip: &appengine.StandardAppVersionDeploymentZipArgs{
					SourceUrl: pulumi.All(bucket.Name, object.Name).ApplyT(func(_args []interface{}) (string, error) {
						bucketName := _args[0].(string)
						objectName := _args[1].(string)
						return fmt.Sprintf("https://storage.googleapis.com/%v/%v", bucketName, objectName), nil
					}).(pulumi.StringOutput),
				},
			},
			EnvVariables: pulumi.StringMap{
				"port": pulumi.String("8080"),
			},
			AutomaticScaling: &appengine.StandardAppVersionAutomaticScalingArgs{
				MaxConcurrentRequests: pulumi.Int(10),
				MinIdleInstances:      pulumi.Int(1),
				MaxIdleInstances:      pulumi.Int(3),
				MinPendingLatency:     pulumi.String("1s"),
				MaxPendingLatency:     pulumi.String("5s"),
				StandardSchedulerSettings: &appengine.StandardAppVersionAutomaticScalingStandardSchedulerSettingsArgs{
					TargetCpuUtilization:        pulumi.Float64(0.5),
					TargetThroughputUtilization: pulumi.Float64(0.75),
					MinInstances:                pulumi.Int(2),
					MaxInstances:                pulumi.Int(10),
				},
			},
			DeleteServiceOnDestroy: pulumi.Bool(true),
			ServiceAccount:         customServiceAccount.Email,
		})
		if err != nil {
			return err
		}
		_, err = appengine.NewStandardAppVersion(ctx, "myapp_v2", &appengine.StandardAppVersionArgs{
			VersionId:     pulumi.String("v2"),
			Service:       pulumi.String("myapp"),
			Runtime:       pulumi.String("nodejs20"),
			AppEngineApis: pulumi.Bool(true),
			Entrypoint: &appengine.StandardAppVersionEntrypointArgs{
				Shell: pulumi.String("node ./app.js"),
			},
			Deployment: &appengine.StandardAppVersionDeploymentArgs{
				Zip: &appengine.StandardAppVersionDeploymentZipArgs{
					SourceUrl: pulumi.All(bucket.Name, object.Name).ApplyT(func(_args []interface{}) (string, error) {
						bucketName := _args[0].(string)
						objectName := _args[1].(string)
						return fmt.Sprintf("https://storage.googleapis.com/%v/%v", bucketName, objectName), nil
					}).(pulumi.StringOutput),
				},
			},
			EnvVariables: pulumi.StringMap{
				"port": pulumi.String("8080"),
			},
			BasicScaling: &appengine.StandardAppVersionBasicScalingArgs{
				MaxInstances: pulumi.Int(5),
			},
			NoopOnDestroy:  pulumi.Bool(true),
			ServiceAccount: customServiceAccount.Email,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.projects.IAMMember;
import com.pulumi.gcp.projects.IAMMemberArgs;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.appengine.StandardAppVersion;
import com.pulumi.gcp.appengine.StandardAppVersionArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionEntrypointArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionDeploymentZipArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionAutomaticScalingArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionAutomaticScalingStandardSchedulerSettingsArgs;
import com.pulumi.gcp.appengine.inputs.StandardAppVersionBasicScalingArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var customServiceAccount = new Account("customServiceAccount", AccountArgs.builder()
            .accountId("my-account")
            .displayName("Custom Service Account")
            .build());

        var gaeApi = new IAMMember("gaeApi", IAMMemberArgs.builder()
            .project(customServiceAccount.project())
            .role("roles/compute.networkUser")
            .member(customServiceAccount.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

        var storageViewer = new IAMMember("storageViewer", IAMMemberArgs.builder()
            .project(customServiceAccount.project())
            .role("roles/storage.objectViewer")
            .member(customServiceAccount.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("appengine-static-content")
            .location("US")
            .build());

        var object = new BucketObject("object", BucketObjectArgs.builder()
            .name("hello-world.zip")
            .bucket(bucket.name())
            .source(new FileAsset("./test-fixtures/hello-world.zip"))
            .build());

        var myappV1 = new StandardAppVersion("myappV1", StandardAppVersionArgs.builder()
            .versionId("v1")
            .service("myapp")
            .runtime("nodejs20")
            .entrypoint(StandardAppVersionEntrypointArgs.builder()
                .shell("node ./app.js")
                .build())
            .deployment(StandardAppVersionDeploymentArgs.builder()
                .zip(StandardAppVersionDeploymentZipArgs.builder()
                    .sourceUrl(Output.tuple(bucket.name(), object.name()).applyValue(values -> {
                        var bucketName = values.t1;
                        var objectName = values.t2;
                        return String.format("https://storage.googleapis.com/%s/%s", bucketName,objectName);
                    }))
                    .build())
                .build())
            .envVariables(Map.of("port", "8080"))
            .automaticScaling(StandardAppVersionAutomaticScalingArgs.builder()
                .maxConcurrentRequests(10)
                .minIdleInstances(1)
                .maxIdleInstances(3)
                .minPendingLatency("1s")
                .maxPendingLatency("5s")
                .standardSchedulerSettings(StandardAppVersionAutomaticScalingStandardSchedulerSettingsArgs.builder()
                    .targetCpuUtilization(0.5)
                    .targetThroughputUtilization(0.75)
                    .minInstances(2)
                    .maxInstances(10)
                    .build())
                .build())
            .deleteServiceOnDestroy(true)
            .serviceAccount(customServiceAccount.email())
            .build());

        var myappV2 = new StandardAppVersion("myappV2", StandardAppVersionArgs.builder()
            .versionId("v2")
            .service("myapp")
            .runtime("nodejs20")
            .appEngineApis(true)
            .entrypoint(StandardAppVersionEntrypointArgs.builder()
                .shell("node ./app.js")
                .build())
            .deployment(StandardAppVersionDeploymentArgs.builder()
                .zip(StandardAppVersionDeploymentZipArgs.builder()
                    .sourceUrl(Output.tuple(bucket.name(), object.name()).applyValue(values -> {
                        var bucketName = values.t1;
                        var objectName = values.t2;
                        return String.format("https://storage.googleapis.com/%s/%s", bucketName,objectName);
                    }))
                    .build())
                .build())
            .envVariables(Map.of("port", "8080"))
            .basicScaling(StandardAppVersionBasicScalingArgs.builder()
                .maxInstances(5)
                .build())
            .noopOnDestroy(true)
            .serviceAccount(customServiceAccount.email())
            .build());

    }
}
```
```yaml
resources:
  customServiceAccount:
    type: gcp:serviceaccount:Account
    name: custom_service_account
    properties:
      accountId: my-account
      displayName: Custom Service Account
  gaeApi:
    type: gcp:projects:IAMMember
    name: gae_api
    properties:
      project: ${customServiceAccount.project}
      role: roles/compute.networkUser
      member: serviceAccount:${customServiceAccount.email}
  storageViewer:
    type: gcp:projects:IAMMember
    name: storage_viewer
    properties:
      project: ${customServiceAccount.project}
      role: roles/storage.objectViewer
      member: serviceAccount:${customServiceAccount.email}
  myappV1:
    type: gcp:appengine:StandardAppVersion
    name: myapp_v1
    properties:
      versionId: v1
      service: myapp
      runtime: nodejs20
      entrypoint:
        shell: node ./app.js
      deployment:
        zip:
          sourceUrl: https://storage.googleapis.com/${bucket.name}/${object.name}
      envVariables:
        port: '8080'
      automaticScaling:
        maxConcurrentRequests: 10
        minIdleInstances: 1
        maxIdleInstances: 3
        minPendingLatency: 1s
        maxPendingLatency: 5s
        standardSchedulerSettings:
          targetCpuUtilization: 0.5
          targetThroughputUtilization: 0.75
          minInstances: 2
          maxInstances: 10
      deleteServiceOnDestroy: true
      serviceAccount: ${customServiceAccount.email}
  myappV2:
    type: gcp:appengine:StandardAppVersion
    name: myapp_v2
    properties:
      versionId: v2
      service: myapp
      runtime: nodejs20
      appEngineApis: true
      entrypoint:
        shell: node ./app.js
      deployment:
        zip:
          sourceUrl: https://storage.googleapis.com/${bucket.name}/${object.name}
      envVariables:
        port: '8080'
      basicScaling:
        maxInstances: 5
      noopOnDestroy: true
      serviceAccount: ${customServiceAccount.email}
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: appengine-static-content
      location: US
  object:
    type: gcp:storage:BucketObject
    properties:
      name: hello-world.zip
      bucket: ${bucket.name}
      source:
        fn::FileAsset: ./test-fixtures/hello-world.zip
```
<!--End PulumiCodeChooser -->

## Import

StandardAppVersion can be imported using any of these accepted formats:

* `apps/{{project}}/services/{{service}}/versions/{{version_id}}`

* `{{project}}/{{service}}/{{version_id}}`

* `{{service}}/{{version_id}}`

When using the `pulumi import` command, StandardAppVersion can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:appengine/standardAppVersion:StandardAppVersion default apps/{{project}}/services/{{service}}/versions/{{version_id}}
```

```sh
$ pulumi import gcp:appengine/standardAppVersion:StandardAppVersion default {{project}}/{{service}}/{{version_id}}
```

```sh
$ pulumi import gcp:appengine/standardAppVersion:StandardAppVersion default {{service}}/{{version_id}}
```

k
appEngineApisB
 TAllows App Engine second generation runtimes to access the legacy bundled services.

automaticScalingB:

	appengine"StandardAppVersionAutomaticScalingSgcp:appengine/StandardAppVersionAutomaticScaling:StandardAppVersionAutomaticScaling_Automatic scaling is based on request rate, response latencies, and other application metrics.
î
basicScaling~B|:z
x
	appengineStandardAppVersionBasicScalingKgcp:appengine/StandardAppVersionBasicScaling:StandardAppVersionBasicScalingÝBasic scaling creates instances when your application receives requests. Each instance will be shut down when the
application becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
i
deleteServiceOnDestroyB
 IIf set to 'true', the service will be deleted if it is the last version.
ß

deploymentv:t
r
	appengineStandardAppVersionDeploymentGgcp:appengine/StandardAppVersionDeployment:StandardAppVersionDeploymentYCode and application artifacts that make up this version.
Structure is documented below.
É

entrypointv:t
r
	appengineStandardAppVersionEntrypointGgcp:appengine/StandardAppVersionEntrypoint:StandardAppVersionEntrypointCThe entrypoint for the application.
Structure is documented below.
L
envVariablesB2" 4Environment variables available to the application.
¯
handlersqBo*m:k
i
	appengineStandardAppVersionHandlerAgcp:appengine/StandardAppVersionHandler:StandardAppVersionHandler¯An ordered list of URL-matching patterns that should be applied to incoming requests. The first matching URL handles the
request and other request handlers are not attempted.
î
inboundServicesB*" ÒA list of the types of messages that this application is able to receive. Possible values: ["INBOUND_SERVICE_MAIL",
"INBOUND_SERVICE_MAIL_BOUNCE", "INBOUND_SERVICE_XMPP_ERROR", "INBOUND_SERVICE_XMPP_MESSAGE",
"INBOUND_SERVICE_XMPP_SUBSCRIBE", "INBOUND_SERVICE_XMPP_PRESENCE", "INBOUND_SERVICE_CHANNEL_PRESENCE",
"INBOUND_SERVICE_WARMUP"]
º
instanceClassB" ¢Instance class that is used to run this version. Valid values are AutomaticScaling: F1, F2, F4, F4_1G BasicScaling or
ManualScaling: B1, B2, B4, B4_1G, B8 Defaults to F1 for AutomaticScaling and B2 for ManualScaling and BasicScaling. If
no scaling is specified, AutomaticScaling is chosen.
Ý
	librariesqBo*m:k
i
	appengineStandardAppVersionLibraryAgcp:appengine/StandardAppVersionLibrary:StandardAppVersionLibrary]Configuration for third-party Python runtime libraries that are required by the application.
¥
manualScalingB:}
{
	appengineStandardAppVersionManualScalingMgcp:appengine/StandardAppVersionManualScaling:StandardAppVersionManualScalingA service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of
its memory over time.
V
noopOnDestroyB
 ?If set to 'true', the application version will not be deleted.

projectB" 2
runtime" #Desired runtime. Example python27.
¨
runtimeApiVersionB" The version of the API in the given runtime environment. Please see the app.yaml reference for valid values at
'https://cloud.google.com/appengine/docs/standard/<language>/config/appref'\ Substitute '<language>' with 'python',
'java', 'php', 'ruby', 'go' or 'nodejs'.
*
service" AppEngine service resource
Û
serviceAccountB" ÂThe identity that the deployed version will run as. Admin API will use the App Engine Appspot service account as default
if this field is neither provided in app.yaml file nor through CLI flag.
Y

threadsafeB
 EWhether multiple requests can be dispatched to this version at once.
ç
	versionIdB" ÓRelative name of the version within the service. For example, 'v1'. Version names can contain only lowercase letters,
numbers, or hyphens. Reserved names,"default", "latest", and any name with the prefix "ah-".
Ø
vpcAccessConnectorB:

	appengine$StandardAppVersionVpcAccessConnectorWgcp:appengine/StandardAppVersionVpcAccessConnector:StandardAppVersionVpcAccessConnector,Enables VPC connectivity for standard apps.
"k
appEngineApisB
 TAllows App Engine second generation runtimes to access the legacy bundled services.
"
automaticScalingB:

	appengine"StandardAppVersionAutomaticScalingSgcp:appengine/StandardAppVersionAutomaticScaling:StandardAppVersionAutomaticScaling_Automatic scaling is based on request rate, response latencies, and other application metrics.
"î
basicScaling~B|:z
x
	appengineStandardAppVersionBasicScalingKgcp:appengine/StandardAppVersionBasicScaling:StandardAppVersionBasicScalingÝBasic scaling creates instances when your application receives requests. Each instance will be shut down when the
application becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
"i
deleteServiceOnDestroyB
 IIf set to 'true', the service will be deleted if it is the last version.
"ß

deploymentv:t
r
	appengineStandardAppVersionDeploymentGgcp:appengine/StandardAppVersionDeployment:StandardAppVersionDeploymentYCode and application artifacts that make up this version.
Structure is documented below.
"É

entrypointv:t
r
	appengineStandardAppVersionEntrypointGgcp:appengine/StandardAppVersionEntrypoint:StandardAppVersionEntrypointCThe entrypoint for the application.
Structure is documented below.
"L
envVariablesB2" 4Environment variables available to the application.
"­
handlerso*m:k
i
	appengineStandardAppVersionHandlerAgcp:appengine/StandardAppVersionHandler:StandardAppVersionHandler¯An ordered list of URL-matching patterns that should be applied to incoming requests. The first matching URL handles the
request and other request handlers are not attempted.
"î
inboundServicesB*" ÒA list of the types of messages that this application is able to receive. Possible values: ["INBOUND_SERVICE_MAIL",
"INBOUND_SERVICE_MAIL_BOUNCE", "INBOUND_SERVICE_XMPP_ERROR", "INBOUND_SERVICE_XMPP_MESSAGE",
"INBOUND_SERVICE_XMPP_SUBSCRIBE", "INBOUND_SERVICE_XMPP_PRESENCE", "INBOUND_SERVICE_CHANNEL_PRESENCE",
"INBOUND_SERVICE_WARMUP"]
"¸
instanceClass" ¢Instance class that is used to run this version. Valid values are AutomaticScaling: F1, F2, F4, F4_1G BasicScaling or
ManualScaling: B1, B2, B4, B4_1G, B8 Defaults to F1 for AutomaticScaling and B2 for ManualScaling and BasicScaling. If
no scaling is specified, AutomaticScaling is chosen.
"Ý
	librariesqBo*m:k
i
	appengineStandardAppVersionLibraryAgcp:appengine/StandardAppVersionLibrary:StandardAppVersionLibrary]Configuration for third-party Python runtime libraries that are required by the application.
"¥
manualScalingB:}
{
	appengineStandardAppVersionManualScalingMgcp:appengine/StandardAppVersionManualScaling:StandardAppVersionManualScalingA service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of
its memory over time.
"I
name" =Full path to the Version resource in the API. Example, "v1".
"V
noopOnDestroyB
 ?If set to 'true', the application version will not be deleted.
"
project" "2
runtime" #Desired runtime. Example python27.
"¨
runtimeApiVersionB" The version of the API in the given runtime environment. Please see the app.yaml reference for valid values at
'https://cloud.google.com/appengine/docs/standard/<language>/config/appref'\ Substitute '<language>' with 'python',
'java', 'php', 'ruby', 'go' or 'nodejs'.
"*
service" AppEngine service resource
"Ù
serviceAccount" ÂThe identity that the deployed version will run as. Admin API will use the App Engine Appspot service account as default
if this field is neither provided in app.yaml file nor through CLI flag.
"Y

threadsafeB
 EWhether multiple requests can be dispatched to this version at once.
"ç
	versionIdB" ÓRelative name of the version within the service. For example, 'v1'. Version names can contain only lowercase letters,
numbers, or hyphens. Reserved names,"default", "latest", and any name with the prefix "ah-".
"Ø
vpcAccessConnectorB:

	appengine$StandardAppVersionVpcAccessConnectorWgcp:appengine/StandardAppVersionVpcAccessConnector:StandardAppVersionVpcAccessConnector,Enables VPC connectivity for standard apps.
*þy
9
apphubApplication"gcp:apphub/application:ApplicationëlApplication is a functional grouping of Services and Workloads that helps achieve a desired end-to-end business functionality. Services and Workloads are owned by the Application.



## Example Usage

### Apphub Application Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.apphub.Application("example", {
    location: "us-east1",
    applicationId: "example-application",
    scope: {
        type: "REGIONAL",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.apphub.Application("example",
    location="us-east1",
    application_id="example-application",
    scope={
        "type": "REGIONAL",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.Apphub.Application("example", new()
    {
        Location = "us-east1",
        ApplicationId = "example-application",
        Scope = new Gcp.Apphub.Inputs.ApplicationScopeArgs
        {
            Type = "REGIONAL",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apphub.NewApplication(ctx, "example", &apphub.ApplicationArgs{
			Location:      pulumi.String("us-east1"),
			ApplicationId: pulumi.String("example-application"),
			Scope: &apphub.ApplicationScopeArgs{
				Type: pulumi.String("REGIONAL"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apphub.Application;
import com.pulumi.gcp.apphub.ApplicationArgs;
import com.pulumi.gcp.apphub.inputs.ApplicationScopeArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new Application("example", ApplicationArgs.builder()
            .location("us-east1")
            .applicationId("example-application")
            .scope(ApplicationScopeArgs.builder()
                .type("REGIONAL")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:apphub:Application
    properties:
      location: us-east1
      applicationId: example-application
      scope:
        type: REGIONAL
```
<!--End PulumiCodeChooser -->
### Apphub Application Global Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.apphub.Application("example", {
    location: "global",
    applicationId: "example-application",
    scope: {
        type: "GLOBAL",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.apphub.Application("example",
    location="global",
    application_id="example-application",
    scope={
        "type": "GLOBAL",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.Apphub.Application("example", new()
    {
        Location = "global",
        ApplicationId = "example-application",
        Scope = new Gcp.Apphub.Inputs.ApplicationScopeArgs
        {
            Type = "GLOBAL",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apphub.NewApplication(ctx, "example", &apphub.ApplicationArgs{
			Location:      pulumi.String("global"),
			ApplicationId: pulumi.String("example-application"),
			Scope: &apphub.ApplicationScopeArgs{
				Type: pulumi.String("GLOBAL"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apphub.Application;
import com.pulumi.gcp.apphub.ApplicationArgs;
import com.pulumi.gcp.apphub.inputs.ApplicationScopeArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new Application("example", ApplicationArgs.builder()
            .location("global")
            .applicationId("example-application")
            .scope(ApplicationScopeArgs.builder()
                .type("GLOBAL")
                .build())
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:apphub:Application
    properties:
      location: global
      applicationId: example-application
      scope:
        type: GLOBAL
```
<!--End PulumiCodeChooser -->
### Apphub Application Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example2 = new gcp.apphub.Application("example2", {
    location: "us-east1",
    applicationId: "example-application",
    displayName: "Application Full",
    scope: {
        type: "REGIONAL",
    },
    description: "Application for testing",
    attributes: {
        environment: {
            type: "STAGING",
        },
        criticality: {
            type: "MISSION_CRITICAL",
        },
        businessOwners: [{
            displayName: "Alice",
            email: "alice@google.com",
        }],
        developerOwners: [{
            displayName: "Bob",
            email: "bob@google.com",
        }],
        operatorOwners: [{
            displayName: "Charlie",
            email: "charlie@google.com",
        }],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example2 = gcp.apphub.Application("example2",
    location="us-east1",
    application_id="example-application",
    display_name="Application Full",
    scope={
        "type": "REGIONAL",
    },
    description="Application for testing",
    attributes={
        "environment": {
            "type": "STAGING",
        },
        "criticality": {
            "type": "MISSION_CRITICAL",
        },
        "business_owners": [{
            "display_name": "Alice",
            "email": "alice@google.com",
        }],
        "developer_owners": [{
            "display_name": "Bob",
            "email": "bob@google.com",
        }],
        "operator_owners": [{
            "display_name": "Charlie",
            "email": "charlie@google.com",
        }],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example2 = new Gcp.Apphub.Application("example2", new()
    {
        Location = "us-east1",
        ApplicationId = "example-application",
        DisplayName = "Application Full",
        Scope = new Gcp.Apphub.Inputs.ApplicationScopeArgs
        {
            Type = "REGIONAL",
        },
        Description = "Application for testing",
        Attributes = new Gcp.Apphub.Inputs.ApplicationAttributesArgs
        {
            Environment = new Gcp.Apphub.Inputs.ApplicationAttributesEnvironmentArgs
            {
                Type = "STAGING",
            },
            Criticality = new Gcp.Apphub.Inputs.ApplicationAttributesCriticalityArgs
            {
                Type = "MISSION_CRITICAL",
            },
            BusinessOwners = new[]
            {
                new Gcp.Apphub.Inputs.ApplicationAttributesBusinessOwnerArgs
                {
                    DisplayName = "Alice",
                    Email = "alice@google.com",
                },
            },
            DeveloperOwners = new[]
            {
                new Gcp.Apphub.Inputs.ApplicationAttributesDeveloperOwnerArgs
                {
                    DisplayName = "Bob",
                    Email = "bob@google.com",
                },
            },
            OperatorOwners = new[]
            {
                new Gcp.Apphub.Inputs.ApplicationAttributesOperatorOwnerArgs
                {
                    DisplayName = "Charlie",
                    Email = "charlie@google.com",
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apphub.NewApplication(ctx, "example2", &apphub.ApplicationArgs{
			Location:      pulumi.String("us-east1"),
			ApplicationId: pulumi.String("example-application"),
			DisplayName:   pulumi.String("Application Full"),
			Scope: &apphub.ApplicationScopeArgs{
				Type: pulumi.String("REGIONAL"),
			},
			Description: pulumi.String("Application for testing"),
			Attributes: &apphub.ApplicationAttributesArgs{
				Environment: &apphub.ApplicationAttributesEnvironmentArgs{
					Type: pulumi.String("STAGING"),
				},
				Criticality: &apphub.ApplicationAttributesCriticalityArgs{
					Type: pulumi.String("MISSION_CRITICAL"),
				},
				BusinessOwners: apphub.ApplicationAttributesBusinessOwnerArray{
					&apphub.ApplicationAttributesBusinessOwnerArgs{
						DisplayName: pulumi.String("Alice"),
						Email:       pulumi.String("alice@google.com"),
					},
				},
				DeveloperOwners: apphub.ApplicationAttributesDeveloperOwnerArray{
					&apphub.ApplicationAttributesDeveloperOwnerArgs{
						DisplayName: pulumi.String("Bob"),
						Email:       pulumi.String("bob@google.com"),
					},
				},
				OperatorOwners: apphub.ApplicationAttributesOperatorOwnerArray{
					&apphub.ApplicationAttributesOperatorOwnerArgs{
						DisplayName: pulumi.String("Charlie"),
						Email:       pulumi.String("charlie@google.com"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apphub.Application;
import com.pulumi.gcp.apphub.ApplicationArgs;
import com.pulumi.gcp.apphub.inputs.ApplicationScopeArgs;
import com.pulumi.gcp.apphub.inputs.ApplicationAttributesArgs;
import com.pulumi.gcp.apphub.inputs.ApplicationAttributesEnvironmentArgs;
import com.pulumi.gcp.apphub.inputs.ApplicationAttributesCriticalityArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example2 = new Application("example2", ApplicationArgs.builder()
            .location("us-east1")
            .applicationId("example-application")
            .displayName("Application Full")
            .scope(ApplicationScopeArgs.builder()
                .type("REGIONAL")
                .build())
            .description("Application for testing")
            .attributes(ApplicationAttributesArgs.builder()
                .environment(ApplicationAttributesEnvironmentArgs.builder()
                    .type("STAGING")
                    .build())
                .criticality(ApplicationAttributesCriticalityArgs.builder()
                    .type("MISSION_CRITICAL")
                    .build())
                .businessOwners(ApplicationAttributesBusinessOwnerArgs.builder()
                    .displayName("Alice")
                    .email("alice@google.com")
                    .build())
                .developerOwners(ApplicationAttributesDeveloperOwnerArgs.builder()
                    .displayName("Bob")
                    .email("bob@google.com")
                    .build())
                .operatorOwners(ApplicationAttributesOperatorOwnerArgs.builder()
                    .displayName("Charlie")
                    .email("charlie@google.com")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example2:
    type: gcp:apphub:Application
    properties:
      location: us-east1
      applicationId: example-application
      displayName: Application Full
      scope:
        type: REGIONAL
      description: Application for testing
      attributes:
        environment:
          type: STAGING
        criticality:
          type: MISSION_CRITICAL
        businessOwners:
          - displayName: Alice
            email: alice@google.com
        developerOwners:
          - displayName: Bob
            email: bob@google.com
        operatorOwners:
          - displayName: Charlie
            email: charlie@google.com
```
<!--End PulumiCodeChooser -->

## Import

Application can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/applications/{{application_id}}`

* `{{project}}/{{location}}/{{application_id}}`

* `{{location}}/{{application_id}}`

When using the `pulumi import` command, Application can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apphub/application:Application default projects/{{project}}/locations/{{location}}/applications/{{application_id}}
```

```sh
$ pulumi import gcp:apphub/application:Application default {{project}}/{{location}}/{{application_id}}
```

```sh
$ pulumi import gcp:apphub/application:Application default {{location}}/{{application_id}}
```

;
applicationId" &Required. The Application identifier.


attributes]B[:Y
W
apphubApplicationAttributes6gcp:apphub/ApplicationAttributes:ApplicationAttributesConsumer provided attributes.
K
descriptionB" 6Optional. User-defined description of an Application.
F
displayNameB" 1Optional. User-defined name for the Application.
E
location" 5Part of `parent`. See documentation of `projectsId`.

projectB" 
scopeL:J
H
apphubApplicationScope,gcp:apphub/ApplicationScope:ApplicationScope8Scope of an application.
Structure is documented below.
";
applicationId" &Required. The Application identifier.
"

attributes]B[:Y
W
apphubApplicationAttributes6gcp:apphub/ApplicationAttributes:ApplicationAttributesConsumer provided attributes.
",

createTime" Output only. Create time.
"K
descriptionB" 6Optional. User-defined description of an Application.
"F
displayNameB" 1Optional. User-defined name for the Application.
"E
location" 5Part of `parent`. See documentation of `projectsId`.
"
name" Identifier. The resource name of an Application. Format:
"projects/{host-project-id}/locations/{location}/applications/{application-id}"
"
project" "
scopeL:J
H
apphubApplicationScope,gcp:apphub/ApplicationScope:ApplicationScope8Scope of an application.
Structure is documented below.
"i
state" \Output only. Application state.
Possible values:
STATE_UNSPECIFIED
CREATING
ACTIVE
DELETING
"a
uid" VOutput only. A universally unique identifier (in UUID4 format) for the `Application`.
",

updateTime" Output only. Update time.
*Ü¿
-
apphubServicegcp:apphub/service:ServiceªService is a network/api interface that exposes some functionality to clients for consumption over the network. Service typically has one or more Workloads behind it. It registers identified service to the Application.



## Example Usage

### Apphub Service Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as time from "@pulumi/time";

const application = new gcp.apphub.Application("application", {
    location: "us-central1",
    applicationId: "example-application-1",
    scope: {
        type: "REGIONAL",
    },
});
const serviceProject = new gcp.organizations.Project("service_project", {
    projectId: "project-1",
    name: "Service Project",
    orgId: "123456789",
    billingAccount: "000000-0000000-0000000-000000",
    deletionPolicy: "DELETE",
});
// Enable Compute API
const computeServiceProject = new gcp.projects.Service("compute_service_project", {
    project: serviceProject.projectId,
    service: "compute.googleapis.com",
});
const wait120s = new time.index.Sleep("wait_120s", {createDuration: "120s"}, {
    dependsOn: [computeServiceProject],
});
const serviceProjectAttachment = new gcp.apphub.ServiceProjectAttachment("service_project_attachment", {serviceProjectAttachmentId: serviceProject.projectId}, {
    dependsOn: [wait120s],
});
// VPC network
const ilbNetwork = new gcp.compute.Network("ilb_network", {
    name: "l7-ilb-network",
    project: serviceProject.projectId,
    autoCreateSubnetworks: false,
}, {
    dependsOn: [wait120s],
});
// backend subnet
const ilbSubnet = new gcp.compute.Subnetwork("ilb_subnet", {
    name: "l7-ilb-subnet",
    project: serviceProject.projectId,
    ipCidrRange: "10.0.1.0/24",
    region: "us-central1",
    network: ilbNetwork.id,
});
// health check
const _default = new gcp.compute.HealthCheck("default", {
    name: "l7-ilb-hc",
    project: serviceProject.projectId,
    checkIntervalSec: 1,
    timeoutSec: 1,
    tcpHealthCheck: {
        port: 80,
    },
}, {
    dependsOn: [wait120s],
});
// backend service
const backend = new gcp.compute.RegionBackendService("backend", {
    name: "l7-ilb-backend-subnet",
    project: serviceProject.projectId,
    region: "us-central1",
    healthChecks: _default.id,
});
// forwarding rule
const forwardingRule = new gcp.compute.ForwardingRule("forwarding_rule", {
    name: "l7-ilb-forwarding-rule",
    project: serviceProject.projectId,
    region: "us-central1",
    ipVersion: "IPV4",
    loadBalancingScheme: "INTERNAL",
    allPorts: true,
    backendService: backend.id,
    network: ilbNetwork.id,
    subnetwork: ilbSubnet.id,
});
// discovered service block
const catalog-service = gcp.apphub.getDiscoveredServiceOutput({
    location: "us-central1",
    serviceUri: pulumi.interpolate`//compute.googleapis.com/${forwardingRule.id}`,
});
const wait120sForResourceIngestion = new time.index.Sleep("wait_120s_for_resource_ingestion", {createDuration: "120s"}, {
    dependsOn: [forwardingRule],
});
const example = new gcp.apphub.Service("example", {
    location: "us-central1",
    applicationId: application.applicationId,
    serviceId: forwardingRule.name,
    discoveredService: catalog_service.apply(catalog_service => catalog_service.name),
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_time as time

application = gcp.apphub.Application("application",
    location="us-central1",
    application_id="example-application-1",
    scope={
        "type": "REGIONAL",
    })
service_project = gcp.organizations.Project("service_project",
    project_id="project-1",
    name="Service Project",
    org_id="123456789",
    billing_account="000000-0000000-0000000-000000",
    deletion_policy="DELETE")
# Enable Compute API
compute_service_project = gcp.projects.Service("compute_service_project",
    project=service_project.project_id,
    service="compute.googleapis.com")
wait120s = time.index.Sleep("wait_120s", create_duration=120s,
opts = pulumi.ResourceOptions(depends_on=[compute_service_project]))
service_project_attachment = gcp.apphub.ServiceProjectAttachment("service_project_attachment", service_project_attachment_id=service_project.project_id,
opts = pulumi.ResourceOptions(depends_on=[wait120s]))
# VPC network
ilb_network = gcp.compute.Network("ilb_network",
    name="l7-ilb-network",
    project=service_project.project_id,
    auto_create_subnetworks=False,
    opts = pulumi.ResourceOptions(depends_on=[wait120s]))
# backend subnet
ilb_subnet = gcp.compute.Subnetwork("ilb_subnet",
    name="l7-ilb-subnet",
    project=service_project.project_id,
    ip_cidr_range="10.0.1.0/24",
    region="us-central1",
    network=ilb_network.id)
# health check
default = gcp.compute.HealthCheck("default",
    name="l7-ilb-hc",
    project=service_project.project_id,
    check_interval_sec=1,
    timeout_sec=1,
    tcp_health_check={
        "port": 80,
    },
    opts = pulumi.ResourceOptions(depends_on=[wait120s]))
# backend service
backend = gcp.compute.RegionBackendService("backend",
    name="l7-ilb-backend-subnet",
    project=service_project.project_id,
    region="us-central1",
    health_checks=default.id)
# forwarding rule
forwarding_rule = gcp.compute.ForwardingRule("forwarding_rule",
    name="l7-ilb-forwarding-rule",
    project=service_project.project_id,
    region="us-central1",
    ip_version="IPV4",
    load_balancing_scheme="INTERNAL",
    all_ports=True,
    backend_service=backend.id,
    network=ilb_network.id,
    subnetwork=ilb_subnet.id)
# discovered service block
catalog_service = gcp.apphub.get_discovered_service_output(location="us-central1",
    service_uri=forwarding_rule.id.apply(lambda id: f"//compute.googleapis.com/{id}"))
wait120s_for_resource_ingestion = time.index.Sleep("wait_120s_for_resource_ingestion", create_duration=120s,
opts = pulumi.ResourceOptions(depends_on=[forwarding_rule]))
example = gcp.apphub.Service("example",
    location="us-central1",
    application_id=application.application_id,
    service_id=forwarding_rule.name,
    discovered_service=catalog_service.name)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Time = Pulumi.Time;

return await Deployment.RunAsync(() => 
{
    var application = new Gcp.Apphub.Application("application", new()
    {
        Location = "us-central1",
        ApplicationId = "example-application-1",
        Scope = new Gcp.Apphub.Inputs.ApplicationScopeArgs
        {
            Type = "REGIONAL",
        },
    });

    var serviceProject = new Gcp.Organizations.Project("service_project", new()
    {
        ProjectId = "project-1",
        Name = "Service Project",
        OrgId = "123456789",
        BillingAccount = "000000-0000000-0000000-000000",
        DeletionPolicy = "DELETE",
    });

    // Enable Compute API
    var computeServiceProject = new Gcp.Projects.Service("compute_service_project", new()
    {
        Project = serviceProject.ProjectId,
        ServiceName = "compute.googleapis.com",
    });

    var wait120s = new Time.Index.Sleep("wait_120s", new()
    {
        CreateDuration = "120s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            computeServiceProject,
        },
    });

    var serviceProjectAttachment = new Gcp.Apphub.ServiceProjectAttachment("service_project_attachment", new()
    {
        ServiceProjectAttachmentId = serviceProject.ProjectId,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            wait120s,
        },
    });

    // VPC network
    var ilbNetwork = new Gcp.Compute.Network("ilb_network", new()
    {
        Name = "l7-ilb-network",
        Project = serviceProject.ProjectId,
        AutoCreateSubnetworks = false,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            wait120s,
        },
    });

    // backend subnet
    var ilbSubnet = new Gcp.Compute.Subnetwork("ilb_subnet", new()
    {
        Name = "l7-ilb-subnet",
        Project = serviceProject.ProjectId,
        IpCidrRange = "10.0.1.0/24",
        Region = "us-central1",
        Network = ilbNetwork.Id,
    });

    // health check
    var @default = new Gcp.Compute.HealthCheck("default", new()
    {
        Name = "l7-ilb-hc",
        Project = serviceProject.ProjectId,
        CheckIntervalSec = 1,
        TimeoutSec = 1,
        TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
        {
            Port = 80,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            wait120s,
        },
    });

    // backend service
    var backend = new Gcp.Compute.RegionBackendService("backend", new()
    {
        Name = "l7-ilb-backend-subnet",
        Project = serviceProject.ProjectId,
        Region = "us-central1",
        HealthChecks = @default.Id,
    });

    // forwarding rule
    var forwardingRule = new Gcp.Compute.ForwardingRule("forwarding_rule", new()
    {
        Name = "l7-ilb-forwarding-rule",
        Project = serviceProject.ProjectId,
        Region = "us-central1",
        IpVersion = "IPV4",
        LoadBalancingScheme = "INTERNAL",
        AllPorts = true,
        BackendService = backend.Id,
        Network = ilbNetwork.Id,
        Subnetwork = ilbSubnet.Id,
    });

    // discovered service block
    var catalog_service = Gcp.Apphub.GetDiscoveredService.Invoke(new()
    {
        Location = "us-central1",
        ServiceUri = $"//compute.googleapis.com/{forwardingRule.Id}",
    });

    var wait120sForResourceIngestion = new Time.Index.Sleep("wait_120s_for_resource_ingestion", new()
    {
        CreateDuration = "120s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            forwardingRule,
        },
    });

    var example = new Gcp.Apphub.Service("example", new()
    {
        Location = "us-central1",
        ApplicationId = application.ApplicationId,
        ServiceId = forwardingRule.Name,
        DiscoveredService = catalog_service.Apply(catalog_service => catalog_service.Apply(getDiscoveredServiceResult => getDiscoveredServiceResult.Name)),
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-time/sdk/go/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		application, err := apphub.NewApplication(ctx, "application", &apphub.ApplicationArgs{
			Location:      pulumi.String("us-central1"),
			ApplicationId: pulumi.String("example-application-1"),
			Scope: &apphub.ApplicationScopeArgs{
				Type: pulumi.String("REGIONAL"),
			},
		})
		if err != nil {
			return err
		}
		serviceProject, err := organizations.NewProject(ctx, "service_project", &organizations.ProjectArgs{
			ProjectId:      pulumi.String("project-1"),
			Name:           pulumi.String("Service Project"),
			OrgId:          pulumi.String("123456789"),
			BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		// Enable Compute API
		computeServiceProject, err := projects.NewService(ctx, "compute_service_project", &projects.ServiceArgs{
			Project: serviceProject.ProjectId,
			Service: pulumi.String("compute.googleapis.com"),
		})
		if err != nil {
			return err
		}
		wait120s, err := time.NewSleep(ctx, "wait_120s", &time.SleepArgs{
			CreateDuration: "120s",
		}, pulumi.DependsOn([]pulumi.Resource{
			computeServiceProject,
		}))
		if err != nil {
			return err
		}
		_, err = apphub.NewServiceProjectAttachment(ctx, "service_project_attachment", &apphub.ServiceProjectAttachmentArgs{
			ServiceProjectAttachmentId: serviceProject.ProjectId,
		}, pulumi.DependsOn([]pulumi.Resource{
			wait120s,
		}))
		if err != nil {
			return err
		}
		// VPC network
		ilbNetwork, err := compute.NewNetwork(ctx, "ilb_network", &compute.NetworkArgs{
			Name:                  pulumi.String("l7-ilb-network"),
			Project:               serviceProject.ProjectId,
			AutoCreateSubnetworks: pulumi.Bool(false),
		}, pulumi.DependsOn([]pulumi.Resource{
			wait120s,
		}))
		if err != nil {
			return err
		}
		// backend subnet
		ilbSubnet, err := compute.NewSubnetwork(ctx, "ilb_subnet", &compute.SubnetworkArgs{
			Name:        pulumi.String("l7-ilb-subnet"),
			Project:     serviceProject.ProjectId,
			IpCidrRange: pulumi.String("10.0.1.0/24"),
			Region:      pulumi.String("us-central1"),
			Network:     ilbNetwork.ID(),
		})
		if err != nil {
			return err
		}
		// health check
		_, err = compute.NewHealthCheck(ctx, "default", &compute.HealthCheckArgs{
			Name:             pulumi.String("l7-ilb-hc"),
			Project:          serviceProject.ProjectId,
			CheckIntervalSec: pulumi.Int(1),
			TimeoutSec:       pulumi.Int(1),
			TcpHealthCheck: &compute.HealthCheckTcpHealthCheckArgs{
				Port: pulumi.Int(80),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			wait120s,
		}))
		if err != nil {
			return err
		}
		// backend service
		backend, err := compute.NewRegionBackendService(ctx, "backend", &compute.RegionBackendServiceArgs{
			Name:         pulumi.String("l7-ilb-backend-subnet"),
			Project:      serviceProject.ProjectId,
			Region:       pulumi.String("us-central1"),
			HealthChecks: _default.ID(),
		})
		if err != nil {
			return err
		}
		// forwarding rule
		forwardingRule, err := compute.NewForwardingRule(ctx, "forwarding_rule", &compute.ForwardingRuleArgs{
			Name:                pulumi.String("l7-ilb-forwarding-rule"),
			Project:             serviceProject.ProjectId,
			Region:              pulumi.String("us-central1"),
			IpVersion:           pulumi.String("IPV4"),
			LoadBalancingScheme: pulumi.String("INTERNAL"),
			AllPorts:            pulumi.Bool(true),
			BackendService:      backend.ID(),
			Network:             ilbNetwork.ID(),
			Subnetwork:          ilbSubnet.ID(),
		})
		if err != nil {
			return err
		}
		// discovered service block
		catalog_service := apphub.GetDiscoveredServiceOutput(ctx, apphub.GetDiscoveredServiceOutputArgs{
			Location: pulumi.String("us-central1"),
			ServiceUri: forwardingRule.ID().ApplyT(func(id string) (string, error) {
				return fmt.Sprintf("//compute.googleapis.com/%v", id), nil
			}).(pulumi.StringOutput),
		}, nil)
		_, err = time.NewSleep(ctx, "wait_120s_for_resource_ingestion", &time.SleepArgs{
			CreateDuration: "120s",
		}, pulumi.DependsOn([]pulumi.Resource{
			forwardingRule,
		}))
		if err != nil {
			return err
		}
		_, err = apphub.NewService(ctx, "example", &apphub.ServiceArgs{
			Location:      pulumi.String("us-central1"),
			ApplicationId: application.ApplicationId,
			ServiceId:     forwardingRule.Name,
			DiscoveredService: pulumi.String(catalog_service.ApplyT(func(catalog_service apphub.GetDiscoveredServiceResult) (*string, error) {
				return &catalog_service.Name, nil
			}).(pulumi.StringPtrOutput)),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apphub.Application;
import com.pulumi.gcp.apphub.ApplicationArgs;
import com.pulumi.gcp.apphub.inputs.ApplicationScopeArgs;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.projects.Service;
import com.pulumi.gcp.projects.ServiceArgs;
import com.pulumi.time.sleep;
import com.pulumi.time.SleepArgs;
import com.pulumi.gcp.apphub.ServiceProjectAttachment;
import com.pulumi.gcp.apphub.ServiceProjectAttachmentArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.compute.HealthCheck;
import com.pulumi.gcp.compute.HealthCheckArgs;
import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
import com.pulumi.gcp.compute.RegionBackendService;
import com.pulumi.gcp.compute.RegionBackendServiceArgs;
import com.pulumi.gcp.compute.ForwardingRule;
import com.pulumi.gcp.compute.ForwardingRuleArgs;
import com.pulumi.gcp.apphub.ApphubFunctions;
import com.pulumi.gcp.apphub.inputs.GetDiscoveredServiceArgs;
import com.pulumi.gcp.apphub.Service;
import com.pulumi.gcp.apphub.ServiceArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var application = new Application("application", ApplicationArgs.builder()
            .location("us-central1")
            .applicationId("example-application-1")
            .scope(ApplicationScopeArgs.builder()
                .type("REGIONAL")
                .build())
            .build());

        var serviceProject = new Project("serviceProject", ProjectArgs.builder()
            .projectId("project-1")
            .name("Service Project")
            .orgId("123456789")
            .billingAccount("000000-0000000-0000000-000000")
            .deletionPolicy("DELETE")
            .build());

        // Enable Compute API
        var computeServiceProject = new Service("computeServiceProject", ServiceArgs.builder()
            .project(serviceProject.projectId())
            .service("compute.googleapis.com")
            .build());

        var wait120s = new Sleep("wait120s", SleepArgs.builder()
            .createDuration("120s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(computeServiceProject)
                .build());

        var serviceProjectAttachment = new ServiceProjectAttachment("serviceProjectAttachment", ServiceProjectAttachmentArgs.builder()
            .serviceProjectAttachmentId(serviceProject.projectId())
            .build(), CustomResourceOptions.builder()
                .dependsOn(wait120s)
                .build());

        // VPC network
        var ilbNetwork = new Network("ilbNetwork", NetworkArgs.builder()
            .name("l7-ilb-network")
            .project(serviceProject.projectId())
            .autoCreateSubnetworks(false)
            .build(), CustomResourceOptions.builder()
                .dependsOn(wait120s)
                .build());

        // backend subnet
        var ilbSubnet = new Subnetwork("ilbSubnet", SubnetworkArgs.builder()
            .name("l7-ilb-subnet")
            .project(serviceProject.projectId())
            .ipCidrRange("10.0.1.0/24")
            .region("us-central1")
            .network(ilbNetwork.id())
            .build());

        // health check
        var default_ = new HealthCheck("default", HealthCheckArgs.builder()
            .name("l7-ilb-hc")
            .project(serviceProject.projectId())
            .checkIntervalSec(1)
            .timeoutSec(1)
            .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
                .port("80")
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(wait120s)
                .build());

        // backend service
        var backend = new RegionBackendService("backend", RegionBackendServiceArgs.builder()
            .name("l7-ilb-backend-subnet")
            .project(serviceProject.projectId())
            .region("us-central1")
            .healthChecks(default_.id())
            .build());

        // forwarding rule
        var forwardingRule = new ForwardingRule("forwardingRule", ForwardingRuleArgs.builder()
            .name("l7-ilb-forwarding-rule")
            .project(serviceProject.projectId())
            .region("us-central1")
            .ipVersion("IPV4")
            .loadBalancingScheme("INTERNAL")
            .allPorts(true)
            .backendService(backend.id())
            .network(ilbNetwork.id())
            .subnetwork(ilbSubnet.id())
            .build());

        // discovered service block
        final var catalog-service = ApphubFunctions.getDiscoveredService(GetDiscoveredServiceArgs.builder()
            .location("us-central1")
            .serviceUri(forwardingRule.id().applyValue(id -> String.format("//compute.googleapis.com/%s", id)))
            .build());

        var wait120sForResourceIngestion = new Sleep("wait120sForResourceIngestion", SleepArgs.builder()
            .createDuration("120s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(forwardingRule)
                .build());

        var example = new Service("example", ServiceArgs.builder()
            .location("us-central1")
            .applicationId(application.applicationId())
            .serviceId(forwardingRule.name())
            .discoveredService(catalog_service.applyValue(catalog_service -> catalog_service.name()))
            .build());

    }
}
```
```yaml
resources:
  application:
    type: gcp:apphub:Application
    properties:
      location: us-central1
      applicationId: example-application-1
      scope:
        type: REGIONAL
  serviceProject:
    type: gcp:organizations:Project
    name: service_project
    properties:
      projectId: project-1
      name: Service Project
      orgId: '123456789'
      billingAccount: 000000-0000000-0000000-000000
      deletionPolicy: DELETE
  # Enable Compute API
  computeServiceProject:
    type: gcp:projects:Service
    name: compute_service_project
    properties:
      project: ${serviceProject.projectId}
      service: compute.googleapis.com
  wait120s:
    type: time:sleep
    name: wait_120s
    properties:
      createDuration: 120s
    options:
      dependsOn:
        - ${computeServiceProject}
  serviceProjectAttachment:
    type: gcp:apphub:ServiceProjectAttachment
    name: service_project_attachment
    properties:
      serviceProjectAttachmentId: ${serviceProject.projectId}
    options:
      dependsOn:
        - ${wait120s}
  wait120sForResourceIngestion:
    type: time:sleep
    name: wait_120s_for_resource_ingestion
    properties:
      createDuration: 120s
    options:
      dependsOn:
        - ${forwardingRule}
  example:
    type: gcp:apphub:Service
    properties:
      location: us-central1
      applicationId: ${application.applicationId}
      serviceId: ${forwardingRule.name}
      discoveredService: ${["catalog-service"].name}
  # VPC network
  ilbNetwork:
    type: gcp:compute:Network
    name: ilb_network
    properties:
      name: l7-ilb-network
      project: ${serviceProject.projectId}
      autoCreateSubnetworks: false
    options:
      dependsOn:
        - ${wait120s}
  # backend subnet
  ilbSubnet:
    type: gcp:compute:Subnetwork
    name: ilb_subnet
    properties:
      name: l7-ilb-subnet
      project: ${serviceProject.projectId}
      ipCidrRange: 10.0.1.0/24
      region: us-central1
      network: ${ilbNetwork.id}
  # forwarding rule
  forwardingRule:
    type: gcp:compute:ForwardingRule
    name: forwarding_rule
    properties:
      name: l7-ilb-forwarding-rule
      project: ${serviceProject.projectId}
      region: us-central1
      ipVersion: IPV4
      loadBalancingScheme: INTERNAL
      allPorts: true
      backendService: ${backend.id}
      network: ${ilbNetwork.id}
      subnetwork: ${ilbSubnet.id}
  # backend service
  backend:
    type: gcp:compute:RegionBackendService
    properties:
      name: l7-ilb-backend-subnet
      project: ${serviceProject.projectId}
      region: us-central1
      healthChecks: ${default.id}
  # health check
  default:
    type: gcp:compute:HealthCheck
    properties:
      name: l7-ilb-hc
      project: ${serviceProject.projectId}
      checkIntervalSec: 1
      timeoutSec: 1
      tcpHealthCheck:
        port: '80'
    options:
      dependsOn:
        - ${wait120s}
variables:
  # discovered service block
  catalog-service:
    fn::invoke:
      function: gcp:apphub:getDiscoveredService
      arguments:
        location: us-central1
        serviceUri: //compute.googleapis.com/${forwardingRule.id}
```
<!--End PulumiCodeChooser -->
### Apphub Service Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as time from "@pulumi/time";

const application = new gcp.apphub.Application("application", {
    location: "us-central1",
    applicationId: "example-application-1",
    scope: {
        type: "REGIONAL",
    },
});
const serviceProject = new gcp.organizations.Project("service_project", {
    projectId: "project-1",
    name: "Service Project",
    orgId: "123456789",
    billingAccount: "000000-0000000-0000000-000000",
    deletionPolicy: "DELETE",
});
// Enable Compute API
const computeServiceProject = new gcp.projects.Service("compute_service_project", {
    project: serviceProject.projectId,
    service: "compute.googleapis.com",
});
const wait120s = new time.index.Sleep("wait_120s", {createDuration: "120s"}, {
    dependsOn: [computeServiceProject],
});
const serviceProjectAttachment = new gcp.apphub.ServiceProjectAttachment("service_project_attachment", {serviceProjectAttachmentId: serviceProject.projectId}, {
    dependsOn: [wait120s],
});
// VPC network
const ilbNetwork = new gcp.compute.Network("ilb_network", {
    name: "l7-ilb-network",
    project: serviceProject.projectId,
    autoCreateSubnetworks: false,
}, {
    dependsOn: [wait120s],
});
// backend subnet
const ilbSubnet = new gcp.compute.Subnetwork("ilb_subnet", {
    name: "l7-ilb-subnet",
    project: serviceProject.projectId,
    ipCidrRange: "10.0.1.0/24",
    region: "us-central1",
    network: ilbNetwork.id,
});
// health check
const _default = new gcp.compute.HealthCheck("default", {
    name: "l7-ilb-hc",
    project: serviceProject.projectId,
    checkIntervalSec: 1,
    timeoutSec: 1,
    tcpHealthCheck: {
        port: 80,
    },
}, {
    dependsOn: [wait120s],
});
// backend service
const backend = new gcp.compute.RegionBackendService("backend", {
    name: "l7-ilb-backend-subnet",
    project: serviceProject.projectId,
    region: "us-central1",
    healthChecks: _default.id,
});
// forwarding rule
const forwardingRule = new gcp.compute.ForwardingRule("forwarding_rule", {
    name: "l7-ilb-forwarding-rule",
    project: serviceProject.projectId,
    region: "us-central1",
    ipVersion: "IPV4",
    loadBalancingScheme: "INTERNAL",
    allPorts: true,
    backendService: backend.id,
    network: ilbNetwork.id,
    subnetwork: ilbSubnet.id,
});
// discovered service block
const catalog-service = gcp.apphub.getDiscoveredServiceOutput({
    location: "us-central1",
    serviceUri: pulumi.interpolate`//compute.googleapis.com/${forwardingRule.id}`,
});
const wait120sForResourceIngestion = new time.index.Sleep("wait_120s_for_resource_ingestion", {createDuration: "120s"}, {
    dependsOn: [forwardingRule],
});
const example = new gcp.apphub.Service("example", {
    location: "us-central1",
    applicationId: application.applicationId,
    serviceId: forwardingRule.name,
    discoveredService: catalog_service.apply(catalog_service => catalog_service.name),
    displayName: "Example Service Full",
    description: "Register service for testing",
    attributes: {
        environment: {
            type: "STAGING",
        },
        criticality: {
            type: "MISSION_CRITICAL",
        },
        businessOwners: [{
            displayName: "Alice",
            email: "alice@google.com",
        }],
        developerOwners: [{
            displayName: "Bob",
            email: "bob@google.com",
        }],
        operatorOwners: [{
            displayName: "Charlie",
            email: "charlie@google.com",
        }],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_time as time

application = gcp.apphub.Application("application",
    location="us-central1",
    application_id="example-application-1",
    scope={
        "type": "REGIONAL",
    })
service_project = gcp.organizations.Project("service_project",
    project_id="project-1",
    name="Service Project",
    org_id="123456789",
    billing_account="000000-0000000-0000000-000000",
    deletion_policy="DELETE")
# Enable Compute API
compute_service_project = gcp.projects.Service("compute_service_project",
    project=service_project.project_id,
    service="compute.googleapis.com")
wait120s = time.index.Sleep("wait_120s", create_duration=120s,
opts = pulumi.ResourceOptions(depends_on=[compute_service_project]))
service_project_attachment = gcp.apphub.ServiceProjectAttachment("service_project_attachment", service_project_attachment_id=service_project.project_id,
opts = pulumi.ResourceOptions(depends_on=[wait120s]))
# VPC network
ilb_network = gcp.compute.Network("ilb_network",
    name="l7-ilb-network",
    project=service_project.project_id,
    auto_create_subnetworks=False,
    opts = pulumi.ResourceOptions(depends_on=[wait120s]))
# backend subnet
ilb_subnet = gcp.compute.Subnetwork("ilb_subnet",
    name="l7-ilb-subnet",
    project=service_project.project_id,
    ip_cidr_range="10.0.1.0/24",
    region="us-central1",
    network=ilb_network.id)
# health check
default = gcp.compute.HealthCheck("default",
    name="l7-ilb-hc",
    project=service_project.project_id,
    check_interval_sec=1,
    timeout_sec=1,
    tcp_health_check={
        "port": 80,
    },
    opts = pulumi.ResourceOptions(depends_on=[wait120s]))
# backend service
backend = gcp.compute.RegionBackendService("backend",
    name="l7-ilb-backend-subnet",
    project=service_project.project_id,
    region="us-central1",
    health_checks=default.id)
# forwarding rule
forwarding_rule = gcp.compute.ForwardingRule("forwarding_rule",
    name="l7-ilb-forwarding-rule",
    project=service_project.project_id,
    region="us-central1",
    ip_version="IPV4",
    load_balancing_scheme="INTERNAL",
    all_ports=True,
    backend_service=backend.id,
    network=ilb_network.id,
    subnetwork=ilb_subnet.id)
# discovered service block
catalog_service = gcp.apphub.get_discovered_service_output(location="us-central1",
    service_uri=forwarding_rule.id.apply(lambda id: f"//compute.googleapis.com/{id}"))
wait120s_for_resource_ingestion = time.index.Sleep("wait_120s_for_resource_ingestion", create_duration=120s,
opts = pulumi.ResourceOptions(depends_on=[forwarding_rule]))
example = gcp.apphub.Service("example",
    location="us-central1",
    application_id=application.application_id,
    service_id=forwarding_rule.name,
    discovered_service=catalog_service.name,
    display_name="Example Service Full",
    description="Register service for testing",
    attributes={
        "environment": {
            "type": "STAGING",
        },
        "criticality": {
            "type": "MISSION_CRITICAL",
        },
        "business_owners": [{
            "display_name": "Alice",
            "email": "alice@google.com",
        }],
        "developer_owners": [{
            "display_name": "Bob",
            "email": "bob@google.com",
        }],
        "operator_owners": [{
            "display_name": "Charlie",
            "email": "charlie@google.com",
        }],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Time = Pulumi.Time;

return await Deployment.RunAsync(() => 
{
    var application = new Gcp.Apphub.Application("application", new()
    {
        Location = "us-central1",
        ApplicationId = "example-application-1",
        Scope = new Gcp.Apphub.Inputs.ApplicationScopeArgs
        {
            Type = "REGIONAL",
        },
    });

    var serviceProject = new Gcp.Organizations.Project("service_project", new()
    {
        ProjectId = "project-1",
        Name = "Service Project",
        OrgId = "123456789",
        BillingAccount = "000000-0000000-0000000-000000",
        DeletionPolicy = "DELETE",
    });

    // Enable Compute API
    var computeServiceProject = new Gcp.Projects.Service("compute_service_project", new()
    {
        Project = serviceProject.ProjectId,
        ServiceName = "compute.googleapis.com",
    });

    var wait120s = new Time.Index.Sleep("wait_120s", new()
    {
        CreateDuration = "120s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            computeServiceProject,
        },
    });

    var serviceProjectAttachment = new Gcp.Apphub.ServiceProjectAttachment("service_project_attachment", new()
    {
        ServiceProjectAttachmentId = serviceProject.ProjectId,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            wait120s,
        },
    });

    // VPC network
    var ilbNetwork = new Gcp.Compute.Network("ilb_network", new()
    {
        Name = "l7-ilb-network",
        Project = serviceProject.ProjectId,
        AutoCreateSubnetworks = false,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            wait120s,
        },
    });

    // backend subnet
    var ilbSubnet = new Gcp.Compute.Subnetwork("ilb_subnet", new()
    {
        Name = "l7-ilb-subnet",
        Project = serviceProject.ProjectId,
        IpCidrRange = "10.0.1.0/24",
        Region = "us-central1",
        Network = ilbNetwork.Id,
    });

    // health check
    var @default = new Gcp.Compute.HealthCheck("default", new()
    {
        Name = "l7-ilb-hc",
        Project = serviceProject.ProjectId,
        CheckIntervalSec = 1,
        TimeoutSec = 1,
        TcpHealthCheck = new Gcp.Compute.Inputs.HealthCheckTcpHealthCheckArgs
        {
            Port = 80,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            wait120s,
        },
    });

    // backend service
    var backend = new Gcp.Compute.RegionBackendService("backend", new()
    {
        Name = "l7-ilb-backend-subnet",
        Project = serviceProject.ProjectId,
        Region = "us-central1",
        HealthChecks = @default.Id,
    });

    // forwarding rule
    var forwardingRule = new Gcp.Compute.ForwardingRule("forwarding_rule", new()
    {
        Name = "l7-ilb-forwarding-rule",
        Project = serviceProject.ProjectId,
        Region = "us-central1",
        IpVersion = "IPV4",
        LoadBalancingScheme = "INTERNAL",
        AllPorts = true,
        BackendService = backend.Id,
        Network = ilbNetwork.Id,
        Subnetwork = ilbSubnet.Id,
    });

    // discovered service block
    var catalog_service = Gcp.Apphub.GetDiscoveredService.Invoke(new()
    {
        Location = "us-central1",
        ServiceUri = $"//compute.googleapis.com/{forwardingRule.Id}",
    });

    var wait120sForResourceIngestion = new Time.Index.Sleep("wait_120s_for_resource_ingestion", new()
    {
        CreateDuration = "120s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            forwardingRule,
        },
    });

    var example = new Gcp.Apphub.Service("example", new()
    {
        Location = "us-central1",
        ApplicationId = application.ApplicationId,
        ServiceId = forwardingRule.Name,
        DiscoveredService = catalog_service.Apply(catalog_service => catalog_service.Apply(getDiscoveredServiceResult => getDiscoveredServiceResult.Name)),
        DisplayName = "Example Service Full",
        Description = "Register service for testing",
        Attributes = new Gcp.Apphub.Inputs.ServiceAttributesArgs
        {
            Environment = new Gcp.Apphub.Inputs.ServiceAttributesEnvironmentArgs
            {
                Type = "STAGING",
            },
            Criticality = new Gcp.Apphub.Inputs.ServiceAttributesCriticalityArgs
            {
                Type = "MISSION_CRITICAL",
            },
            BusinessOwners = new[]
            {
                new Gcp.Apphub.Inputs.ServiceAttributesBusinessOwnerArgs
                {
                    DisplayName = "Alice",
                    Email = "alice@google.com",
                },
            },
            DeveloperOwners = new[]
            {
                new Gcp.Apphub.Inputs.ServiceAttributesDeveloperOwnerArgs
                {
                    DisplayName = "Bob",
                    Email = "bob@google.com",
                },
            },
            OperatorOwners = new[]
            {
                new Gcp.Apphub.Inputs.ServiceAttributesOperatorOwnerArgs
                {
                    DisplayName = "Charlie",
                    Email = "charlie@google.com",
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-time/sdk/go/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		application, err := apphub.NewApplication(ctx, "application", &apphub.ApplicationArgs{
			Location:      pulumi.String("us-central1"),
			ApplicationId: pulumi.String("example-application-1"),
			Scope: &apphub.ApplicationScopeArgs{
				Type: pulumi.String("REGIONAL"),
			},
		})
		if err != nil {
			return err
		}
		serviceProject, err := organizations.NewProject(ctx, "service_project", &organizations.ProjectArgs{
			ProjectId:      pulumi.String("project-1"),
			Name:           pulumi.String("Service Project"),
			OrgId:          pulumi.String("123456789"),
			BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		// Enable Compute API
		computeServiceProject, err := projects.NewService(ctx, "compute_service_project", &projects.ServiceArgs{
			Project: serviceProject.ProjectId,
			Service: pulumi.String("compute.googleapis.com"),
		})
		if err != nil {
			return err
		}
		wait120s, err := time.NewSleep(ctx, "wait_120s", &time.SleepArgs{
			CreateDuration: "120s",
		}, pulumi.DependsOn([]pulumi.Resource{
			computeServiceProject,
		}))
		if err != nil {
			return err
		}
		_, err = apphub.NewServiceProjectAttachment(ctx, "service_project_attachment", &apphub.ServiceProjectAttachmentArgs{
			ServiceProjectAttachmentId: serviceProject.ProjectId,
		}, pulumi.DependsOn([]pulumi.Resource{
			wait120s,
		}))
		if err != nil {
			return err
		}
		// VPC network
		ilbNetwork, err := compute.NewNetwork(ctx, "ilb_network", &compute.NetworkArgs{
			Name:                  pulumi.String("l7-ilb-network"),
			Project:               serviceProject.ProjectId,
			AutoCreateSubnetworks: pulumi.Bool(false),
		}, pulumi.DependsOn([]pulumi.Resource{
			wait120s,
		}))
		if err != nil {
			return err
		}
		// backend subnet
		ilbSubnet, err := compute.NewSubnetwork(ctx, "ilb_subnet", &compute.SubnetworkArgs{
			Name:        pulumi.String("l7-ilb-subnet"),
			Project:     serviceProject.ProjectId,
			IpCidrRange: pulumi.String("10.0.1.0/24"),
			Region:      pulumi.String("us-central1"),
			Network:     ilbNetwork.ID(),
		})
		if err != nil {
			return err
		}
		// health check
		_, err = compute.NewHealthCheck(ctx, "default", &compute.HealthCheckArgs{
			Name:             pulumi.String("l7-ilb-hc"),
			Project:          serviceProject.ProjectId,
			CheckIntervalSec: pulumi.Int(1),
			TimeoutSec:       pulumi.Int(1),
			TcpHealthCheck: &compute.HealthCheckTcpHealthCheckArgs{
				Port: pulumi.Int(80),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			wait120s,
		}))
		if err != nil {
			return err
		}
		// backend service
		backend, err := compute.NewRegionBackendService(ctx, "backend", &compute.RegionBackendServiceArgs{
			Name:         pulumi.String("l7-ilb-backend-subnet"),
			Project:      serviceProject.ProjectId,
			Region:       pulumi.String("us-central1"),
			HealthChecks: _default.ID(),
		})
		if err != nil {
			return err
		}
		// forwarding rule
		forwardingRule, err := compute.NewForwardingRule(ctx, "forwarding_rule", &compute.ForwardingRuleArgs{
			Name:                pulumi.String("l7-ilb-forwarding-rule"),
			Project:             serviceProject.ProjectId,
			Region:              pulumi.String("us-central1"),
			IpVersion:           pulumi.String("IPV4"),
			LoadBalancingScheme: pulumi.String("INTERNAL"),
			AllPorts:            pulumi.Bool(true),
			BackendService:      backend.ID(),
			Network:             ilbNetwork.ID(),
			Subnetwork:          ilbSubnet.ID(),
		})
		if err != nil {
			return err
		}
		// discovered service block
		catalog_service := apphub.GetDiscoveredServiceOutput(ctx, apphub.GetDiscoveredServiceOutputArgs{
			Location: pulumi.String("us-central1"),
			ServiceUri: forwardingRule.ID().ApplyT(func(id string) (string, error) {
				return fmt.Sprintf("//compute.googleapis.com/%v", id), nil
			}).(pulumi.StringOutput),
		}, nil)
		_, err = time.NewSleep(ctx, "wait_120s_for_resource_ingestion", &time.SleepArgs{
			CreateDuration: "120s",
		}, pulumi.DependsOn([]pulumi.Resource{
			forwardingRule,
		}))
		if err != nil {
			return err
		}
		_, err = apphub.NewService(ctx, "example", &apphub.ServiceArgs{
			Location:      pulumi.String("us-central1"),
			ApplicationId: application.ApplicationId,
			ServiceId:     forwardingRule.Name,
			DiscoveredService: pulumi.String(catalog_service.ApplyT(func(catalog_service apphub.GetDiscoveredServiceResult) (*string, error) {
				return &catalog_service.Name, nil
			}).(pulumi.StringPtrOutput)),
			DisplayName: pulumi.String("Example Service Full"),
			Description: pulumi.String("Register service for testing"),
			Attributes: &apphub.ServiceAttributesArgs{
				Environment: &apphub.ServiceAttributesEnvironmentArgs{
					Type: pulumi.String("STAGING"),
				},
				Criticality: &apphub.ServiceAttributesCriticalityArgs{
					Type: pulumi.String("MISSION_CRITICAL"),
				},
				BusinessOwners: apphub.ServiceAttributesBusinessOwnerArray{
					&apphub.ServiceAttributesBusinessOwnerArgs{
						DisplayName: pulumi.String("Alice"),
						Email:       pulumi.String("alice@google.com"),
					},
				},
				DeveloperOwners: apphub.ServiceAttributesDeveloperOwnerArray{
					&apphub.ServiceAttributesDeveloperOwnerArgs{
						DisplayName: pulumi.String("Bob"),
						Email:       pulumi.String("bob@google.com"),
					},
				},
				OperatorOwners: apphub.ServiceAttributesOperatorOwnerArray{
					&apphub.ServiceAttributesOperatorOwnerArgs{
						DisplayName: pulumi.String("Charlie"),
						Email:       pulumi.String("charlie@google.com"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apphub.Application;
import com.pulumi.gcp.apphub.ApplicationArgs;
import com.pulumi.gcp.apphub.inputs.ApplicationScopeArgs;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.projects.Service;
import com.pulumi.gcp.projects.ServiceArgs;
import com.pulumi.time.sleep;
import com.pulumi.time.SleepArgs;
import com.pulumi.gcp.apphub.ServiceProjectAttachment;
import com.pulumi.gcp.apphub.ServiceProjectAttachmentArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.compute.HealthCheck;
import com.pulumi.gcp.compute.HealthCheckArgs;
import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
import com.pulumi.gcp.compute.RegionBackendService;
import com.pulumi.gcp.compute.RegionBackendServiceArgs;
import com.pulumi.gcp.compute.ForwardingRule;
import com.pulumi.gcp.compute.ForwardingRuleArgs;
import com.pulumi.gcp.apphub.ApphubFunctions;
import com.pulumi.gcp.apphub.inputs.GetDiscoveredServiceArgs;
import com.pulumi.gcp.apphub.Service;
import com.pulumi.gcp.apphub.ServiceArgs;
import com.pulumi.gcp.apphub.inputs.ServiceAttributesArgs;
import com.pulumi.gcp.apphub.inputs.ServiceAttributesEnvironmentArgs;
import com.pulumi.gcp.apphub.inputs.ServiceAttributesCriticalityArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var application = new Application("application", ApplicationArgs.builder()
            .location("us-central1")
            .applicationId("example-application-1")
            .scope(ApplicationScopeArgs.builder()
                .type("REGIONAL")
                .build())
            .build());

        var serviceProject = new Project("serviceProject", ProjectArgs.builder()
            .projectId("project-1")
            .name("Service Project")
            .orgId("123456789")
            .billingAccount("000000-0000000-0000000-000000")
            .deletionPolicy("DELETE")
            .build());

        // Enable Compute API
        var computeServiceProject = new Service("computeServiceProject", ServiceArgs.builder()
            .project(serviceProject.projectId())
            .service("compute.googleapis.com")
            .build());

        var wait120s = new Sleep("wait120s", SleepArgs.builder()
            .createDuration("120s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(computeServiceProject)
                .build());

        var serviceProjectAttachment = new ServiceProjectAttachment("serviceProjectAttachment", ServiceProjectAttachmentArgs.builder()
            .serviceProjectAttachmentId(serviceProject.projectId())
            .build(), CustomResourceOptions.builder()
                .dependsOn(wait120s)
                .build());

        // VPC network
        var ilbNetwork = new Network("ilbNetwork", NetworkArgs.builder()
            .name("l7-ilb-network")
            .project(serviceProject.projectId())
            .autoCreateSubnetworks(false)
            .build(), CustomResourceOptions.builder()
                .dependsOn(wait120s)
                .build());

        // backend subnet
        var ilbSubnet = new Subnetwork("ilbSubnet", SubnetworkArgs.builder()
            .name("l7-ilb-subnet")
            .project(serviceProject.projectId())
            .ipCidrRange("10.0.1.0/24")
            .region("us-central1")
            .network(ilbNetwork.id())
            .build());

        // health check
        var default_ = new HealthCheck("default", HealthCheckArgs.builder()
            .name("l7-ilb-hc")
            .project(serviceProject.projectId())
            .checkIntervalSec(1)
            .timeoutSec(1)
            .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
                .port("80")
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(wait120s)
                .build());

        // backend service
        var backend = new RegionBackendService("backend", RegionBackendServiceArgs.builder()
            .name("l7-ilb-backend-subnet")
            .project(serviceProject.projectId())
            .region("us-central1")
            .healthChecks(default_.id())
            .build());

        // forwarding rule
        var forwardingRule = new ForwardingRule("forwardingRule", ForwardingRuleArgs.builder()
            .name("l7-ilb-forwarding-rule")
            .project(serviceProject.projectId())
            .region("us-central1")
            .ipVersion("IPV4")
            .loadBalancingScheme("INTERNAL")
            .allPorts(true)
            .backendService(backend.id())
            .network(ilbNetwork.id())
            .subnetwork(ilbSubnet.id())
            .build());

        // discovered service block
        final var catalog-service = ApphubFunctions.getDiscoveredService(GetDiscoveredServiceArgs.builder()
            .location("us-central1")
            .serviceUri(forwardingRule.id().applyValue(id -> String.format("//compute.googleapis.com/%s", id)))
            .build());

        var wait120sForResourceIngestion = new Sleep("wait120sForResourceIngestion", SleepArgs.builder()
            .createDuration("120s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(forwardingRule)
                .build());

        var example = new Service("example", ServiceArgs.builder()
            .location("us-central1")
            .applicationId(application.applicationId())
            .serviceId(forwardingRule.name())
            .discoveredService(catalog_service.applyValue(catalog_service -> catalog_service.name()))
            .displayName("Example Service Full")
            .description("Register service for testing")
            .attributes(ServiceAttributesArgs.builder()
                .environment(ServiceAttributesEnvironmentArgs.builder()
                    .type("STAGING")
                    .build())
                .criticality(ServiceAttributesCriticalityArgs.builder()
                    .type("MISSION_CRITICAL")
                    .build())
                .businessOwners(ServiceAttributesBusinessOwnerArgs.builder()
                    .displayName("Alice")
                    .email("alice@google.com")
                    .build())
                .developerOwners(ServiceAttributesDeveloperOwnerArgs.builder()
                    .displayName("Bob")
                    .email("bob@google.com")
                    .build())
                .operatorOwners(ServiceAttributesOperatorOwnerArgs.builder()
                    .displayName("Charlie")
                    .email("charlie@google.com")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  application:
    type: gcp:apphub:Application
    properties:
      location: us-central1
      applicationId: example-application-1
      scope:
        type: REGIONAL
  serviceProject:
    type: gcp:organizations:Project
    name: service_project
    properties:
      projectId: project-1
      name: Service Project
      orgId: '123456789'
      billingAccount: 000000-0000000-0000000-000000
      deletionPolicy: DELETE
  # Enable Compute API
  computeServiceProject:
    type: gcp:projects:Service
    name: compute_service_project
    properties:
      project: ${serviceProject.projectId}
      service: compute.googleapis.com
  wait120s:
    type: time:sleep
    name: wait_120s
    properties:
      createDuration: 120s
    options:
      dependsOn:
        - ${computeServiceProject}
  serviceProjectAttachment:
    type: gcp:apphub:ServiceProjectAttachment
    name: service_project_attachment
    properties:
      serviceProjectAttachmentId: ${serviceProject.projectId}
    options:
      dependsOn:
        - ${wait120s}
  wait120sForResourceIngestion:
    type: time:sleep
    name: wait_120s_for_resource_ingestion
    properties:
      createDuration: 120s
    options:
      dependsOn:
        - ${forwardingRule}
  example:
    type: gcp:apphub:Service
    properties:
      location: us-central1
      applicationId: ${application.applicationId}
      serviceId: ${forwardingRule.name}
      discoveredService: ${["catalog-service"].name}
      displayName: Example Service Full
      description: Register service for testing
      attributes:
        environment:
          type: STAGING
        criticality:
          type: MISSION_CRITICAL
        businessOwners:
          - displayName: Alice
            email: alice@google.com
        developerOwners:
          - displayName: Bob
            email: bob@google.com
        operatorOwners:
          - displayName: Charlie
            email: charlie@google.com
  # VPC network
  ilbNetwork:
    type: gcp:compute:Network
    name: ilb_network
    properties:
      name: l7-ilb-network
      project: ${serviceProject.projectId}
      autoCreateSubnetworks: false
    options:
      dependsOn:
        - ${wait120s}
  # backend subnet
  ilbSubnet:
    type: gcp:compute:Subnetwork
    name: ilb_subnet
    properties:
      name: l7-ilb-subnet
      project: ${serviceProject.projectId}
      ipCidrRange: 10.0.1.0/24
      region: us-central1
      network: ${ilbNetwork.id}
  # forwarding rule
  forwardingRule:
    type: gcp:compute:ForwardingRule
    name: forwarding_rule
    properties:
      name: l7-ilb-forwarding-rule
      project: ${serviceProject.projectId}
      region: us-central1
      ipVersion: IPV4
      loadBalancingScheme: INTERNAL
      allPorts: true
      backendService: ${backend.id}
      network: ${ilbNetwork.id}
      subnetwork: ${ilbSubnet.id}
  # backend service
  backend:
    type: gcp:compute:RegionBackendService
    properties:
      name: l7-ilb-backend-subnet
      project: ${serviceProject.projectId}
      region: us-central1
      healthChecks: ${default.id}
  # health check
  default:
    type: gcp:compute:HealthCheck
    properties:
      name: l7-ilb-hc
      project: ${serviceProject.projectId}
      checkIntervalSec: 1
      timeoutSec: 1
      tcpHealthCheck:
        port: '80'
    options:
      dependsOn:
        - ${wait120s}
variables:
  # discovered service block
  catalog-service:
    fn::invoke:
      function: gcp:apphub:getDiscoveredService
      arguments:
        location: us-central1
        serviceUri: //compute.googleapis.com/${forwardingRule.id}
```
<!--End PulumiCodeChooser -->

## Import

Service can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/applications/{{application_id}}/services/{{service_id}}`

* `{{project}}/{{location}}/{{application_id}}/{{service_id}}`

* `{{location}}/{{application_id}}/{{service_id}}`

When using the `pulumi import` command, Service can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apphub/service:Service default projects/{{project}}/locations/{{location}}/applications/{{application_id}}/services/{{service_id}}
```

```sh
$ pulumi import gcp:apphub/service:Service default {{project}}/{{location}}/{{application_id}}/{{service_id}}
```

```sh
$ pulumi import gcp:apphub/service:Service default {{location}}/{{application_id}}/{{service_id}}
```

¬
applicationId" Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}


attributesQBO:M
K
apphubServiceAttributes.gcp:apphub/ServiceAttributes:ServiceAttributes=Consumer provided attributes.
Structure is documented below.
<
descriptionB" 'User-defined description of a Service.
Z
discoveredService" AImmutable. The resource name of the original discovered service.
8
displayNameB" #User-defined name for the Service.
§
location" Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
1
	serviceId"  The Service identifier.


- - -
"¬
applicationId" Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
"

attributesQBO:M
K
apphubServiceAttributes.gcp:apphub/ServiceAttributes:ServiceAttributes=Consumer provided attributes.
Structure is documented below.
",

createTime" Output only. Create time.
"<
descriptionB" 'User-defined description of a Service.
"Z
discoveredService" AImmutable. The resource name of the original discovered service.
"8
displayNameB" #User-defined name for the Service.
"§
location" Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
"§
name" Identifier. The resource name of a Service. Format:
"projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"1
	serviceId"  The Service identifier.


- - -
"Þ
serviceProperties`*^:\
Z
apphubServiceServiceProperty8gcp:apphub/ServiceServiceProperty:ServiceServicePropertygProperties of an underlying cloud resource that can comprise a Service.
Structure is documented below.
"å
serviceReferencesc*a:_
]
apphubServiceServiceReference:gcp:apphub/ServiceServiceReference:ServiceServiceReferencekReference to an underlying networking resource that can comprise a Service.
Structure is documented below.
"n
state" aOutput only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
"f
uid" [Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
format.
",

updateTime" Output only. Update time.
*»k
`
apphubServiceProjectAttachment<gcp:apphub/serviceProjectAttachment:ServiceProjectAttachment^Represents a Service project attachment to the Host Project.



## Example Usage

### Service Project Attachment Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as time from "@pulumi/time";

const serviceProject = new gcp.organizations.Project("service_project", {
    projectId: "project-1",
    name: "Service Project",
    orgId: "123456789",
    deletionPolicy: "DELETE",
});
const wait120s = new time.index.Sleep("wait_120s", {createDuration: "120s"}, {
    dependsOn: [serviceProject],
});
const example = new gcp.apphub.ServiceProjectAttachment("example", {serviceProjectAttachmentId: serviceProject.projectId}, {
    dependsOn: [wait120s],
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_time as time

service_project = gcp.organizations.Project("service_project",
    project_id="project-1",
    name="Service Project",
    org_id="123456789",
    deletion_policy="DELETE")
wait120s = time.index.Sleep("wait_120s", create_duration=120s,
opts = pulumi.ResourceOptions(depends_on=[service_project]))
example = gcp.apphub.ServiceProjectAttachment("example", service_project_attachment_id=service_project.project_id,
opts = pulumi.ResourceOptions(depends_on=[wait120s]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Time = Pulumi.Time;

return await Deployment.RunAsync(() => 
{
    var serviceProject = new Gcp.Organizations.Project("service_project", new()
    {
        ProjectId = "project-1",
        Name = "Service Project",
        OrgId = "123456789",
        DeletionPolicy = "DELETE",
    });

    var wait120s = new Time.Index.Sleep("wait_120s", new()
    {
        CreateDuration = "120s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            serviceProject,
        },
    });

    var example = new Gcp.Apphub.ServiceProjectAttachment("example", new()
    {
        ServiceProjectAttachmentId = serviceProject.ProjectId,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            wait120s,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-time/sdk/go/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		serviceProject, err := organizations.NewProject(ctx, "service_project", &organizations.ProjectArgs{
			ProjectId:      pulumi.String("project-1"),
			Name:           pulumi.String("Service Project"),
			OrgId:          pulumi.String("123456789"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		wait120s, err := time.NewSleep(ctx, "wait_120s", &time.SleepArgs{
			CreateDuration: "120s",
		}, pulumi.DependsOn([]pulumi.Resource{
			serviceProject,
		}))
		if err != nil {
			return err
		}
		_, err = apphub.NewServiceProjectAttachment(ctx, "example", &apphub.ServiceProjectAttachmentArgs{
			ServiceProjectAttachmentId: serviceProject.ProjectId,
		}, pulumi.DependsOn([]pulumi.Resource{
			wait120s,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.time.sleep;
import com.pulumi.time.SleepArgs;
import com.pulumi.gcp.apphub.ServiceProjectAttachment;
import com.pulumi.gcp.apphub.ServiceProjectAttachmentArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var serviceProject = new Project("serviceProject", ProjectArgs.builder()
            .projectId("project-1")
            .name("Service Project")
            .orgId("123456789")
            .deletionPolicy("DELETE")
            .build());

        var wait120s = new Sleep("wait120s", SleepArgs.builder()
            .createDuration("120s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(serviceProject)
                .build());

        var example = new ServiceProjectAttachment("example", ServiceProjectAttachmentArgs.builder()
            .serviceProjectAttachmentId(serviceProject.projectId())
            .build(), CustomResourceOptions.builder()
                .dependsOn(wait120s)
                .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:apphub:ServiceProjectAttachment
    properties:
      serviceProjectAttachmentId: ${serviceProject.projectId}
    options:
      dependsOn:
        - ${wait120s}
  serviceProject:
    type: gcp:organizations:Project
    name: service_project
    properties:
      projectId: project-1
      name: Service Project
      orgId: '123456789'
      deletionPolicy: DELETE
  wait120s:
    type: time:sleep
    name: wait_120s
    properties:
      createDuration: 120s
    options:
      dependsOn:
        - ${serviceProject}
```
<!--End PulumiCodeChooser -->
### Service Project Attachment Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as time from "@pulumi/time";

const serviceProjectFull = new gcp.organizations.Project("service_project_full", {
    projectId: "project-1",
    name: "Service Project Full",
    orgId: "123456789",
    deletionPolicy: "DELETE",
});
const wait120s = new time.index.Sleep("wait_120s", {createDuration: "120s"}, {
    dependsOn: [serviceProjectFull],
});
const example2 = new gcp.apphub.ServiceProjectAttachment("example2", {
    serviceProjectAttachmentId: serviceProjectFull.projectId,
    serviceProject: serviceProjectFull.projectId,
}, {
    dependsOn: [wait120s],
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_time as time

service_project_full = gcp.organizations.Project("service_project_full",
    project_id="project-1",
    name="Service Project Full",
    org_id="123456789",
    deletion_policy="DELETE")
wait120s = time.index.Sleep("wait_120s", create_duration=120s,
opts = pulumi.ResourceOptions(depends_on=[service_project_full]))
example2 = gcp.apphub.ServiceProjectAttachment("example2",
    service_project_attachment_id=service_project_full.project_id,
    service_project=service_project_full.project_id,
    opts = pulumi.ResourceOptions(depends_on=[wait120s]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Time = Pulumi.Time;

return await Deployment.RunAsync(() => 
{
    var serviceProjectFull = new Gcp.Organizations.Project("service_project_full", new()
    {
        ProjectId = "project-1",
        Name = "Service Project Full",
        OrgId = "123456789",
        DeletionPolicy = "DELETE",
    });

    var wait120s = new Time.Index.Sleep("wait_120s", new()
    {
        CreateDuration = "120s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            serviceProjectFull,
        },
    });

    var example2 = new Gcp.Apphub.ServiceProjectAttachment("example2", new()
    {
        ServiceProjectAttachmentId = serviceProjectFull.ProjectId,
        ServiceProject = serviceProjectFull.ProjectId,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            wait120s,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-time/sdk/go/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		serviceProjectFull, err := organizations.NewProject(ctx, "service_project_full", &organizations.ProjectArgs{
			ProjectId:      pulumi.String("project-1"),
			Name:           pulumi.String("Service Project Full"),
			OrgId:          pulumi.String("123456789"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		wait120s, err := time.NewSleep(ctx, "wait_120s", &time.SleepArgs{
			CreateDuration: "120s",
		}, pulumi.DependsOn([]pulumi.Resource{
			serviceProjectFull,
		}))
		if err != nil {
			return err
		}
		_, err = apphub.NewServiceProjectAttachment(ctx, "example2", &apphub.ServiceProjectAttachmentArgs{
			ServiceProjectAttachmentId: serviceProjectFull.ProjectId,
			ServiceProject:             serviceProjectFull.ProjectId,
		}, pulumi.DependsOn([]pulumi.Resource{
			wait120s,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.time.sleep;
import com.pulumi.time.SleepArgs;
import com.pulumi.gcp.apphub.ServiceProjectAttachment;
import com.pulumi.gcp.apphub.ServiceProjectAttachmentArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var serviceProjectFull = new Project("serviceProjectFull", ProjectArgs.builder()
            .projectId("project-1")
            .name("Service Project Full")
            .orgId("123456789")
            .deletionPolicy("DELETE")
            .build());

        var wait120s = new Sleep("wait120s", SleepArgs.builder()
            .createDuration("120s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(serviceProjectFull)
                .build());

        var example2 = new ServiceProjectAttachment("example2", ServiceProjectAttachmentArgs.builder()
            .serviceProjectAttachmentId(serviceProjectFull.projectId())
            .serviceProject(serviceProjectFull.projectId())
            .build(), CustomResourceOptions.builder()
                .dependsOn(wait120s)
                .build());

    }
}
```
```yaml
resources:
  example2:
    type: gcp:apphub:ServiceProjectAttachment
    properties:
      serviceProjectAttachmentId: ${serviceProjectFull.projectId}
      serviceProject: ${serviceProjectFull.projectId}
    options:
      dependsOn:
        - ${wait120s}
  serviceProjectFull:
    type: gcp:organizations:Project
    name: service_project_full
    properties:
      projectId: project-1
      name: Service Project Full
      orgId: '123456789'
      deletionPolicy: DELETE
  wait120s:
    type: time:sleep
    name: wait_120s
    properties:
      createDuration: 120s
    options:
      dependsOn:
        - ${serviceProjectFull}
```
<!--End PulumiCodeChooser -->

## Import

ServiceProjectAttachment can be imported using any of these accepted formats:

* `projects/{{project}}/locations/global/serviceProjectAttachments/{{service_project_attachment_id}}`

* `{{project}}/{{service_project_attachment_id}}`

* `{{service_project_attachment_id}}`

When using the `pulumi import` command, ServiceProjectAttachment can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apphub/serviceProjectAttachment:ServiceProjectAttachment default projects/{{project}}/locations/global/serviceProjectAttachments/{{service_project_attachment_id}}
```

```sh
$ pulumi import gcp:apphub/serviceProjectAttachment:ServiceProjectAttachment default {{project}}/{{service_project_attachment_id}}
```

```sh
$ pulumi import gcp:apphub/serviceProjectAttachment:ServiceProjectAttachment default {{service_project_attachment_id}}
```

{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
é
serviceProjectB" Ð"Immutable. Service project name in the format: \"projects/abc\"
or \"projects/123\". As input, project name with either project id or number
are accepted. As output, this field will contain project number."
ó
serviceProjectAttachmentId" ÐRequired. The service project attachment identifier must contain the project_id of the service project specified in the service_project_attachment.service_project field. Hint: "projects/{project_id}"


- - -
",

createTime" Output only. Create time.
"³
name" ¦"Identifier. The resource name of a ServiceProjectAttachment. Format:\"projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\""
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"é
serviceProjectB" Ð"Immutable. Service project name in the format: \"projects/abc\"
or \"projects/123\". As input, project name with either project id or number
are accepted. As output, this field will contain project number."
"ó
serviceProjectAttachmentId" ÐRequired. The service project attachment identifier must contain the project_id of the service project specified in the service_project_attachment.service_project field. Hint: "projects/{project_id}"


- - -
"-
state"  ServiceProjectAttachment state.
"k
uid" `Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.
*
0
apphubWorkloadgcp:apphub/workload:Workload£Workload represents a binary deployment (such as Managed Instance Groups (MIGs), GKE deployments, etc.) that performs the smallest logical subset of business functionality. It registers identified workload to the Application.



## Example Usage

## Import

Workload can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/applications/{{application_id}}/workloads/{{workload_id}}`

* `{{project}}/{{location}}/{{application_id}}/{{workload_id}}`

* `{{location}}/{{application_id}}/{{workload_id}}`

When using the `pulumi import` command, Workload can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:apphub/workload:Workload default projects/{{project}}/locations/{{location}}/applications/{{application_id}}/workloads/{{workload_id}}
```

```sh
$ pulumi import gcp:apphub/workload:Workload default {{project}}/{{location}}/{{application_id}}/{{workload_id}}
```

```sh
$ pulumi import gcp:apphub/workload:Workload default {{location}}/{{application_id}}/{{workload_id}}
```

¬
applicationId" Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
¡

attributesTBR:P
N
apphubWorkloadAttributes0gcp:apphub/WorkloadAttributes:WorkloadAttributes=Consumer provided attributes.
Structure is documented below.
=
descriptionB" (User-defined description of a Workload.
\
discoveredWorkload" BImmutable. The resource name of the original discovered workload.
9
displayNameB" $User-defined name for the Workload.
§
location" Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
3

workloadId" !The Workload identifier.


- - -
"¬
applicationId" Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
"¡

attributesTBR:P
N
apphubWorkloadAttributes0gcp:apphub/WorkloadAttributes:WorkloadAttributes=Consumer provided attributes.
Structure is documented below.
",

createTime" Output only. Create time.
"=
descriptionB" (User-defined description of a Workload.
"\
discoveredWorkload" BImmutable. The resource name of the original discovered workload.
"9
displayNameB" $User-defined name for the Workload.
"§
location" Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
"«
name" Identifier. The resource name of the Workload. Format:"projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"p
state" cOutput only. Workload state. Possible values:  STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
"g
uid" \Output only. A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
",

updateTime" Output only. Update time.
"3

workloadId" !The Workload identifier.


- - -
"ç
workloadPropertiesf*d:b
`
apphubWorkloadWorkloadProperty<gcp:apphub/WorkloadWorkloadProperty:WorkloadWorkloadPropertyiProperties of an underlying compute resource represented by the Workload.
Structure is documented below.
"é
workloadReferencesi*g:e
c
apphubWorkloadWorkloadReference>gcp:apphub/WorkloadWorkloadReference:WorkloadWorkloadReferencehReference of an underlying compute resource represented by the Workload.
Structure is documented below.
*áY
V
applicationintegration
AuthConfig0gcp:applicationintegration/authConfig:AuthConfigÅ5The AuthConfig resource use to hold channels and connection config data.


To get more information about AuthConfig, see:

* [API documentation](https://cloud.google.com/application-integration/docs/reference/rest/v1/projects.locations.authConfigs)
* How-to Guides
    * [Manage authentication profiles](https://cloud.google.com/application-integration/docs/configure-authentication-profiles)
    * [Official Documentation](https://cloud.google.com/application-integration/docs/overview)

## Example Usage

### Integrations Auth Config Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const client = new gcp.applicationintegration.Client("client", {location: "us-west1"});
const basicExample = new gcp.applicationintegration.AuthConfig("basic_example", {
    location: "us-west1",
    displayName: "test-authconfig",
    description: "Test auth config created via terraform",
    decryptedCredential: {
        credentialType: "USERNAME_AND_PASSWORD",
        usernameAndPassword: {
            username: "test-username",
            password: "test-password",
        },
    },
}, {
    dependsOn: [client],
});
```
```python
import pulumi
import pulumi_gcp as gcp

client = gcp.applicationintegration.Client("client", location="us-west1")
basic_example = gcp.applicationintegration.AuthConfig("basic_example",
    location="us-west1",
    display_name="test-authconfig",
    description="Test auth config created via terraform",
    decrypted_credential={
        "credential_type": "USERNAME_AND_PASSWORD",
        "username_and_password": {
            "username": "test-username",
            "password": "test-password",
        },
    },
    opts = pulumi.ResourceOptions(depends_on=[client]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var client = new Gcp.ApplicationIntegration.Client("client", new()
    {
        Location = "us-west1",
    });

    var basicExample = new Gcp.ApplicationIntegration.AuthConfig("basic_example", new()
    {
        Location = "us-west1",
        DisplayName = "test-authconfig",
        Description = "Test auth config created via terraform",
        DecryptedCredential = new Gcp.ApplicationIntegration.Inputs.AuthConfigDecryptedCredentialArgs
        {
            CredentialType = "USERNAME_AND_PASSWORD",
            UsernameAndPassword = new Gcp.ApplicationIntegration.Inputs.AuthConfigDecryptedCredentialUsernameAndPasswordArgs
            {
                Username = "test-username",
                Password = "test-password",
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            client,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/applicationintegration"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		client, err := applicationintegration.NewClient(ctx, "client", &applicationintegration.ClientArgs{
			Location: pulumi.String("us-west1"),
		})
		if err != nil {
			return err
		}
		_, err = applicationintegration.NewAuthConfig(ctx, "basic_example", &applicationintegration.AuthConfigArgs{
			Location:    pulumi.String("us-west1"),
			DisplayName: pulumi.String("test-authconfig"),
			Description: pulumi.String("Test auth config created via terraform"),
			DecryptedCredential: &applicationintegration.AuthConfigDecryptedCredentialArgs{
				CredentialType: pulumi.String("USERNAME_AND_PASSWORD"),
				UsernameAndPassword: &applicationintegration.AuthConfigDecryptedCredentialUsernameAndPasswordArgs{
					Username: pulumi.String("test-username"),
					Password: pulumi.String("test-password"),
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			client,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.applicationintegration.Client;
import com.pulumi.gcp.applicationintegration.ClientArgs;
import com.pulumi.gcp.applicationintegration.AuthConfig;
import com.pulumi.gcp.applicationintegration.AuthConfigArgs;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigDecryptedCredentialArgs;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigDecryptedCredentialUsernameAndPasswordArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var client = new Client("client", ClientArgs.builder()
            .location("us-west1")
            .build());

        var basicExample = new AuthConfig("basicExample", AuthConfigArgs.builder()
            .location("us-west1")
            .displayName("test-authconfig")
            .description("Test auth config created via terraform")
            .decryptedCredential(AuthConfigDecryptedCredentialArgs.builder()
                .credentialType("USERNAME_AND_PASSWORD")
                .usernameAndPassword(AuthConfigDecryptedCredentialUsernameAndPasswordArgs.builder()
                    .username("test-username")
                    .password("test-password")
                    .build())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(client)
                .build());

    }
}
```
```yaml
resources:
  client:
    type: gcp:applicationintegration:Client
    properties:
      location: us-west1
  basicExample:
    type: gcp:applicationintegration:AuthConfig
    name: basic_example
    properties:
      location: us-west1
      displayName: test-authconfig
      description: Test auth config created via terraform
      decryptedCredential:
        credentialType: USERNAME_AND_PASSWORD
        usernameAndPassword:
          username: test-username
          password: test-password
    options:
      dependsOn:
        - ${client}
```
<!--End PulumiCodeChooser -->

## Import

AuthConfig can be imported using any of these accepted formats:

* `{{project}}/{{name}}`

* `{{project}} {{name}}`

* `{{name}}`

When using the `pulumi import` command, AuthConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:applicationintegration/authConfig:AuthConfig default {{project}}/{{name}}
```

```sh
$ pulumi import gcp:applicationintegration/authConfig:AuthConfig default "{{project}} {{name}}"
```

```sh
$ pulumi import gcp:applicationintegration/authConfig:AuthConfig default {{name}}
```

à
clientCertificateB:

applicationintegrationAuthConfigClientCertificateRgcp:applicationintegration/AuthConfigClientCertificate:AuthConfigClientCertificate6Raw client certificate
Structure is documented below.
ç
decryptedCredentialB:

applicationintegrationAuthConfigDecryptedCredentialVgcp:applicationintegration/AuthConfigDecryptedCredential:AuthConfigDecryptedCredential5Raw auth credentials.
Structure is documented below.
7
descriptionB" "A description of the auth config.
0
displayName" The name of the auth config.

expiryNotificationDurationsB*" îUser can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
J
location" :Location in which client needs to be provisioned.


- - -
ì
overrideValidTimeB" ÐUser provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
i

visibilityB" UThe visibility of the auth config.
Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
"<
certificateId" 'Certificate id for client certificate.
"à
clientCertificateB:

applicationintegrationAuthConfigClientCertificateRgcp:applicationintegration/AuthConfigClientCertificate:AuthConfigClientCertificate6Raw client certificate
Structure is documented below.
"ð

createTime" ÝThe timestamp when the auth config is created.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"
creatorEmail" pThe creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
"C
credentialType" -Credential type of the encrypted credential.
"ç
decryptedCredentialB:

applicationintegrationAuthConfigDecryptedCredentialVgcp:applicationintegration/AuthConfigDecryptedCredential:AuthConfigDecryptedCredential5Raw auth credentials.
Structure is documented below.
"7
descriptionB" "A description of the auth config.
"0
displayName" The name of the auth config.
"
encryptedCredential" uAuth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key.
A base64-encoded string.
"
expiryNotificationDurationsB*" îUser can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
"
lastModifierEmail" vThe last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
"J
location" :Location in which client needs to be provisioned.


- - -
".
name" "Resource name of the auth config.
"ì
overrideValidTimeB" ÐUser provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
":
reason" ,The reason / details of the current status.
",
state" The status of the auth config.
"ñ

updateTime" ÞThe timestamp when the auth config is modified.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"¨
	validTime" The time until the auth config is valid. Empty or max value is considered the auth config won't expire.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"i

visibilityB" UThe visibility of the auth config.
Possible values are: `PRIVATE`, `CLIENT_VISIBLE`.
*»v
J
applicationintegrationClient(gcp:applicationintegration/client:ClientªkApplication Integration Client.


To get more information about Client, see:

* [API documentation](https://cloud.google.com/application-integration/docs/reference/rest/v1/projects.locations.clients)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/application-integration/docs/overview)
    * [Set up Application Integration](https://cloud.google.com/application-integration/docs/setup-application-integration)

## Example Usage

### Integrations Client Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.applicationintegration.Client("example", {location: "us-central1"});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.applicationintegration.Client("example", location="us-central1")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.ApplicationIntegration.Client("example", new()
    {
        Location = "us-central1",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/applicationintegration"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := applicationintegration.NewClient(ctx, "example", &applicationintegration.ClientArgs{
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.applicationintegration.Client;
import com.pulumi.gcp.applicationintegration.ClientArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new Client("example", ClientArgs.builder()
            .location("us-central1")
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:applicationintegration:Client
    properties:
      location: us-central1
```
<!--End PulumiCodeChooser -->
### Integrations Client Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as std from "@pulumi/std";

const testProject = gcp.organizations.getProject({});
const keyring = new gcp.kms.KeyRing("keyring", {
    name: "my-keyring",
    location: "us-east1",
});
const cryptokey = new gcp.kms.CryptoKey("cryptokey", {
    name: "crypto-key-example",
    keyRing: keyring.id,
    rotationPeriod: "7776000s",
});
const testKey = new gcp.kms.CryptoKeyVersion("test_key", {cryptoKey: cryptokey.id});
const serviceAccount = new gcp.serviceaccount.Account("service_account", {
    accountId: "service-acc",
    displayName: "Service Account",
});
const example = new gcp.applicationintegration.Client("example", {
    location: "us-east1",
    createSampleIntegrations: true,
    runAsServiceAccount: serviceAccount.email,
    cloudKmsConfig: {
        kmsLocation: "us-east1",
        kmsRing: std.basenameOutput({
            input: keyring.id,
        }).apply(invoke => invoke.result),
        key: std.basenameOutput({
            input: cryptokey.id,
        }).apply(invoke => invoke.result),
        keyVersion: std.basenameOutput({
            input: testKey.id,
        }).apply(invoke => invoke.result),
        kmsProjectId: testProject.then(testProject => testProject.projectId),
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_std as std

test_project = gcp.organizations.get_project()
keyring = gcp.kms.KeyRing("keyring",
    name="my-keyring",
    location="us-east1")
cryptokey = gcp.kms.CryptoKey("cryptokey",
    name="crypto-key-example",
    key_ring=keyring.id,
    rotation_period="7776000s")
test_key = gcp.kms.CryptoKeyVersion("test_key", crypto_key=cryptokey.id)
service_account = gcp.serviceaccount.Account("service_account",
    account_id="service-acc",
    display_name="Service Account")
example = gcp.applicationintegration.Client("example",
    location="us-east1",
    create_sample_integrations=True,
    run_as_service_account=service_account.email,
    cloud_kms_config={
        "kms_location": "us-east1",
        "kms_ring": std.basename_output(input=keyring.id).apply(lambda invoke: invoke.result),
        "key": std.basename_output(input=cryptokey.id).apply(lambda invoke: invoke.result),
        "key_version": std.basename_output(input=test_key.id).apply(lambda invoke: invoke.result),
        "kms_project_id": test_project.project_id,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var testProject = Gcp.Organizations.GetProject.Invoke();

    var keyring = new Gcp.Kms.KeyRing("keyring", new()
    {
        Name = "my-keyring",
        Location = "us-east1",
    });

    var cryptokey = new Gcp.Kms.CryptoKey("cryptokey", new()
    {
        Name = "crypto-key-example",
        KeyRing = keyring.Id,
        RotationPeriod = "7776000s",
    });

    var testKey = new Gcp.Kms.CryptoKeyVersion("test_key", new()
    {
        CryptoKey = cryptokey.Id,
    });

    var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    {
        AccountId = "service-acc",
        DisplayName = "Service Account",
    });

    var example = new Gcp.ApplicationIntegration.Client("example", new()
    {
        Location = "us-east1",
        CreateSampleIntegrations = true,
        RunAsServiceAccount = serviceAccount.Email,
        CloudKmsConfig = new Gcp.ApplicationIntegration.Inputs.ClientCloudKmsConfigArgs
        {
            KmsLocation = "us-east1",
            KmsRing = Std.Basename.Invoke(new()
            {
                Input = keyring.Id,
            }).Apply(invoke => invoke.Result),
            Key = Std.Basename.Invoke(new()
            {
                Input = cryptokey.Id,
            }).Apply(invoke => invoke.Result),
            KeyVersion = Std.Basename.Invoke(new()
            {
                Input = testKey.Id,
            }).Apply(invoke => invoke.Result),
            KmsProjectId = testProject.Apply(getProjectResult => getProjectResult.ProjectId),
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/applicationintegration"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		testProject, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		keyring, err := kms.NewKeyRing(ctx, "keyring", &kms.KeyRingArgs{
			Name:     pulumi.String("my-keyring"),
			Location: pulumi.String("us-east1"),
		})
		if err != nil {
			return err
		}
		cryptokey, err := kms.NewCryptoKey(ctx, "cryptokey", &kms.CryptoKeyArgs{
			Name:           pulumi.String("crypto-key-example"),
			KeyRing:        keyring.ID(),
			RotationPeriod: pulumi.String("7776000s"),
		})
		if err != nil {
			return err
		}
		testKey, err := kms.NewCryptoKeyVersion(ctx, "test_key", &kms.CryptoKeyVersionArgs{
			CryptoKey: cryptokey.ID(),
		})
		if err != nil {
			return err
		}
		serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("service-acc"),
			DisplayName: pulumi.String("Service Account"),
		})
		if err != nil {
			return err
		}
		_, err = applicationintegration.NewClient(ctx, "example", &applicationintegration.ClientArgs{
			Location:                 pulumi.String("us-east1"),
			CreateSampleIntegrations: pulumi.Bool(true),
			RunAsServiceAccount:      serviceAccount.Email,
			CloudKmsConfig: &applicationintegration.ClientCloudKmsConfigArgs{
				KmsLocation: pulumi.String("us-east1"),
				KmsRing: std.BasenameOutput(ctx, std.BasenameOutputArgs{
					Input: keyring.ID(),
				}, nil).ApplyT(func(invoke std.BasenameResult) (*string, error) {
					return invoke.Result, nil
				}).(pulumi.StringPtrOutput),
				Key: std.BasenameOutput(ctx, std.BasenameOutputArgs{
					Input: cryptokey.ID(),
				}, nil).ApplyT(func(invoke std.BasenameResult) (*string, error) {
					return invoke.Result, nil
				}).(pulumi.StringPtrOutput),
				KeyVersion: std.BasenameOutput(ctx, std.BasenameOutputArgs{
					Input: testKey.ID(),
				}, nil).ApplyT(func(invoke std.BasenameResult) (*string, error) {
					return invoke.Result, nil
				}).(pulumi.StringPtrOutput),
				KmsProjectId: pulumi.String(testProject.ProjectId),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.kms.KeyRing;
import com.pulumi.gcp.kms.KeyRingArgs;
import com.pulumi.gcp.kms.CryptoKey;
import com.pulumi.gcp.kms.CryptoKeyArgs;
import com.pulumi.gcp.kms.CryptoKeyVersion;
import com.pulumi.gcp.kms.CryptoKeyVersionArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.applicationintegration.Client;
import com.pulumi.gcp.applicationintegration.ClientArgs;
import com.pulumi.gcp.applicationintegration.inputs.ClientCloudKmsConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var testProject = OrganizationsFunctions.getProject();

        var keyring = new KeyRing("keyring", KeyRingArgs.builder()
            .name("my-keyring")
            .location("us-east1")
            .build());

        var cryptokey = new CryptoKey("cryptokey", CryptoKeyArgs.builder()
            .name("crypto-key-example")
            .keyRing(keyring.id())
            .rotationPeriod("7776000s")
            .build());

        var testKey = new CryptoKeyVersion("testKey", CryptoKeyVersionArgs.builder()
            .cryptoKey(cryptokey.id())
            .build());

        var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
            .accountId("service-acc")
            .displayName("Service Account")
            .build());

        var example = new Client("example", ClientArgs.builder()
            .location("us-east1")
            .createSampleIntegrations(true)
            .runAsServiceAccount(serviceAccount.email())
            .cloudKmsConfig(ClientCloudKmsConfigArgs.builder()
                .kmsLocation("us-east1")
                .kmsRing(StdFunctions.basename().applyValue(invoke -> invoke.result()))
                .key(StdFunctions.basename().applyValue(invoke -> invoke.result()))
                .keyVersion(StdFunctions.basename().applyValue(invoke -> invoke.result()))
                .kmsProjectId(testProject.applyValue(getProjectResult -> getProjectResult.projectId()))
                .build())
            .build());

    }
}
```
```yaml
resources:
  keyring:
    type: gcp:kms:KeyRing
    properties:
      name: my-keyring
      location: us-east1
  cryptokey:
    type: gcp:kms:CryptoKey
    properties:
      name: crypto-key-example
      keyRing: ${keyring.id}
      rotationPeriod: 7776000s
  testKey:
    type: gcp:kms:CryptoKeyVersion
    name: test_key
    properties:
      cryptoKey: ${cryptokey.id}
  serviceAccount:
    type: gcp:serviceaccount:Account
    name: service_account
    properties:
      accountId: service-acc
      displayName: Service Account
  example:
    type: gcp:applicationintegration:Client
    properties:
      location: us-east1
      createSampleIntegrations: true
      runAsServiceAccount: ${serviceAccount.email}
      cloudKmsConfig:
        kmsLocation: us-east1
        kmsRing:
          fn::invoke:
            function: std:basename
            arguments:
              input: ${keyring.id}
            return: result
        key:
          fn::invoke:
            function: std:basename
            arguments:
              input: ${cryptokey.id}
            return: result
        keyVersion:
          fn::invoke:
            function: std:basename
            arguments:
              input: ${testKey.id}
            return: result
        kmsProjectId: ${testProject.projectId}
variables:
  testProject:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Client can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/clients`

* `{{project}}/{{location}}`

* `{{location}}`

When using the `pulumi import` command, Client can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:applicationintegration/client:Client default projects/{{project}}/locations/{{location}}/clients
```

```sh
$ pulumi import gcp:applicationintegration/client:Client default {{project}}/{{location}}
```

```sh
$ pulumi import gcp:applicationintegration/client:Client default {{location}}
```

í
cloudKmsConfigzBx:v
t
applicationintegrationClientCloudKmsConfigDgcp:applicationintegration/ClientCloudKmsConfig:ClientCloudKmsConfig_Cloud KMS config for AuthModule to encrypt/decrypt credentials.
Structure is documented below.
n
createSampleIntegrationsB
 LIndicates if sample integrations should be created along with provisioning.
J
location" :Location in which client needs to be provisioned.


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
w
runAsServiceAccountB" ZUser input run-as service account, if empty, will bring up a new default service account.
"í
cloudKmsConfigzBx:v
t
applicationintegrationClientCloudKmsConfigDgcp:applicationintegration/ClientCloudKmsConfig:ClientCloudKmsConfig_Cloud KMS config for AuthModule to encrypt/decrypt credentials.
Structure is documented below.
"n
createSampleIntegrationsB
 LIndicates if sample integrations should be created along with provisioning.
"J
location" :Location in which client needs to be provisioned.


- - -
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"w
runAsServiceAccountB" ZUser input run-as service account, if empty, will bring up a new default service account.
*®	
J
artifactregistry
Repository*gcp:artifactregistry/repository:RepositoryÖðA repository for storing artifacts


To get more information about Repository, see:

* [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)

## Example Usage

### Artifact Registry Repository Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "my-repository",
    description: "example docker repository",
    format: "DOCKER",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="my-repository",
    description="example docker repository",
    format="DOCKER")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "my-repository",
        Description = "example docker repository",
        Format = "DOCKER",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("my-repository"),
			Description:  pulumi.String("example docker repository"),
			Format:       pulumi.String("DOCKER"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("my-repository")
            .description("example docker repository")
            .format("DOCKER")
            .build());

    }
}
```
```yaml
resources:
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: my-repository
      description: example docker repository
      format: DOCKER
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Multi Region


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    repositoryId: "my-repository",
    description: "example docker repository",
    location: "us",
    format: "DOCKER",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo = gcp.artifactregistry.Repository("my-repo",
    repository_id="my-repository",
    description="example docker repository",
    location="us",
    format="DOCKER")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        RepositoryId = "my-repository",
        Description = "example docker repository",
        Location = "us",
        Format = "DOCKER",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			RepositoryId: pulumi.String("my-repository"),
			Description:  pulumi.String("example docker repository"),
			Location:     pulumi.String("us"),
			Format:       pulumi.String("DOCKER"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .repositoryId("my-repository")
            .description("example docker repository")
            .location("us")
            .format("DOCKER")
            .build());

    }
}
```
```yaml
resources:
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      repositoryId: my-repository
      description: example docker repository
      location: us
      format: DOCKER
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Docker


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "my-repository",
    description: "example docker repository",
    format: "DOCKER",
    dockerConfig: {
        immutableTags: true,
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="my-repository",
    description="example docker repository",
    format="DOCKER",
    docker_config={
        "immutable_tags": True,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "my-repository",
        Description = "example docker repository",
        Format = "DOCKER",
        DockerConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryDockerConfigArgs
        {
            ImmutableTags = true,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("my-repository"),
			Description:  pulumi.String("example docker repository"),
			Format:       pulumi.String("DOCKER"),
			DockerConfig: &artifactregistry.RepositoryDockerConfigArgs{
				ImmutableTags: pulumi.Bool(true),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryDockerConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("my-repository")
            .description("example docker repository")
            .format("DOCKER")
            .dockerConfig(RepositoryDockerConfigArgs.builder()
                .immutableTags(true)
                .build())
            .build());

    }
}
```
```yaml
resources:
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: my-repository
      description: example docker repository
      format: DOCKER
      dockerConfig:
        immutableTags: true
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Cmek


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const cryptoKey = new gcp.kms.CryptoKeyIAMMember("crypto_key", {
    cryptoKeyId: "kms-key",
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com`),
});
const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "my-repository",
    description: "example docker repository with cmek",
    format: "DOCKER",
    kmsKeyName: "kms-key",
}, {
    dependsOn: [cryptoKey],
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
crypto_key = gcp.kms.CryptoKeyIAMMember("crypto_key",
    crypto_key_id="kms-key",
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=f"serviceAccount:service-{project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com")
my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="my-repository",
    description="example docker repository with cmek",
    format="DOCKER",
    kms_key_name="kms-key",
    opts = pulumi.ResourceOptions(depends_on=[crypto_key]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var cryptoKey = new Gcp.Kms.CryptoKeyIAMMember("crypto_key", new()
    {
        CryptoKeyId = "kms-key",
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-artifactregistry.iam.gserviceaccount.com",
    });

    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "my-repository",
        Description = "example docker repository with cmek",
        Format = "DOCKER",
        KmsKeyName = "kms-key",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            cryptoKey,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		cryptoKey, err := kms.NewCryptoKeyIAMMember(ctx, "crypto_key", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: pulumi.String("kms-key"),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("my-repository"),
			Description:  pulumi.String("example docker repository with cmek"),
			Format:       pulumi.String("DOCKER"),
			KmsKeyName:   pulumi.String("kms-key"),
		}, pulumi.DependsOn([]pulumi.Resource{
			cryptoKey,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var cryptoKey = new CryptoKeyIAMMember("cryptoKey", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId("kms-key")
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(String.format("serviceAccount:service-%s@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("my-repository")
            .description("example docker repository with cmek")
            .format("DOCKER")
            .kmsKeyName("kms-key")
            .build(), CustomResourceOptions.builder()
                .dependsOn(cryptoKey)
                .build());

    }
}
```
```yaml
resources:
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: my-repository
      description: example docker repository with cmek
      format: DOCKER
      kmsKeyName: kms-key
    options:
      dependsOn:
        - ${cryptoKey}
  cryptoKey:
    type: gcp:kms:CryptoKeyIAMMember
    name: crypto_key
    properties:
      cryptoKeyId: kms-key
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Virtual


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_repo_upstream_1 = new gcp.artifactregistry.Repository("my-repo-upstream-1", {
    location: "us-central1",
    repositoryId: "my-repository-upstream-1",
    description: "example docker repository (upstream source) 1",
    format: "DOCKER",
});
const my_repo_upstream_2 = new gcp.artifactregistry.Repository("my-repo-upstream-2", {
    location: "us-central1",
    repositoryId: "my-repository-upstream-2",
    description: "example docker repository (upstream source) 2",
    format: "DOCKER",
});
const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "my-repository",
    description: "example virtual docker repository",
    format: "DOCKER",
    mode: "VIRTUAL_REPOSITORY",
    virtualRepositoryConfig: {
        upstreamPolicies: [
            {
                id: "my-repository-upstream-1",
                repository: my_repo_upstream_1.id,
                priority: 20,
            },
            {
                id: "my-repository-upstream-2",
                repository: my_repo_upstream_2.id,
                priority: 10,
            },
        ],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo_upstream_1 = gcp.artifactregistry.Repository("my-repo-upstream-1",
    location="us-central1",
    repository_id="my-repository-upstream-1",
    description="example docker repository (upstream source) 1",
    format="DOCKER")
my_repo_upstream_2 = gcp.artifactregistry.Repository("my-repo-upstream-2",
    location="us-central1",
    repository_id="my-repository-upstream-2",
    description="example docker repository (upstream source) 2",
    format="DOCKER")
my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="my-repository",
    description="example virtual docker repository",
    format="DOCKER",
    mode="VIRTUAL_REPOSITORY",
    virtual_repository_config={
        "upstream_policies": [
            {
                "id": "my-repository-upstream-1",
                "repository": my_repo_upstream_1.id,
                "priority": 20,
            },
            {
                "id": "my-repository-upstream-2",
                "repository": my_repo_upstream_2.id,
                "priority": 10,
            },
        ],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_repo_upstream_1 = new Gcp.ArtifactRegistry.Repository("my-repo-upstream-1", new()
    {
        Location = "us-central1",
        RepositoryId = "my-repository-upstream-1",
        Description = "example docker repository (upstream source) 1",
        Format = "DOCKER",
    });

    var my_repo_upstream_2 = new Gcp.ArtifactRegistry.Repository("my-repo-upstream-2", new()
    {
        Location = "us-central1",
        RepositoryId = "my-repository-upstream-2",
        Description = "example docker repository (upstream source) 2",
        Format = "DOCKER",
    });

    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "my-repository",
        Description = "example virtual docker repository",
        Format = "DOCKER",
        Mode = "VIRTUAL_REPOSITORY",
        VirtualRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryVirtualRepositoryConfigArgs
        {
            UpstreamPolicies = new[]
            {
                new Gcp.ArtifactRegistry.Inputs.RepositoryVirtualRepositoryConfigUpstreamPolicyArgs
                {
                    Id = "my-repository-upstream-1",
                    Repository = my_repo_upstream_1.Id,
                    Priority = 20,
                },
                new Gcp.ArtifactRegistry.Inputs.RepositoryVirtualRepositoryConfigUpstreamPolicyArgs
                {
                    Id = "my-repository-upstream-2",
                    Repository = my_repo_upstream_2.Id,
                    Priority = 10,
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepository(ctx, "my-repo-upstream-1", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("my-repository-upstream-1"),
			Description:  pulumi.String("example docker repository (upstream source) 1"),
			Format:       pulumi.String("DOCKER"),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "my-repo-upstream-2", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("my-repository-upstream-2"),
			Description:  pulumi.String("example docker repository (upstream source) 2"),
			Format:       pulumi.String("DOCKER"),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("my-repository"),
			Description:  pulumi.String("example virtual docker repository"),
			Format:       pulumi.String("DOCKER"),
			Mode:         pulumi.String("VIRTUAL_REPOSITORY"),
			VirtualRepositoryConfig: &artifactregistry.RepositoryVirtualRepositoryConfigArgs{
				UpstreamPolicies: artifactregistry.RepositoryVirtualRepositoryConfigUpstreamPolicyArray{
					&artifactregistry.RepositoryVirtualRepositoryConfigUpstreamPolicyArgs{
						Id:         pulumi.String("my-repository-upstream-1"),
						Repository: my_repo_upstream_1.ID(),
						Priority:   pulumi.Int(20),
					},
					&artifactregistry.RepositoryVirtualRepositoryConfigUpstreamPolicyArgs{
						Id:         pulumi.String("my-repository-upstream-2"),
						Repository: my_repo_upstream_2.ID(),
						Priority:   pulumi.Int(10),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryVirtualRepositoryConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_repo_upstream_1 = new Repository("my-repo-upstream-1", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("my-repository-upstream-1")
            .description("example docker repository (upstream source) 1")
            .format("DOCKER")
            .build());

        var my_repo_upstream_2 = new Repository("my-repo-upstream-2", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("my-repository-upstream-2")
            .description("example docker repository (upstream source) 2")
            .format("DOCKER")
            .build());

        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("my-repository")
            .description("example virtual docker repository")
            .format("DOCKER")
            .mode("VIRTUAL_REPOSITORY")
            .virtualRepositoryConfig(RepositoryVirtualRepositoryConfigArgs.builder()
                .upstreamPolicies(                
                    RepositoryVirtualRepositoryConfigUpstreamPolicyArgs.builder()
                        .id("my-repository-upstream-1")
                        .repository(my_repo_upstream_1.id())
                        .priority(20)
                        .build(),
                    RepositoryVirtualRepositoryConfigUpstreamPolicyArgs.builder()
                        .id("my-repository-upstream-2")
                        .repository(my_repo_upstream_2.id())
                        .priority(10)
                        .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  my-repo-upstream-1:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: my-repository-upstream-1
      description: example docker repository (upstream source) 1
      format: DOCKER
  my-repo-upstream-2:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: my-repository-upstream-2
      description: example docker repository (upstream source) 2
      format: DOCKER
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: my-repository
      description: example virtual docker repository
      format: DOCKER
      mode: VIRTUAL_REPOSITORY
      virtualRepositoryConfig:
        upstreamPolicies:
          - id: my-repository-upstream-1
            repository: ${["my-repo-upstream-1"].id}
            priority: 20
          - id: my-repository-upstream-2
            repository: ${["my-repo-upstream-2"].id}
            priority: 10
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Remote


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "my-repository",
    description: "example remote docker repository",
    format: "DOCKER",
    mode: "REMOTE_REPOSITORY",
    remoteRepositoryConfig: {
        description: "docker hub",
        dockerRepository: {
            publicRepository: "DOCKER_HUB",
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="my-repository",
    description="example remote docker repository",
    format="DOCKER",
    mode="REMOTE_REPOSITORY",
    remote_repository_config={
        "description": "docker hub",
        "docker_repository": {
            "public_repository": "DOCKER_HUB",
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "my-repository",
        Description = "example remote docker repository",
        Format = "DOCKER",
        Mode = "REMOTE_REPOSITORY",
        RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
        {
            Description = "docker hub",
            DockerRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigDockerRepositoryArgs
            {
                PublicRepository = "DOCKER_HUB",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("my-repository"),
			Description:  pulumi.String("example remote docker repository"),
			Format:       pulumi.String("DOCKER"),
			Mode:         pulumi.String("REMOTE_REPOSITORY"),
			RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
				Description: pulumi.String("docker hub"),
				DockerRepository: &artifactregistry.RepositoryRemoteRepositoryConfigDockerRepositoryArgs{
					PublicRepository: pulumi.String("DOCKER_HUB"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigDockerRepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("my-repository")
            .description("example remote docker repository")
            .format("DOCKER")
            .mode("REMOTE_REPOSITORY")
            .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
                .description("docker hub")
                .dockerRepository(RepositoryRemoteRepositoryConfigDockerRepositoryArgs.builder()
                    .publicRepository("DOCKER_HUB")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: my-repository
      description: example remote docker repository
      format: DOCKER
      mode: REMOTE_REPOSITORY
      remoteRepositoryConfig:
        description: docker hub
        dockerRepository:
          publicRepository: DOCKER_HUB
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Remote Apt


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "debian-buster",
    description: "example remote apt repository",
    format: "APT",
    mode: "REMOTE_REPOSITORY",
    remoteRepositoryConfig: {
        description: "Debian buster remote repository",
        aptRepository: {
            publicRepository: {
                repositoryBase: "DEBIAN",
                repositoryPath: "debian/dists/buster",
            },
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="debian-buster",
    description="example remote apt repository",
    format="APT",
    mode="REMOTE_REPOSITORY",
    remote_repository_config={
        "description": "Debian buster remote repository",
        "apt_repository": {
            "public_repository": {
                "repository_base": "DEBIAN",
                "repository_path": "debian/dists/buster",
            },
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "debian-buster",
        Description = "example remote apt repository",
        Format = "APT",
        Mode = "REMOTE_REPOSITORY",
        RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
        {
            Description = "Debian buster remote repository",
            AptRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigAptRepositoryArgs
            {
                PublicRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs
                {
                    RepositoryBase = "DEBIAN",
                    RepositoryPath = "debian/dists/buster",
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("debian-buster"),
			Description:  pulumi.String("example remote apt repository"),
			Format:       pulumi.String("APT"),
			Mode:         pulumi.String("REMOTE_REPOSITORY"),
			RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
				Description: pulumi.String("Debian buster remote repository"),
				AptRepository: &artifactregistry.RepositoryRemoteRepositoryConfigAptRepositoryArgs{
					PublicRepository: &artifactregistry.RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{
						RepositoryBase: pulumi.String("DEBIAN"),
						RepositoryPath: pulumi.String("debian/dists/buster"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigAptRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("debian-buster")
            .description("example remote apt repository")
            .format("APT")
            .mode("REMOTE_REPOSITORY")
            .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
                .description("Debian buster remote repository")
                .aptRepository(RepositoryRemoteRepositoryConfigAptRepositoryArgs.builder()
                    .publicRepository(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs.builder()
                        .repositoryBase("DEBIAN")
                        .repositoryPath("debian/dists/buster")
                        .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: debian-buster
      description: example remote apt repository
      format: APT
      mode: REMOTE_REPOSITORY
      remoteRepositoryConfig:
        description: Debian buster remote repository
        aptRepository:
          publicRepository:
            repositoryBase: DEBIAN
            repositoryPath: debian/dists/buster
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Remote Yum


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "rocky-9",
    description: "example remote yum repository",
    format: "YUM",
    mode: "REMOTE_REPOSITORY",
    remoteRepositoryConfig: {
        description: "Rocky 9 remote repository",
        yumRepository: {
            publicRepository: {
                repositoryBase: "ROCKY",
                repositoryPath: "pub/rocky/9/BaseOS/x86_64/os",
            },
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="rocky-9",
    description="example remote yum repository",
    format="YUM",
    mode="REMOTE_REPOSITORY",
    remote_repository_config={
        "description": "Rocky 9 remote repository",
        "yum_repository": {
            "public_repository": {
                "repository_base": "ROCKY",
                "repository_path": "pub/rocky/9/BaseOS/x86_64/os",
            },
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "rocky-9",
        Description = "example remote yum repository",
        Format = "YUM",
        Mode = "REMOTE_REPOSITORY",
        RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
        {
            Description = "Rocky 9 remote repository",
            YumRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigYumRepositoryArgs
            {
                PublicRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs
                {
                    RepositoryBase = "ROCKY",
                    RepositoryPath = "pub/rocky/9/BaseOS/x86_64/os",
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("rocky-9"),
			Description:  pulumi.String("example remote yum repository"),
			Format:       pulumi.String("YUM"),
			Mode:         pulumi.String("REMOTE_REPOSITORY"),
			RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
				Description: pulumi.String("Rocky 9 remote repository"),
				YumRepository: &artifactregistry.RepositoryRemoteRepositoryConfigYumRepositoryArgs{
					PublicRepository: &artifactregistry.RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{
						RepositoryBase: pulumi.String("ROCKY"),
						RepositoryPath: pulumi.String("pub/rocky/9/BaseOS/x86_64/os"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigYumRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("rocky-9")
            .description("example remote yum repository")
            .format("YUM")
            .mode("REMOTE_REPOSITORY")
            .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
                .description("Rocky 9 remote repository")
                .yumRepository(RepositoryRemoteRepositoryConfigYumRepositoryArgs.builder()
                    .publicRepository(RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryArgs.builder()
                        .repositoryBase("ROCKY")
                        .repositoryPath("pub/rocky/9/BaseOS/x86_64/os")
                        .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: rocky-9
      description: example remote yum repository
      format: YUM
      mode: REMOTE_REPOSITORY
      remoteRepositoryConfig:
        description: Rocky 9 remote repository
        yumRepository:
          publicRepository:
            repositoryBase: ROCKY
            repositoryPath: pub/rocky/9/BaseOS/x86_64/os
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Cleanup


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "my-repository",
    description: "example docker repository with cleanup policies",
    format: "DOCKER",
    cleanupPolicyDryRun: false,
    cleanupPolicies: [
        {
            id: "delete-prerelease",
            action: "DELETE",
            condition: {
                tagState: "TAGGED",
                tagPrefixes: [
                    "alpha",
                    "v0",
                ],
                olderThan: "2592000s",
            },
        },
        {
            id: "keep-tagged-release",
            action: "KEEP",
            condition: {
                tagState: "TAGGED",
                tagPrefixes: ["release"],
                packageNamePrefixes: [
                    "webapp",
                    "mobile",
                ],
            },
        },
        {
            id: "keep-minimum-versions",
            action: "KEEP",
            mostRecentVersions: {
                packageNamePrefixes: [
                    "webapp",
                    "mobile",
                    "sandbox",
                ],
                keepCount: 5,
            },
        },
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="my-repository",
    description="example docker repository with cleanup policies",
    format="DOCKER",
    cleanup_policy_dry_run=False,
    cleanup_policies=[
        {
            "id": "delete-prerelease",
            "action": "DELETE",
            "condition": {
                "tag_state": "TAGGED",
                "tag_prefixes": [
                    "alpha",
                    "v0",
                ],
                "older_than": "2592000s",
            },
        },
        {
            "id": "keep-tagged-release",
            "action": "KEEP",
            "condition": {
                "tag_state": "TAGGED",
                "tag_prefixes": ["release"],
                "package_name_prefixes": [
                    "webapp",
                    "mobile",
                ],
            },
        },
        {
            "id": "keep-minimum-versions",
            "action": "KEEP",
            "most_recent_versions": {
                "package_name_prefixes": [
                    "webapp",
                    "mobile",
                    "sandbox",
                ],
                "keep_count": 5,
            },
        },
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "my-repository",
        Description = "example docker repository with cleanup policies",
        Format = "DOCKER",
        CleanupPolicyDryRun = false,
        CleanupPolicies = new[]
        {
            new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyArgs
            {
                Id = "delete-prerelease",
                Action = "DELETE",
                Condition = new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyConditionArgs
                {
                    TagState = "TAGGED",
                    TagPrefixes = new[]
                    {
                        "alpha",
                        "v0",
                    },
                    OlderThan = "2592000s",
                },
            },
            new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyArgs
            {
                Id = "keep-tagged-release",
                Action = "KEEP",
                Condition = new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyConditionArgs
                {
                    TagState = "TAGGED",
                    TagPrefixes = new[]
                    {
                        "release",
                    },
                    PackageNamePrefixes = new[]
                    {
                        "webapp",
                        "mobile",
                    },
                },
            },
            new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyArgs
            {
                Id = "keep-minimum-versions",
                Action = "KEEP",
                MostRecentVersions = new Gcp.ArtifactRegistry.Inputs.RepositoryCleanupPolicyMostRecentVersionsArgs
                {
                    PackageNamePrefixes = new[]
                    {
                        "webapp",
                        "mobile",
                        "sandbox",
                    },
                    KeepCount = 5,
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:            pulumi.String("us-central1"),
			RepositoryId:        pulumi.String("my-repository"),
			Description:         pulumi.String("example docker repository with cleanup policies"),
			Format:              pulumi.String("DOCKER"),
			CleanupPolicyDryRun: pulumi.Bool(false),
			CleanupPolicies: artifactregistry.RepositoryCleanupPolicyArray{
				&artifactregistry.RepositoryCleanupPolicyArgs{
					Id:     pulumi.String("delete-prerelease"),
					Action: pulumi.String("DELETE"),
					Condition: &artifactregistry.RepositoryCleanupPolicyConditionArgs{
						TagState: pulumi.String("TAGGED"),
						TagPrefixes: pulumi.StringArray{
							pulumi.String("alpha"),
							pulumi.String("v0"),
						},
						OlderThan: pulumi.String("2592000s"),
					},
				},
				&artifactregistry.RepositoryCleanupPolicyArgs{
					Id:     pulumi.String("keep-tagged-release"),
					Action: pulumi.String("KEEP"),
					Condition: &artifactregistry.RepositoryCleanupPolicyConditionArgs{
						TagState: pulumi.String("TAGGED"),
						TagPrefixes: pulumi.StringArray{
							pulumi.String("release"),
						},
						PackageNamePrefixes: pulumi.StringArray{
							pulumi.String("webapp"),
							pulumi.String("mobile"),
						},
					},
				},
				&artifactregistry.RepositoryCleanupPolicyArgs{
					Id:     pulumi.String("keep-minimum-versions"),
					Action: pulumi.String("KEEP"),
					MostRecentVersions: &artifactregistry.RepositoryCleanupPolicyMostRecentVersionsArgs{
						PackageNamePrefixes: pulumi.StringArray{
							pulumi.String("webapp"),
							pulumi.String("mobile"),
							pulumi.String("sandbox"),
						},
						KeepCount: pulumi.Int(5),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryCleanupPolicyArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryCleanupPolicyConditionArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryCleanupPolicyMostRecentVersionsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("my-repository")
            .description("example docker repository with cleanup policies")
            .format("DOCKER")
            .cleanupPolicyDryRun(false)
            .cleanupPolicies(            
                RepositoryCleanupPolicyArgs.builder()
                    .id("delete-prerelease")
                    .action("DELETE")
                    .condition(RepositoryCleanupPolicyConditionArgs.builder()
                        .tagState("TAGGED")
                        .tagPrefixes(                        
                            "alpha",
                            "v0")
                        .olderThan("2592000s")
                        .build())
                    .build(),
                RepositoryCleanupPolicyArgs.builder()
                    .id("keep-tagged-release")
                    .action("KEEP")
                    .condition(RepositoryCleanupPolicyConditionArgs.builder()
                        .tagState("TAGGED")
                        .tagPrefixes("release")
                        .packageNamePrefixes(                        
                            "webapp",
                            "mobile")
                        .build())
                    .build(),
                RepositoryCleanupPolicyArgs.builder()
                    .id("keep-minimum-versions")
                    .action("KEEP")
                    .mostRecentVersions(RepositoryCleanupPolicyMostRecentVersionsArgs.builder()
                        .packageNamePrefixes(                        
                            "webapp",
                            "mobile",
                            "sandbox")
                        .keepCount(5)
                        .build())
                    .build())
            .build());

    }
}
```
```yaml
resources:
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: my-repository
      description: example docker repository with cleanup policies
      format: DOCKER
      cleanupPolicyDryRun: false
      cleanupPolicies:
        - id: delete-prerelease
          action: DELETE
          condition:
            tagState: TAGGED
            tagPrefixes:
              - alpha
              - v0
            olderThan: 2592000s
        - id: keep-tagged-release
          action: KEEP
          condition:
            tagState: TAGGED
            tagPrefixes:
              - release
            packageNamePrefixes:
              - webapp
              - mobile
        - id: keep-minimum-versions
          action: KEEP
          mostRecentVersions:
            packageNamePrefixes:
              - webapp
              - mobile
              - sandbox
            keepCount: 5
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Remote Dockerhub Auth


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const example_remote_secret = new gcp.secretmanager.Secret("example-remote-secret", {
    secretId: "example-secret",
    replication: {
        auto: {},
    },
});
const example_remote_secretVersion = new gcp.secretmanager.SecretVersion("example-remote-secret_version", {
    secret: example_remote_secret.id,
    secretData: "remote-password",
});
const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
    secretId: example_remote_secret.id,
    role: "roles/secretmanager.secretAccessor",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com`),
});
const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "example-dockerhub-remote",
    description: "example remote dockerhub repository with credentials",
    format: "DOCKER",
    mode: "REMOTE_REPOSITORY",
    remoteRepositoryConfig: {
        description: "docker hub with custom credentials",
        disableUpstreamValidation: true,
        dockerRepository: {
            publicRepository: "DOCKER_HUB",
        },
        upstreamCredentials: {
            usernamePasswordCredentials: {
                username: "remote-username",
                passwordSecretVersion: example_remote_secretVersion.name,
            },
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
example_remote_secret = gcp.secretmanager.Secret("example-remote-secret",
    secret_id="example-secret",
    replication={
        "auto": {},
    })
example_remote_secret_version = gcp.secretmanager.SecretVersion("example-remote-secret_version",
    secret=example_remote_secret.id,
    secret_data="remote-password")
secret_access = gcp.secretmanager.SecretIamMember("secret-access",
    secret_id=example_remote_secret.id,
    role="roles/secretmanager.secretAccessor",
    member=f"serviceAccount:service-{project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com")
my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="example-dockerhub-remote",
    description="example remote dockerhub repository with credentials",
    format="DOCKER",
    mode="REMOTE_REPOSITORY",
    remote_repository_config={
        "description": "docker hub with custom credentials",
        "disable_upstream_validation": True,
        "docker_repository": {
            "public_repository": "DOCKER_HUB",
        },
        "upstream_credentials": {
            "username_password_credentials": {
                "username": "remote-username",
                "password_secret_version": example_remote_secret_version.name,
            },
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var example_remote_secret = new Gcp.SecretManager.Secret("example-remote-secret", new()
    {
        SecretId = "example-secret",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = null,
        },
    });

    var example_remote_secretVersion = new Gcp.SecretManager.SecretVersion("example-remote-secret_version", new()
    {
        Secret = example_remote_secret.Id,
        SecretData = "remote-password",
    });

    var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new()
    {
        SecretId = example_remote_secret.Id,
        Role = "roles/secretmanager.secretAccessor",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-artifactregistry.iam.gserviceaccount.com",
    });

    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "example-dockerhub-remote",
        Description = "example remote dockerhub repository with credentials",
        Format = "DOCKER",
        Mode = "REMOTE_REPOSITORY",
        RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
        {
            Description = "docker hub with custom credentials",
            DisableUpstreamValidation = true,
            DockerRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigDockerRepositoryArgs
            {
                PublicRepository = "DOCKER_HUB",
            },
            UpstreamCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs
            {
                UsernamePasswordCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs
                {
                    Username = "remote-username",
                    PasswordSecretVersion = example_remote_secretVersion.Name,
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
			SecretId: pulumi.String("example-secret"),
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{},
			},
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
			Secret:     example_remote_secret.ID(),
			SecretData: pulumi.String("remote-password"),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
			SecretId: example_remote_secret.ID(),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("example-dockerhub-remote"),
			Description:  pulumi.String("example remote dockerhub repository with credentials"),
			Format:       pulumi.String("DOCKER"),
			Mode:         pulumi.String("REMOTE_REPOSITORY"),
			RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
				Description:               pulumi.String("docker hub with custom credentials"),
				DisableUpstreamValidation: pulumi.Bool(true),
				DockerRepository: &artifactregistry.RepositoryRemoteRepositoryConfigDockerRepositoryArgs{
					PublicRepository: pulumi.String("DOCKER_HUB"),
				},
				UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
					UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
						Username:              pulumi.String("remote-username"),
						PasswordSecretVersion: example_remote_secretVersion.Name,
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigDockerRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
            .secretId("example-secret")
            .replication(SecretReplicationArgs.builder()
                .auto()
                .build())
            .build());

        var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
            .secret(example_remote_secret.id())
            .secretData("remote-password")
            .build());

        var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
            .secretId(example_remote_secret.id())
            .role("roles/secretmanager.secretAccessor")
            .member(String.format("serviceAccount:service-%s@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("example-dockerhub-remote")
            .description("example remote dockerhub repository with credentials")
            .format("DOCKER")
            .mode("REMOTE_REPOSITORY")
            .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
                .description("docker hub with custom credentials")
                .disableUpstreamValidation(true)
                .dockerRepository(RepositoryRemoteRepositoryConfigDockerRepositoryArgs.builder()
                    .publicRepository("DOCKER_HUB")
                    .build())
                .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
                    .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
                        .username("remote-username")
                        .passwordSecretVersion(example_remote_secretVersion.name())
                        .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example-remote-secret:
    type: gcp:secretmanager:Secret
    properties:
      secretId: example-secret
      replication:
        auto: {}
  example-remote-secretVersion:
    type: gcp:secretmanager:SecretVersion
    name: example-remote-secret_version
    properties:
      secret: ${["example-remote-secret"].id}
      secretData: remote-password
  secret-access:
    type: gcp:secretmanager:SecretIamMember
    properties:
      secretId: ${["example-remote-secret"].id}
      role: roles/secretmanager.secretAccessor
      member: serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: example-dockerhub-remote
      description: example remote dockerhub repository with credentials
      format: DOCKER
      mode: REMOTE_REPOSITORY
      remoteRepositoryConfig:
        description: docker hub with custom credentials
        disableUpstreamValidation: true
        dockerRepository:
          publicRepository: DOCKER_HUB
        upstreamCredentials:
          usernamePasswordCredentials:
            username: remote-username
            passwordSecretVersion: ${["example-remote-secretVersion"].name}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Remote Docker Custom With Auth


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const example_remote_secret = new gcp.secretmanager.Secret("example-remote-secret", {
    secretId: "example-secret",
    replication: {
        auto: {},
    },
});
const example_remote_secretVersion = new gcp.secretmanager.SecretVersion("example-remote-secret_version", {
    secret: example_remote_secret.id,
    secretData: "remote-password",
});
const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
    secretId: example_remote_secret.id,
    role: "roles/secretmanager.secretAccessor",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com`),
});
const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "example-docker-custom-remote",
    description: "example remote custom docker repository with credentials",
    format: "DOCKER",
    mode: "REMOTE_REPOSITORY",
    remoteRepositoryConfig: {
        description: "custom docker remote with credentials",
        disableUpstreamValidation: true,
        dockerRepository: {
            customRepository: {
                uri: "https://registry-1.docker.io",
            },
        },
        upstreamCredentials: {
            usernamePasswordCredentials: {
                username: "remote-username",
                passwordSecretVersion: example_remote_secretVersion.name,
            },
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
example_remote_secret = gcp.secretmanager.Secret("example-remote-secret",
    secret_id="example-secret",
    replication={
        "auto": {},
    })
example_remote_secret_version = gcp.secretmanager.SecretVersion("example-remote-secret_version",
    secret=example_remote_secret.id,
    secret_data="remote-password")
secret_access = gcp.secretmanager.SecretIamMember("secret-access",
    secret_id=example_remote_secret.id,
    role="roles/secretmanager.secretAccessor",
    member=f"serviceAccount:service-{project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com")
my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="example-docker-custom-remote",
    description="example remote custom docker repository with credentials",
    format="DOCKER",
    mode="REMOTE_REPOSITORY",
    remote_repository_config={
        "description": "custom docker remote with credentials",
        "disable_upstream_validation": True,
        "docker_repository": {
            "custom_repository": {
                "uri": "https://registry-1.docker.io",
            },
        },
        "upstream_credentials": {
            "username_password_credentials": {
                "username": "remote-username",
                "password_secret_version": example_remote_secret_version.name,
            },
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var example_remote_secret = new Gcp.SecretManager.Secret("example-remote-secret", new()
    {
        SecretId = "example-secret",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = null,
        },
    });

    var example_remote_secretVersion = new Gcp.SecretManager.SecretVersion("example-remote-secret_version", new()
    {
        Secret = example_remote_secret.Id,
        SecretData = "remote-password",
    });

    var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new()
    {
        SecretId = example_remote_secret.Id,
        Role = "roles/secretmanager.secretAccessor",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-artifactregistry.iam.gserviceaccount.com",
    });

    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "example-docker-custom-remote",
        Description = "example remote custom docker repository with credentials",
        Format = "DOCKER",
        Mode = "REMOTE_REPOSITORY",
        RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
        {
            Description = "custom docker remote with credentials",
            DisableUpstreamValidation = true,
            DockerRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigDockerRepositoryArgs
            {
                CustomRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs
                {
                    Uri = "https://registry-1.docker.io",
                },
            },
            UpstreamCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs
            {
                UsernamePasswordCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs
                {
                    Username = "remote-username",
                    PasswordSecretVersion = example_remote_secretVersion.Name,
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
			SecretId: pulumi.String("example-secret"),
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{},
			},
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
			Secret:     example_remote_secret.ID(),
			SecretData: pulumi.String("remote-password"),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
			SecretId: example_remote_secret.ID(),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("example-docker-custom-remote"),
			Description:  pulumi.String("example remote custom docker repository with credentials"),
			Format:       pulumi.String("DOCKER"),
			Mode:         pulumi.String("REMOTE_REPOSITORY"),
			RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
				Description:               pulumi.String("custom docker remote with credentials"),
				DisableUpstreamValidation: pulumi.Bool(true),
				DockerRepository: &artifactregistry.RepositoryRemoteRepositoryConfigDockerRepositoryArgs{
					CustomRepository: &artifactregistry.RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs{
						Uri: pulumi.String("https://registry-1.docker.io"),
					},
				},
				UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
					UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
						Username:              pulumi.String("remote-username"),
						PasswordSecretVersion: example_remote_secretVersion.Name,
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigDockerRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
            .secretId("example-secret")
            .replication(SecretReplicationArgs.builder()
                .auto()
                .build())
            .build());

        var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
            .secret(example_remote_secret.id())
            .secretData("remote-password")
            .build());

        var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
            .secretId(example_remote_secret.id())
            .role("roles/secretmanager.secretAccessor")
            .member(String.format("serviceAccount:service-%s@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("example-docker-custom-remote")
            .description("example remote custom docker repository with credentials")
            .format("DOCKER")
            .mode("REMOTE_REPOSITORY")
            .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
                .description("custom docker remote with credentials")
                .disableUpstreamValidation(true)
                .dockerRepository(RepositoryRemoteRepositoryConfigDockerRepositoryArgs.builder()
                    .customRepository(RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryArgs.builder()
                        .uri("https://registry-1.docker.io")
                        .build())
                    .build())
                .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
                    .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
                        .username("remote-username")
                        .passwordSecretVersion(example_remote_secretVersion.name())
                        .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example-remote-secret:
    type: gcp:secretmanager:Secret
    properties:
      secretId: example-secret
      replication:
        auto: {}
  example-remote-secretVersion:
    type: gcp:secretmanager:SecretVersion
    name: example-remote-secret_version
    properties:
      secret: ${["example-remote-secret"].id}
      secretData: remote-password
  secret-access:
    type: gcp:secretmanager:SecretIamMember
    properties:
      secretId: ${["example-remote-secret"].id}
      role: roles/secretmanager.secretAccessor
      member: serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: example-docker-custom-remote
      description: example remote custom docker repository with credentials
      format: DOCKER
      mode: REMOTE_REPOSITORY
      remoteRepositoryConfig:
        description: custom docker remote with credentials
        disableUpstreamValidation: true
        dockerRepository:
          customRepository:
            uri: https://registry-1.docker.io
        upstreamCredentials:
          usernamePasswordCredentials:
            username: remote-username
            passwordSecretVersion: ${["example-remote-secretVersion"].name}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Remote Maven Custom With Auth


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const example_remote_secret = new gcp.secretmanager.Secret("example-remote-secret", {
    secretId: "example-secret",
    replication: {
        auto: {},
    },
});
const example_remote_secretVersion = new gcp.secretmanager.SecretVersion("example-remote-secret_version", {
    secret: example_remote_secret.id,
    secretData: "remote-password",
});
const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
    secretId: example_remote_secret.id,
    role: "roles/secretmanager.secretAccessor",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com`),
});
const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "example-maven-custom-remote",
    description: "example remote custom maven repository with credentials",
    format: "MAVEN",
    mode: "REMOTE_REPOSITORY",
    remoteRepositoryConfig: {
        description: "custom maven remote with credentials",
        disableUpstreamValidation: true,
        mavenRepository: {
            customRepository: {
                uri: "https://my.maven.registry",
            },
        },
        upstreamCredentials: {
            usernamePasswordCredentials: {
                username: "remote-username",
                passwordSecretVersion: example_remote_secretVersion.name,
            },
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
example_remote_secret = gcp.secretmanager.Secret("example-remote-secret",
    secret_id="example-secret",
    replication={
        "auto": {},
    })
example_remote_secret_version = gcp.secretmanager.SecretVersion("example-remote-secret_version",
    secret=example_remote_secret.id,
    secret_data="remote-password")
secret_access = gcp.secretmanager.SecretIamMember("secret-access",
    secret_id=example_remote_secret.id,
    role="roles/secretmanager.secretAccessor",
    member=f"serviceAccount:service-{project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com")
my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="example-maven-custom-remote",
    description="example remote custom maven repository with credentials",
    format="MAVEN",
    mode="REMOTE_REPOSITORY",
    remote_repository_config={
        "description": "custom maven remote with credentials",
        "disable_upstream_validation": True,
        "maven_repository": {
            "custom_repository": {
                "uri": "https://my.maven.registry",
            },
        },
        "upstream_credentials": {
            "username_password_credentials": {
                "username": "remote-username",
                "password_secret_version": example_remote_secret_version.name,
            },
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var example_remote_secret = new Gcp.SecretManager.Secret("example-remote-secret", new()
    {
        SecretId = "example-secret",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = null,
        },
    });

    var example_remote_secretVersion = new Gcp.SecretManager.SecretVersion("example-remote-secret_version", new()
    {
        Secret = example_remote_secret.Id,
        SecretData = "remote-password",
    });

    var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new()
    {
        SecretId = example_remote_secret.Id,
        Role = "roles/secretmanager.secretAccessor",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-artifactregistry.iam.gserviceaccount.com",
    });

    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "example-maven-custom-remote",
        Description = "example remote custom maven repository with credentials",
        Format = "MAVEN",
        Mode = "REMOTE_REPOSITORY",
        RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
        {
            Description = "custom maven remote with credentials",
            DisableUpstreamValidation = true,
            MavenRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigMavenRepositoryArgs
            {
                CustomRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs
                {
                    Uri = "https://my.maven.registry",
                },
            },
            UpstreamCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs
            {
                UsernamePasswordCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs
                {
                    Username = "remote-username",
                    PasswordSecretVersion = example_remote_secretVersion.Name,
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
			SecretId: pulumi.String("example-secret"),
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{},
			},
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
			Secret:     example_remote_secret.ID(),
			SecretData: pulumi.String("remote-password"),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
			SecretId: example_remote_secret.ID(),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("example-maven-custom-remote"),
			Description:  pulumi.String("example remote custom maven repository with credentials"),
			Format:       pulumi.String("MAVEN"),
			Mode:         pulumi.String("REMOTE_REPOSITORY"),
			RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
				Description:               pulumi.String("custom maven remote with credentials"),
				DisableUpstreamValidation: pulumi.Bool(true),
				MavenRepository: &artifactregistry.RepositoryRemoteRepositoryConfigMavenRepositoryArgs{
					CustomRepository: &artifactregistry.RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs{
						Uri: pulumi.String("https://my.maven.registry"),
					},
				},
				UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
					UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
						Username:              pulumi.String("remote-username"),
						PasswordSecretVersion: example_remote_secretVersion.Name,
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigMavenRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
            .secretId("example-secret")
            .replication(SecretReplicationArgs.builder()
                .auto()
                .build())
            .build());

        var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
            .secret(example_remote_secret.id())
            .secretData("remote-password")
            .build());

        var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
            .secretId(example_remote_secret.id())
            .role("roles/secretmanager.secretAccessor")
            .member(String.format("serviceAccount:service-%s@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("example-maven-custom-remote")
            .description("example remote custom maven repository with credentials")
            .format("MAVEN")
            .mode("REMOTE_REPOSITORY")
            .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
                .description("custom maven remote with credentials")
                .disableUpstreamValidation(true)
                .mavenRepository(RepositoryRemoteRepositoryConfigMavenRepositoryArgs.builder()
                    .customRepository(RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryArgs.builder()
                        .uri("https://my.maven.registry")
                        .build())
                    .build())
                .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
                    .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
                        .username("remote-username")
                        .passwordSecretVersion(example_remote_secretVersion.name())
                        .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example-remote-secret:
    type: gcp:secretmanager:Secret
    properties:
      secretId: example-secret
      replication:
        auto: {}
  example-remote-secretVersion:
    type: gcp:secretmanager:SecretVersion
    name: example-remote-secret_version
    properties:
      secret: ${["example-remote-secret"].id}
      secretData: remote-password
  secret-access:
    type: gcp:secretmanager:SecretIamMember
    properties:
      secretId: ${["example-remote-secret"].id}
      role: roles/secretmanager.secretAccessor
      member: serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: example-maven-custom-remote
      description: example remote custom maven repository with credentials
      format: MAVEN
      mode: REMOTE_REPOSITORY
      remoteRepositoryConfig:
        description: custom maven remote with credentials
        disableUpstreamValidation: true
        mavenRepository:
          customRepository:
            uri: https://my.maven.registry
        upstreamCredentials:
          usernamePasswordCredentials:
            username: remote-username
            passwordSecretVersion: ${["example-remote-secretVersion"].name}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Remote Npm Custom With Auth


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const example_remote_secret = new gcp.secretmanager.Secret("example-remote-secret", {
    secretId: "example-secret",
    replication: {
        auto: {},
    },
});
const example_remote_secretVersion = new gcp.secretmanager.SecretVersion("example-remote-secret_version", {
    secret: example_remote_secret.id,
    secretData: "remote-password",
});
const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
    secretId: example_remote_secret.id,
    role: "roles/secretmanager.secretAccessor",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com`),
});
const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "example-npm-custom-remote",
    description: "example remote custom npm repository with credentials",
    format: "NPM",
    mode: "REMOTE_REPOSITORY",
    remoteRepositoryConfig: {
        description: "custom npm with credentials",
        disableUpstreamValidation: true,
        npmRepository: {
            customRepository: {
                uri: "https://my.npm.registry",
            },
        },
        upstreamCredentials: {
            usernamePasswordCredentials: {
                username: "remote-username",
                passwordSecretVersion: example_remote_secretVersion.name,
            },
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
example_remote_secret = gcp.secretmanager.Secret("example-remote-secret",
    secret_id="example-secret",
    replication={
        "auto": {},
    })
example_remote_secret_version = gcp.secretmanager.SecretVersion("example-remote-secret_version",
    secret=example_remote_secret.id,
    secret_data="remote-password")
secret_access = gcp.secretmanager.SecretIamMember("secret-access",
    secret_id=example_remote_secret.id,
    role="roles/secretmanager.secretAccessor",
    member=f"serviceAccount:service-{project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com")
my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="example-npm-custom-remote",
    description="example remote custom npm repository with credentials",
    format="NPM",
    mode="REMOTE_REPOSITORY",
    remote_repository_config={
        "description": "custom npm with credentials",
        "disable_upstream_validation": True,
        "npm_repository": {
            "custom_repository": {
                "uri": "https://my.npm.registry",
            },
        },
        "upstream_credentials": {
            "username_password_credentials": {
                "username": "remote-username",
                "password_secret_version": example_remote_secret_version.name,
            },
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var example_remote_secret = new Gcp.SecretManager.Secret("example-remote-secret", new()
    {
        SecretId = "example-secret",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = null,
        },
    });

    var example_remote_secretVersion = new Gcp.SecretManager.SecretVersion("example-remote-secret_version", new()
    {
        Secret = example_remote_secret.Id,
        SecretData = "remote-password",
    });

    var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new()
    {
        SecretId = example_remote_secret.Id,
        Role = "roles/secretmanager.secretAccessor",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-artifactregistry.iam.gserviceaccount.com",
    });

    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "example-npm-custom-remote",
        Description = "example remote custom npm repository with credentials",
        Format = "NPM",
        Mode = "REMOTE_REPOSITORY",
        RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
        {
            Description = "custom npm with credentials",
            DisableUpstreamValidation = true,
            NpmRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigNpmRepositoryArgs
            {
                CustomRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs
                {
                    Uri = "https://my.npm.registry",
                },
            },
            UpstreamCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs
            {
                UsernamePasswordCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs
                {
                    Username = "remote-username",
                    PasswordSecretVersion = example_remote_secretVersion.Name,
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
			SecretId: pulumi.String("example-secret"),
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{},
			},
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
			Secret:     example_remote_secret.ID(),
			SecretData: pulumi.String("remote-password"),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
			SecretId: example_remote_secret.ID(),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("example-npm-custom-remote"),
			Description:  pulumi.String("example remote custom npm repository with credentials"),
			Format:       pulumi.String("NPM"),
			Mode:         pulumi.String("REMOTE_REPOSITORY"),
			RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
				Description:               pulumi.String("custom npm with credentials"),
				DisableUpstreamValidation: pulumi.Bool(true),
				NpmRepository: &artifactregistry.RepositoryRemoteRepositoryConfigNpmRepositoryArgs{
					CustomRepository: &artifactregistry.RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs{
						Uri: pulumi.String("https://my.npm.registry"),
					},
				},
				UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
					UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
						Username:              pulumi.String("remote-username"),
						PasswordSecretVersion: example_remote_secretVersion.Name,
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigNpmRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
            .secretId("example-secret")
            .replication(SecretReplicationArgs.builder()
                .auto()
                .build())
            .build());

        var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
            .secret(example_remote_secret.id())
            .secretData("remote-password")
            .build());

        var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
            .secretId(example_remote_secret.id())
            .role("roles/secretmanager.secretAccessor")
            .member(String.format("serviceAccount:service-%s@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("example-npm-custom-remote")
            .description("example remote custom npm repository with credentials")
            .format("NPM")
            .mode("REMOTE_REPOSITORY")
            .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
                .description("custom npm with credentials")
                .disableUpstreamValidation(true)
                .npmRepository(RepositoryRemoteRepositoryConfigNpmRepositoryArgs.builder()
                    .customRepository(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs.builder()
                        .uri("https://my.npm.registry")
                        .build())
                    .build())
                .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
                    .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
                        .username("remote-username")
                        .passwordSecretVersion(example_remote_secretVersion.name())
                        .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example-remote-secret:
    type: gcp:secretmanager:Secret
    properties:
      secretId: example-secret
      replication:
        auto: {}
  example-remote-secretVersion:
    type: gcp:secretmanager:SecretVersion
    name: example-remote-secret_version
    properties:
      secret: ${["example-remote-secret"].id}
      secretData: remote-password
  secret-access:
    type: gcp:secretmanager:SecretIamMember
    properties:
      secretId: ${["example-remote-secret"].id}
      role: roles/secretmanager.secretAccessor
      member: serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: example-npm-custom-remote
      description: example remote custom npm repository with credentials
      format: NPM
      mode: REMOTE_REPOSITORY
      remoteRepositoryConfig:
        description: custom npm with credentials
        disableUpstreamValidation: true
        npmRepository:
          customRepository:
            uri: https://my.npm.registry
        upstreamCredentials:
          usernamePasswordCredentials:
            username: remote-username
            passwordSecretVersion: ${["example-remote-secretVersion"].name}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Remote Python Custom With Auth


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const example_remote_secret = new gcp.secretmanager.Secret("example-remote-secret", {
    secretId: "example-secret",
    replication: {
        auto: {},
    },
});
const example_remote_secretVersion = new gcp.secretmanager.SecretVersion("example-remote-secret_version", {
    secret: example_remote_secret.id,
    secretData: "remote-password",
});
const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
    secretId: example_remote_secret.id,
    role: "roles/secretmanager.secretAccessor",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com`),
});
const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "example-python-custom-remote",
    description: "example remote custom python repository with credentials",
    format: "PYTHON",
    mode: "REMOTE_REPOSITORY",
    remoteRepositoryConfig: {
        description: "custom npm with credentials",
        disableUpstreamValidation: true,
        pythonRepository: {
            customRepository: {
                uri: "https://my.python.registry",
            },
        },
        upstreamCredentials: {
            usernamePasswordCredentials: {
                username: "remote-username",
                passwordSecretVersion: example_remote_secretVersion.name,
            },
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
example_remote_secret = gcp.secretmanager.Secret("example-remote-secret",
    secret_id="example-secret",
    replication={
        "auto": {},
    })
example_remote_secret_version = gcp.secretmanager.SecretVersion("example-remote-secret_version",
    secret=example_remote_secret.id,
    secret_data="remote-password")
secret_access = gcp.secretmanager.SecretIamMember("secret-access",
    secret_id=example_remote_secret.id,
    role="roles/secretmanager.secretAccessor",
    member=f"serviceAccount:service-{project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com")
my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="example-python-custom-remote",
    description="example remote custom python repository with credentials",
    format="PYTHON",
    mode="REMOTE_REPOSITORY",
    remote_repository_config={
        "description": "custom npm with credentials",
        "disable_upstream_validation": True,
        "python_repository": {
            "custom_repository": {
                "uri": "https://my.python.registry",
            },
        },
        "upstream_credentials": {
            "username_password_credentials": {
                "username": "remote-username",
                "password_secret_version": example_remote_secret_version.name,
            },
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var example_remote_secret = new Gcp.SecretManager.Secret("example-remote-secret", new()
    {
        SecretId = "example-secret",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = null,
        },
    });

    var example_remote_secretVersion = new Gcp.SecretManager.SecretVersion("example-remote-secret_version", new()
    {
        Secret = example_remote_secret.Id,
        SecretData = "remote-password",
    });

    var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new()
    {
        SecretId = example_remote_secret.Id,
        Role = "roles/secretmanager.secretAccessor",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-artifactregistry.iam.gserviceaccount.com",
    });

    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "example-python-custom-remote",
        Description = "example remote custom python repository with credentials",
        Format = "PYTHON",
        Mode = "REMOTE_REPOSITORY",
        RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
        {
            Description = "custom npm with credentials",
            DisableUpstreamValidation = true,
            PythonRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigPythonRepositoryArgs
            {
                CustomRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs
                {
                    Uri = "https://my.python.registry",
                },
            },
            UpstreamCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs
            {
                UsernamePasswordCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs
                {
                    Username = "remote-username",
                    PasswordSecretVersion = example_remote_secretVersion.Name,
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
			SecretId: pulumi.String("example-secret"),
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{},
			},
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
			Secret:     example_remote_secret.ID(),
			SecretData: pulumi.String("remote-password"),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
			SecretId: example_remote_secret.ID(),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("example-python-custom-remote"),
			Description:  pulumi.String("example remote custom python repository with credentials"),
			Format:       pulumi.String("PYTHON"),
			Mode:         pulumi.String("REMOTE_REPOSITORY"),
			RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
				Description:               pulumi.String("custom npm with credentials"),
				DisableUpstreamValidation: pulumi.Bool(true),
				PythonRepository: &artifactregistry.RepositoryRemoteRepositoryConfigPythonRepositoryArgs{
					CustomRepository: &artifactregistry.RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs{
						Uri: pulumi.String("https://my.python.registry"),
					},
				},
				UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
					UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
						Username:              pulumi.String("remote-username"),
						PasswordSecretVersion: example_remote_secretVersion.Name,
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigPythonRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
            .secretId("example-secret")
            .replication(SecretReplicationArgs.builder()
                .auto()
                .build())
            .build());

        var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
            .secret(example_remote_secret.id())
            .secretData("remote-password")
            .build());

        var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
            .secretId(example_remote_secret.id())
            .role("roles/secretmanager.secretAccessor")
            .member(String.format("serviceAccount:service-%s@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("example-python-custom-remote")
            .description("example remote custom python repository with credentials")
            .format("PYTHON")
            .mode("REMOTE_REPOSITORY")
            .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
                .description("custom npm with credentials")
                .disableUpstreamValidation(true)
                .pythonRepository(RepositoryRemoteRepositoryConfigPythonRepositoryArgs.builder()
                    .customRepository(RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryArgs.builder()
                        .uri("https://my.python.registry")
                        .build())
                    .build())
                .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
                    .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
                        .username("remote-username")
                        .passwordSecretVersion(example_remote_secretVersion.name())
                        .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example-remote-secret:
    type: gcp:secretmanager:Secret
    properties:
      secretId: example-secret
      replication:
        auto: {}
  example-remote-secretVersion:
    type: gcp:secretmanager:SecretVersion
    name: example-remote-secret_version
    properties:
      secret: ${["example-remote-secret"].id}
      secretData: remote-password
  secret-access:
    type: gcp:secretmanager:SecretIamMember
    properties:
      secretId: ${["example-remote-secret"].id}
      role: roles/secretmanager.secretAccessor
      member: serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: example-python-custom-remote
      description: example remote custom python repository with credentials
      format: PYTHON
      mode: REMOTE_REPOSITORY
      remoteRepositoryConfig:
        description: custom npm with credentials
        disableUpstreamValidation: true
        pythonRepository:
          customRepository:
            uri: https://my.python.registry
        upstreamCredentials:
          usernamePasswordCredentials:
            username: remote-username
            passwordSecretVersion: ${["example-remote-secretVersion"].name}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Remote Common Repository With Docker


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const upstreamRepo = new gcp.artifactregistry.Repository("upstream_repo", {
    location: "us-central1",
    repositoryId: "example-upstream-repo",
    description: "example upstream repository",
    format: "DOCKER",
});
const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "example-common-remote",
    description: "example remote common repository with docker upstream",
    format: "DOCKER",
    mode: "REMOTE_REPOSITORY",
    remoteRepositoryConfig: {
        description: "pull-through cache of another Artifact Registry repository",
        commonRepository: {
            uri: upstreamRepo.id,
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

upstream_repo = gcp.artifactregistry.Repository("upstream_repo",
    location="us-central1",
    repository_id="example-upstream-repo",
    description="example upstream repository",
    format="DOCKER")
my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="example-common-remote",
    description="example remote common repository with docker upstream",
    format="DOCKER",
    mode="REMOTE_REPOSITORY",
    remote_repository_config={
        "description": "pull-through cache of another Artifact Registry repository",
        "common_repository": {
            "uri": upstream_repo.id,
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var upstreamRepo = new Gcp.ArtifactRegistry.Repository("upstream_repo", new()
    {
        Location = "us-central1",
        RepositoryId = "example-upstream-repo",
        Description = "example upstream repository",
        Format = "DOCKER",
    });

    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "example-common-remote",
        Description = "example remote common repository with docker upstream",
        Format = "DOCKER",
        Mode = "REMOTE_REPOSITORY",
        RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
        {
            Description = "pull-through cache of another Artifact Registry repository",
            CommonRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigCommonRepositoryArgs
            {
                Uri = upstreamRepo.Id,
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		upstreamRepo, err := artifactregistry.NewRepository(ctx, "upstream_repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("example-upstream-repo"),
			Description:  pulumi.String("example upstream repository"),
			Format:       pulumi.String("DOCKER"),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("example-common-remote"),
			Description:  pulumi.String("example remote common repository with docker upstream"),
			Format:       pulumi.String("DOCKER"),
			Mode:         pulumi.String("REMOTE_REPOSITORY"),
			RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
				Description: pulumi.String("pull-through cache of another Artifact Registry repository"),
				CommonRepository: &artifactregistry.RepositoryRemoteRepositoryConfigCommonRepositoryArgs{
					Uri: upstreamRepo.ID(),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigCommonRepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var upstreamRepo = new Repository("upstreamRepo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("example-upstream-repo")
            .description("example upstream repository")
            .format("DOCKER")
            .build());

        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("example-common-remote")
            .description("example remote common repository with docker upstream")
            .format("DOCKER")
            .mode("REMOTE_REPOSITORY")
            .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
                .description("pull-through cache of another Artifact Registry repository")
                .commonRepository(RepositoryRemoteRepositoryConfigCommonRepositoryArgs.builder()
                    .uri(upstreamRepo.id())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  upstreamRepo:
    type: gcp:artifactregistry:Repository
    name: upstream_repo
    properties:
      location: us-central1
      repositoryId: example-upstream-repo
      description: example upstream repository
      format: DOCKER
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: example-common-remote
      description: example remote common repository with docker upstream
      format: DOCKER
      mode: REMOTE_REPOSITORY
      remoteRepositoryConfig:
        description: pull-through cache of another Artifact Registry repository
        commonRepository:
          uri: ${upstreamRepo.id}
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Remote Common Repository With Artifact Registry Uri


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const upstreamRepo = new gcp.artifactregistry.Repository("upstream_repo", {
    location: "us-central1",
    repositoryId: "example-upstream-repo",
    description: "example upstream repository",
    format: "DOCKER",
});
const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "example-common-remote",
    description: "example remote common repository with docker upstream",
    format: "DOCKER",
    mode: "REMOTE_REPOSITORY",
    remoteRepositoryConfig: {
        description: "pull-through cache of another Artifact Registry repository by URL",
        commonRepository: {
            uri: "https://us-central1-docker.pkg.dev//example-upstream-repo",
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
upstream_repo = gcp.artifactregistry.Repository("upstream_repo",
    location="us-central1",
    repository_id="example-upstream-repo",
    description="example upstream repository",
    format="DOCKER")
my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="example-common-remote",
    description="example remote common repository with docker upstream",
    format="DOCKER",
    mode="REMOTE_REPOSITORY",
    remote_repository_config={
        "description": "pull-through cache of another Artifact Registry repository by URL",
        "common_repository": {
            "uri": "https://us-central1-docker.pkg.dev//example-upstream-repo",
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var upstreamRepo = new Gcp.ArtifactRegistry.Repository("upstream_repo", new()
    {
        Location = "us-central1",
        RepositoryId = "example-upstream-repo",
        Description = "example upstream repository",
        Format = "DOCKER",
    });

    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "example-common-remote",
        Description = "example remote common repository with docker upstream",
        Format = "DOCKER",
        Mode = "REMOTE_REPOSITORY",
        RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
        {
            Description = "pull-through cache of another Artifact Registry repository by URL",
            CommonRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigCommonRepositoryArgs
            {
                Uri = "https://us-central1-docker.pkg.dev//example-upstream-repo",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "upstream_repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("example-upstream-repo"),
			Description:  pulumi.String("example upstream repository"),
			Format:       pulumi.String("DOCKER"),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("example-common-remote"),
			Description:  pulumi.String("example remote common repository with docker upstream"),
			Format:       pulumi.String("DOCKER"),
			Mode:         pulumi.String("REMOTE_REPOSITORY"),
			RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
				Description: pulumi.String("pull-through cache of another Artifact Registry repository by URL"),
				CommonRepository: &artifactregistry.RepositoryRemoteRepositoryConfigCommonRepositoryArgs{
					Uri: pulumi.String("https://us-central1-docker.pkg.dev//example-upstream-repo"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigCommonRepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var upstreamRepo = new Repository("upstreamRepo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("example-upstream-repo")
            .description("example upstream repository")
            .format("DOCKER")
            .build());

        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("example-common-remote")
            .description("example remote common repository with docker upstream")
            .format("DOCKER")
            .mode("REMOTE_REPOSITORY")
            .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
                .description("pull-through cache of another Artifact Registry repository by URL")
                .commonRepository(RepositoryRemoteRepositoryConfigCommonRepositoryArgs.builder()
                    .uri("https://us-central1-docker.pkg.dev//example-upstream-repo")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  upstreamRepo:
    type: gcp:artifactregistry:Repository
    name: upstream_repo
    properties:
      location: us-central1
      repositoryId: example-upstream-repo
      description: example upstream repository
      format: DOCKER
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: example-common-remote
      description: example remote common repository with docker upstream
      format: DOCKER
      mode: REMOTE_REPOSITORY
      remoteRepositoryConfig:
        description: pull-through cache of another Artifact Registry repository by URL
        commonRepository:
          uri: https://us-central1-docker.pkg.dev//example-upstream-repo
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Artifact Registry Repository Remote Common Repository With Custom Upstream


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const example_remote_secret = new gcp.secretmanager.Secret("example-remote-secret", {
    secretId: "example-secret",
    replication: {
        auto: {},
    },
});
const example_remote_secretVersion = new gcp.secretmanager.SecretVersion("example-remote-secret_version", {
    secret: example_remote_secret.id,
    secretData: "remote-password",
});
const secret_access = new gcp.secretmanager.SecretIamMember("secret-access", {
    secretId: example_remote_secret.id,
    role: "roles/secretmanager.secretAccessor",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com`),
});
const my_repo = new gcp.artifactregistry.Repository("my-repo", {
    location: "us-central1",
    repositoryId: "example-docker-custom-remote",
    description: "example remote custom docker repository with credentials",
    format: "DOCKER",
    mode: "REMOTE_REPOSITORY",
    remoteRepositoryConfig: {
        description: "custom common docker remote with credentials",
        disableUpstreamValidation: true,
        commonRepository: {
            uri: "https://registry-1.docker.io",
        },
        upstreamCredentials: {
            usernamePasswordCredentials: {
                username: "remote-username",
                passwordSecretVersion: example_remote_secretVersion.name,
            },
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
example_remote_secret = gcp.secretmanager.Secret("example-remote-secret",
    secret_id="example-secret",
    replication={
        "auto": {},
    })
example_remote_secret_version = gcp.secretmanager.SecretVersion("example-remote-secret_version",
    secret=example_remote_secret.id,
    secret_data="remote-password")
secret_access = gcp.secretmanager.SecretIamMember("secret-access",
    secret_id=example_remote_secret.id,
    role="roles/secretmanager.secretAccessor",
    member=f"serviceAccount:service-{project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com")
my_repo = gcp.artifactregistry.Repository("my-repo",
    location="us-central1",
    repository_id="example-docker-custom-remote",
    description="example remote custom docker repository with credentials",
    format="DOCKER",
    mode="REMOTE_REPOSITORY",
    remote_repository_config={
        "description": "custom common docker remote with credentials",
        "disable_upstream_validation": True,
        "common_repository": {
            "uri": "https://registry-1.docker.io",
        },
        "upstream_credentials": {
            "username_password_credentials": {
                "username": "remote-username",
                "password_secret_version": example_remote_secret_version.name,
            },
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var example_remote_secret = new Gcp.SecretManager.Secret("example-remote-secret", new()
    {
        SecretId = "example-secret",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = null,
        },
    });

    var example_remote_secretVersion = new Gcp.SecretManager.SecretVersion("example-remote-secret_version", new()
    {
        Secret = example_remote_secret.Id,
        SecretData = "remote-password",
    });

    var secret_access = new Gcp.SecretManager.SecretIamMember("secret-access", new()
    {
        SecretId = example_remote_secret.Id,
        Role = "roles/secretmanager.secretAccessor",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-artifactregistry.iam.gserviceaccount.com",
    });

    var my_repo = new Gcp.ArtifactRegistry.Repository("my-repo", new()
    {
        Location = "us-central1",
        RepositoryId = "example-docker-custom-remote",
        Description = "example remote custom docker repository with credentials",
        Format = "DOCKER",
        Mode = "REMOTE_REPOSITORY",
        RemoteRepositoryConfig = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigArgs
        {
            Description = "custom common docker remote with credentials",
            DisableUpstreamValidation = true,
            CommonRepository = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigCommonRepositoryArgs
            {
                Uri = "https://registry-1.docker.io",
            },
            UpstreamCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs
            {
                UsernamePasswordCredentials = new Gcp.ArtifactRegistry.Inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs
                {
                    Username = "remote-username",
                    PasswordSecretVersion = example_remote_secretVersion.Name,
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecret(ctx, "example-remote-secret", &secretmanager.SecretArgs{
			SecretId: pulumi.String("example-secret"),
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{},
			},
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretVersion(ctx, "example-remote-secret_version", &secretmanager.SecretVersionArgs{
			Secret:     example_remote_secret.ID(),
			SecretData: pulumi.String("remote-password"),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamMember(ctx, "secret-access", &secretmanager.SecretIamMemberArgs{
			SecretId: example_remote_secret.ID(),
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member:   pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "my-repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-central1"),
			RepositoryId: pulumi.String("example-docker-custom-remote"),
			Description:  pulumi.String("example remote custom docker repository with credentials"),
			Format:       pulumi.String("DOCKER"),
			Mode:         pulumi.String("REMOTE_REPOSITORY"),
			RemoteRepositoryConfig: &artifactregistry.RepositoryRemoteRepositoryConfigArgs{
				Description:               pulumi.String("custom common docker remote with credentials"),
				DisableUpstreamValidation: pulumi.Bool(true),
				CommonRepository: &artifactregistry.RepositoryRemoteRepositoryConfigCommonRepositoryArgs{
					Uri: pulumi.String("https://registry-1.docker.io"),
				},
				UpstreamCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs{
					UsernamePasswordCredentials: &artifactregistry.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs{
						Username:              pulumi.String("remote-username"),
						PasswordSecretVersion: example_remote_secretVersion.Name,
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigCommonRepositoryArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var example_remote_secret = new Secret("example-remote-secret", SecretArgs.builder()
            .secretId("example-secret")
            .replication(SecretReplicationArgs.builder()
                .auto()
                .build())
            .build());

        var example_remote_secretVersion = new SecretVersion("example-remote-secretVersion", SecretVersionArgs.builder()
            .secret(example_remote_secret.id())
            .secretData("remote-password")
            .build());

        var secret_access = new SecretIamMember("secret-access", SecretIamMemberArgs.builder()
            .secretId(example_remote_secret.id())
            .role("roles/secretmanager.secretAccessor")
            .member(String.format("serviceAccount:service-%s@gcp-sa-artifactregistry.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("example-docker-custom-remote")
            .description("example remote custom docker repository with credentials")
            .format("DOCKER")
            .mode("REMOTE_REPOSITORY")
            .remoteRepositoryConfig(RepositoryRemoteRepositoryConfigArgs.builder()
                .description("custom common docker remote with credentials")
                .disableUpstreamValidation(true)
                .commonRepository(RepositoryRemoteRepositoryConfigCommonRepositoryArgs.builder()
                    .uri("https://registry-1.docker.io")
                    .build())
                .upstreamCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsArgs.builder()
                    .usernamePasswordCredentials(RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsArgs.builder()
                        .username("remote-username")
                        .passwordSecretVersion(example_remote_secretVersion.name())
                        .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  example-remote-secret:
    type: gcp:secretmanager:Secret
    properties:
      secretId: example-secret
      replication:
        auto: {}
  example-remote-secretVersion:
    type: gcp:secretmanager:SecretVersion
    name: example-remote-secret_version
    properties:
      secret: ${["example-remote-secret"].id}
      secretData: remote-password
  secret-access:
    type: gcp:secretmanager:SecretIamMember
    properties:
      secretId: ${["example-remote-secret"].id}
      role: roles/secretmanager.secretAccessor
      member: serviceAccount:service-${project.number}@gcp-sa-artifactregistry.iam.gserviceaccount.com
  my-repo:
    type: gcp:artifactregistry:Repository
    properties:
      location: us-central1
      repositoryId: example-docker-custom-remote
      description: example remote custom docker repository with credentials
      format: DOCKER
      mode: REMOTE_REPOSITORY
      remoteRepositoryConfig:
        description: custom common docker remote with credentials
        disableUpstreamValidation: true
        commonRepository:
          uri: https://registry-1.docker.io
        upstreamCredentials:
          usernamePasswordCredentials:
            username: remote-username
            passwordSecretVersion: ${["example-remote-secretVersion"].name}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Repository can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}`

* `{{project}}/{{location}}/{{repository_id}}`

* `{{location}}/{{repository_id}}`

When using the `pulumi import` command, Repository can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:artifactregistry/repository:Repository default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
```

```sh
$ pulumi import gcp:artifactregistry/repository:Repository default {{project}}/{{location}}/{{repository_id}}
```

```sh
$ pulumi import gcp:artifactregistry/repository:Repository default {{location}}/{{repository_id}}
```

¸
cleanupPoliciesyBw*u:s
q
artifactregistryRepositoryCleanupPolicyDgcp:artifactregistry/RepositoryCleanupPolicy:RepositoryCleanupPolicy©Cleanup policies for this repository. Cleanup policies indicate when
certain package versions can be automatically deleted.
Map keys are policy IDs supplied by users during policy creation. They must
unique within a repository and be under 128 characters in length.
Structure is documented below.
s
cleanupPolicyDryRunB
 VIf true, the cleanup pipeline is prevented from deleting versions in this
repository.
F
descriptionB" 1The user-provided description of the repository.

dockerConfigtBr:p
n
artifactregistryRepositoryDockerConfigBgcp:artifactregistry/RepositoryDockerConfig:RepositoryDockerConfigDocker repository config contains repository level configuration for the repositories of docker type.
Structure is documented below.
Ô
format" ÅThe format of packages that are stored in the repository. Supported formats
can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
You can only create alpha formats if you are a member of the
[alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
°

kmsKeyNameB" The Cloud KMS resource name of the customer managed encryption key thatâs
used to encrypt the contents of the Repository. Has the form:
`projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
This value may not be changed after the Repository has been created.
ä
labelsB2" ÑLabels with user-defined metadata.
This field may contain up to 64 entries. Label keys and values may be no
longer than 63 characters. Label keys must begin with a lowercase letter
and may only contain lowercase letters, numeric characters, underscores,
and dashes.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
Ì
locationB" ¹The name of the repository's location. In addition to specific regions,
special values for multi-region locations are `asia`, `europe`, and `us`.
See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
or use the
gcp.artifactregistry.getLocations
data source for possible values.
²
mavenConfigqBo:m
k
artifactregistryRepositoryMavenConfig@gcp:artifactregistry/RepositoryMavenConfig:RepositoryMavenConfig¯MavenRepositoryConfig is maven related repository details.
Provides additional configuration details for repositories of the maven
format type.
Structure is documented below.
Ü
modeB" ÍThe mode configures the repository to serve artifacts from different sources.
Default value is `STANDARD_REPOSITORY`.
Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.

remoteRepositoryConfigB:

artifactregistry RepositoryRemoteRepositoryConfigVgcp:artifactregistry/RepositoryRemoteRepositoryConfig:RepositoryRemoteRepositoryConfigOConfiguration specific for a Remote Repository.
Structure is documented below.
W
repositoryId" CThe last part of the repository name, for example:
"repo1"


- - -

virtualRepositoryConfigB:

artifactregistry!RepositoryVirtualRepositoryConfigXgcp:artifactregistry/RepositoryVirtualRepositoryConfig:RepositoryVirtualRepositoryConfigPConfiguration specific for a Virtual Repository.
Structure is documented below.
"¸
cleanupPoliciesyBw*u:s
q
artifactregistryRepositoryCleanupPolicyDgcp:artifactregistry/RepositoryCleanupPolicy:RepositoryCleanupPolicy©Cleanup policies for this repository. Cleanup policies indicate when
certain package versions can be automatically deleted.
Map keys are policy IDs supplied by users during policy creation. They must
unique within a repository and be under 128 characters in length.
Structure is documented below.
"s
cleanupPolicyDryRunB
 VIf true, the cleanup pipeline is prevented from deleting versions in this
repository.
"<

createTime" *The time when the repository was created.
"F
descriptionB" 1The user-provided description of the repository.
"
dockerConfigtBr:p
n
artifactregistryRepositoryDockerConfigBgcp:artifactregistry/RepositoryDockerConfig:RepositoryDockerConfigDocker repository config contains repository level configuration for the repositories of docker type.
Structure is documented below.
"¦
effectiveLabels2" All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"Ô
format" ÅThe format of packages that are stored in the repository. Supported formats
can be found [here](https://cloud.google.com/artifact-registry/docs/supported-formats).
You can only create alpha formats if you are a member of the
[alpha user group](https://cloud.google.com/artifact-registry/docs/supported-formats#alpha-access).
"°

kmsKeyNameB" The Cloud KMS resource name of the customer managed encryption key thatâs
used to encrypt the contents of the Repository. Has the form:
`projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
This value may not be changed after the Repository has been created.
"ä
labelsB2" ÑLabels with user-defined metadata.
This field may contain up to 64 entries. Label keys and values may be no
longer than 63 characters. Label keys must begin with a lowercase letter
and may only contain lowercase letters, numeric characters, underscores,
and dashes.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"Ê
location" ¹The name of the repository's location. In addition to specific regions,
special values for multi-region locations are `asia`, `europe`, and `us`.
See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
or use the
gcp.artifactregistry.getLocations
data source for possible values.
"²
mavenConfigqBo:m
k
artifactregistryRepositoryMavenConfig@gcp:artifactregistry/RepositoryMavenConfig:RepositoryMavenConfig¯MavenRepositoryConfig is maven related repository details.
Provides additional configuration details for repositories of the maven
format type.
Structure is documented below.
"Ü
modeB" ÍThe mode configures the repository to serve artifacts from different sources.
Default value is `STANDARD_REPOSITORY`.
Possible values are: `STANDARD_REPOSITORY`, `VIRTUAL_REPOSITORY`, `REMOTE_REPOSITORY`.
"=
name" 1The name of the repository, for example:
"repo1"
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"
remoteRepositoryConfigB:

artifactregistry RepositoryRemoteRepositoryConfigVgcp:artifactregistry/RepositoryRemoteRepositoryConfig:RepositoryRemoteRepositoryConfigOConfiguration specific for a Remote Repository.
Structure is documented below.
"W
repositoryId" CThe last part of the repository name, for example:
"repo1"


- - -
"A

updateTime" /The time when the repository was last updated.
"
virtualRepositoryConfigB:

artifactregistry!RepositoryVirtualRepositoryConfigXgcp:artifactregistry/RepositoryVirtualRepositoryConfig:RepositoryVirtualRepositoryConfigPConfiguration specific for a Virtual Repository.
Structure is documented below.
*÷ð
h
artifactregistryRepositoryIamBinding>gcp:artifactregistry/repositoryIamBinding:RepositoryIamBindingÇThree different resources help you manage your IAM policy for Artifact Registry Repository. Each of these resources serves a different use case:

* `gcp.artifactregistry.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.artifactregistry.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.artifactregistry.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.artifactregistry.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.artifactregistry.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.artifactregistry.RepositoryIamBinding` and `gcp.artifactregistry.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.artifactregistry.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.artifactregistry.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.artifactregistry.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/artifactregistry.reader",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.artifactregistry.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/artifactregistry.reader",
    "members": ["user:jane@example.com"],
}])
policy = gcp.artifactregistry.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/artifactregistry.reader",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ArtifactRegistry.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/artifactregistry.reader",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepositoryIamPolicy(ctx, "policy", &artifactregistry.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicy;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/artifactregistry.reader")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:artifactregistry:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/artifactregistry.reader
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.artifactregistry.RepositoryIamBinding("binding", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.artifactregistry.RepositoryIamBinding("binding",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ArtifactRegistry.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamBinding(ctx, "binding", &artifactregistry.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamBinding;
import com.pulumi.gcp.artifactregistry.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:artifactregistry:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.artifactregistry.RepositoryIamMember("member", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.artifactregistry.RepositoryIamMember("member",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ArtifactRegistry.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamMember(ctx, "member", &artifactregistry.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamMember;
import com.pulumi.gcp.artifactregistry.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:artifactregistry:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for Artifact Registry Repository
Three different resources help you manage your IAM policy for Artifact Registry Repository. Each of these resources serves a different use case:

* `gcp.artifactregistry.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.artifactregistry.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.artifactregistry.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.artifactregistry.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.artifactregistry.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.artifactregistry.RepositoryIamBinding` and `gcp.artifactregistry.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.artifactregistry.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.artifactregistry.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.artifactregistry.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/artifactregistry.reader",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.artifactregistry.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/artifactregistry.reader",
    "members": ["user:jane@example.com"],
}])
policy = gcp.artifactregistry.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/artifactregistry.reader",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ArtifactRegistry.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/artifactregistry.reader",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepositoryIamPolicy(ctx, "policy", &artifactregistry.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicy;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/artifactregistry.reader")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:artifactregistry:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/artifactregistry.reader
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.artifactregistry.RepositoryIamBinding("binding", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.artifactregistry.RepositoryIamBinding("binding",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ArtifactRegistry.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamBinding(ctx, "binding", &artifactregistry.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamBinding;
import com.pulumi.gcp.artifactregistry.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:artifactregistry:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.artifactregistry.RepositoryIamMember("member", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.artifactregistry.RepositoryIamMember("member",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ArtifactRegistry.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamMember(ctx, "member", &artifactregistry.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamMember;
import com.pulumi.gcp.artifactregistry.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:artifactregistry:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/repositories/{{repository}}

* {{project}}/{{location}}/{{repository}}

* {{location}}/{{repository}}

* {{repository}}

Any variables not passed in the import command will be taken from the provider configuration.

Artifact Registry repository IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:artifactregistry/repositoryIamBinding:RepositoryIamBinding editor "projects/{{project}}/locations/{{location}}/repositories/{{repository}} roles/artifactregistry.reader user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:artifactregistry/repositoryIamBinding:RepositoryIamBinding editor "projects/{{project}}/locations/{{location}}/repositories/{{repository}} roles/artifactregistry.reader"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:artifactregistry/repositoryIamBinding:RepositoryIamBinding editor projects/{{project}}/locations/{{location}}/repositories/{{repository}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.


	conditionB:

artifactregistryRepositoryIamBindingConditionPgcp:artifactregistry/RepositoryIamBindingCondition:RepositoryIamBindingConditionÞ
locationB" ËThe name of the repository's location. In addition to specific regions,
special values for multi-region locations are `asia`, `europe`, and `us`.
See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
or use the
gcp.artifactregistry.getLocations
data source for possible values. Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
Ö	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
M

repository" ;Used to find the parent resource to bind the IAM policy to
â
role" ÕThe role that should be applied. Only one
`gcp.artifactregistry.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"
	conditionB:

artifactregistryRepositoryIamBindingConditionPgcp:artifactregistry/RepositoryIamBindingCondition:RepositoryIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"Ü
location" ËThe name of the repository's location. In addition to specific regions,
special values for multi-region locations are `asia`, `europe`, and `us`.
See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
or use the
gcp.artifactregistry.getLocations
data source for possible values. Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
"Ö	
members*" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"M

repository" ;Used to find the parent resource to bind the IAM policy to
"â
role" ÕThe role that should be applied. Only one
`gcp.artifactregistry.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*âð
e
artifactregistryRepositoryIamMember<gcp:artifactregistry/repositoryIamMember:RepositoryIamMemberÇThree different resources help you manage your IAM policy for Artifact Registry Repository. Each of these resources serves a different use case:

* `gcp.artifactregistry.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.artifactregistry.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.artifactregistry.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.artifactregistry.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.artifactregistry.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.artifactregistry.RepositoryIamBinding` and `gcp.artifactregistry.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.artifactregistry.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.artifactregistry.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.artifactregistry.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/artifactregistry.reader",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.artifactregistry.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/artifactregistry.reader",
    "members": ["user:jane@example.com"],
}])
policy = gcp.artifactregistry.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/artifactregistry.reader",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ArtifactRegistry.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/artifactregistry.reader",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepositoryIamPolicy(ctx, "policy", &artifactregistry.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicy;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/artifactregistry.reader")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:artifactregistry:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/artifactregistry.reader
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.artifactregistry.RepositoryIamBinding("binding", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.artifactregistry.RepositoryIamBinding("binding",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ArtifactRegistry.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamBinding(ctx, "binding", &artifactregistry.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamBinding;
import com.pulumi.gcp.artifactregistry.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:artifactregistry:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.artifactregistry.RepositoryIamMember("member", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.artifactregistry.RepositoryIamMember("member",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ArtifactRegistry.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamMember(ctx, "member", &artifactregistry.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamMember;
import com.pulumi.gcp.artifactregistry.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:artifactregistry:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for Artifact Registry Repository
Three different resources help you manage your IAM policy for Artifact Registry Repository. Each of these resources serves a different use case:

* `gcp.artifactregistry.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.artifactregistry.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.artifactregistry.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.artifactregistry.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.artifactregistry.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.artifactregistry.RepositoryIamBinding` and `gcp.artifactregistry.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.artifactregistry.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.artifactregistry.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.artifactregistry.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/artifactregistry.reader",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.artifactregistry.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/artifactregistry.reader",
    "members": ["user:jane@example.com"],
}])
policy = gcp.artifactregistry.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/artifactregistry.reader",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ArtifactRegistry.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/artifactregistry.reader",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepositoryIamPolicy(ctx, "policy", &artifactregistry.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicy;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/artifactregistry.reader")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:artifactregistry:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/artifactregistry.reader
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.artifactregistry.RepositoryIamBinding("binding", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.artifactregistry.RepositoryIamBinding("binding",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ArtifactRegistry.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamBinding(ctx, "binding", &artifactregistry.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamBinding;
import com.pulumi.gcp.artifactregistry.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:artifactregistry:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.artifactregistry.RepositoryIamMember("member", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.artifactregistry.RepositoryIamMember("member",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ArtifactRegistry.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamMember(ctx, "member", &artifactregistry.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamMember;
import com.pulumi.gcp.artifactregistry.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:artifactregistry:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/repositories/{{repository}}

* {{project}}/{{location}}/{{repository}}

* {{location}}/{{repository}}

* {{repository}}

Any variables not passed in the import command will be taken from the provider configuration.

Artifact Registry repository IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:artifactregistry/repositoryIamMember:RepositoryIamMember editor "projects/{{project}}/locations/{{location}}/repositories/{{repository}} roles/artifactregistry.reader user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:artifactregistry/repositoryIamMember:RepositoryIamMember editor "projects/{{project}}/locations/{{location}}/repositories/{{repository}} roles/artifactregistry.reader"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:artifactregistry/repositoryIamMember:RepositoryIamMember editor projects/{{project}}/locations/{{location}}/repositories/{{repository}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.


	conditionB:

artifactregistryRepositoryIamMemberConditionNgcp:artifactregistry/RepositoryIamMemberCondition:RepositoryIamMemberConditionÞ
locationB" ËThe name of the repository's location. In addition to specific regions,
special values for multi-region locations are `asia`, `europe`, and `us`.
See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
or use the
gcp.artifactregistry.getLocations
data source for possible values. Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
Ó	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
M

repository" ;Used to find the parent resource to bind the IAM policy to
â
role" ÕThe role that should be applied. Only one
`gcp.artifactregistry.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"
	conditionB:

artifactregistryRepositoryIamMemberConditionNgcp:artifactregistry/RepositoryIamMemberCondition:RepositoryIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"Ü
location" ËThe name of the repository's location. In addition to specific regions,
special values for multi-region locations are `asia`, `europe`, and `us`.
See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
or use the
gcp.artifactregistry.getLocations
data source for possible values. Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
"Ó	
member" Ä	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"M

repository" ;Used to find the parent resource to bind the IAM policy to
"â
role" ÕThe role that should be applied. Only one
`gcp.artifactregistry.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*úØ
e
artifactregistryRepositoryIamPolicy<gcp:artifactregistry/repositoryIamPolicy:RepositoryIamPolicyÇThree different resources help you manage your IAM policy for Artifact Registry Repository. Each of these resources serves a different use case:

* `gcp.artifactregistry.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.artifactregistry.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.artifactregistry.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.artifactregistry.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.artifactregistry.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.artifactregistry.RepositoryIamBinding` and `gcp.artifactregistry.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.artifactregistry.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.artifactregistry.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.artifactregistry.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/artifactregistry.reader",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.artifactregistry.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/artifactregistry.reader",
    "members": ["user:jane@example.com"],
}])
policy = gcp.artifactregistry.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/artifactregistry.reader",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ArtifactRegistry.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/artifactregistry.reader",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepositoryIamPolicy(ctx, "policy", &artifactregistry.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicy;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/artifactregistry.reader")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:artifactregistry:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/artifactregistry.reader
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.artifactregistry.RepositoryIamBinding("binding", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.artifactregistry.RepositoryIamBinding("binding",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ArtifactRegistry.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamBinding(ctx, "binding", &artifactregistry.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamBinding;
import com.pulumi.gcp.artifactregistry.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:artifactregistry:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.artifactregistry.RepositoryIamMember("member", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.artifactregistry.RepositoryIamMember("member",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ArtifactRegistry.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamMember(ctx, "member", &artifactregistry.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamMember;
import com.pulumi.gcp.artifactregistry.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:artifactregistry:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for Artifact Registry Repository
Three different resources help you manage your IAM policy for Artifact Registry Repository. Each of these resources serves a different use case:

* `gcp.artifactregistry.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.artifactregistry.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.artifactregistry.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.artifactregistry.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.artifactregistry.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.artifactregistry.RepositoryIamBinding` and `gcp.artifactregistry.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.artifactregistry.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.artifactregistry.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.artifactregistry.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/artifactregistry.reader",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.artifactregistry.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/artifactregistry.reader",
    "members": ["user:jane@example.com"],
}])
policy = gcp.artifactregistry.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/artifactregistry.reader",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.ArtifactRegistry.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/artifactregistry.reader",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepositoryIamPolicy(ctx, "policy", &artifactregistry.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicy;
import com.pulumi.gcp.artifactregistry.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/artifactregistry.reader")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:artifactregistry:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/artifactregistry.reader
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.artifactregistry.RepositoryIamBinding("binding", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.artifactregistry.RepositoryIamBinding("binding",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.ArtifactRegistry.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamBinding(ctx, "binding", &artifactregistry.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamBinding;
import com.pulumi.gcp.artifactregistry.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:artifactregistry:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.artifactregistry.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.artifactregistry.RepositoryIamMember("member", {
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
    role: "roles/artifactregistry.reader",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.artifactregistry.RepositoryIamMember("member",
    project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"],
    role="roles/artifactregistry.reader",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.ArtifactRegistry.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
        Role = "roles/artifactregistry.reader",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewRepositoryIamMember(ctx, "member", &artifactregistry.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Location:   pulumi.Any(my_repo.Location),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/artifactregistry.reader"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.RepositoryIamMember;
import com.pulumi.gcp.artifactregistry.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .role("roles/artifactregistry.reader")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:artifactregistry:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      location: ${["my-repo"].location}
      repository: ${["my-repo"].name}
      role: roles/artifactregistry.reader
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/repositories/{{repository}}

* {{project}}/{{location}}/{{repository}}

* {{location}}/{{repository}}

* {{repository}}

Any variables not passed in the import command will be taken from the provider configuration.

Artifact Registry repository IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:artifactregistry/repositoryIamPolicy:RepositoryIamPolicy editor "projects/{{project}}/locations/{{location}}/repositories/{{repository}} roles/artifactregistry.reader user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:artifactregistry/repositoryIamPolicy:RepositoryIamPolicy editor "projects/{{project}}/locations/{{location}}/repositories/{{repository}} roles/artifactregistry.reader"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:artifactregistry/repositoryIamPolicy:RepositoryIamPolicy editor projects/{{project}}/locations/{{location}}/repositories/{{repository}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

Þ
locationB" ËThe name of the repository's location. In addition to specific regions,
special values for multi-region locations are `asia`, `europe`, and `us`.
See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
or use the
gcp.artifactregistry.getLocations
data source for possible values. Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
M

repository" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"Ü
location" ËThe name of the repository's location. In addition to specific regions,
special values for multi-region locations are `asia`, `europe`, and `us`.
See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
or use the
gcp.artifactregistry.getLocations
data source for possible values. Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"M

repository" ;Used to find the parent resource to bind the IAM policy to
*¥
M
artifactregistryVpcscConfig,gcp:artifactregistry/vpcscConfig:VpcscConfigý## Example Usage

### Artifact Registry Vpcsc Config


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_config = new gcp.artifactregistry.VpcscConfig("my-config", {
    location: "us-central1",
    vpcscPolicy: "ALLOW",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_config = gcp.artifactregistry.VpcscConfig("my-config",
    location="us-central1",
    vpcsc_policy="ALLOW")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_config = new Gcp.ArtifactRegistry.VpcscConfig("my-config", new()
    {
        Location = "us-central1",
        VpcscPolicy = "ALLOW",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.NewVpcscConfig(ctx, "my-config", &artifactregistry.VpcscConfigArgs{
			Location:    pulumi.String("us-central1"),
			VpcscPolicy: pulumi.String("ALLOW"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.VpcscConfig;
import com.pulumi.gcp.artifactregistry.VpcscConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_config = new VpcscConfig("my-config", VpcscConfigArgs.builder()
            .location("us-central1")
            .vpcscPolicy("ALLOW")
            .build());

    }
}
```
```yaml
resources:
  my-config:
    type: gcp:artifactregistry:VpcscConfig
    properties:
      location: us-central1
      vpcscPolicy: ALLOW
```
<!--End PulumiCodeChooser -->

## Import

VPCSCConfig can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/vpcscConfig/{{name}}`

* `{{project}}/{{location}}/{{name}}`

* `{{location}}/{{name}}`

When using the `pulumi import` command, VPCSCConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:artifactregistry/vpcscConfig:VpcscConfig default projects/{{project}}/locations/{{location}}/vpcscConfig/{{name}}
```

```sh
$ pulumi import gcp:artifactregistry/vpcscConfig:VpcscConfig default {{project}}/{{location}}/{{name}}
```

```sh
$ pulumi import gcp:artifactregistry/vpcscConfig:VpcscConfig default {{location}}/{{name}}
```

F
locationB" 4The name of the location this config is located in.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
g
vpcscPolicyB" RThe VPC SC policy for project and location.
Possible values are: `DENY`, `ALLOW`.
"D
location" 4The name of the location this config is located in.
"|
name" pThe name of the project's VPC SC Config.
Always of the form: projects/{project}/location/{location}/vpcscConfig
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"g
vpcscPolicyB" RThe VPC SC policy for project and location.
Possible values are: `DENY`, `ALLOW`.
2ø$
m
accessapprovalgetFolderServiceAccountBgcp:accessapproval/getFolderServiceAccount:getFolderServiceAccountÛ Get the email address of a folder's Access Approval service account.

Each Google Cloud folder has a unique service account used by Access Approval.
When using Access Approval with a
[custom signing key](https://cloud.google.com/cloud-provider-access-management/access-approval/docs/review-approve-access-requests-custom-keys),
this account needs to be granted the `cloudkms.signerVerifier` IAM role on the
Cloud KMS key used to sign approvals.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const serviceAccount = gcp.accessapproval.getFolderServiceAccount({
    folderId: "my-folder",
});
const iam = new gcp.kms.CryptoKeyIAMMember("iam", {
    cryptoKeyId: cryptoKey.id,
    role: "roles/cloudkms.signerVerifier",
    member: serviceAccount.then(serviceAccount => `serviceAccount:${serviceAccount.accountEmail}`),
});
```
```python
import pulumi
import pulumi_gcp as gcp

service_account = gcp.accessapproval.get_folder_service_account(folder_id="my-folder")
iam = gcp.kms.CryptoKeyIAMMember("iam",
    crypto_key_id=crypto_key["id"],
    role="roles/cloudkms.signerVerifier",
    member=f"serviceAccount:{service_account.account_email}")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var serviceAccount = Gcp.AccessApproval.GetFolderServiceAccount.Invoke(new()
    {
        FolderId = "my-folder",
    });

    var iam = new Gcp.Kms.CryptoKeyIAMMember("iam", new()
    {
        CryptoKeyId = cryptoKey.Id,
        Role = "roles/cloudkms.signerVerifier",
        Member = $"serviceAccount:{serviceAccount.Apply(getFolderServiceAccountResult => getFolderServiceAccountResult.AccountEmail)}",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accessapproval"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		serviceAccount, err := accessapproval.GetFolderServiceAccount(ctx, &accessapproval.GetFolderServiceAccountArgs{
			FolderId: "my-folder",
		}, nil)
		if err != nil {
			return err
		}
		_, err = kms.NewCryptoKeyIAMMember(ctx, "iam", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: pulumi.Any(cryptoKey.Id),
			Role:        pulumi.String("roles/cloudkms.signerVerifier"),
			Member:      pulumi.Sprintf("serviceAccount:%v", serviceAccount.AccountEmail),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accessapproval.AccessapprovalFunctions;
import com.pulumi.gcp.accessapproval.inputs.GetFolderServiceAccountArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var serviceAccount = AccessapprovalFunctions.getFolderServiceAccount(GetFolderServiceAccountArgs.builder()
            .folderId("my-folder")
            .build());

        var iam = new CryptoKeyIAMMember("iam", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(cryptoKey.id())
            .role("roles/cloudkms.signerVerifier")
            .member(String.format("serviceAccount:%s", serviceAccount.applyValue(getFolderServiceAccountResult -> getFolderServiceAccountResult.accountEmail())))
            .build());

    }
}
```
```yaml
resources:
  iam:
    type: gcp:kms:CryptoKeyIAMMember
    properties:
      cryptoKeyId: ${cryptoKey.id}
      role: roles/cloudkms.signerVerifier
      member: serviceAccount:${serviceAccount.accountEmail}
variables:
  serviceAccount:
    fn::invoke:
      function: gcp:accessapproval:getFolderServiceAccount
      arguments:
        folderId: my-folder
```
<!--End PulumiCodeChooser -->
C
folderId" 3The folder ID the service account was created for.
"
accountEmail" The email address of the service account. This value is
often used to refer to the service account in order to grant IAM permissions.
"
folderId" "E
id" ;The provider-assigned unique ID for this managed resource.
"o
name" cThe Access Approval service account resource name. Format is "folders/{folder_id}/serviceAccount".
2Ë&

accessapprovalgetOrganizationServiceAccountNgcp:accessapproval/getOrganizationServiceAccount:getOrganizationServiceAccountþ!Get the email address of an organization's Access Approval service account.

Each Google Cloud organization has a unique service account used by Access Approval.
When using Access Approval with a
[custom signing key](https://cloud.google.com/cloud-provider-access-management/access-approval/docs/review-approve-access-requests-custom-keys),
this account needs to be granted the `cloudkms.signerVerifier` IAM role on the
Cloud KMS key used to sign approvals.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const serviceAccount = gcp.accessapproval.getOrganizationServiceAccount({
    organizationId: "my-organization",
});
const iam = new gcp.kms.CryptoKeyIAMMember("iam", {
    cryptoKeyId: cryptoKey.id,
    role: "roles/cloudkms.signerVerifier",
    member: serviceAccount.then(serviceAccount => `serviceAccount:${serviceAccount.accountEmail}`),
});
```
```python
import pulumi
import pulumi_gcp as gcp

service_account = gcp.accessapproval.get_organization_service_account(organization_id="my-organization")
iam = gcp.kms.CryptoKeyIAMMember("iam",
    crypto_key_id=crypto_key["id"],
    role="roles/cloudkms.signerVerifier",
    member=f"serviceAccount:{service_account.account_email}")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var serviceAccount = Gcp.AccessApproval.GetOrganizationServiceAccount.Invoke(new()
    {
        OrganizationId = "my-organization",
    });

    var iam = new Gcp.Kms.CryptoKeyIAMMember("iam", new()
    {
        CryptoKeyId = cryptoKey.Id,
        Role = "roles/cloudkms.signerVerifier",
        Member = $"serviceAccount:{serviceAccount.Apply(getOrganizationServiceAccountResult => getOrganizationServiceAccountResult.AccountEmail)}",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accessapproval"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		serviceAccount, err := accessapproval.GetOrganizationServiceAccount(ctx, &accessapproval.GetOrganizationServiceAccountArgs{
			OrganizationId: "my-organization",
		}, nil)
		if err != nil {
			return err
		}
		_, err = kms.NewCryptoKeyIAMMember(ctx, "iam", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: pulumi.Any(cryptoKey.Id),
			Role:        pulumi.String("roles/cloudkms.signerVerifier"),
			Member:      pulumi.Sprintf("serviceAccount:%v", serviceAccount.AccountEmail),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accessapproval.AccessapprovalFunctions;
import com.pulumi.gcp.accessapproval.inputs.GetOrganizationServiceAccountArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var serviceAccount = AccessapprovalFunctions.getOrganizationServiceAccount(GetOrganizationServiceAccountArgs.builder()
            .organizationId("my-organization")
            .build());

        var iam = new CryptoKeyIAMMember("iam", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(cryptoKey.id())
            .role("roles/cloudkms.signerVerifier")
            .member(String.format("serviceAccount:%s", serviceAccount.applyValue(getOrganizationServiceAccountResult -> getOrganizationServiceAccountResult.accountEmail())))
            .build());

    }
}
```
```yaml
resources:
  iam:
    type: gcp:kms:CryptoKeyIAMMember
    properties:
      cryptoKeyId: ${cryptoKey.id}
      role: roles/cloudkms.signerVerifier
      member: serviceAccount:${serviceAccount.accountEmail}
variables:
  serviceAccount:
    fn::invoke:
      function: gcp:accessapproval:getOrganizationServiceAccount
      arguments:
        organizationId: my-organization
```
<!--End PulumiCodeChooser -->
O
organizationId" 9The organization ID the service account was created for.
"
accountEmail" The email address of the service account. This value is
often used to refer to the service account in order to grant IAM permissions.
"E
id" ;The provider-assigned unique ID for this managed resource.
"{
name" oThe Access Approval service account resource name. Format is "organizations/{organization_id}/serviceAccount".
"
organizationId" 2%
p
accessapprovalgetProjectServiceAccountDgcp:accessapproval/getProjectServiceAccount:getProjectServiceAccountö Get the email address of a project's Access Approval service account.

Each Google Cloud project has a unique service account used by Access Approval.
When using Access Approval with a
[custom signing key](https://cloud.google.com/cloud-provider-access-management/access-approval/docs/review-approve-access-requests-custom-keys),
this account needs to be granted the `cloudkms.signerVerifier` IAM role on the
Cloud KMS key used to sign approvals.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const serviceAccount = gcp.accessapproval.getProjectServiceAccount({
    projectId: "my-project",
});
const iam = new gcp.kms.CryptoKeyIAMMember("iam", {
    cryptoKeyId: cryptoKey.id,
    role: "roles/cloudkms.signerVerifier",
    member: serviceAccount.then(serviceAccount => `serviceAccount:${serviceAccount.accountEmail}`),
});
```
```python
import pulumi
import pulumi_gcp as gcp

service_account = gcp.accessapproval.get_project_service_account(project_id="my-project")
iam = gcp.kms.CryptoKeyIAMMember("iam",
    crypto_key_id=crypto_key["id"],
    role="roles/cloudkms.signerVerifier",
    member=f"serviceAccount:{service_account.account_email}")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var serviceAccount = Gcp.AccessApproval.GetProjectServiceAccount.Invoke(new()
    {
        ProjectId = "my-project",
    });

    var iam = new Gcp.Kms.CryptoKeyIAMMember("iam", new()
    {
        CryptoKeyId = cryptoKey.Id,
        Role = "roles/cloudkms.signerVerifier",
        Member = $"serviceAccount:{serviceAccount.Apply(getProjectServiceAccountResult => getProjectServiceAccountResult.AccountEmail)}",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accessapproval"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		serviceAccount, err := accessapproval.GetProjectServiceAccount(ctx, &accessapproval.GetProjectServiceAccountArgs{
			ProjectId: "my-project",
		}, nil)
		if err != nil {
			return err
		}
		_, err = kms.NewCryptoKeyIAMMember(ctx, "iam", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: pulumi.Any(cryptoKey.Id),
			Role:        pulumi.String("roles/cloudkms.signerVerifier"),
			Member:      pulumi.Sprintf("serviceAccount:%v", serviceAccount.AccountEmail),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accessapproval.AccessapprovalFunctions;
import com.pulumi.gcp.accessapproval.inputs.GetProjectServiceAccountArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var serviceAccount = AccessapprovalFunctions.getProjectServiceAccount(GetProjectServiceAccountArgs.builder()
            .projectId("my-project")
            .build());

        var iam = new CryptoKeyIAMMember("iam", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId(cryptoKey.id())
            .role("roles/cloudkms.signerVerifier")
            .member(String.format("serviceAccount:%s", serviceAccount.applyValue(getProjectServiceAccountResult -> getProjectServiceAccountResult.accountEmail())))
            .build());

    }
}
```
```yaml
resources:
  iam:
    type: gcp:kms:CryptoKeyIAMMember
    properties:
      cryptoKeyId: ${cryptoKey.id}
      role: roles/cloudkms.signerVerifier
      member: serviceAccount:${serviceAccount.accountEmail}
variables:
  serviceAccount:
    fn::invoke:
      function: gcp:accessapproval:getProjectServiceAccount
      arguments:
        projectId: my-project
```
<!--End PulumiCodeChooser -->
E
	projectId" 4The project ID the service account was created for.
"
accountEmail" The email address of the service account. This value is
often used to refer to the service account in order to grant IAM permissions.
"E
id" ;The provider-assigned unique ID for this managed resource.
"q
name" eThe Access Approval service account resource name. Format is "projects/{project_id}/serviceAccount".
"
	projectId" 2Ö
a
accesscontextmanagergetAccessPolicy8gcp:accesscontextmanager/getAccessPolicy:getAccessPolicyGet information about an Access Context Manager AccessPolicy.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy-org = gcp.accesscontextmanager.getAccessPolicy({
    parent: "organizations/1234567",
});
const policy-scoped = gcp.accesscontextmanager.getAccessPolicy({
    parent: "organizations/1234567",
    scopes: ["projects/1234567"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy_org = gcp.accesscontextmanager.get_access_policy(parent="organizations/1234567")
policy_scoped = gcp.accesscontextmanager.get_access_policy(parent="organizations/1234567",
    scopes=["projects/1234567"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy_org = Gcp.AccessContextManager.GetAccessPolicy.Invoke(new()
    {
        Parent = "organizations/1234567",
    });

    var policy_scoped = Gcp.AccessContextManager.GetAccessPolicy.Invoke(new()
    {
        Parent = "organizations/1234567",
        Scopes = new[]
        {
            "projects/1234567",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.LookupAccessPolicy(ctx, &accesscontextmanager.LookupAccessPolicyArgs{
			Parent: "organizations/1234567",
		}, nil)
		if err != nil {
			return err
		}
		_, err = accesscontextmanager.LookupAccessPolicy(ctx, &accesscontextmanager.LookupAccessPolicyArgs{
			Parent: "organizations/1234567",
			Scopes: []string{
				"projects/1234567",
			},
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccesscontextmanagerFunctions;
import com.pulumi.gcp.accesscontextmanager.inputs.GetAccessPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy-org = AccesscontextmanagerFunctions.getAccessPolicy(GetAccessPolicyArgs.builder()
            .parent("organizations/1234567")
            .build());

        final var policy-scoped = AccesscontextmanagerFunctions.getAccessPolicy(GetAccessPolicyArgs.builder()
            .parent("organizations/1234567")
            .scopes("projects/1234567")
            .build());

    }
}
```
```yaml
variables:
  policy-org:
    fn::invoke:
      function: gcp:accesscontextmanager:getAccessPolicy
      arguments:
        parent: organizations/1234567
  policy-scoped:
    fn::invoke:
      function: gcp:accesscontextmanager:getAccessPolicy
      arguments:
        parent: organizations/1234567
        scopes:
          - projects/1234567
```
<!--End PulumiCodeChooser -->
{
parent" mThe parent of this AccessPolicy in the Cloud Resource Hierarchy. Format: `organizations/{{organization_id}}`

scopesB*" wFolder or project on which this policy is applicable. Format: `folders/{{folder_id}}` or `projects/{{project_number}}`
"E
id" ;The provider-assigned unique ID for this managed resource.
"/
name" #Resource name of the AccessPolicy.
"
parent" "
scopesB*" "=
title" 0Human readable title. Does not affect behavior.
2Á
|
accesscontextmanagergetAccessPolicyIamPolicyJgcp:accesscontextmanager/getAccessPolicyIamPolicy:getAccessPolicyIamPolicyÈRetrieves the current IAM policy data for accesspolicy


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.accesscontextmanager.getAccessPolicyIamPolicy({
    name: access_policy.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.accesscontextmanager.get_access_policy_iam_policy(name=access_policy["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.AccessContextManager.GetAccessPolicyIamPolicy.Invoke(new()
    {
        Name = access_policy.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/accesscontextmanager"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := accesscontextmanager.LookupAccessPolicyIamPolicy(ctx, &accesscontextmanager.LookupAccessPolicyIamPolicyArgs{
			Name: access_policy.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.accesscontextmanager.AccesscontextmanagerFunctions;
import com.pulumi.gcp.accesscontextmanager.inputs.GetAccessPolicyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = AccesscontextmanagerFunctions.getAccessPolicyIamPolicy(GetAccessPolicyIamPolicyArgs.builder()
            .name(access_policy.name())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:accesscontextmanager:getAccessPolicyIamPolicy
      arguments:
        name: ${["access-policy"].name}
```
<!--End PulumiCodeChooser -->
G
name" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

name" "¤

policyData" (Required only by `gcp.accesscontextmanager.AccessPolicyIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
2¹
>
alloydbgetLocations%gcp:alloydb/getLocations:getLocations¯Use this data source to get information about the available locations. For more details refer the [API docs](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const qa = gcp.alloydb.getLocations({});
```
```python
import pulumi
import pulumi_gcp as gcp

qa = gcp.alloydb.get_locations()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var qa = Gcp.Alloydb.GetLocations.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := alloydb.GetLocations(ctx, &alloydb.GetLocationsArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.alloydb.AlloydbFunctions;
import com.pulumi.gcp.alloydb.inputs.GetLocationsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var qa = AlloydbFunctions.getLocations();

    }
}
```
```yaml
variables:
  qa:
    fn::invoke:
      function: gcp:alloydb:getLocations
      arguments: {}
```
<!--End PulumiCodeChooser -->
(
projectB" The ID of the project.
"E
id" ;The provider-assigned unique ID for this managed resource.
"Â
	locations\*Z:X
V
alloydbgetLocationsLocation5gcp:alloydb/getLocationsLocation:getLocationsLocationWContains a list of `location`, which contains the details about a particular location.
"
projectB" 2¨
e
alloydbgetSupportedDatabaseFlags?gcp:alloydb/getSupportedDatabaseFlags:getSupportedDatabaseFlagsÃUse this data source to get information about the supported alloydb database flags in a location.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const qa = gcp.alloydb.getSupportedDatabaseFlags({
    location: "us-central1",
});
```
```python
import pulumi
import pulumi_gcp as gcp

qa = gcp.alloydb.get_supported_database_flags(location="us-central1")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var qa = Gcp.Alloydb.GetSupportedDatabaseFlags.Invoke(new()
    {
        Location = "us-central1",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/alloydb"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := alloydb.GetSupportedDatabaseFlags(ctx, &alloydb.GetSupportedDatabaseFlagsArgs{
			Location: "us-central1",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.alloydb.AlloydbFunctions;
import com.pulumi.gcp.alloydb.inputs.GetSupportedDatabaseFlagsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var qa = AlloydbFunctions.getSupportedDatabaseFlags(GetSupportedDatabaseFlagsArgs.builder()
            .location("us-central1")
            .build());

    }
}
```
```yaml
variables:
  qa:
    fn::invoke:
      function: gcp:alloydb:getSupportedDatabaseFlags
      arguments:
        location: us-central1
```
<!--End PulumiCodeChooser -->
K
location" ;The canonical id of the location. For example: `us-east1`.
(
projectB" The ID of the project.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
location" "
projectB" "
supportedDatabaseFlags­*ª:§
¤
alloydb.getSupportedDatabaseFlagsSupportedDatabaseFlagigcp:alloydb/getSupportedDatabaseFlagsSupportedDatabaseFlag:getSupportedDatabaseFlagsSupportedDatabaseFlagOContains a list of `flag`, which contains the details about a particular flag.
2²
_

apigatewaygetApiConfigIamPolicy:gcp:apigateway/getApiConfigIamPolicy:getApiConfigIamPolicyg
api" \The API to attach the config to.
Used to find the parent resource to bind the IAM policy to

	apiConfig" 
projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"	
api" "
	apiConfig" "3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

policyData" (Required only by `gcp.apigateway.ApiConfigIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" 2
M

apigatewaygetApiIamPolicy.gcp:apigateway/getApiIamPolicy:getApiIamPolicy	
api" 
projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"	
api" "3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"

policyData" ~(Required only by `gcp.apigateway.ApiIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" 2
Y

apigatewaygetGatewayIamPolicy6gcp:apigateway/getGatewayIamPolicy:getGatewayIamPolicy
gateway" 
projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
Æ
regionB" µThe region of the gateway for the API.
Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
"3
etag" '(Computed) The etag of the IAM policy.
"
gateway" "E
id" ;The provider-assigned unique ID for this managed resource.
"

policyData" (Required only by `gcp.apigateway.GatewayIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" "
region" 2
]
apigeegetEnvironmentIamPolicy:gcp:apigee/getEnvironmentIamPolicy:getEnvironmentIamPolicy¯Retrieves the current IAM policy data for environment


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.apigee.getEnvironmentIamPolicy({
    orgId: apigeeEnvironment.orgId,
    envId: apigeeEnvironment.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.apigee.get_environment_iam_policy(org_id=apigee_environment["orgId"],
    env_id=apigee_environment["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.Apigee.GetEnvironmentIamPolicy.Invoke(new()
    {
        OrgId = apigeeEnvironment.OrgId,
        EnvId = apigeeEnvironment.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apigee"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apigee.LookupEnvironmentIamPolicy(ctx, &apigee.LookupEnvironmentIamPolicyArgs{
			OrgId: apigeeEnvironment.OrgId,
			EnvId: apigeeEnvironment.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apigee.ApigeeFunctions;
import com.pulumi.gcp.apigee.inputs.GetEnvironmentIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = ApigeeFunctions.getEnvironmentIamPolicy(GetEnvironmentIamPolicyArgs.builder()
            .orgId(apigeeEnvironment.orgId())
            .envId(apigeeEnvironment.name())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:apigee:getEnvironmentIamPolicy
      arguments:
        orgId: ${apigeeEnvironment.orgId}
        envId: ${apigeeEnvironment.name}
```
<!--End PulumiCodeChooser -->
H
envId" ;Used to find the parent resource to bind the IAM policy to

orgId" "
envId" "3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
orgId" "

policyData" (Required only by `gcp.apigee.EnvironmentIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
2¬
f
	appenginegetDefaultServiceAccount?gcp:appengine/getDefaultServiceAccount:getDefaultServiceAccountÅUse this data source to retrieve the default App Engine service account for the specified project.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.appengine.getDefaultServiceAccount({});
export const defaultAccount = _default.then(_default => _default.email);
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.appengine.get_default_service_account()
pulumi.export("defaultAccount", default.email)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.AppEngine.GetDefaultServiceAccount.Invoke();

    return new Dictionary<string, object?>
    {
        ["defaultAccount"] = @default.Apply(@default => @default.Apply(getDefaultServiceAccountResult => getDefaultServiceAccountResult.Email)),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/appengine"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := appengine.GetDefaultServiceAccount(ctx, &appengine.GetDefaultServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		ctx.Export("defaultAccount", _default.Email)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.appengine.AppengineFunctions;
import com.pulumi.gcp.appengine.inputs.GetDefaultServiceAccountArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = AppengineFunctions.getDefaultServiceAccount();

        ctx.export("defaultAccount", default_.email());
    }
}
```
```yaml
variables:
  default:
    fn::invoke:
      function: gcp:appengine:getDefaultServiceAccount
      arguments: {}
outputs:
  defaultAccount: ${default.email}
```
<!--End PulumiCodeChooser -->
V
projectB" EThe project ID. If it is not provided, the provider project is used.
"=
displayName" *The display name for the service account.
"^
email" QEmail address of the default service account used by App Engine in this project.
"E
id" ;The provider-assigned unique ID for this managed resource.
"µ
member" ¦The Identity of the service account in the form `serviceAccount:{email}`. This value is often used to refer to the service account in order to grant IAM permissions.
"=
name" 1The fully-qualified name of the service account.
"
project" "6
uniqueId" &The unique id of the service account.
2
B
apphubgetApplication(gcp:apphub/getApplication:getApplicationÙApplication is a functional grouping of Services and Workloads that helps achieve a desired end-to-end business functionality. Services and Workloads are owned by the Application.


## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const application = gcp.apphub.getApplication({
    project: "project-id",
    applicationId: "application",
    location: "location",
});
```
```python
import pulumi
import pulumi_gcp as gcp

application = gcp.apphub.get_application(project="project-id",
    application_id="application",
    location="location")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var application = Gcp.Apphub.GetApplication.Invoke(new()
    {
        Project = "project-id",
        ApplicationId = "application",
        Location = "location",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apphub.LookupApplication(ctx, &apphub.LookupApplicationArgs{
			Project:       "project-id",
			ApplicationId: "application",
			Location:      "location",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apphub.ApphubFunctions;
import com.pulumi.gcp.apphub.inputs.GetApplicationArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var application = ApphubFunctions.getApplication(GetApplicationArgs.builder()
            .project("project-id")
            .applicationId("application")
            .location("location")
            .build());

    }
}
```
```yaml
variables:
  application:
    fn::invoke:
      function: gcp:apphub:getApplication
      arguments:
        project: project-id
        applicationId: application
        location: location
```
<!--End PulumiCodeChooser -->

applicationId" 
location" 
project" "
applicationId" "q

attributesc*a:_
]
apphubgetApplicationAttribute:gcp:apphub/getApplicationAttribute:getApplicationAttribute"

createTime" "
description" "
displayName" "E
id" ;The provider-assigned unique ID for this managed resource.
"
location" "

name" "
project" "a
scopesW*U:S
Q
apphubgetApplicationScope2gcp:apphub/getApplicationScope:getApplicationScope"
state" "	
uid" "

updateTime" 2Ï
T
apphubgetDiscoveredService4gcp:apphub/getDiscoveredService:getDiscoveredServiceåGet information about a discovered service from its uri.


## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my-service = gcp.apphub.getDiscoveredService({
    location: "my-location",
    serviceUri: "my-service-uri",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_service = gcp.apphub.get_discovered_service(location="my-location",
    service_uri="my-service-uri")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_service = Gcp.Apphub.GetDiscoveredService.Invoke(new()
    {
        Location = "my-location",
        ServiceUri = "my-service-uri",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apphub.GetDiscoveredService(ctx, &apphub.GetDiscoveredServiceArgs{
			Location:   "my-location",
			ServiceUri: "my-service-uri",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apphub.ApphubFunctions;
import com.pulumi.gcp.apphub.inputs.GetDiscoveredServiceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var my-service = ApphubFunctions.getDiscoveredService(GetDiscoveredServiceArgs.builder()
            .location("my-location")
            .serviceUri("my-service-uri")
            .build());

    }
}
```
```yaml
variables:
  my-service:
    fn::invoke:
      function: gcp:apphub:getDiscoveredService
      arguments:
        location: my-location
        serviceUri: my-service-uri
```
<!--End PulumiCodeChooser -->
8
location" (The location of the discovered service.
=
projectB" ,The host project of the discovered service.
*

serviceUri" The uri of the service.
"E
id" ;The provider-assigned unique ID for this managed resource.
"F
location" 6The location that the underlying resource resides in.
"
name" Resource name of a Service. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}".
"
projectB" "
serviceProperties*:

apphub#getDiscoveredServiceServicePropertyRgcp:apphub/getDiscoveredServiceServiceProperty:getDiscoveredServiceServicePropertyhProperties of an underlying compute resource that can comprise a Service. Structure is documented below
"
serviceReferences*:

apphub$getDiscoveredServiceServiceReferenceTgcp:apphub/getDiscoveredServiceServiceReference:getDiscoveredServiceServiceReferencejReference to an underlying networking resource that can comprise a Service. Structure is documented below
"

serviceUri" 2
W
apphubgetDiscoveredWorkload6gcp:apphub/getDiscoveredWorkload:getDiscoveredWorkloadGet information about a discovered workload from its uri.


## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my-workload = gcp.apphub.getDiscoveredWorkload({
    location: "us-central1",
    workloadUri: "my-workload-uri",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_workload = gcp.apphub.get_discovered_workload(location="us-central1",
    workload_uri="my-workload-uri")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_workload = Gcp.Apphub.GetDiscoveredWorkload.Invoke(new()
    {
        Location = "us-central1",
        WorkloadUri = "my-workload-uri",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/apphub"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := apphub.GetDiscoveredWorkload(ctx, &apphub.GetDiscoveredWorkloadArgs{
			Location:    "us-central1",
			WorkloadUri: "my-workload-uri",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.apphub.ApphubFunctions;
import com.pulumi.gcp.apphub.inputs.GetDiscoveredWorkloadArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var my-workload = ApphubFunctions.getDiscoveredWorkload(GetDiscoveredWorkloadArgs.builder()
            .location("us-central1")
            .workloadUri("my-workload-uri")
            .build());

    }
}
```
```yaml
variables:
  my-workload:
    fn::invoke:
      function: gcp:apphub:getDiscoveredWorkload
      arguments:
        location: us-central1
        workloadUri: my-workload-uri
```
<!--End PulumiCodeChooser -->
9
location" )The location of the discovered workload.
>
projectB" -The host project of the discovered workload.
·
workloadUri" £The uri of the workload (instance group managed by the Instance Group Manager). Example: "//compute.googleapis.com/projects/1/regions/us-east1/instanceGroups/id1"
"E
id" ;The provider-assigned unique ID for this managed resource.
"F
location" 6The location that the underlying resource resides in.
"
name" Resource name of a Workload. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}".
"
projectB" "
workloadProperties*:

apphub%getDiscoveredWorkloadWorkloadPropertyVgcp:apphub/getDiscoveredWorkloadWorkloadProperty:getDiscoveredWorkloadWorkloadPropertyiProperties of an underlying compute resource that can comprise a Workload. Structure is documented below
"
workloadReferences*:

apphub&getDiscoveredWorkloadWorkloadReferenceXgcp:apphub/getDiscoveredWorkloadWorkloadReference:getDiscoveredWorkloadWorkloadReferencekReference to an underlying networking resource that can comprise a Workload. Structure is documented below
"
workloadUri" 2ö;
V
artifactregistrygetDockerImage2gcp:artifactregistry/getDockerImage:getDockerImageì.This data source fetches information from a provided Artifact Registry repository, including the fully qualified name and URI for an image, based on a the latest version of image name and optional digest or tag.

> **Note**
Requires one of the following OAuth scopes: `https://www.googleapis.com/auth/cloud-platform` or `https://www.googleapis.com/auth/cloud-platform.read-only`.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const myRepo = new gcp.artifactregistry.Repository("my_repo", {
    location: "us-west1",
    repositoryId: "my-repository",
    format: "DOCKER",
});
const myImage = gcp.artifactregistry.getDockerImageOutput({
    location: myRepo.location,
    repositoryId: myRepo.repositoryId,
    imageName: "my-image:my-tag",
});
const _default = new gcp.cloudrunv2.Service("default", {template: {
    containers: [{
        image: myImage.apply(myImage => myImage.selfLink),
    }],
}});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo = gcp.artifactregistry.Repository("my_repo",
    location="us-west1",
    repository_id="my-repository",
    format="DOCKER")
my_image = gcp.artifactregistry.get_docker_image_output(location=my_repo.location,
    repository_id=my_repo.repository_id,
    image_name="my-image:my-tag")
default = gcp.cloudrunv2.Service("default", template={
    "containers": [{
        "image": my_image.self_link,
    }],
})
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var myRepo = new Gcp.ArtifactRegistry.Repository("my_repo", new()
    {
        Location = "us-west1",
        RepositoryId = "my-repository",
        Format = "DOCKER",
    });

    var myImage = Gcp.ArtifactRegistry.GetDockerImage.Invoke(new()
    {
        Location = myRepo.Location,
        RepositoryId = myRepo.RepositoryId,
        ImageName = "my-image:my-tag",
    });

    var @default = new Gcp.CloudRunV2.Service("default", new()
    {
        Template = new Gcp.CloudRunV2.Inputs.ServiceTemplateArgs
        {
            Containers = new[]
            {
                new Gcp.CloudRunV2.Inputs.ServiceTemplateContainerArgs
                {
                    Image = myImage.Apply(getDockerImageResult => getDockerImageResult.SelfLink),
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/cloudrunv2"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myRepo, err := artifactregistry.NewRepository(ctx, "my_repo", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String("us-west1"),
			RepositoryId: pulumi.String("my-repository"),
			Format:       pulumi.String("DOCKER"),
		})
		if err != nil {
			return err
		}
		myImage := artifactregistry.GetDockerImageOutput(ctx, artifactregistry.GetDockerImageOutputArgs{
			Location:     myRepo.Location,
			RepositoryId: myRepo.RepositoryId,
			ImageName:    pulumi.String("my-image:my-tag"),
		}, nil)
		_, err = cloudrunv2.NewService(ctx, "default", &cloudrunv2.ServiceArgs{
			Template: &cloudrunv2.ServiceTemplateArgs{
				Containers: cloudrunv2.ServiceTemplateContainerArray{
					&cloudrunv2.ServiceTemplateContainerArgs{
						Image: myImage.ApplyT(func(myImage artifactregistry.GetDockerImageResult) (*string, error) {
							return &myImage.SelfLink, nil
						}).(pulumi.StringPtrOutput),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
import com.pulumi.gcp.artifactregistry.inputs.GetDockerImageArgs;
import com.pulumi.gcp.cloudrunv2.Service;
import com.pulumi.gcp.cloudrunv2.ServiceArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var myRepo = new Repository("myRepo", RepositoryArgs.builder()
            .location("us-west1")
            .repositoryId("my-repository")
            .format("DOCKER")
            .build());

        final var myImage = ArtifactregistryFunctions.getDockerImage(GetDockerImageArgs.builder()
            .location(myRepo.location())
            .repositoryId(myRepo.repositoryId())
            .imageName("my-image:my-tag")
            .build());

        var default_ = new Service("default", ServiceArgs.builder()
            .template(ServiceTemplateArgs.builder()
                .containers(ServiceTemplateContainerArgs.builder()
                    .image(myImage.applyValue(getDockerImageResult -> getDockerImageResult).applyValue(myImage -> myImage.applyValue(getDockerImageResult -> getDockerImageResult.selfLink())))
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  myRepo:
    type: gcp:artifactregistry:Repository
    name: my_repo
    properties:
      location: us-west1
      repositoryId: my-repository
      format: DOCKER
  default:
    type: gcp:cloudrunv2:Service
    properties:
      template:
        containers:
          - image: ${myImage.selfLink}
variables:
  myImage:
    fn::invoke:
      function: gcp:artifactregistry:getDockerImage
      arguments:
        location: ${myRepo.location}
        repositoryId: ${myRepo.repositoryId}
        imageName: my-image:my-tag
```
<!--End PulumiCodeChooser -->
x
	imageName" gThe image name to fetch. If no digest or tag is provided, then the latest modified image will be used.
7
location" 'The location of the artifact registry.
t
projectB" cThe project ID in which the resource belongs. If it is not provided, the provider project is used.
H
repositoryId" 4The last part of the repository name to fetch from.
"G
	buildTime" 6The time, as a RFC 3339 string, this image was built.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
	imageName" "=
imageSizeBytes" 'Calculated size of the image in bytes.
"
location" "h
	mediaType" WMedia type of this image, e.g. `application/vnd.docker.distribution.manifest.v2+json`.
"ð
name" ãThe fully qualified name of the fetched image.  This name has the form: `projects/{{project}}/locations/{{location}}/repository/{{repository_id}}/dockerImages/{{docker_image}}`. For example, 
```
projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
```
"
projectB" "
repositoryId" "Â
selfLink" ±The URI to access the image.  For example, 
```
us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
```
"<
tags*" .A list of all tags associated with the image.
"J

updateTime" 8The time, as a RFC 3339 string, this image was updated.
"y

uploadTime" gThe time, as a RFC 3339 string, the image was uploaded. For example, `2014-10-02T15:01:23.045123456Z`.
2Ò4
P
artifactregistrygetLocations.gcp:artifactregistry/getLocations:getLocationsß1Get Artifact Registry locations available for a project. 

To get more information about Artifact Registry, see:

* [API documentation](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations/list)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/artifact-registry/docs/overview)
    
## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const available = gcp.artifactregistry.getLocations({});
```
```python
import pulumi
import pulumi_gcp as gcp

available = gcp.artifactregistry.get_locations()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.ArtifactRegistry.GetLocations.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.GetLocations(ctx, &artifactregistry.GetLocationsArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = ArtifactregistryFunctions.getLocations();

    }
}
```
```yaml
variables:
  available:
    fn::invoke:
      function: gcp:artifactregistry:getLocations
      arguments: {}
```
<!--End PulumiCodeChooser -->


### Multi-Regional Artifact Registry Deployment

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const available = gcp.artifactregistry.getLocations({});
const repoOne = new gcp.artifactregistry.Repository("repo_one", {
    location: available.then(available => available.locations?.[0]),
    repositoryId: "repo-one",
    format: "apt",
});
const repoTwo = new gcp.artifactregistry.Repository("repo_two", {
    location: available.then(available => available.locations?.[1]),
    repositoryId: "repo-two",
    format: "apt",
});
```
```python
import pulumi
import pulumi_gcp as gcp

available = gcp.artifactregistry.get_locations()
repo_one = gcp.artifactregistry.Repository("repo_one",
    location=available.locations[0],
    repository_id="repo-one",
    format="apt")
repo_two = gcp.artifactregistry.Repository("repo_two",
    location=available.locations[1],
    repository_id="repo-two",
    format="apt")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.ArtifactRegistry.GetLocations.Invoke();

    var repoOne = new Gcp.ArtifactRegistry.Repository("repo_one", new()
    {
        Location = available.Apply(getLocationsResult => getLocationsResult.Locations[0]),
        RepositoryId = "repo-one",
        Format = "apt",
    });

    var repoTwo = new Gcp.ArtifactRegistry.Repository("repo_two", new()
    {
        Location = available.Apply(getLocationsResult => getLocationsResult.Locations[1]),
        RepositoryId = "repo-two",
        Format = "apt",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		available, err := artifactregistry.GetLocations(ctx, &artifactregistry.GetLocationsArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "repo_one", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String(available.Locations[0]),
			RepositoryId: pulumi.String("repo-one"),
			Format:       pulumi.String("apt"),
		})
		if err != nil {
			return err
		}
		_, err = artifactregistry.NewRepository(ctx, "repo_two", &artifactregistry.RepositoryArgs{
			Location:     pulumi.String(available.Locations[1]),
			RepositoryId: pulumi.String("repo-two"),
			Format:       pulumi.String("apt"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
import com.pulumi.gcp.artifactregistry.inputs.GetLocationsArgs;
import com.pulumi.gcp.artifactregistry.Repository;
import com.pulumi.gcp.artifactregistry.RepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = ArtifactregistryFunctions.getLocations();

        var repoOne = new Repository("repoOne", RepositoryArgs.builder()
            .location(available.applyValue(getLocationsResult -> getLocationsResult.locations()[0]))
            .repositoryId("repo-one")
            .format("apt")
            .build());

        var repoTwo = new Repository("repoTwo", RepositoryArgs.builder()
            .location(available.applyValue(getLocationsResult -> getLocationsResult.locations()[1]))
            .repositoryId("repo-two")
            .format("apt")
            .build());

    }
}
```
```yaml
resources:
  repoOne:
    type: gcp:artifactregistry:Repository
    name: repo_one
    properties:
      location: ${available.locations[0]}
      repositoryId: repo-one
      format: apt
  repoTwo:
    type: gcp:artifactregistry:Repository
    name: repo_two
    properties:
      location: ${available.locations[1]}
      repositoryId: repo-two
      format: apt
variables:
  available:
    fn::invoke:
      function: gcp:artifactregistry:getLocations
      arguments: {}
```
<!--End PulumiCodeChooser -->
h
projectB" WThe project to list versions for. If it
is not provided, the provider project is used.
"E
id" ;The provider-assigned unique ID for this managed resource.
"\
	locations*" IThe list of Artifact Registry locations available for the given project.
"
project" 2
S
artifactregistrygetRepository0gcp:artifactregistry/getRepository:getRepository¾Get information about a Google Artifact Registry Repository. For more information see
the [official documentation](https://cloud.google.com/artifact-registry/docs/)
and [API](https://cloud.google.com/artifact-registry/docs/apis).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my-repo = gcp.artifactregistry.getRepository({
    location: "us-central1",
    repositoryId: "my-repository",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo = gcp.artifactregistry.get_repository(location="us-central1",
    repository_id="my-repository")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_repo = Gcp.ArtifactRegistry.GetRepository.Invoke(new()
    {
        Location = "us-central1",
        RepositoryId = "my-repository",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.LookupRepository(ctx, &artifactregistry.LookupRepositoryArgs{
			Location:     "us-central1",
			RepositoryId: "my-repository",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var my-repo = ArtifactregistryFunctions.getRepository(GetRepositoryArgs.builder()
            .location("us-central1")
            .repositoryId("my-repository")
            .build());

    }
}
```
```yaml
variables:
  my-repo:
    fn::invoke:
      function: gcp:artifactregistry:getRepository
      arguments:
        location: us-central1
        repositoryId: my-repository
```
<!--End PulumiCodeChooser -->
X
location" HThe location of the artifact registry repository. eg us-central1

- - -
q
projectB" `The project in which the resource belongs. If it
is not provided, the provider project is used.
:
repositoryId" &The last part of the repository name.
"
cleanupPolicies*~:|
z
artifactregistrygetRepositoryCleanupPolicyJgcp:artifactregistry/getRepositoryCleanupPolicy:getRepositoryCleanupPolicy"
cleanupPolicyDryRun
 "

createTime" "
description" "
dockerConfigs}*{:y
w
artifactregistrygetRepositoryDockerConfigHgcp:artifactregistry/getRepositoryDockerConfig:getRepositoryDockerConfig"
effectiveLabels2" "
format" "E
id" ;The provider-assigned unique ID for this managed resource.
"

kmsKeyName" "
labels2" "
location" "
mavenConfigsz*x:v
t
artifactregistrygetRepositoryMavenConfigFgcp:artifactregistry/getRepositoryMavenConfig:getRepositoryMavenConfig"

mode" "

name" "
projectB" "
pulumiLabels2" "º
remoteRepositoryConfigs*:

artifactregistry#getRepositoryRemoteRepositoryConfig\gcp:artifactregistry/getRepositoryRemoteRepositoryConfig:getRepositoryRemoteRepositoryConfig"
repositoryId" "

updateTime" "¾
virtualRepositoryConfigs¡*:

artifactregistry$getRepositoryVirtualRepositoryConfig^gcp:artifactregistry/getRepositoryVirtualRepositoryConfig:getRepositoryVirtualRepositoryConfig2ß
n
artifactregistrygetRepositoryIamPolicyBgcp:artifactregistry/getRepositoryIamPolicy:getRepositoryIamPolicyØRetrieves the current IAM policy data for repository


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.artifactregistry.getRepositoryIamPolicy({
    project: my_repo.project,
    location: my_repo.location,
    repository: my_repo.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.artifactregistry.get_repository_iam_policy(project=my_repo["project"],
    location=my_repo["location"],
    repository=my_repo["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.ArtifactRegistry.GetRepositoryIamPolicy.Invoke(new()
    {
        Project = my_repo.Project,
        Location = my_repo.Location,
        Repository = my_repo.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/artifactregistry"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := artifactregistry.LookupRepositoryIamPolicy(ctx, &artifactregistry.LookupRepositoryIamPolicyArgs{
			Project:    pulumi.StringRef(my_repo.Project),
			Location:   pulumi.StringRef(my_repo.Location),
			Repository: my_repo.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.artifactregistry.ArtifactregistryFunctions;
import com.pulumi.gcp.artifactregistry.inputs.GetRepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = ArtifactregistryFunctions.getRepositoryIamPolicy(GetRepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .location(my_repo.location())
            .repository(my_repo.name())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:artifactregistry:getRepositoryIamPolicy
      arguments:
        project: ${["my-repo"].project}
        location: ${["my-repo"].location}
        repository: ${["my-repo"].name}
```
<!--End PulumiCodeChooser -->
Þ
locationB" ËThe name of the repository's location. In addition to specific regions,
special values for multi-region locations are `asia`, `europe`, and `us`.
See [here](https://cloud.google.com/artifact-registry/docs/repositories/repo-locations),
or use the
gcp.artifactregistry.getLocations
data source for possible values. Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.

projectB" The ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
M

repository" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
location" "

policyData" (Required only by `gcp.artifactregistry.RepositoryIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" "

repository" :å
d
accesscontextmanagerAccessLevelBasic:gcp:accesscontextmanager/AccessLevelBasic:AccessLevelBasicü
ù
combiningFunctionB" çHow the conditions list should be combined to determine if a request
is granted this AccessLevel. If AND is used, each Condition in
conditions must be satisfied for the AccessLevel to be applied. If
OR is used, at least one Condition in conditions must be satisfied
for the AccessLevel to be applied.
Default value is `AND`.
Possible values are: `AND`, `OR`.
ð

conditions*:

accesscontextmanagerAccessLevelBasicConditionLgcp:accesscontextmanager/AccessLevelBasicCondition:AccessLevelBasicConditionXA set of requirements for the AccessLevel to be granted.
Structure is documented below.
:¨

accesscontextmanagerAccessLevelBasicConditionLgcp:accesscontextmanager/AccessLevelBasicCondition:AccessLevelBasicCondition¤
¡á
devicePolicy¬B©:¦
£
accesscontextmanager%AccessLevelBasicConditionDevicePolicydgcp:accesscontextmanager/AccessLevelBasicConditionDevicePolicy:AccessLevelBasicConditionDevicePolicy¡Device specific restrictions, all restrictions must hold for
the Condition to be true. If not specified, all devices are
allowed.
Structure is documented below.
º
ipSubnetworksB*"  A list of CIDR block IP subnetwork specification. May be IPv4
or IPv6.
Note that for a CIDR IP address block, the specified IP address
portion must be properly truncated (i.e. all the host bits must
be zero) or the input is considered malformed. For example,
"192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
is not. The originating IP of a request must be in one of the
listed subnets in order for this Condition to be true.
If empty, all IP addresses are allowed.
ì
membersB*" ØAn allowed list of members (users, service accounts).
Using groups is not supported yet.
The signed-in user originating the request must be a part of one
of the provided members. If not specified, a request may come
from any user (logged in/not logged in, not present in any
groups, etc.).
Formats: `user:{emailid}`, `serviceAccount:{emailid}`
Ê
negateB
 ¹Whether to negate the Condition. If true, the Condition becomes
a NAND over its non-empty fields, each field must be false for
the Condition overall to be satisfied. Defaults to false.

regionsB*" pThe request must originate from one of the provided
countries/regions.
Format: A valid ISO 3166-1 alpha-2 code.
¹
requiredAccessLevelsB*" A list of other access levels defined in the same Policy,
referenced by resource name. Referencing an AccessLevel which
does not exist is an error. All access levels listed must be
granted for the Condition to be true.
Format: accessPolicies/{policy_id}/accessLevels/{short_name}
ÿ
vpcNetworkSources»B¸*µ:²
¯
accesscontextmanager)AccessLevelBasicConditionVpcNetworkSourcelgcp:accesscontextmanager/AccessLevelBasicConditionVpcNetworkSource:AccessLevelBasicConditionVpcNetworkSource«The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together with `ip_subnetworks`.
Structure is documented below.
:Ö	
£
accesscontextmanager%AccessLevelBasicConditionDevicePolicydgcp:accesscontextmanager/AccessLevelBasicConditionDevicePolicy:AccessLevelBasicConditionDevicePolicy­
ªÓ
allowedDeviceManagementLevelsB*" ©A list of allowed device management levels.
An empty list allows all management levels.
Each value may be one of: `MANAGEMENT_UNSPECIFIED`, `NONE`, `BASIC`, `COMPLETE`.
Û
allowedEncryptionStatusesB*" µA list of allowed encryptions statuses.
An empty list allows all statuses.
Each value may be one of: `ENCRYPTION_UNSPECIFIED`, `ENCRYPTION_UNSUPPORTED`, `UNENCRYPTED`, `ENCRYPTED`.
Ö
osConstraintsÓBÐ*Í:Ê
Ç
accesscontextmanager1AccessLevelBasicConditionDevicePolicyOsConstraint|gcp:accesscontextmanager/AccessLevelBasicConditionDevicePolicyOsConstraint:AccessLevelBasicConditionDevicePolicyOsConstraintoA list of allowed OS versions.
An empty list allows all types and all versions.
Structure is documented below.
]
requireAdminApprovalB
 ?Whether the device needs to be approved by the customer admin.
E
requireCorpOwnedB
 +Whether the device needs to be corp owned.
u
requireScreenLockB
 ZWhether or not screenlock is required for the DevicePolicy
to be true. Defaults to false.
:æ
Ç
accesscontextmanager1AccessLevelBasicConditionDevicePolicyOsConstraint|gcp:accesscontextmanager/AccessLevelBasicConditionDevicePolicyOsConstraint:AccessLevelBasicConditionDevicePolicyOsConstraint
¯
minimumVersionB" The minimum allowed OS version. If not set, any version
of this OS satisfies the constraint.
Format: "major.minor.patch" such as "10.5.301", "9.2.1".
¹
osType" ªThe operating system type of the device.
Possible values are: `OS_UNSPECIFIED`, `DESKTOP_MAC`, `DESKTOP_WINDOWS`, `DESKTOP_LINUX`, `DESKTOP_CHROME_OS`, `ANDROID`, `IOS`.
¥
requireVerifiedChromeOsB
 If you specify DESKTOP_CHROME_OS for osType, you can optionally include requireVerifiedChromeOs to require Chrome Verified Access.
:ñ
¯
accesscontextmanager)AccessLevelBasicConditionVpcNetworkSourcelgcp:accesscontextmanager/AccessLevelBasicConditionVpcNetworkSource:AccessLevelBasicConditionVpcNetworkSource¼
¹¶
vpcSubnetworkàBÝ:Ú
×
accesscontextmanager6AccessLevelBasicConditionVpcNetworkSourceVpcSubnetworkgcp:accesscontextmanager/AccessLevelBasicConditionVpcNetworkSourceVpcSubnetwork:AccessLevelBasicConditionVpcNetworkSourceVpcSubnetworkBSub networks within a VPC network.
Structure is documented below.
:ç
×
accesscontextmanager6AccessLevelBasicConditionVpcNetworkSourceVpcSubnetworkgcp:accesscontextmanager/AccessLevelBasicConditionVpcNetworkSourceVpcSubnetwork:AccessLevelBasicConditionVpcNetworkSourceVpcSubnetwork
°
network"  Required. Network name to be allowed by this Access Level. Networks of foreign organizations requires `compute.network.get` permission to be granted to caller.
R
vpcIpSubnetworksB*" 6CIDR block IP subnetwork specification. Must be IPv4.
:¸	

accesscontextmanager AccessLevelConditionDevicePolicyZgcp:accesscontextmanager/AccessLevelConditionDevicePolicy:AccessLevelConditionDevicePolicy
Ó
allowedDeviceManagementLevelsB*" ©A list of allowed device management levels.
An empty list allows all management levels.
Each value may be one of: `MANAGEMENT_UNSPECIFIED`, `NONE`, `BASIC`, `COMPLETE`.
Û
allowedEncryptionStatusesB*" µA list of allowed encryptions statuses.
An empty list allows all statuses.
Each value may be one of: `ENCRYPTION_UNSPECIFIED`, `ENCRYPTION_UNSUPPORTED`, `UNENCRYPTED`, `ENCRYPTED`.
Ç
osConstraintsÄBÁ*¾:»
¸
accesscontextmanager,AccessLevelConditionDevicePolicyOsConstraintrgcp:accesscontextmanager/AccessLevelConditionDevicePolicyOsConstraint:AccessLevelConditionDevicePolicyOsConstraintoA list of allowed OS versions.
An empty list allows all types and all versions.
Structure is documented below.
]
requireAdminApprovalB
 ?Whether the device needs to be approved by the customer admin.
E
requireCorpOwnedB
 +Whether the device needs to be corp owned.
u
requireScreenLockB
 ZWhether or not screenlock is required for the DevicePolicy
to be true. Defaults to false.
:¯
¸
accesscontextmanager,AccessLevelConditionDevicePolicyOsConstraintrgcp:accesscontextmanager/AccessLevelConditionDevicePolicyOsConstraint:AccessLevelConditionDevicePolicyOsConstraintñ
î¯
minimumVersionB" The minimum allowed OS version. If not set, any version
of this OS satisfies the constraint.
Format: "major.minor.patch" such as "10.5.301", "9.2.1".
¹
osType" ªThe operating system type of the device.
Possible values are: `OS_UNSPECIFIED`, `DESKTOP_MAC`, `DESKTOP_WINDOWS`, `DESKTOP_LINUX`, `DESKTOP_CHROME_OS`, `ANDROID`, `IOS`.
:Ò
 
accesscontextmanager$AccessLevelConditionVpcNetworkSourcebgcp:accesscontextmanager/AccessLevelConditionVpcNetworkSource:AccessLevelConditionVpcNetworkSource¬
©¦
vpcSubnetworkÐBÍ:Ê
Ç
accesscontextmanager1AccessLevelConditionVpcNetworkSourceVpcSubnetwork|gcp:accesscontextmanager/AccessLevelConditionVpcNetworkSourceVpcSubnetwork:AccessLevelConditionVpcNetworkSourceVpcSubnetworkBSub networks within a VPC network.
Structure is documented below.
:×
Ç
accesscontextmanager1AccessLevelConditionVpcNetworkSourceVpcSubnetwork|gcp:accesscontextmanager/AccessLevelConditionVpcNetworkSourceVpcSubnetwork:AccessLevelConditionVpcNetworkSourceVpcSubnetwork
°
network"  Required. Network name to be allowed by this Access Level. Networks of foreign organizations requires `compute.network.get` permission to be granted to caller.
R
vpcIpSubnetworksB*" 6CIDR block IP subnetwork specification. Must be IPv4.
:Î
g
accesscontextmanagerAccessLevelCustom<gcp:accesscontextmanager/AccessLevelCustom:AccessLevelCustomâ
ßÜ
exprw:u
s
accesscontextmanagerAccessLevelCustomExprDgcp:accesscontextmanager/AccessLevelCustomExpr:AccessLevelCustomExprÚRepresents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
This page details the objects and attributes that are used to the build the CEL expressions for
custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
Structure is documented below.
:ð
s
accesscontextmanagerAccessLevelCustomExprDgcp:accesscontextmanager/AccessLevelCustomExpr:AccessLevelCustomExprø
õ3
descriptionB" Description of the expression
`

expression" NTextual representation of an expression in Common Expression Language syntax.

locationB" rString indicating the location of the expression for error reporting, e.g. a file name and a position in the file
U
titleB" FTitle for the expression, i.e. a short string describing its purpose.
:	
y
accesscontextmanagerAccessLevelsAccessLevelHgcp:accesscontextmanager/AccessLevelsAccessLevel:AccessLevelsAccessLevel

basicB:

accesscontextmanagerAccessLevelsAccessLevelBasicRgcp:accesscontextmanager/AccessLevelsAccessLevelBasic:AccessLevelsAccessLevelBasicmA set of predefined conditions for the access level and a combining function.
Structure is documented below.

customB:

accesscontextmanagerAccessLevelsAccessLevelCustomTgcp:accesscontextmanager/AccessLevelsAccessLevelCustom:AccessLevelsAccessLevelCustomñCustom access level conditions are set using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request.
See CEL spec at: https://github.com/google/cel-spec.
Structure is documented below.
[
descriptionB" FDescription of the AccessLevel and its use. Does not affect behavior.
Ç
name" ºResource name for the Access Level. The short_name component must begin
with a letter and only include alphanumeric and '_'.
Format: accessPolicies/{policy_id}/accessLevels/{short_name}
E
title" 8Human readable title. Must be unique within the Policy.
:¯

accesscontextmanagerAccessLevelsAccessLevelBasicRgcp:accesscontextmanager/AccessLevelsAccessLevelBasic:AccessLevelsAccessLevelBasic¡

combiningFunctionB" çHow the conditions list should be combined to determine if a request
is granted this AccessLevel. If AND is used, each Condition in
conditions must be satisfied for the AccessLevel to be applied. If
OR is used, at least one Condition in conditions must be satisfied
for the AccessLevel to be applied.
Default value is `AND`.
Possible values are: `AND`, `OR`.


conditions¬*©:¦
£
accesscontextmanager%AccessLevelsAccessLevelBasicConditiondgcp:accesscontextmanager/AccessLevelsAccessLevelBasicCondition:AccessLevelsAccessLevelBasicConditionXA set of requirements for the AccessLevel to be granted.
Structure is documented below.
:
£
accesscontextmanager%AccessLevelsAccessLevelBasicConditiondgcp:accesscontextmanager/AccessLevelsAccessLevelBasicCondition:AccessLevelsAccessLevelBasicConditioní
ê
devicePolicyÐBÍ:Ê
Ç
accesscontextmanager1AccessLevelsAccessLevelBasicConditionDevicePolicy|gcp:accesscontextmanager/AccessLevelsAccessLevelBasicConditionDevicePolicy:AccessLevelsAccessLevelBasicConditionDevicePolicy¡Device specific restrictions, all restrictions must hold for
the Condition to be true. If not specified, all devices are
allowed.
Structure is documented below.
º
ipSubnetworksB*"  A list of CIDR block IP subnetwork specification. May be IPv4
or IPv6.
Note that for a CIDR IP address block, the specified IP address
portion must be properly truncated (i.e. all the host bits must
be zero) or the input is considered malformed. For example,
"192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
is not. The originating IP of a request must be in one of the
listed subnets in order for this Condition to be true.
If empty, all IP addresses are allowed.
ì
membersB*" ØAn allowed list of members (users, service accounts).
Using groups is not supported yet.
The signed-in user originating the request must be a part of one
of the provided members. If not specified, a request may come
from any user (logged in/not logged in, not present in any
groups, etc.).
Formats: `user:{emailid}`, `serviceAccount:{emailid}`
Ê
negateB
 ¹Whether to negate the Condition. If true, the Condition becomes
a NAND over its non-empty fields, each field must be false for
the Condition overall to be satisfied. Defaults to false.

regionsB*" pThe request must originate from one of the provided
countries/regions.
Format: A valid ISO 3166-1 alpha-2 code.
¹
requiredAccessLevelsB*" A list of other access levels defined in the same Policy,
referenced by resource name. Referencing an AccessLevel which
does not exist is an error. All access levels listed must be
granted for the Condition to be true.
Format: accessPolicies/{policy_id}/accessLevels/{short_name}
¤
vpcNetworkSourcesàBÝ*Ú:×
Ô
accesscontextmanager5AccessLevelsAccessLevelBasicConditionVpcNetworkSourcegcp:accesscontextmanager/AccessLevelsAccessLevelBasicConditionVpcNetworkSource:AccessLevelsAccessLevelBasicConditionVpcNetworkSource«The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together with `ip_subnetworks`.
Structure is documented below.
:

Ç
accesscontextmanager1AccessLevelsAccessLevelBasicConditionDevicePolicy|gcp:accesscontextmanager/AccessLevelsAccessLevelBasicConditionDevicePolicy:AccessLevelsAccessLevelBasicConditionDevicePolicyÒ
ÏÓ
allowedDeviceManagementLevelsB*" ©A list of allowed device management levels.
An empty list allows all management levels.
Each value may be one of: `MANAGEMENT_UNSPECIFIED`, `NONE`, `BASIC`, `COMPLETE`.
Û
allowedEncryptionStatusesB*" µA list of allowed encryptions statuses.
An empty list allows all statuses.
Each value may be one of: `ENCRYPTION_UNSPECIFIED`, `ENCRYPTION_UNSUPPORTED`, `UNENCRYPTED`, `ENCRYPTED`.
û
osConstraintsøBõ*ò:ï
ì
accesscontextmanager=AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintgcp:accesscontextmanager/AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraint:AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintoA list of allowed OS versions.
An empty list allows all types and all versions.
Structure is documented below.
]
requireAdminApprovalB
 ?Whether the device needs to be approved by the customer admin.
E
requireCorpOwnedB
 +Whether the device needs to be corp owned.
u
requireScreenLockB
 ZWhether or not screenlock is required for the DevicePolicy
to be true. Defaults to false.
:ã
ì
accesscontextmanager=AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintgcp:accesscontextmanager/AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraint:AccessLevelsAccessLevelBasicConditionDevicePolicyOsConstraintñ
î¯
minimumVersionB" The minimum allowed OS version. If not set, any version
of this OS satisfies the constraint.
Format: "major.minor.patch" such as "10.5.301", "9.2.1".
¹
osType" ªThe operating system type of the device.
Possible values are: `OS_UNSPECIFIED`, `DESKTOP_MAC`, `DESKTOP_WINDOWS`, `DESKTOP_LINUX`, `DESKTOP_CHROME_OS`, `ANDROID`, `IOS`.
:º
Ô
accesscontextmanager5AccessLevelsAccessLevelBasicConditionVpcNetworkSourcegcp:accesscontextmanager/AccessLevelsAccessLevelBasicConditionVpcNetworkSource:AccessLevelsAccessLevelBasicConditionVpcNetworkSourceà
ÝÚ
vpcSubnetworkB:þ
û
accesscontextmanagerBAccessLevelsAccessLevelBasicConditionVpcNetworkSourceVpcSubnetworkgcp:accesscontextmanager/AccessLevelsAccessLevelBasicConditionVpcNetworkSourceVpcSubnetwork:AccessLevelsAccessLevelBasicConditionVpcNetworkSourceVpcSubnetworkBSub networks within a VPC network.
Structure is documented below.
:
û
accesscontextmanagerBAccessLevelsAccessLevelBasicConditionVpcNetworkSourceVpcSubnetworkgcp:accesscontextmanager/AccessLevelsAccessLevelBasicConditionVpcNetworkSourceVpcSubnetwork:AccessLevelsAccessLevelBasicConditionVpcNetworkSourceVpcSubnetwork
°
network"  Required. Network name to be allowed by this Access Level. Networks of foreign organizations requires `compute.network.get` permission to be granted to caller.
R
vpcIpSubnetworksB*" 6CIDR block IP subnetwork specification. Must be IPv4.
:

accesscontextmanagerAccessLevelsAccessLevelCustomTgcp:accesscontextmanager/AccessLevelsAccessLevelCustom:AccessLevelsAccessLevelCustom

expr:

accesscontextmanager!AccessLevelsAccessLevelCustomExpr\gcp:accesscontextmanager/AccessLevelsAccessLevelCustomExpr:AccessLevelsAccessLevelCustomExprÚRepresents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
This page details the objects and attributes that are used to the build the CEL expressions for
custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
Structure is documented below.
:

accesscontextmanager!AccessLevelsAccessLevelCustomExpr\gcp:accesscontextmanager/AccessLevelsAccessLevelCustomExpr:AccessLevelsAccessLevelCustomExprø
õ3
descriptionB" Description of the expression
`

expression" NTextual representation of an expression in Common Expression Language syntax.

locationB" rString indicating the location of the expression for error reporting, e.g. a file name and a position in the file
U
titleB" FTitle for the expression, i.e. a short string describing its purpose.
:Ì

accesscontextmanagerAccessPolicyIamBindingConditionXgcp:accesscontextmanager/AccessPolicyIamBindingCondition:AccessPolicyIamBindingCondition6
4
descriptionB" 

expression" 
title" :É

accesscontextmanagerAccessPolicyIamMemberConditionVgcp:accesscontextmanager/AccessPolicyIamMemberCondition:AccessPolicyIamMemberCondition6
4
descriptionB" 

expression" 
title" :
¸
accesscontextmanager,ServicePerimeterDryRunEgressPolicyEgressFromrgcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressFrom:ServicePerimeterDryRunEgressPolicyEgressFrom×	
Ô	ò

identitiesB*" ÛIdentities can be an individual user, service account, Google group,
or third-party identity. For third-party identity, only single identities
are supported and other identity types are not supported.The v1 identities
that have the prefix user, group and serviceAccount in
https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.

identityTypeB" óSpecifies the type of identities that are allowed access to outside the
perimeter. If left unspecified, then members of `identities` field will
be allowed access.
Possible values are: `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.

sourceRestrictionB" öWhether to enforce traffic restrictions based on `sources` field. If the `sources` field is non-empty, then this field must be set to `SOURCE_RESTRICTION_ENABLED`.
Possible values are: `SOURCE_RESTRICTION_ENABLED`, `SOURCE_RESTRICTION_DISABLED`.
º
sourcesÖBÓ*Ð:Í
Ê
accesscontextmanager2ServicePerimeterDryRunEgressPolicyEgressFromSource~gcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressFromSource:ServicePerimeterDryRunEgressPolicyEgressFromSourceVSources that this EgressPolicy authorizes access from.
Structure is documented below.
:Û
Ê
accesscontextmanager2ServicePerimeterDryRunEgressPolicyEgressFromSource~gcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressFromSource:ServicePerimeterDryRunEgressPolicyEgressFromSource

accessLevelB" pAn AccessLevel resource name that allows resources outside the ServicePerimeter to be accessed from the inside.
:â
²
accesscontextmanager*ServicePerimeterDryRunEgressPolicyEgressTongcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressTo:ServicePerimeterDryRunEgressPolicyEgressToª
§Ú
externalResourcesB*" ¼A list of external resources that are allowed to be accessed. A request
matches if it contains an external resource in this list (Example:
s3://bucket/path). Currently '*' is not allowed.


operationsÚB×*Ô:Ñ
Î
accesscontextmanager3ServicePerimeterDryRunEgressPolicyEgressToOperationgcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressToOperation:ServicePerimeterDryRunEgressPolicyEgressToOperationA list of `ApiOperations` that this egress rule applies to. A request matches
if it contains an operation/service in this list.
Structure is documented below.
¹
	resourcesB*" £A list of resources, currently only projects in the form
`projects/<projectnumber>`, that match this to stanza. A request matches
if it contains a resource in this list. If * is specified for resources,
then this `EgressTo` rule will authorize access to all resources outside
the perimeter.
:
Î
accesscontextmanager3ServicePerimeterDryRunEgressPolicyEgressToOperationgcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressToOperation:ServicePerimeterDryRunEgressPolicyEgressToOperationÄ
ÁÌ
methodSelectorsB*þ:û
ø
accesscontextmanagerAServicePerimeterDryRunEgressPolicyEgressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressToOperationMethodSelector:ServicePerimeterDryRunEgressPolicyEgressToOperationMethodSelector±API methods or permissions to allow. Method or permission must belong
to the service specified by `serviceName` field. A single MethodSelector
entry with `*` specified for the `method` field will allow all methods
AND permissions for the service specified in `serviceName`.
Structure is documented below.
ï
serviceNameB" ÙThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with serviceName
field set to `*` will allow all methods AND permissions for all services.
:Ö
ø
accesscontextmanagerAServicePerimeterDryRunEgressPolicyEgressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterDryRunEgressPolicyEgressToOperationMethodSelector:ServicePerimeterDryRunEgressPolicyEgressToOperationMethodSelectorØ
ÕÈ
methodB" ·Value for `method` should be a valid method name for the corresponding
`serviceName` in `ApiOperation`. If `*` used as value for method,
then ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:	
¾
accesscontextmanager.ServicePerimeterDryRunIngressPolicyIngressFromvgcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressFrom:ServicePerimeterDryRunIngressPolicyIngressFromÎ
Ëò

identitiesB*" ÛIdentities can be an individual user, service account, Google group,
or third-party identity. For third-party identity, only single identities
are supported and other identity types are not supported.The v1 identities
that have the prefix user, group and serviceAccount in
https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.

identityTypeB" õSpecifies the type of identities that are allowed access from outside the
perimeter. If left unspecified, then members of `identities` field will be
allowed access.
Possible values are: `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
Ä
sourcesÝBÚ*×:Ô
Ñ
accesscontextmanager4ServicePerimeterDryRunIngressPolicyIngressFromSourcegcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressFromSource:ServicePerimeterDryRunIngressPolicyIngressFromSourceYSources that this `IngressPolicy` authorizes access from.
Structure is documented below.
:¸	
Ñ
accesscontextmanager4ServicePerimeterDryRunIngressPolicyIngressFromSourcegcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressFromSource:ServicePerimeterDryRunIngressPolicyIngressFromSourceá
Þ§
accessLevelB" An `AccessLevel` resource name that allow resources within the
`ServicePerimeters` to be accessed from the internet. `AccessLevels` listed
must be in the same policy as this `ServicePerimeter`. Referencing a nonexistent
`AccessLevel` will cause an error. If no `AccessLevel` names are listed,
resources within the perimeter can only be accessed via Google Cloud calls
with request origins within the perimeter.
Example `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.`
If * is specified, then all IngressSources will be allowed.
±
resourceB" A Google Cloud resource that is allowed to ingress the perimeter.
Requests from these resources will be allowed to access perimeter data.
Currently only projects are allowed. Format `projects/{project_number}`
The project may be in any Google Cloud organization, not just the
organization that the perimeter is defined in. `*` is not allowed, the case
of allowing all Google Cloud resources only is not supported.
:µ
¸
accesscontextmanager,ServicePerimeterDryRunIngressPolicyIngressTorgcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressTo:ServicePerimeterDryRunIngressPolicyIngressTo÷
ô

operationsàBÝ*Ú:×
Ô
accesscontextmanager5ServicePerimeterDryRunIngressPolicyIngressToOperationgcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressToOperation:ServicePerimeterDryRunIngressPolicyIngressToOperation¡A list of `ApiOperations` the sources specified in corresponding `IngressFrom`
are allowed to perform in this `ServicePerimeter`.
Structure is documented below.
Û
	resourcesB*" ÅA list of resources, currently only projects in the form
`projects/<projectnumber>`, protected by this `ServicePerimeter`
that are allowed to be accessed by sources defined in the
corresponding `IngressFrom`. A request matches if it contains
a resource in this list. If `*` is specified for resources,
then this `IngressTo` rule will authorize access to all
resources inside the perimeter, provided that the request
also matches the `operations` field.
:¤
Ô
accesscontextmanager5ServicePerimeterDryRunIngressPolicyIngressToOperationgcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressToOperation:ServicePerimeterDryRunIngressPolicyIngressToOperationÊ
ÇÐ
methodSelectorsB*:
þ
accesscontextmanagerCServicePerimeterDryRunIngressPolicyIngressToOperationMethodSelector gcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressToOperationMethodSelector:ServicePerimeterDryRunIngressPolicyIngressToOperationMethodSelector¯API methods or permissions to allow. Method or permission must belong to
the service specified by serviceName field. A single `MethodSelector` entry
with `*` specified for the method field will allow all methods AND
permissions for the service specified in `serviceName`.
Structure is documented below.
ñ
serviceNameB" ÛThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with `serviceName`
field set to `*` will allow all methods AND permissions for all services.
:Ú
þ
accesscontextmanagerCServicePerimeterDryRunIngressPolicyIngressToOperationMethodSelector gcp:accesscontextmanager/ServicePerimeterDryRunIngressPolicyIngressToOperationMethodSelector:ServicePerimeterDryRunIngressPolicyIngressToOperationMethodSelectorÖ
ÓÆ
methodB" µValue for method should be a valid method name for the corresponding
serviceName in `ApiOperation`. If `*` used as value for `method`, then
ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:
¦
accesscontextmanager&ServicePerimeterEgressPolicyEgressFromfgcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressFrom:ServicePerimeterEgressPolicyEgressFromç	
ä	ò

identitiesB*" ÛIdentities can be an individual user, service account, Google group,
or third-party identity. For third-party identity, only single identities
are supported and other identity types are not supported.The v1 identities
that have the prefix user, group and serviceAccount in
https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.

identityTypeB" óSpecifies the type of identities that are allowed access to outside the
perimeter. If left unspecified, then members of `identities` field will
be allowed access.
Possible values are: `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
´
sourceRestrictionB" Whether to enforce traffic restrictions based on `sources` field. If the `sources` field is non-empty, then this field must be set to `SOURCE_RESTRICTION_ENABLED`.
Possible values are: `SOURCE_RESTRICTION_UNSPECIFIED`, `SOURCE_RESTRICTION_ENABLED`, `SOURCE_RESTRICTION_DISABLED`.
¨
sourcesÄBÁ*¾:»
¸
accesscontextmanager,ServicePerimeterEgressPolicyEgressFromSourcergcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressFromSource:ServicePerimeterEgressPolicyEgressFromSourceVSources that this EgressPolicy authorizes access from.
Structure is documented below.
:É
¸
accesscontextmanager,ServicePerimeterEgressPolicyEgressFromSourcergcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressFromSource:ServicePerimeterEgressPolicyEgressFromSource

accessLevelB" pAn AccessLevel resource name that allows resources outside the ServicePerimeter to be accessed from the inside.
:½
 
accesscontextmanager$ServicePerimeterEgressPolicyEgressTobgcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressTo:ServicePerimeterEgressPolicyEgressTo
Ú
externalResourcesB*" ¼A list of external resources that are allowed to be accessed. A request
matches if it contains an external resource in this list (Example:
s3://bucket/path). Currently '*' is not allowed.
ø

operationsÇBÄ*Á:¾
»
accesscontextmanager-ServicePerimeterEgressPolicyEgressToOperationtgcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressToOperation:ServicePerimeterEgressPolicyEgressToOperationA list of `ApiOperations` that this egress rule applies to. A request matches
if it contains an operation/service in this list.
Structure is documented below.
¹
	resourcesB*" £A list of resources, currently only projects in the form
`projects/<projectnumber>`, that match this to stanza. A request matches
if it contains a resource in this list. If * is specified for resources,
then this `EgressTo` rule will authorize access to all resources outside
the perimeter.
:ó
»
accesscontextmanager-ServicePerimeterEgressPolicyEgressToOperationtgcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressToOperation:ServicePerimeterEgressPolicyEgressToOperation²
¯º
methodSelectorsòBï*ì:é
æ
accesscontextmanager;ServicePerimeterEgressPolicyEgressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressToOperationMethodSelector:ServicePerimeterEgressPolicyEgressToOperationMethodSelector±API methods or permissions to allow. Method or permission must belong
to the service specified by `serviceName` field. A single MethodSelector
entry with `*` specified for the `method` field will allow all methods
AND permissions for the service specified in `serviceName`.
Structure is documented below.
ï
serviceNameB" ÙThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with serviceName
field set to `*` will allow all methods AND permissions for all services.
:Ä
æ
accesscontextmanager;ServicePerimeterEgressPolicyEgressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterEgressPolicyEgressToOperationMethodSelector:ServicePerimeterEgressPolicyEgressToOperationMethodSelectorØ
ÕÈ
methodB" ·Value for `method` should be a valid method name for the corresponding
`serviceName` in `ApiOperation`. If `*` used as value for method,
then ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:í
¬
accesscontextmanager(ServicePerimeterIngressPolicyIngressFromjgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressFrom:ServicePerimeterIngressPolicyIngressFrom»
¸ò

identitiesB*" ÛIdentities can be an individual user, service account, Google group,
or third-party identity. For third-party identity, only single identities
are supported and other identity types are not supported.The v1 identities
that have the prefix user, group and serviceAccount in
https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.

identityTypeB" õSpecifies the type of identities that are allowed access from outside the
perimeter. If left unspecified, then members of `identities` field will be
allowed access.
Possible values are: `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
±
sourcesÊBÇ*Ä:Á
¾
accesscontextmanager.ServicePerimeterIngressPolicyIngressFromSourcevgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressFromSource:ServicePerimeterIngressPolicyIngressFromSourceYSources that this `IngressPolicy` authorizes access from.
Structure is documented below.
:

¾
accesscontextmanager.ServicePerimeterIngressPolicyIngressFromSourcevgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressFromSource:ServicePerimeterIngressPolicyIngressFromSourceÏ
Ì§
accessLevelB" An `AccessLevel` resource name that allow resources within the
`ServicePerimeters` to be accessed from the internet. `AccessLevels` listed
must be in the same policy as this `ServicePerimeter`. Referencing a nonexistent
`AccessLevel` will cause an error. If no `AccessLevel` names are listed,
resources within the perimeter can only be accessed via Google Cloud calls
with request origins within the perimeter.
Example `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.`
If * is specified, then all IngressSources will be allowed.

resourceB" A Google Cloud resource that is allowed to ingress the perimeter.
Requests from these resources will be allowed to access perimeter data.
Currently only projects and VPCs are allowed.
Project format: `projects/{projectNumber}`
VPC network format:
`//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`.
The project may be in any Google Cloud organization, not just the
organization that the perimeter is defined in. `*` is not allowed, the case
of allowing all Google Cloud resources only is not supported.
:
¦
accesscontextmanager&ServicePerimeterIngressPolicyIngressTofgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressTo:ServicePerimeterIngressPolicyIngressToä
á

operationsÍBÊ*Ç:Ä
Á
accesscontextmanager/ServicePerimeterIngressPolicyIngressToOperationxgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressToOperation:ServicePerimeterIngressPolicyIngressToOperation¡A list of `ApiOperations` the sources specified in corresponding `IngressFrom`
are allowed to perform in this `ServicePerimeter`.
Structure is documented below.
Û
	resourcesB*" ÅA list of resources, currently only projects in the form
`projects/<projectnumber>`, protected by this `ServicePerimeter`
that are allowed to be accessed by sources defined in the
corresponding `IngressFrom`. A request matches if it contains
a resource in this list. If `*` is specified for resources,
then this `IngressTo` rule will authorize access to all
resources inside the perimeter, provided that the request
also matches the `operations` field.
:ÿ
Á
accesscontextmanager/ServicePerimeterIngressPolicyIngressToOperationxgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressToOperation:ServicePerimeterIngressPolicyIngressToOperation¸
µ¾
methodSelectorsøBõ*ò:ï
ì
accesscontextmanager=ServicePerimeterIngressPolicyIngressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressToOperationMethodSelector:ServicePerimeterIngressPolicyIngressToOperationMethodSelector¯API methods or permissions to allow. Method or permission must belong to
the service specified by serviceName field. A single `MethodSelector` entry
with `*` specified for the method field will allow all methods AND
permissions for the service specified in `serviceName`.
Structure is documented below.
ñ
serviceNameB" ÛThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with `serviceName`
field set to `*` will allow all methods AND permissions for all services.
:È
ì
accesscontextmanager=ServicePerimeterIngressPolicyIngressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterIngressPolicyIngressToOperationMethodSelector:ServicePerimeterIngressPolicyIngressToOperationMethodSelectorÖ
ÓÆ
methodB" µValue for method should be a valid method name for the corresponding
serviceName in `ApiOperation`. If `*` used as value for `method`, then
ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:
p
accesscontextmanagerServicePerimeterSpecBgcp:accesscontextmanager/ServicePerimeterSpec:ServicePerimeterSpec

accessLevelsB*" üA list of AccessLevel resource names that allow resources within
the ServicePerimeter to be accessed from the internet.
AccessLevels listed must be in the same policy as this
ServicePerimeter. Referencing a nonexistent AccessLevel is a
syntax error. If no AccessLevel names are listed, resources within
the perimeter can only be accessed via GCP calls with request
origins within the perimeter. For Service Perimeter Bridge, must
be empty.
Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
³
egressPolicies B*:

accesscontextmanager ServicePerimeterSpecEgressPolicyZgcp:accesscontextmanager/ServicePerimeterSpecEgressPolicy:ServicePerimeterSpecEgressPolicyýList of EgressPolicies to apply to the perimeter. A perimeter may
have multiple EgressPolicies, each of which is evaluated separately.
Access is granted if any EgressPolicy grants it. Must be empty for
a perimeter bridge.
Structure is documented below.
Á
ingressPolicies£B *:

accesscontextmanager!ServicePerimeterSpecIngressPolicy\gcp:accesscontextmanager/ServicePerimeterSpecIngressPolicy:ServicePerimeterSpecIngressPolicyList of `IngressPolicies` to apply to the perimeter. A perimeter may
have multiple `IngressPolicies`, each of which is evaluated
separately. Access is granted if any `Ingress Policy` grants it.
Must be empty for a perimeter bridge.
Structure is documented below.

	resourcesB*" A list of GCP resources that are inside of the service perimeter.
Currently only projects are allowed.
Format: projects/{project_number}

restrictedServicesB*" ÿGCP services that are subject to the Service Perimeter
restrictions. Must contain a list of services. For example, if
`storage.googleapis.com` is specified, access to the storage
buckets inside the perimeter must meet the perimeter's access
restrictions.
¿
vpcAccessibleServices¸Bµ:²
¯
accesscontextmanager)ServicePerimeterSpecVpcAccessibleServiceslgcp:accesscontextmanager/ServicePerimeterSpecVpcAccessibleServices:ServicePerimeterSpecVpcAccessibleServiceskSpecifies how APIs are allowed to communicate within the Service
Perimeter.
Structure is documented below.
:¶

accesscontextmanager ServicePerimeterSpecEgressPolicyZgcp:accesscontextmanager/ServicePerimeterSpecEgressPolicy:ServicePerimeterSpecEgressPolicy
¿

egressFrom»B¸:µ
²
accesscontextmanager*ServicePerimeterSpecEgressPolicyEgressFromngcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressFrom:ServicePerimeterSpecEgressPolicyEgressFromsDefines conditions on the source of a request causing this `EgressPolicy` to apply.
Structure is documented below.
Ô
egressToµB²:¯
¬
accesscontextmanager(ServicePerimeterSpecEgressPolicyEgressTojgcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressTo:ServicePerimeterSpecEgressPolicyEgressToDefines the conditions on the `ApiOperation` and destination resources that
cause this `EgressPolicy` to apply.
Structure is documented below.
:­

²
accesscontextmanager*ServicePerimeterSpecEgressPolicyEgressFromngcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressFrom:ServicePerimeterSpecEgressPolicyEgressFromõ
ò×

identitiesB*" ÀA list of identities that are allowed access through this `EgressPolicy`.
Should be in the format of email address. The email address should
represent individual user or service account only.
§
identityTypeB" Specifies the type of identities that are allowed access to outside the
perimeter. If left unspecified, then members of `identities` field will
be allowed access.
Possible values are: `IDENTITY_TYPE_UNSPECIFIED`, `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
´
sourceRestrictionB" Whether to enforce traffic restrictions based on `sources` field. If the `sources` field is non-empty, then this field must be set to `SOURCE_RESTRICTION_ENABLED`.
Possible values are: `SOURCE_RESTRICTION_UNSPECIFIED`, `SOURCE_RESTRICTION_ENABLED`, `SOURCE_RESTRICTION_DISABLED`.
´
sourcesÐBÍ*Ê:Ç
Ä
accesscontextmanager0ServicePerimeterSpecEgressPolicyEgressFromSourcezgcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressFromSource:ServicePerimeterSpecEgressPolicyEgressFromSourceVSources that this EgressPolicy authorizes access from.
Structure is documented below.
:Õ
Ä
accesscontextmanager0ServicePerimeterSpecEgressPolicyEgressFromSourcezgcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressFromSource:ServicePerimeterSpecEgressPolicyEgressFromSource

accessLevelB" pAn AccessLevel resource name that allows resources outside the ServicePerimeter to be accessed from the inside.
:Õ
¬
accesscontextmanager(ServicePerimeterSpecEgressPolicyEgressTojgcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressTo:ServicePerimeterSpecEgressPolicyEgressTo£
 Ú
externalResourcesB*" ¼A list of external resources that are allowed to be accessed. A request
matches if it contains an external resource in this list (Example:
s3://bucket/path). Currently '*' is not allowed.


operationsÓBÐ*Í:Ê
Ç
accesscontextmanager1ServicePerimeterSpecEgressPolicyEgressToOperation|gcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressToOperation:ServicePerimeterSpecEgressPolicyEgressToOperationA list of `ApiOperations` that this egress rule applies to. A request matches
if it contains an operation/service in this list.
Structure is documented below.
¹
	resourcesB*" £A list of resources, currently only projects in the form
`projects/<projectnumber>`, that match this to stanza. A request matches
if it contains a resource in this list. If * is specified for resources,
then this `EgressTo` rule will authorize access to all resources outside
the perimeter.
:
Ç
accesscontextmanager1ServicePerimeterSpecEgressPolicyEgressToOperation|gcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressToOperation:ServicePerimeterSpecEgressPolicyEgressToOperation¾
»Æ
methodSelectorsþBû*ø:õ
ò
accesscontextmanager?ServicePerimeterSpecEgressPolicyEgressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressToOperationMethodSelector:ServicePerimeterSpecEgressPolicyEgressToOperationMethodSelector±API methods or permissions to allow. Method or permission must belong
to the service specified by `serviceName` field. A single MethodSelector
entry with `*` specified for the `method` field will allow all methods
AND permissions for the service specified in `serviceName`.
Structure is documented below.
ï
serviceNameB" ÙThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with serviceName
field set to `*` will allow all methods AND permissions for all services.
:Ð
ò
accesscontextmanager?ServicePerimeterSpecEgressPolicyEgressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterSpecEgressPolicyEgressToOperationMethodSelector:ServicePerimeterSpecEgressPolicyEgressToOperationMethodSelectorØ
ÕÈ
methodB" ·Value for `method` should be a valid method name for the corresponding
`serviceName` in `ApiOperation`. If `*` used as value for method,
then ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:Ë

accesscontextmanager!ServicePerimeterSpecIngressPolicy\gcp:accesscontextmanager/ServicePerimeterSpecIngressPolicy:ServicePerimeterSpecIngressPolicy®
«Ë
ingressFromÁB¾:»
¸
accesscontextmanager,ServicePerimeterSpecIngressPolicyIngressFromrgcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressFrom:ServicePerimeterSpecIngressPolicyIngressFromxDefines the conditions on the source of a request causing this `IngressPolicy`
to apply.
Structure is documented below.
Ú
	ingressTo»B¸:µ
²
accesscontextmanager*ServicePerimeterSpecIngressPolicyIngressTongcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressTo:ServicePerimeterSpecIngressPolicyIngressToDefines the conditions on the `ApiOperation` and request destination that cause
this `IngressPolicy` to apply.
Structure is documented below.
:
¸
accesscontextmanager,ServicePerimeterSpecIngressPolicyIngressFromrgcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressFrom:ServicePerimeterSpecIngressPolicyIngressFromÉ
Æ×

identitiesB*" ÀA list of identities that are allowed access through this ingress policy.
Should be in the format of email address. The email address should represent
individual user or service account only.
©
identityTypeB" Specifies the type of identities that are allowed access from outside the
perimeter. If left unspecified, then members of `identities` field will be
allowed access.
Possible values are: `IDENTITY_TYPE_UNSPECIFIED`, `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
½
sourcesÖBÓ*Ð:Í
Ê
accesscontextmanager2ServicePerimeterSpecIngressPolicyIngressFromSource~gcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressFromSource:ServicePerimeterSpecIngressPolicyIngressFromSourceYSources that this `IngressPolicy` authorizes access from.
Structure is documented below.
:
Ê
accesscontextmanager2ServicePerimeterSpecIngressPolicyIngressFromSource~gcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressFromSource:ServicePerimeterSpecIngressPolicyIngressFromSource¿
¼
accessLevelB" pAn AccessLevel resource name that allows resources outside the ServicePerimeter to be accessed from the inside.
±
resourceB" A Google Cloud resource that is allowed to ingress the perimeter.
Requests from these resources will be allowed to access perimeter data.
Currently only projects are allowed. Format `projects/{project_number}`
The project may be in any Google Cloud organization, not just the
organization that the perimeter is defined in. `*` is not allowed, the case
of allowing all Google Cloud resources only is not supported.
:©
²
accesscontextmanager*ServicePerimeterSpecIngressPolicyIngressTongcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressTo:ServicePerimeterSpecIngressPolicyIngressToñ
î

operationsÚB×*Ô:Ñ
Î
accesscontextmanager3ServicePerimeterSpecIngressPolicyIngressToOperationgcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressToOperation:ServicePerimeterSpecIngressPolicyIngressToOperation¡A list of `ApiOperations` the sources specified in corresponding `IngressFrom`
are allowed to perform in this `ServicePerimeter`.
Structure is documented below.
Û
	resourcesB*" ÅA list of resources, currently only projects in the form
`projects/<projectnumber>`, protected by this `ServicePerimeter`
that are allowed to be accessed by sources defined in the
corresponding `IngressFrom`. A request matches if it contains
a resource in this list. If `*` is specified for resources,
then this `IngressTo` rule will authorize access to all
resources inside the perimeter, provided that the request
also matches the `operations` field.
:
Î
accesscontextmanager3ServicePerimeterSpecIngressPolicyIngressToOperationgcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressToOperation:ServicePerimeterSpecIngressPolicyIngressToOperationÄ
ÁÌ
methodSelectorsB*þ:û
ø
accesscontextmanagerAServicePerimeterSpecIngressPolicyIngressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressToOperationMethodSelector:ServicePerimeterSpecIngressPolicyIngressToOperationMethodSelector±API methods or permissions to allow. Method or permission must belong
to the service specified by `serviceName` field. A single MethodSelector
entry with `*` specified for the `method` field will allow all methods
AND permissions for the service specified in `serviceName`.
Structure is documented below.
ï
serviceNameB" ÙThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with serviceName
field set to `*` will allow all methods AND permissions for all services.
:Ö
ø
accesscontextmanagerAServicePerimeterSpecIngressPolicyIngressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterSpecIngressPolicyIngressToOperationMethodSelector:ServicePerimeterSpecIngressPolicyIngressToOperationMethodSelectorØ
ÕÈ
methodB" ·Value for `method` should be a valid method name for the corresponding
`serviceName` in `ApiOperation`. If `*` used as value for method,
then ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:Ë
¯
accesscontextmanager)ServicePerimeterSpecVpcAccessibleServiceslgcp:accesscontextmanager/ServicePerimeterSpecVpcAccessibleServices:ServicePerimeterSpecVpcAccessibleServices

allowedServicesB*" hThe list of APIs usable within the Service Perimeter.
Must be empty unless `enableRestriction` is True.

enableRestrictionB
 oWhether to restrict API calls within the Service Perimeter to the
list of APIs specified in 'allowedServices'.
:§
v
accesscontextmanagerServicePerimeterStatusFgcp:accesscontextmanager/ServicePerimeterStatus:ServicePerimeterStatus¬
©
accessLevelsB*" üA list of AccessLevel resource names that allow resources within
the ServicePerimeter to be accessed from the internet.
AccessLevels listed must be in the same policy as this
ServicePerimeter. Referencing a nonexistent AccessLevel is a
syntax error. If no AccessLevel names are listed, resources within
the perimeter can only be accessed via GCP calls with request
origins within the perimeter. For Service Perimeter Bridge, must
be empty.
Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
¹
egressPolicies¦B£* :

accesscontextmanager"ServicePerimeterStatusEgressPolicy^gcp:accesscontextmanager/ServicePerimeterStatusEgressPolicy:ServicePerimeterStatusEgressPolicyýList of EgressPolicies to apply to the perimeter. A perimeter may
have multiple EgressPolicies, each of which is evaluated separately.
Access is granted if any EgressPolicy grants it. Must be empty for
a perimeter bridge.
Structure is documented below.
Ç
ingressPolicies©B¦*£: 

accesscontextmanager#ServicePerimeterStatusIngressPolicy`gcp:accesscontextmanager/ServicePerimeterStatusIngressPolicy:ServicePerimeterStatusIngressPolicyList of `IngressPolicies` to apply to the perimeter. A perimeter may
have multiple `IngressPolicies`, each of which is evaluated
separately. Access is granted if any `Ingress Policy` grants it.
Must be empty for a perimeter bridge.
Structure is documented below.

	resourcesB*" A list of GCP resources that are inside of the service perimeter.
Currently only projects are allowed.
Format: projects/{project_number}

restrictedServicesB*" ÿGCP services that are subject to the Service Perimeter
restrictions. Must contain a list of services. For example, if
`storage.googleapis.com` is specified, access to the storage
buckets inside the perimeter must meet the perimeter's access
restrictions.
Å
vpcAccessibleServices¾B»:¸
µ
accesscontextmanager+ServicePerimeterStatusVpcAccessibleServicespgcp:accesscontextmanager/ServicePerimeterStatusVpcAccessibleServices:ServicePerimeterStatusVpcAccessibleServiceskSpecifies how APIs are allowed to communicate within the Service
Perimeter.
Structure is documented below.
:È

accesscontextmanager"ServicePerimeterStatusEgressPolicy^gcp:accesscontextmanager/ServicePerimeterStatusEgressPolicy:ServicePerimeterStatusEgressPolicy¨
¥Å

egressFromÁB¾:»
¸
accesscontextmanager,ServicePerimeterStatusEgressPolicyEgressFromrgcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressFrom:ServicePerimeterStatusEgressPolicyEgressFromsDefines conditions on the source of a request causing this `EgressPolicy` to apply.
Structure is documented below.
Ú
egressTo»B¸:µ
²
accesscontextmanager*ServicePerimeterStatusEgressPolicyEgressTongcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressTo:ServicePerimeterStatusEgressPolicyEgressToDefines the conditions on the `ApiOperation` and destination resources that
cause this `EgressPolicy` to apply.
Structure is documented below.
:¹

¸
accesscontextmanager,ServicePerimeterStatusEgressPolicyEgressFromrgcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressFrom:ServicePerimeterStatusEgressPolicyEgressFromû
ø×

identitiesB*" ÀA list of identities that are allowed access through this `EgressPolicy`.
Should be in the format of email address. The email address should
represent individual user or service account only.
§
identityTypeB" Specifies the type of identities that are allowed access to outside the
perimeter. If left unspecified, then members of `identities` field will
be allowed access.
Possible values are: `IDENTITY_TYPE_UNSPECIFIED`, `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
´
sourceRestrictionB" Whether to enforce traffic restrictions based on `sources` field. If the `sources` field is non-empty, then this field must be set to `SOURCE_RESTRICTION_ENABLED`.
Possible values are: `SOURCE_RESTRICTION_UNSPECIFIED`, `SOURCE_RESTRICTION_ENABLED`, `SOURCE_RESTRICTION_DISABLED`.
º
sourcesÖBÓ*Ð:Í
Ê
accesscontextmanager2ServicePerimeterStatusEgressPolicyEgressFromSource~gcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressFromSource:ServicePerimeterStatusEgressPolicyEgressFromSourceVSources that this EgressPolicy authorizes access from.
Structure is documented below.
:Û
Ê
accesscontextmanager2ServicePerimeterStatusEgressPolicyEgressFromSource~gcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressFromSource:ServicePerimeterStatusEgressPolicyEgressFromSource

accessLevelB" pAn AccessLevel resource name that allows resources outside the ServicePerimeter to be accessed from the inside.
:â
²
accesscontextmanager*ServicePerimeterStatusEgressPolicyEgressTongcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressTo:ServicePerimeterStatusEgressPolicyEgressToª
§Ú
externalResourcesB*" ¼A list of external resources that are allowed to be accessed. A request
matches if it contains an external resource in this list (Example:
s3://bucket/path). Currently '*' is not allowed.


operationsÚB×*Ô:Ñ
Î
accesscontextmanager3ServicePerimeterStatusEgressPolicyEgressToOperationgcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressToOperation:ServicePerimeterStatusEgressPolicyEgressToOperationA list of `ApiOperations` that this egress rule applies to. A request matches
if it contains an operation/service in this list.
Structure is documented below.
¹
	resourcesB*" £A list of resources, currently only projects in the form
`projects/<projectnumber>`, that match this to stanza. A request matches
if it contains a resource in this list. If * is specified for resources,
then this `EgressTo` rule will authorize access to all resources outside
the perimeter.
:
Î
accesscontextmanager3ServicePerimeterStatusEgressPolicyEgressToOperationgcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressToOperation:ServicePerimeterStatusEgressPolicyEgressToOperationÄ
ÁÌ
methodSelectorsB*þ:û
ø
accesscontextmanagerAServicePerimeterStatusEgressPolicyEgressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressToOperationMethodSelector:ServicePerimeterStatusEgressPolicyEgressToOperationMethodSelector±API methods or permissions to allow. Method or permission must belong
to the service specified by `serviceName` field. A single MethodSelector
entry with `*` specified for the `method` field will allow all methods
AND permissions for the service specified in `serviceName`.
Structure is documented below.
ï
serviceNameB" ÙThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with serviceName
field set to `*` will allow all methods AND permissions for all services.
:Ö
ø
accesscontextmanagerAServicePerimeterStatusEgressPolicyEgressToOperationMethodSelectorgcp:accesscontextmanager/ServicePerimeterStatusEgressPolicyEgressToOperationMethodSelector:ServicePerimeterStatusEgressPolicyEgressToOperationMethodSelectorØ
ÕÈ
methodB" ·Value for `method` should be a valid method name for the corresponding
`serviceName` in `ApiOperation`. If `*` used as value for method,
then ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:Ý

accesscontextmanager#ServicePerimeterStatusIngressPolicy`gcp:accesscontextmanager/ServicePerimeterStatusIngressPolicy:ServicePerimeterStatusIngressPolicyº
·Ñ
ingressFromÇBÄ:Á
¾
accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressFromvgcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressFrom:ServicePerimeterStatusIngressPolicyIngressFromxDefines the conditions on the source of a request causing this `IngressPolicy`
to apply.
Structure is documented below.
à
	ingressToÁB¾:»
¸
accesscontextmanager,ServicePerimeterStatusIngressPolicyIngressTorgcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressTo:ServicePerimeterStatusIngressPolicyIngressToDefines the conditions on the `ApiOperation` and request destination that cause
this `IngressPolicy` to apply.
Structure is documented below.
:
¾
accesscontextmanager.ServicePerimeterStatusIngressPolicyIngressFromvgcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressFrom:ServicePerimeterStatusIngressPolicyIngressFromÐ
Í×

identitiesB*" ÀA list of identities that are allowed access through this ingress policy.
Should be in the format of email address. The email address should represent
individual user or service account only.
©
identityTypeB" Specifies the type of identities that are allowed access from outside the
perimeter. If left unspecified, then members of `identities` field will be
allowed access.
Possible values are: `IDENTITY_TYPE_UNSPECIFIED`, `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
Ä
sourcesÝBÚ*×:Ô
Ñ
accesscontextmanager4ServicePerimeterStatusIngressPolicyIngressFromSourcegcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressFromSource:ServicePerimeterStatusIngressPolicyIngressFromSourceYSources that this `IngressPolicy` authorizes access from.
Structure is documented below.
:
Ñ
accesscontextmanager4ServicePerimeterStatusIngressPolicyIngressFromSourcegcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressFromSource:ServicePerimeterStatusIngressPolicyIngressFromSource¿
¼
accessLevelB" pAn AccessLevel resource name that allows resources outside the ServicePerimeter to be accessed from the inside.
±
resourceB" A Google Cloud resource that is allowed to ingress the perimeter.
Requests from these resources will be allowed to access perimeter data.
Currently only projects are allowed. Format `projects/{project_number}`
The project may be in any Google Cloud organization, not just the
organization that the perimeter is defined in. `*` is not allowed, the case
of allowing all Google Cloud resources only is not supported.
:µ
¸
accesscontextmanager,ServicePerimeterStatusIngressPolicyIngressTorgcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressTo:ServicePerimeterStatusIngressPolicyIngressTo÷
ô

operationsàBÝ*Ú:×
Ô
accesscontextmanager5ServicePerimeterStatusIngressPolicyIngressToOperationgcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressToOperation:ServicePerimeterStatusIngressPolicyIngressToOperation¡A list of `ApiOperations` the sources specified in corresponding `IngressFrom`
are allowed to perform in this `ServicePerimeter`.
Structure is documented below.
Û
	resourcesB*" ÅA list of resources, currently only projects in the form
`projects/<projectnumber>`, protected by this `ServicePerimeter`
that are allowed to be accessed by sources defined in the
corresponding `IngressFrom`. A request matches if it contains
a resource in this list. If `*` is specified for resources,
then this `IngressTo` rule will authorize access to all
resources inside the perimeter, provided that the request
also matches the `operations` field.
:¤
Ô
accesscontextmanager5ServicePerimeterStatusIngressPolicyIngressToOperationgcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressToOperation:ServicePerimeterStatusIngressPolicyIngressToOperationÊ
ÇÒ
methodSelectorsB*:
þ
accesscontextmanagerCServicePerimeterStatusIngressPolicyIngressToOperationMethodSelector gcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelector:ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelector±API methods or permissions to allow. Method or permission must belong
to the service specified by `serviceName` field. A single MethodSelector
entry with `*` specified for the `method` field will allow all methods
AND permissions for the service specified in `serviceName`.
Structure is documented below.
ï
serviceNameB" ÙThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with serviceName
field set to `*` will allow all methods AND permissions for all services.
:Ü
þ
accesscontextmanagerCServicePerimeterStatusIngressPolicyIngressToOperationMethodSelector gcp:accesscontextmanager/ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelector:ServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorØ
ÕÈ
methodB" ·Value for `method` should be a valid method name for the corresponding
`serviceName` in `ApiOperation`. If `*` used as value for method,
then ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:Ñ
µ
accesscontextmanager+ServicePerimeterStatusVpcAccessibleServicespgcp:accesscontextmanager/ServicePerimeterStatusVpcAccessibleServices:ServicePerimeterStatusVpcAccessibleServices

allowedServicesB*" hThe list of APIs usable within the Service Perimeter.
Must be empty unless `enableRestriction` is True.

enableRestrictionB
 oWhether to restrict API calls within the Service Perimeter to the
list of APIs specified in 'allowedServices'.
:±

accesscontextmanager!ServicePerimetersServicePerimeter\gcp:accesscontextmanager/ServicePerimetersServicePerimeter:ServicePerimetersServicePerimeter
G

createTimeB" 3(Output)
Time the AccessPolicy was created in UTC.
`
descriptionB" KDescription of the ServicePerimeter and its use. Does not affect
behavior.
Ð
name" ÃResource name for the ServicePerimeter. The short_name component must
begin with a letter and only include alphanumeric and '_'.
Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
ß
perimeterTypeB" ÇSpecifies the type of the Perimeter. There are two types: regular and
bridge. Regular Service Perimeter contains resources, access levels,
and restricted services. Every resource can be in at most
ONE regular Service Perimeter.
In addition to being in a regular service perimeter, a resource can also
be in zero or more perimeter bridges. A perimeter bridge only contains
resources. Cross project operations are permitted if all effected
resources share some perimeter (whether bridge or regular). Perimeter
Bridge does not contain access levels or services: those are governed
entirely by the regular perimeter that resource is in.
Perimeter Bridges are typically useful when building more complex
topologies with many independent perimeters that need to share some data
with a common perimeter, but should not be able to share data among
themselves.
Default value is `PERIMETER_TYPE_REGULAR`.
Possible values are: `PERIMETER_TYPE_REGULAR`, `PERIMETER_TYPE_BRIDGE`.
Í
spec¬B©:¦
£
accesscontextmanager%ServicePerimetersServicePerimeterSpecdgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpec:ServicePerimetersServicePerimeterSpecProposed (or dry run) ServicePerimeter configuration.
This configuration allows to specify and test ServicePerimeter configuration
without enforcing actual access restrictions. Only allowed to be set when
the `useExplicitDryRunSpec` flag is set.
Structure is documented below.
ó
status²B¯:¬
©
accesscontextmanager'ServicePerimetersServicePerimeterStatushgcp:accesscontextmanager/ServicePerimetersServicePerimeterStatus:ServicePerimetersServicePerimeterStatus³ServicePerimeter configuration. Specifies sets of resources,
restricted services and access levels that determine
perimeter content and boundaries.
Structure is documented below.
E
title" 8Human readable title. Must be unique within the Policy.
G

updateTimeB" 3(Output)
Time the AccessPolicy was updated in UTC.
Ø
useExplicitDryRunSpecB
 ¸Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
for all Service Perimeters, and that spec is identical to the status for those
Service Perimeters. When this flag is set, it inhibits the generation of the
implicit spec, thereby allowing the user to explicitly provide a
configuration ("spec") to use in a dry-run version of the Service Perimeter.
This allows the user to test changes to the enforced config ("status") without
actually enforcing them. This testing is done through analyzing the differences
between currently enforced and suggested restrictions. useExplicitDryRunSpec must
bet set to True if any of the fields in the spec are set to non-default values.
:Ý
£
accesscontextmanager%ServicePerimetersServicePerimeterSpecdgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpec:ServicePerimetersServicePerimeterSpec´
±
accessLevelsB*" üA list of AccessLevel resource names that allow resources within
the ServicePerimeter to be accessed from the internet.
AccessLevels listed must be in the same policy as this
ServicePerimeter. Referencing a nonexistent AccessLevel is a
syntax error. If no AccessLevel names are listed, resources within
the perimeter can only be accessed via GCP calls with request
origins within the perimeter. For Service Perimeter Bridge, must
be empty.
Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
æ
egressPoliciesÓBÐ*Í:Ê
Ç
accesscontextmanager1ServicePerimetersServicePerimeterSpecEgressPolicy|gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicy:ServicePerimetersServicePerimeterSpecEgressPolicyýList of EgressPolicies to apply to the perimeter. A perimeter may
have multiple EgressPolicies, each of which is evaluated separately.
Access is granted if any EgressPolicy grants it. Must be empty for
a perimeter bridge.
Structure is documented below.
ô
ingressPoliciesÖBÓ*Ð:Í
Ê
accesscontextmanager2ServicePerimetersServicePerimeterSpecIngressPolicy~gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicy:ServicePerimetersServicePerimeterSpecIngressPolicyList of `IngressPolicies` to apply to the perimeter. A perimeter may
have multiple `IngressPolicies`, each of which is evaluated
separately. Access is granted if any `Ingress Policy` grants it.
Must be empty for a perimeter bridge.
Structure is documented below.

	resourcesB*" A list of GCP resources that are inside of the service perimeter.
Currently only projects are allowed.
Format: projects/{project_number}

restrictedServicesB*" ÿGCP services that are subject to the Service Perimeter
restrictions. Must contain a list of services. For example, if
`storage.googleapis.com` is specified, access to the storage
buckets inside the perimeter must meet the perimeter's access
restrictions.
ó
vpcAccessibleServicesìBé:æ
ã
accesscontextmanager:ServicePerimetersServicePerimeterSpecVpcAccessibleServicesgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecVpcAccessibleServices:ServicePerimetersServicePerimeterSpecVpcAccessibleServiceskSpecifies how APIs are allowed to communicate within the Service
Perimeter.
Structure is documented below.
:Ñ
Ç
accesscontextmanager1ServicePerimetersServicePerimeterSpecEgressPolicy|gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicy:ServicePerimetersServicePerimeterSpecEgressPolicy
ó

egressFromïBì:é
æ
accesscontextmanager;ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressFrom:ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromsDefines conditions on the source of a request causing this `EgressPolicy` to apply.
Structure is documented below.

egressToéBæ:ã
à
accesscontextmanager9ServicePerimetersServicePerimeterSpecEgressPolicyEgressTogcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressTo:ServicePerimetersServicePerimeterSpecEgressPolicyEgressToDefines the conditions on the `ApiOperation` and destination resources that
cause this `EgressPolicy` to apply.
Structure is documented below.
:°
æ
accesscontextmanager;ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressFrom:ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromÄ

Á
ò

identitiesB*" ÛIdentities can be an individual user, service account, Google group,
or third-party identity. For third-party identity, only single identities
are supported and other identity types are not supported.The v1 identities
that have the prefix user, group and serviceAccount in
https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.
§
identityTypeB" Specifies the type of identities that are allowed access to outside the
perimeter. If left unspecified, then members of `identities` field will
be allowed access.
Possible values are: `IDENTITY_TYPE_UNSPECIFIED`, `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
´
sourceRestrictionB" Whether to enforce traffic restrictions based on `sources` field. If the `sources` field is non-empty, then this field must be set to `SOURCE_RESTRICTION_ENABLED`.
Possible values are: `SOURCE_RESTRICTION_UNSPECIFIED`, `SOURCE_RESTRICTION_ENABLED`, `SOURCE_RESTRICTION_DISABLED`.
è
sourcesB*þ:û
ø
accesscontextmanagerAServicePerimetersServicePerimeterSpecEgressPolicyEgressFromSourcegcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromSource:ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromSourceVSources that this EgressPolicy authorizes access from.
Structure is documented below.
:
ø
accesscontextmanagerAServicePerimetersServicePerimeterSpecEgressPolicyEgressFromSourcegcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromSource:ServicePerimetersServicePerimeterSpecEgressPolicyEgressFromSource

accessLevelB" pAn AccessLevel resource name that allows resources outside the ServicePerimeter to be accessed from the inside.
:½	
à
accesscontextmanager9ServicePerimetersServicePerimeterSpecEgressPolicyEgressTogcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressTo:ServicePerimetersServicePerimeterSpecEgressPolicyEgressTo×
ÔÚ
externalResourcesB*" ¼A list of external resources that are allowed to be accessed. A request
matches if it contains an external resource in this list (Example:
s3://bucket/path). Currently '*' is not allowed.
¸

operationsB*:þ
û
accesscontextmanagerBServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperationgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperation:ServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperationA list of `ApiOperations` that this egress rule applies to. A request matches
if it contains an operation/service in this list.
Structure is documented below.
¹
	resourcesB*" £A list of resources, currently only projects in the form
`projects/<projectnumber>`, that match this to stanza. A request matches
if it contains a resource in this list. If * is specified for resources,
then this `EgressTo` rule will authorize access to all resources outside
the perimeter.
:ò
û
accesscontextmanagerBServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperationgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperation:ServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperationñ
îù
methodSelectors±B®*«:¨
¥
accesscontextmanagerPServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperationMethodSelectorºgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperationMethodSelector:ServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperationMethodSelector±API methods or permissions to allow. Method or permission must belong
to the service specified by `serviceName` field. A single MethodSelector
entry with `*` specified for the `method` field will allow all methods
AND permissions for the service specified in `serviceName`.
Structure is documented below.
ï
serviceNameB" ÙThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with serviceName
field set to `*` will allow all methods AND permissions for all services.
:
¥
accesscontextmanagerPServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperationMethodSelectorºgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperationMethodSelector:ServicePerimetersServicePerimeterSpecEgressPolicyEgressToOperationMethodSelectorØ
ÕÈ
methodB" ·Value for `method` should be a valid method name for the corresponding
`serviceName` in `ApiOperation`. If `*` used as value for method,
then ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:æ
Ê
accesscontextmanager2ServicePerimetersServicePerimeterSpecIngressPolicy~gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicy:ServicePerimetersServicePerimeterSpecIngressPolicy
ÿ
ingressFromõBò:ï
ì
accesscontextmanager=ServicePerimetersServicePerimeterSpecIngressPolicyIngressFromgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressFrom:ServicePerimetersServicePerimeterSpecIngressPolicyIngressFromxDefines the conditions on the source of a request causing this `IngressPolicy`
to apply.
Structure is documented below.

	ingressToïBì:é
æ
accesscontextmanager;ServicePerimetersServicePerimeterSpecIngressPolicyIngressTogcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressTo:ServicePerimetersServicePerimeterSpecIngressPolicyIngressToDefines the conditions on the `ApiOperation` and request destination that cause
this `IngressPolicy` to apply.
Structure is documented below.
:ï
ì
accesscontextmanager=ServicePerimetersServicePerimeterSpecIngressPolicyIngressFromgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressFrom:ServicePerimetersServicePerimeterSpecIngressPolicyIngressFromý
ú×

identitiesB*" ÀA list of identities that are allowed access through this ingress policy.
Should be in the format of email address. The email address should represent
individual user or service account only.
©
identityTypeB" Specifies the type of identities that are allowed access from outside the
perimeter. If left unspecified, then members of `identities` field will be
allowed access.
Possible values are: `IDENTITY_TYPE_UNSPECIFIED`, `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
ñ
sourcesB*:
þ
accesscontextmanagerCServicePerimetersServicePerimeterSpecIngressPolicyIngressFromSource gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressFromSource:ServicePerimetersServicePerimeterSpecIngressPolicyIngressFromSourceYSources that this `IngressPolicy` authorizes access from.
Structure is documented below.
:Ã
þ
accesscontextmanagerCServicePerimetersServicePerimeterSpecIngressPolicyIngressFromSource gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressFromSource:ServicePerimetersServicePerimeterSpecIngressPolicyIngressFromSource¿
¼
accessLevelB" pAn AccessLevel resource name that allows resources outside the ServicePerimeter to be accessed from the inside.
±
resourceB" A Google Cloud resource that is allowed to ingress the perimeter.
Requests from these resources will be allowed to access perimeter data.
Currently only projects are allowed. Format `projects/{project_number}`
The project may be in any Google Cloud organization, not just the
organization that the perimeter is defined in. `*` is not allowed, the case
of allowing all Google Cloud resources only is not supported.
:	
æ
accesscontextmanager;ServicePerimetersServicePerimeterSpecIngressPolicyIngressTogcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressTo:ServicePerimetersServicePerimeterSpecIngressPolicyIngressTo¤
¡À

operationsB*:

accesscontextmanagerDServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperation¢gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperation:ServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperation¡A list of `ApiOperations` the sources specified in corresponding `IngressFrom`
are allowed to perform in this `ServicePerimeter`.
Structure is documented below.
Û
	resourcesB*" ÅA list of resources, currently only projects in the form
`projects/<projectnumber>`, protected by this `ServicePerimeter`
that are allowed to be accessed by sources defined in the
corresponding `IngressFrom`. A request matches if it contains
a resource in this list. If `*` is specified for resources,
then this `IngressTo` rule will authorize access to all
resources inside the perimeter, provided that the request
also matches the `operations` field.
:þ

accesscontextmanagerDServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperation¢gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperation:ServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperation÷
ôÿ
methodSelectors·B´*±:®
«
accesscontextmanagerRServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperationMethodSelector¾gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperationMethodSelector:ServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperationMethodSelector±API methods or permissions to allow. Method or permission must belong
to the service specified by `serviceName` field. A single MethodSelector
entry with `*` specified for the `method` field will allow all methods
AND permissions for the service specified in `serviceName`.
Structure is documented below.
ï
serviceNameB" ÙThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with serviceName
field set to `*` will allow all methods AND permissions for all services.
:
«
accesscontextmanagerRServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperationMethodSelector¾gcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperationMethodSelector:ServicePerimetersServicePerimeterSpecIngressPolicyIngressToOperationMethodSelectorØ
ÕÈ
methodB" ·Value for `method` should be a valid method name for the corresponding
`serviceName` in `ApiOperation`. If `*` used as value for method,
then ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:ÿ
ã
accesscontextmanager:ServicePerimetersServicePerimeterSpecVpcAccessibleServicesgcp:accesscontextmanager/ServicePerimetersServicePerimeterSpecVpcAccessibleServices:ServicePerimetersServicePerimeterSpecVpcAccessibleServices

allowedServicesB*" hThe list of APIs usable within the Service Perimeter.
Must be empty unless `enableRestriction` is True.

enableRestrictionB
 oWhether to restrict API calls within the Service Perimeter to the
list of APIs specified in 'allowedServices'.
:÷
©
accesscontextmanager'ServicePerimetersServicePerimeterStatushgcp:accesscontextmanager/ServicePerimetersServicePerimeterStatus:ServicePerimetersServicePerimeterStatusÈ
Å
accessLevelsB*" üA list of AccessLevel resource names that allow resources within
the ServicePerimeter to be accessed from the internet.
AccessLevels listed must be in the same policy as this
ServicePerimeter. Referencing a nonexistent AccessLevel is a
syntax error. If no AccessLevel names are listed, resources within
the perimeter can only be accessed via GCP calls with request
origins within the perimeter. For Service Perimeter Bridge, must
be empty.
Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
í
egressPoliciesÚB×*Ô:Ñ
Î
accesscontextmanager3ServicePerimetersServicePerimeterStatusEgressPolicygcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicy:ServicePerimetersServicePerimeterStatusEgressPolicyýList of EgressPolicies to apply to the perimeter. A perimeter may
have multiple EgressPolicies, each of which is evaluated separately.
Access is granted if any EgressPolicy grants it. Must be empty for
a perimeter bridge.
Structure is documented below.
û
ingressPoliciesÝBÚ*×:Ô
Ñ
accesscontextmanager4ServicePerimetersServicePerimeterStatusIngressPolicygcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicy:ServicePerimetersServicePerimeterStatusIngressPolicyList of `IngressPolicies` to apply to the perimeter. A perimeter may
have multiple `IngressPolicies`, each of which is evaluated
separately. Access is granted if any `Ingress Policy` grants it.
Must be empty for a perimeter bridge.
Structure is documented below.

	resourcesB*" A list of GCP resources that are inside of the service perimeter.
Currently only projects are allowed.
Format: projects/{project_number}

restrictedServicesB*" ÿGCP services that are subject to the Service Perimeter
restrictions. Must contain a list of services. For example, if
`storage.googleapis.com` is specified, access to the storage
buckets inside the perimeter must meet the perimeter's access
restrictions.
ù
vpcAccessibleServicesòBï:ì
é
accesscontextmanager<ServicePerimetersServicePerimeterStatusVpcAccessibleServicesgcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusVpcAccessibleServices:ServicePerimetersServicePerimeterStatusVpcAccessibleServiceskSpecifies how APIs are allowed to communicate within the Service
Perimeter.
Structure is documented below.
:ä
Î
accesscontextmanager3ServicePerimetersServicePerimeterStatusEgressPolicygcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicy:ServicePerimetersServicePerimeterStatusEgressPolicy
ù

egressFromõBò:ï
ì
accesscontextmanager=ServicePerimetersServicePerimeterStatusEgressPolicyEgressFromgcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressFrom:ServicePerimetersServicePerimeterStatusEgressPolicyEgressFromsDefines conditions on the source of a request causing this `EgressPolicy` to apply.
Structure is documented below.

egressToïBì:é
æ
accesscontextmanager;ServicePerimetersServicePerimeterStatusEgressPolicyEgressTogcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressTo:ServicePerimetersServicePerimeterStatusEgressPolicyEgressToDefines the conditions on the `ApiOperation` and destination resources that
cause this `EgressPolicy` to apply.
Structure is documented below.
:¼
ì
accesscontextmanager=ServicePerimetersServicePerimeterStatusEgressPolicyEgressFromgcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressFrom:ServicePerimetersServicePerimeterStatusEgressPolicyEgressFromÊ

Ç
ò

identitiesB*" ÛIdentities can be an individual user, service account, Google group,
or third-party identity. For third-party identity, only single identities
are supported and other identity types are not supported.The v1 identities
that have the prefix user, group and serviceAccount in
https://cloud.google.com/iam/docs/principal-identifiers#v1 are supported.
§
identityTypeB" Specifies the type of identities that are allowed access to outside the
perimeter. If left unspecified, then members of `identities` field will
be allowed access.
Possible values are: `IDENTITY_TYPE_UNSPECIFIED`, `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
´
sourceRestrictionB" Whether to enforce traffic restrictions based on `sources` field. If the `sources` field is non-empty, then this field must be set to `SOURCE_RESTRICTION_ENABLED`.
Possible values are: `SOURCE_RESTRICTION_UNSPECIFIED`, `SOURCE_RESTRICTION_ENABLED`, `SOURCE_RESTRICTION_DISABLED`.
î
sourcesB*:
þ
accesscontextmanagerCServicePerimetersServicePerimeterStatusEgressPolicyEgressFromSource gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressFromSource:ServicePerimetersServicePerimeterStatusEgressPolicyEgressFromSourceVSources that this EgressPolicy authorizes access from.
Structure is documented below.
:
þ
accesscontextmanagerCServicePerimetersServicePerimeterStatusEgressPolicyEgressFromSource gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressFromSource:ServicePerimetersServicePerimeterStatusEgressPolicyEgressFromSource

accessLevelB" pAn AccessLevel resource name that allows resources outside the ServicePerimeter to be accessed from the inside.
:É	
æ
accesscontextmanager;ServicePerimetersServicePerimeterStatusEgressPolicyEgressTogcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressTo:ServicePerimetersServicePerimeterStatusEgressPolicyEgressToÝ
ÚÚ
externalResourcesB*" ¼A list of external resources that are allowed to be accessed. A request
matches if it contains an external resource in this list (Example:
s3://bucket/path). Currently '*' is not allowed.
¾

operationsB*:

accesscontextmanagerDServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperation¢gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperation:ServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperationA list of `ApiOperations` that this egress rule applies to. A request matches
if it contains an operation/service in this list.
Structure is documented below.
¹
	resourcesB*" £A list of resources, currently only projects in the form
`projects/<projectnumber>`, that match this to stanza. A request matches
if it contains a resource in this list. If * is specified for resources,
then this `EgressTo` rule will authorize access to all resources outside
the perimeter.
:þ

accesscontextmanagerDServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperation¢gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperation:ServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperation÷
ôÿ
methodSelectors·B´*±:®
«
accesscontextmanagerRServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperationMethodSelector¾gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperationMethodSelector:ServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperationMethodSelector±API methods or permissions to allow. Method or permission must belong
to the service specified by `serviceName` field. A single MethodSelector
entry with `*` specified for the `method` field will allow all methods
AND permissions for the service specified in `serviceName`.
Structure is documented below.
ï
serviceNameB" ÙThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with serviceName
field set to `*` will allow all methods AND permissions for all services.
:
«
accesscontextmanagerRServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperationMethodSelector¾gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperationMethodSelector:ServicePerimetersServicePerimeterStatusEgressPolicyEgressToOperationMethodSelectorØ
ÕÈ
methodB" ·Value for `method` should be a valid method name for the corresponding
`serviceName` in `ApiOperation`. If `*` used as value for method,
then ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:ù
Ñ
accesscontextmanager4ServicePerimetersServicePerimeterStatusIngressPolicygcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicy:ServicePerimetersServicePerimeterStatusIngressPolicy¢

ingressFromûBø:õ
ò
accesscontextmanager?ServicePerimetersServicePerimeterStatusIngressPolicyIngressFromgcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressFrom:ServicePerimetersServicePerimeterStatusIngressPolicyIngressFromxDefines the conditions on the source of a request causing this `IngressPolicy`
to apply.
Structure is documented below.

	ingressToõBò:ï
ì
accesscontextmanager=ServicePerimetersServicePerimeterStatusIngressPolicyIngressTogcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressTo:ServicePerimetersServicePerimeterStatusIngressPolicyIngressToDefines the conditions on the `ApiOperation` and request destination that cause
this `IngressPolicy` to apply.
Structure is documented below.
:û
ò
accesscontextmanager?ServicePerimetersServicePerimeterStatusIngressPolicyIngressFromgcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressFrom:ServicePerimetersServicePerimeterStatusIngressPolicyIngressFrom
×

identitiesB*" ÀA list of identities that are allowed access through this ingress policy.
Should be in the format of email address. The email address should represent
individual user or service account only.
©
identityTypeB" Specifies the type of identities that are allowed access from outside the
perimeter. If left unspecified, then members of `identities` field will be
allowed access.
Possible values are: `IDENTITY_TYPE_UNSPECIFIED`, `ANY_IDENTITY`, `ANY_USER_ACCOUNT`, `ANY_SERVICE_ACCOUNT`.
÷
sourcesB*:

accesscontextmanagerEServicePerimetersServicePerimeterStatusIngressPolicyIngressFromSource¤gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressFromSource:ServicePerimetersServicePerimeterStatusIngressPolicyIngressFromSourceYSources that this `IngressPolicy` authorizes access from.
Structure is documented below.
:É

accesscontextmanagerEServicePerimetersServicePerimeterStatusIngressPolicyIngressFromSource¤gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressFromSource:ServicePerimetersServicePerimeterStatusIngressPolicyIngressFromSource¿
¼
accessLevelB" pAn AccessLevel resource name that allows resources outside the ServicePerimeter to be accessed from the inside.
±
resourceB" A Google Cloud resource that is allowed to ingress the perimeter.
Requests from these resources will be allowed to access perimeter data.
Currently only projects are allowed. Format `projects/{project_number}`
The project may be in any Google Cloud organization, not just the
organization that the perimeter is defined in. `*` is not allowed, the case
of allowing all Google Cloud resources only is not supported.
:	
ì
accesscontextmanager=ServicePerimetersServicePerimeterStatusIngressPolicyIngressTogcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressTo:ServicePerimetersServicePerimeterStatusIngressPolicyIngressToª
§Æ

operationsB*:

accesscontextmanagerFServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperation¦gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperation:ServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperation¡A list of `ApiOperations` the sources specified in corresponding `IngressFrom`
are allowed to perform in this `ServicePerimeter`.
Structure is documented below.
Û
	resourcesB*" ÅA list of resources, currently only projects in the form
`projects/<projectnumber>`, protected by this `ServicePerimeter`
that are allowed to be accessed by sources defined in the
corresponding `IngressFrom`. A request matches if it contains
a resource in this list. If `*` is specified for resources,
then this `IngressTo` rule will authorize access to all
resources inside the perimeter, provided that the request
also matches the `operations` field.
:	

accesscontextmanagerFServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperation¦gcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperation:ServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperationý
ú
methodSelectors½Bº*·:´
±
accesscontextmanagerTServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorÂgcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperationMethodSelector:ServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperationMethodSelector±API methods or permissions to allow. Method or permission must belong
to the service specified by `serviceName` field. A single MethodSelector
entry with `*` specified for the `method` field will allow all methods
AND permissions for the service specified in `serviceName`.
Structure is documented below.
ï
serviceNameB" ÙThe name of the API whose methods or permissions the `IngressPolicy` or
`EgressPolicy` want to allow. A single `ApiOperation` with serviceName
field set to `*` will allow all methods AND permissions for all services.
:
±
accesscontextmanagerTServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorÂgcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperationMethodSelector:ServicePerimetersServicePerimeterStatusIngressPolicyIngressToOperationMethodSelectorØ
ÕÈ
methodB" ·Value for `method` should be a valid method name for the corresponding
`serviceName` in `ApiOperation`. If `*` used as value for method,
then ALL methods and permissions are allowed.


permissionB" sValue for permission should be a valid Cloud IAM permission for the
corresponding `serviceName` in `ApiOperation`.
:
é
accesscontextmanager<ServicePerimetersServicePerimeterStatusVpcAccessibleServicesgcp:accesscontextmanager/ServicePerimetersServicePerimeterStatusVpcAccessibleServices:ServicePerimetersServicePerimeterStatusVpcAccessibleServices

allowedServicesB*" hThe list of APIs usable within the Service Perimeter.
Must be empty unless `enableRestriction` is True.

enableRestrictionB
 oWhether to restrict API calls within the Service Perimeter to the
list of APIs specified in 'allowedServices'.
:¼
\
alloydbBackupEncryptionConfig9gcp:alloydb/BackupEncryptionConfig:BackupEncryptionConfigÛ
ØÕ

kmsKeyNameB" ÀThe fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME].
:§
V
alloydbBackupEncryptionInfo5gcp:alloydb/BackupEncryptionInfo:BackupEncryptionInfoÌ
ÉB
encryptionTypeB" *(Output)
Output only. Type of encryption.

kmsKeyVersionsB*" h(Output)
Output only. Cloud KMS key versions that are being used to protect the database or the backup.
:¬
V
alloydbBackupExpiryQuantity5gcp:alloydb/BackupExpiryQuantity:BackupExpiryQuantityÑ
ÎÁ
retentionCountB ¨(Output)
Output only. The backup's position among its backups with the same source cluster and type, by descending chronological order create time (i.e. newest first).

totalRetentionCountB j(Output)
Output only. The length of the quantity-based queue, specified by the backup's retention policy.
:ô
n
alloydbClusterAutomatedBackupPolicyEgcp:alloydb/ClusterAutomatedBackupPolicy:ClusterAutomatedBackupPolicy
þ
backupWindowB" The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed.
The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it will default to 1 hour.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
8
enabledB
 'Whether automated backups are enabled.
é
encryptionConfig§B¤:¡

alloydb,ClusterAutomatedBackupPolicyEncryptionConfigegcp:alloydb/ClusterAutomatedBackupPolicyEncryptionConfig:ClusterAutomatedBackupPolicyEncryptionConfigªEncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
Structure is documented below.
O
labelsB2" =Labels to apply to backups created using this configuration.
 
locationB" The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster.
ú
quantityBasedRetention¹B¶:³
°
alloydb2ClusterAutomatedBackupPolicyQuantityBasedRetentionqgcp:alloydb/ClusterAutomatedBackupPolicyQuantityBasedRetention:ClusterAutomatedBackupPolicyQuantityBasedRetention£Quantity-based Backup retention policy to retain recent backups. Conflicts with 'time_based_retention', both can't be set together.
Structure is documented below.
Ñ
timeBasedRetention­Bª:§
¤
alloydb.ClusterAutomatedBackupPolicyTimeBasedRetentionigcp:alloydb/ClusterAutomatedBackupPolicyTimeBasedRetention:ClusterAutomatedBackupPolicyTimeBasedRetentionTime-based Backup retention policy. Conflicts with 'quantity_based_retention', both can't be set together.
Structure is documented below.
õ
weeklySchedule¡B:

alloydb*ClusterAutomatedBackupPolicyWeeklyScheduleagcp:alloydb/ClusterAutomatedBackupPolicyWeeklySchedule:ClusterAutomatedBackupPolicyWeeklySchedule?Weekly schedule for the Backup.
Structure is documented below.
:ÿ

alloydb,ClusterAutomatedBackupPolicyEncryptionConfigegcp:alloydb/ClusterAutomatedBackupPolicyEncryptionConfig:ClusterAutomatedBackupPolicyEncryptionConfigÛ
ØÕ

kmsKeyNameB" ÀThe fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME].
:é
°
alloydb2ClusterAutomatedBackupPolicyQuantityBasedRetentionqgcp:alloydb/ClusterAutomatedBackupPolicyQuantityBasedRetention:ClusterAutomatedBackupPolicyQuantityBasedRetention4
20
countB !The number of backups to retain.
:¼
¤
alloydb.ClusterAutomatedBackupPolicyTimeBasedRetentionigcp:alloydb/ClusterAutomatedBackupPolicyTimeBasedRetention:ClusterAutomatedBackupPolicyTimeBasedRetention

retentionPeriodB" sThe retention period.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
:

alloydb*ClusterAutomatedBackupPolicyWeeklyScheduleagcp:alloydb/ClusterAutomatedBackupPolicyWeeklySchedule:ClusterAutomatedBackupPolicyWeeklyScheduleø
õÙ
daysOfWeeksB*" ÁThe days of the week to perform a backup. At least one day of the week must be provided.
Each value may be one of: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.


startTimes¼*¹:¶
³
alloydb3ClusterAutomatedBackupPolicyWeeklyScheduleStartTimesgcp:alloydb/ClusterAutomatedBackupPolicyWeeklyScheduleStartTime:ClusterAutomatedBackupPolicyWeeklyScheduleStartTimeÈThe times during the day to start a backup. At least one start time must be provided. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00).
Structure is documented below.
:ó
³
alloydb3ClusterAutomatedBackupPolicyWeeklyScheduleStartTimesgcp:alloydb/ClusterAutomatedBackupPolicyWeeklyScheduleStartTime:ClusterAutomatedBackupPolicyWeeklyScheduleStartTimeº
·¢
hoursB Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
S
minutesB BMinutes of hour of day. Currently, only the value 0 is supported.
^
nanosB OFractions of seconds in nanoseconds. Currently, only the value 0 is supported.
[
secondsB JSeconds of minutes of the time. Currently, only the value 0 is supported.
:
S
alloydbClusterBackupSource3gcp:alloydb/ClusterBackupSource:ClusterBackupSource9
75

backupNameB" !The name of the backup resource.
:»
q
alloydbClusterContinuousBackupConfigGgcp:alloydb/ClusterContinuousBackupConfig:ClusterContinuousBackupConfigÅ
Â^
enabledB
 MWhether continuous backup recovery is enabled. If not set, defaults to true.
ì
encryptionConfigªB§:¤
¡
alloydb-ClusterContinuousBackupConfigEncryptionConfigggcp:alloydb/ClusterContinuousBackupConfigEncryptionConfig:ClusterContinuousBackupConfigEncryptionConfigªEncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
Structure is documented below.
ð
recoveryWindowDaysB ÓThe numbers of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window.
If not set, defaults to 14 days.
:
¡
alloydb-ClusterContinuousBackupConfigEncryptionConfigggcp:alloydb/ClusterContinuousBackupConfigEncryptionConfig:ClusterContinuousBackupConfigEncryptionConfigÛ
ØÕ

kmsKeyNameB" ÀThe fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME].
:»
k
alloydbClusterContinuousBackupInfoCgcp:alloydb/ClusterContinuousBackupInfo:ClusterContinuousBackupInfoË
Èr
earliestRestorableTimeB" R(Output)
The earliest restorable time that can be restored to. Output only field.

enabledTimeB" j(Output)
When ContinuousBackup was most recently enabled. Set to null if ContinuousBackup is not enabled.
À
encryptionInfos¡B*:

alloydb)ClusterContinuousBackupInfoEncryptionInfo_gcp:alloydb/ClusterContinuousBackupInfoEncryptionInfo:ClusterContinuousBackupInfoEncryptionInfo(Output)
Output only. The encryption information for the WALs and backups required for ContinuousBackup.
Structure is documented below.

	schedulesB*" x(Output)
Days of the week on which a continuous backup is taken. Output only field. Ignored if passed into the request.
:ç

alloydb)ClusterContinuousBackupInfoEncryptionInfo_gcp:alloydb/ClusterContinuousBackupInfoEncryptionInfo:ClusterContinuousBackupInfoEncryptionInfoÌ
ÉB
encryptionTypeB" *(Output)
Output only. Type of encryption.

kmsKeyVersionsB*" h(Output)
Output only. Cloud KMS key versions that are being used to protect the database or the backup.
:¿
_
alloydbClusterEncryptionConfig;gcp:alloydb/ClusterEncryptionConfig:ClusterEncryptionConfigÛ
ØÕ

kmsKeyNameB" ÀThe fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME].
:ª
Y
alloydbClusterEncryptionInfo7gcp:alloydb/ClusterEncryptionInfo:ClusterEncryptionInfoÌ
ÉB
encryptionTypeB" *(Output)
Output only. Type of encryption.

kmsKeyVersionsB*" h(Output)
Output only. Cloud KMS key versions that are being used to protect the database or the backup.
:
P
alloydbClusterInitialUser1gcp:alloydb/ClusterInitialUser:ClusterInitialUser«
¨
password" oThe initial password for the user.
**Note**: This property is sensitive and will not be displayed in the plan.
%
userB" The database username.
:¬
t
alloydbClusterMaintenanceUpdatePolicyIgcp:alloydb/ClusterMaintenanceUpdatePolicy:ClusterMaintenanceUpdatePolicy³
°­
maintenanceWindows³B°*­:ª
§
alloydb/ClusterMaintenanceUpdatePolicyMaintenanceWindowkgcp:alloydb/ClusterMaintenanceUpdatePolicyMaintenanceWindow:ClusterMaintenanceUpdatePolicyMaintenanceWindowaPreferred windows to perform maintenance. Currently limited to 1.
Structure is documented below.
:Þ
§
alloydb/ClusterMaintenanceUpdatePolicyMaintenanceWindowkgcp:alloydb/ClusterMaintenanceUpdatePolicyMaintenanceWindow:ClusterMaintenanceUpdatePolicyMaintenanceWindow±
®µ
day" ©Preferred day of the week for maintenance, e.g. MONDAY, TUESDAY, etc.
Possible values are: `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`.
ó
	startTimeÈ:Å
Â
alloydb8ClusterMaintenanceUpdatePolicyMaintenanceWindowStartTime}gcp:alloydb/ClusterMaintenanceUpdatePolicyMaintenanceWindowStartTime:ClusterMaintenanceUpdatePolicyMaintenanceWindowStartTimePreferred time to start the maintenance operation on the specified day. Maintenance will start within 1 hour of this time.
Structure is documented below.
:¤
Â
alloydb8ClusterMaintenanceUpdatePolicyMaintenanceWindowStartTime}gcp:alloydb/ClusterMaintenanceUpdatePolicyMaintenanceWindowStartTime:ClusterMaintenanceUpdatePolicyMaintenanceWindowStartTimeÜ
ÙE
hours 8Hours of day in 24 hour format. Should be from 0 to 23.
S
minutesB BMinutes of hour of day. Currently, only the value 0 is supported.
^
nanosB OFractions of seconds in nanoseconds. Currently, only the value 0 is supported.
[
secondsB JSeconds of minutes of the time. Currently, only the value 0 is supported.
:Ý
\
alloydbClusterMigrationSource9gcp:alloydb/ClusterMigrationSource:ClusterMigrationSourceü
ùT
hostPortB" BThe host and port of the on-premises instance in host:port format
q
referenceIdB" \Place holder for the external source identifier(e.g DMS job name) that created the cluster.
.

sourceTypeB" Type of migration source.
:ì
V
alloydbClusterNetworkConfig5gcp:alloydb/ClusterNetworkConfig:ClusterNetworkConfig
ä
allocatedIpRangeB" ÉThe name of the allocated IP range for the private IP AlloyDB cluster. For example: "google-managed-services-default".
If set, the instance IPs for this cluster will be created in the allocated range.
¤
networkB" The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster.
It is specified in the form: "projects/{projectNumber}/global/networks/{network_id}".
:É
J
alloydbClusterPscConfig-gcp:alloydb/ClusterPscConfig:ClusterPscConfig{
yw

pscEnabledB
 cCreate an instance that allows connections from Private Service Connect endpoints to the instance.
:½
h
alloydbClusterRestoreBackupSourceAgcp:alloydb/ClusterRestoreBackupSource:ClusterRestoreBackupSourceQ
OM

backupName" ;The name of the backup that this cluster is restored from.
:À

alloydb$ClusterRestoreContinuousBackupSourceUgcp:alloydb/ClusterRestoreContinuousBackupSource:ClusterRestoreContinuousBackupSource´
±R
cluster" CThe name of the source cluster that this cluster is restored from.
[
pointInTime" HThe point in time that this cluster is restored to, in RFC 3339 format.
:ó
\
alloydbClusterSecondaryConfig9gcp:alloydb/ClusterSecondaryConfig:ClusterSecondaryConfig

primaryClusterName" rName of the primary cluster must be in the format
'projects/{project}/locations/{location}/clusters/{cluster_id}'
:Ñ
V
alloydbClusterTrialMetadata5gcp:alloydb/ClusterTrialMetadata:ClusterTrialMetadataö
ó0
endTimeB" End time of the trial cluster.
;
graceEndTimeB" %Grace end time of the trial cluster.
4
	startTimeB" !Start time of the trial cluster.
L
upgradeTimeB" 7Upgrade time of the trial cluster to standard cluster.
:Þ
t
alloydbInstanceClientConnectionConfigIgcp:alloydb/InstanceClientConnectionConfig:InstanceClientConnectionConfigå
âq
requireConnectorsB
 VConfiguration to enforce connectors only (ex: AuthProxy) connections to the database.
ì
	sslConfigB:

alloydb'InstanceClientConnectionConfigSslConfig[gcp:alloydb/InstanceClientConnectionConfigSslConfig:InstanceClientConnectionConfigSslConfigDSSL config option for this instance.
Structure is documented below.
:¶

alloydb'InstanceClientConnectionConfigSslConfig[gcp:alloydb/InstanceClientConnectionConfigSslConfig:InstanceClientConnectionConfigSslConfig¡

sslModeB" SSL mode. Specifies client-server SSL/TLS connection behavior.
Possible values are: `ENCRYPTED_ONLY`, `ALLOW_UNENCRYPTED_AND_ENCRYPTED`.
:
Y
alloydbInstanceMachineConfig7gcp:alloydb/InstanceMachineConfig:InstanceMachineConfig>
<:
cpuCountB (The number of CPU's in the VM instance.
:î
Y
alloydbInstanceNetworkConfig7gcp:alloydb/InstanceNetworkConfig:InstanceNetworkConfig
þ
authorizedExternalNetworks°B­*ª:§
¤
alloydb.InstanceNetworkConfigAuthorizedExternalNetworkigcp:alloydb/InstanceNetworkConfigAuthorizedExternalNetwork:InstanceNetworkConfigAuthorizedExternalNetwork¬A list of external networks authorized to access this instance. This
field is only allowed to be set when `enable_public_ip` is set to
true.
Structure is documented below.
N
enableOutboundPublicIpB
 .Enabling outbound public ip for the instance.
¹
enablePublicIpB
  Enabling public ip for the instance. If a user wishes to disable this,
please also clear the list of the authorized external networks set on
the same instance.
:÷
¤
alloydb.InstanceNetworkConfigAuthorizedExternalNetworkigcp:alloydb/InstanceNetworkConfigAuthorizedExternalNetwork:InstanceNetworkConfigAuthorizedExternalNetworkN
LJ
	cidrRangeB" 7CIDR range for one authorized network of the instance.
:Î
k
alloydbInstanceObservabilityConfigCgcp:alloydb/InstanceObservabilityConfig:InstanceObservabilityConfigÞ
Û?
enabledB
 .Observability feature status for an instance.

maxQueryStringLengthB jQuery string length. The default value is 10240. Any integer between 1024 and 100000 is considered valid.
A
preserveCommentsB
 'Preserve comments in the query string.
Ã
queryPlansPerMinuteB ¥Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 200 is considered valid.
m
recordApplicationTagsB
 NRecord application tags for an instance. This flag is turned "on" by default.
`
trackActiveQueriesB
 DTrack actively running queries. If not set, default value is "off".
]
trackWaitEventTypesB
 @Record wait event types during query execution for an instance.
T
trackWaitEventsB
 ;Record wait events during query execution for an instance.
:è
e
alloydbInstancePscInstanceConfig?gcp:alloydb/InstancePscInstanceConfig:InstancePscInstanceConfigþ
ûÃ
allowedConsumerProjectsB*" List of consumer projects that are allowed to create PSC endpoints to service-attachments to this instance.
These should be specified as project numbers only.


pscDnsNameB" s(Output)
The DNS name of the instance for PSC connectivity.
Name convention: <uid>.<uid>.<region>.alloydb-psc.goog
¨
serviceAttachmentLinkB" (Output)
The service attachment created when Private Service Connect (PSC) is enabled for the instance.
The name of the resource will be in the format of
`projects/<alloydb-tenant-project-number>/regions/<region-name>/serviceAttachments/<service-attachment-name>`
:º
k
alloydbInstanceQueryInsightsConfigCgcp:alloydb/InstanceQueryInsightsConfig:InstanceQueryInsightsConfigÊ
ÇÂ
queryPlansPerMinuteB ¤Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.

queryStringLengthB fQuery string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
m
recordApplicationTagsB
 NRecord application tags for an instance. This flag is turned "on" by default.

recordClientAddressB
 oRecord client address for an instance. Client address is PII information. This flag is turned "on" by default.
:´
\
alloydbInstanceReadPoolConfig9gcp:alloydb/InstanceReadPoolConfig:InstanceReadPoolConfigT
RP
	nodeCountB =Read capacity, i.e. number of nodes in a read pool instance.
:
V
alloydbgetLocationsLocation5gcp:alloydb/getLocationsLocation:getLocationsLocation¸
µl
displayName" YThe friendly name for this location, typically a nearby city name. For example, "Tokyo".
v
labels2" fCross-service attributes for the location. For example `{"cloud.googleapis.com/region": "us-east1"}`.
P

locationId" >The canonical id for this location. For example: "us-east1"..
g
metadata2" UService-specific metadata. For example the available capacity at the given location.

name" Resource name for the location, which may vary between implementations. For example: "projects/example-project/locations/us-east1".
:
¤
alloydb.getSupportedDatabaseFlagsSupportedDatabaseFlagigcp:alloydb/getSupportedDatabaseFlagsSupportedDatabaseFlag:getSupportedDatabaseFlagsSupportedDatabaseFlagí
ê
acceptsMultipleValues
 {Whether the database flag accepts multiple values. If true, a comma-separated list of stringified values may be specified.

flagName" |The name of the database flag, e.g. "max_allowed_packets". The is a possibly key for the Instance.database_flags map field.
û
integerRestrictionsä:á
Þ
alloydbAgetSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictionsgcp:alloydb/getSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictions:getSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictions}Restriction on `INTEGER` type value. Specifies the minimum value and the maximum value that can be specified, if applicable.
»
name" ®The name of the flag resource, following Google Cloud conventions, e.g.: * projects/{project}/locations/{location}/flags/{flag} This field currently has no semantic meaning.

requiresDbRestart
 èWhether setting or updating this flag on an Instance requires a database restart. If a flag that requires database restart is set, the backend will automatically restart the database (making sure to satisfy any availability SLO's).

stringRestrictionsá:Þ
Û
alloydb@getSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictionsgcp:alloydb/getSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictions:getSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictionsRestriction on `STRING` type value. The list of allowed values, if bounded. This field will be empty if there is a unbounded number of allowed values.
ª
supportedDbVersions*" Major database engine versions for which this flag is supported. The supported values are `POSTGRES_14` and `DATABASE_VERSION_UNSPECIFIED`.
º
	valueType" ¨ValueType describes the semantic type of the value that the flag accepts. Regardless of the ValueType, the Instance.database_flags field accepts the stringified version of the value, i.e. "20" or "3.14". The supported values are `VALUE_TYPE_UNSPECIFIED`, `STRING`, `INTEGER`, `FLOAT` and `NONE`.
:û
Þ
alloydbAgetSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictionsgcp:alloydb/getSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictions:getSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictions
H
maxValue" 8The maximum value that can be specified, if applicable.
H
minValue" 8The minimum value that can be specified, if applicable.
:ñ
Û
alloydb@getSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictionsgcp:alloydb/getSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictions:getSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictions

allowedValues*" sThe list of allowed values, if bounded. This field will be empty if there is a unbounded number of allowed values.
:ñ
b

apigatewayApiConfigGatewayConfig<gcp:apigateway/ApiConfigGatewayConfig:ApiConfigGatewayConfig

backendConfig:


apigateway#ApiConfigGatewayConfigBackendConfigVgcp:apigateway/ApiConfigGatewayConfigBackendConfig:ApiConfigGatewayConfigBackendConfigaBackend settings that are applied to all backends of the Gateway.
Structure is documented below.
:


apigateway#ApiConfigGatewayConfigBackendConfigVgcp:apigateway/ApiConfigGatewayConfigBackendConfig:ApiConfigGatewayConfigBackendConfig
þ
googleServiceAccount" áGoogle Cloud IAM service account used to sign OIDC tokens for backends that have authentication configured
(https://cloud.google.com/service-infrastructure/docs/service-management/reference/rest/v1/services.configs#backend).
:Ò
\

apigatewayApiConfigGrpcService8gcp:apigateway/ApiConfigGrpcService:ApiConfigGrpcServiceñ
îî
fileDescriptorSet:


apigateway%ApiConfigGrpcServiceFileDescriptorSetZgcp:apigateway/ApiConfigGrpcServiceFileDescriptorSet:ApiConfigGrpcServiceFileDescriptorSetÀInput only. File descriptor set, generated by protoc.
To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.
$ protoc --include_imports --include_source_info test.proto -o out.pb
Structure is documented below.
ú
sourcesvBt*r:p
n

apigatewayApiConfigGrpcServiceSourceDgcp:apigateway/ApiConfigGrpcServiceSource:ApiConfigGrpcServiceSourceöUncompiled proto files associated with the descriptor set, used for display purposes (server-side compilation is not supported). These should match the inputs to 'protoc' command used to generate fileDescriptorSet.
Structure is documented below.
:¿


apigateway%ApiConfigGrpcServiceFileDescriptorSetZgcp:apigateway/ApiConfigGrpcServiceFileDescriptorSet:ApiConfigGrpcServiceFileDescriptorSetª
§4
contents" $Base64 encoded content of the file.
o
path" cThe file path (full or relative path). This is typically the path of the file when it is uploaded.
:
n

apigatewayApiConfigGrpcServiceSourceDgcp:apigateway/ApiConfigGrpcServiceSource:ApiConfigGrpcServiceSourceª
§4
contents" $Base64 encoded content of the file.
o
path" cThe file path (full or relative path). This is typically the path of the file when it is uploaded.
:®
t

apigatewayApiConfigIamBindingConditionHgcp:apigateway/ApiConfigIamBindingCondition:ApiConfigIamBindingCondition6
4
descriptionB" 

expression" 
title" :«
q

apigatewayApiConfigIamMemberConditionFgcp:apigateway/ApiConfigIamMemberCondition:ApiConfigIamMemberCondition6
4
descriptionB" 

expression" 
title" :¦
w

apigatewayApiConfigManagedServiceConfigJgcp:apigateway/ApiConfigManagedServiceConfig:ApiConfigManagedServiceConfigª
§4
contents" $Base64 encoded content of the file.
o
path" cThe file path (full or relative path). This is typically the path of the file when it is uploaded.
:Ð
h

apigatewayApiConfigOpenapiDocument@gcp:apigateway/ApiConfigOpenapiDocument:ApiConfigOpenapiDocumentã
àÝ
document:


apigateway ApiConfigOpenapiDocumentDocumentPgcp:apigateway/ApiConfigOpenapiDocumentDocument:ApiConfigOpenapiDocumentDocumentHThe OpenAPI Specification document file.
Structure is documented below.
:°


apigateway ApiConfigOpenapiDocumentDocumentPgcp:apigateway/ApiConfigOpenapiDocumentDocument:ApiConfigOpenapiDocumentDocumentª
§4
contents" $Base64 encoded content of the file.
o
path" cThe file path (full or relative path). This is typically the path of the file when it is uploaded.
:
b

apigatewayApiIamBindingCondition<gcp:apigateway/ApiIamBindingCondition:ApiIamBindingCondition6
4
descriptionB" 

expression" 
title" :
_

apigatewayApiIamMemberCondition:gcp:apigateway/ApiIamMemberCondition:ApiIamMemberCondition6
4
descriptionB" 

expression" 
title" :¨
n

apigatewayGatewayIamBindingConditionDgcp:apigateway/GatewayIamBindingCondition:GatewayIamBindingCondition6
4
descriptionB" 

expression" 
title" :¥
k

apigatewayGatewayIamMemberConditionBgcp:apigateway/GatewayIamMemberCondition:GatewayIamMemberCondition6
4
descriptionB" 

expression" 
title" :
`
apigeeAddonsConfigAddonsConfig<gcp:apigee/AddonsConfigAddonsConfig:AddonsConfigAddonsConfig´

±

advancedApiOpsConfig¥B¢:

apigee,AddonsConfigAddonsConfigAdvancedApiOpsConfigdgcp:apigee/AddonsConfigAddonsConfigAdvancedApiOpsConfig:AddonsConfigAddonsConfigAdvancedApiOpsConfigJConfiguration for the Monetization add-on.
Structure is documented below.
þ
apiSecurityConfigB:

apigee)AddonsConfigAddonsConfigApiSecurityConfig^gcp:apigee/AddonsConfigAddonsConfigApiSecurityConfig:AddonsConfigAddonsConfigApiSecurityConfigJConfiguration for the Monetization add-on.
Structure is documented below.

connectorsPlatformConfig±B®:«
¨
apigee0AddonsConfigAddonsConfigConnectorsPlatformConfiglgcp:apigee/AddonsConfigAddonsConfigConnectorsPlatformConfig:AddonsConfigAddonsConfigConnectorsPlatformConfigJConfiguration for the Monetization add-on.
Structure is documented below.
þ
integrationConfigB:

apigee)AddonsConfigAddonsConfigIntegrationConfig^gcp:apigee/AddonsConfigAddonsConfigIntegrationConfig:AddonsConfigAddonsConfigIntegrationConfigJConfiguration for the Monetization add-on.
Structure is documented below.

monetizationConfigB:

apigee*AddonsConfigAddonsConfigMonetizationConfig`gcp:apigee/AddonsConfigAddonsConfigMonetizationConfig:AddonsConfigAddonsConfigMonetizationConfigJConfiguration for the Monetization add-on.
Structure is documented below.
:ú

apigee,AddonsConfigAddonsConfigAdvancedApiOpsConfigdgcp:apigee/AddonsConfigAddonsConfigAdvancedApiOpsConfig:AddonsConfigAddonsConfigAdvancedApiOpsConfigY
WU
enabledB
 DFlag that specifies whether the Advanced API Ops add-on is enabled.
:Õ

apigee)AddonsConfigAddonsConfigApiSecurityConfig^gcp:apigee/AddonsConfigAddonsConfigApiSecurityConfig:AddonsConfigAddonsConfigApiSecurityConfig¼
¹U
enabledB
 DFlag that specifies whether the Advanced API Ops add-on is enabled.
`
	expiresAtB" M(Output)
Flag that specifies whether the Advanced API Ops add-on is enabled.
:ê
¨
apigee0AddonsConfigAddonsConfigConnectorsPlatformConfiglgcp:apigee/AddonsConfigAddonsConfigConnectorsPlatformConfig:AddonsConfigAddonsConfigConnectorsPlatformConfig¼
¹U
enabledB
 DFlag that specifies whether the Advanced API Ops add-on is enabled.
`
	expiresAtB" M(Output)
Flag that specifies whether the Advanced API Ops add-on is enabled.
:ñ

apigee)AddonsConfigAddonsConfigIntegrationConfig^gcp:apigee/AddonsConfigAddonsConfigIntegrationConfig:AddonsConfigAddonsConfigIntegrationConfigY
WU
enabledB
 DFlag that specifies whether the Advanced API Ops add-on is enabled.
:ô

apigee*AddonsConfigAddonsConfigMonetizationConfig`gcp:apigee/AddonsConfigAddonsConfigMonetizationConfig:AddonsConfigAddonsConfigMonetizationConfigY
WU
enabledB
 DFlag that specifies whether the Advanced API Ops add-on is enabled.
:»
9
apigeeApiMetaData"gcp:apigee/ApiMetaData:ApiMetaDataý
úY
	createdAtB" FTime at which the API proxy was created, in milliseconds since epoch.
m
lastModifiedAtB" UTime at which the API proxy was most recently modified, in milliseconds since epoch.
.
subTypeB" The type of entity described
:
K
apigeeAppGroupAttribute.gcp:apigee/AppGroupAttribute:AppGroupAttributeO
M#
nameB" Key of the attribute
&
valueB" Value of the attribute
:¡
N
apigeeDeveloperAttribute0gcp:apigee/DeveloperAttribute:DeveloperAttributeO
M#
nameB" Key of the attribute
&
valueB" Value of the attribute
:¬
r
apigeeEnvironmentIamBindingConditionHgcp:apigee/EnvironmentIamBindingCondition:EnvironmentIamBindingCondition6
4
descriptionB" 

expression" 
title" :©
o
apigeeEnvironmentIamMemberConditionFgcp:apigee/EnvironmentIamMemberCondition:EnvironmentIamMemberCondition6
4
descriptionB" 

expression" 
title" :â
W
apigeeEnvironmentNodeConfig6gcp:apigee/EnvironmentNodeConfig:EnvironmentNodeConfig

currentAggregateNodeCountB" m(Output)
The current total number of gateway nodes that each environment currently has across
all instances.
õ
maxNodeCountB" ÞThe maximum total number of gateway nodes that the is reserved for all instances that
has the specified environment. If not specified, the default is determined by the
recommended maximum number of nodes for that gateway.
õ
minNodeCountB" ÞThe minimum total number of gateway nodes that the is reserved for all instances that
has the specified environment. If not specified, the default is determined by the
recommended minimum number of nodes for that gateway.
:

apigee$KeystoresAliasesKeyCertFileCertsInfoTgcp:apigee/KeystoresAliasesKeyCertFileCertsInfo:KeystoresAliasesKeyCertFileCertsInfo

	certInfos¨B¥*¢:

apigee,KeystoresAliasesKeyCertFileCertsInfoCertInfodgcp:apigee/KeystoresAliasesKeyCertFileCertsInfoCertInfo:KeystoresAliasesKeyCertFileCertsInfoCertInfoN(Output)
List of all properties in the object.
Structure is documented below.
:ú

apigee,KeystoresAliasesKeyCertFileCertsInfoCertInfodgcp:apigee/KeystoresAliasesKeyCertFileCertsInfoCertInfo:KeystoresAliasesKeyCertFileCertsInfoCertInfoØ
ÕF
basicConstraintsB" ,(Output)
X.509 basic constraints extension.
Y

expiryDateB" E(Output)
X.509 notAfter validity period in milliseconds since epoch.
­
isValidB" (Output)
Flag that specifies whether the certificate is valid.
Flag is set to Yes if the certificate is valid, No if expired, or Not yet if not yet valid.
'
issuerB" (Output)
X.509 issuer.
W
	publicKeyB" D(Output)
Public key component of the X.509 subject public key info.
4
serialNumberB" (Output)
X.509 serial number.
7

sigAlgNameB" #(Output)
X.509 signatureAlgorithm.
)
subjectB" (Output)
X.509 subject.
^
subjectAlternativeNamesB*" ;(Output)
X.509 subject alternative names (SANs) extension.
Y
	validFromB" F(Output)
X.509 notBefore validity period in milliseconds since epoch.
)
versionB (Output)
X.509 version.
:÷
u
apigeeKeystoresAliasesPkcs12CertsInfoJgcp:apigee/KeystoresAliasesPkcs12CertsInfo:KeystoresAliasesPkcs12CertsInfoý
ú÷
	certInfosB*:

apigee'KeystoresAliasesPkcs12CertsInfoCertInfoZgcp:apigee/KeystoresAliasesPkcs12CertsInfoCertInfo:KeystoresAliasesPkcs12CertsInfoCertInfoN(Output)
List of all properties in the object.
Structure is documented below.
:ë

apigee'KeystoresAliasesPkcs12CertsInfoCertInfoZgcp:apigee/KeystoresAliasesPkcs12CertsInfoCertInfo:KeystoresAliasesPkcs12CertsInfoCertInfoØ
ÕF
basicConstraintsB" ,(Output)
X.509 basic constraints extension.
Y

expiryDateB" E(Output)
X.509 notAfter validity period in milliseconds since epoch.
­
isValidB" (Output)
Flag that specifies whether the certificate is valid.
Flag is set to Yes if the certificate is valid, No if expired, or Not yet if not yet valid.
'
issuerB" (Output)
X.509 issuer.
W
	publicKeyB" D(Output)
Public key component of the X.509 subject public key info.
4
serialNumberB" (Output)
X.509 serial number.
7

sigAlgNameB" #(Output)
X.509 signatureAlgorithm.
)
subjectB" (Output)
X.509 subject.
^
subjectAlternativeNamesB*" ;(Output)
X.509 subject alternative names (SANs) extension.
Y
	validFromB" F(Output)
X.509 notBefore validity period in milliseconds since epoch.
)
versionB (Output)
X.509 version.
:¨

apigee'KeystoresAliasesSelfSignedCertCertsInfoZgcp:apigee/KeystoresAliasesSelfSignedCertCertsInfo:KeystoresAliasesSelfSignedCertCertsInfo

	certInfos±B®*«:¨
¥
apigee/KeystoresAliasesSelfSignedCertCertsInfoCertInfojgcp:apigee/KeystoresAliasesSelfSignedCertCertsInfoCertInfo:KeystoresAliasesSelfSignedCertCertsInfoCertInfoN(Output)
List of all properties in the object.
Structure is documented below.
:
¥
apigee/KeystoresAliasesSelfSignedCertCertsInfoCertInfojgcp:apigee/KeystoresAliasesSelfSignedCertCertsInfoCertInfo:KeystoresAliasesSelfSignedCertCertsInfoCertInfoð
íF
basicConstraintsB" ,(Output)
X.509 basic constraints extension.
Y

expiryDateB" E(Output)
X.509 notAfter validity period in milliseconds since epoch.
­
isValidB" (Output)
Flag that specifies whether the certificate is valid.
Flag is set to Yes if the certificate is valid, No if expired, or Not yet if not yet valid.
'
issuerB" (Output)
X.509 issuer.
W
	publicKeyB" D(Output)
Public key component of the X.509 subject public key info.
4
serialNumberB" (Output)
X.509 serial number.
7

sigAlgNameB" #(Output)
X.509 signatureAlgorithm.
A
subjectB" 0Subject details.
Structure is documented below.
^
subjectAlternativeNamesB*" ;(Output)
X.509 subject alternative names (SANs) extension.
Y
	validFromB" F(Output)
X.509 notBefore validity period in milliseconds since epoch.
)
versionB (Output)
X.509 version.
:®

apigee%KeystoresAliasesSelfSignedCertSubjectVgcp:apigee/KeystoresAliasesSelfSignedCertSubject:KeystoresAliasesSelfSignedCertSubject¡
V

commonNameB" BCommon name of the organization. Maximum length is 64 characters.
f
countryCodeB" QTwo-letter country code. Example, IN for India, US for United States of America.
9
emailB" *Email address. Max 255 characters.

- - -
G
localityB" 5City or town name. Maximum length is 128 characters.
A
orgB" 4Organization name. Maximum length is 64 characters.
J
orgUnitB" 9Organization team name. Maximum length is 64 characters.
I
stateB" :State or district name. Maximum length is 128 characters.
:
À
apigee8KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNames|gcp:apigee/KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNames:KeystoresAliasesSelfSignedCertSubjectAlternativeDnsNames=
;9
subjectAlternativeNameB" Subject Alternative Name
:´
Z
apigeeOrganizationProperties8gcp:apigee/OrganizationProperties:OrganizationPropertiesÕ
ÒÏ

propertieszBx*v:t
r
apigeeOrganizationPropertiesPropertyHgcp:apigee/OrganizationPropertiesProperty:OrganizationPropertiesPropertyEList of all properties in the object.
Structure is documented below.
:Æ
r
apigeeOrganizationPropertiesPropertyHgcp:apigee/OrganizationPropertiesProperty:OrganizationPropertiesPropertyP
N$
nameB" Name of the property.
&
valueB" Value of the property.
:Ð
N
apigeeSharedflowMetaData0gcp:apigee/SharedflowMetaData:SharedflowMetaDataý
úY
	createdAtB" FTime at which the API proxy was created, in milliseconds since epoch.
m
lastModifiedAtB" UTime at which the API proxy was most recently modified, in milliseconds since epoch.
.
subTypeB" The type of entity described
:
Q
apigeeTargetServerSSlInfo2gcp:apigee/TargetServerSSlInfo:TargetServerSSlInfoÅ
Âç
ciphersB*" ÓThe SSL/TLS cipher suites to be used. For programmable proxies, it must be one of the cipher suite names listed in: http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites. For configurable proxies, it must follow the configuration specified in: https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration. This setting has no effect for configurable proxies when negotiating TLS 1.3.
0
clientAuthEnabledB
 Enables two-way TLS.
Ì

commonNameuBs:q
o
apigeeTargetServerSSlInfoCommonNameFgcp:apigee/TargetServerSSlInfoCommonName:TargetServerSSlInfoCommonNameGThe TLS Common Name of the certificate.
Structure is documented below.
W
enabled
 HEnables TLS. If false, neither one-way nor two-way TLS will be enabled.
³
ignoreValidationErrorsB
 If true, Edge ignores TLS certificate errors. Valid when configuring TLS for target servers and target endpoints, and when configuring virtual hosts that use 2-way TLS. When used with a target endpoint/target server, if the backend system uses SNI and returns a cert with a subject Distinguished Name (DN) that does not match the hostname, there is no way to ignore the error and the connection fails.
|
keyAliasB" jRequired if clientAuthEnabled is true. The resource ID for the alias containing the private key and cert.
Z
keyStoreB" HRequired if clientAuthEnabled is true. The resource ID of the keystore.
3
	protocolsB*" The TLS versioins to be used.
7

trustStoreB" #The resource ID of the truststore.
:
o
apigeeTargetServerSSlInfoCommonNameFgcp:apigee/TargetServerSSlInfoCommonName:TargetServerSSlInfoCommonName¥
¢>
valueB" /The TLS Common Name string of the certificate.
`
wildcardMatchB
 IIndicates whether the cert should be matched against as a wildcard cert.
:ç
l
	appengineApplicationFeatureSettingsCgcp:appengine/ApplicationFeatureSettings:ApplicationFeatureSettingsw
us
splitHealthChecks
 ZSet to false to use the legacy health check instead of the readiness
and liveness checks.
:¥
H
	appengineApplicationIap+gcp:appengine/ApplicationIap:ApplicationIapØ
Õ
enabledB
 y(Optional) Whether the serving infrastructure will authenticate and authorize all incoming requests. 
(default is false)
K
oauth2ClientId" 5OAuth2 client ID to use for the authentication flow.
¥
oauth2ClientSecret" OAuth2 client secret to use for the authentication flow.
The SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field.
Q
oauth2ClientSecretSha256B" /Hex-encoded SHA-256 hash of the client secret.
:¡
l
	appengineApplicationUrlDispatchRuleCgcp:appengine/ApplicationUrlDispatchRule:ApplicationUrlDispatchRule1
/
domainB" 
pathB" 
serviceB" :Ç

	appengine'ApplicationUrlDispatchRulesDispatchRule]gcp:appengine/ApplicationUrlDispatchRulesDispatchRule:ApplicationUrlDispatchRulesDispatchRule®
«
domainB" Domain name to match against. The wildcard "*" is supported if specified before a period: "*.".
Defaults to matching all domains: "*".
À
path" ³Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.
The sum of the lengths of the domain and path may not exceed 100 characters.
Ê
service" ºPathname within the host. Must start with a "/". A single "*" can be included at the end of the path.
The sum of the lengths of the domain and path may not exceed 100 characters.

- - -
:×
o
	appengineDomainMappingResourceRecordEgcp:appengine/DomainMappingResourceRecord:DomainMappingResourceRecordã
àv
nameB" hRelative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.

rrdataB" sData for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
`
typeB" RResource record type. Example: `AAAA`.
Possible values are: `A`, `AAAA`, `CNAME`.
:
f
	appengineDomainMappingSslSettings?gcp:appengine/DomainMappingSslSettings:DomainMappingSslSettings


ê
certificateIdB" ÒID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will
remove SSL support.
By default, a managed certificate is automatically created for every domain mapping. To omit SSL support
or to configure SSL manually, specify `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must be
authorized to administer the `AuthorizedCertificate` resource to manually map it to a DomainMapping resource.
Example: 12345.

pendingManagedCertificateIdB" è(Output)
ID of the managed `AuthorizedCertificate` resource currently being provisioned, if applicable. Until the new
managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the
provisioning process completes, the `certificateId` field will reflect the new managed certificate and this
field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the
`certificateId` field with an update request.

sslManagementType" øSSL management type for this domain. If `AUTOMATIC`, a managed certificate is automatically provisioned.
If `MANUAL`, `certificateId` must be manually specified in order to configure SSL for this domain.
Possible values are: `AUTOMATIC`, `MANUAL`.
:ÿ
c
	appengineEngineSplitTrafficSplit=gcp:appengine/EngineSplitTrafficSplit:EngineSplitTrafficSplit
 
allocations2" Mapping from version IDs within the service to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the service may not have any traffic allocation. Services that have traffic allocated cannot be deleted until either the service is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.

- - -
î
shardByB" ÜMechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed.
Possible values are: `UNSPECIFIED`, `COOKIE`, `IP`, `RANDOM`.
:¡
o
	appengineFlexibleAppVersionApiConfigEgcp:appengine/FlexibleAppVersionApiConfig:FlexibleAppVersionApiConfig­
ªâ
authFailActionB" ÉAction to take when users access resources that require authentication.
Default value is `AUTH_FAIL_ACTION_REDIRECT`.
Possible values are: `AUTH_FAIL_ACTION_REDIRECT`, `AUTH_FAIL_ACTION_UNAUTHORIZED`.
¬
loginB" Level of login required to access this resource.
Default value is `LOGIN_OPTIONAL`.
Possible values are: `LOGIN_OPTIONAL`, `LOGIN_ADMIN`, `LOGIN_REQUIRED`.
F
script" 8Path to the script from the application root directory.

securityLevelB" Security (HTTPS) enforcement for this URL.
Possible values are: `SECURE_DEFAULT`, `SECURE_NEVER`, `SECURE_OPTIONAL`, `SECURE_ALWAYS`.
+
urlB" URL to serve the endpoint at.
:ò

	appengine"FlexibleAppVersionAutomaticScalingSgcp:appengine/FlexibleAppVersionAutomaticScaling:FlexibleAppVersionAutomaticScalingè
å¨
coolDownPeriodB" The time period that the Autoscaler should wait before it starts collecting information from a new instance.
This prevents the autoscaler from collecting information when the instance is initializing,
during which the collected usage would not be reliable. Default: 120s

cpuUtilization´:±
®
	appengine0FlexibleAppVersionAutomaticScalingCpuUtilizationogcp:appengine/FlexibleAppVersionAutomaticScalingCpuUtilization:FlexibleAppVersionAutomaticScalingCpuUtilization<Target scaling by CPU usage.
Structure is documented below.

diskUtilizationºB·:´
±
	appengine1FlexibleAppVersionAutomaticScalingDiskUtilizationqgcp:appengine/FlexibleAppVersionAutomaticScalingDiskUtilization:FlexibleAppVersionAutomaticScalingDiskUtilization=Target scaling by disk usage.
Structure is documented below.
¹
maxConcurrentRequestsB Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
Defaults to a runtime-specific value.
g
maxIdleInstancesB MMaximum number of idle instances that should be maintained for this version.

maxPendingLatencyB" tMaximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.

maxTotalInstancesB dMaximum number of instances that should be started to handle requests for this version. Default: 20

minIdleInstancesB Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.

minPendingLatencyB" oMinimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
v
minTotalInstancesB [Minimum number of running instances that should be maintained for this version. Default: 2

networkUtilizationÃBÀ:½
º
	appengine4FlexibleAppVersionAutomaticScalingNetworkUtilizationwgcp:appengine/FlexibleAppVersionAutomaticScalingNetworkUtilization:FlexibleAppVersionAutomaticScalingNetworkUtilization@Target scaling by network usage.
Structure is documented below.
¢
requestUtilizationÃBÀ:½
º
	appengine4FlexibleAppVersionAutomaticScalingRequestUtilizationwgcp:appengine/FlexibleAppVersionAutomaticScalingRequestUtilization:FlexibleAppVersionAutomaticScalingRequestUtilizationFTarget scaling by request utilization.
Structure is documented below.
:þ
®
	appengine0FlexibleAppVersionAutomaticScalingCpuUtilizationogcp:appengine/FlexibleAppVersionAutomaticScalingCpuUtilization:FlexibleAppVersionAutomaticScalingCpuUtilizationÊ
ÇZ
aggregationWindowLengthB" 9Period of time over which CPU utilization is calculated.
i
targetUtilization PTarget CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
:Ã
±
	appengine1FlexibleAppVersionAutomaticScalingDiskUtilizationqgcp:appengine/FlexibleAppVersionAutomaticScalingDiskUtilization:FlexibleAppVersionAutomaticScalingDiskUtilization
@
targetReadBytesPerSecondB Target bytes read per second.
=
targetReadOpsPerSecondB Target ops read per seconds.
D
targetWriteBytesPerSecondB !Target bytes written per second.
@
targetWriteOpsPerSecondB Target ops written per second.
:ã
º
	appengine4FlexibleAppVersionAutomaticScalingNetworkUtilizationwgcp:appengine/FlexibleAppVersionAutomaticScalingNetworkUtilization:FlexibleAppVersionAutomaticScalingNetworkUtilization£
 H
targetReceivedBytesPerSecondB "Target bytes received per second.
L
targetReceivedPacketsPerSecondB $Target packets received per second.
@
targetSentBytesPerSecondB Target bytes sent per second.
D
targetSentPacketsPerSecondB  Target packets sent per second.
:Ð
º
	appengine4FlexibleAppVersionAutomaticScalingRequestUtilizationwgcp:appengine/FlexibleAppVersionAutomaticScalingRequestUtilization:FlexibleAppVersionAutomaticScalingRequestUtilization
H
targetConcurrentRequestsB &Target number of concurrent requests.
A
targetRequestCountPerSecondB" Target requests per second.
:

r
	appengineFlexibleAppVersionDeploymentGgcp:appengine/FlexibleAppVersionDeployment:FlexibleAppVersionDeployment	
	ú
cloudBuildOptions®B«:¨
¥
	appengine-FlexibleAppVersionDeploymentCloudBuildOptionsigcp:appengine/FlexibleAppVersionDeploymentCloudBuildOptions:FlexibleAppVersionDeploymentCloudBuildOptions³Options for the build operations performed as a part of the version deployment. Only applicable when creating a version using source code directly.
Structure is documented below.
ÿ
	containerB:

	appengine%FlexibleAppVersionDeploymentContainerYgcp:appengine/FlexibleAppVersionDeploymentContainer:FlexibleAppVersionDeploymentContainerYThe Docker image for the container that runs the version.
Structure is documented below.
ß
filesB*:
~
	appengine FlexibleAppVersionDeploymentFileOgcp:appengine/FlexibleAppVersionDeploymentFile:FlexibleAppVersionDeploymentFileÉManifest of the files stored in Google Cloud Storage that are included as part of this version.
All files must be readable using the credentials supplied with this call.
Structure is documented below.
³
zipB:}
{
	appengineFlexibleAppVersionDeploymentZipMgcp:appengine/FlexibleAppVersionDeploymentZip:FlexibleAppVersionDeploymentZip(Zip File
Structure is documented below.
:
¥
	appengine-FlexibleAppVersionDeploymentCloudBuildOptionsigcp:appengine/FlexibleAppVersionDeploymentCloudBuildOptions:FlexibleAppVersionDeploymentCloudBuildOptionsã
àn
appYamlPath" [Path to the yaml file used in deployment, used to determine runtime configuration details.
í
cloudBuildTimeoutB" ÑThe Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
:ð

	appengine%FlexibleAppVersionDeploymentContainerYgcp:appengine/FlexibleAppVersionDeploymentContainer:FlexibleAppVersionDeploymentContainerÝ
Ú×
image" ÉURI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest.
Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
:
~
	appengine FlexibleAppVersionDeploymentFileOgcp:appengine/FlexibleAppVersionDeploymentFile:FlexibleAppVersionDeploymentFile
D
name" 8The identifier for this object. Format specified above.
+
sha1SumB" SHA1 checksum of the file

	sourceUrl" Source URL
:Á
{
	appengineFlexibleAppVersionDeploymentZipMgcp:appengine/FlexibleAppVersionDeploymentZip:FlexibleAppVersionDeploymentZipB
@ 

filesCountB files count

	sourceUrl" Source URL
:ë	

	appengine%FlexibleAppVersionEndpointsApiServiceYgcp:appengine/FlexibleAppVersionEndpointsApiService:FlexibleAppVersionEndpointsApiServiceØ
Õõ
configIdB" âEndpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".
By default, the rollout strategy for Endpoints is "FIXED". This means that Endpoints starts up with a particular configuration ID.
When a new configuration is rolled out, Endpoints must be given the new configuration ID. The configId field is used to give the configuration ID
and is required in this case.
Endpoints also has a rollout strategy called "MANAGED". When using this, Endpoints fetches the latest configuration and does not need
the configuration ID. In this case, configId must be omitted.
n
disableTraceSamplingB
 PEnable or disable trace sampling. By default, this is set to false for enabled.
¢
name" Endpoints service name which is the name of the "service" resource in the Service Management API.
For example "myapi.endpoints.myproject.cloud.goog"
Å
rolloutStrategyB" «Endpoints rollout strategy. If FIXED, configId must be specified. If MANAGED, configId must be omitted.
Default value is `FIXED`.
Possible values are: `FIXED`, `MANAGED`.
:È
r
	appengineFlexibleAppVersionEntrypointGgcp:appengine/FlexibleAppVersionEntrypoint:FlexibleAppVersionEntrypointR
PN
shell" AThe format should be a shell command that can be fed to bash -c.
:¿

	appengine)FlexibleAppVersionFlexibleRuntimeSettingsagcp:appengine/FlexibleAppVersionFlexibleRuntimeSettings:FlexibleAppVersionFlexibleRuntimeSettings 
F
operatingSystemB" -Operating System of the application runtime.
S
runtimeVersionB" ;The runtime version of an App Engine flexible application.
:
i
	appengineFlexibleAppVersionHandlerAgcp:appengine/FlexibleAppVersionHandler:FlexibleAppVersionHandler

authFailActionB" Actions to take when the user is not logged in.
Possible values are: `AUTH_FAIL_ACTION_REDIRECT`, `AUTH_FAIL_ACTION_UNAUTHORIZED`.

loginB" Methods to restrict access to a URL based on login status.
Possible values are: `LOGIN_OPTIONAL`, `LOGIN_ADMIN`, `LOGIN_REQUIRED`.

redirectHttpResponseCodeB" á30x code to use when performing redirects for the secure field.
Possible values are: `REDIRECT_HTTP_RESPONSE_CODE_301`, `REDIRECT_HTTP_RESPONSE_CODE_302`, `REDIRECT_HTTP_RESPONSE_CODE_303`, `REDIRECT_HTTP_RESPONSE_CODE_307`.
ç
scriptB:}
{
	appengineFlexibleAppVersionHandlerScriptMgcp:appengine/FlexibleAppVersionHandlerScript:FlexibleAppVersionHandlerScriptØExecutes a script to handle the requests that match this URL pattern.
Only the auto value is supported for Node.js in the App Engine standard environment, for example "script:" "auto".
Structure is documented below.

securityLevelB" Security (HTTPS) enforcement for this URL.
Possible values are: `SECURE_DEFAULT`, `SECURE_NEVER`, `SECURE_OPTIONAL`, `SECURE_ALWAYS`.
©
staticFilesB:

	appengine$FlexibleAppVersionHandlerStaticFilesWgcp:appengine/FlexibleAppVersionHandlerStaticFiles:FlexibleAppVersionHandlerStaticFilesFiles served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files.
Static file handlers describe which files in the application directory are static files, and which URLs serve them.
Structure is documented below.
¢
urlRegexB" URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.
All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
:Í
{
	appengineFlexibleAppVersionHandlerScriptMgcp:appengine/FlexibleAppVersionHandlerScript:FlexibleAppVersionHandlerScriptN
LJ

scriptPath" 8Path to the script from the application root directory.
:­

	appengine$FlexibleAppVersionHandlerStaticFilesWgcp:appengine/FlexibleAppVersionHandlerStaticFiles:FlexibleAppVersionHandlerStaticFiles


Ë
applicationReadableB
 ­Whether files should also be uploaded as code data. By default, files declared in static file handlers are
uploaded as static data and are only served to end users; they cannot be read by the application. If enabled,
uploads are charged against both your code and static data storage resource quotas.
Ù

expirationB" ÄTime a static file served by this handler should be cached by web proxies and browsers.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example "3.5s".
Default is '0s'

httpHeadersB2" qHTTP headers to use for all responses from these URLs.
An object containing a list of "key:value" value pairs.".
ª
mimeTypeB" MIME type used to serve all files served by this handler.
Defaults to file-specific MIME types, which are derived from each file's filename extension.
­
pathB" Path to the static files matched by the URL pattern, from the application root directory.
The path can refer to text matched in groupings in the URL pattern.

requireMatchingFileB
 dWhether this handler should match the request if the file referenced by the handler does not exist.

uploadPathRegexB" hRegular expression that matches the file paths for all files that should be referenced by this handler.
:ð
{
	appengineFlexibleAppVersionLivenessCheckMgcp:appengine/FlexibleAppVersionLivenessCheck:FlexibleAppVersionLivenessCheckð
í7
checkIntervalB"  Interval between health checks.
x
failureThresholdB ^Number of consecutive failed checks required before considering the VM unhealthy. Default: 4.
g
hostB" YHost header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
f
initialDelayB" PThe initial delay before starting to execute the checks. Default: "300s"

- - -

path" The request path.
z
successThresholdB `Number of consecutive successful checks required before considering the VM healthy. Default: 2.
K
timeoutB" :Time before the check is considered failed. Default: "4s"
:Ö
{
	appengineFlexibleAppVersionManualScalingMgcp:appengine/FlexibleAppVersionManualScaling:FlexibleAppVersionManualScalingÖ
ÓÐ
	instances ¾Number of instances to assign to the service at the start.
**Note:** When managing the number of instances at runtime through the App Engine Admin API or the (now deprecated) Python 2
Modules API set_num_instances() you must use `lifecycle.ignore_changes = ["manual_scaling"[0].instances]` to prevent drift detection.
:Ã
i
	appengineFlexibleAppVersionNetworkAgcp:appengine/FlexibleAppVersionNetwork:FlexibleAppVersionNetworkÕ

Ò
z
forwardedPortsB*" `List of ports, or port pairs, to forward from the virtual machine to the application container.

instanceIpModeB" pPrevent instances from receiving an ephemeral external IP address.
Possible values are: `EXTERNAL`, `INTERNAL`.
C
instanceTagB" .Tag to apply to the instance during creation.

name" uGoogle Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.
2
sessionAffinityB
 Enable session affinity.
Ë

subnetworkB" ¶Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.
If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range.
If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetworkName) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network.
If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetworkName must be specified and the IP address is created from the IPCidrRange of the subnetwork.
If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
:Ö
~
	appengine FlexibleAppVersionReadinessCheckOgcp:appengine/FlexibleAppVersionReadinessCheck:FlexibleAppVersionReadinessCheckÓ
ÐÍ
appStartTimeoutB" ³A maximum time limit on application initialization, measured from moment the application successfully
replies to a healthcheck until it is ready to serve traffic. Default: "300s"
G
checkIntervalB" 0Interval between health checks.  Default: "5s".
l
failureThresholdB RNumber of consecutive failed checks required before removing traffic. Default: 2.
g
hostB" YHost header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"

path" The request path.
q
successThresholdB WNumber of consecutive successful checks required before receiving traffic. Default: 2.
K
timeoutB" :Time before the check is considered failed. Default: "4s"
:
o
	appengineFlexibleAppVersionResourcesEgcp:appengine/FlexibleAppVersionResources:FlexibleAppVersionResources
)
cpuB Number of CPU cores needed.
'
diskGbB Disk size (GB) needed.
&
memoryGbB Memory (GB) needed.

volumesB*:

	appengine!FlexibleAppVersionResourcesVolumeQgcp:appengine/FlexibleAppVersionResourcesVolume:FlexibleAppVersionResourcesVolumeList of ports, or port pairs, to forward from the virtual machine to the application container.
Structure is documented below.
:

	appengine!FlexibleAppVersionResourcesVolumeQgcp:appengine/FlexibleAppVersionResourcesVolume:FlexibleAppVersionResourcesVolume
(
name" Unique name for the volume.
(
sizeGb Volume size in gigabytes.
8

volumeType" &Underlying volume type, e.g. 'tmpfs'.
:

	appengine$FlexibleAppVersionVpcAccessConnectorWgcp:appengine/FlexibleAppVersionVpcAccessConnector:FlexibleAppVersionVpcAccessConnectory
wu
name" iFull Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
:Ô

	appengine%ServiceNetworkSettingsNetworkSettingsYgcp:appengine/ServiceNetworkSettingsNetworkSettings:ServiceNetworkSettingsNetworkSettingsÁ
¾»
ingressTrafficAllowedB" The ingress settings for version or service.
Default value is `INGRESS_TRAFFIC_ALLOWED_UNSPECIFIED`.
Possible values are: `INGRESS_TRAFFIC_ALLOWED_UNSPECIFIED`, `INGRESS_TRAFFIC_ALLOWED_ALL`, `INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY`, `INGRESS_TRAFFIC_ALLOWED_INTERNAL_AND_LB`.

- - -
:ö


	appengine"StandardAppVersionAutomaticScalingSgcp:appengine/StandardAppVersionAutomaticScaling:StandardAppVersionAutomaticScalingì	
é	¹
maxConcurrentRequestsB Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.
Defaults to a runtime-specific value.
g
maxIdleInstancesB MMaximum number of idle instances that should be maintained for this version.
í
maxPendingLatencyB" ÑMaximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".

minIdleInstancesB Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
è
minPendingLatencyB" ÌMinimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
Å
standardSchedulerSettingsÙBÖ:Ó
Ð
	appengine;StandardAppVersionAutomaticScalingStandardSchedulerSettingsgcp:appengine/StandardAppVersionAutomaticScalingStandardSchedulerSettings:StandardAppVersionAutomaticScalingStandardSchedulerSettingsLScheduler settings for standard environment.
Structure is documented below.
:¨
Ð
	appengine;StandardAppVersionAutomaticScalingStandardSchedulerSettingsgcp:appengine/StandardAppVersionAutomaticScalingStandardSchedulerSettings:StandardAppVersionAutomaticScalingStandardSchedulerSettingsÒ
Ï~
maxInstancesB hMaximum number of instances to run for this version. Set to zero to disable maxInstances configuration.
~
minInstancesB hMinimum number of instances to run for this version. Set to zero to disable minInstances configuration.

targetCpuUtilizationB Target CPU utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
¬
targetThroughputUtilizationB Target throughput utilization ratio to maintain when scaling. Should be a value in the range [0.50, 0.95], zero, or a negative value.
:Þ
x
	appengineStandardAppVersionBasicScalingKgcp:appengine/StandardAppVersionBasicScaling:StandardAppVersionBasicScalingá
Þê
idleTimeoutB" ÔDuration of time after the last request that an instance must wait before the instance is shut down.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". Defaults to 900s.
o
maxInstances [Maximum number of instances to create for this version. Must be in the range [1.0, 200.0].
:
r
	appengineStandardAppVersionDeploymentGgcp:appengine/StandardAppVersionDeployment:StandardAppVersionDeployment
ß
filesB*:
~
	appengine StandardAppVersionDeploymentFileOgcp:appengine/StandardAppVersionDeploymentFile:StandardAppVersionDeploymentFileÉManifest of the files stored in Google Cloud Storage that are included as part of this version.
All files must be readable using the credentials supplied with this call.
Structure is documented below.
³
zipB:}
{
	appengineStandardAppVersionDeploymentZipMgcp:appengine/StandardAppVersionDeploymentZip:StandardAppVersionDeploymentZip(Zip File
Structure is documented below.
:
~
	appengine StandardAppVersionDeploymentFileOgcp:appengine/StandardAppVersionDeploymentFile:StandardAppVersionDeploymentFile
D
name" 8The identifier for this object. Format specified above.
+
sha1SumB" SHA1 checksum of the file

	sourceUrl" Source URL
:Á
{
	appengineStandardAppVersionDeploymentZipMgcp:appengine/StandardAppVersionDeploymentZip:StandardAppVersionDeploymentZipB
@ 

filesCountB files count

	sourceUrl" Source URL
:Ï
r
	appengineStandardAppVersionEntrypointGgcp:appengine/StandardAppVersionEntrypoint:StandardAppVersionEntrypointY
WU
shell" HThe format should be a shell command that can be fed to bash -c.

- - -
:
i
	appengineStandardAppVersionHandlerAgcp:appengine/StandardAppVersionHandler:StandardAppVersionHandler

authFailActionB" Actions to take when the user is not logged in.
Possible values are: `AUTH_FAIL_ACTION_REDIRECT`, `AUTH_FAIL_ACTION_UNAUTHORIZED`.

loginB" Methods to restrict access to a URL based on login status.
Possible values are: `LOGIN_OPTIONAL`, `LOGIN_ADMIN`, `LOGIN_REQUIRED`.

redirectHttpResponseCodeB" á30x code to use when performing redirects for the secure field.
Possible values are: `REDIRECT_HTTP_RESPONSE_CODE_301`, `REDIRECT_HTTP_RESPONSE_CODE_302`, `REDIRECT_HTTP_RESPONSE_CODE_303`, `REDIRECT_HTTP_RESPONSE_CODE_307`.
ç
scriptB:}
{
	appengineStandardAppVersionHandlerScriptMgcp:appengine/StandardAppVersionHandlerScript:StandardAppVersionHandlerScriptØExecutes a script to handle the requests that match this URL pattern.
Only the auto value is supported for Node.js in the App Engine standard environment, for example "script:" "auto".
Structure is documented below.

securityLevelB" Security (HTTPS) enforcement for this URL.
Possible values are: `SECURE_DEFAULT`, `SECURE_NEVER`, `SECURE_OPTIONAL`, `SECURE_ALWAYS`.
©
staticFilesB:

	appengine$StandardAppVersionHandlerStaticFilesWgcp:appengine/StandardAppVersionHandlerStaticFiles:StandardAppVersionHandlerStaticFilesFiles served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
Structure is documented below.
¢
urlRegexB" URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.
All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
:Í
{
	appengineStandardAppVersionHandlerScriptMgcp:appengine/StandardAppVersionHandlerScript:StandardAppVersionHandlerScriptN
LJ

scriptPath" 8Path to the script from the application root directory.
:

	appengine$StandardAppVersionHandlerStaticFilesWgcp:appengine/StandardAppVersionHandlerStaticFiles:StandardAppVersionHandlerStaticFiles


Ë
applicationReadableB
 ­Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as
static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged
against both your code and static data storage resource quotas.
É

expirationB" ´Time a static file served by this handler should be cached by web proxies and browsers.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example "3.5s".

httpHeadersB2" qHTTP headers to use for all responses from these URLs.
An object containing a list of "key:value" value pairs.".
ª
mimeTypeB" MIME type used to serve all files served by this handler.
Defaults to file-specific MIME types, which are derived from each file's filename extension.
­
pathB" Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.

requireMatchingFileB
 dWhether this handler should match the request if the file referenced by the handler does not exist.

uploadPathRegexB" hRegular expression that matches the file paths for all files that should be referenced by this handler.
:è
i
	appengineStandardAppVersionLibraryAgcp:appengine/StandardAppVersionLibrary:StandardAppVersionLibrary{
y5
nameB" 'Name of the library. Example "django".
@
versionB" /Version of the library to select, or "latest".
:Ö
{
	appengineStandardAppVersionManualScalingMgcp:appengine/StandardAppVersionManualScaling:StandardAppVersionManualScalingÖ
ÓÐ
	instances ¾Number of instances to assign to the service at the start.
**Note:** When managing the number of instances at runtime through the App Engine Admin API or the (now deprecated) Python 2
Modules API set_num_instances() you must use `lifecycle.ignore_changes = ["manual_scaling"[0].instances]` to prevent drift detection.
:ú

	appengine$StandardAppVersionVpcAccessConnectorWgcp:appengine/StandardAppVersionVpcAccessConnector:StandardAppVersionVpcAccessConnectorê
çn
egressSettingB" WThe egress setting for the connector, controlling what traffic is diverted through it.
u
name" iFull Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
:·

W
apphubApplicationAttributes6gcp:apphub/ApplicationAttributes:ApplicationAttributesÛ	
Ø	
businessOwnersB*:
~
apphub"ApplicationAttributesBusinessOwnerPgcp:apphub/ApplicationAttributesBusinessOwner:ApplicationAttributesBusinessOwnernOptional. Business team that ensures user needs are met and value is delivered
Structure is documented below.
ã
criticality~B|:z
x
apphub ApplicationAttributesCriticalityLgcp:apphub/ApplicationAttributesCriticality:ApplicationAttributesCriticalityTCriticality of the Application, Service, or Workload
Structure is documented below.
ý
developerOwnersB*:

apphub#ApplicationAttributesDeveloperOwnerRgcp:apphub/ApplicationAttributesDeveloperOwner:ApplicationAttributesDeveloperOwnerZOptional. Developer team that owns development and coding.
Structure is documented below.
ã
environment~B|:z
x
apphub ApplicationAttributesEnvironmentLgcp:apphub/ApplicationAttributesEnvironment:ApplicationAttributesEnvironmentTEnvironment of the Application, Service, or Workload
Structure is documented below.
ú
operatorOwnersB*:
~
apphub"ApplicationAttributesOperatorOwnerPgcp:apphub/ApplicationAttributesOperatorOwner:ApplicationAttributesOperatorOwner\Optional. Operator team that ensures runtime and operations.
Structure is documented below.
:í
~
apphub"ApplicationAttributesBusinessOwnerPgcp:apphub/ApplicationAttributesBusinessOwner:ApplicationAttributesBusinessOwnerk
i/
displayNameB" Optional. Contact's name.
6
email" )Required. Email address of the contacts.
:à
x
apphub ApplicationAttributesCriticalityLgcp:apphub/ApplicationAttributesCriticality:ApplicationAttributesCriticalityd
b`
type" TCriticality type.
Possible values are: `MISSION_CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
:ñ

apphub#ApplicationAttributesDeveloperOwnerRgcp:apphub/ApplicationAttributesDeveloperOwner:ApplicationAttributesDeveloperOwnerk
i/
displayNameB" Optional. Contact's name.
6
email" )Required. Email address of the contacts.
:ã
x
apphub ApplicationAttributesEnvironmentLgcp:apphub/ApplicationAttributesEnvironment:ApplicationAttributesEnvironmentg
ec
type" WEnvironment type.
Possible values are: `PRODUCTION`, `STAGING`, `TEST`, `DEVELOPMENT`.
:í
~
apphub"ApplicationAttributesOperatorOwnerPgcp:apphub/ApplicationAttributesOperatorOwner:ApplicationAttributesOperatorOwnerk
i/
displayNameB" Optional. Contact's name.
6
email" )Required. Email address of the contacts.
:Å
H
apphubApplicationScope,gcp:apphub/ApplicationScope:ApplicationScopey
wu
type" iRequired. Scope Type.
Possible values:
REGIONAL
GLOBAL
Possible values are: `REGIONAL`, `GLOBAL`.

- - -
:Ä	
K
apphubServiceAttributes.gcp:apphub/ServiceAttributes:ServiceAttributesô
ñò
businessOwnerszBx*v:t
r
apphubServiceAttributesBusinessOwnerHgcp:apphub/ServiceAttributesBusinessOwner:ServiceAttributesBusinessOwnerdBusiness team that ensures user needs are met and value is delivered
Structure is documented below.
×
criticalityrBp:n
l
apphubServiceAttributesCriticalityDgcp:apphub/ServiceAttributesCriticality:ServiceAttributesCriticalityTCriticality of the Application, Service, or Workload
Structure is documented below.
â
developerOwners}B{*y:w
u
apphubServiceAttributesDeveloperOwnerJgcp:apphub/ServiceAttributesDeveloperOwner:ServiceAttributesDeveloperOwnerPDeveloper team that owns development and coding.
Structure is documented below.
×
environmentrBp:n
l
apphubServiceAttributesEnvironmentDgcp:apphub/ServiceAttributesEnvironment:ServiceAttributesEnvironmentTEnvironment of the Application, Service, or Workload
Structure is documented below.
à
operatorOwnerszBx*v:t
r
apphubServiceAttributesOperatorOwnerHgcp:apphub/ServiceAttributesOperatorOwner:ServiceAttributesOperatorOwnerROperator team that ensures runtime and operations.
Structure is documented below.
:×
r
apphubServiceAttributesBusinessOwnerHgcp:apphub/ServiceAttributesBusinessOwner:ServiceAttributesBusinessOwnera
_%
displayNameB" Contact's name.
6
email" )Required. Email address of the contacts.
:Ô
l
apphubServiceAttributesCriticalityDgcp:apphub/ServiceAttributesCriticality:ServiceAttributesCriticalityd
b`
type" TCriticality type.
Possible values are: `MISSION_CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
:Ú
u
apphubServiceAttributesDeveloperOwnerJgcp:apphub/ServiceAttributesDeveloperOwner:ServiceAttributesDeveloperOwnera
_%
displayNameB" Contact's name.
6
email" )Required. Email address of the contacts.
:×
l
apphubServiceAttributesEnvironmentDgcp:apphub/ServiceAttributesEnvironment:ServiceAttributesEnvironmentg
ec
type" WEnvironment type.
Possible values are: `PRODUCTION`, `STAGING`, `TEST`, `DEVELOPMENT`.
:×
r
apphubServiceAttributesOperatorOwnerHgcp:apphub/ServiceAttributesOperatorOwner:ServiceAttributesOperatorOwnera
_%
displayNameB" Contact's name.
6
email" )Required. Email address of the contacts.
:
Z
apphubServiceServiceProperty8gcp:apphub/ServiceServiceProperty:ServiceServiceProperty¯
¬x

gcpProjectB" d(Output)
Output only. The service project identifier that the underlying cloud resource resides in.
©
locationB" Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}

zoneB" u(Output)
Output only. The location that the underlying resource resides in if it is zonal, for example, us-west1-a).
:ì
]
apphubServiceServiceReference:gcp:apphub/ServiceServiceReference:ServiceServiceReference

uriB" w(Output)
Output only. The underlying resource URI (For example, URI of Forwarding Rule, URL Map,
and Backend Service).
:×	
N
apphubWorkloadAttributes0gcp:apphub/WorkloadAttributes:WorkloadAttributes	
	õ
businessOwners}B{*y:w
u
apphubWorkloadAttributesBusinessOwnerJgcp:apphub/WorkloadAttributesBusinessOwner:WorkloadAttributesBusinessOwnerdBusiness team that ensures user needs are met and value is delivered
Structure is documented below.
Ú
criticalityuBs:q
o
apphubWorkloadAttributesCriticalityFgcp:apphub/WorkloadAttributesCriticality:WorkloadAttributesCriticalityTCriticality of the Application, Service, or Workload
Structure is documented below.
æ
developerOwnersB~*|:z
x
apphub WorkloadAttributesDeveloperOwnerLgcp:apphub/WorkloadAttributesDeveloperOwner:WorkloadAttributesDeveloperOwnerPDeveloper team that owns development and coding.
Structure is documented below.
Ú
environmentuBs:q
o
apphubWorkloadAttributesEnvironmentFgcp:apphub/WorkloadAttributesEnvironment:WorkloadAttributesEnvironmentTEnvironment of the Application, Service, or Workload
Structure is documented below.
ã
operatorOwners}B{*y:w
u
apphubWorkloadAttributesOperatorOwnerJgcp:apphub/WorkloadAttributesOperatorOwner:WorkloadAttributesOperatorOwnerROperator team that ensures runtime and operations.
Structure is documented below.
:Ð
u
apphubWorkloadAttributesBusinessOwnerJgcp:apphub/WorkloadAttributesBusinessOwner:WorkloadAttributesBusinessOwnerW
U%
displayNameB" Contact's name.
,
email" Email address of the contacts.
:×
o
apphubWorkloadAttributesCriticalityFgcp:apphub/WorkloadAttributesCriticality:WorkloadAttributesCriticalityd
b`
type" TCriticality type.
Possible values are: `MISSION_CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
:Ó
x
apphub WorkloadAttributesDeveloperOwnerLgcp:apphub/WorkloadAttributesDeveloperOwner:WorkloadAttributesDeveloperOwnerW
U%
displayNameB" Contact's name.
,
email" Email address of the contacts.
:Ú
o
apphubWorkloadAttributesEnvironmentFgcp:apphub/WorkloadAttributesEnvironment:WorkloadAttributesEnvironmentg
ec
type" WEnvironment type.
Possible values are: `PRODUCTION`, `STAGING`, `TEST`, `DEVELOPMENT`.
:Ð
u
apphubWorkloadAttributesOperatorOwnerJgcp:apphub/WorkloadAttributesOperatorOwner:WorkloadAttributesOperatorOwnerW
U%
displayNameB" Contact's name.
,
email" Email address of the contacts.
:´
`
apphubWorkloadWorkloadProperty<gcp:apphub/WorkloadWorkloadProperty:WorkloadWorkloadPropertyÏ
Ì

gcpProjectB" (Output)
Output only. The service project identifier that the underlying cloud resource resides in. Empty for non cloud resources.
©
locationB" Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}

zoneB" t(Output)
Output only. The location that the underlying compute resource resides in if it is zonal (e.g us-west1-a).
:³
c
apphubWorkloadWorkloadReference>gcp:apphub/WorkloadWorkloadReference:WorkloadWorkloadReferenceL
JH
uriB" ;(Output)
Output only. The underlying compute resource uri.
:Â	
]
apphubgetApplicationAttribute:gcp:apphub/getApplicationAttribute:getApplicationAttributeà
Ýñ
businessOwners*:

apphub$getApplicationAttributeBusinessOwnerTgcp:apphub/getApplicationAttributeBusinessOwner:getApplicationAttributeBusinessOwnerOOptional. Business team that ensures user needs are met and value is delivered
Ï
criticalities*:
~
apphub"getApplicationAttributeCriticalityPgcp:apphub/getApplicationAttributeCriticality:getApplicationAttributeCriticality5Criticality of the Application, Service, or Workload
á
developerOwners*:

apphub%getApplicationAttributeDeveloperOwnerVgcp:apphub/getApplicationAttributeDeveloperOwner:getApplicationAttributeDeveloperOwner;Optional. Developer team that owns development and coding.
Î
environments*:
~
apphub"getApplicationAttributeEnvironmentPgcp:apphub/getApplicationAttributeEnvironment:getApplicationAttributeEnvironment5Environment of the Application, Service, or Workload
ß
operatorOwners*:

apphub$getApplicationAttributeOperatorOwnerTgcp:apphub/getApplicationAttributeOperatorOwner:getApplicationAttributeOperatorOwner=Optional. Operator team that ensures runtime and operations.
:ò

apphub$getApplicationAttributeBusinessOwnerTgcp:apphub/getApplicationAttributeBusinessOwner:getApplicationAttributeBusinessOwneri
g-
displayName" Optional. Contact's name.
6
email" )Required. Email address of the contacts.
:ã
~
apphub"getApplicationAttributeCriticalityPgcp:apphub/getApplicationAttributeCriticality:getApplicationAttributeCriticalitya
_]
type" QCriticality type. Possible values: ["MISSION_CRITICAL", "HIGH", "MEDIUM", "LOW"]
:õ

apphub%getApplicationAttributeDeveloperOwnerVgcp:apphub/getApplicationAttributeDeveloperOwner:getApplicationAttributeDeveloperOwneri
g-
displayName" Optional. Contact's name.
6
email" )Required. Email address of the contacts.
:æ
~
apphub"getApplicationAttributeEnvironmentPgcp:apphub/getApplicationAttributeEnvironment:getApplicationAttributeEnvironmentd
b`
type" TEnvironment type. Possible values: ["PRODUCTION", "STAGING", "TEST", "DEVELOPMENT"]
:ò

apphub$getApplicationAttributeOperatorOwnerTgcp:apphub/getApplicationAttributeOperatorOwner:getApplicationAttributeOperatorOwneri
g-
displayName" Optional. Contact's name.
6
email" )Required. Email address of the contacts.
:Æ
Q
apphubgetApplicationScope2gcp:apphub/getApplicationScope:getApplicationScopeq
om
type" aRequired. Scope Type. 
 Possible values:
REGIONAL
GLOBAL Possible values: ["REGIONAL", "GLOBAL"]
:ù

apphub#getDiscoveredServiceServicePropertyRgcp:apphub/getDiscoveredServiceServiceProperty:getDiscoveredServiceServicePropertyò
ï`

gcpProject" NThe service project identifier that the underlying cloud resource resides in.
8
location" (The location of the discovered service.
Q
zone" EThe location that the underlying resource resides in if it is zonal.
:ë

apphub$getDiscoveredServiceServiceReferenceTgcp:apphub/getDiscoveredServiceServiceReference:getDiscoveredServiceServiceReferenceb
`4
path" (Additional path under the resource URI.
(
uri" The underlying resource URI.
:

apphub%getDiscoveredWorkloadWorkloadPropertyVgcp:apphub/getDiscoveredWorkloadWorkloadProperty:getDiscoveredWorkloadWorkloadPropertyó
ð`

gcpProject" NThe service project identifier that the underlying cloud resource resides in.
9
location" )The location of the discovered workload.
Q
zone" EThe location that the underlying resource resides in if it is zonal.
:»

apphub&getDiscoveredWorkloadWorkloadReferenceXgcp:apphub/getDiscoveredWorkloadWorkloadReference:getDiscoveredWorkloadWorkloadReference,
*(
uri" The underlying resource URI.
:î

applicationintegrationAuthConfigClientCertificateRgcp:applicationintegration/AuthConfigClientCertificate:AuthConfigClientCertificateß
Ü
encryptedPrivateKey" kThe ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
Ì

passphraseB" ·'passphrase' should be left unset if private key is not encrypted.
Note that 'passphrase' is not the password for web server, but an extra layer of security to protected private key.

sslCertificate" kThe ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
: 

applicationintegrationAuthConfigDecryptedCredentialVgcp:applicationintegration/AuthConfigDecryptedCredential:AuthConfigDecryptedCredential
ù
	authToken³B°:­
ª
applicationintegration&AuthConfigDecryptedCredentialAuthTokenhgcp:applicationintegration/AuthConfigDecryptedCredentialAuthToken:AuthConfigDecryptedCredentialAuthToken6Auth token credential.
Structure is documented below.
D
credentialType" .Credential type associated with auth configs.
Ú
jwt¡B:

applicationintegration AuthConfigDecryptedCredentialJwt\gcp:applicationintegration/AuthConfigDecryptedCredentialJwt:AuthConfigDecryptedCredentialJwt/JWT credential.
Structure is documented below.
Á
oauth2AuthorizationCodeÞBÛ:Ø
Õ
applicationintegration4AuthConfigDecryptedCredentialOauth2AuthorizationCodegcp:applicationintegration/AuthConfigDecryptedCredentialOauth2AuthorizationCode:AuthConfigDecryptedCredentialOauth2AuthorizationCodeEOAuth2 authorization code credential.
Structure is documented below.
¶
oauth2ClientCredentialsÞBÛ:Ø
Õ
applicationintegration4AuthConfigDecryptedCredentialOauth2ClientCredentialsgcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentials:AuthConfigDecryptedCredentialOauth2ClientCredentials:OAuth2 client credentials.
Structure is documented below.
ø
	oidcToken³B°:­
ª
applicationintegration&AuthConfigDecryptedCredentialOidcTokenhgcp:applicationintegration/AuthConfigDecryptedCredentialOidcToken:AuthConfigDecryptedCredentialOidcToken5Google OIDC ID Token.
Structure is documented below.
¿
serviceAccountCredentialsäBá:Þ
Û
applicationintegration6AuthConfigDecryptedCredentialServiceAccountCredentialsgcp:applicationintegration/AuthConfigDecryptedCredentialServiceAccountCredentials:AuthConfigDecryptedCredentialServiceAccountCredentials;Service account credential.
Structure is documented below.
¬
usernameAndPasswordÑBÎ:Ë
È
applicationintegration0AuthConfigDecryptedCredentialUsernameAndPassword|gcp:applicationintegration/AuthConfigDecryptedCredentialUsernameAndPassword:AuthConfigDecryptedCredentialUsernameAndPasswordAUsername and password credential.
Structure is documented below.
:¡
ª
applicationintegration&AuthConfigDecryptedCredentialAuthTokenhgcp:applicationintegration/AuthConfigDecryptedCredentialAuthToken:AuthConfigDecryptedCredentialAuthTokenr
p,
tokenB" The token for the auth type.
@
typeB" 2Authentication type, e.g. "Basic", "Bearer", etc.
:ý

applicationintegration AuthConfigDecryptedCredentialJwt\gcp:applicationintegration/AuthConfigDecryptedCredentialJwt:AuthConfigDecryptedCredentialJwtß
ÜQ
jwtB" D(Output)
The token calculated by the header, payload and signature.
Q
	jwtHeaderB" >Identifies which algorithm is used to generate the signature.
õ

jwtPayloadB" àContains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.
<
secretB" ,User's pre-shared secret to sign the token.
:
Õ
applicationintegration4AuthConfigDecryptedCredentialOauth2AuthorizationCodegcp:applicationintegration/AuthConfigDecryptedCredentialOauth2AuthorizationCode:AuthConfigDecryptedCredentialOauth2AuthorizationCode»
¸N
authEndpointB" 8The auth url endpoint to send the auth code request to.
#
clientIdB" The client's id.
+
clientSecretB" The client's secret.
F
scopeB" 7A space-delimited list of requested scope permissions.
L
tokenEndpointB" 5The token url endpoint to send the token request to.
:ü
Õ
applicationintegration4AuthConfigDecryptedCredentialOauth2ClientCredentialsgcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentials:AuthConfigDecryptedCredentialOauth2ClientCredentials¡
#
clientIdB" The client's ID.
+
clientSecretB" The client's secret.
±
requestTypeB" Represent how to pass parameters to fetch access token Possible values: ["REQUEST_TYPE_UNSPECIFIED", "REQUEST_BODY", "QUERY_PARAMETERS", "ENCODED_HEADER"]
F
scopeB" 7A space-delimited list of requested scope permissions.

tokenEndpointB" {The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.
¸
tokenParamsÿBü:ù
ö
applicationintegration?AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsgcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParams:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParams'Token parameters for the auth request.
:á
ö
applicationintegration?AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsgcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParams:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamså
âß
entriesB*:

applicationintegrationDAuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntry¤gcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntry:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntry@A list of parameter map entries.
Structure is documented below.
:Ê

applicationintegrationDAuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntry¤gcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntry:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntry¿
¼Ö
keyB:

applicationintegrationGAuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKeyªgcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKey:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKey5Key of the map entry.
Structure is documented below.
à
valueB:

applicationintegrationIAuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValue®gcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValue:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValue7Value of the map entry.
Structure is documented below.
:

applicationintegrationGAuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKeyªgcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKey:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKey

literalValue»B¸:µ
²
applicationintegrationSAuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKeyLiteralValueÂgcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKeyLiteralValue:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKeyLiteralValue7Passing a literal value
Structure is documented below.
:Ø
²
applicationintegrationSAuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKeyLiteralValueÂgcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKeyLiteralValue:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryKeyLiteralValue!

stringValueB" String.
:«

applicationintegrationIAuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValue®gcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValue:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValue

literalValueÁB¾:»
¸
applicationintegrationUAuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValueLiteralValueÆgcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValueLiteralValue:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValueLiteralValue7Passing a literal value
Structure is documented below.
:Þ
¸
applicationintegrationUAuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValueLiteralValueÆgcp:applicationintegration/AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValueLiteralValue:AuthConfigDecryptedCredentialOauth2ClientCredentialsTokenParamsEntryValueLiteralValue!

stringValueB" String.
:ø
ª
applicationintegration&AuthConfigDecryptedCredentialOidcTokenhgcp:applicationintegration/AuthConfigDecryptedCredentialOidcToken:AuthConfigDecryptedCredentialOidcTokenÈ
Å
audienceB" {Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for.
a
serviceAccountEmailB" DThe service account email to be used as the identity for the token.
C
tokenB" 4(Output)
ID token obtained for the service account.

tokenExpireTimeB" ð(Output)
The approximate time until the token retrieved is valid.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
:
Û
applicationintegration6AuthConfigDecryptedCredentialServiceAccountCredentialsgcp:applicationintegration/AuthConfigDecryptedCredentialServiceAccountCredentials:AuthConfigDecryptedCredentialServiceAccountCredentials®
«F
scopeB" 7A space-delimited list of requested scope permissions.
a
serviceAccountB" IName of the service account that has the permission to make the request.
:
È
applicationintegration0AuthConfigDecryptedCredentialUsernameAndPassword|gcp:applicationintegration/AuthConfigDecryptedCredentialUsernameAndPassword:AuthConfigDecryptedCredentialUsernameAndPassword¶
³
passwordB" uPassword to be used.

<a name="nested_oauth2_authorization_code"></a>The `oauth2_authorization_code` block supports:
'
usernameB" Username to be used.
:¤	
t
applicationintegrationClientCloudKmsConfigDgcp:applicationintegration/ClientCloudKmsConfig:ClientCloudKmsConfig«
¨¶
key" ªA Cloud KMS key is a named object containing one or more key versions, along
with metadata for the key. A key exists on exactly one key ring tied to a
specific location.


keyVersionB" ýEach version of a key contains key material used for encryption or signing.
A key's version is represented by an integer, starting at 1. To decrypt data
or verify a signature, you must use the same key version that was used to
encrypt or sign the data.
C
kmsLocation" 0Location name of the key ring, e.g. "us-west1".

kmsProjectIdB" ÷The Google Cloud project id of the project where the kms key stored. If empty,
the kms key is stored at the same project as customer's project and ecrypted
with CMEK, otherwise, the kms key is stored in the tenant project and
encrypted with GMEK.

kmsRing" ñA key ring organizes keys in a specific Google Cloud location and allows you to
manage access control on groups of keys. A key ring's name does not need to be
unique across a Google Cloud project, but must be unique within a given location.
:Ç
q
artifactregistryRepositoryCleanupPolicyDgcp:artifactregistry/RepositoryCleanupPolicy:RepositoryCleanupPolicyÑ
ÎF
actionB" 6Policy action.
Possible values are: `DELETE`, `KEEP`.
ì
	conditionB:

artifactregistry RepositoryCleanupPolicyConditionVgcp:artifactregistry/RepositoryCleanupPolicyCondition:RepositoryCleanupPolicyConditionGPolicy condition for matching versions.
Structure is documented below.
B
id" 8The identifier for this object. Format specified above.
Ð
mostRecentVersions°B­:ª
§
artifactregistry)RepositoryCleanupPolicyMostRecentVersionshgcp:artifactregistry/RepositoryCleanupPolicyMostRecentVersions:RepositoryCleanupPolicyMostRecentVersionsPolicy condition for retaining a minimum number of versions. May only be
specified with a Keep action.
Structure is documented below.
: 

artifactregistry RepositoryCleanupPolicyConditionVgcp:artifactregistry/RepositoryCleanupPolicyCondition:RepositoryCleanupPolicyCondition
9
	newerThanB" &Match versions newer than a duration.
9
	olderThanB" &Match versions older than a duration.
^
packageNamePrefixesB*" ?Match versions by package prefix. Applied on any prefix match.
R
tagPrefixesB*" ;Match versions by tag prefix. Applied on any prefix match.
z
tagStateB" hMatch versions by tag status.
Default value is `ANY`.
Possible values are: `TAGGED`, `UNTAGGED`, `ANY`.
c
versionNamePrefixesB*" DMatch versions by version name prefix. Applied on any prefix match.
:É
§
artifactregistry)RepositoryCleanupPolicyMostRecentVersionshgcp:artifactregistry/RepositoryCleanupPolicyMostRecentVersions:RepositoryCleanupPolicyMostRecentVersions
7
	keepCountB $Minimum number of versions to keep.
^
packageNamePrefixesB*" ?Match versions by package prefix. Applied on any prefix match.
: 
n
artifactregistryRepositoryDockerConfigBgcp:artifactregistry/RepositoryDockerConfig:RepositoryDockerConfig­
ª§
immutableTagsB
 The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
:¾

artifactregistryRepositoryIamBindingConditionPgcp:artifactregistry/RepositoryIamBindingCondition:RepositoryIamBindingCondition6
4
descriptionB" 

expression" 
title" :»

artifactregistryRepositoryIamMemberConditionNgcp:artifactregistry/RepositoryIamMemberCondition:RepositoryIamMemberCondition6
4
descriptionB" 

expression" 
title" :½
k
artifactregistryRepositoryMavenConfig@gcp:artifactregistry/RepositoryMavenConfig:RepositoryMavenConfigÍ
Êq
allowSnapshotOverwritesB
 PThe repository with this flag will allow publishing the same
snapshot versions.
Ô
versionPolicyB" ¼Version policy defines the versions that the registry will accept.
Default value is `VERSION_POLICY_UNSPECIFIED`.
Possible values are: `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, `SNAPSHOT`.
:½

artifactregistry RepositoryRemoteRepositoryConfigVgcp:artifactregistry/RepositoryRemoteRepositoryConfig:RepositoryRemoteRepositoryConfig«
¨
aptRepository¼B¹:¶
³
artifactregistry-RepositoryRemoteRepositoryConfigAptRepositorypgcp:artifactregistry/RepositoryRemoteRepositoryConfigAptRepository:RepositoryRemoteRepositoryConfigAptRepositoryOSpecific settings for an Apt remote repository.
Structure is documented below.
º
commonRepositoryÅBÂ:¿
¼
artifactregistry0RepositoryRemoteRepositoryConfigCommonRepositoryvgcp:artifactregistry/RepositoryRemoteRepositoryConfigCommonRepository:RepositoryRemoteRepositoryConfigCommonRepository^Specific settings for an Artifact Registory remote repository.
Structure is documented below.
;
descriptionB" &The description of the remote source.
{
disableUpstreamValidationB
 XIf true, the remote repository upstream and upstream credentials will
not be validated.
­
dockerRepositoryÅBÂ:¿
¼
artifactregistry0RepositoryRemoteRepositoryConfigDockerRepositoryvgcp:artifactregistry/RepositoryRemoteRepositoryConfigDockerRepository:RepositoryRemoteRepositoryConfigDockerRepositoryQSpecific settings for a Docker remote repository.
Structure is documented below.
¨
mavenRepositoryÂB¿:¼
¹
artifactregistry/RepositoryRemoteRepositoryConfigMavenRepositorytgcp:artifactregistry/RepositoryRemoteRepositoryConfigMavenRepository:RepositoryRemoteRepositoryConfigMavenRepositoryPSpecific settings for a Maven remote repository.
Structure is documented below.

npmRepository¼B¹:¶
³
artifactregistry-RepositoryRemoteRepositoryConfigNpmRepositorypgcp:artifactregistry/RepositoryRemoteRepositoryConfigNpmRepository:RepositoryRemoteRepositoryConfigNpmRepositoryOSpecific settings for an Npm remote repository.
Structure is documented below.
­
pythonRepositoryÅBÂ:¿
¼
artifactregistry0RepositoryRemoteRepositoryConfigPythonRepositoryvgcp:artifactregistry/RepositoryRemoteRepositoryConfigPythonRepository:RepositoryRemoteRepositoryConfigPythonRepositoryQSpecific settings for a Python remote repository.
Structure is documented below.
½
upstreamCredentialsÎBË:È
Å
artifactregistry3RepositoryRemoteRepositoryConfigUpstreamCredentials|gcp:artifactregistry/RepositoryRemoteRepositoryConfigUpstreamCredentials:RepositoryRemoteRepositoryConfigUpstreamCredentialsUThe credentials used to access the remote repository.
Structure is documented below.

yumRepository¼B¹:¶
³
artifactregistry-RepositoryRemoteRepositoryConfigYumRepositorypgcp:artifactregistry/RepositoryRemoteRepositoryConfigYumRepository:RepositoryRemoteRepositoryConfigYumRepositoryOSpecific settings for an Yum remote repository.
Structure is documented below.
:±
³
artifactregistry-RepositoryRemoteRepositoryConfigAptRepositorypgcp:artifactregistry/RepositoryRemoteRepositoryConfigAptRepository:RepositoryRemoteRepositoryConfigAptRepositoryø
õò
publicRepositoryíBê:ç
ä
artifactregistry=RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository:RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositorynOne of the publicly available Apt repositories supported by Artifact Registry.
Structure is documented below.
:ò
ä
artifactregistry=RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository:RepositoryRemoteRepositoryConfigAptRepositoryPublicRepository
¡
repositoryBase" A common public repository base for Yum.
Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
_
repositoryPath" ISpecific repository from the base, e.g. `"pub/rocky/9/BaseOS/x86_64/os"`
:
¼
artifactregistry0RepositoryRemoteRepositoryConfigCommonRepositoryvgcp:artifactregistry/RepositoryRemoteRepositoryConfigCommonRepository:RepositoryRemoteRepositoryConfigCommonRepositoryÏ
ÌÉ
uri" ½One of:
a. Artifact Registry Repository resource, e.g. `projects/UPSTREAM_PROJECT_ID/locations/REGION/repositories/UPSTREAM_REPOSITORY`
b. URI to the registry, e.g. `"https://registry-1.docker.io"`
c. URI to Artifact Registry Repository, e.g. `"https://REGION-docker.pkg.dev/UPSTREAM_PROJECT_ID/UPSTREAM_REPOSITORY"`
:Û
¼
artifactregistry0RepositoryRemoteRepositoryConfigDockerRepositoryvgcp:artifactregistry/RepositoryRemoteRepositoryConfigDockerRepository:RepositoryRemoteRepositoryConfigDockerRepository

customRepositoryöBó:ð
í
artifactregistry@RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository:RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository[Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
Structure is documented below.
~
publicRepositoryB" dAddress of the remote repository.
Default value is `DOCKER_HUB`.
Possible values are: `DOCKER_HUB`.
:º
í
artifactregistry@RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository:RepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryH
FD
uriB" 7Specific uri to the registry, e.g. `"https://pypi.io"`
:Ü
¹
artifactregistry/RepositoryRemoteRepositoryConfigMavenRepositorytgcp:artifactregistry/RepositoryRemoteRepositoryConfigMavenRepository:RepositoryRemoteRepositoryConfigMavenRepository

customRepositoryóBð:í
ê
artifactregistry?RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository:RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository[Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
Structure is documented below.

publicRepositoryB" jAddress of the remote repository.
Default value is `MAVEN_CENTRAL`.
Possible values are: `MAVEN_CENTRAL`.
:·
ê
artifactregistry?RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository:RepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryH
FD
uriB" 7Specific uri to the registry, e.g. `"https://pypi.io"`
:¿
³
artifactregistry-RepositoryRemoteRepositoryConfigNpmRepositorypgcp:artifactregistry/RepositoryRemoteRepositoryConfigNpmRepository:RepositoryRemoteRepositoryConfigNpmRepository

customRepositoryíBê:ç
ä
artifactregistry=RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository:RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository[Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
Structure is documented below.
t
publicRepositoryB" ZAddress of the remote repository.
Default value is `NPMJS`.
Possible values are: `NPMJS`.
:±
ä
artifactregistry=RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository:RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryH
FD
uriB" 7Specific uri to the registry, e.g. `"https://pypi.io"`
:Ï
¼
artifactregistry0RepositoryRemoteRepositoryConfigPythonRepositoryvgcp:artifactregistry/RepositoryRemoteRepositoryConfigPythonRepository:RepositoryRemoteRepositoryConfigPythonRepository

customRepositoryöBó:ð
í
artifactregistry@RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository:RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository[Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
Structure is documented below.
r
publicRepositoryB" XAddress of the remote repository.
Default value is `PYPI`.
Possible values are: `PYPI`.
:º
í
artifactregistry@RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository:RepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryH
FD
uriB" 7Specific uri to the registry, e.g. `"https://pypi.io"`
:í
Å
artifactregistry3RepositoryRemoteRepositoryConfigUpstreamCredentials|gcp:artifactregistry/RepositoryRemoteRepositoryConfigUpstreamCredentials:RepositoryRemoteRepositoryConfigUpstreamCredentials¢

usernamePasswordCredentials B:

artifactregistryNRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials²gcp:artifactregistry/RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials:RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentialsZUse username and password to access the remote repository.
Structure is documented below.
:°

artifactregistryNRepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials²gcp:artifactregistry/RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials:RepositoryRemoteRepositoryConfigUpstreamCredentialsUsernamePasswordCredentials
Ë
passwordSecretVersionB" «The Secret Manager key version that holds the password to access the
remote repository. Must be in the format of
`projects/{project}/secrets/{secret}/versions/{version}`.
@
usernameB" .The username to access the remote repository.
:±
³
artifactregistry-RepositoryRemoteRepositoryConfigYumRepositorypgcp:artifactregistry/RepositoryRemoteRepositoryConfigYumRepository:RepositoryRemoteRepositoryConfigYumRepositoryø
õò
publicRepositoryíBê:ç
ä
artifactregistry=RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository:RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositorynOne of the publicly available Yum repositories supported by Artifact Registry.
Structure is documented below.
:ò
ä
artifactregistry=RepositoryRemoteRepositoryConfigYumRepositoryPublicRepositorygcp:artifactregistry/RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository:RepositoryRemoteRepositoryConfigYumRepositoryPublicRepository
¡
repositoryBase" A common public repository base for Yum.
Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
_
repositoryPath" ISpecific repository from the base, e.g. `"pub/rocky/9/BaseOS/x86_64/os"`
:§

artifactregistry!RepositoryVirtualRepositoryConfigXgcp:artifactregistry/RepositoryVirtualRepositoryConfig:RepositoryVirtualRepositoryConfig

upstreamPoliciesÅBÂ*¿:¼
¹
artifactregistry/RepositoryVirtualRepositoryConfigUpstreamPolicytgcp:artifactregistry/RepositoryVirtualRepositoryConfigUpstreamPolicy:RepositoryVirtualRepositoryConfigUpstreamPolicy¯Policies that configure the upstream artifacts distributed by the Virtual
Repository. Upstream policies cannot be set on a standard repository.
Structure is documented below.
:Û
¹
artifactregistry/RepositoryVirtualRepositoryConfigUpstreamPolicytgcp:artifactregistry/RepositoryVirtualRepositoryConfigUpstreamPolicy:RepositoryVirtualRepositoryConfigUpstreamPolicy
9
idB" -The user-provided ID of the upstream policy.
[
priorityB IEntries with a greater priority value take precedence in the pull order.


repositoryB" kA reference to the repository resource, for example:
"projects/p1/locations/us-central1/repository/repo1".
:â
z
artifactregistrygetRepositoryCleanupPolicyJgcp:artifactregistry/getRepositoryCleanupPolicy:getRepositoryCleanupPolicyã
àA
action" 3Policy action. Possible values: ["DELETE", "KEEP"]
×

conditions*:

artifactregistry#getRepositoryCleanupPolicyCondition\gcp:artifactregistry/getRepositoryCleanupPolicyCondition:getRepositoryCleanupPolicyCondition(Policy condition for matching versions.

id" ¶
mostRecentVersions¶*³:°
­
artifactregistry+getRepositoryCleanupPolicyMostRecentVersionlgcp:artifactregistry/getRepositoryCleanupPolicyMostRecentVersion:getRepositoryCleanupPolicyMostRecentVersiongPolicy condition for retaining a minimum number of versions. May only be
specified with a Keep action.
:

artifactregistry#getRepositoryCleanupPolicyCondition\gcp:artifactregistry/getRepositoryCleanupPolicyCondition:getRepositoryCleanupPolicyConditionü
ù7
	newerThan" &Match versions newer than a duration.
7
	olderThan" &Match versions older than a duration.
\
packageNamePrefixes*" ?Match versions by package prefix. Applied on any prefix match.
P
tagPrefixes*" ;Match versions by tag prefix. Applied on any prefix match.
r
tagState" bMatch versions by tag status. Default value: "ANY" Possible values: ["TAGGED", "UNTAGGED", "ANY"]
a
versionNamePrefixes*" DMatch versions by version name prefix. Applied on any prefix match.
:Ë
­
artifactregistry+getRepositoryCleanupPolicyMostRecentVersionlgcp:artifactregistry/getRepositoryCleanupPolicyMostRecentVersion:getRepositoryCleanupPolicyMostRecentVersion
5
	keepCount $Minimum number of versions to keep.
\
packageNamePrefixes*" ?Match versions by package prefix. Applied on any prefix match.
:§
w
artifactregistrygetRepositoryDockerConfigHgcp:artifactregistry/getRepositoryDockerConfig:getRepositoryDockerConfig«
¨¥
immutableTags
 The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
:¼
t
artifactregistrygetRepositoryMavenConfigFgcp:artifactregistry/getRepositoryMavenConfig:getRepositoryMavenConfigÃ
Ào
allowSnapshotOverwrites
 PThe repository with this flag will allow publishing the same
snapshot versions.
Ì
versionPolicy" ¶Version policy defines the versions that the registry will accept. Default value: "VERSION_POLICY_UNSPECIFIED" Possible values: ["VERSION_POLICY_UNSPECIFIED", "RELEASE", "SNAPSHOT"]
:

artifactregistry#getRepositoryRemoteRepositoryConfig\gcp:artifactregistry/getRepositoryRemoteRepositoryConfig:getRepositoryRemoteRepositoryConfig

aptRepositoriesÅ*Â:¿
¼
artifactregistry0getRepositoryRemoteRepositoryConfigAptRepositoryvgcp:artifactregistry/getRepositoryRemoteRepositoryConfigAptRepository:getRepositoryRemoteRepositoryConfigAptRepository0Specific settings for an Apt remote repository.
¦
commonRepositoriesÎ*Ë:È
Å
artifactregistry3getRepositoryRemoteRepositoryConfigCommonRepository|gcp:artifactregistry/getRepositoryRemoteRepositoryConfigCommonRepository:getRepositoryRemoteRepositoryConfigCommonRepository?Specific settings for an Artifact Registory remote repository.
9
description" &The description of the remote source.
y
disableUpstreamValidation
 XIf true, the remote repository upstream and upstream credentials will
not be validated.

dockerRepositoriesÎ*Ë:È
Å
artifactregistry3getRepositoryRemoteRepositoryConfigDockerRepository|gcp:artifactregistry/getRepositoryRemoteRepositoryConfigDockerRepository:getRepositoryRemoteRepositoryConfigDockerRepository2Specific settings for a Docker remote repository.

mavenRepositoriesË*È:Å
Â
artifactregistry2getRepositoryRemoteRepositoryConfigMavenRepositoryzgcp:artifactregistry/getRepositoryRemoteRepositoryConfigMavenRepository:getRepositoryRemoteRepositoryConfigMavenRepository1Specific settings for a Maven remote repository.

npmRepositoriesÅ*Â:¿
¼
artifactregistry0getRepositoryRemoteRepositoryConfigNpmRepositoryvgcp:artifactregistry/getRepositoryRemoteRepositoryConfigNpmRepository:getRepositoryRemoteRepositoryConfigNpmRepository0Specific settings for an Npm remote repository.

pythonRepositoriesÎ*Ë:È
Å
artifactregistry3getRepositoryRemoteRepositoryConfigPythonRepository|gcp:artifactregistry/getRepositoryRemoteRepositoryConfigPythonRepository:getRepositoryRemoteRepositoryConfigPythonRepository2Specific settings for a Python remote repository.
¥
upstreamCredentialsÕ*Ò:Ï
Ì
artifactregistry5getRepositoryRemoteRepositoryConfigUpstreamCredentialgcp:artifactregistry/getRepositoryRemoteRepositoryConfigUpstreamCredential:getRepositoryRemoteRepositoryConfigUpstreamCredential6The credentials used to access the remote repository.

yumRepositoriesÅ*Â:¿
¼
artifactregistry0getRepositoryRemoteRepositoryConfigYumRepositoryvgcp:artifactregistry/getRepositoryRemoteRepositoryConfigYumRepository:getRepositoryRemoteRepositoryConfigYumRepository0Specific settings for an Yum remote repository.
:¦
¼
artifactregistry0getRepositoryRemoteRepositoryConfigAptRepositoryvgcp:artifactregistry/getRepositoryRemoteRepositoryConfigAptRepository:getRepositoryRemoteRepositoryConfigAptRepositoryä
áÞ
publicRepositoriesö*ó:ð
í
artifactregistry@getRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository:getRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryOOne of the publicly available Apt repositories supported by Artifact Registry.
:¶
í
artifactregistry@getRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigAptRepositoryPublicRepository:getRepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryÃ
À
repositoryBase" lA common public repository base for Apt, e.g. '"debian/dists/buster"' Possible values: ["DEBIAN", "UBUNTU"]
9
repositoryPath" #Specific repository from the base.
:
Å
artifactregistry3getRepositoryRemoteRepositoryConfigCommonRepository|gcp:artifactregistry/getRepositoryRemoteRepositoryConfigCommonRepository:getRepositoryRemoteRepositoryConfigCommonRepositoryÏ
ÌÉ
uri" ½One of:
a. Artifact Registry Repository resource, e.g. 'projects/UPSTREAM_PROJECT_ID/locations/REGION/repositories/UPSTREAM_REPOSITORY'
b. URI to the registry, e.g. '"https://registry-1.docker.io"'
c. URI to Artifact Registry Repository, e.g. '"https://REGION-docker.pkg.dev/UPSTREAM_PROJECT_ID/UPSTREAM_REPOSITORY"'
:Ç
Å
artifactregistry3getRepositoryRemoteRepositoryConfigDockerRepository|gcp:artifactregistry/getRepositoryRemoteRepositoryConfigDockerRepository:getRepositoryRemoteRepositoryConfigDockerRepositoryü
ùþ
customRepositoriesÿ*ü:ù
ö
artifactregistryCgetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository:getRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryf[Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
v
publicRepository" ^Address of the remote repository. Default value: "DOCKER_HUB" Possible values: ["DOCKER_HUB"]
:Î
ö
artifactregistryCgetRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepository:getRepositoryRemoteRepositoryConfigDockerRepositoryCustomRepositoryS
QO
uri" DSpecific uri to the registry, e.g. '"https://registry-1.docker.io"'
:Ç
Â
artifactregistry2getRepositoryRemoteRepositoryConfigMavenRepositoryzgcp:artifactregistry/getRepositoryRemoteRepositoryConfigMavenRepository:getRepositoryRemoteRepositoryConfigMavenRepositoryÿ
üû
customRepositoriesü*ù:ö
ó
artifactregistryBgetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository:getRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositoryf[Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
|
publicRepository" dAddress of the remote repository. Default value: "MAVEN_CENTRAL" Possible values: ["MAVEN_CENTRAL"]
:Ó
ó
artifactregistryBgetRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository:getRepositoryRemoteRepositoryConfigMavenRepositoryCustomRepository[
YW
uri" LSpecific uri to the registry, e.g. '"https://repo.maven.apache.org/maven2"'
:«
¼
artifactregistry0getRepositoryRemoteRepositoryConfigNpmRepositoryvgcp:artifactregistry/getRepositoryRemoteRepositoryConfigNpmRepository:getRepositoryRemoteRepositoryConfigNpmRepositoryé
æõ
customRepositoriesö*ó:ð
í
artifactregistry@getRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository:getRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryf[Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
l
publicRepository" TAddress of the remote repository. Default value: "NPMJS" Possible values: ["NPMJS"]
:Ã
í
artifactregistry@getRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepository:getRepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryQ
OM
uri" BSpecific uri to the registry, e.g. '"https://registry.npmjs.org"'
:»
Å
artifactregistry3getRepositoryRemoteRepositoryConfigPythonRepository|gcp:artifactregistry/getRepositoryRemoteRepositoryConfigPythonRepository:getRepositoryRemoteRepositoryConfigPythonRepositoryð
íþ
customRepositoriesÿ*ü:ù
ö
artifactregistryCgetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository:getRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryf[Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
j
publicRepository" RAddress of the remote repository. Default value: "PYPI" Possible values: ["PYPI"]
:Á
ö
artifactregistryCgetRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepository:getRepositoryRemoteRepositoryConfigPythonRepositoryCustomRepositoryF
DB
uri" 7Specific uri to the registry, e.g. '"https://pypi.io"'
:Ø
Ì
artifactregistry5getRepositoryRemoteRepositoryConfigUpstreamCredentialgcp:artifactregistry/getRepositoryRemoteRepositoryConfigUpstreamCredential:getRepositoryRemoteRepositoryConfigUpstreamCredential

usernamePasswordCredentials£* :

artifactregistryOgetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential´gcp:artifactregistry/getRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential:getRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential;Use username and password to access the remote repository.
:¯

artifactregistryOgetRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential´gcp:artifactregistry/getRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential:getRepositoryRemoteRepositoryConfigUpstreamCredentialUsernamePasswordCredential
É
passwordSecretVersion" «The Secret Manager key version that holds the password to access the
remote repository. Must be in the format of
'projects/{project}/secrets/{secret}/versions/{version}'.
>
username" .The username to access the remote repository.
:¦
¼
artifactregistry0getRepositoryRemoteRepositoryConfigYumRepositoryvgcp:artifactregistry/getRepositoryRemoteRepositoryConfigYumRepository:getRepositoryRemoteRepositoryConfigYumRepositoryä
áÞ
publicRepositoriesö*ó:ð
í
artifactregistry@getRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository:getRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositoryOOne of the publicly available Yum repositories supported by Artifact Registry.
:ø
í
artifactregistry@getRepositoryRemoteRepositoryConfigYumRepositoryPublicRepositorygcp:artifactregistry/getRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository:getRepositoryRemoteRepositoryConfigYumRepositoryPublicRepository

repositoryBase" A common public repository base for Yum. Possible values: ["CENTOS", "CENTOS_DEBUG", "CENTOS_VAULT", "CENTOS_STREAM", "ROCKY", "EPEL"]
_
repositoryPath" ISpecific repository from the base, e.g. '"pub/rocky/9/BaseOS/x86_64/os"'
:

artifactregistry$getRepositoryVirtualRepositoryConfig^gcp:artifactregistry/getRepositoryVirtualRepositoryConfig:getRepositoryVirtualRepositoryConfigù
öó
upstreamPoliciesË*È:Å
Â
artifactregistry2getRepositoryVirtualRepositoryConfigUpstreamPolicyzgcp:artifactregistry/getRepositoryVirtualRepositoryConfigUpstreamPolicy:getRepositoryVirtualRepositoryConfigUpstreamPolicyPolicies that configure the upstream artifacts distributed by the Virtual
Repository. Upstream policies cannot be set on a standard repository.
:Þ
Â
artifactregistry2getRepositoryVirtualRepositoryConfigUpstreamPolicyzgcp:artifactregistry/getRepositoryVirtualRepositoryConfigUpstreamPolicy:getRepositoryVirtualRepositoryConfigUpstreamPolicy
7
id" -The user-provided ID of the upstream policy.
Y
priority IEntries with a greater priority value take precedence in the pull order.
}

repository" kA reference to the repository resource, for example:
"projects/p1/locations/us-central1/repository/repo1".
