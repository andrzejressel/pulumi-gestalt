
gcpGoogle Cloud"8.12.1*им
c
serviceusageConsumerQuotaOverride<gcp:serviceusage/consumerQuotaOverride:ConsumerQuotaOverrideЪЬA consumer override is applied to the consumer on its own authority to limit its own quota usage.
Consumer overrides cannot be used to grant more quota than would be allowed by admin overrides,
producer overrides, or the default limit of the service.

To get more information about ConsumerQuotaOverride, see:
* How-to Guides
    * [Managing Service Quota](https://cloud.google.com/service-usage/docs/manage-quota )
    * [REST API documentation](https://cloud.google.com/service-usage/docs/reference/rest/v1beta1/services.consumerQuotaMetrics.limits.consumerOverrides)

## Example Usage

### Consumer Quota Override


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as std from "@pulumi/std";

const myProject = new gcp.organizations.Project("my_project", {
    name: "tf-test-project",
    projectId: "quota",
    orgId: "123456789",
    deletionPolicy: "DELETE",
});
const override = new gcp.serviceusage.ConsumerQuotaOverride("override", {
    project: myProject.projectId,
    service: "servicemanagement.googleapis.com",
    metric: std.urlencode({
        input: "servicemanagement.googleapis.com/default_requests",
    }).then(invoke => invoke.result),
    limit: std.urlencode({
        input: "/min/project",
    }).then(invoke => invoke.result),
    overrideValue: "95",
    force: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_std as std

my_project = gcp.organizations.Project("my_project",
    name="tf-test-project",
    project_id="quota",
    org_id="123456789",
    deletion_policy="DELETE")
override = gcp.serviceusage.ConsumerQuotaOverride("override",
    project=my_project.project_id,
    service="servicemanagement.googleapis.com",
    metric=std.urlencode(input="servicemanagement.googleapis.com/default_requests").result,
    limit=std.urlencode(input="/min/project").result,
    override_value="95",
    force=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var myProject = new Gcp.Organizations.Project("my_project", new()
    {
        Name = "tf-test-project",
        ProjectId = "quota",
        OrgId = "123456789",
        DeletionPolicy = "DELETE",
    });

    var @override = new Gcp.ServiceUsage.ConsumerQuotaOverride("override", new()
    {
        Project = myProject.ProjectId,
        Service = "servicemanagement.googleapis.com",
        Metric = Std.Urlencode.Invoke(new()
        {
            Input = "servicemanagement.googleapis.com/default_requests",
        }).Apply(invoke => invoke.Result),
        Limit = Std.Urlencode.Invoke(new()
        {
            Input = "/min/project",
        }).Apply(invoke => invoke.Result),
        OverrideValue = "95",
        Force = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceusage"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myProject, err := organizations.NewProject(ctx, "my_project", &organizations.ProjectArgs{
			Name:           pulumi.String("tf-test-project"),
			ProjectId:      pulumi.String("quota"),
			OrgId:          pulumi.String("123456789"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		invokeUrlencode, err := std.Urlencode(ctx, &std.UrlencodeArgs{
			Input: "servicemanagement.googleapis.com/default_requests",
		}, nil)
		if err != nil {
			return err
		}
		invokeUrlencode1, err := std.Urlencode(ctx, &std.UrlencodeArgs{
			Input: "/min/project",
		}, nil)
		if err != nil {
			return err
		}
		_, err = serviceusage.NewConsumerQuotaOverride(ctx, "override", &serviceusage.ConsumerQuotaOverrideArgs{
			Project:       myProject.ProjectId,
			Service:       pulumi.String("servicemanagement.googleapis.com"),
			Metric:        pulumi.String(invokeUrlencode.Result),
			Limit:         pulumi.String(invokeUrlencode1.Result),
			OverrideValue: pulumi.String("95"),
			Force:         pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.serviceusage.ConsumerQuotaOverride;
import com.pulumi.gcp.serviceusage.ConsumerQuotaOverrideArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var myProject = new Project("myProject", ProjectArgs.builder()
            .name("tf-test-project")
            .projectId("quota")
            .orgId("123456789")
            .deletionPolicy("DELETE")
            .build());

        var override = new ConsumerQuotaOverride("override", ConsumerQuotaOverrideArgs.builder()
            .project(myProject.projectId())
            .service("servicemanagement.googleapis.com")
            .metric(StdFunctions.urlencode(UrlencodeArgs.builder()
                .input("servicemanagement.googleapis.com/default_requests")
                .build()).result())
            .limit(StdFunctions.urlencode(UrlencodeArgs.builder()
                .input("/min/project")
                .build()).result())
            .overrideValue("95")
            .force(true)
            .build());

    }
}
```
```yaml
resources:
  myProject:
    type: gcp:organizations:Project
    name: my_project
    properties:
      name: tf-test-project
      projectId: quota
      orgId: '123456789'
      deletionPolicy: DELETE
  override:
    type: gcp:serviceusage:ConsumerQuotaOverride
    properties:
      project: ${myProject.projectId}
      service: servicemanagement.googleapis.com
      metric:
        fn::invoke:
          function: std:urlencode
          arguments:
            input: servicemanagement.googleapis.com/default_requests
          return: result
      limit:
        fn::invoke:
          function: std:urlencode
          arguments:
            input: /min/project
          return: result
      overrideValue: '95'
      force: true
```
<!--End PulumiCodeChooser -->
### Region Consumer Quota Override


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as std from "@pulumi/std";

const myProject = new gcp.organizations.Project("my_project", {
    name: "tf-test-project",
    projectId: "quota",
    orgId: "123456789",
    deletionPolicy: "DELETE",
});
const override = new gcp.serviceusage.ConsumerQuotaOverride("override", {
    dimensions: {
        region: "us-central1",
    },
    project: myProject.projectId,
    service: "compute.googleapis.com",
    metric: std.urlencode({
        input: "compute.googleapis.com/n2_cpus",
    }).then(invoke => invoke.result),
    limit: std.urlencode({
        input: "/project/region",
    }).then(invoke => invoke.result),
    overrideValue: "8",
    force: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_std as std

my_project = gcp.organizations.Project("my_project",
    name="tf-test-project",
    project_id="quota",
    org_id="123456789",
    deletion_policy="DELETE")
override = gcp.serviceusage.ConsumerQuotaOverride("override",
    dimensions={
        "region": "us-central1",
    },
    project=my_project.project_id,
    service="compute.googleapis.com",
    metric=std.urlencode(input="compute.googleapis.com/n2_cpus").result,
    limit=std.urlencode(input="/project/region").result,
    override_value="8",
    force=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var myProject = new Gcp.Organizations.Project("my_project", new()
    {
        Name = "tf-test-project",
        ProjectId = "quota",
        OrgId = "123456789",
        DeletionPolicy = "DELETE",
    });

    var @override = new Gcp.ServiceUsage.ConsumerQuotaOverride("override", new()
    {
        Dimensions = 
        {
            { "region", "us-central1" },
        },
        Project = myProject.ProjectId,
        Service = "compute.googleapis.com",
        Metric = Std.Urlencode.Invoke(new()
        {
            Input = "compute.googleapis.com/n2_cpus",
        }).Apply(invoke => invoke.Result),
        Limit = Std.Urlencode.Invoke(new()
        {
            Input = "/project/region",
        }).Apply(invoke => invoke.Result),
        OverrideValue = "8",
        Force = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceusage"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myProject, err := organizations.NewProject(ctx, "my_project", &organizations.ProjectArgs{
			Name:           pulumi.String("tf-test-project"),
			ProjectId:      pulumi.String("quota"),
			OrgId:          pulumi.String("123456789"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		invokeUrlencode, err := std.Urlencode(ctx, &std.UrlencodeArgs{
			Input: "compute.googleapis.com/n2_cpus",
		}, nil)
		if err != nil {
			return err
		}
		invokeUrlencode1, err := std.Urlencode(ctx, &std.UrlencodeArgs{
			Input: "/project/region",
		}, nil)
		if err != nil {
			return err
		}
		_, err = serviceusage.NewConsumerQuotaOverride(ctx, "override", &serviceusage.ConsumerQuotaOverrideArgs{
			Dimensions: pulumi.StringMap{
				"region": pulumi.String("us-central1"),
			},
			Project:       myProject.ProjectId,
			Service:       pulumi.String("compute.googleapis.com"),
			Metric:        pulumi.String(invokeUrlencode.Result),
			Limit:         pulumi.String(invokeUrlencode1.Result),
			OverrideValue: pulumi.String("8"),
			Force:         pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.serviceusage.ConsumerQuotaOverride;
import com.pulumi.gcp.serviceusage.ConsumerQuotaOverrideArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var myProject = new Project("myProject", ProjectArgs.builder()
            .name("tf-test-project")
            .projectId("quota")
            .orgId("123456789")
            .deletionPolicy("DELETE")
            .build());

        var override = new ConsumerQuotaOverride("override", ConsumerQuotaOverrideArgs.builder()
            .dimensions(Map.of("region", "us-central1"))
            .project(myProject.projectId())
            .service("compute.googleapis.com")
            .metric(StdFunctions.urlencode(UrlencodeArgs.builder()
                .input("compute.googleapis.com/n2_cpus")
                .build()).result())
            .limit(StdFunctions.urlencode(UrlencodeArgs.builder()
                .input("/project/region")
                .build()).result())
            .overrideValue("8")
            .force(true)
            .build());

    }
}
```
```yaml
resources:
  myProject:
    type: gcp:organizations:Project
    name: my_project
    properties:
      name: tf-test-project
      projectId: quota
      orgId: '123456789'
      deletionPolicy: DELETE
  override:
    type: gcp:serviceusage:ConsumerQuotaOverride
    properties:
      dimensions:
        region: us-central1
      project: ${myProject.projectId}
      service: compute.googleapis.com
      metric:
        fn::invoke:
          function: std:urlencode
          arguments:
            input: compute.googleapis.com/n2_cpus
          return: result
      limit:
        fn::invoke:
          function: std:urlencode
          arguments:
            input: /project/region
          return: result
      overrideValue: '8'
      force: true
```
<!--End PulumiCodeChooser -->
### Consumer Quota Override Custom Dimension


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as std from "@pulumi/std";

const myProject = new gcp.organizations.Project("my_project", {
    name: "tf-test-project",
    projectId: "quota",
    orgId: "123456789",
    deletionPolicy: "DELETE",
});
const override = new gcp.serviceusage.ConsumerQuotaOverride("override", {
    project: myProject.projectId,
    service: "libraryagent.googleapis.com",
    metric: std.urlencode({
        input: "libraryagent.googleapis.com/borrows",
    }).then(invoke => invoke.result),
    limit: std.urlencode({
        input: "/author/project",
    }).then(invoke => invoke.result),
    overrideValue: "1",
    force: true,
    dimensions: {
        author: "larry",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_std as std

my_project = gcp.organizations.Project("my_project",
    name="tf-test-project",
    project_id="quota",
    org_id="123456789",
    deletion_policy="DELETE")
override = gcp.serviceusage.ConsumerQuotaOverride("override",
    project=my_project.project_id,
    service="libraryagent.googleapis.com",
    metric=std.urlencode(input="libraryagent.googleapis.com/borrows").result,
    limit=std.urlencode(input="/author/project").result,
    override_value="1",
    force=True,
    dimensions={
        "author": "larry",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var myProject = new Gcp.Organizations.Project("my_project", new()
    {
        Name = "tf-test-project",
        ProjectId = "quota",
        OrgId = "123456789",
        DeletionPolicy = "DELETE",
    });

    var @override = new Gcp.ServiceUsage.ConsumerQuotaOverride("override", new()
    {
        Project = myProject.ProjectId,
        Service = "libraryagent.googleapis.com",
        Metric = Std.Urlencode.Invoke(new()
        {
            Input = "libraryagent.googleapis.com/borrows",
        }).Apply(invoke => invoke.Result),
        Limit = Std.Urlencode.Invoke(new()
        {
            Input = "/author/project",
        }).Apply(invoke => invoke.Result),
        OverrideValue = "1",
        Force = true,
        Dimensions = 
        {
            { "author", "larry" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceusage"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		myProject, err := organizations.NewProject(ctx, "my_project", &organizations.ProjectArgs{
			Name:           pulumi.String("tf-test-project"),
			ProjectId:      pulumi.String("quota"),
			OrgId:          pulumi.String("123456789"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		invokeUrlencode, err := std.Urlencode(ctx, &std.UrlencodeArgs{
			Input: "libraryagent.googleapis.com/borrows",
		}, nil)
		if err != nil {
			return err
		}
		invokeUrlencode1, err := std.Urlencode(ctx, &std.UrlencodeArgs{
			Input: "/author/project",
		}, nil)
		if err != nil {
			return err
		}
		_, err = serviceusage.NewConsumerQuotaOverride(ctx, "override", &serviceusage.ConsumerQuotaOverrideArgs{
			Project:       myProject.ProjectId,
			Service:       pulumi.String("libraryagent.googleapis.com"),
			Metric:        pulumi.String(invokeUrlencode.Result),
			Limit:         pulumi.String(invokeUrlencode1.Result),
			OverrideValue: pulumi.String("1"),
			Force:         pulumi.Bool(true),
			Dimensions: pulumi.StringMap{
				"author": pulumi.String("larry"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.serviceusage.ConsumerQuotaOverride;
import com.pulumi.gcp.serviceusage.ConsumerQuotaOverrideArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var myProject = new Project("myProject", ProjectArgs.builder()
            .name("tf-test-project")
            .projectId("quota")
            .orgId("123456789")
            .deletionPolicy("DELETE")
            .build());

        var override = new ConsumerQuotaOverride("override", ConsumerQuotaOverrideArgs.builder()
            .project(myProject.projectId())
            .service("libraryagent.googleapis.com")
            .metric(StdFunctions.urlencode(UrlencodeArgs.builder()
                .input("libraryagent.googleapis.com/borrows")
                .build()).result())
            .limit(StdFunctions.urlencode(UrlencodeArgs.builder()
                .input("/author/project")
                .build()).result())
            .overrideValue("1")
            .force(true)
            .dimensions(Map.of("author", "larry"))
            .build());

    }
}
```
```yaml
resources:
  myProject:
    type: gcp:organizations:Project
    name: my_project
    properties:
      name: tf-test-project
      projectId: quota
      orgId: '123456789'
      deletionPolicy: DELETE
  override:
    type: gcp:serviceusage:ConsumerQuotaOverride
    properties:
      project: ${myProject.projectId}
      service: libraryagent.googleapis.com
      metric:
        fn::invoke:
          function: std:urlencode
          arguments:
            input: libraryagent.googleapis.com/borrows
          return: result
      limit:
        fn::invoke:
          function: std:urlencode
          arguments:
            input: /author/project
          return: result
      overrideValue: '1'
      force: true
      dimensions:
        author: larry
```
<!--End PulumiCodeChooser -->

## Import

ConsumerQuotaOverride can be imported using any of these accepted formats:

* `projects/{{project}}/services/{{service}}/consumerQuotaMetrics/{{metric}}/limits/{{limit}}/consumerOverrides/{{name}}`

* `services/{{service}}/consumerQuotaMetrics/{{metric}}/limits/{{limit}}/consumerOverrides/{{name}}`

* `{{service}}/{{metric}}/{{limit}}/{{name}}`

When using the `pulumi import` command, ConsumerQuotaOverride can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:serviceusage/consumerQuotaOverride:ConsumerQuotaOverride default projects/{{project}}/services/{{service}}/consumerQuotaMetrics/{{metric}}/limits/{{limit}}/consumerOverrides/{{name}}
```

```sh
$ pulumi import gcp:serviceusage/consumerQuotaOverride:ConsumerQuotaOverride default services/{{service}}/consumerQuotaMetrics/{{metric}}/limits/{{limit}}/consumerOverrides/{{name}}
```

```sh
$ pulumi import gcp:serviceusage/consumerQuotaOverride:ConsumerQuotaOverride default {{service}}/{{metric}}/{{limit}}/{{name}}
```

М

dimensionsB2" vIf this map is nonempty, then this override applies only to specific values for dimensions defined in the limit unit.
в
forceB
 ТIf the new quota would decrease the existing quota by more than 10%, the request is rejected.
If `force` is `true`, that safety check is ignored.
▀
limit" ╤The limit on the metric, e.g. `/project/region`.
> Make sure that `limit` is in a format that doesn't start with `1/` or contain curly braces.
E.g. use `/project/user` instead of `1/{project}/{user}`.


- - -
U
metric" GThe metric that should be limited, e.g. `compute.googleapis.com/cpus`.
p
overrideValue" [The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
V
service" GThe service that the metrics belong to, e.g. `compute.googleapis.com`.
"М

dimensionsB2" vIf this map is nonempty, then this override applies only to specific values for dimensions defined in the limit unit.
"в
forceB
 ТIf the new quota would decrease the existing quota by more than 10%, the request is rejected.
If `force` is `true`, that safety check is ignored.
"▀
limit" ╤The limit on the metric, e.g. `/project/region`.
> Make sure that `limit` is in a format that doesn't start with `1/` or contain curly braces.
E.g. use `/project/user` instead of `1/{project}/{user}`.


- - -
"U
metric" GThe metric that should be limited, e.g. `compute.googleapis.com/cpus`.
"=
name" 1The server-generated name of the quota override.
"p
overrideValue" [The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"V
service" GThe service that the metrics belong to, e.g. `compute.googleapis.com`.
*яf
;
siteverificationOwner gcp:siteverification/owner:Owner├bAn owner is an additional user that may manage a verified web site in the
[Google Search Console](https://www.google.com/webmasters/tools/). There
are two types of web resource owners:

* Verified owners, which are added to a web resource automatically when it
    is created (i.e., when the resource is verified). A verified owner is
    determined by the identity of the user requesting verification.
* Additional owners, which can be added to the resource by verified owners.

`gcp.siteverification.Owner` creates additional owners. If your web site
was verified using the
`gcp.siteverification.WebResource`
resource then you (or the identity was used to create the resource, such as a
service account) are already an owner.

> **Note:** The email address of the owner must belong to a Google account,
such as a Gmail account, a Google Workspace account, or a GCP service account.

Working with site verification requires the `https://www.googleapis.com/auth/siteverification`
authentication scope. See the
Google Provider authentication documentation
to learn how to configure additional scopes.

To get more information about site owners, see:

* [API documentation](https://developers.google.com/site-verification/v1)
* How-to Guides
    * [Getting Started](https://developers.google.com/site-verification/v1/getting_started)

## Example Usage

### Site Verification Storage Bucket

This example uses the `FILE` verification method to verify ownership of web site hosted
in a Google Cloud Storage bucket. Ownership is proved by creating a file with a Google-provided
value in a known location. The user applying this configuration will automatically be
added as a verified owner, and the `gcp.siteverification.Owner` resource will add
`user@example.com` as an additional owner.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const bucket = new gcp.storage.Bucket("bucket", {
    name: "example-storage-bucket",
    location: "US",
});
const token = gcp.siteverification.getTokenOutput({
    type: "SITE",
    identifier: pulumi.interpolate`https://${bucket.name}.storage.googleapis.com/`,
    verificationMethod: "FILE",
});
const object = new gcp.storage.BucketObject("object", {
    name: token.apply(token => token.token),
    content: token.apply(token => `google-site-verification: ${token.token}`),
    bucket: bucket.name,
});
const publicRule = new gcp.storage.ObjectAccessControl("public_rule", {
    bucket: bucket.name,
    object: object.name,
    role: "READER",
    entity: "allUsers",
});
const example = new gcp.siteverification.WebResource("example", {
    site: {
        type: token.apply(token => token.type),
        identifier: token.apply(token => token.identifier),
    },
    verificationMethod: token.apply(token => token.verificationMethod),
});
const exampleOwner = new gcp.siteverification.Owner("example", {
    webResourceId: example.id,
    email: "user@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

bucket = gcp.storage.Bucket("bucket",
    name="example-storage-bucket",
    location="US")
token = gcp.siteverification.get_token_output(type="SITE",
    identifier=bucket.name.apply(lambda name: f"https://{name}.storage.googleapis.com/"),
    verification_method="FILE")
object = gcp.storage.BucketObject("object",
    name=token.token,
    content=token.apply(lambda token: f"google-site-verification: {token.token}"),
    bucket=bucket.name)
public_rule = gcp.storage.ObjectAccessControl("public_rule",
    bucket=bucket.name,
    object=object.name,
    role="READER",
    entity="allUsers")
example = gcp.siteverification.WebResource("example",
    site={
        "type": token.type,
        "identifier": token.identifier,
    },
    verification_method=token.verification_method)
example_owner = gcp.siteverification.Owner("example",
    web_resource_id=example.id,
    email="user@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "example-storage-bucket",
        Location = "US",
    });

    var token = Gcp.SiteVerification.GetToken.Invoke(new()
    {
        Type = "SITE",
        Identifier = $"https://{bucket.Name}.storage.googleapis.com/",
        VerificationMethod = "FILE",
    });

    var @object = new Gcp.Storage.BucketObject("object", new()
    {
        Name = token.Apply(getTokenResult => getTokenResult.Token),
        Content = $"google-site-verification: {token.Apply(getTokenResult => getTokenResult.Token)}",
        Bucket = bucket.Name,
    });

    var publicRule = new Gcp.Storage.ObjectAccessControl("public_rule", new()
    {
        Bucket = bucket.Name,
        Object = @object.Name,
        Role = "READER",
        Entity = "allUsers",
    });

    var example = new Gcp.SiteVerification.WebResource("example", new()
    {
        Site = new Gcp.SiteVerification.Inputs.WebResourceSiteArgs
        {
            Type = token.Apply(getTokenResult => getTokenResult.Type),
            Identifier = token.Apply(getTokenResult => getTokenResult.Identifier),
        },
        VerificationMethod = token.Apply(getTokenResult => getTokenResult.VerificationMethod),
    });

    var exampleOwner = new Gcp.SiteVerification.Owner("example", new()
    {
        WebResourceId = example.Id,
        Email = "user@example.com",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/siteverification"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:     pulumi.String("example-storage-bucket"),
			Location: pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		token := siteverification.GetTokenOutput(ctx, siteverification.GetTokenOutputArgs{
			Type: pulumi.String("SITE"),
			Identifier: bucket.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("https://%v.storage.googleapis.com/", name), nil
			}).(pulumi.StringOutput),
			VerificationMethod: pulumi.String("FILE"),
		}, nil)
		object, err := storage.NewBucketObject(ctx, "object", &storage.BucketObjectArgs{
			Name: pulumi.String(token.ApplyT(func(token siteverification.GetTokenResult) (*string, error) {
				return &token.Token, nil
			}).(pulumi.StringPtrOutput)),
			Content: token.ApplyT(func(token siteverification.GetTokenResult) (string, error) {
				return fmt.Sprintf("google-site-verification: %v", token.Token), nil
			}).(pulumi.StringOutput),
			Bucket: bucket.Name,
		})
		if err != nil {
			return err
		}
		_, err = storage.NewObjectAccessControl(ctx, "public_rule", &storage.ObjectAccessControlArgs{
			Bucket: bucket.Name,
			Object: object.Name,
			Role:   pulumi.String("READER"),
			Entity: pulumi.String("allUsers"),
		})
		if err != nil {
			return err
		}
		example, err := siteverification.NewWebResource(ctx, "example", &siteverification.WebResourceArgs{
			Site: &siteverification.WebResourceSiteArgs{
				Type: token.ApplyT(func(token siteverification.GetTokenResult) (*string, error) {
					return &token.Type, nil
				}).(pulumi.StringPtrOutput),
				Identifier: token.ApplyT(func(token siteverification.GetTokenResult) (*string, error) {
					return &token.Identifier, nil
				}).(pulumi.StringPtrOutput),
			},
			VerificationMethod: pulumi.String(token.ApplyT(func(token siteverification.GetTokenResult) (*string, error) {
				return &token.VerificationMethod, nil
			}).(pulumi.StringPtrOutput)),
		})
		if err != nil {
			return err
		}
		_, err = siteverification.NewOwner(ctx, "example", &siteverification.OwnerArgs{
			WebResourceId: example.ID(),
			Email:         pulumi.String("user@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.siteverification.SiteverificationFunctions;
import com.pulumi.gcp.siteverification.inputs.GetTokenArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.storage.ObjectAccessControl;
import com.pulumi.gcp.storage.ObjectAccessControlArgs;
import com.pulumi.gcp.siteverification.WebResource;
import com.pulumi.gcp.siteverification.WebResourceArgs;
import com.pulumi.gcp.siteverification.inputs.WebResourceSiteArgs;
import com.pulumi.gcp.siteverification.Owner;
import com.pulumi.gcp.siteverification.OwnerArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("example-storage-bucket")
            .location("US")
            .build());

        final var token = SiteverificationFunctions.getToken(GetTokenArgs.builder()
            .type("SITE")
            .identifier(bucket.name().applyValue(name -> String.format("https://%s.storage.googleapis.com/", name)))
            .verificationMethod("FILE")
            .build());

        var object = new BucketObject("object", BucketObjectArgs.builder()
            .name(token.applyValue(getTokenResult -> getTokenResult).applyValue(token -> token.applyValue(getTokenResult -> getTokenResult.token())))
            .content(token.applyValue(getTokenResult -> getTokenResult).applyValue(token -> String.format("google-site-verification: %s", token.applyValue(getTokenResult -> getTokenResult.token()))))
            .bucket(bucket.name())
            .build());

        var publicRule = new ObjectAccessControl("publicRule", ObjectAccessControlArgs.builder()
            .bucket(bucket.name())
            .object(object.name())
            .role("READER")
            .entity("allUsers")
            .build());

        var example = new WebResource("example", WebResourceArgs.builder()
            .site(WebResourceSiteArgs.builder()
                .type(token.applyValue(getTokenResult -> getTokenResult).applyValue(token -> token.applyValue(getTokenResult -> getTokenResult.type())))
                .identifier(token.applyValue(getTokenResult -> getTokenResult).applyValue(token -> token.applyValue(getTokenResult -> getTokenResult.identifier())))
                .build())
            .verificationMethod(token.applyValue(getTokenResult -> getTokenResult).applyValue(token -> token.applyValue(getTokenResult -> getTokenResult.verificationMethod())))
            .build());

        var exampleOwner = new Owner("exampleOwner", OwnerArgs.builder()
            .webResourceId(example.id())
            .email("user@example.com")
            .build());

    }
}
```
```yaml
resources:
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: example-storage-bucket
      location: US
  object:
    type: gcp:storage:BucketObject
    properties:
      name: ${token.token}
      content: 'google-site-verification: ${token.token}'
      bucket: ${bucket.name}
  publicRule:
    type: gcp:storage:ObjectAccessControl
    name: public_rule
    properties:
      bucket: ${bucket.name}
      object: ${object.name}
      role: READER
      entity: allUsers
  example:
    type: gcp:siteverification:WebResource
    properties:
      site:
        type: ${token.type}
        identifier: ${token.identifier}
      verificationMethod: ${token.verificationMethod}
  exampleOwner:
    type: gcp:siteverification:Owner
    name: example
    properties:
      webResourceId: ${example.id}
      email: user@example.com
variables:
  token:
    fn::invoke:
      function: gcp:siteverification:getToken
      arguments:
        type: SITE
        identifier: https://${bucket.name}.storage.googleapis.com/
        verificationMethod: FILE
```
<!--End PulumiCodeChooser -->

## Import

Owner can be imported using this format:

* `webResource/{{web_resource_id}}/{{email}}`

When using the `pulumi import` command, Site owners can be imported using the format above. For example:

```sh
$ pulumi import gcp:siteverification/owner:Owner default webResource/{{web_resource_id}}/{{email}}
```

verified owners is to delete the web resource itself.

C
email" 6The email of the user to be added as an owner.

- - -
о
webResourceId" ШThe id of of the web resource to which the owner will be added, in the form `webResource/<resource_id>`,
such as `webResource/https://www.example.com/`
"C
email" 6The email of the user to be added as an owner.

- - -
"о
webResourceId" ШThe id of of the web resource to which the owner will be added, in the form `webResource/<resource_id>`,
such as `webResource/https://www.example.com/`
*ЁF
M
siteverificationWebResource,gcp:siteverification/webResource:WebResourceХ=A web resource is a website or domain with verified ownership. Once your
ownership is verified you will be able to manage your website in the
[Google Search Console](https://www.google.com/webmasters/tools/).

> **Note:** The verification data (DNS `TXT` record, HTML file, `meta` tag, etc.)
must already exist before the web resource is created, and must be deleted before
the web resource is destroyed. The Google Site Verification API checks that the
verification data exists at creation time and does not exist at destruction time
and will fail if the required condition is not met.


To get more information about WebResource, see:

* [API documentation](https://developers.google.com/site-verification/v1)
* How-to Guides
    * [Getting Started](https://developers.google.com/site-verification/v1/getting_started)

## Example Usage

### Site Verification Domain Record


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const token = gcp.siteverification.getToken({
    type: "INET_DOMAIN",
    identifier: "www.example.com",
    verificationMethod: "DNS_TXT",
});
const example = new gcp.dns.RecordSet("example", {
    managedZone: "example.com",
    name: "www.example.com.",
    type: "TXT",
    rrdatas: [token.then(token => token.token)],
    ttl: 86400,
});
const exampleWebResource = new gcp.siteverification.WebResource("example", {
    site: {
        type: token.then(token => token.type),
        identifier: token.then(token => token.identifier),
    },
    verificationMethod: token.then(token => token.verificationMethod),
}, {
    dependsOn: [example],
});
```
```python
import pulumi
import pulumi_gcp as gcp

token = gcp.siteverification.get_token(type="INET_DOMAIN",
    identifier="www.example.com",
    verification_method="DNS_TXT")
example = gcp.dns.RecordSet("example",
    managed_zone="example.com",
    name="www.example.com.",
    type="TXT",
    rrdatas=[token.token],
    ttl=86400)
example_web_resource = gcp.siteverification.WebResource("example",
    site={
        "type": token.type,
        "identifier": token.identifier,
    },
    verification_method=token.verification_method,
    opts = pulumi.ResourceOptions(depends_on=[example]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var token = Gcp.SiteVerification.GetToken.Invoke(new()
    {
        Type = "INET_DOMAIN",
        Identifier = "www.example.com",
        VerificationMethod = "DNS_TXT",
    });

    var example = new Gcp.Dns.RecordSet("example", new()
    {
        ManagedZone = "example.com",
        Name = "www.example.com.",
        Type = "TXT",
        Rrdatas = new[]
        {
            token.Apply(getTokenResult => getTokenResult.Token),
        },
        Ttl = 86400,
    });

    var exampleWebResource = new Gcp.SiteVerification.WebResource("example", new()
    {
        Site = new Gcp.SiteVerification.Inputs.WebResourceSiteArgs
        {
            Type = token.Apply(getTokenResult => getTokenResult.Type),
            Identifier = token.Apply(getTokenResult => getTokenResult.Identifier),
        },
        VerificationMethod = token.Apply(getTokenResult => getTokenResult.VerificationMethod),
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            example,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/dns"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/siteverification"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		token, err := siteverification.GetToken(ctx, &siteverification.GetTokenArgs{
			Type:               "INET_DOMAIN",
			Identifier:         "www.example.com",
			VerificationMethod: "DNS_TXT",
		}, nil)
		if err != nil {
			return err
		}
		example, err := dns.NewRecordSet(ctx, "example", &dns.RecordSetArgs{
			ManagedZone: pulumi.String("example.com"),
			Name:        pulumi.String("www.example.com."),
			Type:        pulumi.String("TXT"),
			Rrdatas: pulumi.StringArray{
				pulumi.String(token.Token),
			},
			Ttl: pulumi.Int(86400),
		})
		if err != nil {
			return err
		}
		_, err = siteverification.NewWebResource(ctx, "example", &siteverification.WebResourceArgs{
			Site: &siteverification.WebResourceSiteArgs{
				Type:       pulumi.String(token.Type),
				Identifier: pulumi.String(token.Identifier),
			},
			VerificationMethod: pulumi.String(token.VerificationMethod),
		}, pulumi.DependsOn([]pulumi.Resource{
			example,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.siteverification.SiteverificationFunctions;
import com.pulumi.gcp.siteverification.inputs.GetTokenArgs;
import com.pulumi.gcp.dns.RecordSet;
import com.pulumi.gcp.dns.RecordSetArgs;
import com.pulumi.gcp.siteverification.WebResource;
import com.pulumi.gcp.siteverification.WebResourceArgs;
import com.pulumi.gcp.siteverification.inputs.WebResourceSiteArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var token = SiteverificationFunctions.getToken(GetTokenArgs.builder()
            .type("INET_DOMAIN")
            .identifier("www.example.com")
            .verificationMethod("DNS_TXT")
            .build());

        var example = new RecordSet("example", RecordSetArgs.builder()
            .managedZone("example.com")
            .name("www.example.com.")
            .type("TXT")
            .rrdatas(token.applyValue(getTokenResult -> getTokenResult.token()))
            .ttl(86400)
            .build());

        var exampleWebResource = new WebResource("exampleWebResource", WebResourceArgs.builder()
            .site(WebResourceSiteArgs.builder()
                .type(token.applyValue(getTokenResult -> getTokenResult.type()))
                .identifier(token.applyValue(getTokenResult -> getTokenResult.identifier()))
                .build())
            .verificationMethod(token.applyValue(getTokenResult -> getTokenResult.verificationMethod()))
            .build(), CustomResourceOptions.builder()
                .dependsOn(example)
                .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:dns:RecordSet
    properties:
      managedZone: example.com
      name: www.example.com.
      type: TXT
      rrdatas:
        - ${token.token}
      ttl: 86400
  exampleWebResource:
    type: gcp:siteverification:WebResource
    name: example
    properties:
      site:
        type: ${token.type}
        identifier: ${token.identifier}
      verificationMethod: ${token.verificationMethod}
    options:
      dependsOn:
        - ${example}
variables:
  token:
    fn::invoke:
      function: gcp:siteverification:getToken
      arguments:
        type: INET_DOMAIN
        identifier: www.example.com
        verificationMethod: DNS_TXT
```
<!--End PulumiCodeChooser -->

## Import

WebResource can be imported using any of these accepted formats:

* `webResource/{{web_resource_id}}`

* `{{web_resource_id}}`

When using the `pulumi import` command, WebResource can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:siteverification/webResource:WebResource default webResource/{{web_resource_id}}
```

```sh
$ pulumi import gcp:siteverification/webResource:WebResource default {{web_resource_id}}
```

ф
site]:[
Y
siteverificationWebResourceSite4gcp:siteverification/WebResourceSite:WebResourceSite}Container for the address and type of a site for which a verification token will be verified.
Structure is documented below.
╙
verificationMethod" ╕The verification method for the Site Verification system to use to verify
this site or domain.
Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
"╞
owners*" ╡The email addresses of all direct, verified owners of this exact property. Indirect owners тАФ
for example verified owners of the containing domainтАФare not included in this list.
"ф
site]:[
Y
siteverificationWebResourceSite4gcp:siteverification/WebResourceSite:WebResourceSite}Container for the address and type of a site for which a verification token will be verified.
Structure is documented below.
"╙
verificationMethod" ╕The verification method for the Site Verification system to use to verify
this site or domain.
Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.
"D
webResourceId" /The string used to identify this web resource.
*гF
>

sourcerepo
Repository$gcp:sourcerepo/repository:Repository║:A repository (or repo) is a Git repository storing versioned source content.


To get more information about Repository, see:

* [API documentation](https://cloud.google.com/source-repositories/docs/reference/rest/v1/projects.repos)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/source-repositories/)

## Example Usage

### Sourcerepo Repository Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my_repo = new gcp.sourcerepo.Repository("my-repo", {name: "my/repository"});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo = gcp.sourcerepo.Repository("my-repo", name="my/repository")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_repo = new Gcp.SourceRepo.Repository("my-repo", new()
    {
        Name = "my/repository",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepository(ctx, "my-repo", &sourcerepo.RepositoryArgs{
			Name: pulumi.String("my/repository"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.Repository;
import com.pulumi.gcp.sourcerepo.RepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .name("my/repository")
            .build());

    }
}
```
```yaml
resources:
  my-repo:
    type: gcp:sourcerepo:Repository
    properties:
      name: my/repository
```
<!--End PulumiCodeChooser -->
### Sourcerepo Repository Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const testAccount = new gcp.serviceaccount.Account("test_account", {
    accountId: "my-account",
    displayName: "Test Service Account",
});
const topic = new gcp.pubsub.Topic("topic", {name: "my-topic"});
const my_repo = new gcp.sourcerepo.Repository("my-repo", {
    name: "my-repository",
    pubsubConfigs: [{
        topic: topic.id,
        messageFormat: "JSON",
        serviceAccountEmail: testAccount.email,
    }],
});
```
```python
import pulumi
import pulumi_gcp as gcp

test_account = gcp.serviceaccount.Account("test_account",
    account_id="my-account",
    display_name="Test Service Account")
topic = gcp.pubsub.Topic("topic", name="my-topic")
my_repo = gcp.sourcerepo.Repository("my-repo",
    name="my-repository",
    pubsub_configs=[{
        "topic": topic.id,
        "message_format": "JSON",
        "service_account_email": test_account.email,
    }])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var testAccount = new Gcp.ServiceAccount.Account("test_account", new()
    {
        AccountId = "my-account",
        DisplayName = "Test Service Account",
    });

    var topic = new Gcp.PubSub.Topic("topic", new()
    {
        Name = "my-topic",
    });

    var my_repo = new Gcp.SourceRepo.Repository("my-repo", new()
    {
        Name = "my-repository",
        PubsubConfigs = new[]
        {
            new Gcp.SourceRepo.Inputs.RepositoryPubsubConfigArgs
            {
                Topic = topic.Id,
                MessageFormat = "JSON",
                ServiceAccountEmail = testAccount.Email,
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		testAccount, err := serviceaccount.NewAccount(ctx, "test_account", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("my-account"),
			DisplayName: pulumi.String("Test Service Account"),
		})
		if err != nil {
			return err
		}
		topic, err := pubsub.NewTopic(ctx, "topic", &pubsub.TopicArgs{
			Name: pulumi.String("my-topic"),
		})
		if err != nil {
			return err
		}
		_, err = sourcerepo.NewRepository(ctx, "my-repo", &sourcerepo.RepositoryArgs{
			Name: pulumi.String("my-repository"),
			PubsubConfigs: sourcerepo.RepositoryPubsubConfigArray{
				&sourcerepo.RepositoryPubsubConfigArgs{
					Topic:               topic.ID(),
					MessageFormat:       pulumi.String("JSON"),
					ServiceAccountEmail: testAccount.Email,
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.sourcerepo.Repository;
import com.pulumi.gcp.sourcerepo.RepositoryArgs;
import com.pulumi.gcp.sourcerepo.inputs.RepositoryPubsubConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var testAccount = new Account("testAccount", AccountArgs.builder()
            .accountId("my-account")
            .displayName("Test Service Account")
            .build());

        var topic = new Topic("topic", TopicArgs.builder()
            .name("my-topic")
            .build());

        var my_repo = new Repository("my-repo", RepositoryArgs.builder()
            .name("my-repository")
            .pubsubConfigs(RepositoryPubsubConfigArgs.builder()
                .topic(topic.id())
                .messageFormat("JSON")
                .serviceAccountEmail(testAccount.email())
                .build())
            .build());

    }
}
```
```yaml
resources:
  testAccount:
    type: gcp:serviceaccount:Account
    name: test_account
    properties:
      accountId: my-account
      displayName: Test Service Account
  topic:
    type: gcp:pubsub:Topic
    properties:
      name: my-topic
  my-repo:
    type: gcp:sourcerepo:Repository
    properties:
      name: my-repository
      pubsubConfigs:
        - topic: ${topic.id}
          messageFormat: JSON
          serviceAccountEmail: ${testAccount.email}
```
<!--End PulumiCodeChooser -->

## Import

Repository can be imported using any of these accepted formats:

* `projects/{{project}}/repos/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Repository can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:sourcerepo/repository:Repository default projects/{{project}}/repos/{{name}}
```

```sh
$ pulumi import gcp:sourcerepo/repository:Repository default {{name}}
```


createIgnoreAlreadyExistsB
 \If set to true, skip repository creation if a repository with the same name already exists.
И
nameB" zResource name of the repository, of the form `{{repo}}`.
The repo name may contain slashes. eg, `name/with/slash`


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
З
pubsubConfigsjBh*f:d
b

sourcerepoRepositoryPubsubConfig<gcp:sourcerepo/RepositoryPubsubConfig:RepositoryPubsubConfigЙHow this repository publishes a change in the repository through Cloud Pub/Sub.
Keyed by the topic names.
Structure is documented below.
"
createIgnoreAlreadyExistsB
 \If set to true, skip repository creation if a repository with the same name already exists.
"Ж
name" zResource name of the repository, of the form `{{repo}}`.
The repo name may contain slashes. eg, `name/with/slash`


- - -
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"З
pubsubConfigsjBh*f:d
b

sourcerepoRepositoryPubsubConfig<gcp:sourcerepo/RepositoryPubsubConfig:RepositoryPubsubConfigЙHow this repository publishes a change in the repository through Cloud Pub/Sub.
Keyed by the topic names.
Structure is documented below.
"2
size &The disk usage of the repo, in bytes.
"N
url" CURL to clone the repository from Google Cloud Source Repositories.
*Б╥
\

sourcerepoRepositoryIamBinding8gcp:sourcerepo/repositoryIamBinding:RepositoryIamBindingШ▓Three different resources help you manage your IAM policy for Cloud Source Repositories Repository. Each of these resources serves a different use case:

* `gcp.sourcerepo.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.sourcerepo.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.sourcerepo.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.sourcerepo.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.sourcerepo.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.sourcerepo.RepositoryIamBinding` and `gcp.sourcerepo.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.sourcerepo.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.sourcerepo.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.sourcerepo.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.sourcerepo.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.sourcerepo.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SourceRepo.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = sourcerepo.NewRepositoryIamPolicy(ctx, "policy", &sourcerepo.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicy;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:sourcerepo:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.sourcerepo.RepositoryIamBinding("binding", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.sourcerepo.RepositoryIamBinding("binding",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SourceRepo.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamBinding(ctx, "binding", &sourcerepo.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamBinding;
import com.pulumi.gcp.sourcerepo.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:sourcerepo:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.sourcerepo.RepositoryIamMember("member", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.sourcerepo.RepositoryIamMember("member",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SourceRepo.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamMember(ctx, "member", &sourcerepo.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamMember;
import com.pulumi.gcp.sourcerepo.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:sourcerepo:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for Cloud Source Repositories Repository
Three different resources help you manage your IAM policy for Cloud Source Repositories Repository. Each of these resources serves a different use case:

* `gcp.sourcerepo.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.sourcerepo.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.sourcerepo.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.sourcerepo.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.sourcerepo.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.sourcerepo.RepositoryIamBinding` and `gcp.sourcerepo.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.sourcerepo.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.sourcerepo.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.sourcerepo.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.sourcerepo.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.sourcerepo.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SourceRepo.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = sourcerepo.NewRepositoryIamPolicy(ctx, "policy", &sourcerepo.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicy;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:sourcerepo:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.sourcerepo.RepositoryIamBinding("binding", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.sourcerepo.RepositoryIamBinding("binding",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SourceRepo.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamBinding(ctx, "binding", &sourcerepo.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamBinding;
import com.pulumi.gcp.sourcerepo.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:sourcerepo:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.sourcerepo.RepositoryIamMember("member", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.sourcerepo.RepositoryIamMember("member",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SourceRepo.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamMember(ctx, "member", &sourcerepo.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamMember;
import com.pulumi.gcp.sourcerepo.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:sourcerepo:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/repos/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Cloud Source Repositories repository IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:sourcerepo/repositoryIamBinding:RepositoryIamBinding editor "projects/{{project}}/repos/{{repository}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:sourcerepo/repositoryIamBinding:RepositoryIamBinding editor "projects/{{project}}/repos/{{repository}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:sourcerepo/repositoryIamBinding:RepositoryIamBinding editor projects/{{project}}/repos/{{repository}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

К
	condition}B{:y
w

sourcerepoRepositoryIamBindingConditionJgcp:sourcerepo/RepositoryIamBindingCondition:RepositoryIamBindingCondition╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
У
projectB" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
M

repository" ;Used to find the parent resource to bind the IAM policy to
▄
role" ╧The role that should be applied. Only one
`gcp.sourcerepo.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"К
	condition}B{:y
w

sourcerepoRepositoryIamBindingConditionJgcp:sourcerepo/RepositoryIamBindingCondition:RepositoryIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"С
project" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"M

repository" ;Used to find the parent resource to bind the IAM policy to
"▄
role" ╧The role that should be applied. Only one
`gcp.sourcerepo.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*ь╤
Y

sourcerepoRepositoryIamMember6gcp:sourcerepo/repositoryIamMember:RepositoryIamMemberТ▓Three different resources help you manage your IAM policy for Cloud Source Repositories Repository. Each of these resources serves a different use case:

* `gcp.sourcerepo.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.sourcerepo.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.sourcerepo.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.sourcerepo.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.sourcerepo.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.sourcerepo.RepositoryIamBinding` and `gcp.sourcerepo.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.sourcerepo.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.sourcerepo.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.sourcerepo.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.sourcerepo.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.sourcerepo.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SourceRepo.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = sourcerepo.NewRepositoryIamPolicy(ctx, "policy", &sourcerepo.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicy;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:sourcerepo:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.sourcerepo.RepositoryIamBinding("binding", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.sourcerepo.RepositoryIamBinding("binding",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SourceRepo.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamBinding(ctx, "binding", &sourcerepo.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamBinding;
import com.pulumi.gcp.sourcerepo.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:sourcerepo:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.sourcerepo.RepositoryIamMember("member", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.sourcerepo.RepositoryIamMember("member",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SourceRepo.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamMember(ctx, "member", &sourcerepo.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamMember;
import com.pulumi.gcp.sourcerepo.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:sourcerepo:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for Cloud Source Repositories Repository
Three different resources help you manage your IAM policy for Cloud Source Repositories Repository. Each of these resources serves a different use case:

* `gcp.sourcerepo.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.sourcerepo.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.sourcerepo.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.sourcerepo.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.sourcerepo.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.sourcerepo.RepositoryIamBinding` and `gcp.sourcerepo.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.sourcerepo.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.sourcerepo.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.sourcerepo.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.sourcerepo.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.sourcerepo.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SourceRepo.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = sourcerepo.NewRepositoryIamPolicy(ctx, "policy", &sourcerepo.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicy;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:sourcerepo:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.sourcerepo.RepositoryIamBinding("binding", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.sourcerepo.RepositoryIamBinding("binding",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SourceRepo.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamBinding(ctx, "binding", &sourcerepo.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamBinding;
import com.pulumi.gcp.sourcerepo.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:sourcerepo:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.sourcerepo.RepositoryIamMember("member", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.sourcerepo.RepositoryIamMember("member",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SourceRepo.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamMember(ctx, "member", &sourcerepo.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamMember;
import com.pulumi.gcp.sourcerepo.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:sourcerepo:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/repos/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Cloud Source Repositories repository IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:sourcerepo/repositoryIamMember:RepositoryIamMember editor "projects/{{project}}/repos/{{repository}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:sourcerepo/repositoryIamMember:RepositoryIamMember editor "projects/{{project}}/repos/{{repository}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:sourcerepo/repositoryIamMember:RepositoryIamMember editor projects/{{project}}/repos/{{repository}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

З
	conditionzBx:v
t

sourcerepoRepositoryIamMemberConditionHgcp:sourcerepo/RepositoryIamMemberCondition:RepositoryIamMemberCondition╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
У
projectB" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
M

repository" ;Used to find the parent resource to bind the IAM policy to
▄
role" ╧The role that should be applied. Only one
`gcp.sourcerepo.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"З
	conditionzBx:v
t

sourcerepoRepositoryIamMemberConditionHgcp:sourcerepo/RepositoryIamMemberCondition:RepositoryIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"С
project" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"M

repository" ;Used to find the parent resource to bind the IAM policy to
"▄
role" ╧The role that should be applied. Only one
`gcp.sourcerepo.RepositoryIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*░║
Y

sourcerepoRepositoryIamPolicy6gcp:sourcerepo/repositoryIamPolicy:RepositoryIamPolicyТ▓Three different resources help you manage your IAM policy for Cloud Source Repositories Repository. Each of these resources serves a different use case:

* `gcp.sourcerepo.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.sourcerepo.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.sourcerepo.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.sourcerepo.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.sourcerepo.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.sourcerepo.RepositoryIamBinding` and `gcp.sourcerepo.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.sourcerepo.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.sourcerepo.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.sourcerepo.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.sourcerepo.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.sourcerepo.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SourceRepo.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = sourcerepo.NewRepositoryIamPolicy(ctx, "policy", &sourcerepo.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicy;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:sourcerepo:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.sourcerepo.RepositoryIamBinding("binding", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.sourcerepo.RepositoryIamBinding("binding",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SourceRepo.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamBinding(ctx, "binding", &sourcerepo.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamBinding;
import com.pulumi.gcp.sourcerepo.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:sourcerepo:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.sourcerepo.RepositoryIamMember("member", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.sourcerepo.RepositoryIamMember("member",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SourceRepo.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamMember(ctx, "member", &sourcerepo.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamMember;
import com.pulumi.gcp.sourcerepo.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:sourcerepo:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## This resource supports User Project Overrides.

-

# IAM policy for Cloud Source Repositories Repository
Three different resources help you manage your IAM policy for Cloud Source Repositories Repository. Each of these resources serves a different use case:

* `gcp.sourcerepo.RepositoryIamPolicy`: Authoritative. Sets the IAM policy for the repository and replaces any existing policy already attached.
* `gcp.sourcerepo.RepositoryIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the repository are preserved.
* `gcp.sourcerepo.RepositoryIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the repository are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.sourcerepo.RepositoryIamPolicy`: Retrieves the IAM policy for the repository

> **Note:** `gcp.sourcerepo.RepositoryIamPolicy` **cannot** be used in conjunction with `gcp.sourcerepo.RepositoryIamBinding` and `gcp.sourcerepo.RepositoryIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.sourcerepo.RepositoryIamBinding` resources **can be** used in conjunction with `gcp.sourcerepo.RepositoryIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.sourcerepo.RepositoryIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.sourcerepo.RepositoryIamPolicy("policy", {
    project: my_repo.project,
    repository: my_repo.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.sourcerepo.RepositoryIamPolicy("policy",
    project=my_repo["project"],
    repository=my_repo["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.SourceRepo.RepositoryIamPolicy("policy", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = sourcerepo.NewRepositoryIamPolicy(ctx, "policy", &sourcerepo.RepositoryIamPolicyArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicy;
import com.pulumi.gcp.sourcerepo.RepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new RepositoryIamPolicy("policy", RepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:sourcerepo:RepositoryIamPolicy
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.sourcerepo.RepositoryIamBinding("binding", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.sourcerepo.RepositoryIamBinding("binding",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.SourceRepo.RepositoryIamBinding("binding", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamBinding(ctx, "binding", &sourcerepo.RepositoryIamBindingArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamBinding;
import com.pulumi.gcp.sourcerepo.RepositoryIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new RepositoryIamBinding("binding", RepositoryIamBindingArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:sourcerepo:RepositoryIamBinding
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.sourcerepo.RepositoryIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.sourcerepo.RepositoryIamMember("member", {
    project: my_repo.project,
    repository: my_repo.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.sourcerepo.RepositoryIamMember("member",
    project=my_repo["project"],
    repository=my_repo["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.SourceRepo.RepositoryIamMember("member", new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.NewRepositoryIamMember(ctx, "member", &sourcerepo.RepositoryIamMemberArgs{
			Project:    pulumi.Any(my_repo.Project),
			Repository: pulumi.Any(my_repo.Name),
			Role:       pulumi.String("roles/viewer"),
			Member:     pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.RepositoryIamMember;
import com.pulumi.gcp.sourcerepo.RepositoryIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new RepositoryIamMember("member", RepositoryIamMemberArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:sourcerepo:RepositoryIamMember
    properties:
      project: ${["my-repo"].project}
      repository: ${["my-repo"].name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/repos/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Cloud Source Repositories repository IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:sourcerepo/repositoryIamPolicy:RepositoryIamPolicy editor "projects/{{project}}/repos/{{repository}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:sourcerepo/repositoryIamPolicy:RepositoryIamPolicy editor "projects/{{project}}/repos/{{repository}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:sourcerepo/repositoryIamPolicy:RepositoryIamPolicy editor projects/{{project}}/repos/{{repository}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
У
projectB" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
M

repository" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"С
project" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"M

repository" ;Used to find the parent resource to bind the IAM policy to
*ШЦ
D
spannerBackupSchedule)gcp:spanner/backupSchedule:BackupSchedule░БA backup schedule for a Cloud Spanner Database.
This resource is owned by the database it is backing up, and is deleted along with the database.
The actual backups are not though.


To get more information about BackupSchedule, see:

* [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances.databases.backupSchedules)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/spanner/docs/backup)

> **Warning:** This resource creates a Spanner Backup Schedule on a project that already has
a Spanner database.
This resource is owned by the database it is backing up, and is deleted along
with the database. The actual backups are not though.

## Example Usage

### Spanner Backup Schedule Daily Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const main = new gcp.spanner.Instance("main", {
    name: "instance-id",
    config: "regional-europe-west1",
    displayName: "main-instance",
    numNodes: 1,
});
const database = new gcp.spanner.Database("database", {
    instance: main.name,
    name: "database-id",
    versionRetentionPeriod: "3d",
    ddls: [
        "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
        "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
    ],
    deletionProtection: true,
});
const full_backup = new gcp.spanner.BackupSchedule("full-backup", {
    instance: main.name,
    database: database.name,
    name: "backup-schedule-id",
    retentionDuration: "31620000s",
    spec: {
        cronSpec: {
            text: "0 12 * * *",
        },
    },
    fullBackupSpec: {},
});
```
```python
import pulumi
import pulumi_gcp as gcp

main = gcp.spanner.Instance("main",
    name="instance-id",
    config="regional-europe-west1",
    display_name="main-instance",
    num_nodes=1)
database = gcp.spanner.Database("database",
    instance=main.name,
    name="database-id",
    version_retention_period="3d",
    ddls=[
        "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
        "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
    ],
    deletion_protection=True)
full_backup = gcp.spanner.BackupSchedule("full-backup",
    instance=main.name,
    database=database.name,
    name="backup-schedule-id",
    retention_duration="31620000s",
    spec={
        "cron_spec": {
            "text": "0 12 * * *",
        },
    },
    full_backup_spec={})
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var main = new Gcp.Spanner.Instance("main", new()
    {
        Name = "instance-id",
        Config = "regional-europe-west1",
        DisplayName = "main-instance",
        NumNodes = 1,
    });

    var database = new Gcp.Spanner.Database("database", new()
    {
        Instance = main.Name,
        Name = "database-id",
        VersionRetentionPeriod = "3d",
        Ddls = new[]
        {
            "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
            "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
        },
        DeletionProtection = true,
    });

    var full_backup = new Gcp.Spanner.BackupSchedule("full-backup", new()
    {
        Instance = main.Name,
        Database = database.Name,
        Name = "backup-schedule-id",
        RetentionDuration = "31620000s",
        Spec = new Gcp.Spanner.Inputs.BackupScheduleSpecArgs
        {
            CronSpec = new Gcp.Spanner.Inputs.BackupScheduleSpecCronSpecArgs
            {
                Text = "0 12 * * *",
            },
        },
        FullBackupSpec = null,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		main, err := spanner.NewInstance(ctx, "main", &spanner.InstanceArgs{
			Name:        pulumi.String("instance-id"),
			Config:      pulumi.String("regional-europe-west1"),
			DisplayName: pulumi.String("main-instance"),
			NumNodes:    pulumi.Int(1),
		})
		if err != nil {
			return err
		}
		database, err := spanner.NewDatabase(ctx, "database", &spanner.DatabaseArgs{
			Instance:               main.Name,
			Name:                   pulumi.String("database-id"),
			VersionRetentionPeriod: pulumi.String("3d"),
			Ddls: pulumi.StringArray{
				pulumi.String("CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)"),
				pulumi.String("CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)"),
			},
			DeletionProtection: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		_, err = spanner.NewBackupSchedule(ctx, "full-backup", &spanner.BackupScheduleArgs{
			Instance:          main.Name,
			Database:          database.Name,
			Name:              pulumi.String("backup-schedule-id"),
			RetentionDuration: pulumi.String("31620000s"),
			Spec: &spanner.BackupScheduleSpecArgs{
				CronSpec: &spanner.BackupScheduleSpecCronSpecArgs{
					Text: pulumi.String("0 12 * * *"),
				},
			},
			FullBackupSpec: &spanner.BackupScheduleFullBackupSpecArgs{},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.Instance;
import com.pulumi.gcp.spanner.InstanceArgs;
import com.pulumi.gcp.spanner.Database;
import com.pulumi.gcp.spanner.DatabaseArgs;
import com.pulumi.gcp.spanner.BackupSchedule;
import com.pulumi.gcp.spanner.BackupScheduleArgs;
import com.pulumi.gcp.spanner.inputs.BackupScheduleSpecArgs;
import com.pulumi.gcp.spanner.inputs.BackupScheduleSpecCronSpecArgs;
import com.pulumi.gcp.spanner.inputs.BackupScheduleFullBackupSpecArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var main = new Instance("main", InstanceArgs.builder()
            .name("instance-id")
            .config("regional-europe-west1")
            .displayName("main-instance")
            .numNodes(1)
            .build());

        var database = new Database("database", DatabaseArgs.builder()
            .instance(main.name())
            .name("database-id")
            .versionRetentionPeriod("3d")
            .ddls(            
                "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
                "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)")
            .deletionProtection(true)
            .build());

        var full_backup = new BackupSchedule("full-backup", BackupScheduleArgs.builder()
            .instance(main.name())
            .database(database.name())
            .name("backup-schedule-id")
            .retentionDuration("31620000s")
            .spec(BackupScheduleSpecArgs.builder()
                .cronSpec(BackupScheduleSpecCronSpecArgs.builder()
                    .text("0 12 * * *")
                    .build())
                .build())
            .fullBackupSpec()
            .build());

    }
}
```
```yaml
resources:
  main:
    type: gcp:spanner:Instance
    properties:
      name: instance-id
      config: regional-europe-west1
      displayName: main-instance
      numNodes: 1
  database:
    type: gcp:spanner:Database
    properties:
      instance: ${main.name}
      name: database-id
      versionRetentionPeriod: 3d
      ddls:
        - CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)
        - CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)
      deletionProtection: true
  full-backup:
    type: gcp:spanner:BackupSchedule
    properties:
      instance: ${main.name}
      database: ${database.name}
      name: backup-schedule-id
      retentionDuration: 31620000s
      spec:
        cronSpec:
          text: 0 12 * * *
      fullBackupSpec: {}
```
<!--End PulumiCodeChooser -->
### Spanner Backup Schedule Daily Incremental


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const main = new gcp.spanner.Instance("main", {
    name: "instance-id",
    config: "regional-europe-west1",
    displayName: "main-instance",
    numNodes: 1,
    edition: "ENTERPRISE",
});
const database = new gcp.spanner.Database("database", {
    instance: main.name,
    name: "database-id",
    versionRetentionPeriod: "3d",
    ddls: [
        "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
        "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
    ],
    deletionProtection: true,
});
const incremental_backup = new gcp.spanner.BackupSchedule("incremental-backup", {
    instance: main.name,
    database: database.name,
    name: "backup-schedule-id",
    retentionDuration: "31620000s",
    spec: {
        cronSpec: {
            text: "0 12 * * *",
        },
    },
    incrementalBackupSpec: {},
});
```
```python
import pulumi
import pulumi_gcp as gcp

main = gcp.spanner.Instance("main",
    name="instance-id",
    config="regional-europe-west1",
    display_name="main-instance",
    num_nodes=1,
    edition="ENTERPRISE")
database = gcp.spanner.Database("database",
    instance=main.name,
    name="database-id",
    version_retention_period="3d",
    ddls=[
        "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
        "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
    ],
    deletion_protection=True)
incremental_backup = gcp.spanner.BackupSchedule("incremental-backup",
    instance=main.name,
    database=database.name,
    name="backup-schedule-id",
    retention_duration="31620000s",
    spec={
        "cron_spec": {
            "text": "0 12 * * *",
        },
    },
    incremental_backup_spec={})
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var main = new Gcp.Spanner.Instance("main", new()
    {
        Name = "instance-id",
        Config = "regional-europe-west1",
        DisplayName = "main-instance",
        NumNodes = 1,
        Edition = "ENTERPRISE",
    });

    var database = new Gcp.Spanner.Database("database", new()
    {
        Instance = main.Name,
        Name = "database-id",
        VersionRetentionPeriod = "3d",
        Ddls = new[]
        {
            "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
            "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
        },
        DeletionProtection = true,
    });

    var incremental_backup = new Gcp.Spanner.BackupSchedule("incremental-backup", new()
    {
        Instance = main.Name,
        Database = database.Name,
        Name = "backup-schedule-id",
        RetentionDuration = "31620000s",
        Spec = new Gcp.Spanner.Inputs.BackupScheduleSpecArgs
        {
            CronSpec = new Gcp.Spanner.Inputs.BackupScheduleSpecCronSpecArgs
            {
                Text = "0 12 * * *",
            },
        },
        IncrementalBackupSpec = null,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		main, err := spanner.NewInstance(ctx, "main", &spanner.InstanceArgs{
			Name:        pulumi.String("instance-id"),
			Config:      pulumi.String("regional-europe-west1"),
			DisplayName: pulumi.String("main-instance"),
			NumNodes:    pulumi.Int(1),
			Edition:     pulumi.String("ENTERPRISE"),
		})
		if err != nil {
			return err
		}
		database, err := spanner.NewDatabase(ctx, "database", &spanner.DatabaseArgs{
			Instance:               main.Name,
			Name:                   pulumi.String("database-id"),
			VersionRetentionPeriod: pulumi.String("3d"),
			Ddls: pulumi.StringArray{
				pulumi.String("CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)"),
				pulumi.String("CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)"),
			},
			DeletionProtection: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		_, err = spanner.NewBackupSchedule(ctx, "incremental-backup", &spanner.BackupScheduleArgs{
			Instance:          main.Name,
			Database:          database.Name,
			Name:              pulumi.String("backup-schedule-id"),
			RetentionDuration: pulumi.String("31620000s"),
			Spec: &spanner.BackupScheduleSpecArgs{
				CronSpec: &spanner.BackupScheduleSpecCronSpecArgs{
					Text: pulumi.String("0 12 * * *"),
				},
			},
			IncrementalBackupSpec: &spanner.BackupScheduleIncrementalBackupSpecArgs{},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.Instance;
import com.pulumi.gcp.spanner.InstanceArgs;
import com.pulumi.gcp.spanner.Database;
import com.pulumi.gcp.spanner.DatabaseArgs;
import com.pulumi.gcp.spanner.BackupSchedule;
import com.pulumi.gcp.spanner.BackupScheduleArgs;
import com.pulumi.gcp.spanner.inputs.BackupScheduleSpecArgs;
import com.pulumi.gcp.spanner.inputs.BackupScheduleSpecCronSpecArgs;
import com.pulumi.gcp.spanner.inputs.BackupScheduleIncrementalBackupSpecArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var main = new Instance("main", InstanceArgs.builder()
            .name("instance-id")
            .config("regional-europe-west1")
            .displayName("main-instance")
            .numNodes(1)
            .edition("ENTERPRISE")
            .build());

        var database = new Database("database", DatabaseArgs.builder()
            .instance(main.name())
            .name("database-id")
            .versionRetentionPeriod("3d")
            .ddls(            
                "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
                "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)")
            .deletionProtection(true)
            .build());

        var incremental_backup = new BackupSchedule("incremental-backup", BackupScheduleArgs.builder()
            .instance(main.name())
            .database(database.name())
            .name("backup-schedule-id")
            .retentionDuration("31620000s")
            .spec(BackupScheduleSpecArgs.builder()
                .cronSpec(BackupScheduleSpecCronSpecArgs.builder()
                    .text("0 12 * * *")
                    .build())
                .build())
            .incrementalBackupSpec()
            .build());

    }
}
```
```yaml
resources:
  main:
    type: gcp:spanner:Instance
    properties:
      name: instance-id
      config: regional-europe-west1
      displayName: main-instance
      numNodes: 1
      edition: ENTERPRISE
  database:
    type: gcp:spanner:Database
    properties:
      instance: ${main.name}
      name: database-id
      versionRetentionPeriod: 3d
      ddls:
        - CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)
        - CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)
      deletionProtection: true
  incremental-backup:
    type: gcp:spanner:BackupSchedule
    properties:
      instance: ${main.name}
      database: ${database.name}
      name: backup-schedule-id
      retentionDuration: 31620000s
      spec:
        cronSpec:
          text: 0 12 * * *
      incrementalBackupSpec: {}
```
<!--End PulumiCodeChooser -->

## Import

BackupSchedule can be imported using any of these accepted formats:

* `projects/{{project}}/instances/{{instance}}/databases/{{database}}/backupSchedules/{{name}}`

* `{{project}}/{{instance}}/{{database}}/{{name}}`

* `{{instance}}/{{database}}/{{name}}`

When using the `pulumi import` command, BackupSchedule can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:spanner/backupSchedule:BackupSchedule default projects/{{project}}/instances/{{instance}}/databases/{{database}}/backupSchedules/{{name}}
```

```sh
$ pulumi import gcp:spanner/backupSchedule:BackupSchedule default {{project}}/{{instance}}/{{database}}/{{name}}
```

```sh
$ pulumi import gcp:spanner/backupSchedule:BackupSchedule default {{instance}}/{{database}}/{{name}}
```

G
database" 7The database to create the backup schedule on.


- - -
▒
fullBackupSpectBr:p
n
spannerBackupScheduleFullBackupSpecEgcp:spanner/BackupScheduleFullBackupSpec:BackupScheduleFullBackupSpec)The schedule creates only full backups..
╪
incrementalBackupSpecМBЙ:Ж
Г
spanner#BackupScheduleIncrementalBackupSpecSgcp:spanner/BackupScheduleIncrementalBackupSpec:BackupScheduleIncrementalBackupSpec0The schedule creates incremental backup chains.
8
instance" (The instance to create the database on.
к
nameB" ЫA unique identifier for the backup schedule, which cannot be changed after
the backup schedule is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
б
retentionDuration" ЗAt what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
A duration in seconds with up to nine fractional digits, ending with 's'. Example: '3.5s'.
You can set this to a value up to 366 days.
о
specVBT:R
P
spannerBackupScheduleSpec1gcp:spanner/BackupScheduleSpec:BackupScheduleSpecNDefines specifications of the backup schedule.
Structure is documented below.
"G
database" 7The database to create the backup schedule on.


- - -
"▒
fullBackupSpectBr:p
n
spannerBackupScheduleFullBackupSpecEgcp:spanner/BackupScheduleFullBackupSpec:BackupScheduleFullBackupSpec)The schedule creates only full backups..
"╪
incrementalBackupSpecМBЙ:Ж
Г
spanner#BackupScheduleIncrementalBackupSpecSgcp:spanner/BackupScheduleIncrementalBackupSpec:BackupScheduleIncrementalBackupSpec0The schedule creates incremental backup chains.
"8
instance" (The instance to create the database on.
"и
name" ЫA unique identifier for the backup schedule, which cannot be changed after
the backup schedule is created. Values are of the form [a-z][-a-z0-9]*[a-z0-9].
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"б
retentionDuration" ЗAt what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
A duration in seconds with up to nine fractional digits, ending with 's'. Example: '3.5s'.
You can set this to a value up to 366 days.
"о
specVBT:R
P
spannerBackupScheduleSpec1gcp:spanner/BackupScheduleSpec:BackupScheduleSpecNDefines specifications of the backup schedule.
Structure is documented below.
*юI
2
spannerDatabasegcp:spanner/database:DatabaseВ/A Cloud Spanner Database which is hosted on a Spanner instance.


To get more information about Database, see:

* [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances.databases)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/spanner/)

> **Warning:** On newer versions of the provider, you must explicitly set `deletion_protection=false`
(and run `pulumi up` to write the field to state) in order to destroy an instance.
It is recommended to not set this field (or set it to true) until you're ready to destroy.
On older versions, it is strongly recommended to set `lifecycle { prevent_destroy = true }`
on databases in order to prevent accidental data loss.

## Example Usage

### Spanner Database Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const main = new gcp.spanner.Instance("main", {
    config: "regional-europe-west1",
    displayName: "main-instance",
    numNodes: 1,
});
const database = new gcp.spanner.Database("database", {
    instance: main.name,
    name: "my-database",
    versionRetentionPeriod: "3d",
    ddls: [
        "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
        "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
    ],
    deletionProtection: false,
});
```
```python
import pulumi
import pulumi_gcp as gcp

main = gcp.spanner.Instance("main",
    config="regional-europe-west1",
    display_name="main-instance",
    num_nodes=1)
database = gcp.spanner.Database("database",
    instance=main.name,
    name="my-database",
    version_retention_period="3d",
    ddls=[
        "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
        "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
    ],
    deletion_protection=False)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var main = new Gcp.Spanner.Instance("main", new()
    {
        Config = "regional-europe-west1",
        DisplayName = "main-instance",
        NumNodes = 1,
    });

    var database = new Gcp.Spanner.Database("database", new()
    {
        Instance = main.Name,
        Name = "my-database",
        VersionRetentionPeriod = "3d",
        Ddls = new[]
        {
            "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
            "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)",
        },
        DeletionProtection = false,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		main, err := spanner.NewInstance(ctx, "main", &spanner.InstanceArgs{
			Config:      pulumi.String("regional-europe-west1"),
			DisplayName: pulumi.String("main-instance"),
			NumNodes:    pulumi.Int(1),
		})
		if err != nil {
			return err
		}
		_, err = spanner.NewDatabase(ctx, "database", &spanner.DatabaseArgs{
			Instance:               main.Name,
			Name:                   pulumi.String("my-database"),
			VersionRetentionPeriod: pulumi.String("3d"),
			Ddls: pulumi.StringArray{
				pulumi.String("CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)"),
				pulumi.String("CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)"),
			},
			DeletionProtection: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.Instance;
import com.pulumi.gcp.spanner.InstanceArgs;
import com.pulumi.gcp.spanner.Database;
import com.pulumi.gcp.spanner.DatabaseArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var main = new Instance("main", InstanceArgs.builder()
            .config("regional-europe-west1")
            .displayName("main-instance")
            .numNodes(1)
            .build());

        var database = new Database("database", DatabaseArgs.builder()
            .instance(main.name())
            .name("my-database")
            .versionRetentionPeriod("3d")
            .ddls(            
                "CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)",
                "CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)")
            .deletionProtection(false)
            .build());

    }
}
```
```yaml
resources:
  main:
    type: gcp:spanner:Instance
    properties:
      config: regional-europe-west1
      displayName: main-instance
      numNodes: 1
  database:
    type: gcp:spanner:Database
    properties:
      instance: ${main.name}
      name: my-database
      versionRetentionPeriod: 3d
      ddls:
        - CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)
        - CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)
      deletionProtection: false
```
<!--End PulumiCodeChooser -->

## Import

Database can be imported using any of these accepted formats:

* `projects/{{project}}/instances/{{instance}}/databases/{{name}}`

* `instances/{{instance}}/databases/{{name}}`

* `{{project}}/{{instance}}/{{name}}`

* `{{instance}}/{{name}}`

When using the `pulumi import` command, Database can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:spanner/database:Database default projects/{{project}}/instances/{{instance}}/databases/{{name}}
```

```sh
$ pulumi import gcp:spanner/database:Database default instances/{{instance}}/databases/{{name}}
```

```sh
$ pulumi import gcp:spanner/database:Database default {{project}}/{{instance}}/{{name}}
```

```sh
$ pulumi import gcp:spanner/database:Database default {{instance}}/{{name}}
```

║
databaseDialectB" аThe dialect of the Cloud Spanner Database.
If it is not provided, "GOOGLE_STANDARD_SQL" will be used.
Possible values are: `GOOGLE_STANDARD_SQL`, `POSTGRESQL`.
Х
ddlsB*" ДAn optional list of DDL statements to run inside the newly created
database. Statements can create tables, indexes, etc. These statements
execute atomically with the creation of the database: if there is an
error in any statement, the database is not created.
╔
deletionProtectionB
 мWhether or not to allow the provider to destroy the instance. Unless this field is set to false
in state, a `destroy` or `update` that would delete the instance will fail.

enableDropProtectionB
 ╟
encryptionConfighBf:d
b
spannerDatabaseEncryptionConfig=gcp:spanner/DatabaseEncryptionConfig:DatabaseEncryptionConfigIEncryption configuration for the database
Structure is documented below.
@
instance" 0The instance to create the database on.


- - -
Я
nameB" РA unique identifier for the database, which cannot be changed after the
instance is created. Values are of the form `[a-z][-_a-z0-9]*[a-z0-9]`.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
У
versionRetentionPeriodB" ЄThe retention period for the database. The retention period must be between 1 hour
and 7 days, and can be specified in days, hours, minutes, or seconds. For example,
the values 1d, 24h, 1440m, and 86400s are equivalent. Default value is 1h.
If this property is used, you must avoid adding new DDL statements to `ddl` that
update the database's version_retention_period.
"╕
databaseDialect" аThe dialect of the Cloud Spanner Database.
If it is not provided, "GOOGLE_STANDARD_SQL" will be used.
Possible values are: `GOOGLE_STANDARD_SQL`, `POSTGRESQL`.
"Х
ddlsB*" ДAn optional list of DDL statements to run inside the newly created
database. Statements can create tables, indexes, etc. These statements
execute atomically with the creation of the database: if there is an
error in any statement, the database is not created.
"╔
deletionProtectionB
 мWhether or not to allow the provider to destroy the instance. Unless this field is set to false
in state, a `destroy` or `update` that would delete the instance will fail.
"
enableDropProtectionB
 "╟
encryptionConfighBf:d
b
spannerDatabaseEncryptionConfig=gcp:spanner/DatabaseEncryptionConfig:DatabaseEncryptionConfigIEncryption configuration for the database
Structure is documented below.
"@
instance" 0The instance to create the database on.


- - -
"Э
name" РA unique identifier for the database, which cannot be changed after the
instance is created. Values are of the form `[a-z][-_a-z0-9]*[a-z0-9]`.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
";
state" .An explanation of the status of the database.
"С
versionRetentionPeriod" ЄThe retention period for the database. The retention period must be between 1 hour
and 7 days, and can be specified in days, hours, minutes, or seconds. For example,
the values 1d, 24h, 1440m, and 86400s are equivalent. Default value is 1h.
If this property is used, you must avoid adding new DDL statements to `ddl` that
update the database's version_retention_period.
*А╒
P
spannerDatabaseIAMBinding1gcp:spanner/databaseIAMBinding:DatabaseIAMBindingТ║Three different resources help you manage your IAM policy for a Spanner database. Each of these resources serves a different use case:

* `gcp.spanner.DatabaseIAMPolicy`: Authoritative. Sets the IAM policy for the database and replaces any existing policy already attached.

> **Warning:** It's entirely possibly to lock yourself out of your database using `gcp.spanner.DatabaseIAMPolicy`. Any permissions granted by default will be removed unless you include them in your config.

* `gcp.spanner.DatabaseIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the database are preserved.
* `gcp.spanner.DatabaseIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the database are preserved.

> **Note:** `gcp.spanner.DatabaseIAMPolicy` **cannot** be used in conjunction with `gcp.spanner.DatabaseIAMBinding` and `gcp.spanner.DatabaseIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.spanner.DatabaseIAMBinding` resources **can be** used in conjunction with `gcp.spanner.DatabaseIAMMember` resources **only if** they do not grant privilege to the same role.

## gcp.spanner.DatabaseIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/editor",
        members: ["user:jane@example.com"],
    }],
});
const database = new gcp.spanner.DatabaseIAMPolicy("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/editor",
    "members": ["user:jane@example.com"],
}])
database = gcp.spanner.DatabaseIAMPolicy("database",
    instance="your-instance-name",
    database="your-database-name",
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/editor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var database = new Gcp.Spanner.DatabaseIAMPolicy("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/editor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = spanner.NewDatabaseIAMPolicy(ctx, "database", &spanner.DatabaseIAMPolicyArgs{
			Instance:   pulumi.String("your-instance-name"),
			Database:   pulumi.String("your-database-name"),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.spanner.DatabaseIAMPolicy;
import com.pulumi.gcp.spanner.DatabaseIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/editor")
                .members("user:jane@example.com")
                .build())
            .build());

        var database = new DatabaseIAMPolicy("database", DatabaseIAMPolicyArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMPolicy
    properties:
      instance: your-instance-name
      database: your-database-name
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/editor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/editor",
        members: ["user:jane@example.com"],
        condition: {
            title: "My Role",
            description: "Grant permissions on my_role",
            expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    }],
});
const database = new gcp.spanner.DatabaseIAMPolicy("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/editor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
}])
database = gcp.spanner.DatabaseIAMPolicy("database",
    instance="your-instance-name",
    database="your-database-name",
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/editor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "My Role",
                    Description = "Grant permissions on my_role",
                    Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
                },
            },
        },
    });

    var database = new Gcp.Spanner.DatabaseIAMPolicy("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/editor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "My Role",
						Description: pulumi.StringRef("Grant permissions on my_role"),
						Expression:  "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = spanner.NewDatabaseIAMPolicy(ctx, "database", &spanner.DatabaseIAMPolicyArgs{
			Instance:   pulumi.String("your-instance-name"),
			Database:   pulumi.String("your-database-name"),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.spanner.DatabaseIAMPolicy;
import com.pulumi.gcp.spanner.DatabaseIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/editor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("My Role")
                    .description("Grant permissions on my_role")
                    .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                    .build())
                .build())
            .build());

        var database = new DatabaseIAMPolicy("database", DatabaseIAMPolicyArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMPolicy
    properties:
      instance: your-instance-name
      database: your-database-name
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/editor
            members:
              - user:jane@example.com
            condition:
              title: My Role
              description: Grant permissions on my_role
              expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"],
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMBindingConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &spanner.DatabaseIAMBindingConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .condition(DatabaseIAMBindingConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com",
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMMemberConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &spanner.DatabaseIAMMemberConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .condition(DatabaseIAMMemberConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"],
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMBindingConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &spanner.DatabaseIAMBindingConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .condition(DatabaseIAMBindingConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com",
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMMemberConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &spanner.DatabaseIAMMemberConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .condition(DatabaseIAMMemberConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## Import

### Importing IAM policies

IAM policy imports use the identifier of the Spanner Database resource in question. For example:

* `{{project}}/{{instance}}/{{database}}`

An `import` block (Terraform v1.5.0 and later) can be used to import IAM policies:

tf

import {

  id = {{project}}/{{instance}}/{{database}}

  to = google_spanner_database_iam_policy.default

}

The `pulumi import` command can also be used:

```sh
$ pulumi import gcp:spanner/databaseIAMBinding:DatabaseIAMBinding default {{project}}/{{instance}}/{{database}}
```

■
	conditionqBo:m
k
spannerDatabaseIAMBindingConditionCgcp:spanner/DatabaseIAMBindingCondition:DatabaseIAMBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
2
database" "The name of the Spanner database.
J
instance" :The name of the Spanner instance the database belongs to.
Т
members*" АIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
╫
role" ╩The role that should be applied. Only one
`gcp.spanner.DatabaseIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"■
	conditionqBo:m
k
spannerDatabaseIAMBindingConditionCgcp:spanner/DatabaseIAMBindingCondition:DatabaseIAMBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"2
database" "The name of the Spanner database.
">
etag" 2(Computed) The etag of the database's IAM policy.
"J
instance" :The name of the Spanner instance the database belongs to.
"Т
members*" АIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"╫
role" ╩The role that should be applied. Only one
`gcp.spanner.DatabaseIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*я╘
M
spannerDatabaseIAMMember/gcp:spanner/databaseIAMMember:DatabaseIAMMemberР║Three different resources help you manage your IAM policy for a Spanner database. Each of these resources serves a different use case:

* `gcp.spanner.DatabaseIAMPolicy`: Authoritative. Sets the IAM policy for the database and replaces any existing policy already attached.

> **Warning:** It's entirely possibly to lock yourself out of your database using `gcp.spanner.DatabaseIAMPolicy`. Any permissions granted by default will be removed unless you include them in your config.

* `gcp.spanner.DatabaseIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the database are preserved.
* `gcp.spanner.DatabaseIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the database are preserved.

> **Note:** `gcp.spanner.DatabaseIAMPolicy` **cannot** be used in conjunction with `gcp.spanner.DatabaseIAMBinding` and `gcp.spanner.DatabaseIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.spanner.DatabaseIAMBinding` resources **can be** used in conjunction with `gcp.spanner.DatabaseIAMMember` resources **only if** they do not grant privilege to the same role.

## gcp.spanner.DatabaseIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/editor",
        members: ["user:jane@example.com"],
    }],
});
const database = new gcp.spanner.DatabaseIAMPolicy("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/editor",
    "members": ["user:jane@example.com"],
}])
database = gcp.spanner.DatabaseIAMPolicy("database",
    instance="your-instance-name",
    database="your-database-name",
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/editor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var database = new Gcp.Spanner.DatabaseIAMPolicy("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/editor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = spanner.NewDatabaseIAMPolicy(ctx, "database", &spanner.DatabaseIAMPolicyArgs{
			Instance:   pulumi.String("your-instance-name"),
			Database:   pulumi.String("your-database-name"),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.spanner.DatabaseIAMPolicy;
import com.pulumi.gcp.spanner.DatabaseIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/editor")
                .members("user:jane@example.com")
                .build())
            .build());

        var database = new DatabaseIAMPolicy("database", DatabaseIAMPolicyArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMPolicy
    properties:
      instance: your-instance-name
      database: your-database-name
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/editor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/editor",
        members: ["user:jane@example.com"],
        condition: {
            title: "My Role",
            description: "Grant permissions on my_role",
            expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    }],
});
const database = new gcp.spanner.DatabaseIAMPolicy("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/editor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
}])
database = gcp.spanner.DatabaseIAMPolicy("database",
    instance="your-instance-name",
    database="your-database-name",
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/editor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "My Role",
                    Description = "Grant permissions on my_role",
                    Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
                },
            },
        },
    });

    var database = new Gcp.Spanner.DatabaseIAMPolicy("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/editor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "My Role",
						Description: pulumi.StringRef("Grant permissions on my_role"),
						Expression:  "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = spanner.NewDatabaseIAMPolicy(ctx, "database", &spanner.DatabaseIAMPolicyArgs{
			Instance:   pulumi.String("your-instance-name"),
			Database:   pulumi.String("your-database-name"),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.spanner.DatabaseIAMPolicy;
import com.pulumi.gcp.spanner.DatabaseIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/editor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("My Role")
                    .description("Grant permissions on my_role")
                    .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                    .build())
                .build())
            .build());

        var database = new DatabaseIAMPolicy("database", DatabaseIAMPolicyArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMPolicy
    properties:
      instance: your-instance-name
      database: your-database-name
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/editor
            members:
              - user:jane@example.com
            condition:
              title: My Role
              description: Grant permissions on my_role
              expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"],
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMBindingConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &spanner.DatabaseIAMBindingConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .condition(DatabaseIAMBindingConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com",
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMMemberConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &spanner.DatabaseIAMMemberConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .condition(DatabaseIAMMemberConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"],
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMBindingConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &spanner.DatabaseIAMBindingConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .condition(DatabaseIAMBindingConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com",
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMMemberConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &spanner.DatabaseIAMMemberConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .condition(DatabaseIAMMemberConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## Import

### Importing IAM policies

IAM policy imports use the identifier of the Spanner Database resource in question. For example:

* `{{project}}/{{instance}}/{{database}}`

An `import` block (Terraform v1.5.0 and later) can be used to import IAM policies:

tf

import {

  id = {{project}}/{{instance}}/{{database}}

  to = google_spanner_database_iam_policy.default

}

The `pulumi import` command can also be used:

```sh
$ pulumi import gcp:spanner/databaseIAMMember:DatabaseIAMMember default {{project}}/{{instance}}/{{database}}
```

√
	conditionnBl:j
h
spannerDatabaseIAMMemberConditionAgcp:spanner/DatabaseIAMMemberCondition:DatabaseIAMMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
2
database" "The name of the Spanner database.
J
instance" :The name of the Spanner instance the database belongs to.
П
member" АIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
╫
role" ╩The role that should be applied. Only one
`gcp.spanner.DatabaseIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"√
	conditionnBl:j
h
spannerDatabaseIAMMemberConditionAgcp:spanner/DatabaseIAMMemberCondition:DatabaseIAMMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"2
database" "The name of the Spanner database.
">
etag" 2(Computed) The etag of the database's IAM policy.
"J
instance" :The name of the Spanner instance the database belongs to.
"П
member" АIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"╫
role" ╩The role that should be applied. Only one
`gcp.spanner.DatabaseIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*▌└
M
spannerDatabaseIAMPolicy/gcp:spanner/databaseIAMPolicy:DatabaseIAMPolicyР║Three different resources help you manage your IAM policy for a Spanner database. Each of these resources serves a different use case:

* `gcp.spanner.DatabaseIAMPolicy`: Authoritative. Sets the IAM policy for the database and replaces any existing policy already attached.

> **Warning:** It's entirely possibly to lock yourself out of your database using `gcp.spanner.DatabaseIAMPolicy`. Any permissions granted by default will be removed unless you include them in your config.

* `gcp.spanner.DatabaseIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the database are preserved.
* `gcp.spanner.DatabaseIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the database are preserved.

> **Note:** `gcp.spanner.DatabaseIAMPolicy` **cannot** be used in conjunction with `gcp.spanner.DatabaseIAMBinding` and `gcp.spanner.DatabaseIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.spanner.DatabaseIAMBinding` resources **can be** used in conjunction with `gcp.spanner.DatabaseIAMMember` resources **only if** they do not grant privilege to the same role.

## gcp.spanner.DatabaseIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/editor",
        members: ["user:jane@example.com"],
    }],
});
const database = new gcp.spanner.DatabaseIAMPolicy("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/editor",
    "members": ["user:jane@example.com"],
}])
database = gcp.spanner.DatabaseIAMPolicy("database",
    instance="your-instance-name",
    database="your-database-name",
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/editor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var database = new Gcp.Spanner.DatabaseIAMPolicy("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/editor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = spanner.NewDatabaseIAMPolicy(ctx, "database", &spanner.DatabaseIAMPolicyArgs{
			Instance:   pulumi.String("your-instance-name"),
			Database:   pulumi.String("your-database-name"),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.spanner.DatabaseIAMPolicy;
import com.pulumi.gcp.spanner.DatabaseIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/editor")
                .members("user:jane@example.com")
                .build())
            .build());

        var database = new DatabaseIAMPolicy("database", DatabaseIAMPolicyArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMPolicy
    properties:
      instance: your-instance-name
      database: your-database-name
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/editor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/editor",
        members: ["user:jane@example.com"],
        condition: {
            title: "My Role",
            description: "Grant permissions on my_role",
            expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    }],
});
const database = new gcp.spanner.DatabaseIAMPolicy("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/editor",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
}])
database = gcp.spanner.DatabaseIAMPolicy("database",
    instance="your-instance-name",
    database="your-database-name",
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/editor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "My Role",
                    Description = "Grant permissions on my_role",
                    Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
                },
            },
        },
    });

    var database = new Gcp.Spanner.DatabaseIAMPolicy("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/editor",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "My Role",
						Description: pulumi.StringRef("Grant permissions on my_role"),
						Expression:  "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = spanner.NewDatabaseIAMPolicy(ctx, "database", &spanner.DatabaseIAMPolicyArgs{
			Instance:   pulumi.String("your-instance-name"),
			Database:   pulumi.String("your-database-name"),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.spanner.DatabaseIAMPolicy;
import com.pulumi.gcp.spanner.DatabaseIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/editor")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("My Role")
                    .description("Grant permissions on my_role")
                    .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                    .build())
                .build())
            .build());

        var database = new DatabaseIAMPolicy("database", DatabaseIAMPolicyArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMPolicy
    properties:
      instance: your-instance-name
      database: your-database-name
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/editor
            members:
              - user:jane@example.com
            condition:
              title: My Role
              description: Grant permissions on my_role
              expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"],
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMBindingConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &spanner.DatabaseIAMBindingConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .condition(DatabaseIAMBindingConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com",
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMMemberConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &spanner.DatabaseIAMMemberConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .condition(DatabaseIAMMemberConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMBinding("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    members: ["user:jane@example.com"],
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMBinding("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    members=["user:jane@example.com"],
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMBinding("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMBindingConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMBinding(ctx, "database", &spanner.DatabaseIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &spanner.DatabaseIAMBindingConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMBinding;
import com.pulumi.gcp.spanner.DatabaseIAMBindingArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMBinding("database", DatabaseIAMBindingArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .members("user:jane@example.com")
            .condition(DatabaseIAMBindingConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMBinding
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      members:
        - user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## gcp.spanner.DatabaseIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const database = new gcp.spanner.DatabaseIAMMember("database", {
    instance: "your-instance-name",
    database: "your-database-name",
    role: "roles/compute.networkUser",
    member: "user:jane@example.com",
    condition: {
        title: "My Role",
        description: "Grant permissions on my_role",
        expression: "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

database = gcp.spanner.DatabaseIAMMember("database",
    instance="your-instance-name",
    database="your-database-name",
    role="roles/compute.networkUser",
    member="user:jane@example.com",
    condition={
        "title": "My Role",
        "description": "Grant permissions on my_role",
        "expression": "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var database = new Gcp.Spanner.DatabaseIAMMember("database", new()
    {
        Instance = "your-instance-name",
        Database = "your-database-name",
        Role = "roles/compute.networkUser",
        Member = "user:jane@example.com",
        Condition = new Gcp.Spanner.Inputs.DatabaseIAMMemberConditionArgs
        {
            Title = "My Role",
            Description = "Grant permissions on my_role",
            Expression = "(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewDatabaseIAMMember(ctx, "database", &spanner.DatabaseIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Database: pulumi.String("your-database-name"),
			Role:     pulumi.String("roles/compute.networkUser"),
			Member:   pulumi.String("user:jane@example.com"),
			Condition: &spanner.DatabaseIAMMemberConditionArgs{
				Title:       pulumi.String("My Role"),
				Description: pulumi.String("Grant permissions on my_role"),
				Expression:  pulumi.String("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.DatabaseIAMMember;
import com.pulumi.gcp.spanner.DatabaseIAMMemberArgs;
import com.pulumi.gcp.spanner.inputs.DatabaseIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var database = new DatabaseIAMMember("database", DatabaseIAMMemberArgs.builder()
            .instance("your-instance-name")
            .database("your-database-name")
            .role("roles/compute.networkUser")
            .member("user:jane@example.com")
            .condition(DatabaseIAMMemberConditionArgs.builder()
                .title("My Role")
                .description("Grant permissions on my_role")
                .expression("(resource.type == \"spanner.googleapis.com/DatabaseRole\" && (resource.name.endsWith(\"/myrole\")))")
                .build())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:spanner:DatabaseIAMMember
    properties:
      instance: your-instance-name
      database: your-database-name
      role: roles/compute.networkUser
      member: user:jane@example.com
      condition:
        title: My Role
        description: Grant permissions on my_role
        expression: (resource.type == "spanner.googleapis.com/DatabaseRole" && (resource.name.endsWith("/myrole")))
```
<!--End PulumiCodeChooser -->

## Import

### Importing IAM policies

IAM policy imports use the identifier of the Spanner Database resource in question. For example:

* `{{project}}/{{instance}}/{{database}}`

An `import` block (Terraform v1.5.0 and later) can be used to import IAM policies:

tf

import {

  id = {{project}}/{{instance}}/{{database}}

  to = google_spanner_database_iam_policy.default

}

The `pulumi import` command can also be used:

```sh
$ pulumi import gcp:spanner/databaseIAMPolicy:DatabaseIAMPolicy default {{project}}/{{instance}}/{{database}}
```

2
database" "The name of the Spanner database.
J
instance" :The name of the Spanner instance the database belongs to.
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"2
database" "The name of the Spanner database.
">
etag" 2(Computed) The etag of the database's IAM policy.
"J
instance" :The name of the Spanner instance the database belongs to.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
*ЎШ
2
spannerInstancegcp:spanner/instance:Instance▀mAn isolated set of Cloud Spanner resources on which databases can be
hosted.


To get more information about Instance, see:

* [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/spanner/)

## Example Usage

### Spanner Instance Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.spanner.Instance("example", {
    config: "regional-us-central1",
    displayName: "Test Spanner Instance",
    numNodes: 2,
    edition: "STANDARD",
    defaultBackupScheduleType: "AUTOMATIC",
    labels: {
        foo: "bar",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.spanner.Instance("example",
    config="regional-us-central1",
    display_name="Test Spanner Instance",
    num_nodes=2,
    edition="STANDARD",
    default_backup_schedule_type="AUTOMATIC",
    labels={
        "foo": "bar",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.Spanner.Instance("example", new()
    {
        Config = "regional-us-central1",
        DisplayName = "Test Spanner Instance",
        NumNodes = 2,
        Edition = "STANDARD",
        DefaultBackupScheduleType = "AUTOMATIC",
        Labels = 
        {
            { "foo", "bar" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstance(ctx, "example", &spanner.InstanceArgs{
			Config:                    pulumi.String("regional-us-central1"),
			DisplayName:               pulumi.String("Test Spanner Instance"),
			NumNodes:                  pulumi.Int(2),
			Edition:                   pulumi.String("STANDARD"),
			DefaultBackupScheduleType: pulumi.String("AUTOMATIC"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.Instance;
import com.pulumi.gcp.spanner.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new Instance("example", InstanceArgs.builder()
            .config("regional-us-central1")
            .displayName("Test Spanner Instance")
            .numNodes(2)
            .edition("STANDARD")
            .defaultBackupScheduleType("AUTOMATIC")
            .labels(Map.of("foo", "bar"))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:spanner:Instance
    properties:
      config: regional-us-central1
      displayName: Test Spanner Instance
      numNodes: 2
      edition: STANDARD
      defaultBackupScheduleType: AUTOMATIC
      labels:
        foo: bar
```
<!--End PulumiCodeChooser -->
### Spanner Instance Processing Units


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.spanner.Instance("example", {
    config: "regional-us-central1",
    displayName: "Test Spanner Instance",
    processingUnits: 200,
    labels: {
        foo: "bar",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.spanner.Instance("example",
    config="regional-us-central1",
    display_name="Test Spanner Instance",
    processing_units=200,
    labels={
        "foo": "bar",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.Spanner.Instance("example", new()
    {
        Config = "regional-us-central1",
        DisplayName = "Test Spanner Instance",
        ProcessingUnits = 200,
        Labels = 
        {
            { "foo", "bar" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstance(ctx, "example", &spanner.InstanceArgs{
			Config:          pulumi.String("regional-us-central1"),
			DisplayName:     pulumi.String("Test Spanner Instance"),
			ProcessingUnits: pulumi.Int(200),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.Instance;
import com.pulumi.gcp.spanner.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new Instance("example", InstanceArgs.builder()
            .config("regional-us-central1")
            .displayName("Test Spanner Instance")
            .processingUnits(200)
            .labels(Map.of("foo", "bar"))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:spanner:Instance
    properties:
      config: regional-us-central1
      displayName: Test Spanner Instance
      processingUnits: 200
      labels:
        foo: bar
```
<!--End PulumiCodeChooser -->
### Spanner Instance With Autoscaling


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.spanner.Instance("example", {
    config: "regional-us-central1",
    displayName: "Test Spanner Instance",
    autoscalingConfig: {
        autoscalingLimits: {
            maxProcessingUnits: 3000,
            minProcessingUnits: 2000,
        },
        autoscalingTargets: {
            highPriorityCpuUtilizationPercent: 75,
            storageUtilizationPercent: 90,
        },
    },
    labels: {
        foo: "bar",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.spanner.Instance("example",
    config="regional-us-central1",
    display_name="Test Spanner Instance",
    autoscaling_config={
        "autoscaling_limits": {
            "max_processing_units": 3000,
            "min_processing_units": 2000,
        },
        "autoscaling_targets": {
            "high_priority_cpu_utilization_percent": 75,
            "storage_utilization_percent": 90,
        },
    },
    labels={
        "foo": "bar",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.Spanner.Instance("example", new()
    {
        Config = "regional-us-central1",
        DisplayName = "Test Spanner Instance",
        AutoscalingConfig = new Gcp.Spanner.Inputs.InstanceAutoscalingConfigArgs
        {
            AutoscalingLimits = new Gcp.Spanner.Inputs.InstanceAutoscalingConfigAutoscalingLimitsArgs
            {
                MaxProcessingUnits = 3000,
                MinProcessingUnits = 2000,
            },
            AutoscalingTargets = new Gcp.Spanner.Inputs.InstanceAutoscalingConfigAutoscalingTargetsArgs
            {
                HighPriorityCpuUtilizationPercent = 75,
                StorageUtilizationPercent = 90,
            },
        },
        Labels = 
        {
            { "foo", "bar" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstance(ctx, "example", &spanner.InstanceArgs{
			Config:      pulumi.String("regional-us-central1"),
			DisplayName: pulumi.String("Test Spanner Instance"),
			AutoscalingConfig: &spanner.InstanceAutoscalingConfigArgs{
				AutoscalingLimits: &spanner.InstanceAutoscalingConfigAutoscalingLimitsArgs{
					MaxProcessingUnits: pulumi.Int(3000),
					MinProcessingUnits: pulumi.Int(2000),
				},
				AutoscalingTargets: &spanner.InstanceAutoscalingConfigAutoscalingTargetsArgs{
					HighPriorityCpuUtilizationPercent: pulumi.Int(75),
					StorageUtilizationPercent:         pulumi.Int(90),
				},
			},
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.Instance;
import com.pulumi.gcp.spanner.InstanceArgs;
import com.pulumi.gcp.spanner.inputs.InstanceAutoscalingConfigArgs;
import com.pulumi.gcp.spanner.inputs.InstanceAutoscalingConfigAutoscalingLimitsArgs;
import com.pulumi.gcp.spanner.inputs.InstanceAutoscalingConfigAutoscalingTargetsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new Instance("example", InstanceArgs.builder()
            .config("regional-us-central1")
            .displayName("Test Spanner Instance")
            .autoscalingConfig(InstanceAutoscalingConfigArgs.builder()
                .autoscalingLimits(InstanceAutoscalingConfigAutoscalingLimitsArgs.builder()
                    .maxProcessingUnits(3000)
                    .minProcessingUnits(2000)
                    .build())
                .autoscalingTargets(InstanceAutoscalingConfigAutoscalingTargetsArgs.builder()
                    .highPriorityCpuUtilizationPercent(75)
                    .storageUtilizationPercent(90)
                    .build())
                .build())
            .labels(Map.of("foo", "bar"))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:spanner:Instance
    properties:
      config: regional-us-central1
      displayName: Test Spanner Instance
      autoscalingConfig:
        autoscalingLimits:
          maxProcessingUnits: 3000
          minProcessingUnits: 2000
        autoscalingTargets:
          highPriorityCpuUtilizationPercent: 75
          storageUtilizationPercent: 90
      labels:
        foo: bar
```
<!--End PulumiCodeChooser -->
### Spanner Instance Multi Regional


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = new gcp.spanner.Instance("example", {
    config: "nam-eur-asia1",
    displayName: "Multi Regional Instance",
    numNodes: 2,
    labels: {
        foo: "bar",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.spanner.Instance("example",
    config="nam-eur-asia1",
    display_name="Multi Regional Instance",
    num_nodes=2,
    labels={
        "foo": "bar",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = new Gcp.Spanner.Instance("example", new()
    {
        Config = "nam-eur-asia1",
        DisplayName = "Multi Regional Instance",
        NumNodes = 2,
        Labels = 
        {
            { "foo", "bar" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstance(ctx, "example", &spanner.InstanceArgs{
			Config:      pulumi.String("nam-eur-asia1"),
			DisplayName: pulumi.String("Multi Regional Instance"),
			NumNodes:    pulumi.Int(2),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.Instance;
import com.pulumi.gcp.spanner.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var example = new Instance("example", InstanceArgs.builder()
            .config("nam-eur-asia1")
            .displayName("Multi Regional Instance")
            .numNodes(2)
            .labels(Map.of("foo", "bar"))
            .build());

    }
}
```
```yaml
resources:
  example:
    type: gcp:spanner:Instance
    properties:
      config: nam-eur-asia1
      displayName: Multi Regional Instance
      numNodes: 2
      labels:
        foo: bar
```
<!--End PulumiCodeChooser -->

## Import

Instance can be imported using any of these accepted formats:

* `projects/{{project}}/instances/{{name}}`

* `{{project}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:spanner/instance:Instance default projects/{{project}}/instances/{{name}}
```

```sh
$ pulumi import gcp:spanner/instance:Instance default {{project}}/{{name}}
```

```sh
$ pulumi import gcp:spanner/instance:Instance default {{name}}
```

С
autoscalingConfigkBi:g
e
spannerInstanceAutoscalingConfig?gcp:spanner/InstanceAutoscalingConfig:InstanceAutoscalingConfigОThe autoscaling configuration. Autoscaling is enabled if this field is set.
When autoscaling is enabled, num_nodes and processing_units are treated as,
OUTPUT_ONLY fields and reflect the current compute capacity allocated to
the instance.
Structure is documented below.
┐
config" ░The name of the instance's configuration (similar but not
quite the same as a region) which defines the geographic placement and
replication of your databases in this instance. It determines where your data
is stored. Values are typically of the form `regional-europe-west1` , `us-central` etc.
In order to obtain a valid list please consult the
[Configuration section of the docs](https://cloud.google.com/spanner/docs/instances).
¤
defaultBackupScheduleTypeB" ┘Controls the default backup behavior for new databases within the instance.
Note that `AUTOMATIC` is not permitted for free instances, as backups and backup schedules are not allowed for free instances.
if unset or NONE, no default backup schedule will be created for new databases within the instance.
Possible values are: `NONE`, `AUTOMATIC`.
Я
displayName" ЛThe descriptive name for this instance as it appears in UIs. Must be
unique per project and between 4 and 30 characters in length.


- - -
р
editionB" ╬The edition selected for this instance. Different editions provide different capabilities at different price points.
Possible values are: `EDITION_UNSPECIFIED`, `STANDARD`, `ENTERPRISE`, `ENTERPRISE_PLUS`.
┴
forceDestroyB
 кWhen deleting a spanner instance, this boolean option will delete all backups of this instance.
This must be set to true if you created a backup manually in the console.
╦
labelsB2" ╕An object containing a list of "key": value pairs.
Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
ы
nameB" ▄A unique identifier for the instance, which cannot be changed after
the instance is created. The name must be between 6 and 30 characters
in length.
If not provided, a random string starting with `tf-` will be selected.

numNodesB 
processingUnitsB {
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"С
autoscalingConfigkBi:g
e
spannerInstanceAutoscalingConfig?gcp:spanner/InstanceAutoscalingConfig:InstanceAutoscalingConfigОThe autoscaling configuration. Autoscaling is enabled if this field is set.
When autoscaling is enabled, num_nodes and processing_units are treated as,
OUTPUT_ONLY fields and reflect the current compute capacity allocated to
the instance.
Structure is documented below.
"┐
config" ░The name of the instance's configuration (similar but not
quite the same as a region) which defines the geographic placement and
replication of your databases in this instance. It determines where your data
is stored. Values are typically of the form `regional-europe-west1` , `us-central` etc.
In order to obtain a valid list please consult the
[Configuration section of the docs](https://cloud.google.com/spanner/docs/instances).
"√
defaultBackupScheduleType" ┘Controls the default backup behavior for new databases within the instance.
Note that `AUTOMATIC` is not permitted for free instances, as backups and backup schedules are not allowed for free instances.
if unset or NONE, no default backup schedule will be created for new databases within the instance.
Possible values are: `NONE`, `AUTOMATIC`.
"Я
displayName" ЛThe descriptive name for this instance as it appears in UIs. Must be
unique per project and between 4 and 30 characters in length.


- - -
"▐
edition" ╬The edition selected for this instance. Different editions provide different capabilities at different price points.
Possible values are: `EDITION_UNSPECIFIED`, `STANDARD`, `ENTERPRISE`, `ENTERPRISE_PLUS`.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"┴
forceDestroyB
 кWhen deleting a spanner instance, this boolean option will delete all backups of this instance.
This must be set to true if you created a backup manually in the console.
"╦
labelsB2" ╕An object containing a list of "key": value pairs.
Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"щ
name" ▄A unique identifier for the instance, which cannot be changed after
the instance is created. The name must be between 6 and 30 characters
in length.
If not provided, a random string starting with `tf-` will be selected.
"
numNodes "
processingUnits "y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"5
state" (Instance status: `CREATING` or `READY`.
*Ы
D
spannerInstanceConfig)gcp:spanner/instanceConfig:InstanceConfig▄A possible configuration for a Cloud Spanner instance. Configurations
define the geographic placement of nodes and their replication.


To get more information about InstanceConfig, see:

* [API documentation](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instanceConfigs)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/spanner/)

## Example Usage

## Import

InstanceConfig can be imported using any of these accepted formats:

* `projects/{{project}}/instanceConfigs/{{name}}`

* `{{project}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, InstanceConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:spanner/instanceConfig:InstanceConfig default projects/{{project}}/instanceConfigs/{{name}}
```

```sh
$ pulumi import gcp:spanner/instanceConfig:InstanceConfig default {{project}}/{{name}}
```

```sh
$ pulumi import gcp:spanner/instanceConfig:InstanceConfig default {{name}}
```

№

baseConfigB" чBase configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
configuration.
Q
displayName" >The name of this instance configuration as it appears in UIs.
╩
labelsB2" ╖An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
to the field 'effective_labels' for all of the labels present on the resource.
М
nameB" ~A unique identifier for the instance configuration. Values are of the
form projects/<project>/instanceConfigs/[a-z][-a-z0-9]*

projectB" Ё
replicas_*]:[
Y
spannerInstanceConfigReplica7gcp:spanner/InstanceConfigReplica:InstanceConfigReplicaВThe geographic placement of nodes in this instance configuration and their replication properties.
Structure is documented below.
"·

baseConfig" чBase configuration name, e.g. nam3, based on which this configuration is created. Only set for user managed
configurations. baseConfig must refer to a configuration of type GOOGLE_MANAGED in the same project as this
configuration.
"g

configType" UOutput only. Whether this instance config is a Google or User Managed Configuration.
"Q
displayName" >The name of this instance configuration as it appears in UIs.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"╩
labelsB2" ╖An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration. Please refer
to the field 'effective_labels' for all of the labels present on the resource.
"К
name" ~A unique identifier for the instance configuration. Values are of the
form projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
"
project" "Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"Ё
replicas_*]:[
Y
spannerInstanceConfigReplica7gcp:spanner/InstanceConfigReplica:InstanceConfigReplicaВThe geographic placement of nodes in this instance configuration and their replication properties.
Structure is documented below.
*яС
P
spannerInstanceIAMBinding1gcp:spanner/instanceIAMBinding:InstanceIAMBindingмzThree different resources help you manage your IAM policy for a Spanner instance. Each of these resources serves a different use case:

* `gcp.spanner.InstanceIAMPolicy`: Authoritative. Sets the IAM policy for the instance and replaces any existing policy already attached.

> **Warning:** It's entirely possibly to lock yourself out of your instance using `gcp.spanner.InstanceIAMPolicy`. Any permissions granted by default will be removed unless you include them in your config.

* `gcp.spanner.InstanceIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the instance are preserved.
* `gcp.spanner.InstanceIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the instance are preserved.

> **Note:** `gcp.spanner.InstanceIAMPolicy` **cannot** be used in conjunction with `gcp.spanner.InstanceIAMBinding` and `gcp.spanner.InstanceIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.spanner.InstanceIAMBinding` resources **can be** used in conjunction with `gcp.spanner.InstanceIAMMember` resources **only if** they do not grant privilege to the same role.

## gcp.spanner.InstanceIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/editor",
        members: ["user:jane@example.com"],
    }],
});
const instance = new gcp.spanner.InstanceIAMPolicy("instance", {
    instance: "your-instance-name",
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/editor",
    "members": ["user:jane@example.com"],
}])
instance = gcp.spanner.InstanceIAMPolicy("instance",
    instance="your-instance-name",
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/editor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var instance = new Gcp.Spanner.InstanceIAMPolicy("instance", new()
    {
        Instance = "your-instance-name",
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/editor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = spanner.NewInstanceIAMPolicy(ctx, "instance", &spanner.InstanceIAMPolicyArgs{
			Instance:   pulumi.String("your-instance-name"),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.spanner.InstanceIAMPolicy;
import com.pulumi.gcp.spanner.InstanceIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/editor")
                .members("user:jane@example.com")
                .build())
            .build());

        var instance = new InstanceIAMPolicy("instance", InstanceIAMPolicyArgs.builder()
            .instance("your-instance-name")
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMPolicy
    properties:
      instance: your-instance-name
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/editor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMBinding("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMBinding("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMBinding("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMBinding(ctx, "instance", &spanner.InstanceIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMBinding;
import com.pulumi.gcp.spanner.InstanceIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMBinding("instance", InstanceIAMBindingArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMBinding
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMMember("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMMember("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMMember("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMMember(ctx, "instance", &spanner.InstanceIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMMember;
import com.pulumi.gcp.spanner.InstanceIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMMember("instance", InstanceIAMMemberArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMMember
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMBinding("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMBinding("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMBinding("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMBinding(ctx, "instance", &spanner.InstanceIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMBinding;
import com.pulumi.gcp.spanner.InstanceIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMBinding("instance", InstanceIAMBindingArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMBinding
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMMember("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMMember("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMMember("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMMember(ctx, "instance", &spanner.InstanceIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMMember;
import com.pulumi.gcp.spanner.InstanceIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMMember("instance", InstanceIAMMemberArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMMember
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

### Importing IAM policies

IAM policy imports use the identifier of the Spanner Instances resource . For example:

* `{{project}}/{{instance}}`

An `import` block (Terraform v1.5.0 and later) can be used to import IAM policies:

tf

import {

  id = {{project}}/{{instance}}

  to = google_spanner_instance_iam_policy.default

}

The `pulumi import` command can also be used:

```sh
$ pulumi import gcp:spanner/instanceIAMBinding:InstanceIAMBinding default {{project}}/{{instance}}
```

~
	conditionqBo:m
k
spannerInstanceIAMBindingConditionCgcp:spanner/InstanceIAMBindingCondition:InstanceIAMBindingCondition*
instance" The name of the instance.
Т
members*" АIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
╫
role" ╩The role that should be applied. Only one
`gcp.spanner.InstanceIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"~
	conditionqBo:m
k
spannerInstanceIAMBindingConditionCgcp:spanner/InstanceIAMBindingCondition:InstanceIAMBindingCondition">
etag" 2(Computed) The etag of the instance's IAM policy.
"*
instance" The name of the instance.
"Т
members*" АIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"╫
role" ╩The role that should be applied. Only one
`gcp.spanner.InstanceIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*▐С
M
spannerInstanceIAMMember/gcp:spanner/instanceIAMMember:InstanceIAMMemberкzThree different resources help you manage your IAM policy for a Spanner instance. Each of these resources serves a different use case:

* `gcp.spanner.InstanceIAMPolicy`: Authoritative. Sets the IAM policy for the instance and replaces any existing policy already attached.

> **Warning:** It's entirely possibly to lock yourself out of your instance using `gcp.spanner.InstanceIAMPolicy`. Any permissions granted by default will be removed unless you include them in your config.

* `gcp.spanner.InstanceIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the instance are preserved.
* `gcp.spanner.InstanceIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the instance are preserved.

> **Note:** `gcp.spanner.InstanceIAMPolicy` **cannot** be used in conjunction with `gcp.spanner.InstanceIAMBinding` and `gcp.spanner.InstanceIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.spanner.InstanceIAMBinding` resources **can be** used in conjunction with `gcp.spanner.InstanceIAMMember` resources **only if** they do not grant privilege to the same role.

## gcp.spanner.InstanceIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/editor",
        members: ["user:jane@example.com"],
    }],
});
const instance = new gcp.spanner.InstanceIAMPolicy("instance", {
    instance: "your-instance-name",
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/editor",
    "members": ["user:jane@example.com"],
}])
instance = gcp.spanner.InstanceIAMPolicy("instance",
    instance="your-instance-name",
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/editor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var instance = new Gcp.Spanner.InstanceIAMPolicy("instance", new()
    {
        Instance = "your-instance-name",
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/editor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = spanner.NewInstanceIAMPolicy(ctx, "instance", &spanner.InstanceIAMPolicyArgs{
			Instance:   pulumi.String("your-instance-name"),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.spanner.InstanceIAMPolicy;
import com.pulumi.gcp.spanner.InstanceIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/editor")
                .members("user:jane@example.com")
                .build())
            .build());

        var instance = new InstanceIAMPolicy("instance", InstanceIAMPolicyArgs.builder()
            .instance("your-instance-name")
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMPolicy
    properties:
      instance: your-instance-name
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/editor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMBinding("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMBinding("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMBinding("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMBinding(ctx, "instance", &spanner.InstanceIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMBinding;
import com.pulumi.gcp.spanner.InstanceIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMBinding("instance", InstanceIAMBindingArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMBinding
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMMember("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMMember("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMMember("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMMember(ctx, "instance", &spanner.InstanceIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMMember;
import com.pulumi.gcp.spanner.InstanceIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMMember("instance", InstanceIAMMemberArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMMember
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMBinding("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMBinding("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMBinding("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMBinding(ctx, "instance", &spanner.InstanceIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMBinding;
import com.pulumi.gcp.spanner.InstanceIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMBinding("instance", InstanceIAMBindingArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMBinding
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMMember("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMMember("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMMember("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMMember(ctx, "instance", &spanner.InstanceIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMMember;
import com.pulumi.gcp.spanner.InstanceIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMMember("instance", InstanceIAMMemberArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMMember
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

### Importing IAM policies

IAM policy imports use the identifier of the Spanner Instances resource . For example:

* `{{project}}/{{instance}}`

An `import` block (Terraform v1.5.0 and later) can be used to import IAM policies:

tf

import {

  id = {{project}}/{{instance}}

  to = google_spanner_instance_iam_policy.default

}

The `pulumi import` command can also be used:

```sh
$ pulumi import gcp:spanner/instanceIAMMember:InstanceIAMMember default {{project}}/{{instance}}
```

{
	conditionnBl:j
h
spannerInstanceIAMMemberConditionAgcp:spanner/InstanceIAMMemberCondition:InstanceIAMMemberCondition*
instance" The name of the instance.
П
member" АIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
╫
role" ╩The role that should be applied. Only one
`gcp.spanner.InstanceIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"{
	conditionnBl:j
h
spannerInstanceIAMMemberConditionAgcp:spanner/InstanceIAMMemberCondition:InstanceIAMMemberCondition">
etag" 2(Computed) The etag of the instance's IAM policy.
"*
instance" The name of the instance.
"П
member" АIdentities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"╫
role" ╩The role that should be applied. Only one
`gcp.spanner.InstanceIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*╬
M
spannerInstanceIAMPolicy/gcp:spanner/instanceIAMPolicy:InstanceIAMPolicyкzThree different resources help you manage your IAM policy for a Spanner instance. Each of these resources serves a different use case:

* `gcp.spanner.InstanceIAMPolicy`: Authoritative. Sets the IAM policy for the instance and replaces any existing policy already attached.

> **Warning:** It's entirely possibly to lock yourself out of your instance using `gcp.spanner.InstanceIAMPolicy`. Any permissions granted by default will be removed unless you include them in your config.

* `gcp.spanner.InstanceIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the instance are preserved.
* `gcp.spanner.InstanceIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the instance are preserved.

> **Note:** `gcp.spanner.InstanceIAMPolicy` **cannot** be used in conjunction with `gcp.spanner.InstanceIAMBinding` and `gcp.spanner.InstanceIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.spanner.InstanceIAMBinding` resources **can be** used in conjunction with `gcp.spanner.InstanceIAMMember` resources **only if** they do not grant privilege to the same role.

## gcp.spanner.InstanceIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/editor",
        members: ["user:jane@example.com"],
    }],
});
const instance = new gcp.spanner.InstanceIAMPolicy("instance", {
    instance: "your-instance-name",
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/editor",
    "members": ["user:jane@example.com"],
}])
instance = gcp.spanner.InstanceIAMPolicy("instance",
    instance="your-instance-name",
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/editor",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var instance = new Gcp.Spanner.InstanceIAMPolicy("instance", new()
    {
        Instance = "your-instance-name",
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/editor",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = spanner.NewInstanceIAMPolicy(ctx, "instance", &spanner.InstanceIAMPolicyArgs{
			Instance:   pulumi.String("your-instance-name"),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.spanner.InstanceIAMPolicy;
import com.pulumi.gcp.spanner.InstanceIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/editor")
                .members("user:jane@example.com")
                .build())
            .build());

        var instance = new InstanceIAMPolicy("instance", InstanceIAMPolicyArgs.builder()
            .instance("your-instance-name")
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMPolicy
    properties:
      instance: your-instance-name
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/editor
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMBinding("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMBinding("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMBinding("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMBinding(ctx, "instance", &spanner.InstanceIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMBinding;
import com.pulumi.gcp.spanner.InstanceIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMBinding("instance", InstanceIAMBindingArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMBinding
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMMember("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMMember("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMMember("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMMember(ctx, "instance", &spanner.InstanceIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMMember;
import com.pulumi.gcp.spanner.InstanceIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMMember("instance", InstanceIAMMemberArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMMember
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMBinding("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMBinding("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMBinding("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMBinding(ctx, "instance", &spanner.InstanceIAMBindingArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMBinding;
import com.pulumi.gcp.spanner.InstanceIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMBinding("instance", InstanceIAMBindingArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMBinding
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.spanner.InstanceIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.spanner.InstanceIAMMember("instance", {
    instance: "your-instance-name",
    role: "roles/spanner.databaseAdmin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.spanner.InstanceIAMMember("instance",
    instance="your-instance-name",
    role="roles/spanner.databaseAdmin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Spanner.InstanceIAMMember("instance", new()
    {
        Instance = "your-instance-name",
        Role = "roles/spanner.databaseAdmin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.NewInstanceIAMMember(ctx, "instance", &spanner.InstanceIAMMemberArgs{
			Instance: pulumi.String("your-instance-name"),
			Role:     pulumi.String("roles/spanner.databaseAdmin"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.InstanceIAMMember;
import com.pulumi.gcp.spanner.InstanceIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new InstanceIAMMember("instance", InstanceIAMMemberArgs.builder()
            .instance("your-instance-name")
            .role("roles/spanner.databaseAdmin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:spanner:InstanceIAMMember
    properties:
      instance: your-instance-name
      role: roles/spanner.databaseAdmin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

### Importing IAM policies

IAM policy imports use the identifier of the Spanner Instances resource . For example:

* `{{project}}/{{instance}}`

An `import` block (Terraform v1.5.0 and later) can be used to import IAM policies:

tf

import {

  id = {{project}}/{{instance}}

  to = google_spanner_instance_iam_policy.default

}

The `pulumi import` command can also be used:

```sh
$ pulumi import gcp:spanner/instanceIAMPolicy:InstanceIAMPolicy default {{project}}/{{instance}}
```

*
instance" The name of the instance.
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
">
etag" 2(Computed) The etag of the instance's IAM policy.
"*
instance" The name of the instance.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
*Чl
*
sqlDatabasegcp:sql/database:DatabaseнURepresents a SQL database inside the Cloud SQL instance, hosted in
Google's cloud.



## Example Usage

### Sql Database Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

// See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
const instance = new gcp.sql.DatabaseInstance("instance", {
    name: "my-database-instance",
    region: "us-central1",
    databaseVersion: "MYSQL_8_0",
    settings: {
        tier: "db-f1-micro",
    },
    deletionProtection: true,
});
const database = new gcp.sql.Database("database", {
    name: "my-database",
    instance: instance.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

# See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
instance = gcp.sql.DatabaseInstance("instance",
    name="my-database-instance",
    region="us-central1",
    database_version="MYSQL_8_0",
    settings={
        "tier": "db-f1-micro",
    },
    deletion_protection=True)
database = gcp.sql.Database("database",
    name="my-database",
    instance=instance.name)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    // See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
    var instance = new Gcp.Sql.DatabaseInstance("instance", new()
    {
        Name = "my-database-instance",
        Region = "us-central1",
        DatabaseVersion = "MYSQL_8_0",
        Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
        {
            Tier = "db-f1-micro",
        },
        DeletionProtection = true,
    });

    var database = new Gcp.Sql.Database("database", new()
    {
        Name = "my-database",
        Instance = instance.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
		instance, err := sql.NewDatabaseInstance(ctx, "instance", &sql.DatabaseInstanceArgs{
			Name:            pulumi.String("my-database-instance"),
			Region:          pulumi.String("us-central1"),
			DatabaseVersion: pulumi.String("MYSQL_8_0"),
			Settings: &sql.DatabaseInstanceSettingsArgs{
				Tier: pulumi.String("db-f1-micro"),
			},
			DeletionProtection: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		_, err = sql.NewDatabase(ctx, "database", &sql.DatabaseArgs{
			Name:     pulumi.String("my-database"),
			Instance: instance.Name,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.DatabaseInstance;
import com.pulumi.gcp.sql.DatabaseInstanceArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import com.pulumi.gcp.sql.Database;
import com.pulumi.gcp.sql.DatabaseArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        // See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
        var instance = new DatabaseInstance("instance", DatabaseInstanceArgs.builder()
            .name("my-database-instance")
            .region("us-central1")
            .databaseVersion("MYSQL_8_0")
            .settings(DatabaseInstanceSettingsArgs.builder()
                .tier("db-f1-micro")
                .build())
            .deletionProtection(true)
            .build());

        var database = new Database("database", DatabaseArgs.builder()
            .name("my-database")
            .instance(instance.name())
            .build());

    }
}
```
```yaml
resources:
  database:
    type: gcp:sql:Database
    properties:
      name: my-database
      instance: ${instance.name}
  # See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
  instance:
    type: gcp:sql:DatabaseInstance
    properties:
      name: my-database-instance
      region: us-central1
      databaseVersion: MYSQL_8_0
      settings:
        tier: db-f1-micro
      deletionProtection: true
```
<!--End PulumiCodeChooser -->
### Sql Database Deletion Policy


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

// See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
const instance = new gcp.sql.DatabaseInstance("instance", {
    name: "my-database-instance",
    region: "us-central1",
    databaseVersion: "POSTGRES_14",
    settings: {
        tier: "db-g1-small",
    },
    deletionProtection: true,
});
const databaseDeletionPolicy = new gcp.sql.Database("database_deletion_policy", {
    name: "my-database",
    instance: instance.name,
    deletionPolicy: "ABANDON",
});
```
```python
import pulumi
import pulumi_gcp as gcp

# See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
instance = gcp.sql.DatabaseInstance("instance",
    name="my-database-instance",
    region="us-central1",
    database_version="POSTGRES_14",
    settings={
        "tier": "db-g1-small",
    },
    deletion_protection=True)
database_deletion_policy = gcp.sql.Database("database_deletion_policy",
    name="my-database",
    instance=instance.name,
    deletion_policy="ABANDON")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    // See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
    var instance = new Gcp.Sql.DatabaseInstance("instance", new()
    {
        Name = "my-database-instance",
        Region = "us-central1",
        DatabaseVersion = "POSTGRES_14",
        Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
        {
            Tier = "db-g1-small",
        },
        DeletionProtection = true,
    });

    var databaseDeletionPolicy = new Gcp.Sql.Database("database_deletion_policy", new()
    {
        Name = "my-database",
        Instance = instance.Name,
        DeletionPolicy = "ABANDON",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
		instance, err := sql.NewDatabaseInstance(ctx, "instance", &sql.DatabaseInstanceArgs{
			Name:            pulumi.String("my-database-instance"),
			Region:          pulumi.String("us-central1"),
			DatabaseVersion: pulumi.String("POSTGRES_14"),
			Settings: &sql.DatabaseInstanceSettingsArgs{
				Tier: pulumi.String("db-g1-small"),
			},
			DeletionProtection: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		_, err = sql.NewDatabase(ctx, "database_deletion_policy", &sql.DatabaseArgs{
			Name:           pulumi.String("my-database"),
			Instance:       instance.Name,
			DeletionPolicy: pulumi.String("ABANDON"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.DatabaseInstance;
import com.pulumi.gcp.sql.DatabaseInstanceArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import com.pulumi.gcp.sql.Database;
import com.pulumi.gcp.sql.DatabaseArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        // See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
        var instance = new DatabaseInstance("instance", DatabaseInstanceArgs.builder()
            .name("my-database-instance")
            .region("us-central1")
            .databaseVersion("POSTGRES_14")
            .settings(DatabaseInstanceSettingsArgs.builder()
                .tier("db-g1-small")
                .build())
            .deletionProtection(true)
            .build());

        var databaseDeletionPolicy = new Database("databaseDeletionPolicy", DatabaseArgs.builder()
            .name("my-database")
            .instance(instance.name())
            .deletionPolicy("ABANDON")
            .build());

    }
}
```
```yaml
resources:
  databaseDeletionPolicy:
    type: gcp:sql:Database
    name: database_deletion_policy
    properties:
      name: my-database
      instance: ${instance.name}
      deletionPolicy: ABANDON
  # See versions at https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance#database_version
  instance:
    type: gcp:sql:DatabaseInstance
    properties:
      name: my-database-instance
      region: us-central1
      databaseVersion: POSTGRES_14
      settings:
        tier: db-g1-small
      deletionProtection: true
```
<!--End PulumiCodeChooser -->

## Import

Database can be imported using any of these accepted formats:

* `projects/{{project}}/instances/{{instance}}/databases/{{name}}`

* `instances/{{instance}}/databases/{{name}}`

* `{{project}}/{{instance}}/{{name}}`

* `{{instance}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Database can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:sql/database:Database default projects/{{project}}/instances/{{instance}}/databases/{{name}}
```

```sh
$ pulumi import gcp:sql/database:Database default instances/{{instance}}/databases/{{name}}
```

```sh
$ pulumi import gcp:sql/database:Database default {{project}}/{{instance}}/{{name}}
```

```sh
$ pulumi import gcp:sql/database:Database default {{instance}}/{{name}}
```

```sh
$ pulumi import gcp:sql/database:Database default {{name}}
```

ц
charsetB" ╘The charset value. See MySQL's
[Supported Character Sets and Collations](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html)
and Postgres' [Character Set Support](https://www.postgresql.org/docs/9.6/static/multibyte.html)
for more details and supported values. Postgres databases only support
a value of `UTF8` at creation time.
ь
	collationB" ╪The collation value. See MySQL's
[Supported Character Sets and Collations](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html)
and Postgres' [Collation Support](https://www.postgresql.org/docs/9.6/static/collation.html)
for more details and supported values. Postgres databases only support
a value of `en_US.UTF8` at creation time.
╤
deletionPolicyB" ╕The deletion policy for the database. Setting ABANDON allows the resource
to be abandoned rather than deleted. This is useful for Postgres, where databases cannot be
deleted from the API if there are users other than cloudsqlsuperuser with access. Possible
values are: "ABANDON", "DELETE". Defaults to "DELETE".
b
instance" RThe name of the Cloud SQL instance. This does not include the project
ID.


- - -
y
nameB" kThe name of the database in the Cloud SQL instance.
This does not include the project ID or instance name.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"ф
charset" ╘The charset value. See MySQL's
[Supported Character Sets and Collations](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html)
and Postgres' [Character Set Support](https://www.postgresql.org/docs/9.6/static/multibyte.html)
for more details and supported values. Postgres databases only support
a value of `UTF8` at creation time.
"ъ
	collation" ╪The collation value. See MySQL's
[Supported Character Sets and Collations](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html)
and Postgres' [Collation Support](https://www.postgresql.org/docs/9.6/static/collation.html)
for more details and supported values. Postgres databases only support
a value of `en_US.UTF8` at creation time.
"╤
deletionPolicyB" ╕The deletion policy for the database. Setting ABANDON allows the resource
to be abandoned rather than deleted. This is useful for Postgres, where databases cannot be
deleted from the API if there are users other than cloudsqlsuperuser with access. Possible
values are: "ABANDON", "DELETE". Defaults to "DELETE".
"b
instance" RThe name of the Cloud SQL instance. This does not include the project
ID.


- - -
"w
name" kThe name of the database in the Cloud SQL instance.
This does not include the project ID or instance name.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"1
selfLink" !The URI of the created resource.
*ы┌
B
sqlDatabaseInstance)gcp:sql/databaseInstance:DatabaseInstanceнКCreates a new Google SQL Database Instance. For more information, see the [official documentation](https://cloud.google.com/sql/),
or the [JSON API](https://cloud.google.com/sql/docs/admin-api/v1beta4/instances).

> **NOTE on `gcp.sql.DatabaseInstance`:** - Second-generation instances include a
default 'root'@'%' user with no password. This user will be deleted by the provider on
instance creation. You should use `gcp.sql.User` to define a custom user with
a restricted host and strong password.

> **Note**: On newer versions of the provider, you must explicitly set `deletion_protection=false`
(and run `pulumi update` to write the field to state) in order to destroy an instance.
It is recommended to not set this field (or set it to true) until you're ready to destroy the instance and its databases.

## Example Usage

### SQL Second Generation Instance

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const main = new gcp.sql.DatabaseInstance("main", {
    name: "main-instance",
    databaseVersion: "POSTGRES_15",
    region: "us-central1",
    settings: {
        tier: "db-f1-micro",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

main = gcp.sql.DatabaseInstance("main",
    name="main-instance",
    database_version="POSTGRES_15",
    region="us-central1",
    settings={
        "tier": "db-f1-micro",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var main = new Gcp.Sql.DatabaseInstance("main", new()
    {
        Name = "main-instance",
        DatabaseVersion = "POSTGRES_15",
        Region = "us-central1",
        Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
        {
            Tier = "db-f1-micro",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
			Name:            pulumi.String("main-instance"),
			DatabaseVersion: pulumi.String("POSTGRES_15"),
			Region:          pulumi.String("us-central1"),
			Settings: &sql.DatabaseInstanceSettingsArgs{
				Tier: pulumi.String("db-f1-micro"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.DatabaseInstance;
import com.pulumi.gcp.sql.DatabaseInstanceArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
            .name("main-instance")
            .databaseVersion("POSTGRES_15")
            .region("us-central1")
            .settings(DatabaseInstanceSettingsArgs.builder()
                .tier("db-f1-micro")
                .build())
            .build());

    }
}
```
```yaml
resources:
  main:
    type: gcp:sql:DatabaseInstance
    properties:
      name: main-instance
      databaseVersion: POSTGRES_15
      region: us-central1
      settings:
        tier: db-f1-micro
```
<!--End PulumiCodeChooser -->

### Private IP Instance
> **NOTE:** For private IP instance setup, note that the `gcp.sql.DatabaseInstance` does not actually interpolate values from `gcp.servicenetworking.Connection`. You must explicitly add a `depends_on`reference as shown below.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as random from "@pulumi/random";

const privateNetwork = new gcp.compute.Network("private_network", {name: "private-network"});
const privateIpAddress = new gcp.compute.GlobalAddress("private_ip_address", {
    name: "private-ip-address",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: privateNetwork.id,
});
const privateVpcConnection = new gcp.servicenetworking.Connection("private_vpc_connection", {
    network: privateNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [privateIpAddress.name],
});
const dbNameSuffix = new random.RandomId("db_name_suffix", {byteLength: 4});
const instance = new gcp.sql.DatabaseInstance("instance", {
    name: pulumi.interpolate`private-instance-${dbNameSuffix.hex}`,
    region: "us-central1",
    databaseVersion: "MYSQL_5_7",
    settings: {
        tier: "db-f1-micro",
        ipConfiguration: {
            ipv4Enabled: false,
            privateNetwork: privateNetwork.selfLink,
            enablePrivatePathForGoogleCloudServices: true,
        },
    },
}, {
    dependsOn: [privateVpcConnection],
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_random as random

private_network = gcp.compute.Network("private_network", name="private-network")
private_ip_address = gcp.compute.GlobalAddress("private_ip_address",
    name="private-ip-address",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=private_network.id)
private_vpc_connection = gcp.servicenetworking.Connection("private_vpc_connection",
    network=private_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[private_ip_address.name])
db_name_suffix = random.RandomId("db_name_suffix", byte_length=4)
instance = gcp.sql.DatabaseInstance("instance",
    name=db_name_suffix.hex.apply(lambda hex: f"private-instance-{hex}"),
    region="us-central1",
    database_version="MYSQL_5_7",
    settings={
        "tier": "db-f1-micro",
        "ip_configuration": {
            "ipv4_enabled": False,
            "private_network": private_network.self_link,
            "enable_private_path_for_google_cloud_services": True,
        },
    },
    opts = pulumi.ResourceOptions(depends_on=[private_vpc_connection]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Random = Pulumi.Random;

return await Deployment.RunAsync(() => 
{
    var privateNetwork = new Gcp.Compute.Network("private_network", new()
    {
        Name = "private-network",
    });

    var privateIpAddress = new Gcp.Compute.GlobalAddress("private_ip_address", new()
    {
        Name = "private-ip-address",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = privateNetwork.Id,
    });

    var privateVpcConnection = new Gcp.ServiceNetworking.Connection("private_vpc_connection", new()
    {
        Network = privateNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            privateIpAddress.Name,
        },
    });

    var dbNameSuffix = new Random.RandomId("db_name_suffix", new()
    {
        ByteLength = 4,
    });

    var instance = new Gcp.Sql.DatabaseInstance("instance", new()
    {
        Name = dbNameSuffix.Hex.Apply(hex => $"private-instance-{hex}"),
        Region = "us-central1",
        DatabaseVersion = "MYSQL_5_7",
        Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
        {
            Tier = "db-f1-micro",
            IpConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationArgs
            {
                Ipv4Enabled = false,
                PrivateNetwork = privateNetwork.SelfLink,
                EnablePrivatePathForGoogleCloudServices = true,
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            privateVpcConnection,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		privateNetwork, err := compute.NewNetwork(ctx, "private_network", &compute.NetworkArgs{
			Name: pulumi.String("private-network"),
		})
		if err != nil {
			return err
		}
		privateIpAddress, err := compute.NewGlobalAddress(ctx, "private_ip_address", &compute.GlobalAddressArgs{
			Name:         pulumi.String("private-ip-address"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      privateNetwork.ID(),
		})
		if err != nil {
			return err
		}
		privateVpcConnection, err := servicenetworking.NewConnection(ctx, "private_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: privateNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				privateIpAddress.Name,
			},
		})
		if err != nil {
			return err
		}
		dbNameSuffix, err := random.NewRandomId(ctx, "db_name_suffix", &random.RandomIdArgs{
			ByteLength: pulumi.Int(4),
		})
		if err != nil {
			return err
		}
		_, err = sql.NewDatabaseInstance(ctx, "instance", &sql.DatabaseInstanceArgs{
			Name: dbNameSuffix.Hex.ApplyT(func(hex string) (string, error) {
				return fmt.Sprintf("private-instance-%v", hex), nil
			}).(pulumi.StringOutput),
			Region:          pulumi.String("us-central1"),
			DatabaseVersion: pulumi.String("MYSQL_5_7"),
			Settings: &sql.DatabaseInstanceSettingsArgs{
				Tier: pulumi.String("db-f1-micro"),
				IpConfiguration: &sql.DatabaseInstanceSettingsIpConfigurationArgs{
					Ipv4Enabled:                             pulumi.Bool(false),
					PrivateNetwork:                          privateNetwork.SelfLink,
					EnablePrivatePathForGoogleCloudServices: pulumi.Bool(true),
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			privateVpcConnection,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.random.RandomId;
import com.pulumi.random.RandomIdArgs;
import com.pulumi.gcp.sql.DatabaseInstance;
import com.pulumi.gcp.sql.DatabaseInstanceArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsIpConfigurationArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var privateNetwork = new Network("privateNetwork", NetworkArgs.builder()
            .name("private-network")
            .build());

        var privateIpAddress = new GlobalAddress("privateIpAddress", GlobalAddressArgs.builder()
            .name("private-ip-address")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(privateNetwork.id())
            .build());

        var privateVpcConnection = new Connection("privateVpcConnection", ConnectionArgs.builder()
            .network(privateNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(privateIpAddress.name())
            .build());

        var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
            .byteLength(4)
            .build());

        var instance = new DatabaseInstance("instance", DatabaseInstanceArgs.builder()
            .name(dbNameSuffix.hex().applyValue(hex -> String.format("private-instance-%s", hex)))
            .region("us-central1")
            .databaseVersion("MYSQL_5_7")
            .settings(DatabaseInstanceSettingsArgs.builder()
                .tier("db-f1-micro")
                .ipConfiguration(DatabaseInstanceSettingsIpConfigurationArgs.builder()
                    .ipv4Enabled(false)
                    .privateNetwork(privateNetwork.selfLink())
                    .enablePrivatePathForGoogleCloudServices(true)
                    .build())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(privateVpcConnection)
                .build());

    }
}
```
```yaml
resources:
  privateNetwork:
    type: gcp:compute:Network
    name: private_network
    properties:
      name: private-network
  privateIpAddress:
    type: gcp:compute:GlobalAddress
    name: private_ip_address
    properties:
      name: private-ip-address
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${privateNetwork.id}
  privateVpcConnection:
    type: gcp:servicenetworking:Connection
    name: private_vpc_connection
    properties:
      network: ${privateNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${privateIpAddress.name}
  dbNameSuffix:
    type: random:RandomId
    name: db_name_suffix
    properties:
      byteLength: 4
  instance:
    type: gcp:sql:DatabaseInstance
    properties:
      name: private-instance-${dbNameSuffix.hex}
      region: us-central1
      databaseVersion: MYSQL_5_7
      settings:
        tier: db-f1-micro
        ipConfiguration:
          ipv4Enabled: false
          privateNetwork: ${privateNetwork.selfLink}
          enablePrivatePathForGoogleCloudServices: true
    options:
      dependsOn:
        - ${privateVpcConnection}
```
<!--End PulumiCodeChooser -->

### ENTERPRISE_PLUS Instance with data_cache_config

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const main = new gcp.sql.DatabaseInstance("main", {
    name: "enterprise-plus-main-instance",
    databaseVersion: "MYSQL_8_0_31",
    settings: {
        tier: "db-perf-optimized-N-2",
        edition: "ENTERPRISE_PLUS",
        dataCacheConfig: {
            dataCacheEnabled: true,
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

main = gcp.sql.DatabaseInstance("main",
    name="enterprise-plus-main-instance",
    database_version="MYSQL_8_0_31",
    settings={
        "tier": "db-perf-optimized-N-2",
        "edition": "ENTERPRISE_PLUS",
        "data_cache_config": {
            "data_cache_enabled": True,
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var main = new Gcp.Sql.DatabaseInstance("main", new()
    {
        Name = "enterprise-plus-main-instance",
        DatabaseVersion = "MYSQL_8_0_31",
        Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
        {
            Tier = "db-perf-optimized-N-2",
            Edition = "ENTERPRISE_PLUS",
            DataCacheConfig = new Gcp.Sql.Inputs.DatabaseInstanceSettingsDataCacheConfigArgs
            {
                DataCacheEnabled = true,
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
			Name:            pulumi.String("enterprise-plus-main-instance"),
			DatabaseVersion: pulumi.String("MYSQL_8_0_31"),
			Settings: &sql.DatabaseInstanceSettingsArgs{
				Tier:    pulumi.String("db-perf-optimized-N-2"),
				Edition: pulumi.String("ENTERPRISE_PLUS"),
				DataCacheConfig: &sql.DatabaseInstanceSettingsDataCacheConfigArgs{
					DataCacheEnabled: pulumi.Bool(true),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.DatabaseInstance;
import com.pulumi.gcp.sql.DatabaseInstanceArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsDataCacheConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
            .name("enterprise-plus-main-instance")
            .databaseVersion("MYSQL_8_0_31")
            .settings(DatabaseInstanceSettingsArgs.builder()
                .tier("db-perf-optimized-N-2")
                .edition("ENTERPRISE_PLUS")
                .dataCacheConfig(DatabaseInstanceSettingsDataCacheConfigArgs.builder()
                    .dataCacheEnabled(true)
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  main:
    type: gcp:sql:DatabaseInstance
    properties:
      name: enterprise-plus-main-instance
      databaseVersion: MYSQL_8_0_31
      settings:
        tier: db-perf-optimized-N-2
        edition: ENTERPRISE_PLUS
        dataCacheConfig:
          dataCacheEnabled: true
```
<!--End PulumiCodeChooser -->

### Cloud SQL Instance with PSC connectivity

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const main = new gcp.sql.DatabaseInstance("main", {
    name: "psc-enabled-main-instance",
    databaseVersion: "MYSQL_8_0",
    settings: {
        tier: "db-f1-micro",
        ipConfiguration: {
            pscConfigs: [{
                pscEnabled: true,
                allowedConsumerProjects: ["allowed-consumer-project-name"],
            }],
            ipv4Enabled: false,
        },
        backupConfiguration: {
            enabled: true,
            binaryLogEnabled: true,
        },
        availabilityType: "REGIONAL",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

main = gcp.sql.DatabaseInstance("main",
    name="psc-enabled-main-instance",
    database_version="MYSQL_8_0",
    settings={
        "tier": "db-f1-micro",
        "ip_configuration": {
            "psc_configs": [{
                "psc_enabled": True,
                "allowed_consumer_projects": ["allowed-consumer-project-name"],
            }],
            "ipv4_enabled": False,
        },
        "backup_configuration": {
            "enabled": True,
            "binary_log_enabled": True,
        },
        "availability_type": "REGIONAL",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var main = new Gcp.Sql.DatabaseInstance("main", new()
    {
        Name = "psc-enabled-main-instance",
        DatabaseVersion = "MYSQL_8_0",
        Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
        {
            Tier = "db-f1-micro",
            IpConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationArgs
            {
                PscConfigs = new[]
                {
                    new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationPscConfigArgs
                    {
                        PscEnabled = true,
                        AllowedConsumerProjects = new[]
                        {
                            "allowed-consumer-project-name",
                        },
                    },
                },
                Ipv4Enabled = false,
            },
            BackupConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsBackupConfigurationArgs
            {
                Enabled = true,
                BinaryLogEnabled = true,
            },
            AvailabilityType = "REGIONAL",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
			Name:            pulumi.String("psc-enabled-main-instance"),
			DatabaseVersion: pulumi.String("MYSQL_8_0"),
			Settings: &sql.DatabaseInstanceSettingsArgs{
				Tier: pulumi.String("db-f1-micro"),
				IpConfiguration: &sql.DatabaseInstanceSettingsIpConfigurationArgs{
					PscConfigs: sql.DatabaseInstanceSettingsIpConfigurationPscConfigArray{
						&sql.DatabaseInstanceSettingsIpConfigurationPscConfigArgs{
							PscEnabled: pulumi.Bool(true),
							AllowedConsumerProjects: pulumi.StringArray{
								pulumi.String("allowed-consumer-project-name"),
							},
						},
					},
					Ipv4Enabled: pulumi.Bool(false),
				},
				BackupConfiguration: &sql.DatabaseInstanceSettingsBackupConfigurationArgs{
					Enabled:          pulumi.Bool(true),
					BinaryLogEnabled: pulumi.Bool(true),
				},
				AvailabilityType: pulumi.String("REGIONAL"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.DatabaseInstance;
import com.pulumi.gcp.sql.DatabaseInstanceArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsIpConfigurationArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsBackupConfigurationArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
            .name("psc-enabled-main-instance")
            .databaseVersion("MYSQL_8_0")
            .settings(DatabaseInstanceSettingsArgs.builder()
                .tier("db-f1-micro")
                .ipConfiguration(DatabaseInstanceSettingsIpConfigurationArgs.builder()
                    .pscConfigs(DatabaseInstanceSettingsIpConfigurationPscConfigArgs.builder()
                        .pscEnabled(true)
                        .allowedConsumerProjects("allowed-consumer-project-name")
                        .build())
                    .ipv4Enabled(false)
                    .build())
                .backupConfiguration(DatabaseInstanceSettingsBackupConfigurationArgs.builder()
                    .enabled(true)
                    .binaryLogEnabled(true)
                    .build())
                .availabilityType("REGIONAL")
                .build())
            .build());

    }
}
```
```yaml
resources:
  main:
    type: gcp:sql:DatabaseInstance
    properties:
      name: psc-enabled-main-instance
      databaseVersion: MYSQL_8_0
      settings:
        tier: db-f1-micro
        ipConfiguration:
          pscConfigs:
            - pscEnabled: true
              allowedConsumerProjects:
                - allowed-consumer-project-name
          ipv4Enabled: false
        backupConfiguration:
          enabled: true
          binaryLogEnabled: true
        availabilityType: REGIONAL
```
<!--End PulumiCodeChooser -->

### Cloud SQL Instance with PSC auto connections

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const main = new gcp.sql.DatabaseInstance("main", {
    name: "psc-enabled-main-instance",
    databaseVersion: "MYSQL_8_0",
    settings: {
        tier: "db-f1-micro",
        ipConfiguration: {
            pscConfigs: [{
                pscEnabled: true,
                allowedConsumerProjects: ["allowed-consumer-project-name"],
                pscAutoConnections: [{
                    consumerNetwork: "network-name",
                    consumerServiceProjectId: "project-id",
                }],
            }],
            ipv4Enabled: false,
        },
        backupConfiguration: {
            enabled: true,
            binaryLogEnabled: true,
        },
        availabilityType: "REGIONAL",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

main = gcp.sql.DatabaseInstance("main",
    name="psc-enabled-main-instance",
    database_version="MYSQL_8_0",
    settings={
        "tier": "db-f1-micro",
        "ip_configuration": {
            "psc_configs": [{
                "psc_enabled": True,
                "allowed_consumer_projects": ["allowed-consumer-project-name"],
                "psc_auto_connections": [{
                    "consumer_network": "network-name",
                    "consumer_service_project_id": "project-id",
                }],
            }],
            "ipv4_enabled": False,
        },
        "backup_configuration": {
            "enabled": True,
            "binary_log_enabled": True,
        },
        "availability_type": "REGIONAL",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var main = new Gcp.Sql.DatabaseInstance("main", new()
    {
        Name = "psc-enabled-main-instance",
        DatabaseVersion = "MYSQL_8_0",
        Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
        {
            Tier = "db-f1-micro",
            IpConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationArgs
            {
                PscConfigs = new[]
                {
                    new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationPscConfigArgs
                    {
                        PscEnabled = true,
                        AllowedConsumerProjects = new[]
                        {
                            "allowed-consumer-project-name",
                        },
                        PscAutoConnections = new[]
                        {
                            new Gcp.Sql.Inputs.DatabaseInstanceSettingsIpConfigurationPscConfigPscAutoConnectionArgs
                            {
                                ConsumerNetwork = "network-name",
                                ConsumerServiceProjectId = "project-id",
                            },
                        },
                    },
                },
                Ipv4Enabled = false,
            },
            BackupConfiguration = new Gcp.Sql.Inputs.DatabaseInstanceSettingsBackupConfigurationArgs
            {
                Enabled = true,
                BinaryLogEnabled = true,
            },
            AvailabilityType = "REGIONAL",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
			Name:            pulumi.String("psc-enabled-main-instance"),
			DatabaseVersion: pulumi.String("MYSQL_8_0"),
			Settings: &sql.DatabaseInstanceSettingsArgs{
				Tier: pulumi.String("db-f1-micro"),
				IpConfiguration: &sql.DatabaseInstanceSettingsIpConfigurationArgs{
					PscConfigs: sql.DatabaseInstanceSettingsIpConfigurationPscConfigArray{
						&sql.DatabaseInstanceSettingsIpConfigurationPscConfigArgs{
							PscEnabled: pulumi.Bool(true),
							AllowedConsumerProjects: pulumi.StringArray{
								pulumi.String("allowed-consumer-project-name"),
							},
							PscAutoConnections: sql.DatabaseInstanceSettingsIpConfigurationPscConfigPscAutoConnectionArray{
								&sql.DatabaseInstanceSettingsIpConfigurationPscConfigPscAutoConnectionArgs{
									ConsumerNetwork:          pulumi.String("network-name"),
									ConsumerServiceProjectId: pulumi.String("project-id"),
								},
							},
						},
					},
					Ipv4Enabled: pulumi.Bool(false),
				},
				BackupConfiguration: &sql.DatabaseInstanceSettingsBackupConfigurationArgs{
					Enabled:          pulumi.Bool(true),
					BinaryLogEnabled: pulumi.Bool(true),
				},
				AvailabilityType: pulumi.String("REGIONAL"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.DatabaseInstance;
import com.pulumi.gcp.sql.DatabaseInstanceArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsIpConfigurationArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsBackupConfigurationArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
            .name("psc-enabled-main-instance")
            .databaseVersion("MYSQL_8_0")
            .settings(DatabaseInstanceSettingsArgs.builder()
                .tier("db-f1-micro")
                .ipConfiguration(DatabaseInstanceSettingsIpConfigurationArgs.builder()
                    .pscConfigs(DatabaseInstanceSettingsIpConfigurationPscConfigArgs.builder()
                        .pscEnabled(true)
                        .allowedConsumerProjects("allowed-consumer-project-name")
                        .pscAutoConnections(DatabaseInstanceSettingsIpConfigurationPscConfigPscAutoConnectionArgs.builder()
                            .consumerNetwork("network-name")
                            .consumerServiceProjectId("project-id")
                            .build())
                        .build())
                    .ipv4Enabled(false)
                    .build())
                .backupConfiguration(DatabaseInstanceSettingsBackupConfigurationArgs.builder()
                    .enabled(true)
                    .binaryLogEnabled(true)
                    .build())
                .availabilityType("REGIONAL")
                .build())
            .build());

    }
}
```
```yaml
resources:
  main:
    type: gcp:sql:DatabaseInstance
    properties:
      name: psc-enabled-main-instance
      databaseVersion: MYSQL_8_0
      settings:
        tier: db-f1-micro
        ipConfiguration:
          pscConfigs:
            - pscEnabled: true
              allowedConsumerProjects:
                - allowed-consumer-project-name
              pscAutoConnections:
                - consumerNetwork: network-name
                  consumerServiceProjectId: project-id
          ipv4Enabled: false
        backupConfiguration:
          enabled: true
          binaryLogEnabled: true
        availabilityType: REGIONAL
```
<!--End PulumiCodeChooser -->

## Switchover (SQL Server Only)

Users can perform a switchover on any direct `cascadable` replica by following the steps below.

  ~>**WARNING:** Failure to follow these steps can lead to data loss (You will be warned during plan stage). To prevent data loss during a switchover, please verify your plan with the checklist below.

For a more in-depth walkthrough with example code, see the Switchover Guide

### Steps to Invoke Switchover

Create a `cascadable` replica in a different region from the primary (`cascadable_replica` is set to true in `replica_configuration`)

#### Invoking switchover in the replica resource:
1. Change instance_type from `READ_REPLICA_INSTANCE` to `CLOUD_SQL_INSTANCE`
2. Remove `master_instance_name`
3. Remove `replica_configuration`
4. Add current primary's name to the replica's `replica_names` list

#### Updating the primary resource:
1. Change `instance_type` from `CLOUD_SQL_INSTANCE` to `READ_REPLICA_INSTANCE`
2. Set `master_instance_name` to the original replica (which will be primary after switchover)
3. Set `replica_configuration` and set `cascadable_replica` to `true`
4. Remove original replica from `replica_names`

    > **NOTE**: Do **not** delete the replica_names field, even if it has no replicas remaining. Set replica_names = [ ] to indicate it having no replicas.

#### Plan and verify that:
- `pulumi preview` outputs **"0 to add, 0 to destroy"**
- `pulumi preview` does not say **"must be replaced"** for any resource
- Every resource **"will be updated in-place"**
- Only the 2 instances involved in switchover have planned changes
- (Recommended) Use `deletion_protection` on instances as a safety measure

## Import

Database instances can be imported using one of any of these accepted formats:

* `projects/{{project}}/instances/{{name}}`

* `{{project}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Database instances can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:sql/databaseInstance:DatabaseInstance default projects/{{project}}/instances/{{name}}
```

```sh
$ pulumi import gcp:sql/databaseInstance:DatabaseInstance default {{project}}/{{name}}
```

```sh
$ pulumi import gcp:sql/databaseInstance:DatabaseInstance default {{name}}
```

config and set on the server.

When importing, double-check that your config has all the fields set that you expect- just seeing

no diff isn't sufficient to know that your config could reproduce the imported resource.

╓
cloneWBU:S
Q
sqlDatabaseInstanceClone3gcp:sql/DatabaseInstanceClone:DatabaseInstanceCloneєThe context needed to create this instance as a clone of another instance. When this field is set during
resource creation, this provider will attempt to clone another instance as indicated in the context. The
configuration is detailed below.
ц
databaseVersion" ╬The MySQL, PostgreSQL or
SQL Server version to use. Supported values include `MYSQL_5_6`,
`MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
`POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `POSTGRES_15`, `POSTGRES_16`, `POSTGRES_17`,
`SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
`SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
`SQLSERVER_2019_WEB`.
[Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
includes an up-to-date reference of supported versions.
р
deletionProtectionB
 ├Whether or not to allow the provider to destroy the instance. Unless this field is set to false
in state, a `destroy` or `update` command that deletes the instance will fail. Defaults to `true`.
└
encryptionKeyNameB" дThe full path to the encryption key used for the CMEK disk encryption.  Setting
up disk encryption currently requires manual steps outside of this provider.
The provided key must be in the same region as the SQL instance.  In order
to use this feature, a special kind of service account must be created and
granted permission on this key.  This step can currently only be done
manually, please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#service-account).
That service account needs the `Cloud KMS > Cloud KMS CryptoKey Encrypter/Decrypter` role on your
key - please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#grantkey).
╡
instanceTypeB" ЮThe type of the instance. The supported values are `SQL_INSTANCE_TYPE_UNSPECIFIED`, `CLOUD_SQL_INSTANCE`, `ON_PREMISES_INSTANCE` and `READ_REPLICA_INSTANCE`.
Ъ
maintenanceVersionB" ¤The current software version on the instance. This attribute can not be set during creation. Refer to `available_maintenance_versions` attribute to see what `maintenance_version` are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a `maintenance_version` value that is older than the current one on the instance will be ignored.
╙
masterInstanceNameB" ╢The name of the existing instance that will
act as the master in the replication setup. Note, this requires the master to
have `binary_log_enabled` set, as well as existing backups.
Ш
nameB" ЙThe name of the instance. If the name is left
blank, the provider will randomly generate one when the instance is first
created. This is done because after a name is used, it cannot be reused for
up to [one week](https://cloud.google.com/sql/docs/delete-instance).
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
Я
regionB" ОThe region the instance will sit in. If a region is not provided in the resource definition,
the provider region will be used instead.

- - -
щ
replicaConfigurationЖBГ:А
~
sql$DatabaseInstanceReplicaConfigurationQgcp:sql/DatabaseInstanceReplicaConfiguration:DatabaseInstanceReplicaConfigurationHThe configuration for replication. The
configuration is detailed below.
?
replicaNamesB*" 'List of replica names. Can be updated.
╧
restoreBackupContextЖBГ:А
~
sql$DatabaseInstanceRestoreBackupContextQgcp:sql/DatabaseInstanceRestoreBackupContext:DatabaseInstanceRestoreBackupContextнThe context needed to restore the database to a backup run. This field will
cause the provider to trigger the database to restore from the backup run indicated. The configuration is detailed below.
**NOTE:** Restoring from a backup is an imperative action and not recommended via this provider. Adding or modifying this
block during resource creation/update will trigger the restore action after the resource is created/updated.
Y
rootPasswordB" CInitial root password. Can be updated. Required for MS SQL Server.
┘
settings`B^:\
Z
sqlDatabaseInstanceSettings9gcp:sql/DatabaseInstanceSettings:DatabaseInstanceSettingskThe settings to use for the database. The
configuration is detailed below. Required if `clone` is not set.
"g
availableMaintenanceVersions*" AThe list of all maintenance versions applicable on the instance.
"╓
cloneWBU:S
Q
sqlDatabaseInstanceClone3gcp:sql/DatabaseInstanceClone:DatabaseInstanceCloneєThe context needed to create this instance as a clone of another instance. When this field is set during
resource creation, this provider will attempt to clone another instance as indicated in the context. The
configuration is detailed below.
"╧
connectionName" ╕The connection name of the instance to be used in
connection strings. For example, when connecting with [Cloud SQL Proxy](https://cloud.google.com/sql/docs/mysql/connect-admin-proxy).
"ц
databaseVersion" ╬The MySQL, PostgreSQL or
SQL Server version to use. Supported values include `MYSQL_5_6`,
`MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`,`POSTGRES_10`, `POSTGRES_11`,
`POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`, `POSTGRES_15`, `POSTGRES_16`, `POSTGRES_17`,
`SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`.
`SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`,
`SQLSERVER_2019_WEB`.
[Database Version Policies](https://cloud.google.com/sql/docs/db-versions)
includes an up-to-date reference of supported versions.
"р
deletionProtectionB
 ├Whether or not to allow the provider to destroy the instance. Unless this field is set to false
in state, a `destroy` or `update` command that deletes the instance will fail. Defaults to `true`.
" 
dnsName" яThe DNS name of the instance. See [Connect to an instance using Private Service Connect](https://cloud.google.com/sql/docs/mysql/configure-private-service-connect#view-summary-information-cloud-sql-instances-psc-enabled) for more details.
"╛
encryptionKeyName" дThe full path to the encryption key used for the CMEK disk encryption.  Setting
up disk encryption currently requires manual steps outside of this provider.
The provided key must be in the same region as the SQL instance.  In order
to use this feature, a special kind of service account must be created and
granted permission on this key.  This step can currently only be done
manually, please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#service-account).
That service account needs the `Cloud KMS > Cloud KMS CryptoKey Encrypter/Decrypter` role on your
key - please see [this step](https://cloud.google.com/sql/docs/mysql/configure-cmek#grantkey).
"C
firstIpAddress" -The first IPv4 address of any type assigned.
"│
instanceType" ЮThe type of the instance. The supported values are `SQL_INSTANCE_TYPE_UNSPECIFIED`, `CLOUD_SQL_INSTANCE`, `ON_PREMISES_INSTANCE` and `READ_REPLICA_INSTANCE`.
"r
ipAddressesc*a:_
]
sqlDatabaseInstanceIpAddress;gcp:sql/DatabaseInstanceIpAddress:DatabaseInstanceIpAddress"Ш
maintenanceVersion" ¤The current software version on the instance. This attribute can not be set during creation. Refer to `available_maintenance_versions` attribute to see what `maintenance_version` are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a `maintenance_version` value that is older than the current one on the instance will be ignored.
"╤
masterInstanceName" ╢The name of the existing instance that will
act as the master in the replication setup. Note, this requires the master to
have `binary_log_enabled` set, as well as existing backups.
"Ц
name" ЙThe name of the instance. If the name is left
blank, the provider will randomly generate one when the instance is first
created. This is done because after a name is used, it cannot be reused for
up to [one week](https://cloud.google.com/sql/docs/delete-instance).
"M
privateIpAddress" 5The first private (`PRIVATE`) IPv4 address assigned.
"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"_
pscServiceAttachmentLink" ?the URI that points to the service attachment of the instance.
"K
publicIpAddress" 4The first public (`PRIMARY`) IPv4 address assigned.
"Э
region" ОThe region the instance will sit in. If a region is not provided in the resource definition,
the provider region will be used instead.

- - -
"ц
replicaConfigurationГ:А
~
sql$DatabaseInstanceReplicaConfigurationQgcp:sql/DatabaseInstanceReplicaConfiguration:DatabaseInstanceReplicaConfigurationHThe configuration for replication. The
configuration is detailed below.
"=
replicaNames*" 'List of replica names. Can be updated.
"╧
restoreBackupContextЖBГ:А
~
sql$DatabaseInstanceRestoreBackupContextQgcp:sql/DatabaseInstanceRestoreBackupContext:DatabaseInstanceRestoreBackupContextнThe context needed to restore the database to a backup run. This field will
cause the provider to trigger the database to restore from the backup run indicated. The configuration is detailed below.
**NOTE:** Restoring from a backup is an imperative action and not recommended via this provider. Adding or modifying this
block during resource creation/update will trigger the restore action after the resource is created/updated.
"Y
rootPasswordB" CInitial root password. Can be updated. Required for MS SQL Server.
"1
selfLink" !The URI of the created resource.
"}
serverCaCertsl*j:h
f
sqlDatabaseInstanceServerCaCertAgcp:sql/DatabaseInstanceServerCaCert:DatabaseInstanceServerCaCert"^
serviceAccountEmailAddress" <The service account email address assigned to the
instance.
"╫
settings^:\
Z
sqlDatabaseInstanceSettings9gcp:sql/DatabaseInstanceSettings:DatabaseInstanceSettingskThe settings to use for the database. The
configuration is detailed below. Required if `clone` is not set.
*╘[
f
sqlSourceRepresentationInstanceAgcp:sql/sourceRepresentationInstance:SourceRepresentationInstance╣@A source representation instance is a Cloud SQL instance that represents
the source database server to the Cloud SQL replica. It is visible in the
Cloud Console and appears the same as a regular Cloud SQL instance, but it
contains no data, requires no configuration or maintenance, and does not
affect billing. You cannot update the source representation instance.





## Example Usage

### Sql Source Representation Instance Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.sql.SourceRepresentationInstance("instance", {
    name: "my-instance",
    region: "us-central1",
    databaseVersion: "MYSQL_8_0",
    host: "10.20.30.40",
    port: 3306,
    username: "some-user",
    password: "password-for-the-user",
    dumpFilePath: "gs://replica-bucket/source-database.sql.gz",
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.sql.SourceRepresentationInstance("instance",
    name="my-instance",
    region="us-central1",
    database_version="MYSQL_8_0",
    host="10.20.30.40",
    port=3306,
    username="some-user",
    password="password-for-the-user",
    dump_file_path="gs://replica-bucket/source-database.sql.gz")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Sql.SourceRepresentationInstance("instance", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        DatabaseVersion = "MYSQL_8_0",
        Host = "10.20.30.40",
        Port = 3306,
        Username = "some-user",
        Password = "password-for-the-user",
        DumpFilePath = "gs://replica-bucket/source-database.sql.gz",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.NewSourceRepresentationInstance(ctx, "instance", &sql.SourceRepresentationInstanceArgs{
			Name:            pulumi.String("my-instance"),
			Region:          pulumi.String("us-central1"),
			DatabaseVersion: pulumi.String("MYSQL_8_0"),
			Host:            pulumi.String("10.20.30.40"),
			Port:            pulumi.Int(3306),
			Username:        pulumi.String("some-user"),
			Password:        pulumi.String("password-for-the-user"),
			DumpFilePath:    pulumi.String("gs://replica-bucket/source-database.sql.gz"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.SourceRepresentationInstance;
import com.pulumi.gcp.sql.SourceRepresentationInstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new SourceRepresentationInstance("instance", SourceRepresentationInstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .databaseVersion("MYSQL_8_0")
            .host("10.20.30.40")
            .port(3306)
            .username("some-user")
            .password("password-for-the-user")
            .dumpFilePath("gs://replica-bucket/source-database.sql.gz")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:sql:SourceRepresentationInstance
    properties:
      name: my-instance
      region: us-central1
      databaseVersion: MYSQL_8_0
      host: 10.20.30.40
      port: 3306
      username: some-user
      password: password-for-the-user
      dumpFilePath: gs://replica-bucket/source-database.sql.gz
```
<!--End PulumiCodeChooser -->
### Sql Source Representation Instance Postgres


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const instance = new gcp.sql.SourceRepresentationInstance("instance", {
    name: "my-instance",
    region: "us-central1",
    databaseVersion: "POSTGRES_9_6",
    host: "10.20.30.40",
    port: 3306,
    username: "some-user",
    password: "password-for-the-user",
    dumpFilePath: "gs://replica-bucket/source-database.sql.gz",
});
```
```python
import pulumi
import pulumi_gcp as gcp

instance = gcp.sql.SourceRepresentationInstance("instance",
    name="my-instance",
    region="us-central1",
    database_version="POSTGRES_9_6",
    host="10.20.30.40",
    port=3306,
    username="some-user",
    password="password-for-the-user",
    dump_file_path="gs://replica-bucket/source-database.sql.gz")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var instance = new Gcp.Sql.SourceRepresentationInstance("instance", new()
    {
        Name = "my-instance",
        Region = "us-central1",
        DatabaseVersion = "POSTGRES_9_6",
        Host = "10.20.30.40",
        Port = 3306,
        Username = "some-user",
        Password = "password-for-the-user",
        DumpFilePath = "gs://replica-bucket/source-database.sql.gz",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.NewSourceRepresentationInstance(ctx, "instance", &sql.SourceRepresentationInstanceArgs{
			Name:            pulumi.String("my-instance"),
			Region:          pulumi.String("us-central1"),
			DatabaseVersion: pulumi.String("POSTGRES_9_6"),
			Host:            pulumi.String("10.20.30.40"),
			Port:            pulumi.Int(3306),
			Username:        pulumi.String("some-user"),
			Password:        pulumi.String("password-for-the-user"),
			DumpFilePath:    pulumi.String("gs://replica-bucket/source-database.sql.gz"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.SourceRepresentationInstance;
import com.pulumi.gcp.sql.SourceRepresentationInstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var instance = new SourceRepresentationInstance("instance", SourceRepresentationInstanceArgs.builder()
            .name("my-instance")
            .region("us-central1")
            .databaseVersion("POSTGRES_9_6")
            .host("10.20.30.40")
            .port(3306)
            .username("some-user")
            .password("password-for-the-user")
            .dumpFilePath("gs://replica-bucket/source-database.sql.gz")
            .build());

    }
}
```
```yaml
resources:
  instance:
    type: gcp:sql:SourceRepresentationInstance
    properties:
      name: my-instance
      region: us-central1
      databaseVersion: POSTGRES_9_6
      host: 10.20.30.40
      port: 3306
      username: some-user
      password: password-for-the-user
      dumpFilePath: gs://replica-bucket/source-database.sql.gz
```
<!--End PulumiCodeChooser -->

## Import

SourceRepresentationInstance can be imported using any of these accepted formats:

* `projects/{{project}}/instances/{{name}}`

* `{{project}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, SourceRepresentationInstance can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance default projects/{{project}}/instances/{{name}}
```

```sh
$ pulumi import gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance default {{project}}/{{name}}
```

```sh
$ pulumi import gcp:sql/sourceRepresentationInstance:SourceRepresentationInstance default {{name}}
```

z
caCertificateB" cThe CA certificate on the external server. Include only if SSL/TLS is used on the external server.
│
clientCertificateB" ЧThe client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
─
	clientKeyB" ░The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
щ
databaseVersion" ╤The MySQL version running on your source database server.
Possible values are: `MYSQL_5_6`, `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11`, `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`.
\
dumpFilePathB" FA file in the bucket that contains the data from the external server.
╣
host" мThe IPv4 address and port for the external server, or the the DNS address for the external server. If the external server is hosted on Cloud SQL, the port is 5432.


- - -
e
nameB" WThe name of the source representation instance. Use any valid Cloud SQL instance name.
Н
passwordB" {The password for the replication user account.
**Note**: This property is sensitive and will not be displayed in the plan.
_
portB QThe externally accessible port for the source database server.
Defaults to 3306.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
|
regionB" lThe Region in which the created instance should reside.
If it is not provided, the provider region is used.
G
usernameB" 5The replication user account on the external server.
"z
caCertificateB" cThe CA certificate on the external server. Include only if SSL/TLS is used on the external server.
"│
clientCertificateB" ЧThe client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
"─
	clientKeyB" ░The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
"щ
databaseVersion" ╤The MySQL version running on your source database server.
Possible values are: `MYSQL_5_6`, `MYSQL_5_7`, `MYSQL_8_0`, `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11`, `POSTGRES_12`, `POSTGRES_13`, `POSTGRES_14`.
"\
dumpFilePathB" FA file in the bucket that contains the data from the external server.
"╣
host" мThe IPv4 address and port for the external server, or the the DNS address for the external server. If the external server is hosted on Cloud SQL, the port is 5432.


- - -
"c
name" WThe name of the source representation instance. Use any valid Cloud SQL instance name.
"Н
passwordB" {The password for the replication user account.
**Note**: This property is sensitive and will not be displayed in the plan.
"_
portB QThe externally accessible port for the source database server.
Defaults to 3306.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"z
region" lThe Region in which the created instance should reside.
If it is not provided, the provider region is used.
"G
usernameB" 5The replication user account on the external server.
*Е3
'
sqlSslCertgcp:sql/sslCert:SslCert╩'Creates a new Google SQL SSL Cert on a Google SQL Instance. For more information, see the [official documentation](https://cloud.google.com/sql/), or the [JSON API](https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/sslCerts).



## Example Usage

Example creating a SQL Client Certificate.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as random from "@pulumi/random";

const dbNameSuffix = new random.RandomId("db_name_suffix", {byteLength: 4});
const main = new gcp.sql.DatabaseInstance("main", {
    name: pulumi.interpolate`main-instance-${dbNameSuffix.hex}`,
    databaseVersion: "MYSQL_5_7",
    settings: {
        tier: "db-f1-micro",
    },
});
const clientCert = new gcp.sql.SslCert("client_cert", {
    commonName: "client-name",
    instance: main.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_random as random

db_name_suffix = random.RandomId("db_name_suffix", byte_length=4)
main = gcp.sql.DatabaseInstance("main",
    name=db_name_suffix.hex.apply(lambda hex: f"main-instance-{hex}"),
    database_version="MYSQL_5_7",
    settings={
        "tier": "db-f1-micro",
    })
client_cert = gcp.sql.SslCert("client_cert",
    common_name="client-name",
    instance=main.name)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Random = Pulumi.Random;

return await Deployment.RunAsync(() => 
{
    var dbNameSuffix = new Random.RandomId("db_name_suffix", new()
    {
        ByteLength = 4,
    });

    var main = new Gcp.Sql.DatabaseInstance("main", new()
    {
        Name = dbNameSuffix.Hex.Apply(hex => $"main-instance-{hex}"),
        DatabaseVersion = "MYSQL_5_7",
        Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
        {
            Tier = "db-f1-micro",
        },
    });

    var clientCert = new Gcp.Sql.SslCert("client_cert", new()
    {
        CommonName = "client-name",
        Instance = main.Name,
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		dbNameSuffix, err := random.NewRandomId(ctx, "db_name_suffix", &random.RandomIdArgs{
			ByteLength: pulumi.Int(4),
		})
		if err != nil {
			return err
		}
		main, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
			Name: dbNameSuffix.Hex.ApplyT(func(hex string) (string, error) {
				return fmt.Sprintf("main-instance-%v", hex), nil
			}).(pulumi.StringOutput),
			DatabaseVersion: pulumi.String("MYSQL_5_7"),
			Settings: &sql.DatabaseInstanceSettingsArgs{
				Tier: pulumi.String("db-f1-micro"),
			},
		})
		if err != nil {
			return err
		}
		_, err = sql.NewSslCert(ctx, "client_cert", &sql.SslCertArgs{
			CommonName: pulumi.String("client-name"),
			Instance:   main.Name,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.random.RandomId;
import com.pulumi.random.RandomIdArgs;
import com.pulumi.gcp.sql.DatabaseInstance;
import com.pulumi.gcp.sql.DatabaseInstanceArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import com.pulumi.gcp.sql.SslCert;
import com.pulumi.gcp.sql.SslCertArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
            .byteLength(4)
            .build());

        var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
            .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
            .databaseVersion("MYSQL_5_7")
            .settings(DatabaseInstanceSettingsArgs.builder()
                .tier("db-f1-micro")
                .build())
            .build());

        var clientCert = new SslCert("clientCert", SslCertArgs.builder()
            .commonName("client-name")
            .instance(main.name())
            .build());

    }
}
```
```yaml
resources:
  dbNameSuffix:
    type: random:RandomId
    name: db_name_suffix
    properties:
      byteLength: 4
  main:
    type: gcp:sql:DatabaseInstance
    properties:
      name: main-instance-${dbNameSuffix.hex}
      databaseVersion: MYSQL_5_7
      settings:
        tier: db-f1-micro
  clientCert:
    type: gcp:sql:SslCert
    name: client_cert
    properties:
      commonName: client-name
      instance: ${main.name}
```
<!--End PulumiCodeChooser -->

## Import

Since the contents of the certificate cannot be accessed after its creation, this resource cannot be imported.

к

commonName" ЧThe common name to be used in the certificate to identify the
client. Constrained to [a-zA-Z.-_ ]+. Changing this forces a new resource to be created.
g
instance" WThe name of the Cloud SQL instance. Changing this
forces a new resource to be created.
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"E
cert" 9The actual certificate data for this client certificate.
"O
certSerialNumber" 7The serial number extracted from the certificate data.
"к

commonName" ЧThe common name to be used in the certificate to identify the
client. Constrained to [a-zA-Z.-_ ]+. Changing this forces a new resource to be created.
"v

createTime" dThe time when the certificate was created in RFC 3339 format,
for example 2012-11-15T16:19:00.094Z.
"v
expirationTime" `The time when the certificate expires in RFC 3339 format,
for example 2012-11-15T16:19:00.094Z.
"g
instance" WThe name of the Cloud SQL instance. Changing this
forces a new resource to be created.
"J

privateKey" 8The private key associated with the client certificate.
"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"S
serverCaCert" ?The CA cert of the server this client cert was generated from.
"@
sha1Fingerprint" )The SHA1 Fingerprint of the certificate.
*Щ╖

sqlUsergcp:sql/user:UserрЪCreates a new Google SQL User on a Google SQL User Instance. For more information, see the [official documentation](https://cloud.google.com/sql/), or the [JSON API](https://cloud.google.com/sql/docs/admin-api/v1beta4/users).



## Example Usage

Example creating a SQL User.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as random from "@pulumi/random";

const dbNameSuffix = new random.RandomId("db_name_suffix", {byteLength: 4});
const main = new gcp.sql.DatabaseInstance("main", {
    name: pulumi.interpolate`main-instance-${dbNameSuffix.hex}`,
    databaseVersion: "MYSQL_5_7",
    settings: {
        tier: "db-f1-micro",
    },
});
const users = new gcp.sql.User("users", {
    name: "me",
    instance: main.name,
    host: "me.com",
    password: "changeme",
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_random as random

db_name_suffix = random.RandomId("db_name_suffix", byte_length=4)
main = gcp.sql.DatabaseInstance("main",
    name=db_name_suffix.hex.apply(lambda hex: f"main-instance-{hex}"),
    database_version="MYSQL_5_7",
    settings={
        "tier": "db-f1-micro",
    })
users = gcp.sql.User("users",
    name="me",
    instance=main.name,
    host="me.com",
    password="changeme")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Random = Pulumi.Random;

return await Deployment.RunAsync(() => 
{
    var dbNameSuffix = new Random.RandomId("db_name_suffix", new()
    {
        ByteLength = 4,
    });

    var main = new Gcp.Sql.DatabaseInstance("main", new()
    {
        Name = dbNameSuffix.Hex.Apply(hex => $"main-instance-{hex}"),
        DatabaseVersion = "MYSQL_5_7",
        Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
        {
            Tier = "db-f1-micro",
        },
    });

    var users = new Gcp.Sql.User("users", new()
    {
        Name = "me",
        Instance = main.Name,
        Host = "me.com",
        Password = "changeme",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		dbNameSuffix, err := random.NewRandomId(ctx, "db_name_suffix", &random.RandomIdArgs{
			ByteLength: pulumi.Int(4),
		})
		if err != nil {
			return err
		}
		main, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
			Name: dbNameSuffix.Hex.ApplyT(func(hex string) (string, error) {
				return fmt.Sprintf("main-instance-%v", hex), nil
			}).(pulumi.StringOutput),
			DatabaseVersion: pulumi.String("MYSQL_5_7"),
			Settings: &sql.DatabaseInstanceSettingsArgs{
				Tier: pulumi.String("db-f1-micro"),
			},
		})
		if err != nil {
			return err
		}
		_, err = sql.NewUser(ctx, "users", &sql.UserArgs{
			Name:     pulumi.String("me"),
			Instance: main.Name,
			Host:     pulumi.String("me.com"),
			Password: pulumi.String("changeme"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.random.RandomId;
import com.pulumi.random.RandomIdArgs;
import com.pulumi.gcp.sql.DatabaseInstance;
import com.pulumi.gcp.sql.DatabaseInstanceArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import com.pulumi.gcp.sql.User;
import com.pulumi.gcp.sql.UserArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
            .byteLength(4)
            .build());

        var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
            .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
            .databaseVersion("MYSQL_5_7")
            .settings(DatabaseInstanceSettingsArgs.builder()
                .tier("db-f1-micro")
                .build())
            .build());

        var users = new User("users", UserArgs.builder()
            .name("me")
            .instance(main.name())
            .host("me.com")
            .password("changeme")
            .build());

    }
}
```
```yaml
resources:
  dbNameSuffix:
    type: random:RandomId
    name: db_name_suffix
    properties:
      byteLength: 4
  main:
    type: gcp:sql:DatabaseInstance
    properties:
      name: main-instance-${dbNameSuffix.hex}
      databaseVersion: MYSQL_5_7
      settings:
        tier: db-f1-micro
  users:
    type: gcp:sql:User
    properties:
      name: me
      instance: ${main.name}
      host: me.com
      password: changeme
```
<!--End PulumiCodeChooser -->

Example using [Cloud SQL IAM database authentication](https://cloud.google.com/sql/docs/mysql/authentication).

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as random from "@pulumi/random";
import * as std from "@pulumi/std";

const dbNameSuffix = new random.RandomId("db_name_suffix", {byteLength: 4});
const main = new gcp.sql.DatabaseInstance("main", {
    name: pulumi.interpolate`main-instance-${dbNameSuffix.hex}`,
    databaseVersion: "POSTGRES_15",
    settings: {
        tier: "db-f1-micro",
        databaseFlags: [{
            name: "cloudsql.iam_authentication",
            value: "on",
        }],
    },
});
const iamUser = new gcp.sql.User("iam_user", {
    name: "me@example.com",
    instance: main.name,
    type: "CLOUD_IAM_USER",
});
const iamServiceAccountUser = new gcp.sql.User("iam_service_account_user", {
    name: std.trimsuffix({
        input: serviceAccount.email,
        suffix: ".gserviceaccount.com",
    }).then(invoke => invoke.result),
    instance: main.name,
    type: "CLOUD_IAM_SERVICE_ACCOUNT",
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_random as random
import pulumi_std as std

db_name_suffix = random.RandomId("db_name_suffix", byte_length=4)
main = gcp.sql.DatabaseInstance("main",
    name=db_name_suffix.hex.apply(lambda hex: f"main-instance-{hex}"),
    database_version="POSTGRES_15",
    settings={
        "tier": "db-f1-micro",
        "database_flags": [{
            "name": "cloudsql.iam_authentication",
            "value": "on",
        }],
    })
iam_user = gcp.sql.User("iam_user",
    name="me@example.com",
    instance=main.name,
    type="CLOUD_IAM_USER")
iam_service_account_user = gcp.sql.User("iam_service_account_user",
    name=std.trimsuffix(input=service_account["email"],
        suffix=".gserviceaccount.com").result,
    instance=main.name,
    type="CLOUD_IAM_SERVICE_ACCOUNT")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Random = Pulumi.Random;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var dbNameSuffix = new Random.RandomId("db_name_suffix", new()
    {
        ByteLength = 4,
    });

    var main = new Gcp.Sql.DatabaseInstance("main", new()
    {
        Name = dbNameSuffix.Hex.Apply(hex => $"main-instance-{hex}"),
        DatabaseVersion = "POSTGRES_15",
        Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
        {
            Tier = "db-f1-micro",
            DatabaseFlags = new[]
            {
                new Gcp.Sql.Inputs.DatabaseInstanceSettingsDatabaseFlagArgs
                {
                    Name = "cloudsql.iam_authentication",
                    Value = "on",
                },
            },
        },
    });

    var iamUser = new Gcp.Sql.User("iam_user", new()
    {
        Name = "me@example.com",
        Instance = main.Name,
        Type = "CLOUD_IAM_USER",
    });

    var iamServiceAccountUser = new Gcp.Sql.User("iam_service_account_user", new()
    {
        Name = Std.Trimsuffix.Invoke(new()
        {
            Input = serviceAccount.Email,
            Suffix = ".gserviceaccount.com",
        }).Apply(invoke => invoke.Result),
        Instance = main.Name,
        Type = "CLOUD_IAM_SERVICE_ACCOUNT",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		dbNameSuffix, err := random.NewRandomId(ctx, "db_name_suffix", &random.RandomIdArgs{
			ByteLength: pulumi.Int(4),
		})
		if err != nil {
			return err
		}
		main, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
			Name: dbNameSuffix.Hex.ApplyT(func(hex string) (string, error) {
				return fmt.Sprintf("main-instance-%v", hex), nil
			}).(pulumi.StringOutput),
			DatabaseVersion: pulumi.String("POSTGRES_15"),
			Settings: &sql.DatabaseInstanceSettingsArgs{
				Tier: pulumi.String("db-f1-micro"),
				DatabaseFlags: sql.DatabaseInstanceSettingsDatabaseFlagArray{
					&sql.DatabaseInstanceSettingsDatabaseFlagArgs{
						Name:  pulumi.String("cloudsql.iam_authentication"),
						Value: pulumi.String("on"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = sql.NewUser(ctx, "iam_user", &sql.UserArgs{
			Name:     pulumi.String("me@example.com"),
			Instance: main.Name,
			Type:     pulumi.String("CLOUD_IAM_USER"),
		})
		if err != nil {
			return err
		}
		invokeTrimsuffix, err := std.Trimsuffix(ctx, &std.TrimsuffixArgs{
			Input:  serviceAccount.Email,
			Suffix: ".gserviceaccount.com",
		}, nil)
		if err != nil {
			return err
		}
		_, err = sql.NewUser(ctx, "iam_service_account_user", &sql.UserArgs{
			Name:     pulumi.String(invokeTrimsuffix.Result),
			Instance: main.Name,
			Type:     pulumi.String("CLOUD_IAM_SERVICE_ACCOUNT"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.random.RandomId;
import com.pulumi.random.RandomIdArgs;
import com.pulumi.gcp.sql.DatabaseInstance;
import com.pulumi.gcp.sql.DatabaseInstanceArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import com.pulumi.gcp.sql.User;
import com.pulumi.gcp.sql.UserArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
            .byteLength(4)
            .build());

        var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
            .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
            .databaseVersion("POSTGRES_15")
            .settings(DatabaseInstanceSettingsArgs.builder()
                .tier("db-f1-micro")
                .databaseFlags(DatabaseInstanceSettingsDatabaseFlagArgs.builder()
                    .name("cloudsql.iam_authentication")
                    .value("on")
                    .build())
                .build())
            .build());

        var iamUser = new User("iamUser", UserArgs.builder()
            .name("me@example.com")
            .instance(main.name())
            .type("CLOUD_IAM_USER")
            .build());

        var iamServiceAccountUser = new User("iamServiceAccountUser", UserArgs.builder()
            .name(StdFunctions.trimsuffix(TrimsuffixArgs.builder()
                .input(serviceAccount.email())
                .suffix(".gserviceaccount.com")
                .build()).result())
            .instance(main.name())
            .type("CLOUD_IAM_SERVICE_ACCOUNT")
            .build());

    }
}
```
```yaml
resources:
  dbNameSuffix:
    type: random:RandomId
    name: db_name_suffix
    properties:
      byteLength: 4
  main:
    type: gcp:sql:DatabaseInstance
    properties:
      name: main-instance-${dbNameSuffix.hex}
      databaseVersion: POSTGRES_15
      settings:
        tier: db-f1-micro
        databaseFlags:
          - name: cloudsql.iam_authentication
            value: on
  iamUser:
    type: gcp:sql:User
    name: iam_user
    properties:
      name: me@example.com
      instance: ${main.name}
      type: CLOUD_IAM_USER
  iamServiceAccountUser:
    type: gcp:sql:User
    name: iam_service_account_user
    properties:
      name:
        fn::invoke:
          function: std:trimsuffix
          arguments:
            input: ${serviceAccount.email}
            suffix: .gserviceaccount.com
          return: result
      instance: ${main.name}
      type: CLOUD_IAM_SERVICE_ACCOUNT
```
<!--End PulumiCodeChooser -->

Example using [Cloud SQL IAM Group authentication](https://cloud.google.com/sql/docs/mysql/iam-authentication#iam-group-auth).

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as random from "@pulumi/random";

const dbNameSuffix = new random.RandomId("db_name_suffix", {byteLength: 4});
const main = new gcp.sql.DatabaseInstance("main", {
    name: pulumi.interpolate`main-instance-${dbNameSuffix.hex}`,
    databaseVersion: "MYSQL_8_0",
    settings: {
        tier: "db-f1-micro",
        databaseFlags: [{
            name: "cloudsql_iam_authentication",
            value: "on",
        }],
    },
});
const iamGroupUser = new gcp.sql.User("iam_group_user", {
    name: "iam_group@example.com",
    instance: main.name,
    type: "CLOUD_IAM_GROUP",
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_random as random

db_name_suffix = random.RandomId("db_name_suffix", byte_length=4)
main = gcp.sql.DatabaseInstance("main",
    name=db_name_suffix.hex.apply(lambda hex: f"main-instance-{hex}"),
    database_version="MYSQL_8_0",
    settings={
        "tier": "db-f1-micro",
        "database_flags": [{
            "name": "cloudsql_iam_authentication",
            "value": "on",
        }],
    })
iam_group_user = gcp.sql.User("iam_group_user",
    name="iam_group@example.com",
    instance=main.name,
    type="CLOUD_IAM_GROUP")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Random = Pulumi.Random;

return await Deployment.RunAsync(() => 
{
    var dbNameSuffix = new Random.RandomId("db_name_suffix", new()
    {
        ByteLength = 4,
    });

    var main = new Gcp.Sql.DatabaseInstance("main", new()
    {
        Name = dbNameSuffix.Hex.Apply(hex => $"main-instance-{hex}"),
        DatabaseVersion = "MYSQL_8_0",
        Settings = new Gcp.Sql.Inputs.DatabaseInstanceSettingsArgs
        {
            Tier = "db-f1-micro",
            DatabaseFlags = new[]
            {
                new Gcp.Sql.Inputs.DatabaseInstanceSettingsDatabaseFlagArgs
                {
                    Name = "cloudsql_iam_authentication",
                    Value = "on",
                },
            },
        },
    });

    var iamGroupUser = new Gcp.Sql.User("iam_group_user", new()
    {
        Name = "iam_group@example.com",
        Instance = main.Name,
        Type = "CLOUD_IAM_GROUP",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		dbNameSuffix, err := random.NewRandomId(ctx, "db_name_suffix", &random.RandomIdArgs{
			ByteLength: pulumi.Int(4),
		})
		if err != nil {
			return err
		}
		main, err := sql.NewDatabaseInstance(ctx, "main", &sql.DatabaseInstanceArgs{
			Name: dbNameSuffix.Hex.ApplyT(func(hex string) (string, error) {
				return fmt.Sprintf("main-instance-%v", hex), nil
			}).(pulumi.StringOutput),
			DatabaseVersion: pulumi.String("MYSQL_8_0"),
			Settings: &sql.DatabaseInstanceSettingsArgs{
				Tier: pulumi.String("db-f1-micro"),
				DatabaseFlags: sql.DatabaseInstanceSettingsDatabaseFlagArray{
					&sql.DatabaseInstanceSettingsDatabaseFlagArgs{
						Name:  pulumi.String("cloudsql_iam_authentication"),
						Value: pulumi.String("on"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = sql.NewUser(ctx, "iam_group_user", &sql.UserArgs{
			Name:     pulumi.String("iam_group@example.com"),
			Instance: main.Name,
			Type:     pulumi.String("CLOUD_IAM_GROUP"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.random.RandomId;
import com.pulumi.random.RandomIdArgs;
import com.pulumi.gcp.sql.DatabaseInstance;
import com.pulumi.gcp.sql.DatabaseInstanceArgs;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsArgs;
import com.pulumi.gcp.sql.User;
import com.pulumi.gcp.sql.UserArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var dbNameSuffix = new RandomId("dbNameSuffix", RandomIdArgs.builder()
            .byteLength(4)
            .build());

        var main = new DatabaseInstance("main", DatabaseInstanceArgs.builder()
            .name(dbNameSuffix.hex().applyValue(hex -> String.format("main-instance-%s", hex)))
            .databaseVersion("MYSQL_8_0")
            .settings(DatabaseInstanceSettingsArgs.builder()
                .tier("db-f1-micro")
                .databaseFlags(DatabaseInstanceSettingsDatabaseFlagArgs.builder()
                    .name("cloudsql_iam_authentication")
                    .value("on")
                    .build())
                .build())
            .build());

        var iamGroupUser = new User("iamGroupUser", UserArgs.builder()
            .name("iam_group@example.com")
            .instance(main.name())
            .type("CLOUD_IAM_GROUP")
            .build());

    }
}
```
```yaml
resources:
  dbNameSuffix:
    type: random:RandomId
    name: db_name_suffix
    properties:
      byteLength: 4
  main:
    type: gcp:sql:DatabaseInstance
    properties:
      name: main-instance-${dbNameSuffix.hex}
      databaseVersion: MYSQL_8_0
      settings:
        tier: db-f1-micro
        databaseFlags:
          - name: cloudsql_iam_authentication
            value: on
  iamGroupUser:
    type: gcp:sql:User
    name: iam_group_user
    properties:
      name: iam_group@example.com
      instance: ${main.name}
      type: CLOUD_IAM_GROUP
```
<!--End PulumiCodeChooser -->

## Import

SQL users for MySQL databases can be imported using the `project`, `instance`, `host` and `name`, e.g.

* `{{project_id}}/{{instance}}/{{host}}/{{name}}`

SQL users for PostgreSQL databases can be imported using the `project`, `instance` and `name`, e.g.

* `{{project_id}}/{{instance}}/{{name}}`

When using the `pulumi import` command, NAME_HERE can be imported using one of the formats above. For example:

MySQL database

```sh
$ pulumi import gcp:sql/user:User default {{project_id}}/{{instance}}/{{host}}/{{name}}
```

PostgreSQL database

```sh
$ pulumi import gcp:sql/user:User default {{project_id}}/{{instance}}/{{name}}
```

Ы
deletionPolicyB" ВThe deletion policy for the user.
Setting `ABANDON` allows the resource to be abandoned rather than deleted. This is useful
for Postgres, where users cannot be deleted from the API if they have been granted SQL roles.

Possible values are: `ABANDON`.

- - -
°
hostB" щThe host the user can connect from. This is only supported
for BUILT_IN users in MySQL instances. Don't set this field for PostgreSQL and SQL Server instances.
Can be an IP address. Changing this forces a new resource to be created.
g
instance" WThe name of the Cloud SQL instance. Changing this
forces a new resource to be created.
W
nameB" IThe name of the user. Changing this forces a new resource
to be created.
ж
passwordB" УThe password for the user. Can be updated. For Postgres
instances this is a Required field, unless type is set to either CLOUD_IAM_USER
or CLOUD_IAM_SERVICE_ACCOUNT. Don't set this field for CLOUD_IAM_USER
and CLOUD_IAM_SERVICE_ACCOUNT user types for any Cloud SQL instance.
`
passwordPolicyNBL:J
H
sqlUserPasswordPolicy-gcp:sql/UserPasswordPolicy:UserPasswordPolicy{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
ь
typeB" ▌The user type. It determines the method to authenticate the
user during login. The default is the database's built-in user type. Flags
include "BUILT_IN", "CLOUD_IAM_USER", "CLOUD_IAM_SERVICE_ACCOUNT", "CLOUD_IAM_GROUP",
"CLOUD_IAM_GROUP_USER" and "CLOUD_IAM_GROUP_SERVICE_ACCOUNT" for
[Postgres](https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1beta4/users#sqlusertype)
and [MySQL](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/users#sqlusertype).
"Ы
deletionPolicyB" ВThe deletion policy for the user.
Setting `ABANDON` allows the resource to be abandoned rather than deleted. This is useful
for Postgres, where users cannot be deleted from the API if they have been granted SQL roles.

Possible values are: `ABANDON`.

- - -
"Ў
host" щThe host the user can connect from. This is only supported
for BUILT_IN users in MySQL instances. Don't set this field for PostgreSQL and SQL Server instances.
Can be an IP address. Changing this forces a new resource to be created.
"g
instance" WThe name of the Cloud SQL instance. Changing this
forces a new resource to be created.
"U
name" IThe name of the user. Changing this forces a new resource
to be created.
"ж
passwordB" УThe password for the user. Can be updated. For Postgres
instances this is a Required field, unless type is set to either CLOUD_IAM_USER
or CLOUD_IAM_SERVICE_ACCOUNT. Don't set this field for CLOUD_IAM_USER
and CLOUD_IAM_SERVICE_ACCOUNT user types for any Cloud SQL instance.
"`
passwordPolicyNBL:J
H
sqlUserPasswordPolicy-gcp:sql/UserPasswordPolicy:UserPasswordPolicy"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"u
sqlServerUserDetails]*[:Y
W
sqlUserSqlServerUserDetail7gcp:sql/UserSqlServerUserDetail:UserSqlServerUserDetail"ь
typeB" ▌The user type. It determines the method to authenticate the
user during login. The default is the database's built-in user type. Flags
include "BUILT_IN", "CLOUD_IAM_USER", "CLOUD_IAM_SERVICE_ACCOUNT", "CLOUD_IAM_GROUP",
"CLOUD_IAM_GROUP_USER" and "CLOUD_IAM_GROUP_SERVICE_ACCOUNT" for
[Postgres](https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1beta4/users#sqlusertype)
and [MySQL](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/users#sqlusertype).
*Юы
,
storageBucketgcp:storage/bucket:BucketуЧCreates a new bucket in Google cloud storage service (GCS).
Once a bucket has been created, its location can't be changed.

For more information see
[the official documentation](https://cloud.google.com/storage/docs/overview)
and
[API](https://cloud.google.com/storage/docs/json_api/v1/buckets).

**Note**: If the project id is not set on the resource or in the provider block it will be dynamically
determined which will require enabling the compute api.


## Example Usage

### Creating A Private Bucket In Standard Storage, In The EU Region. Bucket Configured As Static Website And CORS Configurations

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const static_site = new gcp.storage.Bucket("static-site", {
    name: "image-store.com",
    location: "EU",
    forceDestroy: true,
    uniformBucketLevelAccess: true,
    website: {
        mainPageSuffix: "index.html",
        notFoundPage: "404.html",
    },
    cors: [{
        origins: ["http://image-store.com"],
        methods: [
            "GET",
            "HEAD",
            "PUT",
            "POST",
            "DELETE",
        ],
        responseHeaders: ["*"],
        maxAgeSeconds: 3600,
    }],
});
```
```python
import pulumi
import pulumi_gcp as gcp

static_site = gcp.storage.Bucket("static-site",
    name="image-store.com",
    location="EU",
    force_destroy=True,
    uniform_bucket_level_access=True,
    website={
        "main_page_suffix": "index.html",
        "not_found_page": "404.html",
    },
    cors=[{
        "origins": ["http://image-store.com"],
        "methods": [
            "GET",
            "HEAD",
            "PUT",
            "POST",
            "DELETE",
        ],
        "response_headers": ["*"],
        "max_age_seconds": 3600,
    }])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var static_site = new Gcp.Storage.Bucket("static-site", new()
    {
        Name = "image-store.com",
        Location = "EU",
        ForceDestroy = true,
        UniformBucketLevelAccess = true,
        Website = new Gcp.Storage.Inputs.BucketWebsiteArgs
        {
            MainPageSuffix = "index.html",
            NotFoundPage = "404.html",
        },
        Cors = new[]
        {
            new Gcp.Storage.Inputs.BucketCorArgs
            {
                Origins = new[]
                {
                    "http://image-store.com",
                },
                Methods = new[]
                {
                    "GET",
                    "HEAD",
                    "PUT",
                    "POST",
                    "DELETE",
                },
                ResponseHeaders = new[]
                {
                    "*",
                },
                MaxAgeSeconds = 3600,
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "static-site", &storage.BucketArgs{
			Name:                     pulumi.String("image-store.com"),
			Location:                 pulumi.String("EU"),
			ForceDestroy:             pulumi.Bool(true),
			UniformBucketLevelAccess: pulumi.Bool(true),
			Website: &storage.BucketWebsiteArgs{
				MainPageSuffix: pulumi.String("index.html"),
				NotFoundPage:   pulumi.String("404.html"),
			},
			Cors: storage.BucketCorArray{
				&storage.BucketCorArgs{
					Origins: pulumi.StringArray{
						pulumi.String("http://image-store.com"),
					},
					Methods: pulumi.StringArray{
						pulumi.String("GET"),
						pulumi.String("HEAD"),
						pulumi.String("PUT"),
						pulumi.String("POST"),
						pulumi.String("DELETE"),
					},
					ResponseHeaders: pulumi.StringArray{
						pulumi.String("*"),
					},
					MaxAgeSeconds: pulumi.Int(3600),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.inputs.BucketWebsiteArgs;
import com.pulumi.gcp.storage.inputs.BucketCorArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var static_site = new Bucket("static-site", BucketArgs.builder()
            .name("image-store.com")
            .location("EU")
            .forceDestroy(true)
            .uniformBucketLevelAccess(true)
            .website(BucketWebsiteArgs.builder()
                .mainPageSuffix("index.html")
                .notFoundPage("404.html")
                .build())
            .cors(BucketCorArgs.builder()
                .origins("http://image-store.com")
                .methods(                
                    "GET",
                    "HEAD",
                    "PUT",
                    "POST",
                    "DELETE")
                .responseHeaders("*")
                .maxAgeSeconds(3600)
                .build())
            .build());

    }
}
```
```yaml
resources:
  static-site:
    type: gcp:storage:Bucket
    properties:
      name: image-store.com
      location: EU
      forceDestroy: true
      uniformBucketLevelAccess: true
      website:
        mainPageSuffix: index.html
        notFoundPage: 404.html
      cors:
        - origins:
            - http://image-store.com
          methods:
            - GET
            - HEAD
            - PUT
            - POST
            - DELETE
          responseHeaders:
            - '*'
          maxAgeSeconds: 3600
```
<!--End PulumiCodeChooser -->

### Life Cycle Settings For Storage Bucket Objects

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const auto_expire = new gcp.storage.Bucket("auto-expire", {
    name: "auto-expiring-bucket",
    location: "US",
    forceDestroy: true,
    lifecycleRules: [
        {
            condition: {
                age: 3,
            },
            action: {
                type: "Delete",
            },
        },
        {
            condition: {
                age: 1,
            },
            action: {
                type: "AbortIncompleteMultipartUpload",
            },
        },
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

auto_expire = gcp.storage.Bucket("auto-expire",
    name="auto-expiring-bucket",
    location="US",
    force_destroy=True,
    lifecycle_rules=[
        {
            "condition": {
                "age": 3,
            },
            "action": {
                "type": "Delete",
            },
        },
        {
            "condition": {
                "age": 1,
            },
            "action": {
                "type": "AbortIncompleteMultipartUpload",
            },
        },
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var auto_expire = new Gcp.Storage.Bucket("auto-expire", new()
    {
        Name = "auto-expiring-bucket",
        Location = "US",
        ForceDestroy = true,
        LifecycleRules = new[]
        {
            new Gcp.Storage.Inputs.BucketLifecycleRuleArgs
            {
                Condition = new Gcp.Storage.Inputs.BucketLifecycleRuleConditionArgs
                {
                    Age = 3,
                },
                Action = new Gcp.Storage.Inputs.BucketLifecycleRuleActionArgs
                {
                    Type = "Delete",
                },
            },
            new Gcp.Storage.Inputs.BucketLifecycleRuleArgs
            {
                Condition = new Gcp.Storage.Inputs.BucketLifecycleRuleConditionArgs
                {
                    Age = 1,
                },
                Action = new Gcp.Storage.Inputs.BucketLifecycleRuleActionArgs
                {
                    Type = "AbortIncompleteMultipartUpload",
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "auto-expire", &storage.BucketArgs{
			Name:         pulumi.String("auto-expiring-bucket"),
			Location:     pulumi.String("US"),
			ForceDestroy: pulumi.Bool(true),
			LifecycleRules: storage.BucketLifecycleRuleArray{
				&storage.BucketLifecycleRuleArgs{
					Condition: &storage.BucketLifecycleRuleConditionArgs{
						Age: pulumi.Int(3),
					},
					Action: &storage.BucketLifecycleRuleActionArgs{
						Type: pulumi.String("Delete"),
					},
				},
				&storage.BucketLifecycleRuleArgs{
					Condition: &storage.BucketLifecycleRuleConditionArgs{
						Age: pulumi.Int(1),
					},
					Action: &storage.BucketLifecycleRuleActionArgs{
						Type: pulumi.String("AbortIncompleteMultipartUpload"),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.inputs.BucketLifecycleRuleArgs;
import com.pulumi.gcp.storage.inputs.BucketLifecycleRuleConditionArgs;
import com.pulumi.gcp.storage.inputs.BucketLifecycleRuleActionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var auto_expire = new Bucket("auto-expire", BucketArgs.builder()
            .name("auto-expiring-bucket")
            .location("US")
            .forceDestroy(true)
            .lifecycleRules(            
                BucketLifecycleRuleArgs.builder()
                    .condition(BucketLifecycleRuleConditionArgs.builder()
                        .age(3)
                        .build())
                    .action(BucketLifecycleRuleActionArgs.builder()
                        .type("Delete")
                        .build())
                    .build(),
                BucketLifecycleRuleArgs.builder()
                    .condition(BucketLifecycleRuleConditionArgs.builder()
                        .age(1)
                        .build())
                    .action(BucketLifecycleRuleActionArgs.builder()
                        .type("AbortIncompleteMultipartUpload")
                        .build())
                    .build())
            .build());

    }
}
```
```yaml
resources:
  auto-expire:
    type: gcp:storage:Bucket
    properties:
      name: auto-expiring-bucket
      location: US
      forceDestroy: true
      lifecycleRules:
        - condition:
            age: 3
          action:
            type: Delete
        - condition:
            age: 1
          action:
            type: AbortIncompleteMultipartUpload
```
<!--End PulumiCodeChooser -->

### Life Cycle Settings For Storage Bucket Objects With `Send_age_if_zero` Disabled
When creating a life cycle condition that does not also include an `age` field, a default `age` of 0 will be set. Set the `send_age_if_zero` flag to `false` to prevent this and avoid any potentially unintended interactions.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const no_age_enabled = new gcp.storage.Bucket("no-age-enabled", {
    name: "no-age-enabled-bucket",
    location: "US",
    forceDestroy: true,
    lifecycleRules: [{
        action: {
            type: "Delete",
        },
        condition: {
            daysSinceNoncurrentTime: 3,
            sendAgeIfZero: false,
        },
    }],
});
```
```python
import pulumi
import pulumi_gcp as gcp

no_age_enabled = gcp.storage.Bucket("no-age-enabled",
    name="no-age-enabled-bucket",
    location="US",
    force_destroy=True,
    lifecycle_rules=[{
        "action": {
            "type": "Delete",
        },
        "condition": {
            "days_since_noncurrent_time": 3,
            "send_age_if_zero": False,
        },
    }])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var no_age_enabled = new Gcp.Storage.Bucket("no-age-enabled", new()
    {
        Name = "no-age-enabled-bucket",
        Location = "US",
        ForceDestroy = true,
        LifecycleRules = new[]
        {
            new Gcp.Storage.Inputs.BucketLifecycleRuleArgs
            {
                Action = new Gcp.Storage.Inputs.BucketLifecycleRuleActionArgs
                {
                    Type = "Delete",
                },
                Condition = new Gcp.Storage.Inputs.BucketLifecycleRuleConditionArgs
                {
                    DaysSinceNoncurrentTime = 3,
                    SendAgeIfZero = false,
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "no-age-enabled", &storage.BucketArgs{
			Name:         pulumi.String("no-age-enabled-bucket"),
			Location:     pulumi.String("US"),
			ForceDestroy: pulumi.Bool(true),
			LifecycleRules: storage.BucketLifecycleRuleArray{
				&storage.BucketLifecycleRuleArgs{
					Action: &storage.BucketLifecycleRuleActionArgs{
						Type: pulumi.String("Delete"),
					},
					Condition: &storage.BucketLifecycleRuleConditionArgs{
						DaysSinceNoncurrentTime: pulumi.Int(3),
						SendAgeIfZero:           pulumi.Bool(false),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.inputs.BucketLifecycleRuleArgs;
import com.pulumi.gcp.storage.inputs.BucketLifecycleRuleActionArgs;
import com.pulumi.gcp.storage.inputs.BucketLifecycleRuleConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var no_age_enabled = new Bucket("no-age-enabled", BucketArgs.builder()
            .name("no-age-enabled-bucket")
            .location("US")
            .forceDestroy(true)
            .lifecycleRules(BucketLifecycleRuleArgs.builder()
                .action(BucketLifecycleRuleActionArgs.builder()
                    .type("Delete")
                    .build())
                .condition(BucketLifecycleRuleConditionArgs.builder()
                    .daysSinceNoncurrentTime(3)
                    .sendAgeIfZero(false)
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  no-age-enabled:
    type: gcp:storage:Bucket
    properties:
      name: no-age-enabled-bucket
      location: US
      forceDestroy: true
      lifecycleRules:
        - action:
            type: Delete
          condition:
            daysSinceNoncurrentTime: 3
            sendAgeIfZero: false
```
<!--End PulumiCodeChooser -->

### Enabling Public Access Prevention

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const auto_expire = new gcp.storage.Bucket("auto-expire", {
    name: "no-public-access-bucket",
    location: "US",
    forceDestroy: true,
    publicAccessPrevention: "enforced",
});
```
```python
import pulumi
import pulumi_gcp as gcp

auto_expire = gcp.storage.Bucket("auto-expire",
    name="no-public-access-bucket",
    location="US",
    force_destroy=True,
    public_access_prevention="enforced")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var auto_expire = new Gcp.Storage.Bucket("auto-expire", new()
    {
        Name = "no-public-access-bucket",
        Location = "US",
        ForceDestroy = true,
        PublicAccessPrevention = "enforced",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "auto-expire", &storage.BucketArgs{
			Name:                   pulumi.String("no-public-access-bucket"),
			Location:               pulumi.String("US"),
			ForceDestroy:           pulumi.Bool(true),
			PublicAccessPrevention: pulumi.String("enforced"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var auto_expire = new Bucket("auto-expire", BucketArgs.builder()
            .name("no-public-access-bucket")
            .location("US")
            .forceDestroy(true)
            .publicAccessPrevention("enforced")
            .build());

    }
}
```
```yaml
resources:
  auto-expire:
    type: gcp:storage:Bucket
    properties:
      name: no-public-access-bucket
      location: US
      forceDestroy: true
      publicAccessPrevention: enforced
```
<!--End PulumiCodeChooser -->

## Import

Storage buckets can be imported using the `name` or  `project/name`. If the project is not

passed to the import command it will be inferred from the provider block or environment variables.

If it cannot be inferred it will be queried from the Compute API (this will fail if the API is

not enabled).

* `{{project_id}}/{{bucket}}`

* `{{bucket}}`

When using the `pulumi import` command, Storage buckets can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:storage/bucket:Bucket default {{bucket}}
```

```sh
$ pulumi import gcp:storage/bucket:Bucket default {{project_id}}/{{bucket}}
```

`false` in state. If you've set it to `true` in config, run `pulumi up` to

update the value set in state. If you delete this resource before updating the

value, objects in the bucket will not be destroyed.

╒
	autoclassMBK:I
G
storageBucketAutoclass+gcp:storage/BucketAutoclass:BucketAutoclassyThe bucket's [Autoclass](https://cloud.google.com/storage/docs/autoclass) configuration.  Structure is documented below.
є
cors=B;*9:7
5
storage	BucketCorgcp:storage/BucketCor:BucketCorлThe bucket's [Cross-Origin Resource Sharing (CORS)](https://www.w3.org/TR/cors/) configuration. Multiple blocks of this type are permitted. Structure is documented below.
є
customPlacementConfigqBo:m
k
storageBucketCustomPlacementConfigCgcp:storage/BucketCustomPlacementConfig:BucketCustomPlacementConfigцThe bucket's custom location configuration, which specifies the individual regions that comprise a dual-region bucket. If the bucket is designated a single or multi-region, the parameters are empty. Structure is documented below.
{
defaultEventBasedHoldB
 \Whether or not to automatically apply an eventBasedHold to new objects added to the bucket.
В
enableObjectRetentionB
 cEnables [object retention](https://cloud.google.com/storage/docs/object-lock) on a storage bucket.
ж

encryptionPBN:L
J
storageBucketEncryption-gcp:storage/BucketEncryption:BucketEncryptionFThe bucket's encryption configuration. Structure is documented below.
╝
forceDestroyB
 еWhen deleting a bucket, this
boolean option will delete all contained objects. If you try to delete a
bucket that contains objects, the provider will fail that run.
°
hierarchicalNamespaceqBo:m
k
storageBucketHierarchicalNamespaceCgcp:storage/BucketHierarchicalNamespace:BucketHierarchicalNamespaceыThe bucket's hierarchical namespace policy, which defines the bucket capability to handle folders in logical structure. Structure is documented below. To use this configuration, `uniform_bucket_level_access` must be enabled on bucket.
J
labelsB2" 8A map of key/value label pairs to assign to the bucket.
и
lifecycleRules[BY*W:U
S
storageBucketLifecycleRule3gcp:storage/BucketLifecycleRule:BucketLifecycleRule╕The bucket's [Lifecycle Rules](https://cloud.google.com/storage/docs/lifecycle#configuration) configuration. Multiple blocks of this type are permitted. Structure is documented below.
c
location" SThe [GCS location](https://cloud.google.com/storage/docs/bucket-locations).

- - -
█
loggingGBE:C
A
storageBucketLogging'gcp:storage/BucketLogging:BucketLoggingЖThe bucket's [Access & Storage Logs](https://cloud.google.com/storage/docs/access-logs) configuration. Structure is documented below.
&
nameB" The name of the bucket.
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
щ
publicAccessPreventionB" ╚Prevents public access to a bucket. Acceptable values are "inherited" or "enforced". If "inherited", the bucket uses [public access prevention](https://cloud.google.com/storage/docs/public-access-prevention). only if the bucket is subject to the public access prevention organization policy constraint. Defaults to "inherited".
{
requesterPaysB
 dEnables [Requester Pays](https://cloud.google.com/storage/docs/requester-pays) on a storage bucket.
 
retentionPolicy_B]:[
Y
storageBucketRetentionPolicy7gcp:storage/BucketRetentionPolicy:BucketRetentionPolicyКConfiguration of the bucket's data retention policy for how long objects in the bucket should be retained. Structure is documented below.
г
rpoB" ХThe recovery point objective for cross-region replication of the bucket. Applicable only for dual and multi-region buckets. `"DEFAULT"` sets default replication. `"ASYNC_TURBO"` value enables turbo replication, valid for dual-region buckets only. See [Turbo Replication](https://cloud.google.com/storage/docs/managing-turbo-replication) for more information. If rpo is not specified at bucket creation, it defaults to `"DEFAULT"` for dual and multi-region buckets. **NOTE** If used with single-region bucket, It will throw an error.
щ
softDeletePolicybB`:^
\
storageBucketSoftDeletePolicy9gcp:storage/BucketSoftDeletePolicy:BucketSoftDeletePolicyЁThe bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot
be permanently deleted. If it is not provided, by default Google Cloud Storage sets this to default soft delete policy
▄
storageClassB" ┼The [Storage Class](https://cloud.google.com/storage/docs/storage-classes) of the new bucket. Supported values include: `STANDARD`, `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`, `ARCHIVE`.
Я
uniformBucketLevelAccessB
 }Enables [Uniform bucket-level access](https://cloud.google.com/storage/docs/uniform-bucket-level-access) access to a bucket.
у

versioningPBN:L
J
storageBucketVersioning-gcp:storage/BucketVersioning:BucketVersioningВThe bucket's [Versioning](https://cloud.google.com/storage/docs/object-versioning) configuration.  Structure is documented below.
в
websiteGBE:C
A
storageBucketWebsite'gcp:storage/BucketWebsite:BucketWebsiteNConfiguration if the bucket acts as a website. Structure is documented below.
"╒
	autoclassMBK:I
G
storageBucketAutoclass+gcp:storage/BucketAutoclass:BucketAutoclassyThe bucket's [Autoclass](https://cloud.google.com/storage/docs/autoclass) configuration.  Structure is documented below.
"є
cors=B;*9:7
5
storage	BucketCorgcp:storage/BucketCor:BucketCorлThe bucket's [Cross-Origin Resource Sharing (CORS)](https://www.w3.org/TR/cors/) configuration. Multiple blocks of this type are permitted. Structure is documented below.
"є
customPlacementConfigqBo:m
k
storageBucketCustomPlacementConfigCgcp:storage/BucketCustomPlacementConfig:BucketCustomPlacementConfigцThe bucket's custom location configuration, which specifies the individual regions that comprise a dual-region bucket. If the bucket is designated a single or multi-region, the parameters are empty. Structure is documented below.
"{
defaultEventBasedHoldB
 \Whether or not to automatically apply an eventBasedHold to new objects added to the bucket.
"
effectiveLabels2" "В
enableObjectRetentionB
 cEnables [object retention](https://cloud.google.com/storage/docs/object-lock) on a storage bucket.
"ж

encryptionPBN:L
J
storageBucketEncryption-gcp:storage/BucketEncryption:BucketEncryptionFThe bucket's encryption configuration. Structure is documented below.
"╝
forceDestroyB
 еWhen deleting a bucket, this
boolean option will delete all contained objects. If you try to delete a
bucket that contains objects, the provider will fail that run.
"°
hierarchicalNamespaceqBo:m
k
storageBucketHierarchicalNamespaceCgcp:storage/BucketHierarchicalNamespace:BucketHierarchicalNamespaceыThe bucket's hierarchical namespace policy, which defines the bucket capability to handle folders in logical structure. Structure is documented below. To use this configuration, `uniform_bucket_level_access` must be enabled on bucket.
"J
labelsB2" 8A map of key/value label pairs to assign to the bucket.
"и
lifecycleRules[BY*W:U
S
storageBucketLifecycleRule3gcp:storage/BucketLifecycleRule:BucketLifecycleRule╕The bucket's [Lifecycle Rules](https://cloud.google.com/storage/docs/lifecycle#configuration) configuration. Multiple blocks of this type are permitted. Structure is documented below.
"c
location" SThe [GCS location](https://cloud.google.com/storage/docs/bucket-locations).

- - -
"█
loggingGBE:C
A
storageBucketLogging'gcp:storage/BucketLogging:BucketLoggingЖThe bucket's [Access & Storage Logs](https://cloud.google.com/storage/docs/access-logs) configuration. Structure is documented below.
"$
name" The name of the bucket.
"y
project" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"V
projectNumber AThe project number of the project in which the resource belongs.
"ч
publicAccessPrevention" ╚Prevents public access to a bucket. Acceptable values are "inherited" or "enforced". If "inherited", the bucket uses [public access prevention](https://cloud.google.com/storage/docs/public-access-prevention). only if the bucket is subject to the public access prevention organization policy constraint. Defaults to "inherited".
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource and default labels configured on the provider.
"{
requesterPaysB
 dEnables [Requester Pays](https://cloud.google.com/storage/docs/requester-pays) on a storage bucket.
" 
retentionPolicy_B]:[
Y
storageBucketRetentionPolicy7gcp:storage/BucketRetentionPolicy:BucketRetentionPolicyКConfiguration of the bucket's data retention policy for how long objects in the bucket should be retained. Structure is documented below.
"б
rpo" ХThe recovery point objective for cross-region replication of the bucket. Applicable only for dual and multi-region buckets. `"DEFAULT"` sets default replication. `"ASYNC_TURBO"` value enables turbo replication, valid for dual-region buckets only. See [Turbo Replication](https://cloud.google.com/storage/docs/managing-turbo-replication) for more information. If rpo is not specified at bucket creation, it defaults to `"DEFAULT"` for dual and multi-region buckets. **NOTE** If used with single-region bucket, It will throw an error.
"1
selfLink" !The URI of the created resource.
"ч
softDeletePolicy`:^
\
storageBucketSoftDeletePolicy9gcp:storage/BucketSoftDeletePolicy:BucketSoftDeletePolicyЁThe bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot
be permanently deleted. If it is not provided, by default Google Cloud Storage sets this to default soft delete policy
"▄
storageClassB" ┼The [Storage Class](https://cloud.google.com/storage/docs/storage-classes) of the new bucket. Supported values include: `STANDARD`, `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`, `ARCHIVE`.
"Э
uniformBucketLevelAccess
 }Enables [Uniform bucket-level access](https://cloud.google.com/storage/docs/uniform-bucket-level-access) access to a bucket.
"K
url" @The base URL of the bucket, in the format `gs://<bucket-name>`.
"с

versioningN:L
J
storageBucketVersioning-gcp:storage/BucketVersioning:BucketVersioningВThe bucket's [Versioning](https://cloud.google.com/storage/docs/object-versioning) configuration.  Structure is documented below.
"а
websiteE:C
A
storageBucketWebsite'gcp:storage/BucketWebsite:BucketWebsiteNConfiguration if the bucket acts as a website. Structure is documented below.
*├,
5
storage	BucketACLgcp:storage/bucketACL:BucketACL╧#Authoritatively manages a bucket's ACLs in Google cloud storage service (GCS). For more information see
[the official documentation](https://cloud.google.com/storage/docs/access-control/lists)
and
[API](https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls).

Bucket ACLs can be managed non authoritatively using the `storage_bucket_access_control` resource. Do not use these two resources in conjunction to manage the same bucket.

Permissions can be granted either by ACLs or Cloud IAM policies. In general, permissions granted by Cloud IAM policies do not appear in ACLs, and permissions granted by ACLs do not appear in Cloud IAM policies. The only exception is for ACLs applied directly on a bucket and certain bucket-level Cloud IAM policies, as described in [Cloud IAM relation to ACLs](https://cloud.google.com/storage/docs/access-control/iam#acls).

**NOTE** This resource will not remove the `project-owners-<project_id>` entity from the `OWNER` role.

## Example Usage

Example creating an ACL on a bucket with one owner, and one reader.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const image_store = new gcp.storage.Bucket("image-store", {
    name: "image-store-bucket",
    location: "EU",
});
const image_store_acl = new gcp.storage.BucketACL("image-store-acl", {
    bucket: image_store.name,
    roleEntities: [
        "OWNER:user-my.email@gmail.com",
        "READER:group-mygroup",
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

image_store = gcp.storage.Bucket("image-store",
    name="image-store-bucket",
    location="EU")
image_store_acl = gcp.storage.BucketACL("image-store-acl",
    bucket=image_store.name,
    role_entities=[
        "OWNER:user-my.email@gmail.com",
        "READER:group-mygroup",
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var image_store = new Gcp.Storage.Bucket("image-store", new()
    {
        Name = "image-store-bucket",
        Location = "EU",
    });

    var image_store_acl = new Gcp.Storage.BucketACL("image-store-acl", new()
    {
        Bucket = image_store.Name,
        RoleEntities = new[]
        {
            "OWNER:user-my.email@gmail.com",
            "READER:group-mygroup",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "image-store", &storage.BucketArgs{
			Name:     pulumi.String("image-store-bucket"),
			Location: pulumi.String("EU"),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewBucketACL(ctx, "image-store-acl", &storage.BucketACLArgs{
			Bucket: image_store.Name,
			RoleEntities: pulumi.StringArray{
				pulumi.String("OWNER:user-my.email@gmail.com"),
				pulumi.String("READER:group-mygroup"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketACL;
import com.pulumi.gcp.storage.BucketACLArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var image_store = new Bucket("image-store", BucketArgs.builder()
            .name("image-store-bucket")
            .location("EU")
            .build());

        var image_store_acl = new BucketACL("image-store-acl", BucketACLArgs.builder()
            .bucket(image_store.name())
            .roleEntities(            
                "OWNER:user-my.email@gmail.com",
                "READER:group-mygroup")
            .build());

    }
}
```
```yaml
resources:
  image-store:
    type: gcp:storage:Bucket
    properties:
      name: image-store-bucket
      location: EU
  image-store-acl:
    type: gcp:storage:BucketACL
    properties:
      bucket: ${["image-store"].name}
      roleEntities:
        - OWNER:user-my.email@gmail.com
        - READER:group-mygroup
```
<!--End PulumiCodeChooser -->

## Import

This resource does not support import.

;
bucket" -The name of the bucket it applies to.

- - -
>

defaultAclB" *Configure this ACL to be the default ACL.
з
predefinedAclB" ПThe [canned GCS ACL](https://cloud.google.com/storage/docs/access-control/lists#predefined-acl) to apply. Must be set if `role_entity` is not.
Ї
roleEntitiesB*" █List of role/entity pairs in the form `ROLE:entity`. See [GCS Bucket ACL documentation](https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls)  for more details. Must be set if `predefined_acl` is not.
";
bucket" -The name of the bucket it applies to.

- - -
">

defaultAclB" *Configure this ACL to be the default ACL.
"з
predefinedAclB" ПThe [canned GCS ACL](https://cloud.google.com/storage/docs/access-control/lists#predefined-acl) to apply. Must be set if `role_entity` is not.
"Є
roleEntities*" █List of role/entity pairs in the form `ROLE:entity`. See [GCS Bucket ACL documentation](https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls)  for more details. Must be set if `predefined_acl` is not.
*╗/
S
storageBucketAccessControl3gcp:storage/bucketAccessControl:BucketAccessControlй$Bucket ACLs can be managed authoritatively using the
`storage_bucket_acl` resource. Do not use these two resources in conjunction to manage the same bucket.

The BucketAccessControls resource manages the Access Control List
(ACLs) for a single entity/role pairing on a bucket. ACLs let you specify who
has access to your data and to what extent.

There are three roles that can be assigned to an entity:

READERs can get the bucket, though no acl property will be returned, and
list the bucket's objects.  WRITERs are READERs, and they can insert
objects into the bucket and delete the bucket's objects.  OWNERs are
WRITERs, and they can get the acl property of a bucket, update a bucket,
and call all BucketAccessControls methods on the bucket.  For more
information, see Access Control, with the caveat that this API uses
READER, WRITER, and OWNER instead of READ, WRITE, and FULL_CONTROL.


To get more information about BucketAccessControl, see:

* [API documentation](https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/storage/docs/access-control/lists)

## Example Usage

### Storage Bucket Access Control Public Bucket


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const bucket = new gcp.storage.Bucket("bucket", {
    name: "static-content-bucket",
    location: "US",
});
const publicRule = new gcp.storage.BucketAccessControl("public_rule", {
    bucket: bucket.name,
    role: "READER",
    entity: "allUsers",
});
```
```python
import pulumi
import pulumi_gcp as gcp

bucket = gcp.storage.Bucket("bucket",
    name="static-content-bucket",
    location="US")
public_rule = gcp.storage.BucketAccessControl("public_rule",
    bucket=bucket.name,
    role="READER",
    entity="allUsers")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "static-content-bucket",
        Location = "US",
    });

    var publicRule = new Gcp.Storage.BucketAccessControl("public_rule", new()
    {
        Bucket = bucket.Name,
        Role = "READER",
        Entity = "allUsers",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:     pulumi.String("static-content-bucket"),
			Location: pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewBucketAccessControl(ctx, "public_rule", &storage.BucketAccessControlArgs{
			Bucket: bucket.Name,
			Role:   pulumi.String("READER"),
			Entity: pulumi.String("allUsers"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketAccessControl;
import com.pulumi.gcp.storage.BucketAccessControlArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("static-content-bucket")
            .location("US")
            .build());

        var publicRule = new BucketAccessControl("publicRule", BucketAccessControlArgs.builder()
            .bucket(bucket.name())
            .role("READER")
            .entity("allUsers")
            .build());

    }
}
```
```yaml
resources:
  publicRule:
    type: gcp:storage:BucketAccessControl
    name: public_rule
    properties:
      bucket: ${bucket.name}
      role: READER
      entity: allUsers
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: static-content-bucket
      location: US
```
<!--End PulumiCodeChooser -->

## Import

BucketAccessControl can be imported using any of these accepted formats:

* `{{bucket}}/{{entity}}`

When using the `pulumi import` command, BucketAccessControl can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:storage/bucketAccessControl:BucketAccessControl default {{bucket}}/{{entity}}
```

&
bucket" The name of the bucket.
╨
entity" ┴The entity holding the permission, in one of the following forms:
user-userId
user-email
group-groupId
group-email
domain-domain
project-team-projectId
allUsers
allAuthenticatedUsers
Examples:
The user liz@example.com would be user-liz@example.com.
The group example@googlegroups.com would be
group-example@googlegroups.com.
To refer to all members of the Google Apps for Business domain
example.com, the entity would be domain-example.com.


- - -
f
roleB" XThe access permission for the entity.
Possible values are: `OWNER`, `READER`, `WRITER`.
"&
bucket" The name of the bucket.
"5
domain" 'The domain associated with the entity.
";
email" .The email address associated with the entity.
"╨
entity" ┴The entity holding the permission, in one of the following forms:
user-userId
user-email
group-groupId
group-email
domain-domain
project-team-projectId
allUsers
allAuthenticatedUsers
Examples:
The user liz@example.com would be user-liz@example.com.
The group example@googlegroups.com would be
group-example@googlegroups.com.
To refer to all members of the Google Apps for Business domain
example.com, the entity would be domain-example.com.


- - -
"f
roleB" XThe access permission for the entity.
Possible values are: `OWNER`, `READER`, `WRITER`.
*▌П
J
storageBucketIAMBinding-gcp:storage/bucketIAMBinding:BucketIAMBindingъЄThree different resources help you manage your IAM policy for Cloud Storage Bucket. Each of these resources serves a different use case:

* `gcp.storage.BucketIAMPolicy`: Authoritative. Sets the IAM policy for the bucket and replaces any existing policy already attached.
* `gcp.storage.BucketIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the bucket are preserved.
* `gcp.storage.BucketIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the bucket are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.BucketIAMPolicy`: Retrieves the IAM policy for the bucket

> **Note:** `gcp.storage.BucketIAMPolicy` **cannot** be used in conjunction with `gcp.storage.BucketIAMBinding` and `gcp.storage.BucketIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.BucketIAMBinding` resources **can be** used in conjunction with `gcp.storage.BucketIAMMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.BucketIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.BucketIAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.BucketIAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(BucketIAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.BucketIAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
			Condition: &storage.BucketIAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(BucketIAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## This resource supports User Project Overrides.

-

# IAM policy for Cloud Storage Bucket
Three different resources help you manage your IAM policy for Cloud Storage Bucket. Each of these resources serves a different use case:

* `gcp.storage.BucketIAMPolicy`: Authoritative. Sets the IAM policy for the bucket and replaces any existing policy already attached.
* `gcp.storage.BucketIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the bucket are preserved.
* `gcp.storage.BucketIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the bucket are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.BucketIAMPolicy`: Retrieves the IAM policy for the bucket

> **Note:** `gcp.storage.BucketIAMPolicy` **cannot** be used in conjunction with `gcp.storage.BucketIAMBinding` and `gcp.storage.BucketIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.BucketIAMBinding` resources **can be** used in conjunction with `gcp.storage.BucketIAMMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.BucketIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.BucketIAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.BucketIAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(BucketIAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.BucketIAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
			Condition: &storage.BucketIAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(BucketIAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* b/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Cloud Storage bucket IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:storage/bucketIAMBinding:BucketIAMBinding editor "b/{{bucket}} roles/storage.objectViewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:storage/bucketIAMBinding:BucketIAMBinding editor "b/{{bucket}} roles/storage.objectViewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:storage/bucketIAMBinding:BucketIAMBinding editor b/{{bucket}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

I
bucket" ;Used to find the parent resource to bind the IAM policy to
°
	conditionkBi:g
e
storageBucketIAMBindingCondition?gcp:storage/BucketIAMBindingCondition:BucketIAMBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
╒
role" ╚The role that should be applied. Only one
`gcp.storage.BucketIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"I
bucket" ;Used to find the parent resource to bind the IAM policy to
"°
	conditionkBi:g
e
storageBucketIAMBindingCondition?gcp:storage/BucketIAMBindingCondition:BucketIAMBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"3
etag" '(Computed) The etag of the IAM policy.
"╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"╒
role" ╚The role that should be applied. Only one
`gcp.storage.BucketIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*╚П
G
storageBucketIAMMember+gcp:storage/bucketIAMMember:BucketIAMMemberфЄThree different resources help you manage your IAM policy for Cloud Storage Bucket. Each of these resources serves a different use case:

* `gcp.storage.BucketIAMPolicy`: Authoritative. Sets the IAM policy for the bucket and replaces any existing policy already attached.
* `gcp.storage.BucketIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the bucket are preserved.
* `gcp.storage.BucketIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the bucket are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.BucketIAMPolicy`: Retrieves the IAM policy for the bucket

> **Note:** `gcp.storage.BucketIAMPolicy` **cannot** be used in conjunction with `gcp.storage.BucketIAMBinding` and `gcp.storage.BucketIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.BucketIAMBinding` resources **can be** used in conjunction with `gcp.storage.BucketIAMMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.BucketIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.BucketIAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.BucketIAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(BucketIAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.BucketIAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
			Condition: &storage.BucketIAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(BucketIAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## This resource supports User Project Overrides.

-

# IAM policy for Cloud Storage Bucket
Three different resources help you manage your IAM policy for Cloud Storage Bucket. Each of these resources serves a different use case:

* `gcp.storage.BucketIAMPolicy`: Authoritative. Sets the IAM policy for the bucket and replaces any existing policy already attached.
* `gcp.storage.BucketIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the bucket are preserved.
* `gcp.storage.BucketIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the bucket are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.BucketIAMPolicy`: Retrieves the IAM policy for the bucket

> **Note:** `gcp.storage.BucketIAMPolicy` **cannot** be used in conjunction with `gcp.storage.BucketIAMBinding` and `gcp.storage.BucketIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.BucketIAMBinding` resources **can be** used in conjunction with `gcp.storage.BucketIAMMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.BucketIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.BucketIAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.BucketIAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(BucketIAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.BucketIAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
			Condition: &storage.BucketIAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(BucketIAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* b/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Cloud Storage bucket IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:storage/bucketIAMMember:BucketIAMMember editor "b/{{bucket}} roles/storage.objectViewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:storage/bucketIAMMember:BucketIAMMember editor "b/{{bucket}} roles/storage.objectViewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:storage/bucketIAMMember:BucketIAMMember editor b/{{bucket}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

I
bucket" ;Used to find the parent resource to bind the IAM policy to
ї
	conditionhBf:d
b
storageBucketIAMMemberCondition=gcp:storage/BucketIAMMemberCondition:BucketIAMMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
╒
role" ╚The role that should be applied. Only one
`gcp.storage.BucketIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"I
bucket" ;Used to find the parent resource to bind the IAM policy to
"ї
	conditionhBf:d
b
storageBucketIAMMemberCondition=gcp:storage/BucketIAMMemberCondition:BucketIAMMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"3
etag" '(Computed) The etag of the IAM policy.
"╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"╒
role" ╚The role that should be applied. Only one
`gcp.storage.BucketIAMBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*╛Ў
G
storageBucketIAMPolicy+gcp:storage/bucketIAMPolicy:BucketIAMPolicyфЄThree different resources help you manage your IAM policy for Cloud Storage Bucket. Each of these resources serves a different use case:

* `gcp.storage.BucketIAMPolicy`: Authoritative. Sets the IAM policy for the bucket and replaces any existing policy already attached.
* `gcp.storage.BucketIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the bucket are preserved.
* `gcp.storage.BucketIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the bucket are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.BucketIAMPolicy`: Retrieves the IAM policy for the bucket

> **Note:** `gcp.storage.BucketIAMPolicy` **cannot** be used in conjunction with `gcp.storage.BucketIAMBinding` and `gcp.storage.BucketIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.BucketIAMBinding` resources **can be** used in conjunction with `gcp.storage.BucketIAMMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.BucketIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.BucketIAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.BucketIAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(BucketIAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.BucketIAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
			Condition: &storage.BucketIAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(BucketIAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## This resource supports User Project Overrides.

-

# IAM policy for Cloud Storage Bucket
Three different resources help you manage your IAM policy for Cloud Storage Bucket. Each of these resources serves a different use case:

* `gcp.storage.BucketIAMPolicy`: Authoritative. Sets the IAM policy for the bucket and replaces any existing policy already attached.
* `gcp.storage.BucketIAMBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the bucket are preserved.
* `gcp.storage.BucketIAMMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the bucket are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.BucketIAMPolicy`: Retrieves the IAM policy for the bucket

> **Note:** `gcp.storage.BucketIAMPolicy` **cannot** be used in conjunction with `gcp.storage.BucketIAMBinding` and `gcp.storage.BucketIAMMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.BucketIAMBinding` resources **can be** used in conjunction with `gcp.storage.BucketIAMMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.BucketIAMPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.BucketIAMPolicy("policy", {
    bucket: _default.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.BucketIAMPolicy("policy",
    bucket=default["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.BucketIAMPolicy("policy", new()
    {
        Bucket = @default.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMPolicy(ctx, "policy", &storage.BucketIAMPolicyArgs{
			Bucket:     pulumi.Any(_default.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.BucketIAMPolicy;
import com.pulumi.gcp.storage.BucketIAMPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new BucketIAMPolicy("policy", BucketIAMPolicyArgs.builder()
            .bucket(default_.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:BucketIAMPolicy
    properties:
      bucket: ${default.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.BucketIAMBinding("binding", {
    bucket: _default.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.BucketIAMBinding("binding",
    bucket=default["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.BucketIAMBinding("binding", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.BucketIAMBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMBinding(ctx, "binding", &storage.BucketIAMBindingArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.BucketIAMBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMBinding;
import com.pulumi.gcp.storage.BucketIAMBindingArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new BucketIAMBinding("binding", BucketIAMBindingArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(BucketIAMBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:BucketIAMBinding
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.BucketIAMMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.BucketIAMMember("member", {
    bucket: _default.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.BucketIAMMember("member",
    bucket=default["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.BucketIAMMember("member", new()
    {
        Bucket = @default.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.BucketIAMMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketIAMMember(ctx, "member", &storage.BucketIAMMemberArgs{
			Bucket: pulumi.Any(_default.Name),
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.String("user:jane@example.com"),
			Condition: &storage.BucketIAMMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import com.pulumi.gcp.storage.inputs.BucketIAMMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new BucketIAMMember("member", BucketIAMMemberArgs.builder()
            .bucket(default_.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(BucketIAMMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${default.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* b/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Cloud Storage bucket IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:storage/bucketIAMPolicy:BucketIAMPolicy editor "b/{{bucket}} roles/storage.objectViewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:storage/bucketIAMPolicy:BucketIAMPolicy editor "b/{{bucket}} roles/storage.objectViewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:storage/bucketIAMPolicy:BucketIAMPolicy editor b/{{bucket}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

I
bucket" ;Used to find the parent resource to bind the IAM policy to
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"I
bucket" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
*Ы`
>
storageBucketObject%gcp:storage/bucketObject:BucketObjectч(Creates a new object inside an existing bucket in Google cloud storage service (GCS). 
[ACLs](https://cloud.google.com/storage/docs/access-control/lists) can be applied using the `gcp.storage.ObjectACL` resource.
 For more information see 
[the official documentation](https://cloud.google.com/storage/docs/key-terms#objects) 
and 
[API](https://cloud.google.com/storage/docs/json_api/v1/objects).


## Example Usage

Example creating a public object in an existing `image-store` bucket.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const picture = new gcp.storage.BucketObject("picture", {
    name: "butterfly01",
    source: new pulumi.asset.FileAsset("/images/nature/garden-tiger-moth.jpg"),
    bucket: "image-store",
});
```
```python
import pulumi
import pulumi_gcp as gcp

picture = gcp.storage.BucketObject("picture",
    name="butterfly01",
    source=pulumi.FileAsset("/images/nature/garden-tiger-moth.jpg"),
    bucket="image-store")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var picture = new Gcp.Storage.BucketObject("picture", new()
    {
        Name = "butterfly01",
        Source = new FileAsset("/images/nature/garden-tiger-moth.jpg"),
        Bucket = "image-store",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketObject(ctx, "picture", &storage.BucketObjectArgs{
			Name:   pulumi.String("butterfly01"),
			Source: pulumi.NewFileAsset("/images/nature/garden-tiger-moth.jpg"),
			Bucket: pulumi.String("image-store"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var picture = new BucketObject("picture", BucketObjectArgs.builder()
            .name("butterfly01")
            .source(new FileAsset("/images/nature/garden-tiger-moth.jpg"))
            .bucket("image-store")
            .build());

    }
}
```
```yaml
resources:
  picture:
    type: gcp:storage:BucketObject
    properties:
      name: butterfly01
      source:
        fn::FileAsset: /images/nature/garden-tiger-moth.jpg
      bucket: image-store
```
<!--End PulumiCodeChooser -->

Example creating an empty folder in an existing `image-store` bucket.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const emptyFolder = new gcp.storage.BucketObject("empty_folder", {
    name: "empty_folder/",
    content: " ",
    bucket: "image-store",
});
```
```python
import pulumi
import pulumi_gcp as gcp

empty_folder = gcp.storage.BucketObject("empty_folder",
    name="empty_folder/",
    content=" ",
    bucket="image-store")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var emptyFolder = new Gcp.Storage.BucketObject("empty_folder", new()
    {
        Name = "empty_folder/",
        Content = " ",
        Bucket = "image-store",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucketObject(ctx, "empty_folder", &storage.BucketObjectArgs{
			Name:    pulumi.String("empty_folder/"),
			Content: pulumi.String(" "),
			Bucket:  pulumi.String("image-store"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var emptyFolder = new BucketObject("emptyFolder", BucketObjectArgs.builder()
            .name("empty_folder/")
            .content(" ")
            .bucket("image-store")
            .build());

    }
}
```
```yaml
resources:
  emptyFolder:
    type: gcp:storage:BucketObject
    name: empty_folder
    properties:
      name: empty_folder/
      content: ' '
      bucket: image-store
```
<!--End PulumiCodeChooser -->

## Import

This resource does not support import.

1
bucket" #The name of the containing bucket.
є
cacheControlB" ▄[Cache-Control](https://tools.ietf.org/html/rfc7234#section-5.2)
directive to specify caching behavior of object data. If omitted and object is accessible to all anonymous users, the default will be public, max-age=3600
М
contentB" {Data as `string` to be uploaded. Must be defined if `source` is not. **Note**: The `content` field is marked as sensitive.
k
contentDispositionB" O[Content-Disposition](https://tools.ietf.org/html/rfc6266) of the object data.
u
contentEncodingB" \[Content-Encoding](https://tools.ietf.org/html/rfc7231#section-3.1.2.2) of the object data.
u
contentLanguageB" \[Content-Language](https://tools.ietf.org/html/rfc7231#section-3.1.3.2) of the object data.
╡
contentTypeB" Я[Content-Type](https://tools.ietf.org/html/rfc7231#section-3.1.1.5) of the object data. Defaults to "application/octet-stream" or "text/plain; charset=utf-8".
ц
customerEncryptionzBx:v
t
storageBucketObjectCustomerEncryptionIgcp:storage/BucketObjectCustomerEncryption:BucketObjectCustomerEncryption╙Enables object encryption with Customer-Supplied Encryption Key (CSEK). Google [documentation about CSEK.](https://cloud.google.com/storage/docs/encryption/customer-supplied-keys)
Structure is documented below.

detectMd5hashB" №
eventBasedHoldB
 уWhether an object is under [event-based hold](https://cloud.google.com/storage/docs/object-holds#hold-types). Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any).
╡

kmsKeyNameB" аThe resource name of the Cloud KMS key that will be used to [encrypt](https://cloud.google.com/storage/docs/encryption/using-customer-managed-keys) the object.
c
metadataB2" OUser-provided metadata, in key/value pairs.

One of the following is required:
r
nameB" dThe name of the object. If you're interpolating the name of this object, see `output_name` instead.
╜
	retention_B]:[
Y
storageBucketObjectRetention7gcp:storage/BucketObjectRetention:BucketObjectRetention╬The [object retention](http://cloud.google.com/storage/docs/object-lock) settings for the object. The retention settings allow an object to be retained until a provided date. Structure is documented below.
e
sourceB: SA path to the data you want to upload. Must be defined
if `content` is not.

- - -
ї
storageClassB" ▐The [StorageClass](https://cloud.google.com/storage/docs/storage-classes) of the new bucket object.
Supported values include: `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`, `ARCHIVE`. If not provided, this defaults to the bucket's default
storage class or to a [standard](https://cloud.google.com/storage/docs/storage-classes#standard) class.
▌
temporaryHoldB
 ┼Whether an object is under [temporary hold](https://cloud.google.com/storage/docs/object-holds#hold-types). While this flag is set to true, the object is protected against deletion and overwrites.
"1
bucket" #The name of the containing bucket.
"є
cacheControlB" ▄[Cache-Control](https://tools.ietf.org/html/rfc7234#section-5.2)
directive to specify caching behavior of object data. If omitted and object is accessible to all anonymous users, the default will be public, max-age=3600
"К
content" {Data as `string` to be uploaded. Must be defined if `source` is not. **Note**: The `content` field is marked as sensitive.
"k
contentDispositionB" O[Content-Disposition](https://tools.ietf.org/html/rfc6266) of the object data.
"u
contentEncodingB" \[Content-Encoding](https://tools.ietf.org/html/rfc7231#section-3.1.2.2) of the object data.
"u
contentLanguageB" \[Content-Language](https://tools.ietf.org/html/rfc7231#section-3.1.3.2) of the object data.
"│
contentType" Я[Content-Type](https://tools.ietf.org/html/rfc7231#section-3.1.1.5) of the object data. Defaults to "application/octet-stream" or "text/plain; charset=utf-8".
"B
crc32c" 4(Computed) Base 64 CRC32 hash of the uploaded data.
"ц
customerEncryptionzBx:v
t
storageBucketObjectCustomerEncryptionIgcp:storage/BucketObjectCustomerEncryption:BucketObjectCustomerEncryption╙Enables object encryption with Customer-Supplied Encryption Key (CSEK). Google [documentation about CSEK.](https://cloud.google.com/storage/docs/encryption/customer-supplied-keys)
Structure is documented below.
"
detectMd5hashB" "№
eventBasedHoldB
 уWhether an object is under [event-based hold](https://cloud.google.com/storage/docs/object-holds#hold-types). Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any).
"с

generation ╬(Computed) The content generation of this object. Used for object [versioning](https://cloud.google.com/storage/docs/object-versioning) and [soft delete](https://cloud.google.com/storage/docs/soft-delete).
"│

kmsKeyName" аThe resource name of the Cloud KMS key that will be used to [encrypt](https://cloud.google.com/storage/docs/encryption/using-customer-managed-keys) the object.
"A
md5hash" 2(Computed) Base 64 MD5 hash of the uploaded data.
"E
	mediaLink" 4(Computed) A url reference to download this object.
"c
metadataB2" OUser-provided metadata, in key/value pairs.

One of the following is required:
"p
name" dThe name of the object. If you're interpolating the name of this object, see `output_name` instead.
"╒

outputName" ┬(Computed) The name of the object. Use this field in interpolations with `gcp.storage.ObjectACL` to recreate
`gcp.storage.ObjectACL` resources when your `gcp.storage.BucketObject` is recreated.
"╜
	retention_B]:[
Y
storageBucketObjectRetention7gcp:storage/BucketObjectRetention:BucketObjectRetention╬The [object retention](http://cloud.google.com/storage/docs/object-lock) settings for the object. The retention settings allow an object to be retained until a provided date. Structure is documented below.
";
selfLink" +(Computed) A url reference to this object.
"e
sourceB: SA path to the data you want to upload. Must be defined
if `content` is not.

- - -
"є
storageClass" ▐The [StorageClass](https://cloud.google.com/storage/docs/storage-classes) of the new bucket object.
Supported values include: `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`, `ARCHIVE`. If not provided, this defaults to the bucket's default
storage class or to a [standard](https://cloud.google.com/storage/docs/storage-classes#standard) class.
"▌
temporaryHoldB
 ┼Whether an object is under [temporary hold](https://cloud.google.com/storage/docs/object-holds#hold-types). While this flag is set to true, the object is protected against deletion and overwrites.
*║'
J
storageDefaultObjectACL-gcp:storage/defaultObjectACL:DefaultObjectACLя!Authoritatively manages the default object ACLs for a Google Cloud Storage bucket
without managing the bucket itself.

> Note that for each object, its creator will have the `"OWNER"` role in addition
to the default ACL that has been defined.

For more information see
[the official documentation](https://cloud.google.com/storage/docs/access-control/lists) 
and 
[API](https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls).

> Want fine-grained control over default object ACLs? Use `gcp.storage.DefaultObjectAccessControl`
to control individual role entity pairs.

## Example Usage

Example creating a default object ACL on a bucket with one owner, and one reader.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const image_store = new gcp.storage.Bucket("image-store", {
    name: "image-store-bucket",
    location: "EU",
});
const image_store_default_acl = new gcp.storage.DefaultObjectACL("image-store-default-acl", {
    bucket: image_store.name,
    roleEntities: [
        "OWNER:user-my.email@gmail.com",
        "READER:group-mygroup",
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

image_store = gcp.storage.Bucket("image-store",
    name="image-store-bucket",
    location="EU")
image_store_default_acl = gcp.storage.DefaultObjectACL("image-store-default-acl",
    bucket=image_store.name,
    role_entities=[
        "OWNER:user-my.email@gmail.com",
        "READER:group-mygroup",
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var image_store = new Gcp.Storage.Bucket("image-store", new()
    {
        Name = "image-store-bucket",
        Location = "EU",
    });

    var image_store_default_acl = new Gcp.Storage.DefaultObjectACL("image-store-default-acl", new()
    {
        Bucket = image_store.Name,
        RoleEntities = new[]
        {
            "OWNER:user-my.email@gmail.com",
            "READER:group-mygroup",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "image-store", &storage.BucketArgs{
			Name:     pulumi.String("image-store-bucket"),
			Location: pulumi.String("EU"),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewDefaultObjectACL(ctx, "image-store-default-acl", &storage.DefaultObjectACLArgs{
			Bucket: image_store.Name,
			RoleEntities: pulumi.StringArray{
				pulumi.String("OWNER:user-my.email@gmail.com"),
				pulumi.String("READER:group-mygroup"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.DefaultObjectACL;
import com.pulumi.gcp.storage.DefaultObjectACLArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var image_store = new Bucket("image-store", BucketArgs.builder()
            .name("image-store-bucket")
            .location("EU")
            .build());

        var image_store_default_acl = new DefaultObjectACL("image-store-default-acl", DefaultObjectACLArgs.builder()
            .bucket(image_store.name())
            .roleEntities(            
                "OWNER:user-my.email@gmail.com",
                "READER:group-mygroup")
            .build());

    }
}
```
```yaml
resources:
  image-store:
    type: gcp:storage:Bucket
    properties:
      name: image-store-bucket
      location: EU
  image-store-default-acl:
    type: gcp:storage:DefaultObjectACL
    properties:
      bucket: ${["image-store"].name}
      roleEntities:
        - OWNER:user-my.email@gmail.com
        - READER:group-mygroup
```
<!--End PulumiCodeChooser -->

## Import

This resource does not support import.

4
bucket" &The name of the bucket it applies to.
Ж
roleEntitiesB*" эList of role/entity pairs in the form `ROLE:entity`.
See [GCS Object ACL documentation](https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls) for more details.
Omitting the field is the same as providing an empty list.
"4
bucket" &The name of the bucket it applies to.
"Д
roleEntities*" эList of role/entity pairs in the form `ROLE:entity`.
See [GCS Object ACL documentation](https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls) for more details.
Omitting the field is the same as providing an empty list.
*Л1
h
storageDefaultObjectAccessControlAgcp:storage/defaultObjectAccessControl:DefaultObjectAccessControlц#The DefaultObjectAccessControls resources represent the Access Control
Lists (ACLs) applied to a new object within a Google Cloud Storage bucket
when no ACL was provided for that object. ACLs let you specify who has
access to your bucket contents and to what extent.

There are two roles that can be assigned to an entity:

READERs can get an object, though the acl property will not be revealed.
OWNERs are READERs, and they can get the acl property, update an object,
and call all objectAccessControls methods on the object. The owner of an
object is always an OWNER.
For more information, see Access Control, with the caveat that this API
uses READER and OWNER instead of READ and FULL_CONTROL.


To get more information about DefaultObjectAccessControl, see:

* [API documentation](https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/storage/docs/access-control/create-manage-lists)

## Example Usage

### Storage Default Object Access Control Public


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const bucket = new gcp.storage.Bucket("bucket", {
    name: "static-content-bucket",
    location: "US",
});
const publicRule = new gcp.storage.DefaultObjectAccessControl("public_rule", {
    bucket: bucket.name,
    role: "READER",
    entity: "allUsers",
});
```
```python
import pulumi
import pulumi_gcp as gcp

bucket = gcp.storage.Bucket("bucket",
    name="static-content-bucket",
    location="US")
public_rule = gcp.storage.DefaultObjectAccessControl("public_rule",
    bucket=bucket.name,
    role="READER",
    entity="allUsers")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "static-content-bucket",
        Location = "US",
    });

    var publicRule = new Gcp.Storage.DefaultObjectAccessControl("public_rule", new()
    {
        Bucket = bucket.Name,
        Role = "READER",
        Entity = "allUsers",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:     pulumi.String("static-content-bucket"),
			Location: pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewDefaultObjectAccessControl(ctx, "public_rule", &storage.DefaultObjectAccessControlArgs{
			Bucket: bucket.Name,
			Role:   pulumi.String("READER"),
			Entity: pulumi.String("allUsers"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.DefaultObjectAccessControl;
import com.pulumi.gcp.storage.DefaultObjectAccessControlArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("static-content-bucket")
            .location("US")
            .build());

        var publicRule = new DefaultObjectAccessControl("publicRule", DefaultObjectAccessControlArgs.builder()
            .bucket(bucket.name())
            .role("READER")
            .entity("allUsers")
            .build());

    }
}
```
```yaml
resources:
  publicRule:
    type: gcp:storage:DefaultObjectAccessControl
    name: public_rule
    properties:
      bucket: ${bucket.name}
      role: READER
      entity: allUsers
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: static-content-bucket
      location: US
```
<!--End PulumiCodeChooser -->

## Import

DefaultObjectAccessControl can be imported using any of these accepted formats:

* `{{bucket}}/{{entity}}`

When using the `pulumi import` command, DefaultObjectAccessControl can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:storage/defaultObjectAccessControl:DefaultObjectAccessControl default {{bucket}}/{{entity}}
```

&
bucket" The name of the bucket.
┘
entity" ╩The entity holding the permission, in one of the following forms:
* user-{{userId}}
* user-{{email}} (such as "user-liz@example.com")
* group-{{groupId}}
* group-{{email}} (such as "group-example@googlegroups.com")
* domain-{{domain}} (such as "domain-example.com")
* project-team-{{projectId}}
* allUsers
* allAuthenticatedUsers
A
objectB" 1The name of the object, if applied to an object.
b
role" VThe access permission for the entity.
Possible values are: `OWNER`, `READER`.


- - -
"&
bucket" The name of the bucket.
"5
domain" 'The domain associated with the entity.
";
email" .The email address associated with the entity.
"┘
entity" ╩The entity holding the permission, in one of the following forms:
* user-{{userId}}
* user-{{email}} (such as "user-liz@example.com")
* group-{{groupId}}
* group-{{email}} (such as "group-example@googlegroups.com")
* domain-{{domain}} (such as "domain-example.com")
* project-team-{{projectId}}
* allUsers
* allAuthenticatedUsers
"&
entityId" The ID for the entity
"Q

generation ?The content generation of the object, if applied to an object.
"A
objectB" 1The name of the object, if applied to an object.
"Ё
projectTeamsТ*П:М
Й
storage%DefaultObjectAccessControlProjectTeamWgcp:storage/DefaultObjectAccessControlProjectTeam:DefaultObjectAccessControlProjectTeamKThe project team associated with the entity
Structure is documented below.
"b
role" VThe access permission for the entity.
Possible values are: `OWNER`, `READER`.


- - -
*╤*
/
storageHmacKeygcp:storage/hmacKey:HmacKeyщ!The hmacKeys resource represents an HMAC key within Cloud Storage. The resource
consists of a secret and HMAC key metadata. HMAC keys can be used as credentials
for service accounts.


To get more information about HmacKey, see:

* [API documentation](https://cloud.google.com/storage/docs/json_api/v1/projects/hmacKeys)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/storage/docs/authentication/managing-hmackeys)



## Example Usage

### Storage Hmac Key


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

// Create a new service account
const serviceAccount = new gcp.serviceaccount.Account("service_account", {accountId: "my-svc-acc"});
//Create the HMAC key for the associated service account
const key = new gcp.storage.HmacKey("key", {serviceAccountEmail: serviceAccount.email});
```
```python
import pulumi
import pulumi_gcp as gcp

# Create a new service account
service_account = gcp.serviceaccount.Account("service_account", account_id="my-svc-acc")
#Create the HMAC key for the associated service account
key = gcp.storage.HmacKey("key", service_account_email=service_account.email)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    // Create a new service account
    var serviceAccount = new Gcp.ServiceAccount.Account("service_account", new()
    {
        AccountId = "my-svc-acc",
    });

    //Create the HMAC key for the associated service account
    var key = new Gcp.Storage.HmacKey("key", new()
    {
        ServiceAccountEmail = serviceAccount.Email,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// Create a new service account
		serviceAccount, err := serviceaccount.NewAccount(ctx, "service_account", &serviceaccount.AccountArgs{
			AccountId: pulumi.String("my-svc-acc"),
		})
		if err != nil {
			return err
		}
		// Create the HMAC key for the associated service account
		_, err = storage.NewHmacKey(ctx, "key", &storage.HmacKeyArgs{
			ServiceAccountEmail: serviceAccount.Email,
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.storage.HmacKey;
import com.pulumi.gcp.storage.HmacKeyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        // Create a new service account
        var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
            .accountId("my-svc-acc")
            .build());

        //Create the HMAC key for the associated service account
        var key = new HmacKey("key", HmacKeyArgs.builder()
            .serviceAccountEmail(serviceAccount.email())
            .build());

    }
}
```
```yaml
resources:
  # Create a new service account
  serviceAccount:
    type: gcp:serviceaccount:Account
    name: service_account
    properties:
      accountId: my-svc-acc
  #Create the HMAC key for the associated service account
  key:
    type: gcp:storage:HmacKey
    properties:
      serviceAccountEmail: ${serviceAccount.email}
```
<!--End PulumiCodeChooser -->

## Import

HmacKey can be imported using any of these accepted formats:

* `projects/{{project}}/hmacKeys/{{access_id}}`

* `{{project}}/{{access_id}}`

* `{{access_id}}`

When using the `pulumi import` command, HmacKey can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:storage/hmacKey:HmacKey default projects/{{project}}/hmacKeys/{{access_id}}
```

```sh
$ pulumi import gcp:storage/hmacKey:HmacKey default {{project}}/{{access_id}}
```

```sh
$ pulumi import gcp:storage/hmacKey:HmacKey default {{access_id}}
```

{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
^
serviceAccountEmail" CThe email address of the key's associated service account.


- - -
У
stateB" ГThe state of the key. Can be set to one of ACTIVE, INACTIVE.
Default value is `ACTIVE`.
Possible values are: `ACTIVE`, `INACTIVE`.
"/
accessId" The access ID of the HMAC Key.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"t
secret" fHMAC secret key material.
**Note**: This property is sensitive and will not be displayed in the plan.
"^
serviceAccountEmail" CThe email address of the key's associated service account.


- - -
"У
stateB" ГThe state of the key. Can be set to one of ACTIVE, INACTIVE.
Default value is `ACTIVE`.
Possible values are: `ACTIVE`, `INACTIVE`.
"L
timeCreated" 9'The creation time of the HMAC key in RFC 3339 format. '
"Y
updated" J'The last modification time of the HMAC key metadata in RFC 3339 format.'
*дВ
V
storageInsightsReportConfig5gcp:storage/insightsReportConfig:InsightsReportConfigєpRepresents an inventory report configuration.


To get more information about ReportConfig, see:

* [API documentation](https://cloud.google.com/storage/docs/json_api/v1/reportConfig)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/storage/docs/insights/using-storage-insights)

## Example Usage

### Storage Insights Report Config


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const reportBucket = new gcp.storage.Bucket("report_bucket", {
    name: "my-bucket",
    location: "us-central1",
    forceDestroy: true,
    uniformBucketLevelAccess: true,
});
const admin = new gcp.storage.BucketIAMMember("admin", {
    bucket: reportBucket.name,
    role: "roles/storage.admin",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-storageinsights.iam.gserviceaccount.com`),
});
const config = new gcp.storage.InsightsReportConfig("config", {
    displayName: "Test Report Config",
    location: "us-central1",
    frequencyOptions: {
        frequency: "WEEKLY",
        startDate: {
            day: 15,
            month: 3,
            year: 2050,
        },
        endDate: {
            day: 15,
            month: 4,
            year: 2050,
        },
    },
    csvOptions: {
        recordSeparator: "\n",
        delimiter: ",",
        headerRequired: false,
    },
    objectMetadataReportOptions: {
        metadataFields: [
            "bucket",
            "name",
            "project",
        ],
        storageFilters: {
            bucket: reportBucket.name,
        },
        storageDestinationOptions: {
            bucket: reportBucket.name,
            destinationPath: "test-insights-reports",
        },
    },
}, {
    dependsOn: [admin],
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
report_bucket = gcp.storage.Bucket("report_bucket",
    name="my-bucket",
    location="us-central1",
    force_destroy=True,
    uniform_bucket_level_access=True)
admin = gcp.storage.BucketIAMMember("admin",
    bucket=report_bucket.name,
    role="roles/storage.admin",
    member=f"serviceAccount:service-{project.number}@gcp-sa-storageinsights.iam.gserviceaccount.com")
config = gcp.storage.InsightsReportConfig("config",
    display_name="Test Report Config",
    location="us-central1",
    frequency_options={
        "frequency": "WEEKLY",
        "start_date": {
            "day": 15,
            "month": 3,
            "year": 2050,
        },
        "end_date": {
            "day": 15,
            "month": 4,
            "year": 2050,
        },
    },
    csv_options={
        "record_separator": "\n",
        "delimiter": ",",
        "header_required": False,
    },
    object_metadata_report_options={
        "metadata_fields": [
            "bucket",
            "name",
            "project",
        ],
        "storage_filters": {
            "bucket": report_bucket.name,
        },
        "storage_destination_options": {
            "bucket": report_bucket.name,
            "destination_path": "test-insights-reports",
        },
    },
    opts = pulumi.ResourceOptions(depends_on=[admin]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var reportBucket = new Gcp.Storage.Bucket("report_bucket", new()
    {
        Name = "my-bucket",
        Location = "us-central1",
        ForceDestroy = true,
        UniformBucketLevelAccess = true,
    });

    var admin = new Gcp.Storage.BucketIAMMember("admin", new()
    {
        Bucket = reportBucket.Name,
        Role = "roles/storage.admin",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-storageinsights.iam.gserviceaccount.com",
    });

    var config = new Gcp.Storage.InsightsReportConfig("config", new()
    {
        DisplayName = "Test Report Config",
        Location = "us-central1",
        FrequencyOptions = new Gcp.Storage.Inputs.InsightsReportConfigFrequencyOptionsArgs
        {
            Frequency = "WEEKLY",
            StartDate = new Gcp.Storage.Inputs.InsightsReportConfigFrequencyOptionsStartDateArgs
            {
                Day = 15,
                Month = 3,
                Year = 2050,
            },
            EndDate = new Gcp.Storage.Inputs.InsightsReportConfigFrequencyOptionsEndDateArgs
            {
                Day = 15,
                Month = 4,
                Year = 2050,
            },
        },
        CsvOptions = new Gcp.Storage.Inputs.InsightsReportConfigCsvOptionsArgs
        {
            RecordSeparator = @"
",
            Delimiter = ",",
            HeaderRequired = false,
        },
        ObjectMetadataReportOptions = new Gcp.Storage.Inputs.InsightsReportConfigObjectMetadataReportOptionsArgs
        {
            MetadataFields = new[]
            {
                "bucket",
                "name",
                "project",
            },
            StorageFilters = new Gcp.Storage.Inputs.InsightsReportConfigObjectMetadataReportOptionsStorageFiltersArgs
            {
                Bucket = reportBucket.Name,
            },
            StorageDestinationOptions = new Gcp.Storage.Inputs.InsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptionsArgs
            {
                Bucket = reportBucket.Name,
                DestinationPath = "test-insights-reports",
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            admin,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		reportBucket, err := storage.NewBucket(ctx, "report_bucket", &storage.BucketArgs{
			Name:                     pulumi.String("my-bucket"),
			Location:                 pulumi.String("us-central1"),
			ForceDestroy:             pulumi.Bool(true),
			UniformBucketLevelAccess: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		admin, err := storage.NewBucketIAMMember(ctx, "admin", &storage.BucketIAMMemberArgs{
			Bucket: reportBucket.Name,
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-storageinsights.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewInsightsReportConfig(ctx, "config", &storage.InsightsReportConfigArgs{
			DisplayName: pulumi.String("Test Report Config"),
			Location:    pulumi.String("us-central1"),
			FrequencyOptions: &storage.InsightsReportConfigFrequencyOptionsArgs{
				Frequency: pulumi.String("WEEKLY"),
				StartDate: &storage.InsightsReportConfigFrequencyOptionsStartDateArgs{
					Day:   pulumi.Int(15),
					Month: pulumi.Int(3),
					Year:  pulumi.Int(2050),
				},
				EndDate: &storage.InsightsReportConfigFrequencyOptionsEndDateArgs{
					Day:   pulumi.Int(15),
					Month: pulumi.Int(4),
					Year:  pulumi.Int(2050),
				},
			},
			CsvOptions: &storage.InsightsReportConfigCsvOptionsArgs{
				RecordSeparator: pulumi.String("\n"),
				Delimiter:       pulumi.String(","),
				HeaderRequired:  pulumi.Bool(false),
			},
			ObjectMetadataReportOptions: &storage.InsightsReportConfigObjectMetadataReportOptionsArgs{
				MetadataFields: pulumi.StringArray{
					pulumi.String("bucket"),
					pulumi.String("name"),
					pulumi.String("project"),
				},
				StorageFilters: &storage.InsightsReportConfigObjectMetadataReportOptionsStorageFiltersArgs{
					Bucket: reportBucket.Name,
				},
				StorageDestinationOptions: &storage.InsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptionsArgs{
					Bucket:          reportBucket.Name,
					DestinationPath: pulumi.String("test-insights-reports"),
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			admin,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import com.pulumi.gcp.storage.InsightsReportConfig;
import com.pulumi.gcp.storage.InsightsReportConfigArgs;
import com.pulumi.gcp.storage.inputs.InsightsReportConfigFrequencyOptionsArgs;
import com.pulumi.gcp.storage.inputs.InsightsReportConfigFrequencyOptionsStartDateArgs;
import com.pulumi.gcp.storage.inputs.InsightsReportConfigFrequencyOptionsEndDateArgs;
import com.pulumi.gcp.storage.inputs.InsightsReportConfigCsvOptionsArgs;
import com.pulumi.gcp.storage.inputs.InsightsReportConfigObjectMetadataReportOptionsArgs;
import com.pulumi.gcp.storage.inputs.InsightsReportConfigObjectMetadataReportOptionsStorageFiltersArgs;
import com.pulumi.gcp.storage.inputs.InsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptionsArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var reportBucket = new Bucket("reportBucket", BucketArgs.builder()
            .name("my-bucket")
            .location("us-central1")
            .forceDestroy(true)
            .uniformBucketLevelAccess(true)
            .build());

        var admin = new BucketIAMMember("admin", BucketIAMMemberArgs.builder()
            .bucket(reportBucket.name())
            .role("roles/storage.admin")
            .member(String.format("serviceAccount:service-%s@gcp-sa-storageinsights.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var config = new InsightsReportConfig("config", InsightsReportConfigArgs.builder()
            .displayName("Test Report Config")
            .location("us-central1")
            .frequencyOptions(InsightsReportConfigFrequencyOptionsArgs.builder()
                .frequency("WEEKLY")
                .startDate(InsightsReportConfigFrequencyOptionsStartDateArgs.builder()
                    .day(15)
                    .month(3)
                    .year(2050)
                    .build())
                .endDate(InsightsReportConfigFrequencyOptionsEndDateArgs.builder()
                    .day(15)
                    .month(4)
                    .year(2050)
                    .build())
                .build())
            .csvOptions(InsightsReportConfigCsvOptionsArgs.builder()
                .recordSeparator("""

                """)
                .delimiter(",")
                .headerRequired(false)
                .build())
            .objectMetadataReportOptions(InsightsReportConfigObjectMetadataReportOptionsArgs.builder()
                .metadataFields(                
                    "bucket",
                    "name",
                    "project")
                .storageFilters(InsightsReportConfigObjectMetadataReportOptionsStorageFiltersArgs.builder()
                    .bucket(reportBucket.name())
                    .build())
                .storageDestinationOptions(InsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptionsArgs.builder()
                    .bucket(reportBucket.name())
                    .destinationPath("test-insights-reports")
                    .build())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(admin)
                .build());

    }
}
```
```yaml
resources:
  config:
    type: gcp:storage:InsightsReportConfig
    properties:
      displayName: Test Report Config
      location: us-central1
      frequencyOptions:
        frequency: WEEKLY
        startDate:
          day: 15
          month: 3
          year: 2050
        endDate:
          day: 15
          month: 4
          year: 2050
      csvOptions:
        recordSeparator: |2+
        delimiter: ','
        headerRequired: false
      objectMetadataReportOptions:
        metadataFields:
          - bucket
          - name
          - project
        storageFilters:
          bucket: ${reportBucket.name}
        storageDestinationOptions:
          bucket: ${reportBucket.name}
          destinationPath: test-insights-reports
    options:
      dependsOn:
        - ${admin}
  reportBucket:
    type: gcp:storage:Bucket
    name: report_bucket
    properties:
      name: my-bucket
      location: us-central1
      forceDestroy: true
      uniformBucketLevelAccess: true
  admin:
    type: gcp:storage:BucketIAMMember
    properties:
      bucket: ${reportBucket.name}
      role: roles/storage.admin
      member: serviceAccount:service-${project.number}@gcp-sa-storageinsights.iam.gserviceaccount.com
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

ReportConfig can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/reportConfigs/{{name}}`

* `{{project}}/{{location}}/{{name}}`

* `{{location}}/{{name}}`

When using the `pulumi import` command, ReportConfig can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:storage/insightsReportConfig:InsightsReportConfig default projects/{{project}}/locations/{{location}}/reportConfigs/{{name}}
```

```sh
$ pulumi import gcp:storage/insightsReportConfig:InsightsReportConfig default {{project}}/{{location}}/{{name}}
```

```sh
$ pulumi import gcp:storage/insightsReportConfig:InsightsReportConfig default {{location}}/{{name}}
```

ь

csvOptionsx:v
t
storageInsightsReportConfigCsvOptionsIgcp:storage/InsightsReportConfigCsvOptions:InsightsReportConfigCsvOptionsdOptions for configuring the format of the inventory report CSV file.
Structure is documented below.
Г
displayNameB" nThe editable display name of the inventory report configuration. Has a limit of 256 characters. Can be empty.
у
frequencyOptionsПBМ:Й
Ж
storage$InsightsReportConfigFrequencyOptionsUgcp:storage/InsightsReportConfigFrequencyOptions:InsightsReportConfigFrequencyOptions=Options for configuring how inventory reports are generated.
Т
location" БThe location of the ReportConfig. The source and destination buckets specified in the ReportConfig
must be in the same location.
Й
objectMetadataReportOptions░Bн:к
з
storage/InsightsReportConfigObjectMetadataReportOptionskgcp:storage/InsightsReportConfigObjectMetadataReportOptions:InsightsReportConfigObjectMetadataReportOptions7Options for including metadata in an inventory report.

projectB" "ь

csvOptionsx:v
t
storageInsightsReportConfigCsvOptionsIgcp:storage/InsightsReportConfigCsvOptions:InsightsReportConfigCsvOptionsdOptions for configuring the format of the inventory report CSV file.
Structure is documented below.
"Г
displayNameB" nThe editable display name of the inventory report configuration. Has a limit of 256 characters. Can be empty.
"у
frequencyOptionsПBМ:Й
Ж
storage$InsightsReportConfigFrequencyOptionsUgcp:storage/InsightsReportConfigFrequencyOptions:InsightsReportConfigFrequencyOptions=Options for configuring how inventory reports are generated.
"Т
location" БThe location of the ReportConfig. The source and destination buckets specified in the ReportConfig
must be in the same location.
"<
name" 0The UUID of the inventory report configuration.
"Й
objectMetadataReportOptions░Bн:к
з
storage/InsightsReportConfigObjectMetadataReportOptionskgcp:storage/InsightsReportConfigObjectMetadataReportOptions:InsightsReportConfigObjectMetadataReportOptions7Options for including metadata in an inventory report.
"
project" *┘,
A
storageManagedFolder'gcp:storage/managedFolder:ManagedFolderЙ#A Google Cloud Storage Managed Folder.

You can apply Identity and Access Management (IAM) policies to
managed folders to grant principals access only to the objects
within the managed folder, which lets you more finely control access
for specific data sets and tables within a bucket. You can nest
managed folders up to 15 levels deep, including the parent managed
folder.

Managed folders can only be created in buckets that have uniform
bucket-level access enabled.


To get more information about ManagedFolder, see:

* [API documentation](https://cloud.google.com/storage/docs/json_api/v1/managedFolder)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/storage/docs/managed-folders)

## Example Usage

### Storage Managed Folder Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const bucket = new gcp.storage.Bucket("bucket", {
    name: "my-bucket",
    location: "EU",
    uniformBucketLevelAccess: true,
});
const folder = new gcp.storage.ManagedFolder("folder", {
    bucket: bucket.name,
    name: "managed/folder/name/",
    forceDestroy: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

bucket = gcp.storage.Bucket("bucket",
    name="my-bucket",
    location="EU",
    uniform_bucket_level_access=True)
folder = gcp.storage.ManagedFolder("folder",
    bucket=bucket.name,
    name="managed/folder/name/",
    force_destroy=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "my-bucket",
        Location = "EU",
        UniformBucketLevelAccess = true,
    });

    var folder = new Gcp.Storage.ManagedFolder("folder", new()
    {
        Bucket = bucket.Name,
        Name = "managed/folder/name/",
        ForceDestroy = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:                     pulumi.String("my-bucket"),
			Location:                 pulumi.String("EU"),
			UniformBucketLevelAccess: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolder(ctx, "folder", &storage.ManagedFolderArgs{
			Bucket:       bucket.Name,
			Name:         pulumi.String("managed/folder/name/"),
			ForceDestroy: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.ManagedFolder;
import com.pulumi.gcp.storage.ManagedFolderArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("my-bucket")
            .location("EU")
            .uniformBucketLevelAccess(true)
            .build());

        var folder = new ManagedFolder("folder", ManagedFolderArgs.builder()
            .bucket(bucket.name())
            .name("managed/folder/name/")
            .forceDestroy(true)
            .build());

    }
}
```
```yaml
resources:
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: my-bucket
      location: EU
      uniformBucketLevelAccess: true
  folder:
    type: gcp:storage:ManagedFolder
    properties:
      bucket: ${bucket.name}
      name: managed/folder/name/
      forceDestroy: true
```
<!--End PulumiCodeChooser -->

## Import

ManagedFolder can be imported using any of these accepted formats:

* `{{bucket}}/managedFolders/{{name}}`

* `{{bucket}}/{{name}}`

When using the `pulumi import` command, ManagedFolder can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:storage/managedFolder:ManagedFolder default {{bucket}}/managedFolders/{{name}}
```

```sh
$ pulumi import gcp:storage/managedFolder:ManagedFolder default {{bucket}}/{{name}}
```

G
bucket" 9The name of the bucket that contains the managed folder.
╫
forceDestroyB
 └Allows the deletion of a managed folder even if contains
objects. If a non-empty managed folder is deleted, any objects
within the folder will remain in a simulated folder with the
same name.
Р
nameB" БThe name of the managed folder expressed as a path. Must include
trailing '/'. For example, `example_dir/example_dir2/`.


- - -
"G
bucket" 9The name of the bucket that contains the managed folder.
"J

createTime" 8The timestamp at which this managed folder was created.
"╫
forceDestroyB
 └Allows the deletion of a managed folder even if contains
objects. If a non-empty managed folder is deleted, any objects
within the folder will remain in a simulated folder with the
same name.
"E
metageneration" /The metadata generation of the managed folder.
"О
name" БThe name of the managed folder expressed as a path. Must include
trailing '/'. For example, `example_dir/example_dir2/`.


- - -
"1
selfLink" !The URI of the created resource.
"X

updateTime" FThe timestamp at which this managed folder was most recently updated.
*а╡
_
storageManagedFolderIamBinding;gcp:storage/managedFolderIamBinding:ManagedFolderIamBinding╞ХThree different resources help you manage your IAM policy for Cloud Storage ManagedFolder. Each of these resources serves a different use case:

* `gcp.storage.ManagedFolderIamPolicy`: Authoritative. Sets the IAM policy for the managedfolder and replaces any existing policy already attached.
* `gcp.storage.ManagedFolderIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the managedfolder are preserved.
* `gcp.storage.ManagedFolderIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the managedfolder are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.ManagedFolderIamPolicy`: Retrieves the IAM policy for the managedfolder

> **Note:** `gcp.storage.ManagedFolderIamPolicy` **cannot** be used in conjunction with `gcp.storage.ManagedFolderIamBinding` and `gcp.storage.ManagedFolderIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.ManagedFolderIamBinding` resources **can be** used in conjunction with `gcp.storage.ManagedFolderIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.ManagedFolderIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.ManagedFolderIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(ManagedFolderIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
			Condition: &storage.ManagedFolderIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(ManagedFolderIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Cloud Storage ManagedFolder
Three different resources help you manage your IAM policy for Cloud Storage ManagedFolder. Each of these resources serves a different use case:

* `gcp.storage.ManagedFolderIamPolicy`: Authoritative. Sets the IAM policy for the managedfolder and replaces any existing policy already attached.
* `gcp.storage.ManagedFolderIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the managedfolder are preserved.
* `gcp.storage.ManagedFolderIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the managedfolder are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.ManagedFolderIamPolicy`: Retrieves the IAM policy for the managedfolder

> **Note:** `gcp.storage.ManagedFolderIamPolicy` **cannot** be used in conjunction with `gcp.storage.ManagedFolderIamBinding` and `gcp.storage.ManagedFolderIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.ManagedFolderIamBinding` resources **can be** used in conjunction with `gcp.storage.ManagedFolderIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.ManagedFolderIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.ManagedFolderIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(ManagedFolderIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
			Condition: &storage.ManagedFolderIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(ManagedFolderIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* b/{{bucket}}/managedFolders/{{managed_folder}}

* {{bucket}}/{{managed_folder}}

Any variables not passed in the import command will be taken from the provider configuration.

Cloud Storage managedfolder IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:storage/managedFolderIamBinding:ManagedFolderIamBinding editor "b/{{bucket}}/managedFolders/{{managed_folder}} roles/storage.objectViewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:storage/managedFolderIamBinding:ManagedFolderIamBinding editor "b/{{bucket}}/managedFolders/{{managed_folder}} roles/storage.objectViewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:storage/managedFolderIamBinding:ManagedFolderIamBinding editor b/{{bucket}}/managedFolders/{{managed_folder}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

В
bucket" tThe name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
О
	conditionАB~:|
z
storage ManagedFolderIamBindingConditionMgcp:storage/ManagedFolderIamBindingCondition:ManagedFolderIamBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
P
managedFolder" ;Used to find the parent resource to bind the IAM policy to
╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
▄
role" ╧The role that should be applied. Only one
`gcp.storage.ManagedFolderIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"В
bucket" tThe name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
"О
	conditionАB~:|
z
storage ManagedFolderIamBindingConditionMgcp:storage/ManagedFolderIamBindingCondition:ManagedFolderIamBindingCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"3
etag" '(Computed) The etag of the IAM policy.
"P
managedFolder" ;Used to find the parent resource to bind the IAM policy to
"╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"▄
role" ╧The role that should be applied. Only one
`gcp.storage.ManagedFolderIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*Й╡
\
storageManagedFolderIamMember9gcp:storage/managedFolderIamMember:ManagedFolderIamMember└ХThree different resources help you manage your IAM policy for Cloud Storage ManagedFolder. Each of these resources serves a different use case:

* `gcp.storage.ManagedFolderIamPolicy`: Authoritative. Sets the IAM policy for the managedfolder and replaces any existing policy already attached.
* `gcp.storage.ManagedFolderIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the managedfolder are preserved.
* `gcp.storage.ManagedFolderIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the managedfolder are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.ManagedFolderIamPolicy`: Retrieves the IAM policy for the managedfolder

> **Note:** `gcp.storage.ManagedFolderIamPolicy` **cannot** be used in conjunction with `gcp.storage.ManagedFolderIamBinding` and `gcp.storage.ManagedFolderIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.ManagedFolderIamBinding` resources **can be** used in conjunction with `gcp.storage.ManagedFolderIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.ManagedFolderIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.ManagedFolderIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(ManagedFolderIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
			Condition: &storage.ManagedFolderIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(ManagedFolderIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Cloud Storage ManagedFolder
Three different resources help you manage your IAM policy for Cloud Storage ManagedFolder. Each of these resources serves a different use case:

* `gcp.storage.ManagedFolderIamPolicy`: Authoritative. Sets the IAM policy for the managedfolder and replaces any existing policy already attached.
* `gcp.storage.ManagedFolderIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the managedfolder are preserved.
* `gcp.storage.ManagedFolderIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the managedfolder are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.ManagedFolderIamPolicy`: Retrieves the IAM policy for the managedfolder

> **Note:** `gcp.storage.ManagedFolderIamPolicy` **cannot** be used in conjunction with `gcp.storage.ManagedFolderIamBinding` and `gcp.storage.ManagedFolderIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.ManagedFolderIamBinding` resources **can be** used in conjunction with `gcp.storage.ManagedFolderIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.ManagedFolderIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.ManagedFolderIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(ManagedFolderIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
			Condition: &storage.ManagedFolderIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(ManagedFolderIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* b/{{bucket}}/managedFolders/{{managed_folder}}

* {{bucket}}/{{managed_folder}}

Any variables not passed in the import command will be taken from the provider configuration.

Cloud Storage managedfolder IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:storage/managedFolderIamMember:ManagedFolderIamMember editor "b/{{bucket}}/managedFolders/{{managed_folder}} roles/storage.objectViewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:storage/managedFolderIamMember:ManagedFolderIamMember editor "b/{{bucket}}/managedFolders/{{managed_folder}} roles/storage.objectViewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:storage/managedFolderIamMember:ManagedFolderIamMember editor b/{{bucket}}/managedFolders/{{managed_folder}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

В
bucket" tThe name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
К
	condition}B{:y
w
storageManagedFolderIamMemberConditionKgcp:storage/ManagedFolderIamMemberCondition:ManagedFolderIamMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
P
managedFolder" ;Used to find the parent resource to bind the IAM policy to
╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
▄
role" ╧The role that should be applied. Only one
`gcp.storage.ManagedFolderIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"В
bucket" tThe name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
"К
	condition}B{:y
w
storageManagedFolderIamMemberConditionKgcp:storage/ManagedFolderIamMemberCondition:ManagedFolderIamMemberCondition~An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
Structure is documented below.
"3
etag" '(Computed) The etag of the IAM policy.
"P
managedFolder" ;Used to find the parent resource to bind the IAM policy to
"╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"▄
role" ╧The role that should be applied. Only one
`gcp.storage.ManagedFolderIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*╟Ы
\
storageManagedFolderIamPolicy9gcp:storage/managedFolderIamPolicy:ManagedFolderIamPolicy└ХThree different resources help you manage your IAM policy for Cloud Storage ManagedFolder. Each of these resources serves a different use case:

* `gcp.storage.ManagedFolderIamPolicy`: Authoritative. Sets the IAM policy for the managedfolder and replaces any existing policy already attached.
* `gcp.storage.ManagedFolderIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the managedfolder are preserved.
* `gcp.storage.ManagedFolderIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the managedfolder are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.ManagedFolderIamPolicy`: Retrieves the IAM policy for the managedfolder

> **Note:** `gcp.storage.ManagedFolderIamPolicy` **cannot** be used in conjunction with `gcp.storage.ManagedFolderIamBinding` and `gcp.storage.ManagedFolderIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.ManagedFolderIamBinding` resources **can be** used in conjunction with `gcp.storage.ManagedFolderIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.ManagedFolderIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.ManagedFolderIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(ManagedFolderIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
			Condition: &storage.ManagedFolderIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(ManagedFolderIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Cloud Storage ManagedFolder
Three different resources help you manage your IAM policy for Cloud Storage ManagedFolder. Each of these resources serves a different use case:

* `gcp.storage.ManagedFolderIamPolicy`: Authoritative. Sets the IAM policy for the managedfolder and replaces any existing policy already attached.
* `gcp.storage.ManagedFolderIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the managedfolder are preserved.
* `gcp.storage.ManagedFolderIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the managedfolder are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.storage.ManagedFolderIamPolicy`: Retrieves the IAM policy for the managedfolder

> **Note:** `gcp.storage.ManagedFolderIamPolicy` **cannot** be used in conjunction with `gcp.storage.ManagedFolderIamBinding` and `gcp.storage.ManagedFolderIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.storage.ManagedFolderIamBinding` resources **can be** used in conjunction with `gcp.storage.ManagedFolderIamMember` resources **only if** they do not grant privilege to the same role.

> **Note:**  This resource supports IAM Conditions but they have some known limitations which can be found [here](https://cloud.google.com/iam/docs/conditions-overview#limitations). Please review this article if you are having issues with IAM Conditions.


## gcp.storage.ManagedFolderIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/storage.admin",
        members: ["user:jane@example.com"],
        condition: {
            title: "expires_after_2019_12_31",
            description: "Expiring at midnight of 2019-12-31",
            expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    }],
});
const policy = new gcp.storage.ManagedFolderIamPolicy("policy", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/storage.admin",
    "members": ["user:jane@example.com"],
    "condition": {
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
}])
policy = gcp.storage.ManagedFolderIamPolicy("policy",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/storage.admin",
                Members = new[]
                {
                    "user:jane@example.com",
                },
                Condition = new Gcp.Organizations.Inputs.GetIAMPolicyBindingConditionInputArgs
                {
                    Title = "expires_after_2019_12_31",
                    Description = "Expiring at midnight of 2019-12-31",
                    Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
                },
            },
        },
    });

    var policy = new Gcp.Storage.ManagedFolderIamPolicy("policy", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/storage.admin",
					Members: []string{
						"user:jane@example.com",
					},
					Condition: {
						Title:       "expires_after_2019_12_31",
						Description: pulumi.StringRef("Expiring at midnight of 2019-12-31"),
						Expression:  "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewManagedFolderIamPolicy(ctx, "policy", &storage.ManagedFolderIamPolicyArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			PolicyData:    pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.storage.ManagedFolderIamPolicy;
import com.pulumi.gcp.storage.ManagedFolderIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/storage.admin")
                .members("user:jane@example.com")
                .condition(GetIAMPolicyBindingConditionArgs.builder()
                    .title("expires_after_2019_12_31")
                    .description("Expiring at midnight of 2019-12-31")
                    .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                    .build())
                .build())
            .build());

        var policy = new ManagedFolderIamPolicy("policy", ManagedFolderIamPolicyArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:storage:ManagedFolderIamPolicy
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/storage.admin
            members:
              - user:jane@example.com
            condition:
              title: expires_after_2019_12_31
              description: Expiring at midnight of 2019-12-31
              expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.storage.ManagedFolderIamBinding("binding", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    members: ["user:jane@example.com"],
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.storage.ManagedFolderIamBinding("binding",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    members=["user:jane@example.com"],
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Storage.ManagedFolderIamBinding("binding", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Members = new[]
        {
            "user:jane@example.com",
        },
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamBindingConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamBinding(ctx, "binding", &storage.ManagedFolderIamBindingArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
			Condition: &storage.ManagedFolderIamBindingConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamBinding;
import com.pulumi.gcp.storage.ManagedFolderIamBindingArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamBindingConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new ManagedFolderIamBinding("binding", ManagedFolderIamBindingArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .members("user:jane@example.com")
            .condition(ManagedFolderIamBindingConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:storage:ManagedFolderIamBinding
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      members:
        - user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->
## gcp.storage.ManagedFolderIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

With IAM Conditions:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.storage.ManagedFolderIamMember("member", {
    bucket: folder.bucket,
    managedFolder: folder.name,
    role: "roles/storage.admin",
    member: "user:jane@example.com",
    condition: {
        title: "expires_after_2019_12_31",
        description: "Expiring at midnight of 2019-12-31",
        expression: "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.storage.ManagedFolderIamMember("member",
    bucket=folder["bucket"],
    managed_folder=folder["name"],
    role="roles/storage.admin",
    member="user:jane@example.com",
    condition={
        "title": "expires_after_2019_12_31",
        "description": "Expiring at midnight of 2019-12-31",
        "expression": "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Storage.ManagedFolderIamMember("member", new()
    {
        Bucket = folder.Bucket,
        ManagedFolder = folder.Name,
        Role = "roles/storage.admin",
        Member = "user:jane@example.com",
        Condition = new Gcp.Storage.Inputs.ManagedFolderIamMemberConditionArgs
        {
            Title = "expires_after_2019_12_31",
            Description = "Expiring at midnight of 2019-12-31",
            Expression = "request.time < timestamp(\"2020-01-01T00:00:00Z\")",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewManagedFolderIamMember(ctx, "member", &storage.ManagedFolderIamMemberArgs{
			Bucket:        pulumi.Any(folder.Bucket),
			ManagedFolder: pulumi.Any(folder.Name),
			Role:          pulumi.String("roles/storage.admin"),
			Member:        pulumi.String("user:jane@example.com"),
			Condition: &storage.ManagedFolderIamMemberConditionArgs{
				Title:       pulumi.String("expires_after_2019_12_31"),
				Description: pulumi.String("Expiring at midnight of 2019-12-31"),
				Expression:  pulumi.String("request.time < timestamp(\"2020-01-01T00:00:00Z\")"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.ManagedFolderIamMember;
import com.pulumi.gcp.storage.ManagedFolderIamMemberArgs;
import com.pulumi.gcp.storage.inputs.ManagedFolderIamMemberConditionArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new ManagedFolderIamMember("member", ManagedFolderIamMemberArgs.builder()
            .bucket(folder.bucket())
            .managedFolder(folder.name())
            .role("roles/storage.admin")
            .member("user:jane@example.com")
            .condition(ManagedFolderIamMemberConditionArgs.builder()
                .title("expires_after_2019_12_31")
                .description("Expiring at midnight of 2019-12-31")
                .expression("request.time < timestamp(\"2020-01-01T00:00:00Z\")")
                .build())
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:storage:ManagedFolderIamMember
    properties:
      bucket: ${folder.bucket}
      managedFolder: ${folder.name}
      role: roles/storage.admin
      member: user:jane@example.com
      condition:
        title: expires_after_2019_12_31
        description: Expiring at midnight of 2019-12-31
        expression: request.time < timestamp("2020-01-01T00:00:00Z")
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* b/{{bucket}}/managedFolders/{{managed_folder}}

* {{bucket}}/{{managed_folder}}

Any variables not passed in the import command will be taken from the provider configuration.

Cloud Storage managedfolder IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:storage/managedFolderIamPolicy:ManagedFolderIamPolicy editor "b/{{bucket}}/managedFolders/{{managed_folder}} roles/storage.objectViewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:storage/managedFolderIamPolicy:ManagedFolderIamPolicy editor "b/{{bucket}}/managedFolders/{{managed_folder}} roles/storage.objectViewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:storage/managedFolderIamPolicy:ManagedFolderIamPolicy editor b/{{bucket}}/managedFolders/{{managed_folder}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

В
bucket" tThe name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
P
managedFolder" ;Used to find the parent resource to bind the IAM policy to
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"В
bucket" tThe name of the bucket that contains the managed folder. Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"P
managedFolder" ;Used to find the parent resource to bind the IAM policy to
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
*эa
>
storageNotification%gcp:storage/notification:NotificationХOCreates a new notification configuration on a specified bucket, establishing a flow of event notifications from GCS to a Cloud Pub/Sub topic.
 For more information see
[the official documentation](https://cloud.google.com/storage/docs/pubsub-notifications)
and
[API](https://cloud.google.com/storage/docs/json_api/v1/notifications).

In order to enable notifications, a special Google Cloud Storage service account unique to the project
must exist and have the IAM permission "projects.topics.publish" for a Cloud Pub/Sub topic in the project.
This service account is not created automatically when a project is created.
To ensure the service account exists and obtain its email address for use in granting the correct IAM permission, use the
[`gcp.storage.getProjectServiceAccount`](https://www.terraform.io/docs/providers/google/d/storage_project_service_account.html)
datasource's `email_address` value, and see below for an example of enabling notifications by granting the correct IAM permission.
See [the notifications documentation](https://cloud.google.com/storage/docs/gsutil/commands/notification) for more details.

>**NOTE**: This resource can affect your storage IAM policy. If you are using this in the same config as your storage IAM policy resources, consider
making this resource dependent on those IAM resources via `depends_on`. This will safeguard against errors due to IAM race conditions.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

// Enable notifications by giving the correct IAM permission to the unique service account.
const gcsAccount = gcp.storage.getProjectServiceAccount({});
const topic = new gcp.pubsub.Topic("topic", {name: "default_topic"});
const binding = new gcp.pubsub.TopicIAMBinding("binding", {
    topic: topic.id,
    role: "roles/pubsub.publisher",
    members: [gcsAccount.then(gcsAccount => `serviceAccount:${gcsAccount.emailAddress}`)],
});
// End enabling notifications
const bucket = new gcp.storage.Bucket("bucket", {
    name: "default_bucket",
    location: "US",
});
const notification = new gcp.storage.Notification("notification", {
    bucket: bucket.name,
    payloadFormat: "JSON_API_V1",
    topic: topic.id,
    eventTypes: [
        "OBJECT_FINALIZE",
        "OBJECT_METADATA_UPDATE",
    ],
    customAttributes: {
        "new-attribute": "new-attribute-value",
    },
}, {
    dependsOn: [binding],
});
```
```python
import pulumi
import pulumi_gcp as gcp

# Enable notifications by giving the correct IAM permission to the unique service account.
gcs_account = gcp.storage.get_project_service_account()
topic = gcp.pubsub.Topic("topic", name="default_topic")
binding = gcp.pubsub.TopicIAMBinding("binding",
    topic=topic.id,
    role="roles/pubsub.publisher",
    members=[f"serviceAccount:{gcs_account.email_address}"])
# End enabling notifications
bucket = gcp.storage.Bucket("bucket",
    name="default_bucket",
    location="US")
notification = gcp.storage.Notification("notification",
    bucket=bucket.name,
    payload_format="JSON_API_V1",
    topic=topic.id,
    event_types=[
        "OBJECT_FINALIZE",
        "OBJECT_METADATA_UPDATE",
    ],
    custom_attributes={
        "new-attribute": "new-attribute-value",
    },
    opts = pulumi.ResourceOptions(depends_on=[binding]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    // Enable notifications by giving the correct IAM permission to the unique service account.
    var gcsAccount = Gcp.Storage.GetProjectServiceAccount.Invoke();

    var topic = new Gcp.PubSub.Topic("topic", new()
    {
        Name = "default_topic",
    });

    var binding = new Gcp.PubSub.TopicIAMBinding("binding", new()
    {
        Topic = topic.Id,
        Role = "roles/pubsub.publisher",
        Members = new[]
        {
            $"serviceAccount:{gcsAccount.Apply(getProjectServiceAccountResult => getProjectServiceAccountResult.EmailAddress)}",
        },
    });

    // End enabling notifications
    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "default_bucket",
        Location = "US",
    });

    var notification = new Gcp.Storage.Notification("notification", new()
    {
        Bucket = bucket.Name,
        PayloadFormat = "JSON_API_V1",
        Topic = topic.Id,
        EventTypes = new[]
        {
            "OBJECT_FINALIZE",
            "OBJECT_METADATA_UPDATE",
        },
        CustomAttributes = 
        {
            { "new-attribute", "new-attribute-value" },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            binding,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// Enable notifications by giving the correct IAM permission to the unique service account.
		gcsAccount, err := storage.GetProjectServiceAccount(ctx, &storage.GetProjectServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		topic, err := pubsub.NewTopic(ctx, "topic", &pubsub.TopicArgs{
			Name: pulumi.String("default_topic"),
		})
		if err != nil {
			return err
		}
		binding, err := pubsub.NewTopicIAMBinding(ctx, "binding", &pubsub.TopicIAMBindingArgs{
			Topic: topic.ID(),
			Role:  pulumi.String("roles/pubsub.publisher"),
			Members: pulumi.StringArray{
				pulumi.Sprintf("serviceAccount:%v", gcsAccount.EmailAddress),
			},
		})
		if err != nil {
			return err
		}
		// End enabling notifications
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:     pulumi.String("default_bucket"),
			Location: pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewNotification(ctx, "notification", &storage.NotificationArgs{
			Bucket:        bucket.Name,
			PayloadFormat: pulumi.String("JSON_API_V1"),
			Topic:         topic.ID(),
			EventTypes: pulumi.StringArray{
				pulumi.String("OBJECT_FINALIZE"),
				pulumi.String("OBJECT_METADATA_UPDATE"),
			},
			CustomAttributes: pulumi.StringMap{
				"new-attribute": pulumi.String("new-attribute-value"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			binding,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetProjectServiceAccountArgs;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.pubsub.TopicIAMBinding;
import com.pulumi.gcp.pubsub.TopicIAMBindingArgs;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.Notification;
import com.pulumi.gcp.storage.NotificationArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        // Enable notifications by giving the correct IAM permission to the unique service account.
        final var gcsAccount = StorageFunctions.getProjectServiceAccount();

        var topic = new Topic("topic", TopicArgs.builder()
            .name("default_topic")
            .build());

        var binding = new TopicIAMBinding("binding", TopicIAMBindingArgs.builder()
            .topic(topic.id())
            .role("roles/pubsub.publisher")
            .members(String.format("serviceAccount:%s", gcsAccount.applyValue(getProjectServiceAccountResult -> getProjectServiceAccountResult.emailAddress())))
            .build());

        // End enabling notifications
        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("default_bucket")
            .location("US")
            .build());

        var notification = new Notification("notification", NotificationArgs.builder()
            .bucket(bucket.name())
            .payloadFormat("JSON_API_V1")
            .topic(topic.id())
            .eventTypes(            
                "OBJECT_FINALIZE",
                "OBJECT_METADATA_UPDATE")
            .customAttributes(Map.of("new-attribute", "new-attribute-value"))
            .build(), CustomResourceOptions.builder()
                .dependsOn(binding)
                .build());

    }
}
```
```yaml
resources:
  notification:
    type: gcp:storage:Notification
    properties:
      bucket: ${bucket.name}
      payloadFormat: JSON_API_V1
      topic: ${topic.id}
      eventTypes:
        - OBJECT_FINALIZE
        - OBJECT_METADATA_UPDATE
      customAttributes:
        new-attribute: new-attribute-value
    options:
      dependsOn:
        - ${binding}
  binding:
    type: gcp:pubsub:TopicIAMBinding
    properties:
      topic: ${topic.id}
      role: roles/pubsub.publisher
      members:
        - serviceAccount:${gcsAccount.emailAddress}
  # End enabling notifications
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: default_bucket
      location: US
  topic:
    type: gcp:pubsub:Topic
    properties:
      name: default_topic
variables:
  # Enable notifications by giving the correct IAM permission to the unique service account.
  gcsAccount:
    fn::invoke:
      function: gcp:storage:getProjectServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Storage notifications can be imported using any of these accepted formats:

* `{{bucket_name}}/notificationConfigs/{{id}}`

When using the `pulumi import` command, Storage notifications can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:storage/notification:Notification default {{bucket_name}}/notificationConfigs/{{id}}
```

&
bucket" The name of the bucket.
У
customAttributesB2" wA set of key/value attribute pairs to attach to each Cloud PubSub message published for this notification subscription
Й

eventTypesB*" ЄList of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all event types. The valid types are: `"OBJECT_FINALIZE"`, `"OBJECT_METADATA_UPDATE"`, `"OBJECT_DELETE"`, `"OBJECT_ARCHIVE"`
╦
objectNamePrefixB" ░Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in this bucket whose names begin with the specified prefix.
]
payloadFormat" HThe desired content of the Payload. One of `"JSON_API_V1"` or `"NONE"`.
┘
topic" ╦The Cloud PubSub topic to which this subscription publishes. Expects either the
topic name, assumed to belong to the default GCP provider project, or the project-level name,
i.e. `projects/my-gcp-project/topics/my-topic` or `my-topic`. If the project is not set in the provider,
you will need to use the project-level name.

- - -
"&
bucket" The name of the bucket.
"У
customAttributesB2" wA set of key/value attribute pairs to attach to each Cloud PubSub message published for this notification subscription
"Й

eventTypesB*" ЄList of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all event types. The valid types are: `"OBJECT_FINALIZE"`, `"OBJECT_METADATA_UPDATE"`, `"OBJECT_DELETE"`, `"OBJECT_ARCHIVE"`
":
notificationId" $The ID of the created notification.
"╦
objectNamePrefixB" ░Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in this bucket whose names begin with the specified prefix.
"]
payloadFormat" HThe desired content of the Payload. One of `"JSON_API_V1"` or `"NONE"`.
"1
selfLink" !The URI of the created resource.
"┘
topic" ╦The Cloud PubSub topic to which this subscription publishes. Expects either the
topic name, assumed to belong to the default GCP provider project, or the project-level name,
i.e. `projects/my-gcp-project/topics/my-topic` or `my-topic`. If the project is not set in the provider,
you will need to use the project-level name.

- - -
*┐4
5
storage	ObjectACLgcp:storage/objectACL:ObjectACL╗+Authoritatively manages the access control list (ACL) for an object in a Google
Cloud Storage (GCS) bucket. Removing a `gcp.storage.ObjectACL` sets the
acl to the `private` [predefined ACL](https://cloud.google.com/storage/docs/access-control#predefined-acl).

For more information see
[the official documentation](https://cloud.google.com/storage/docs/access-control/lists) 
and 
[API](https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls).

> Want fine-grained control over object ACLs? Use `gcp.storage.ObjectAccessControl` to control individual
role entity pairs.

## Example Usage

Create an object ACL with one owner and one reader.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const image_store = new gcp.storage.Bucket("image-store", {
    name: "image-store-bucket",
    location: "EU",
});
const image = new gcp.storage.BucketObject("image", {
    name: "image1",
    bucket: image_store.name,
    source: new pulumi.asset.FileAsset("image1.jpg"),
});
const image_store_acl = new gcp.storage.ObjectACL("image-store-acl", {
    bucket: image_store.name,
    object: image.outputName,
    roleEntities: [
        "OWNER:user-my.email@gmail.com",
        "READER:group-mygroup",
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

image_store = gcp.storage.Bucket("image-store",
    name="image-store-bucket",
    location="EU")
image = gcp.storage.BucketObject("image",
    name="image1",
    bucket=image_store.name,
    source=pulumi.FileAsset("image1.jpg"))
image_store_acl = gcp.storage.ObjectACL("image-store-acl",
    bucket=image_store.name,
    object=image.output_name,
    role_entities=[
        "OWNER:user-my.email@gmail.com",
        "READER:group-mygroup",
    ])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var image_store = new Gcp.Storage.Bucket("image-store", new()
    {
        Name = "image-store-bucket",
        Location = "EU",
    });

    var image = new Gcp.Storage.BucketObject("image", new()
    {
        Name = "image1",
        Bucket = image_store.Name,
        Source = new FileAsset("image1.jpg"),
    });

    var image_store_acl = new Gcp.Storage.ObjectACL("image-store-acl", new()
    {
        Bucket = image_store.Name,
        Object = image.OutputName,
        RoleEntities = new[]
        {
            "OWNER:user-my.email@gmail.com",
            "READER:group-mygroup",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "image-store", &storage.BucketArgs{
			Name:     pulumi.String("image-store-bucket"),
			Location: pulumi.String("EU"),
		})
		if err != nil {
			return err
		}
		image, err := storage.NewBucketObject(ctx, "image", &storage.BucketObjectArgs{
			Name:   pulumi.String("image1"),
			Bucket: image_store.Name,
			Source: pulumi.NewFileAsset("image1.jpg"),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewObjectACL(ctx, "image-store-acl", &storage.ObjectACLArgs{
			Bucket: image_store.Name,
			Object: image.OutputName,
			RoleEntities: pulumi.StringArray{
				pulumi.String("OWNER:user-my.email@gmail.com"),
				pulumi.String("READER:group-mygroup"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.storage.ObjectACL;
import com.pulumi.gcp.storage.ObjectACLArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var image_store = new Bucket("image-store", BucketArgs.builder()
            .name("image-store-bucket")
            .location("EU")
            .build());

        var image = new BucketObject("image", BucketObjectArgs.builder()
            .name("image1")
            .bucket(image_store.name())
            .source(new FileAsset("image1.jpg"))
            .build());

        var image_store_acl = new ObjectACL("image-store-acl", ObjectACLArgs.builder()
            .bucket(image_store.name())
            .object(image.outputName())
            .roleEntities(            
                "OWNER:user-my.email@gmail.com",
                "READER:group-mygroup")
            .build());

    }
}
```
```yaml
resources:
  image-store:
    type: gcp:storage:Bucket
    properties:
      name: image-store-bucket
      location: EU
  image:
    type: gcp:storage:BucketObject
    properties:
      name: image1
      bucket: ${["image-store"].name}
      source:
        fn::FileAsset: image1.jpg
  image-store-acl:
    type: gcp:storage:ObjectACL
    properties:
      bucket: ${["image-store"].name}
      object: ${image.outputName}
      roleEntities:
        - OWNER:user-my.email@gmail.com
        - READER:group-mygroup
```
<!--End PulumiCodeChooser -->

## Import

This resource does not support import.

>
bucket" 0The name of the bucket the object is stored in.
A
object" 3The name of the object to apply the acl to.

- - -
к
predefinedAclB" ТThe "canned" [predefined ACL](https://cloud.google.com/storage/docs/access-control#predefined-acl) to apply. Must be set if `role_entity` is not.
є
roleEntitiesB*" ┌List of role/entity pairs in the form `ROLE:entity`. See [GCS Object ACL documentation](https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls) for more details.
Must be set if `predefined_acl` is not.
">
bucket" 0The name of the bucket the object is stored in.
"A
object" 3The name of the object to apply the acl to.

- - -
"к
predefinedAclB" ТThe "canned" [predefined ACL](https://cloud.google.com/storage/docs/access-control#predefined-acl) to apply. Must be set if `role_entity` is not.
"ё
roleEntities*" ┌List of role/entity pairs in the form `ROLE:entity`. See [GCS Object ACL documentation](https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls) for more details.
Must be set if `predefined_acl` is not.
*╠;
S
storageObjectAccessControl3gcp:storage/objectAccessControl:ObjectAccessControl═.The ObjectAccessControls resources represent the Access Control Lists
(ACLs) for objects within Google Cloud Storage. ACLs let you specify
who has access to your data and to what extent.

There are two roles that can be assigned to an entity:

READERs can get an object, though the acl property will not be revealed.
OWNERs are READERs, and they can get the acl property, update an object,
and call all objectAccessControls methods on the object. The owner of an
object is always an OWNER.
For more information, see Access Control, with the caveat that this API
uses READER and OWNER instead of READ and FULL_CONTROL.


To get more information about ObjectAccessControl, see:

* [API documentation](https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/storage/docs/access-control/create-manage-lists)

## Example Usage

### Storage Object Access Control Public Object


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const bucket = new gcp.storage.Bucket("bucket", {
    name: "static-content-bucket",
    location: "US",
});
const object = new gcp.storage.BucketObject("object", {
    name: "public-object",
    bucket: bucket.name,
    source: new pulumi.asset.FileAsset("../static/img/header-logo.png"),
});
const publicRule = new gcp.storage.ObjectAccessControl("public_rule", {
    object: object.outputName,
    bucket: bucket.name,
    role: "READER",
    entity: "allUsers",
});
```
```python
import pulumi
import pulumi_gcp as gcp

bucket = gcp.storage.Bucket("bucket",
    name="static-content-bucket",
    location="US")
object = gcp.storage.BucketObject("object",
    name="public-object",
    bucket=bucket.name,
    source=pulumi.FileAsset("../static/img/header-logo.png"))
public_rule = gcp.storage.ObjectAccessControl("public_rule",
    object=object.output_name,
    bucket=bucket.name,
    role="READER",
    entity="allUsers")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "static-content-bucket",
        Location = "US",
    });

    var @object = new Gcp.Storage.BucketObject("object", new()
    {
        Name = "public-object",
        Bucket = bucket.Name,
        Source = new FileAsset("../static/img/header-logo.png"),
    });

    var publicRule = new Gcp.Storage.ObjectAccessControl("public_rule", new()
    {
        Object = @object.OutputName,
        Bucket = bucket.Name,
        Role = "READER",
        Entity = "allUsers",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:     pulumi.String("static-content-bucket"),
			Location: pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		object, err := storage.NewBucketObject(ctx, "object", &storage.BucketObjectArgs{
			Name:   pulumi.String("public-object"),
			Bucket: bucket.Name,
			Source: pulumi.NewFileAsset("../static/img/header-logo.png"),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewObjectAccessControl(ctx, "public_rule", &storage.ObjectAccessControlArgs{
			Object: object.OutputName,
			Bucket: bucket.Name,
			Role:   pulumi.String("READER"),
			Entity: pulumi.String("allUsers"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.storage.ObjectAccessControl;
import com.pulumi.gcp.storage.ObjectAccessControlArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("static-content-bucket")
            .location("US")
            .build());

        var object = new BucketObject("object", BucketObjectArgs.builder()
            .name("public-object")
            .bucket(bucket.name())
            .source(new FileAsset("../static/img/header-logo.png"))
            .build());

        var publicRule = new ObjectAccessControl("publicRule", ObjectAccessControlArgs.builder()
            .object(object.outputName())
            .bucket(bucket.name())
            .role("READER")
            .entity("allUsers")
            .build());

    }
}
```
```yaml
resources:
  publicRule:
    type: gcp:storage:ObjectAccessControl
    name: public_rule
    properties:
      object: ${object.outputName}
      bucket: ${bucket.name}
      role: READER
      entity: allUsers
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: static-content-bucket
      location: US
  object:
    type: gcp:storage:BucketObject
    properties:
      name: public-object
      bucket: ${bucket.name}
      source:
        fn::FileAsset: ../static/img/header-logo.png
```
<!--End PulumiCodeChooser -->

## Import

ObjectAccessControl can be imported using any of these accepted formats:

* `{{bucket}}/{{object}}/{{entity}}`

When using the `pulumi import` command, ObjectAccessControl can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:storage/objectAccessControl:ObjectAccessControl default {{bucket}}/{{object}}/{{entity}}
```

&
bucket" The name of the bucket.
┘
entity" ╩The entity holding the permission, in one of the following forms:
* user-{{userId}}
* user-{{email}} (such as "user-liz@example.com")
* group-{{groupId}}
* group-{{email}} (such as "group-example@googlegroups.com")
* domain-{{domain}} (such as "domain-example.com")
* project-team-{{projectId}}
* allUsers
* allAuthenticatedUsers
E
object" 7The name of the object to apply the access control to.
b
role" VThe access permission for the entity.
Possible values are: `OWNER`, `READER`.


- - -
"&
bucket" The name of the bucket.
"5
domain" 'The domain associated with the entity.
";
email" .The email address associated with the entity.
"┘
entity" ╩The entity holding the permission, in one of the following forms:
* user-{{userId}}
* user-{{email}} (such as "user-liz@example.com")
* group-{{groupId}}
* group-{{email}} (such as "group-example@googlegroups.com")
* domain-{{domain}} (such as "domain-example.com")
* project-team-{{projectId}}
* allUsers
* allAuthenticatedUsers
"&
entityId" The ID for the entity
"Q

generation ?The content generation of the object, if applied to an object.
"E
object" 7The name of the object to apply the access control to.
"╫
projectTeamsz*x:v
t
storageObjectAccessControlProjectTeamIgcp:storage/ObjectAccessControlProjectTeam:ObjectAccessControlProjectTeamKThe project team associated with the entity
Structure is documented below.
"b
role" VThe access permission for the entity.
Possible values are: `OWNER`, `READER`.


- - -
*▐E
M
storageTransferAgentPool/gcp:storage/transferAgentPool:TransferAgentPool╒5Represents an On-Premises Agent pool.


To get more information about AgentPool, see:

* [API documentation](https://cloud.google.com/storage-transfer/docs/reference/rest/v1/projects.agentPools)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/storage-transfer/docs/on-prem-agent-pools)

## Example Usage

### Agent Pool Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.storage.getTransferProjectServiceAccount({
    project: "my-project-name",
});
const pubsubEditorRole = new gcp.projects.IAMMember("pubsub_editor_role", {
    project: "my-project-name",
    role: "roles/pubsub.editor",
    member: _default.then(_default => `serviceAccount:${_default.email}`),
});
const example = new gcp.storage.TransferAgentPool("example", {
    name: "agent-pool-example",
    displayName: "Source A to destination Z",
    bandwidthLimit: {
        limitMbps: "120",
    },
}, {
    dependsOn: [pubsubEditorRole],
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.storage.get_transfer_project_service_account(project="my-project-name")
pubsub_editor_role = gcp.projects.IAMMember("pubsub_editor_role",
    project="my-project-name",
    role="roles/pubsub.editor",
    member=f"serviceAccount:{default.email}")
example = gcp.storage.TransferAgentPool("example",
    name="agent-pool-example",
    display_name="Source A to destination Z",
    bandwidth_limit={
        "limit_mbps": "120",
    },
    opts = pulumi.ResourceOptions(depends_on=[pubsub_editor_role]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Storage.GetTransferProjectServiceAccount.Invoke(new()
    {
        Project = "my-project-name",
    });

    var pubsubEditorRole = new Gcp.Projects.IAMMember("pubsub_editor_role", new()
    {
        Project = "my-project-name",
        Role = "roles/pubsub.editor",
        Member = @default.Apply(@default => $"serviceAccount:{@default.Apply(getTransferProjectServiceAccountResult => getTransferProjectServiceAccountResult.Email)}"),
    });

    var example = new Gcp.Storage.TransferAgentPool("example", new()
    {
        Name = "agent-pool-example",
        DisplayName = "Source A to destination Z",
        BandwidthLimit = new Gcp.Storage.Inputs.TransferAgentPoolBandwidthLimitArgs
        {
            LimitMbps = "120",
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            pubsubEditorRole,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := storage.GetTransferProjectServiceAccount(ctx, &storage.GetTransferProjectServiceAccountArgs{
			Project: pulumi.StringRef("my-project-name"),
		}, nil)
		if err != nil {
			return err
		}
		pubsubEditorRole, err := projects.NewIAMMember(ctx, "pubsub_editor_role", &projects.IAMMemberArgs{
			Project: pulumi.String("my-project-name"),
			Role:    pulumi.String("roles/pubsub.editor"),
			Member:  pulumi.Sprintf("serviceAccount:%v", _default.Email),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewTransferAgentPool(ctx, "example", &storage.TransferAgentPoolArgs{
			Name:        pulumi.String("agent-pool-example"),
			DisplayName: pulumi.String("Source A to destination Z"),
			BandwidthLimit: &storage.TransferAgentPoolBandwidthLimitArgs{
				LimitMbps: pulumi.String("120"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			pubsubEditorRole,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetTransferProjectServiceAccountArgs;
import com.pulumi.gcp.projects.IAMMember;
import com.pulumi.gcp.projects.IAMMemberArgs;
import com.pulumi.gcp.storage.TransferAgentPool;
import com.pulumi.gcp.storage.TransferAgentPoolArgs;
import com.pulumi.gcp.storage.inputs.TransferAgentPoolBandwidthLimitArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = StorageFunctions.getTransferProjectServiceAccount(GetTransferProjectServiceAccountArgs.builder()
            .project("my-project-name")
            .build());

        var pubsubEditorRole = new IAMMember("pubsubEditorRole", IAMMemberArgs.builder()
            .project("my-project-name")
            .role("roles/pubsub.editor")
            .member(String.format("serviceAccount:%s", default_.email()))
            .build());

        var example = new TransferAgentPool("example", TransferAgentPoolArgs.builder()
            .name("agent-pool-example")
            .displayName("Source A to destination Z")
            .bandwidthLimit(TransferAgentPoolBandwidthLimitArgs.builder()
                .limitMbps("120")
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(pubsubEditorRole)
                .build());

    }
}
```
```yaml
resources:
  pubsubEditorRole:
    type: gcp:projects:IAMMember
    name: pubsub_editor_role
    properties:
      project: my-project-name
      role: roles/pubsub.editor
      member: serviceAccount:${default.email}
  example:
    type: gcp:storage:TransferAgentPool
    properties:
      name: agent-pool-example
      displayName: Source A to destination Z
      bandwidthLimit:
        limitMbps: '120'
    options:
      dependsOn:
        - ${pubsubEditorRole}
variables:
  default:
    fn::invoke:
      function: gcp:storage:getTransferProjectServiceAccount
      arguments:
        project: my-project-name
```
<!--End PulumiCodeChooser -->

## Import

AgentPool can be imported using any of these accepted formats:

* `projects/{{project}}/agentPools/{{name}}`

* `{{project}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, AgentPool can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:storage/transferAgentPool:TransferAgentPool default projects/{{project}}/agentPools/{{name}}
```

```sh
$ pulumi import gcp:storage/transferAgentPool:TransferAgentPool default {{project}}/{{name}}
```

```sh
$ pulumi import gcp:storage/transferAgentPool:TransferAgentPool default {{name}}
```

Ю
bandwidthLimit}B{:y
w
storageTransferAgentPoolBandwidthLimitKgcp:storage/TransferAgentPoolBandwidthLimit:TransferAgentPoolBandwidthLimitМSpecifies the bandwidth limit details. If this field is unspecified, the default value is set as 'No Limit'.
Structure is documented below.
K
displayNameB" 6Specifies the client-specified AgentPool description.
╒
nameB" ╞The ID of the agent pool to create.
The agentPoolId must meet the following requirements:
* Length of 128 characters or less.
* Not start with the string goog.
* Start with a lowercase ASCII character, followed by:
* Zero or more: lowercase Latin alphabet characters, numerals, hyphens (-), periods (.), underscores (_), or tildes (~).
* One or more numerals or lowercase ASCII characters.
As expressed by the regular expression: ^(?!goog)a-z?$.


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Ю
bandwidthLimit}B{:y
w
storageTransferAgentPoolBandwidthLimitKgcp:storage/TransferAgentPoolBandwidthLimit:TransferAgentPoolBandwidthLimitМSpecifies the bandwidth limit details. If this field is unspecified, the default value is set as 'No Limit'.
Structure is documented below.
"K
displayNameB" 6Specifies the client-specified AgentPool description.
"╙
name" ╞The ID of the agent pool to create.
The agentPoolId must meet the following requirements:
* Length of 128 characters or less.
* Not start with the string goog.
* Start with a lowercase ASCII character, followed by:
* Zero or more: lowercase Latin alphabet characters, numerals, hyphens (-), periods (.), underscores (_), or tildes (~).
* One or more numerals or lowercase ASCII characters.
As expressed by the regular expression: ^(?!goog)a-z?$.


- - -
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"3
state" &Specifies the state of the AgentPool.
*с╩
;
storageTransferJob#gcp:storage/transferJob:TransferJobлзCreates a new Transfer Job in Google Cloud Storage Transfer.

To get more information about Google Cloud Storage Transfer, see:

* [Overview](https://cloud.google.com/storage-transfer/docs/overview)
* [API documentation](https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs)
* How-to Guides
    * [Configuring Access to Data Sources and Sinks](https://cloud.google.com/storage-transfer/docs/configure-access)

## Example Usage

Example creating a nightly Transfer Job from an AWS S3 Bucket to a GCS bucket.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.storage.getTransferProjectServiceAccount({
    project: project,
});
const s3_backup_bucket = new gcp.storage.Bucket("s3-backup-bucket", {
    name: `${awsS3Bucket}-backup`,
    storageClass: "NEARLINE",
    project: project,
    location: "US",
});
const s3_backup_bucketBucketIAMMember = new gcp.storage.BucketIAMMember("s3-backup-bucket", {
    bucket: s3_backup_bucket.name,
    role: "roles/storage.admin",
    member: _default.then(_default => `serviceAccount:${_default.email}`),
}, {
    dependsOn: [s3_backup_bucket],
});
const topic = new gcp.pubsub.Topic("topic", {name: pubsubTopicName});
const notificationConfig = new gcp.pubsub.TopicIAMMember("notification_config", {
    topic: topic.id,
    role: "roles/pubsub.publisher",
    member: _default.then(_default => `serviceAccount:${_default.email}`),
});
const s3_bucket_nightly_backup = new gcp.storage.TransferJob("s3-bucket-nightly-backup", {
    description: "Nightly backup of S3 bucket",
    project: project,
    transferSpec: {
        objectConditions: {
            maxTimeElapsedSinceLastModification: "600s",
            excludePrefixes: ["requests.gz"],
        },
        transferOptions: {
            deleteObjectsUniqueInSink: false,
        },
        awsS3DataSource: {
            bucketName: awsS3Bucket,
            awsAccessKey: {
                accessKeyId: awsAccessKey,
                secretAccessKey: awsSecretKey,
            },
        },
        gcsDataSink: {
            bucketName: s3_backup_bucket.name,
            path: "foo/bar/",
        },
    },
    schedule: {
        scheduleStartDate: {
            year: 2018,
            month: 10,
            day: 1,
        },
        scheduleEndDate: {
            year: 2019,
            month: 1,
            day: 15,
        },
        startTimeOfDay: {
            hours: 23,
            minutes: 30,
            seconds: 0,
            nanos: 0,
        },
        repeatInterval: "604800s",
    },
    notificationConfig: {
        pubsubTopic: topic.id,
        eventTypes: [
            "TRANSFER_OPERATION_SUCCESS",
            "TRANSFER_OPERATION_FAILED",
        ],
        payloadFormat: "JSON",
    },
}, {
    dependsOn: [
        s3_backup_bucketBucketIAMMember,
        notificationConfig,
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.storage.get_transfer_project_service_account(project=project)
s3_backup_bucket = gcp.storage.Bucket("s3-backup-bucket",
    name=f"{aws_s3_bucket}-backup",
    storage_class="NEARLINE",
    project=project,
    location="US")
s3_backup_bucket_bucket_iam_member = gcp.storage.BucketIAMMember("s3-backup-bucket",
    bucket=s3_backup_bucket.name,
    role="roles/storage.admin",
    member=f"serviceAccount:{default.email}",
    opts = pulumi.ResourceOptions(depends_on=[s3_backup_bucket]))
topic = gcp.pubsub.Topic("topic", name=pubsub_topic_name)
notification_config = gcp.pubsub.TopicIAMMember("notification_config",
    topic=topic.id,
    role="roles/pubsub.publisher",
    member=f"serviceAccount:{default.email}")
s3_bucket_nightly_backup = gcp.storage.TransferJob("s3-bucket-nightly-backup",
    description="Nightly backup of S3 bucket",
    project=project,
    transfer_spec={
        "object_conditions": {
            "max_time_elapsed_since_last_modification": "600s",
            "exclude_prefixes": ["requests.gz"],
        },
        "transfer_options": {
            "delete_objects_unique_in_sink": False,
        },
        "aws_s3_data_source": {
            "bucket_name": aws_s3_bucket,
            "aws_access_key": {
                "access_key_id": aws_access_key,
                "secret_access_key": aws_secret_key,
            },
        },
        "gcs_data_sink": {
            "bucket_name": s3_backup_bucket.name,
            "path": "foo/bar/",
        },
    },
    schedule={
        "schedule_start_date": {
            "year": 2018,
            "month": 10,
            "day": 1,
        },
        "schedule_end_date": {
            "year": 2019,
            "month": 1,
            "day": 15,
        },
        "start_time_of_day": {
            "hours": 23,
            "minutes": 30,
            "seconds": 0,
            "nanos": 0,
        },
        "repeat_interval": "604800s",
    },
    notification_config={
        "pubsub_topic": topic.id,
        "event_types": [
            "TRANSFER_OPERATION_SUCCESS",
            "TRANSFER_OPERATION_FAILED",
        ],
        "payload_format": "JSON",
    },
    opts = pulumi.ResourceOptions(depends_on=[
            s3_backup_bucket_bucket_iam_member,
            notification_config,
        ]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Storage.GetTransferProjectServiceAccount.Invoke(new()
    {
        Project = project,
    });

    var s3_backup_bucket = new Gcp.Storage.Bucket("s3-backup-bucket", new()
    {
        Name = $"{awsS3Bucket}-backup",
        StorageClass = "NEARLINE",
        Project = project,
        Location = "US",
    });

    var s3_backup_bucketBucketIAMMember = new Gcp.Storage.BucketIAMMember("s3-backup-bucket", new()
    {
        Bucket = s3_backup_bucket.Name,
        Role = "roles/storage.admin",
        Member = @default.Apply(@default => $"serviceAccount:{@default.Apply(getTransferProjectServiceAccountResult => getTransferProjectServiceAccountResult.Email)}"),
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            s3_backup_bucket,
        },
    });

    var topic = new Gcp.PubSub.Topic("topic", new()
    {
        Name = pubsubTopicName,
    });

    var notificationConfig = new Gcp.PubSub.TopicIAMMember("notification_config", new()
    {
        Topic = topic.Id,
        Role = "roles/pubsub.publisher",
        Member = @default.Apply(@default => $"serviceAccount:{@default.Apply(getTransferProjectServiceAccountResult => getTransferProjectServiceAccountResult.Email)}"),
    });

    var s3_bucket_nightly_backup = new Gcp.Storage.TransferJob("s3-bucket-nightly-backup", new()
    {
        Description = "Nightly backup of S3 bucket",
        Project = project,
        TransferSpec = new Gcp.Storage.Inputs.TransferJobTransferSpecArgs
        {
            ObjectConditions = new Gcp.Storage.Inputs.TransferJobTransferSpecObjectConditionsArgs
            {
                MaxTimeElapsedSinceLastModification = "600s",
                ExcludePrefixes = new[]
                {
                    "requests.gz",
                },
            },
            TransferOptions = new Gcp.Storage.Inputs.TransferJobTransferSpecTransferOptionsArgs
            {
                DeleteObjectsUniqueInSink = false,
            },
            AwsS3DataSource = new Gcp.Storage.Inputs.TransferJobTransferSpecAwsS3DataSourceArgs
            {
                BucketName = awsS3Bucket,
                AwsAccessKey = new Gcp.Storage.Inputs.TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyArgs
                {
                    AccessKeyId = awsAccessKey,
                    SecretAccessKey = awsSecretKey,
                },
            },
            GcsDataSink = new Gcp.Storage.Inputs.TransferJobTransferSpecGcsDataSinkArgs
            {
                BucketName = s3_backup_bucket.Name,
                Path = "foo/bar/",
            },
        },
        Schedule = new Gcp.Storage.Inputs.TransferJobScheduleArgs
        {
            ScheduleStartDate = new Gcp.Storage.Inputs.TransferJobScheduleScheduleStartDateArgs
            {
                Year = 2018,
                Month = 10,
                Day = 1,
            },
            ScheduleEndDate = new Gcp.Storage.Inputs.TransferJobScheduleScheduleEndDateArgs
            {
                Year = 2019,
                Month = 1,
                Day = 15,
            },
            StartTimeOfDay = new Gcp.Storage.Inputs.TransferJobScheduleStartTimeOfDayArgs
            {
                Hours = 23,
                Minutes = 30,
                Seconds = 0,
                Nanos = 0,
            },
            RepeatInterval = "604800s",
        },
        NotificationConfig = new Gcp.Storage.Inputs.TransferJobNotificationConfigArgs
        {
            PubsubTopic = topic.Id,
            EventTypes = new[]
            {
                "TRANSFER_OPERATION_SUCCESS",
                "TRANSFER_OPERATION_FAILED",
            },
            PayloadFormat = "JSON",
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            s3_backup_bucketBucketIAMMember,
            notificationConfig,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := storage.GetTransferProjectServiceAccount(ctx, &storage.GetTransferProjectServiceAccountArgs{
			Project: pulumi.StringRef(project),
		}, nil)
		if err != nil {
			return err
		}
		_, err = storage.NewBucket(ctx, "s3-backup-bucket", &storage.BucketArgs{
			Name:         pulumi.Sprintf("%v-backup", awsS3Bucket),
			StorageClass: pulumi.String("NEARLINE"),
			Project:      pulumi.Any(project),
			Location:     pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewBucketIAMMember(ctx, "s3-backup-bucket", &storage.BucketIAMMemberArgs{
			Bucket: s3_backup_bucket.Name,
			Role:   pulumi.String("roles/storage.admin"),
			Member: pulumi.Sprintf("serviceAccount:%v", _default.Email),
		}, pulumi.DependsOn([]pulumi.Resource{
			s3_backup_bucket,
		}))
		if err != nil {
			return err
		}
		topic, err := pubsub.NewTopic(ctx, "topic", &pubsub.TopicArgs{
			Name: pulumi.Any(pubsubTopicName),
		})
		if err != nil {
			return err
		}
		notificationConfig, err := pubsub.NewTopicIAMMember(ctx, "notification_config", &pubsub.TopicIAMMemberArgs{
			Topic:  topic.ID(),
			Role:   pulumi.String("roles/pubsub.publisher"),
			Member: pulumi.Sprintf("serviceAccount:%v", _default.Email),
		})
		if err != nil {
			return err
		}
		_, err = storage.NewTransferJob(ctx, "s3-bucket-nightly-backup", &storage.TransferJobArgs{
			Description: pulumi.String("Nightly backup of S3 bucket"),
			Project:     pulumi.Any(project),
			TransferSpec: &storage.TransferJobTransferSpecArgs{
				ObjectConditions: &storage.TransferJobTransferSpecObjectConditionsArgs{
					MaxTimeElapsedSinceLastModification: pulumi.String("600s"),
					ExcludePrefixes: pulumi.StringArray{
						pulumi.String("requests.gz"),
					},
				},
				TransferOptions: &storage.TransferJobTransferSpecTransferOptionsArgs{
					DeleteObjectsUniqueInSink: pulumi.Bool(false),
				},
				AwsS3DataSource: &storage.TransferJobTransferSpecAwsS3DataSourceArgs{
					BucketName: pulumi.Any(awsS3Bucket),
					AwsAccessKey: &storage.TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyArgs{
						AccessKeyId:     pulumi.Any(awsAccessKey),
						SecretAccessKey: pulumi.Any(awsSecretKey),
					},
				},
				GcsDataSink: &storage.TransferJobTransferSpecGcsDataSinkArgs{
					BucketName: s3_backup_bucket.Name,
					Path:       pulumi.String("foo/bar/"),
				},
			},
			Schedule: &storage.TransferJobScheduleArgs{
				ScheduleStartDate: &storage.TransferJobScheduleScheduleStartDateArgs{
					Year:  pulumi.Int(2018),
					Month: pulumi.Int(10),
					Day:   pulumi.Int(1),
				},
				ScheduleEndDate: &storage.TransferJobScheduleScheduleEndDateArgs{
					Year:  pulumi.Int(2019),
					Month: pulumi.Int(1),
					Day:   pulumi.Int(15),
				},
				StartTimeOfDay: &storage.TransferJobScheduleStartTimeOfDayArgs{
					Hours:   pulumi.Int(23),
					Minutes: pulumi.Int(30),
					Seconds: pulumi.Int(0),
					Nanos:   pulumi.Int(0),
				},
				RepeatInterval: pulumi.String("604800s"),
			},
			NotificationConfig: &storage.TransferJobNotificationConfigArgs{
				PubsubTopic: topic.ID(),
				EventTypes: pulumi.StringArray{
					pulumi.String("TRANSFER_OPERATION_SUCCESS"),
					pulumi.String("TRANSFER_OPERATION_FAILED"),
				},
				PayloadFormat: pulumi.String("JSON"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			s3_backup_bucketBucketIAMMember,
			notificationConfig,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetTransferProjectServiceAccountArgs;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketIAMMember;
import com.pulumi.gcp.storage.BucketIAMMemberArgs;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.pubsub.TopicIAMMember;
import com.pulumi.gcp.pubsub.TopicIAMMemberArgs;
import com.pulumi.gcp.storage.TransferJob;
import com.pulumi.gcp.storage.TransferJobArgs;
import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecArgs;
import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecObjectConditionsArgs;
import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecTransferOptionsArgs;
import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecAwsS3DataSourceArgs;
import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyArgs;
import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecGcsDataSinkArgs;
import com.pulumi.gcp.storage.inputs.TransferJobScheduleArgs;
import com.pulumi.gcp.storage.inputs.TransferJobScheduleScheduleStartDateArgs;
import com.pulumi.gcp.storage.inputs.TransferJobScheduleScheduleEndDateArgs;
import com.pulumi.gcp.storage.inputs.TransferJobScheduleStartTimeOfDayArgs;
import com.pulumi.gcp.storage.inputs.TransferJobNotificationConfigArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = StorageFunctions.getTransferProjectServiceAccount(GetTransferProjectServiceAccountArgs.builder()
            .project(project)
            .build());

        var s3_backup_bucket = new Bucket("s3-backup-bucket", BucketArgs.builder()
            .name(String.format("%s-backup", awsS3Bucket))
            .storageClass("NEARLINE")
            .project(project)
            .location("US")
            .build());

        var s3_backup_bucketBucketIAMMember = new BucketIAMMember("s3-backup-bucketBucketIAMMember", BucketIAMMemberArgs.builder()
            .bucket(s3_backup_bucket.name())
            .role("roles/storage.admin")
            .member(String.format("serviceAccount:%s", default_.email()))
            .build(), CustomResourceOptions.builder()
                .dependsOn(s3_backup_bucket)
                .build());

        var topic = new Topic("topic", TopicArgs.builder()
            .name(pubsubTopicName)
            .build());

        var notificationConfig = new TopicIAMMember("notificationConfig", TopicIAMMemberArgs.builder()
            .topic(topic.id())
            .role("roles/pubsub.publisher")
            .member(String.format("serviceAccount:%s", default_.email()))
            .build());

        var s3_bucket_nightly_backup = new TransferJob("s3-bucket-nightly-backup", TransferJobArgs.builder()
            .description("Nightly backup of S3 bucket")
            .project(project)
            .transferSpec(TransferJobTransferSpecArgs.builder()
                .objectConditions(TransferJobTransferSpecObjectConditionsArgs.builder()
                    .maxTimeElapsedSinceLastModification("600s")
                    .excludePrefixes("requests.gz")
                    .build())
                .transferOptions(TransferJobTransferSpecTransferOptionsArgs.builder()
                    .deleteObjectsUniqueInSink(false)
                    .build())
                .awsS3DataSource(TransferJobTransferSpecAwsS3DataSourceArgs.builder()
                    .bucketName(awsS3Bucket)
                    .awsAccessKey(TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyArgs.builder()
                        .accessKeyId(awsAccessKey)
                        .secretAccessKey(awsSecretKey)
                        .build())
                    .build())
                .gcsDataSink(TransferJobTransferSpecGcsDataSinkArgs.builder()
                    .bucketName(s3_backup_bucket.name())
                    .path("foo/bar/")
                    .build())
                .build())
            .schedule(TransferJobScheduleArgs.builder()
                .scheduleStartDate(TransferJobScheduleScheduleStartDateArgs.builder()
                    .year(2018)
                    .month(10)
                    .day(1)
                    .build())
                .scheduleEndDate(TransferJobScheduleScheduleEndDateArgs.builder()
                    .year(2019)
                    .month(1)
                    .day(15)
                    .build())
                .startTimeOfDay(TransferJobScheduleStartTimeOfDayArgs.builder()
                    .hours(23)
                    .minutes(30)
                    .seconds(0)
                    .nanos(0)
                    .build())
                .repeatInterval("604800s")
                .build())
            .notificationConfig(TransferJobNotificationConfigArgs.builder()
                .pubsubTopic(topic.id())
                .eventTypes(                
                    "TRANSFER_OPERATION_SUCCESS",
                    "TRANSFER_OPERATION_FAILED")
                .payloadFormat("JSON")
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    s3_backup_bucketBucketIAMMember,
                    notificationConfig)
                .build());

    }
}
```
```yaml
resources:
  s3-backup-bucket:
    type: gcp:storage:Bucket
    properties:
      name: ${awsS3Bucket}-backup
      storageClass: NEARLINE
      project: ${project}
      location: US
  s3-backup-bucketBucketIAMMember:
    type: gcp:storage:BucketIAMMember
    name: s3-backup-bucket
    properties:
      bucket: ${["s3-backup-bucket"].name}
      role: roles/storage.admin
      member: serviceAccount:${default.email}
    options:
      dependsOn:
        - ${["s3-backup-bucket"]}
  topic:
    type: gcp:pubsub:Topic
    properties:
      name: ${pubsubTopicName}
  notificationConfig:
    type: gcp:pubsub:TopicIAMMember
    name: notification_config
    properties:
      topic: ${topic.id}
      role: roles/pubsub.publisher
      member: serviceAccount:${default.email}
  s3-bucket-nightly-backup:
    type: gcp:storage:TransferJob
    properties:
      description: Nightly backup of S3 bucket
      project: ${project}
      transferSpec:
        objectConditions:
          maxTimeElapsedSinceLastModification: 600s
          excludePrefixes:
            - requests.gz
        transferOptions:
          deleteObjectsUniqueInSink: false
        awsS3DataSource:
          bucketName: ${awsS3Bucket}
          awsAccessKey:
            accessKeyId: ${awsAccessKey}
            secretAccessKey: ${awsSecretKey}
        gcsDataSink:
          bucketName: ${["s3-backup-bucket"].name}
          path: foo/bar/
      schedule:
        scheduleStartDate:
          year: 2018
          month: 10
          day: 1
        scheduleEndDate:
          year: 2019
          month: 1
          day: 15
        startTimeOfDay:
          hours: 23
          minutes: 30
          seconds: 0
          nanos: 0
        repeatInterval: 604800s
      notificationConfig:
        pubsubTopic: ${topic.id}
        eventTypes:
          - TRANSFER_OPERATION_SUCCESS
          - TRANSFER_OPERATION_FAILED
        payloadFormat: JSON
    options:
      dependsOn:
        - ${["s3-backup-bucketBucketIAMMember"]}
        - ${notificationConfig}
variables:
  default:
    fn::invoke:
      function: gcp:storage:getTransferProjectServiceAccount
      arguments:
        project: ${project}
```
<!--End PulumiCodeChooser -->

## Import

Storage Transfer Jobs can be imported using the Transfer Job's `project` and `name` (without the `transferJob/` prefix), e.g.

* `{{project_id}}/{{name}}`, where `name` is a numeric value.

When using the `pulumi import` command, Storage Transfer Jobs can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:storage/transferJob:TransferJob default {{project_id}}/123456789
```

D
description" 1Unique description to identify the Transfer Job.
╣
eventStreambB`:^
\
storageTransferJobEventStream9gcp:storage/TransferJobEventStream:TransferJobEventStream┼Specifies the Event-driven transfer options. Event-driven transfers listen to an event stream to transfer updated files. Structure documented below Either `event_stream` or `schedule` must be set.
─
nameB" ╡The name of the Transfer Job. This name must start with "transferJobs/" prefix and end with a letter or a number, and should be no more than 128 characters ( `transferJobs/^(?!OPI)[A-Za-z0-9-._~]*[A-Za-z0-9]$` ). For transfers involving PosixFilesystem, this name must start with transferJobs/OPI specifically ( `transferJobs/OPI^[A-Za-z0-9-._~]*[A-Za-z0-9]$` ). For all other transfer types, this name must not start with transferJobs/OPI. Default the provider will assign a random unique name with `transferJobs/{{name}}` format, where `name` is a numeric value.
Ж
notificationConfigwBu:s
q
storageTransferJobNotificationConfigGgcp:storage/TransferJobNotificationConfig:TransferJobNotificationConfigwNotification configuration. This is not supported for transfers involving PosixFilesystem. Structure documented below.
q
projectB" `The project in which the resource belongs. If it
is not provided, the provider project is used.
г
scheduleYBW:U
S
storageTransferJobSchedule3gcp:storage/TransferJobSchedule:TransferJobSchedule╗Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run. Structure documented below. Either `schedule` or `event_stream` must be set.
┐
statusB" оStatus of the job. Default: `ENABLED`. **NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.**
░
transferSpecc:a
_
storageTransferJobTransferSpec;gcp:storage/TransferJobTransferSpec:TransferJobTransferSpec;Transfer specification. Structure documented below.

- - -
"7
creationTime" #When the Transfer Job was created.
"7
deletionTime" #When the Transfer Job was deleted.
"D
description" 1Unique description to identify the Transfer Job.
"╣
eventStreambB`:^
\
storageTransferJobEventStream9gcp:storage/TransferJobEventStream:TransferJobEventStream┼Specifies the Event-driven transfer options. Event-driven transfers listen to an event stream to transfer updated files. Structure documented below Either `event_stream` or `schedule` must be set.
"E
lastModificationTime" )When the Transfer Job was last modified.
"┬
name" ╡The name of the Transfer Job. This name must start with "transferJobs/" prefix and end with a letter or a number, and should be no more than 128 characters ( `transferJobs/^(?!OPI)[A-Za-z0-9-._~]*[A-Za-z0-9]$` ). For transfers involving PosixFilesystem, this name must start with transferJobs/OPI specifically ( `transferJobs/OPI^[A-Za-z0-9-._~]*[A-Za-z0-9]$` ). For all other transfer types, this name must not start with transferJobs/OPI. Default the provider will assign a random unique name with `transferJobs/{{name}}` format, where `name` is a numeric value.
"Ж
notificationConfigwBu:s
q
storageTransferJobNotificationConfigGgcp:storage/TransferJobNotificationConfig:TransferJobNotificationConfigwNotification configuration. This is not supported for transfers involving PosixFilesystem. Structure documented below.
"o
project" `The project in which the resource belongs. If it
is not provided, the provider project is used.
"г
scheduleYBW:U
S
storageTransferJobSchedule3gcp:storage/TransferJobSchedule:TransferJobSchedule╗Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run. Structure documented below. Either `schedule` or `event_stream` must be set.
"┐
statusB" оStatus of the job. Default: `ENABLED`. **NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.**
"░
transferSpecc:a
_
storageTransferJobTransferSpec;gcp:storage/TransferJobTransferSpec:TransferJobTransferSpec;Transfer specification. Structure documented below.

- - -
*Зq
J
tagsLocationTagBinding.gcp:tags/locationTagBinding:LocationTagBindingЙkA LocationTagBinding represents a connection between a TagValue and a non-global target such as a Cloud Run Service or Compute Instance. Once a LocationTagBinding is created, the TagValue is applied to all the descendants of the cloud resource.

To get more information about LocationTagBinding, see:

* [API documentation](https://cloud.google.com/resource-manager/reference/rest/v3/tagBindings)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing)

## Example Usage

### Cloud Run Service

To bind a tag to a Cloud Run service:

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = new gcp.organizations.Project("project", {
    projectId: "project_id",
    name: "project_id",
    orgId: "123456789",
});
const key = new gcp.tags.TagKey("key", {
    parent: "organizations/123456789",
    shortName: "keyname",
    description: "For keyname resources.",
});
const value = new gcp.tags.TagValue("value", {
    parent: key.id,
    shortName: "valuename",
    description: "For valuename resources.",
});
const binding = new gcp.tags.LocationTagBinding("binding", {
    parent: `//run.googleapis.com/projects/${projectGoogleProject.number}/locations/${_default.location}/services/${_default.name}`,
    tagValue: value.id,
    location: "us-central1",
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.Project("project",
    project_id="project_id",
    name="project_id",
    org_id="123456789")
key = gcp.tags.TagKey("key",
    parent="organizations/123456789",
    short_name="keyname",
    description="For keyname resources.")
value = gcp.tags.TagValue("value",
    parent=key.id,
    short_name="valuename",
    description="For valuename resources.")
binding = gcp.tags.LocationTagBinding("binding",
    parent=f"//run.googleapis.com/projects/{project_google_project['number']}/locations/{default['location']}/services/{default['name']}",
    tag_value=value.id,
    location="us-central1")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = new Gcp.Organizations.Project("project", new()
    {
        ProjectId = "project_id",
        Name = "project_id",
        OrgId = "123456789",
    });

    var key = new Gcp.Tags.TagKey("key", new()
    {
        Parent = "organizations/123456789",
        ShortName = "keyname",
        Description = "For keyname resources.",
    });

    var @value = new Gcp.Tags.TagValue("value", new()
    {
        Parent = key.Id,
        ShortName = "valuename",
        Description = "For valuename resources.",
    });

    var binding = new Gcp.Tags.LocationTagBinding("binding", new()
    {
        Parent = $"//run.googleapis.com/projects/{projectGoogleProject.Number}/locations/{@default.Location}/services/{@default.Name}",
        TagValue = @value.Id,
        Location = "us-central1",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
			ProjectId: pulumi.String("project_id"),
			Name:      pulumi.String("project_id"),
			OrgId:     pulumi.String("123456789"),
		})
		if err != nil {
			return err
		}
		key, err := tags.NewTagKey(ctx, "key", &tags.TagKeyArgs{
			Parent:      pulumi.String("organizations/123456789"),
			ShortName:   pulumi.String("keyname"),
			Description: pulumi.String("For keyname resources."),
		})
		if err != nil {
			return err
		}
		value, err := tags.NewTagValue(ctx, "value", &tags.TagValueArgs{
			Parent:      key.ID(),
			ShortName:   pulumi.String("valuename"),
			Description: pulumi.String("For valuename resources."),
		})
		if err != nil {
			return err
		}
		_, err = tags.NewLocationTagBinding(ctx, "binding", &tags.LocationTagBindingArgs{
			Parent:   pulumi.Sprintf("//run.googleapis.com/projects/%v/locations/%v/services/%v", projectGoogleProject.Number, _default.Location, _default.Name),
			TagValue: value.ID(),
			Location: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.tags.TagKey;
import com.pulumi.gcp.tags.TagKeyArgs;
import com.pulumi.gcp.tags.TagValue;
import com.pulumi.gcp.tags.TagValueArgs;
import com.pulumi.gcp.tags.LocationTagBinding;
import com.pulumi.gcp.tags.LocationTagBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var project = new Project("project", ProjectArgs.builder()
            .projectId("project_id")
            .name("project_id")
            .orgId("123456789")
            .build());

        var key = new TagKey("key", TagKeyArgs.builder()
            .parent("organizations/123456789")
            .shortName("keyname")
            .description("For keyname resources.")
            .build());

        var value = new TagValue("value", TagValueArgs.builder()
            .parent(key.id())
            .shortName("valuename")
            .description("For valuename resources.")
            .build());

        var binding = new LocationTagBinding("binding", LocationTagBindingArgs.builder()
            .parent(String.format("//run.googleapis.com/projects/%s/locations/%s/services/%s", projectGoogleProject.number(),default_.location(),default_.name()))
            .tagValue(value.id())
            .location("us-central1")
            .build());

    }
}
```
```yaml
resources:
  project:
    type: gcp:organizations:Project
    properties:
      projectId: project_id
      name: project_id
      orgId: '123456789'
  key:
    type: gcp:tags:TagKey
    properties:
      parent: organizations/123456789
      shortName: keyname
      description: For keyname resources.
  value:
    type: gcp:tags:TagValue
    properties:
      parent: ${key.id}
      shortName: valuename
      description: For valuename resources.
  binding:
    type: gcp:tags:LocationTagBinding
    properties:
      parent: //run.googleapis.com/projects/${projectGoogleProject.number}/locations/${default.location}/services/${default.name}
      tagValue: ${value.id}
      location: us-central1
```
<!--End PulumiCodeChooser -->

### Compute Instance

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = new gcp.organizations.Project("project", {
    projectId: "project_id",
    name: "project_id",
    orgId: "123456789",
});
const key = new gcp.tags.TagKey("key", {
    parent: "organizations/123456789",
    shortName: "keyname",
    description: "For keyname resources.",
});
const value = new gcp.tags.TagValue("value", {
    parent: key.id,
    shortName: "valuename",
    description: "For valuename resources.",
});
const binding = new gcp.tags.LocationTagBinding("binding", {
    parent: pulumi.interpolate`//compute.googleapis.com/projects/${project.number}/zones/us-central1-a/instances/${instance.instanceId}`,
    tagValue: value.id,
    location: "us-central1-a",
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.Project("project",
    project_id="project_id",
    name="project_id",
    org_id="123456789")
key = gcp.tags.TagKey("key",
    parent="organizations/123456789",
    short_name="keyname",
    description="For keyname resources.")
value = gcp.tags.TagValue("value",
    parent=key.id,
    short_name="valuename",
    description="For valuename resources.")
binding = gcp.tags.LocationTagBinding("binding",
    parent=project.number.apply(lambda number: f"//compute.googleapis.com/projects/{number}/zones/us-central1-a/instances/{instance['instanceId']}"),
    tag_value=value.id,
    location="us-central1-a")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = new Gcp.Organizations.Project("project", new()
    {
        ProjectId = "project_id",
        Name = "project_id",
        OrgId = "123456789",
    });

    var key = new Gcp.Tags.TagKey("key", new()
    {
        Parent = "organizations/123456789",
        ShortName = "keyname",
        Description = "For keyname resources.",
    });

    var @value = new Gcp.Tags.TagValue("value", new()
    {
        Parent = key.Id,
        ShortName = "valuename",
        Description = "For valuename resources.",
    });

    var binding = new Gcp.Tags.LocationTagBinding("binding", new()
    {
        Parent = project.Number.Apply(number => $"//compute.googleapis.com/projects/{number}/zones/us-central1-a/instances/{instance.InstanceId}"),
        TagValue = @value.Id,
        Location = "us-central1-a",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
			ProjectId: pulumi.String("project_id"),
			Name:      pulumi.String("project_id"),
			OrgId:     pulumi.String("123456789"),
		})
		if err != nil {
			return err
		}
		key, err := tags.NewTagKey(ctx, "key", &tags.TagKeyArgs{
			Parent:      pulumi.String("organizations/123456789"),
			ShortName:   pulumi.String("keyname"),
			Description: pulumi.String("For keyname resources."),
		})
		if err != nil {
			return err
		}
		value, err := tags.NewTagValue(ctx, "value", &tags.TagValueArgs{
			Parent:      key.ID(),
			ShortName:   pulumi.String("valuename"),
			Description: pulumi.String("For valuename resources."),
		})
		if err != nil {
			return err
		}
		_, err = tags.NewLocationTagBinding(ctx, "binding", &tags.LocationTagBindingArgs{
			Parent: project.Number.ApplyT(func(number string) (string, error) {
				return fmt.Sprintf("//compute.googleapis.com/projects/%v/zones/us-central1-a/instances/%v", number, instance.InstanceId), nil
			}).(pulumi.StringOutput),
			TagValue: value.ID(),
			Location: pulumi.String("us-central1-a"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.tags.TagKey;
import com.pulumi.gcp.tags.TagKeyArgs;
import com.pulumi.gcp.tags.TagValue;
import com.pulumi.gcp.tags.TagValueArgs;
import com.pulumi.gcp.tags.LocationTagBinding;
import com.pulumi.gcp.tags.LocationTagBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var project = new Project("project", ProjectArgs.builder()
            .projectId("project_id")
            .name("project_id")
            .orgId("123456789")
            .build());

        var key = new TagKey("key", TagKeyArgs.builder()
            .parent("organizations/123456789")
            .shortName("keyname")
            .description("For keyname resources.")
            .build());

        var value = new TagValue("value", TagValueArgs.builder()
            .parent(key.id())
            .shortName("valuename")
            .description("For valuename resources.")
            .build());

        var binding = new LocationTagBinding("binding", LocationTagBindingArgs.builder()
            .parent(project.number().applyValue(number -> String.format("//compute.googleapis.com/projects/%s/zones/us-central1-a/instances/%s", number,instance.instanceId())))
            .tagValue(value.id())
            .location("us-central1-a")
            .build());

    }
}
```
```yaml
resources:
  project:
    type: gcp:organizations:Project
    properties:
      projectId: project_id
      name: project_id
      orgId: '123456789'
  key:
    type: gcp:tags:TagKey
    properties:
      parent: organizations/123456789
      shortName: keyname
      description: For keyname resources.
  value:
    type: gcp:tags:TagValue
    properties:
      parent: ${key.id}
      shortName: valuename
      description: For valuename resources.
  binding:
    type: gcp:tags:LocationTagBinding
    properties:
      parent: //compute.googleapis.com/projects/${project.number}/zones/us-central1-a/instances/${instance.instanceId}
      tagValue: ${value.id}
      location: us-central1-a
```
<!--End PulumiCodeChooser -->

## Import

LocationTagBinding can be imported using any of these accepted formats:

* `{{location}}/{{name}}`

When using the `pulumi import` command, TagBinding can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:tags/locationTagBinding:LocationTagBinding default {{location}}/{{name}}
```

:
locationB" (Location of the target resource.

- - -
З
parent" yThe full resource name of the resource the TagValue is bound to. E.g. //cloudresourcemanager.googleapis.com/projects/123
S
tagValue" CThe TagValue of the TagBinding. Must be of the form tagValues/456.
":
locationB" (Location of the target resource.

- - -
"w
name" kThe generated id for the TagBinding. This is a string of the form: `tagBindings/{parent}/{tag-value-name}`
"З
parent" yThe full resource name of the resource the TagValue is bound to. E.g. //cloudresourcemanager.googleapis.com/projects/123
"S
tagValue" CThe TagValue of the TagBinding. Must be of the form tagValues/456.
*Ш<
2
tags
TagBindinggcp:tags/tagBinding:TagBindingН7A TagBinding represents a connection between a TagValue and a cloud resource (currently project, folder, or organization). Once a TagBinding is created, the TagValue is applied to all the descendants of the cloud resource.


To get more information about TagBinding, see:

* [API documentation](https://cloud.google.com/resource-manager/reference/rest/v3/tagBindings)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing)

## Example Usage

### Tag Binding Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = new gcp.organizations.Project("project", {
    projectId: "project_id",
    name: "project_id",
    orgId: "123456789",
    deletionPolicy: "DELETE",
});
const key = new gcp.tags.TagKey("key", {
    parent: "organizations/123456789",
    shortName: "keyname",
    description: "For keyname resources.",
});
const value = new gcp.tags.TagValue("value", {
    parent: key.id,
    shortName: "valuename",
    description: "For valuename resources.",
});
const binding = new gcp.tags.TagBinding("binding", {
    parent: pulumi.interpolate`//cloudresourcemanager.googleapis.com/projects/${project.number}`,
    tagValue: value.id,
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.Project("project",
    project_id="project_id",
    name="project_id",
    org_id="123456789",
    deletion_policy="DELETE")
key = gcp.tags.TagKey("key",
    parent="organizations/123456789",
    short_name="keyname",
    description="For keyname resources.")
value = gcp.tags.TagValue("value",
    parent=key.id,
    short_name="valuename",
    description="For valuename resources.")
binding = gcp.tags.TagBinding("binding",
    parent=project.number.apply(lambda number: f"//cloudresourcemanager.googleapis.com/projects/{number}"),
    tag_value=value.id)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = new Gcp.Organizations.Project("project", new()
    {
        ProjectId = "project_id",
        Name = "project_id",
        OrgId = "123456789",
        DeletionPolicy = "DELETE",
    });

    var key = new Gcp.Tags.TagKey("key", new()
    {
        Parent = "organizations/123456789",
        ShortName = "keyname",
        Description = "For keyname resources.",
    });

    var @value = new Gcp.Tags.TagValue("value", new()
    {
        Parent = key.Id,
        ShortName = "valuename",
        Description = "For valuename resources.",
    });

    var binding = new Gcp.Tags.TagBinding("binding", new()
    {
        Parent = project.Number.Apply(number => $"//cloudresourcemanager.googleapis.com/projects/{number}"),
        TagValue = @value.Id,
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
			ProjectId:      pulumi.String("project_id"),
			Name:           pulumi.String("project_id"),
			OrgId:          pulumi.String("123456789"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		key, err := tags.NewTagKey(ctx, "key", &tags.TagKeyArgs{
			Parent:      pulumi.String("organizations/123456789"),
			ShortName:   pulumi.String("keyname"),
			Description: pulumi.String("For keyname resources."),
		})
		if err != nil {
			return err
		}
		value, err := tags.NewTagValue(ctx, "value", &tags.TagValueArgs{
			Parent:      key.ID(),
			ShortName:   pulumi.String("valuename"),
			Description: pulumi.String("For valuename resources."),
		})
		if err != nil {
			return err
		}
		_, err = tags.NewTagBinding(ctx, "binding", &tags.TagBindingArgs{
			Parent: project.Number.ApplyT(func(number string) (string, error) {
				return fmt.Sprintf("//cloudresourcemanager.googleapis.com/projects/%v", number), nil
			}).(pulumi.StringOutput),
			TagValue: value.ID(),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.gcp.tags.TagKey;
import com.pulumi.gcp.tags.TagKeyArgs;
import com.pulumi.gcp.tags.TagValue;
import com.pulumi.gcp.tags.TagValueArgs;
import com.pulumi.gcp.tags.TagBinding;
import com.pulumi.gcp.tags.TagBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var project = new Project("project", ProjectArgs.builder()
            .projectId("project_id")
            .name("project_id")
            .orgId("123456789")
            .deletionPolicy("DELETE")
            .build());

        var key = new TagKey("key", TagKeyArgs.builder()
            .parent("organizations/123456789")
            .shortName("keyname")
            .description("For keyname resources.")
            .build());

        var value = new TagValue("value", TagValueArgs.builder()
            .parent(key.id())
            .shortName("valuename")
            .description("For valuename resources.")
            .build());

        var binding = new TagBinding("binding", TagBindingArgs.builder()
            .parent(project.number().applyValue(number -> String.format("//cloudresourcemanager.googleapis.com/projects/%s", number)))
            .tagValue(value.id())
            .build());

    }
}
```
```yaml
resources:
  project:
    type: gcp:organizations:Project
    properties:
      projectId: project_id
      name: project_id
      orgId: '123456789'
      deletionPolicy: DELETE
  key:
    type: gcp:tags:TagKey
    properties:
      parent: organizations/123456789
      shortName: keyname
      description: For keyname resources.
  value:
    type: gcp:tags:TagValue
    properties:
      parent: ${key.id}
      shortName: valuename
      description: For valuename resources.
  binding:
    type: gcp:tags:TagBinding
    properties:
      parent: //cloudresourcemanager.googleapis.com/projects/${project.number}
      tagValue: ${value.id}
```
<!--End PulumiCodeChooser -->

## Import

TagBinding can be imported using any of these accepted formats:

* `tagBindings/{{name}}`

* `{{name}}`

When using the `pulumi import` command, TagBinding can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:tags/tagBinding:TagBinding default tagBindings/{{name}}
```

```sh
$ pulumi import gcp:tags/tagBinding:TagBinding default {{name}}
```

З
parent" yThe full resource name of the resource the TagValue is bound to. E.g. //cloudresourcemanager.googleapis.com/projects/123
[
tagValue" KThe TagValue of the TagBinding. Must be of the form tagValues/456.


- - -
"Г
name" wThe generated id for the TagBinding. This is a string of the form: `tagBindings/{full-resource-name}/{tag-value-name}`
"З
parent" yThe full resource name of the resource the TagValue is bound to. E.g. //cloudresourcemanager.googleapis.com/projects/123
"[
tagValue" KThe TagValue of the TagBinding. Must be of the form tagValues/456.


- - -
*У.
&
tagsTagKeygcp:tags/tagKey:TagKey┘A TagKey, used to group a set of TagValues.


To get more information about TagKey, see:

* [API documentation](https://cloud.google.com/resource-manager/reference/rest/v3/tagKeys)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing)

## Example Usage

### Tag Key Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const key = new gcp.tags.TagKey("key", {
    parent: "organizations/123456789",
    shortName: "keyname",
    description: "For keyname resources.",
});
```
```python
import pulumi
import pulumi_gcp as gcp

key = gcp.tags.TagKey("key",
    parent="organizations/123456789",
    short_name="keyname",
    description="For keyname resources.")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var key = new Gcp.Tags.TagKey("key", new()
    {
        Parent = "organizations/123456789",
        ShortName = "keyname",
        Description = "For keyname resources.",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKey(ctx, "key", &tags.TagKeyArgs{
			Parent:      pulumi.String("organizations/123456789"),
			ShortName:   pulumi.String("keyname"),
			Description: pulumi.String("For keyname resources."),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKey;
import com.pulumi.gcp.tags.TagKeyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var key = new TagKey("key", TagKeyArgs.builder()
            .parent("organizations/123456789")
            .shortName("keyname")
            .description("For keyname resources.")
            .build());

    }
}
```
```yaml
resources:
  key:
    type: gcp:tags:TagKey
    properties:
      parent: organizations/123456789
      shortName: keyname
      description: For keyname resources.
```
<!--End PulumiCodeChooser -->

## Import

TagKey can be imported using any of these accepted formats:

* `tagKeys/{{name}}`

* `{{name}}`

When using the `pulumi import` command, TagKey can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:tags/tagKey:TagKey default tagKeys/{{name}}
```

```sh
$ pulumi import gcp:tags/tagKey:TagKey default {{name}}
```

^
descriptionB" IUser-assigned description of the TagKey. Must not exceed 256 characters.
Ш
parent" ЙInput only. The resource name of the new TagKey's parent. Must be of the form organizations/{org_id} or projects/{project_id_or_number}.
Х
purposeB" ГOptional. A purpose cannot be changed once set.
A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag.
Possible values are: `GCE_FIREWALL`.
М
purposeDataB2" ЇOptional. Purpose data cannot be changed once set.
Purpose data corresponds to the policy system that the tag is intended for. For example, the GCE_FIREWALL purpose expects data in the following format: `network = "<project-name>/<vpc-name>"`.
Ж
	shortName" ЇInput only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
The short name can have a maximum length of 256 characters. The permitted character set for the shortName includes all UTF-8 encoded Unicode characters except single quotes ('), double quotes ("), backslashes (\\), and forward slashes (/).


- - -
"▌

createTime" ╩Output only. Creation time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"^
descriptionB" IUser-assigned description of the TagKey. Must not exceed 256 characters.
"5
name" )The generated numeric id for the TagKey.
"B
namespacedName" ,Output only. Namespaced name of the TagKey.
"Ш
parent" ЙInput only. The resource name of the new TagKey's parent. Must be of the form organizations/{org_id} or projects/{project_id_or_number}.
"Х
purposeB" ГOptional. A purpose cannot be changed once set.
A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag.
Possible values are: `GCE_FIREWALL`.
"М
purposeDataB2" ЇOptional. Purpose data cannot be changed once set.
Purpose data corresponds to the policy system that the tag is intended for. For example, the GCE_FIREWALL purpose expects data in the following format: `network = "<project-name>/<vpc-name>"`.
"Ж
	shortName" ЇInput only. The user friendly name for a TagKey. The short name should be unique for TagKeys within the same tag namespace.
The short name can have a maximum length of 256 characters. The permitted character set for the shortName includes all UTF-8 encoded Unicode characters except single quotes ('), double quotes ("), backslashes (\\), and forward slashes (/).


- - -
"█

updateTime" ╚Output only. Update time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*¤╕
D
tagsTagKeyIamBinding*gcp:tags/tagKeyIamBinding:TagKeyIamBindingдЮThree different resources help you manage your IAM policy for Tags TagKey. Each of these resources serves a different use case:

* `gcp.tags.TagKeyIamPolicy`: Authoritative. Sets the IAM policy for the tagkey and replaces any existing policy already attached.
* `gcp.tags.TagKeyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagkey are preserved.
* `gcp.tags.TagKeyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagkey are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagKeyIamPolicy`: Retrieves the IAM policy for the tagkey

> **Note:** `gcp.tags.TagKeyIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagKeyIamBinding` and `gcp.tags.TagKeyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagKeyIamBinding` resources **can be** used in conjunction with `gcp.tags.TagKeyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagKeyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagKeyIamPolicy("policy", {
    tagKey: key.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagKeyIamPolicy("policy",
    tag_key=key["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagKeyIamPolicy("policy", new()
    {
        TagKey = key.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagKeyIamPolicy(ctx, "policy", &tags.TagKeyIamPolicyArgs{
			TagKey:     pulumi.Any(key.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagKeyIamPolicy;
import com.pulumi.gcp.tags.TagKeyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagKeyIamPolicy("policy", TagKeyIamPolicyArgs.builder()
            .tagKey(key.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagKeyIamPolicy
    properties:
      tagKey: ${key.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagKeyIamBinding("binding", {
    tagKey: key.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagKeyIamBinding("binding",
    tag_key=key["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagKeyIamBinding("binding", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamBinding(ctx, "binding", &tags.TagKeyIamBindingArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamBinding;
import com.pulumi.gcp.tags.TagKeyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagKeyIamBinding("binding", TagKeyIamBindingArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagKeyIamBinding
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagKeyIamMember("member", {
    tagKey: key.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagKeyIamMember("member",
    tag_key=key["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagKeyIamMember("member", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamMember(ctx, "member", &tags.TagKeyIamMemberArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamMember;
import com.pulumi.gcp.tags.TagKeyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagKeyIamMember("member", TagKeyIamMemberArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagKeyIamMember
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Tags TagKey
Three different resources help you manage your IAM policy for Tags TagKey. Each of these resources serves a different use case:

* `gcp.tags.TagKeyIamPolicy`: Authoritative. Sets the IAM policy for the tagkey and replaces any existing policy already attached.
* `gcp.tags.TagKeyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagkey are preserved.
* `gcp.tags.TagKeyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagkey are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagKeyIamPolicy`: Retrieves the IAM policy for the tagkey

> **Note:** `gcp.tags.TagKeyIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagKeyIamBinding` and `gcp.tags.TagKeyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagKeyIamBinding` resources **can be** used in conjunction with `gcp.tags.TagKeyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagKeyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagKeyIamPolicy("policy", {
    tagKey: key.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagKeyIamPolicy("policy",
    tag_key=key["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagKeyIamPolicy("policy", new()
    {
        TagKey = key.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagKeyIamPolicy(ctx, "policy", &tags.TagKeyIamPolicyArgs{
			TagKey:     pulumi.Any(key.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagKeyIamPolicy;
import com.pulumi.gcp.tags.TagKeyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagKeyIamPolicy("policy", TagKeyIamPolicyArgs.builder()
            .tagKey(key.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagKeyIamPolicy
    properties:
      tagKey: ${key.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagKeyIamBinding("binding", {
    tagKey: key.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagKeyIamBinding("binding",
    tag_key=key["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagKeyIamBinding("binding", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamBinding(ctx, "binding", &tags.TagKeyIamBindingArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamBinding;
import com.pulumi.gcp.tags.TagKeyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagKeyIamBinding("binding", TagKeyIamBindingArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagKeyIamBinding
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagKeyIamMember("member", {
    tagKey: key.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagKeyIamMember("member",
    tag_key=key["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagKeyIamMember("member", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamMember(ctx, "member", &tags.TagKeyIamMemberArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamMember;
import com.pulumi.gcp.tags.TagKeyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagKeyIamMember("member", TagKeyIamMemberArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagKeyIamMember
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* tagKeys/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Tags tagkey IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:tags/tagKeyIamBinding:TagKeyIamBinding editor "tagKeys/{{tag_key}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:tags/tagKeyIamBinding:TagKeyIamBinding editor "tagKeys/{{tag_key}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:tags/tagKeyIamBinding:TagKeyIamBinding editor tagKeys/{{tag_key}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

r
	conditioneBc:a
_
tagsTagKeyIamBindingCondition<gcp:tags/TagKeyIamBindingCondition:TagKeyIamBindingCondition╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
╥
role" ┼The role that should be applied. Only one
`gcp.tags.TagKeyIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
I
tagKey" ;Used to find the parent resource to bind the IAM policy to
"r
	conditioneBc:a
_
tagsTagKeyIamBindingCondition<gcp:tags/TagKeyIamBindingCondition:TagKeyIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"╥
role" ┼The role that should be applied. Only one
`gcp.tags.TagKeyIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"I
tagKey" ;Used to find the parent resource to bind the IAM policy to
*ш╕
A
tagsTagKeyIamMember(gcp:tags/tagKeyIamMember:TagKeyIamMemberЮЮThree different resources help you manage your IAM policy for Tags TagKey. Each of these resources serves a different use case:

* `gcp.tags.TagKeyIamPolicy`: Authoritative. Sets the IAM policy for the tagkey and replaces any existing policy already attached.
* `gcp.tags.TagKeyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagkey are preserved.
* `gcp.tags.TagKeyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagkey are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagKeyIamPolicy`: Retrieves the IAM policy for the tagkey

> **Note:** `gcp.tags.TagKeyIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagKeyIamBinding` and `gcp.tags.TagKeyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagKeyIamBinding` resources **can be** used in conjunction with `gcp.tags.TagKeyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagKeyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagKeyIamPolicy("policy", {
    tagKey: key.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagKeyIamPolicy("policy",
    tag_key=key["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagKeyIamPolicy("policy", new()
    {
        TagKey = key.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagKeyIamPolicy(ctx, "policy", &tags.TagKeyIamPolicyArgs{
			TagKey:     pulumi.Any(key.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagKeyIamPolicy;
import com.pulumi.gcp.tags.TagKeyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagKeyIamPolicy("policy", TagKeyIamPolicyArgs.builder()
            .tagKey(key.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagKeyIamPolicy
    properties:
      tagKey: ${key.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagKeyIamBinding("binding", {
    tagKey: key.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagKeyIamBinding("binding",
    tag_key=key["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagKeyIamBinding("binding", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamBinding(ctx, "binding", &tags.TagKeyIamBindingArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamBinding;
import com.pulumi.gcp.tags.TagKeyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagKeyIamBinding("binding", TagKeyIamBindingArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagKeyIamBinding
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagKeyIamMember("member", {
    tagKey: key.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagKeyIamMember("member",
    tag_key=key["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagKeyIamMember("member", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamMember(ctx, "member", &tags.TagKeyIamMemberArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamMember;
import com.pulumi.gcp.tags.TagKeyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagKeyIamMember("member", TagKeyIamMemberArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagKeyIamMember
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Tags TagKey
Three different resources help you manage your IAM policy for Tags TagKey. Each of these resources serves a different use case:

* `gcp.tags.TagKeyIamPolicy`: Authoritative. Sets the IAM policy for the tagkey and replaces any existing policy already attached.
* `gcp.tags.TagKeyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagkey are preserved.
* `gcp.tags.TagKeyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagkey are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagKeyIamPolicy`: Retrieves the IAM policy for the tagkey

> **Note:** `gcp.tags.TagKeyIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagKeyIamBinding` and `gcp.tags.TagKeyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagKeyIamBinding` resources **can be** used in conjunction with `gcp.tags.TagKeyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagKeyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagKeyIamPolicy("policy", {
    tagKey: key.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagKeyIamPolicy("policy",
    tag_key=key["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagKeyIamPolicy("policy", new()
    {
        TagKey = key.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagKeyIamPolicy(ctx, "policy", &tags.TagKeyIamPolicyArgs{
			TagKey:     pulumi.Any(key.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagKeyIamPolicy;
import com.pulumi.gcp.tags.TagKeyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagKeyIamPolicy("policy", TagKeyIamPolicyArgs.builder()
            .tagKey(key.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagKeyIamPolicy
    properties:
      tagKey: ${key.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagKeyIamBinding("binding", {
    tagKey: key.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagKeyIamBinding("binding",
    tag_key=key["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagKeyIamBinding("binding", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamBinding(ctx, "binding", &tags.TagKeyIamBindingArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamBinding;
import com.pulumi.gcp.tags.TagKeyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagKeyIamBinding("binding", TagKeyIamBindingArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagKeyIamBinding
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagKeyIamMember("member", {
    tagKey: key.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagKeyIamMember("member",
    tag_key=key["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagKeyIamMember("member", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamMember(ctx, "member", &tags.TagKeyIamMemberArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamMember;
import com.pulumi.gcp.tags.TagKeyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagKeyIamMember("member", TagKeyIamMemberArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagKeyIamMember
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* tagKeys/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Tags tagkey IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:tags/tagKeyIamMember:TagKeyIamMember editor "tagKeys/{{tag_key}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:tags/tagKeyIamMember:TagKeyIamMember editor "tagKeys/{{tag_key}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:tags/tagKeyIamMember:TagKeyIamMember editor tagKeys/{{tag_key}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

o
	conditionbB`:^
\
tagsTagKeyIamMemberCondition:gcp:tags/TagKeyIamMemberCondition:TagKeyIamMemberCondition╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
╥
role" ┼The role that should be applied. Only one
`gcp.tags.TagKeyIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
I
tagKey" ;Used to find the parent resource to bind the IAM policy to
"o
	conditionbB`:^
\
tagsTagKeyIamMemberCondition:gcp:tags/TagKeyIamMemberCondition:TagKeyIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"╥
role" ┼The role that should be applied. Only one
`gcp.tags.TagKeyIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"I
tagKey" ;Used to find the parent resource to bind the IAM policy to
*Єб
A
tagsTagKeyIamPolicy(gcp:tags/tagKeyIamPolicy:TagKeyIamPolicyЮЮThree different resources help you manage your IAM policy for Tags TagKey. Each of these resources serves a different use case:

* `gcp.tags.TagKeyIamPolicy`: Authoritative. Sets the IAM policy for the tagkey and replaces any existing policy already attached.
* `gcp.tags.TagKeyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagkey are preserved.
* `gcp.tags.TagKeyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagkey are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagKeyIamPolicy`: Retrieves the IAM policy for the tagkey

> **Note:** `gcp.tags.TagKeyIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagKeyIamBinding` and `gcp.tags.TagKeyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagKeyIamBinding` resources **can be** used in conjunction with `gcp.tags.TagKeyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagKeyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagKeyIamPolicy("policy", {
    tagKey: key.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagKeyIamPolicy("policy",
    tag_key=key["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagKeyIamPolicy("policy", new()
    {
        TagKey = key.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagKeyIamPolicy(ctx, "policy", &tags.TagKeyIamPolicyArgs{
			TagKey:     pulumi.Any(key.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagKeyIamPolicy;
import com.pulumi.gcp.tags.TagKeyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagKeyIamPolicy("policy", TagKeyIamPolicyArgs.builder()
            .tagKey(key.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagKeyIamPolicy
    properties:
      tagKey: ${key.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagKeyIamBinding("binding", {
    tagKey: key.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagKeyIamBinding("binding",
    tag_key=key["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagKeyIamBinding("binding", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamBinding(ctx, "binding", &tags.TagKeyIamBindingArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamBinding;
import com.pulumi.gcp.tags.TagKeyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagKeyIamBinding("binding", TagKeyIamBindingArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagKeyIamBinding
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagKeyIamMember("member", {
    tagKey: key.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagKeyIamMember("member",
    tag_key=key["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagKeyIamMember("member", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamMember(ctx, "member", &tags.TagKeyIamMemberArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamMember;
import com.pulumi.gcp.tags.TagKeyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagKeyIamMember("member", TagKeyIamMemberArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagKeyIamMember
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Tags TagKey
Three different resources help you manage your IAM policy for Tags TagKey. Each of these resources serves a different use case:

* `gcp.tags.TagKeyIamPolicy`: Authoritative. Sets the IAM policy for the tagkey and replaces any existing policy already attached.
* `gcp.tags.TagKeyIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagkey are preserved.
* `gcp.tags.TagKeyIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagkey are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagKeyIamPolicy`: Retrieves the IAM policy for the tagkey

> **Note:** `gcp.tags.TagKeyIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagKeyIamBinding` and `gcp.tags.TagKeyIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagKeyIamBinding` resources **can be** used in conjunction with `gcp.tags.TagKeyIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagKeyIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagKeyIamPolicy("policy", {
    tagKey: key.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagKeyIamPolicy("policy",
    tag_key=key["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagKeyIamPolicy("policy", new()
    {
        TagKey = key.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagKeyIamPolicy(ctx, "policy", &tags.TagKeyIamPolicyArgs{
			TagKey:     pulumi.Any(key.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagKeyIamPolicy;
import com.pulumi.gcp.tags.TagKeyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagKeyIamPolicy("policy", TagKeyIamPolicyArgs.builder()
            .tagKey(key.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagKeyIamPolicy
    properties:
      tagKey: ${key.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagKeyIamBinding("binding", {
    tagKey: key.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagKeyIamBinding("binding",
    tag_key=key["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagKeyIamBinding("binding", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamBinding(ctx, "binding", &tags.TagKeyIamBindingArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamBinding;
import com.pulumi.gcp.tags.TagKeyIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagKeyIamBinding("binding", TagKeyIamBindingArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagKeyIamBinding
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagKeyIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagKeyIamMember("member", {
    tagKey: key.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagKeyIamMember("member",
    tag_key=key["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagKeyIamMember("member", new()
    {
        TagKey = key.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagKeyIamMember(ctx, "member", &tags.TagKeyIamMemberArgs{
			TagKey: pulumi.Any(key.Name),
			Role:   pulumi.String("roles/viewer"),
			Member: pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKeyIamMember;
import com.pulumi.gcp.tags.TagKeyIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagKeyIamMember("member", TagKeyIamMemberArgs.builder()
            .tagKey(key.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagKeyIamMember
    properties:
      tagKey: ${key.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* tagKeys/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Tags tagkey IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:tags/tagKeyIamPolicy:TagKeyIamPolicy editor "tagKeys/{{tag_key}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:tags/tagKeyIamPolicy:TagKeyIamPolicy editor "tagKeys/{{tag_key}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:tags/tagKeyIamPolicy:TagKeyIamPolicy editor tagKeys/{{tag_key}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
I
tagKey" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"I
tagKey" ;Used to find the parent resource to bind the IAM policy to
*м/
,
tagsTagValuegcp:tags/tagValue:TagValueм A TagValue is a child of a particular TagKey. TagValues are used to group cloud resources for the purpose of controlling them using policies.


To get more information about TagValue, see:

* [API documentation](https://cloud.google.com/resource-manager/reference/rest/v3/tagValues)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing)

## Example Usage

### Tag Value Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const key = new gcp.tags.TagKey("key", {
    parent: "organizations/123456789",
    shortName: "keyname",
    description: "For keyname resources.",
});
const value = new gcp.tags.TagValue("value", {
    parent: key.id,
    shortName: "valuename",
    description: "For valuename resources.",
});
```
```python
import pulumi
import pulumi_gcp as gcp

key = gcp.tags.TagKey("key",
    parent="organizations/123456789",
    short_name="keyname",
    description="For keyname resources.")
value = gcp.tags.TagValue("value",
    parent=key.id,
    short_name="valuename",
    description="For valuename resources.")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var key = new Gcp.Tags.TagKey("key", new()
    {
        Parent = "organizations/123456789",
        ShortName = "keyname",
        Description = "For keyname resources.",
    });

    var @value = new Gcp.Tags.TagValue("value", new()
    {
        Parent = key.Id,
        ShortName = "valuename",
        Description = "For valuename resources.",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		key, err := tags.NewTagKey(ctx, "key", &tags.TagKeyArgs{
			Parent:      pulumi.String("organizations/123456789"),
			ShortName:   pulumi.String("keyname"),
			Description: pulumi.String("For keyname resources."),
		})
		if err != nil {
			return err
		}
		_, err = tags.NewTagValue(ctx, "value", &tags.TagValueArgs{
			Parent:      key.ID(),
			ShortName:   pulumi.String("valuename"),
			Description: pulumi.String("For valuename resources."),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagKey;
import com.pulumi.gcp.tags.TagKeyArgs;
import com.pulumi.gcp.tags.TagValue;
import com.pulumi.gcp.tags.TagValueArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var key = new TagKey("key", TagKeyArgs.builder()
            .parent("organizations/123456789")
            .shortName("keyname")
            .description("For keyname resources.")
            .build());

        var value = new TagValue("value", TagValueArgs.builder()
            .parent(key.id())
            .shortName("valuename")
            .description("For valuename resources.")
            .build());

    }
}
```
```yaml
resources:
  key:
    type: gcp:tags:TagKey
    properties:
      parent: organizations/123456789
      shortName: keyname
      description: For keyname resources.
  value:
    type: gcp:tags:TagValue
    properties:
      parent: ${key.id}
      shortName: valuename
      description: For valuename resources.
```
<!--End PulumiCodeChooser -->

## Import

TagValue can be imported using any of these accepted formats:

* `tagValues/{{name}}`

* `{{name}}`

When using the `pulumi import` command, TagValue can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:tags/tagValue:TagValue default tagValues/{{name}}
```

```sh
$ pulumi import gcp:tags/tagValue:TagValue default {{name}}
```

`
descriptionB" KUser-assigned description of the TagValue. Must not exceed 256 characters.
t
parent" fInput only. The resource name of the new TagValue's parent. Must be of the form tagKeys/{tag_key_id}.
К
	shortName" °Input only. User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey.
The short name can have a maximum length of 256 characters. The permitted character set for the shortName includes all UTF-8 encoded Unicode characters except single quotes ('), double quotes ("), backslashes (\\), and forward slashes (/).


- - -
"▌

createTime" ╩Output only. Creation time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"`
descriptionB" KUser-assigned description of the TagValue. Must not exceed 256 characters.
"7
name" +The generated numeric id for the TagValue.
"Л
namespacedName" uOutput only. Namespaced name of the TagValue. Will be in the format {parentNamespace}/{tagKeyShortName}/{shortName}.
"t
parent" fInput only. The resource name of the new TagValue's parent. Must be of the form tagKeys/{tag_key_id}.
"К
	shortName" °Input only. User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey.
The short name can have a maximum length of 256 characters. The permitted character set for the shortName includes all UTF-8 encoded Unicode characters except single quotes ('), double quotes ("), backslashes (\\), and forward slashes (/).


- - -
"█

updateTime" ╚Output only. Update time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
*П╝
J
tagsTagValueIamBinding.gcp:tags/tagValueIamBinding:TagValueIamBindingЬбThree different resources help you manage your IAM policy for Tags TagValue. Each of these resources serves a different use case:

* `gcp.tags.TagValueIamPolicy`: Authoritative. Sets the IAM policy for the tagvalue and replaces any existing policy already attached.
* `gcp.tags.TagValueIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagvalue are preserved.
* `gcp.tags.TagValueIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagvalue are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagValueIamPolicy`: Retrieves the IAM policy for the tagvalue

> **Note:** `gcp.tags.TagValueIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagValueIamBinding` and `gcp.tags.TagValueIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagValueIamBinding` resources **can be** used in conjunction with `gcp.tags.TagValueIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagValueIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagValueIamPolicy("policy", {
    tagValue: value.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagValueIamPolicy("policy",
    tag_value=value["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagValueIamPolicy("policy", new()
    {
        TagValue = @value.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagValueIamPolicy(ctx, "policy", &tags.TagValueIamPolicyArgs{
			TagValue:   pulumi.Any(value.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagValueIamPolicy;
import com.pulumi.gcp.tags.TagValueIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagValueIamPolicy("policy", TagValueIamPolicyArgs.builder()
            .tagValue(value.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagValueIamPolicy
    properties:
      tagValue: ${value.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagValueIamBinding("binding", {
    tagValue: value.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagValueIamBinding("binding",
    tag_value=value["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagValueIamBinding("binding", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamBinding(ctx, "binding", &tags.TagValueIamBindingArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamBinding;
import com.pulumi.gcp.tags.TagValueIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagValueIamBinding("binding", TagValueIamBindingArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagValueIamBinding
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagValueIamMember("member", {
    tagValue: value.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagValueIamMember("member",
    tag_value=value["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagValueIamMember("member", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamMember(ctx, "member", &tags.TagValueIamMemberArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamMember;
import com.pulumi.gcp.tags.TagValueIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagValueIamMember("member", TagValueIamMemberArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagValueIamMember
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Tags TagValue
Three different resources help you manage your IAM policy for Tags TagValue. Each of these resources serves a different use case:

* `gcp.tags.TagValueIamPolicy`: Authoritative. Sets the IAM policy for the tagvalue and replaces any existing policy already attached.
* `gcp.tags.TagValueIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagvalue are preserved.
* `gcp.tags.TagValueIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagvalue are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagValueIamPolicy`: Retrieves the IAM policy for the tagvalue

> **Note:** `gcp.tags.TagValueIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagValueIamBinding` and `gcp.tags.TagValueIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagValueIamBinding` resources **can be** used in conjunction with `gcp.tags.TagValueIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagValueIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagValueIamPolicy("policy", {
    tagValue: value.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagValueIamPolicy("policy",
    tag_value=value["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagValueIamPolicy("policy", new()
    {
        TagValue = @value.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagValueIamPolicy(ctx, "policy", &tags.TagValueIamPolicyArgs{
			TagValue:   pulumi.Any(value.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagValueIamPolicy;
import com.pulumi.gcp.tags.TagValueIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagValueIamPolicy("policy", TagValueIamPolicyArgs.builder()
            .tagValue(value.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagValueIamPolicy
    properties:
      tagValue: ${value.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagValueIamBinding("binding", {
    tagValue: value.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagValueIamBinding("binding",
    tag_value=value["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagValueIamBinding("binding", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamBinding(ctx, "binding", &tags.TagValueIamBindingArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamBinding;
import com.pulumi.gcp.tags.TagValueIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagValueIamBinding("binding", TagValueIamBindingArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagValueIamBinding
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagValueIamMember("member", {
    tagValue: value.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagValueIamMember("member",
    tag_value=value["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagValueIamMember("member", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamMember(ctx, "member", &tags.TagValueIamMemberArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamMember;
import com.pulumi.gcp.tags.TagValueIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagValueIamMember("member", TagValueIamMemberArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagValueIamMember
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* tagValues/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Tags tagvalue IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:tags/tagValueIamBinding:TagValueIamBinding editor "tagValues/{{tag_value}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:tags/tagValueIamBinding:TagValueIamBinding editor "tagValues/{{tag_value}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:tags/tagValueIamBinding:TagValueIamBinding editor tagValues/{{tag_value}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

x
	conditionkBi:g
e
tagsTagValueIamBindingCondition@gcp:tags/TagValueIamBindingCondition:TagValueIamBindingCondition╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
╘
role" ╟The role that should be applied. Only one
`gcp.tags.TagValueIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
K
tagValue" ;Used to find the parent resource to bind the IAM policy to
"x
	conditionkBi:g
e
tagsTagValueIamBindingCondition@gcp:tags/TagValueIamBindingCondition:TagValueIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"╘
role" ╟The role that should be applied. Only one
`gcp.tags.TagValueIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"K
tagValue" ;Used to find the parent resource to bind the IAM policy to
*·╗
G
tagsTagValueIamMember,gcp:tags/tagValueIamMember:TagValueIamMemberЦбThree different resources help you manage your IAM policy for Tags TagValue. Each of these resources serves a different use case:

* `gcp.tags.TagValueIamPolicy`: Authoritative. Sets the IAM policy for the tagvalue and replaces any existing policy already attached.
* `gcp.tags.TagValueIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagvalue are preserved.
* `gcp.tags.TagValueIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagvalue are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagValueIamPolicy`: Retrieves the IAM policy for the tagvalue

> **Note:** `gcp.tags.TagValueIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagValueIamBinding` and `gcp.tags.TagValueIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagValueIamBinding` resources **can be** used in conjunction with `gcp.tags.TagValueIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagValueIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagValueIamPolicy("policy", {
    tagValue: value.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagValueIamPolicy("policy",
    tag_value=value["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagValueIamPolicy("policy", new()
    {
        TagValue = @value.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagValueIamPolicy(ctx, "policy", &tags.TagValueIamPolicyArgs{
			TagValue:   pulumi.Any(value.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagValueIamPolicy;
import com.pulumi.gcp.tags.TagValueIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagValueIamPolicy("policy", TagValueIamPolicyArgs.builder()
            .tagValue(value.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagValueIamPolicy
    properties:
      tagValue: ${value.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagValueIamBinding("binding", {
    tagValue: value.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagValueIamBinding("binding",
    tag_value=value["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagValueIamBinding("binding", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamBinding(ctx, "binding", &tags.TagValueIamBindingArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamBinding;
import com.pulumi.gcp.tags.TagValueIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagValueIamBinding("binding", TagValueIamBindingArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagValueIamBinding
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagValueIamMember("member", {
    tagValue: value.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagValueIamMember("member",
    tag_value=value["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagValueIamMember("member", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamMember(ctx, "member", &tags.TagValueIamMemberArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamMember;
import com.pulumi.gcp.tags.TagValueIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagValueIamMember("member", TagValueIamMemberArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagValueIamMember
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Tags TagValue
Three different resources help you manage your IAM policy for Tags TagValue. Each of these resources serves a different use case:

* `gcp.tags.TagValueIamPolicy`: Authoritative. Sets the IAM policy for the tagvalue and replaces any existing policy already attached.
* `gcp.tags.TagValueIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagvalue are preserved.
* `gcp.tags.TagValueIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagvalue are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagValueIamPolicy`: Retrieves the IAM policy for the tagvalue

> **Note:** `gcp.tags.TagValueIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagValueIamBinding` and `gcp.tags.TagValueIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagValueIamBinding` resources **can be** used in conjunction with `gcp.tags.TagValueIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagValueIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagValueIamPolicy("policy", {
    tagValue: value.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagValueIamPolicy("policy",
    tag_value=value["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagValueIamPolicy("policy", new()
    {
        TagValue = @value.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagValueIamPolicy(ctx, "policy", &tags.TagValueIamPolicyArgs{
			TagValue:   pulumi.Any(value.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagValueIamPolicy;
import com.pulumi.gcp.tags.TagValueIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagValueIamPolicy("policy", TagValueIamPolicyArgs.builder()
            .tagValue(value.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagValueIamPolicy
    properties:
      tagValue: ${value.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagValueIamBinding("binding", {
    tagValue: value.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagValueIamBinding("binding",
    tag_value=value["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagValueIamBinding("binding", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamBinding(ctx, "binding", &tags.TagValueIamBindingArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamBinding;
import com.pulumi.gcp.tags.TagValueIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagValueIamBinding("binding", TagValueIamBindingArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagValueIamBinding
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagValueIamMember("member", {
    tagValue: value.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagValueIamMember("member",
    tag_value=value["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagValueIamMember("member", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamMember(ctx, "member", &tags.TagValueIamMemberArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamMember;
import com.pulumi.gcp.tags.TagValueIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagValueIamMember("member", TagValueIamMemberArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagValueIamMember
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* tagValues/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Tags tagvalue IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:tags/tagValueIamMember:TagValueIamMember editor "tagValues/{{tag_value}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:tags/tagValueIamMember:TagValueIamMember editor "tagValues/{{tag_value}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:tags/tagValueIamMember:TagValueIamMember editor tagValues/{{tag_value}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

u
	conditionhBf:d
b
tagsTagValueIamMemberCondition>gcp:tags/TagValueIamMemberCondition:TagValueIamMemberCondition╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
╘
role" ╟The role that should be applied. Only one
`gcp.tags.TagValueIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
K
tagValue" ;Used to find the parent resource to bind the IAM policy to
"u
	conditionhBf:d
b
tagsTagValueIamMemberCondition>gcp:tags/TagValueIamMemberCondition:TagValueIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"╘
role" ╟The role that should be applied. Only one
`gcp.tags.TagValueIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"K
tagValue" ;Used to find the parent resource to bind the IAM policy to
*Їд
G
tagsTagValueIamPolicy,gcp:tags/tagValueIamPolicy:TagValueIamPolicyЦбThree different resources help you manage your IAM policy for Tags TagValue. Each of these resources serves a different use case:

* `gcp.tags.TagValueIamPolicy`: Authoritative. Sets the IAM policy for the tagvalue and replaces any existing policy already attached.
* `gcp.tags.TagValueIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagvalue are preserved.
* `gcp.tags.TagValueIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagvalue are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagValueIamPolicy`: Retrieves the IAM policy for the tagvalue

> **Note:** `gcp.tags.TagValueIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagValueIamBinding` and `gcp.tags.TagValueIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagValueIamBinding` resources **can be** used in conjunction with `gcp.tags.TagValueIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagValueIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagValueIamPolicy("policy", {
    tagValue: value.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagValueIamPolicy("policy",
    tag_value=value["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagValueIamPolicy("policy", new()
    {
        TagValue = @value.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagValueIamPolicy(ctx, "policy", &tags.TagValueIamPolicyArgs{
			TagValue:   pulumi.Any(value.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagValueIamPolicy;
import com.pulumi.gcp.tags.TagValueIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagValueIamPolicy("policy", TagValueIamPolicyArgs.builder()
            .tagValue(value.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagValueIamPolicy
    properties:
      tagValue: ${value.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagValueIamBinding("binding", {
    tagValue: value.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagValueIamBinding("binding",
    tag_value=value["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagValueIamBinding("binding", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamBinding(ctx, "binding", &tags.TagValueIamBindingArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamBinding;
import com.pulumi.gcp.tags.TagValueIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagValueIamBinding("binding", TagValueIamBindingArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagValueIamBinding
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagValueIamMember("member", {
    tagValue: value.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagValueIamMember("member",
    tag_value=value["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagValueIamMember("member", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamMember(ctx, "member", &tags.TagValueIamMemberArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamMember;
import com.pulumi.gcp.tags.TagValueIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagValueIamMember("member", TagValueIamMemberArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagValueIamMember
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->


## > **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.
-

# IAM policy for Tags TagValue
Three different resources help you manage your IAM policy for Tags TagValue. Each of these resources serves a different use case:

* `gcp.tags.TagValueIamPolicy`: Authoritative. Sets the IAM policy for the tagvalue and replaces any existing policy already attached.
* `gcp.tags.TagValueIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the tagvalue are preserved.
* `gcp.tags.TagValueIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the tagvalue are preserved.

A data source can be used to retrieve policy data in advent you do not need creation

* `gcp.tags.TagValueIamPolicy`: Retrieves the IAM policy for the tagvalue

> **Note:** `gcp.tags.TagValueIamPolicy` **cannot** be used in conjunction with `gcp.tags.TagValueIamBinding` and `gcp.tags.TagValueIamMember` or they will fight over what your policy should be.

> **Note:** `gcp.tags.TagValueIamBinding` resources **can be** used in conjunction with `gcp.tags.TagValueIamMember` resources **only if** they do not grant privilege to the same role.



## gcp.tags.TagValueIamPolicy

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const admin = gcp.organizations.getIAMPolicy({
    bindings: [{
        role: "roles/viewer",
        members: ["user:jane@example.com"],
    }],
});
const policy = new gcp.tags.TagValueIamPolicy("policy", {
    tagValue: value.name,
    policyData: admin.then(admin => admin.policyData),
});
```
```python
import pulumi
import pulumi_gcp as gcp

admin = gcp.organizations.get_iam_policy(bindings=[{
    "role": "roles/viewer",
    "members": ["user:jane@example.com"],
}])
policy = gcp.tags.TagValueIamPolicy("policy",
    tag_value=value["name"],
    policy_data=admin.policy_data)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var admin = Gcp.Organizations.GetIAMPolicy.Invoke(new()
    {
        Bindings = new[]
        {
            new Gcp.Organizations.Inputs.GetIAMPolicyBindingInputArgs
            {
                Role = "roles/viewer",
                Members = new[]
                {
                    "user:jane@example.com",
                },
            },
        },
    });

    var policy = new Gcp.Tags.TagValueIamPolicy("policy", new()
    {
        TagValue = @value.Name,
        PolicyData = admin.Apply(getIAMPolicyResult => getIAMPolicyResult.PolicyData),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		admin, err := organizations.LookupIAMPolicy(ctx, &organizations.LookupIAMPolicyArgs{
			Bindings: []organizations.GetIAMPolicyBinding{
				{
					Role: "roles/viewer",
					Members: []string{
						"user:jane@example.com",
					},
				},
			},
		}, nil)
		if err != nil {
			return err
		}
		_, err = tags.NewTagValueIamPolicy(ctx, "policy", &tags.TagValueIamPolicyArgs{
			TagValue:   pulumi.Any(value.Name),
			PolicyData: pulumi.String(admin.PolicyData),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetIAMPolicyArgs;
import com.pulumi.gcp.tags.TagValueIamPolicy;
import com.pulumi.gcp.tags.TagValueIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var admin = OrganizationsFunctions.getIAMPolicy(GetIAMPolicyArgs.builder()
            .bindings(GetIAMPolicyBindingArgs.builder()
                .role("roles/viewer")
                .members("user:jane@example.com")
                .build())
            .build());

        var policy = new TagValueIamPolicy("policy", TagValueIamPolicyArgs.builder()
            .tagValue(value.name())
            .policyData(admin.applyValue(getIAMPolicyResult -> getIAMPolicyResult.policyData()))
            .build());

    }
}
```
```yaml
resources:
  policy:
    type: gcp:tags:TagValueIamPolicy
    properties:
      tagValue: ${value.name}
      policyData: ${admin.policyData}
variables:
  admin:
    fn::invoke:
      function: gcp:organizations:getIAMPolicy
      arguments:
        bindings:
          - role: roles/viewer
            members:
              - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamBinding

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const binding = new gcp.tags.TagValueIamBinding("binding", {
    tagValue: value.name,
    role: "roles/viewer",
    members: ["user:jane@example.com"],
});
```
```python
import pulumi
import pulumi_gcp as gcp

binding = gcp.tags.TagValueIamBinding("binding",
    tag_value=value["name"],
    role="roles/viewer",
    members=["user:jane@example.com"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var binding = new Gcp.Tags.TagValueIamBinding("binding", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Members = new[]
        {
            "user:jane@example.com",
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamBinding(ctx, "binding", &tags.TagValueIamBindingArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Members: pulumi.StringArray{
				pulumi.String("user:jane@example.com"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamBinding;
import com.pulumi.gcp.tags.TagValueIamBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var binding = new TagValueIamBinding("binding", TagValueIamBindingArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .members("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:tags:TagValueIamBinding
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      members:
        - user:jane@example.com
```
<!--End PulumiCodeChooser -->

## gcp.tags.TagValueIamMember

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const member = new gcp.tags.TagValueIamMember("member", {
    tagValue: value.name,
    role: "roles/viewer",
    member: "user:jane@example.com",
});
```
```python
import pulumi
import pulumi_gcp as gcp

member = gcp.tags.TagValueIamMember("member",
    tag_value=value["name"],
    role="roles/viewer",
    member="user:jane@example.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var member = new Gcp.Tags.TagValueIamMember("member", new()
    {
        TagValue = @value.Name,
        Role = "roles/viewer",
        Member = "user:jane@example.com",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.NewTagValueIamMember(ctx, "member", &tags.TagValueIamMemberArgs{
			TagValue: pulumi.Any(value.Name),
			Role:     pulumi.String("roles/viewer"),
			Member:   pulumi.String("user:jane@example.com"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagValueIamMember;
import com.pulumi.gcp.tags.TagValueIamMemberArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var member = new TagValueIamMember("member", TagValueIamMemberArgs.builder()
            .tagValue(value.name())
            .role("roles/viewer")
            .member("user:jane@example.com")
            .build());

    }
}
```
```yaml
resources:
  member:
    type: gcp:tags:TagValueIamMember
    properties:
      tagValue: ${value.name}
      role: roles/viewer
      member: user:jane@example.com
```
<!--End PulumiCodeChooser -->

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* tagValues/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Tags tagvalue IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:tags/tagValueIamPolicy:TagValueIamPolicy editor "tagValues/{{tag_value}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:tags/tagValueIamPolicy:TagValueIamPolicy editor "tagValues/{{tag_value}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:tags/tagValueIamPolicy:TagValueIamPolicy editor tagValues/{{tag_value}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
K
tagValue" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"K
tagValue" ;Used to find the parent resource to bind the IAM policy to
*╨О

tpuNodegcp:tpu/node:Node╬fA Cloud TPU instance.


To get more information about Node, see:

* [API documentation](https://cloud.google.com/tpu/docs/reference/rest/v1/projects.locations.nodes)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/tpu/docs/)

## Example Usage

### Tpu Node Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const available = gcp.tpu.getTensorflowVersions({});
const tpu = new gcp.tpu.Node("tpu", {
    name: "test-tpu",
    zone: "us-central1-b",
    acceleratorType: "v3-8",
    tensorflowVersion: available.then(available => available.versions?.[0]),
    cidrBlock: "10.2.0.0/29",
});
```
```python
import pulumi
import pulumi_gcp as gcp

available = gcp.tpu.get_tensorflow_versions()
tpu = gcp.tpu.Node("tpu",
    name="test-tpu",
    zone="us-central1-b",
    accelerator_type="v3-8",
    tensorflow_version=available.versions[0],
    cidr_block="10.2.0.0/29")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.Tpu.GetTensorflowVersions.Invoke();

    var tpu = new Gcp.Tpu.Node("tpu", new()
    {
        Name = "test-tpu",
        Zone = "us-central1-b",
        AcceleratorType = "v3-8",
        TensorflowVersion = available.Apply(getTensorflowVersionsResult => getTensorflowVersionsResult.Versions[0]),
        CidrBlock = "10.2.0.0/29",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		available, err := tpu.GetTensorflowVersions(ctx, &tpu.GetTensorflowVersionsArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = tpu.NewNode(ctx, "tpu", &tpu.NodeArgs{
			Name:              pulumi.String("test-tpu"),
			Zone:              pulumi.String("us-central1-b"),
			AcceleratorType:   pulumi.String("v3-8"),
			TensorflowVersion: pulumi.String(available.Versions[0]),
			CidrBlock:         pulumi.String("10.2.0.0/29"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tpu.TpuFunctions;
import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
import com.pulumi.gcp.tpu.Node;
import com.pulumi.gcp.tpu.NodeArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = TpuFunctions.getTensorflowVersions();

        var tpu = new Node("tpu", NodeArgs.builder()
            .name("test-tpu")
            .zone("us-central1-b")
            .acceleratorType("v3-8")
            .tensorflowVersion(available.applyValue(getTensorflowVersionsResult -> getTensorflowVersionsResult.versions()[0]))
            .cidrBlock("10.2.0.0/29")
            .build());

    }
}
```
```yaml
resources:
  tpu:
    type: gcp:tpu:Node
    properties:
      name: test-tpu
      zone: us-central1-b
      acceleratorType: v3-8
      tensorflowVersion: ${available.versions[0]}
      cidrBlock: 10.2.0.0/29
variables:
  available:
    fn::invoke:
      function: gcp:tpu:getTensorflowVersions
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Tpu Node Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const available = gcp.tpu.getTensorflowVersions({});
const network = new gcp.compute.Network("network", {name: "tpu-node-network"});
const serviceRange = new gcp.compute.GlobalAddress("service_range", {
    name: "my-global-address",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 16,
    network: network.id,
});
const privateServiceConnection = new gcp.servicenetworking.Connection("private_service_connection", {
    network: network.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [serviceRange.name],
});
const tpu = new gcp.tpu.Node("tpu", {
    name: "test-tpu",
    zone: "us-central1-b",
    acceleratorType: "v3-8",
    tensorflowVersion: available.then(available => available.versions?.[0]),
    description: "Google Provider test TPU",
    useServiceNetworking: true,
    network: privateServiceConnection.network,
    labels: {
        foo: "bar",
    },
    schedulingConfig: {
        preemptible: true,
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

available = gcp.tpu.get_tensorflow_versions()
network = gcp.compute.Network("network", name="tpu-node-network")
service_range = gcp.compute.GlobalAddress("service_range",
    name="my-global-address",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=16,
    network=network.id)
private_service_connection = gcp.servicenetworking.Connection("private_service_connection",
    network=network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[service_range.name])
tpu = gcp.tpu.Node("tpu",
    name="test-tpu",
    zone="us-central1-b",
    accelerator_type="v3-8",
    tensorflow_version=available.versions[0],
    description="Google Provider test TPU",
    use_service_networking=True,
    network=private_service_connection.network,
    labels={
        "foo": "bar",
    },
    scheduling_config={
        "preemptible": True,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.Tpu.GetTensorflowVersions.Invoke();

    var network = new Gcp.Compute.Network("network", new()
    {
        Name = "tpu-node-network",
    });

    var serviceRange = new Gcp.Compute.GlobalAddress("service_range", new()
    {
        Name = "my-global-address",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 16,
        Network = network.Id,
    });

    var privateServiceConnection = new Gcp.ServiceNetworking.Connection("private_service_connection", new()
    {
        Network = network.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            serviceRange.Name,
        },
    });

    var tpu = new Gcp.Tpu.Node("tpu", new()
    {
        Name = "test-tpu",
        Zone = "us-central1-b",
        AcceleratorType = "v3-8",
        TensorflowVersion = available.Apply(getTensorflowVersionsResult => getTensorflowVersionsResult.Versions[0]),
        Description = "Google Provider test TPU",
        UseServiceNetworking = true,
        Network = privateServiceConnection.Network,
        Labels = 
        {
            { "foo", "bar" },
        },
        SchedulingConfig = new Gcp.Tpu.Inputs.NodeSchedulingConfigArgs
        {
            Preemptible = true,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		available, err := tpu.GetTensorflowVersions(ctx, &tpu.GetTensorflowVersionsArgs{}, nil)
		if err != nil {
			return err
		}
		network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
			Name: pulumi.String("tpu-node-network"),
		})
		if err != nil {
			return err
		}
		serviceRange, err := compute.NewGlobalAddress(ctx, "service_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("my-global-address"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(16),
			Network:      network.ID(),
		})
		if err != nil {
			return err
		}
		privateServiceConnection, err := servicenetworking.NewConnection(ctx, "private_service_connection", &servicenetworking.ConnectionArgs{
			Network: network.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				serviceRange.Name,
			},
		})
		if err != nil {
			return err
		}
		_, err = tpu.NewNode(ctx, "tpu", &tpu.NodeArgs{
			Name:                 pulumi.String("test-tpu"),
			Zone:                 pulumi.String("us-central1-b"),
			AcceleratorType:      pulumi.String("v3-8"),
			TensorflowVersion:    pulumi.String(available.Versions[0]),
			Description:          pulumi.String("Google Provider test TPU"),
			UseServiceNetworking: pulumi.Bool(true),
			Network:              privateServiceConnection.Network,
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			SchedulingConfig: &tpu.NodeSchedulingConfigArgs{
				Preemptible: pulumi.Bool(true),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tpu.TpuFunctions;
import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.tpu.Node;
import com.pulumi.gcp.tpu.NodeArgs;
import com.pulumi.gcp.tpu.inputs.NodeSchedulingConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = TpuFunctions.getTensorflowVersions();

        var network = new Network("network", NetworkArgs.builder()
            .name("tpu-node-network")
            .build());

        var serviceRange = new GlobalAddress("serviceRange", GlobalAddressArgs.builder()
            .name("my-global-address")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(16)
            .network(network.id())
            .build());

        var privateServiceConnection = new Connection("privateServiceConnection", ConnectionArgs.builder()
            .network(network.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(serviceRange.name())
            .build());

        var tpu = new Node("tpu", NodeArgs.builder()
            .name("test-tpu")
            .zone("us-central1-b")
            .acceleratorType("v3-8")
            .tensorflowVersion(available.applyValue(getTensorflowVersionsResult -> getTensorflowVersionsResult.versions()[0]))
            .description("Google Provider test TPU")
            .useServiceNetworking(true)
            .network(privateServiceConnection.network())
            .labels(Map.of("foo", "bar"))
            .schedulingConfig(NodeSchedulingConfigArgs.builder()
                .preemptible(true)
                .build())
            .build());

    }
}
```
```yaml
resources:
  tpu:
    type: gcp:tpu:Node
    properties:
      name: test-tpu
      zone: us-central1-b
      acceleratorType: v3-8
      tensorflowVersion: ${available.versions[0]}
      description: Google Provider test TPU
      useServiceNetworking: true
      network: ${privateServiceConnection.network}
      labels:
        foo: bar
      schedulingConfig:
        preemptible: true
  network:
    type: gcp:compute:Network
    properties:
      name: tpu-node-network
  serviceRange:
    type: gcp:compute:GlobalAddress
    name: service_range
    properties:
      name: my-global-address
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 16
      network: ${network.id}
  privateServiceConnection:
    type: gcp:servicenetworking:Connection
    name: private_service_connection
    properties:
      network: ${network.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${serviceRange.name}
variables:
  available:
    fn::invoke:
      function: gcp:tpu:getTensorflowVersions
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Node can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{zone}}/nodes/{{name}}`

* `{{project}}/{{zone}}/{{name}}`

* `{{zone}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Node can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:tpu/node:Node default projects/{{project}}/locations/{{zone}}/nodes/{{name}}
```

```sh
$ pulumi import gcp:tpu/node:Node default {{project}}/{{zone}}/{{name}}
```

```sh
$ pulumi import gcp:tpu/node:Node default {{zone}}/{{name}}
```

```sh
$ pulumi import gcp:tpu/node:Node default {{name}}
```

T
acceleratorType" =The type of hardware accelerators associated with this node.
Р
	cidrBlockB" №The CIDR block that the TPU node will use when selecting an IP
address. This CIDR block must be a /29 block; the Compute Engine
networks API forbids a smaller block, and using a larger block would
be wasteful (a node can only consume one IP address).
Errors will occur if the CIDR block has already been used for a
currently existing TPU node, the CIDR block conflicts with any
subnetworks in the user's provided network, or the provided network
is peered with another network that is using that CIDR block.
Z
descriptionB" EThe user-supplied description of the TPU. Maximum of 512 characters.
О
labelsB2" √Resource labels to represent user provided metadata.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
-
nameB" The immutable name of the TPU.
┌
networkB" ╚The name of a network to peer the TPU node to. It must be a
preexisting Compute Engine network inside of the project on which
this API has been activated. If none is provided, "default" will be
used.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
╝
schedulingConfigTBR:P
N
tpuNodeSchedulingConfig1gcp:tpu/NodeSchedulingConfig:NodeSchedulingConfigRSets the scheduling options for this TPU instance.
Structure is documented below.
P
tensorflowVersion" 7The version of Tensorflow running in the Node.


- - -
Є
useServiceNetworkingB
 ╙Whether the VPC peering for the node is set up through Service Networking API.
The VPC Peering should be set up before provisioning the node. If this field is set,
cidr_block field should not be specified. If the network that you want to peer the
TPU Node to is a Shared VPC network, the node must be created with this this field enabled.
^
zoneB" PThe GCP location for the TPU. If it is not provided, the provider zone is used.
"T
acceleratorType" =The type of hardware accelerators associated with this node.
"О
	cidrBlock" №The CIDR block that the TPU node will use when selecting an IP
address. This CIDR block must be a /29 block; the Compute Engine
networks API forbids a smaller block, and using a larger block would
be wasteful (a node can only consume one IP address).
Errors will occur if the CIDR block has already been used for a
currently existing TPU node, the CIDR block conflicts with any
subnetworks in the user's provided network, or the provided network
is peered with another network that is using that CIDR block.
"Z
descriptionB" EThe user-supplied description of the TPU. Maximum of 512 characters.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"О
labelsB2" √Resource labels to represent user provided metadata.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"+
name" The immutable name of the TPU.
"╪
network" ╚The name of a network to peer the TPU node to. It must be a
preexisting Compute Engine network inside of the project on which
this API has been activated. If none is provided, "default" will be
used.
"▓
networkEndpointsQ*O:M
K
tpuNodeNetworkEndpoint/gcp:tpu/NodeNetworkEndpoint:NodeNetworkEndpoint╩The network endpoints where TPU workers can be accessed and sent work.
It is recommended that Tensorflow clients of the node first reach out
to the first (index 0) entry.
Structure is documented below.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"╝
schedulingConfigTBR:P
N
tpuNodeSchedulingConfig1gcp:tpu/NodeSchedulingConfig:NodeSchedulingConfigRSets the scheduling options for this TPU instance.
Structure is documented below.
"°
serviceAccount" сThe service account used to run the tensor flow services within the
node. To share resources, including Google Cloud Storage data, with
the Tensorflow job running in the Node, this account must have
permissions to that data.
"P
tensorflowVersion" 7The version of Tensorflow running in the Node.


- - -
"Є
useServiceNetworkingB
 ╙Whether the VPC peering for the node is set up through Service Networking API.
The VPC Peering should be set up before provisioning the node. If this field is set,
cidr_block field should not be specified. If the network that you want to peer the
TPU Node to is a Shared VPC network, the node must be created with this this field enabled.
"\
zone" PThe GCP location for the TPU. If it is not provided, the provider zone is used.
*╖4
B
tpuV2QueuedResource)gcp:tpu/v2QueuedResource:V2QueuedResourceЎ,## Example Usage

### Tpu V2 Queued Resource Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const qr = new gcp.tpu.V2QueuedResource("qr", {
    name: "test-qr",
    zone: "us-central1-c",
    project: "my-project-name",
    tpu: {
        nodeSpecs: [{
            parent: "projects/my-project-name/locations/us-central1-c",
            nodeId: "test-tpu",
            node: {
                runtimeVersion: "tpu-vm-tf-2.13.0",
                acceleratorType: "v2-8",
                description: "Text description of the TPU.",
            },
        }],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

qr = gcp.tpu.V2QueuedResource("qr",
    name="test-qr",
    zone="us-central1-c",
    project="my-project-name",
    tpu={
        "node_specs": [{
            "parent": "projects/my-project-name/locations/us-central1-c",
            "node_id": "test-tpu",
            "node": {
                "runtime_version": "tpu-vm-tf-2.13.0",
                "accelerator_type": "v2-8",
                "description": "Text description of the TPU.",
            },
        }],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var qr = new Gcp.Tpu.V2QueuedResource("qr", new()
    {
        Name = "test-qr",
        Zone = "us-central1-c",
        Project = "my-project-name",
        Tpu = new Gcp.Tpu.Inputs.V2QueuedResourceTpuArgs
        {
            NodeSpecs = new[]
            {
                new Gcp.Tpu.Inputs.V2QueuedResourceTpuNodeSpecArgs
                {
                    Parent = "projects/my-project-name/locations/us-central1-c",
                    NodeId = "test-tpu",
                    Node = new Gcp.Tpu.Inputs.V2QueuedResourceTpuNodeSpecNodeArgs
                    {
                        RuntimeVersion = "tpu-vm-tf-2.13.0",
                        AcceleratorType = "v2-8",
                        Description = "Text description of the TPU.",
                    },
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tpu.NewV2QueuedResource(ctx, "qr", &tpu.V2QueuedResourceArgs{
			Name:    pulumi.String("test-qr"),
			Zone:    pulumi.String("us-central1-c"),
			Project: pulumi.String("my-project-name"),
			Tpu: &tpu.V2QueuedResourceTpuArgs{
				NodeSpecs: tpu.V2QueuedResourceTpuNodeSpecArray{
					&tpu.V2QueuedResourceTpuNodeSpecArgs{
						Parent: pulumi.String("projects/my-project-name/locations/us-central1-c"),
						NodeId: pulumi.String("test-tpu"),
						Node: &tpu.V2QueuedResourceTpuNodeSpecNodeArgs{
							RuntimeVersion:  pulumi.String("tpu-vm-tf-2.13.0"),
							AcceleratorType: pulumi.String("v2-8"),
							Description:     pulumi.String("Text description of the TPU."),
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tpu.V2QueuedResource;
import com.pulumi.gcp.tpu.V2QueuedResourceArgs;
import com.pulumi.gcp.tpu.inputs.V2QueuedResourceTpuArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var qr = new V2QueuedResource("qr", V2QueuedResourceArgs.builder()
            .name("test-qr")
            .zone("us-central1-c")
            .project("my-project-name")
            .tpu(V2QueuedResourceTpuArgs.builder()
                .nodeSpecs(V2QueuedResourceTpuNodeSpecArgs.builder()
                    .parent("projects/my-project-name/locations/us-central1-c")
                    .nodeId("test-tpu")
                    .node(V2QueuedResourceTpuNodeSpecNodeArgs.builder()
                        .runtimeVersion("tpu-vm-tf-2.13.0")
                        .acceleratorType("v2-8")
                        .description("Text description of the TPU.")
                        .build())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  qr:
    type: gcp:tpu:V2QueuedResource
    properties:
      name: test-qr
      zone: us-central1-c
      project: my-project-name
      tpu:
        nodeSpecs:
          - parent: projects/my-project-name/locations/us-central1-c
            nodeId: test-tpu
            node:
              runtimeVersion: tpu-vm-tf-2.13.0
              acceleratorType: v2-8
              description: Text description of the TPU.
```
<!--End PulumiCodeChooser -->

## Import

QueuedResource can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}`

* `{{project}}/{{zone}}/{{name}}`

* `{{zone}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, QueuedResource can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}
```

```sh
$ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{project}}/{{zone}}/{{name}}
```

```sh
$ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{zone}}/{{name}}
```

```sh
$ pulumi import gcp:tpu/v2QueuedResource:V2QueuedResource default {{name}}
```

A
nameB" 3The immutable name of the Queued Resource.


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
С
tpuQBO:M
K
tpuV2QueuedResourceTpu/gcp:tpu/V2QueuedResourceTpu:V2QueuedResourceTpu7Defines a TPU resource.
Structure is documented below.
j
zoneB" \The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
"?
name" 3The immutable name of the Queued Resource.


- - -
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"С
tpuQBO:M
K
tpuV2QueuedResourceTpu/gcp:tpu/V2QueuedResourceTpu:V2QueuedResourceTpu7Defines a TPU resource.
Structure is documented below.
"h
zone" \The GCP location for the Queued Resource. If it is not provided, the provider zone is used.
*Э╒

tpuV2Vmgcp:tpu/v2Vm:V2VmЪЪ## Example Usage

### Tpu V2 Vm Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const available = gcp.tpu.getV2RuntimeVersions({});
const tpu = new gcp.tpu.V2Vm("tpu", {
    name: "test-tpu",
    zone: "us-central1-c",
    runtimeVersion: "tpu-vm-tf-2.13.0",
});
```
```python
import pulumi
import pulumi_gcp as gcp

available = gcp.tpu.get_v2_runtime_versions()
tpu = gcp.tpu.V2Vm("tpu",
    name="test-tpu",
    zone="us-central1-c",
    runtime_version="tpu-vm-tf-2.13.0")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.Tpu.GetV2RuntimeVersions.Invoke();

    var tpu = new Gcp.Tpu.V2Vm("tpu", new()
    {
        Name = "test-tpu",
        Zone = "us-central1-c",
        RuntimeVersion = "tpu-vm-tf-2.13.0",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tpu.GetV2RuntimeVersions(ctx, &tpu.GetV2RuntimeVersionsArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = tpu.NewV2Vm(ctx, "tpu", &tpu.V2VmArgs{
			Name:           pulumi.String("test-tpu"),
			Zone:           pulumi.String("us-central1-c"),
			RuntimeVersion: pulumi.String("tpu-vm-tf-2.13.0"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tpu.TpuFunctions;
import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
import com.pulumi.gcp.tpu.V2Vm;
import com.pulumi.gcp.tpu.V2VmArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = TpuFunctions.getV2RuntimeVersions();

        var tpu = new V2Vm("tpu", V2VmArgs.builder()
            .name("test-tpu")
            .zone("us-central1-c")
            .runtimeVersion("tpu-vm-tf-2.13.0")
            .build());

    }
}
```
```yaml
resources:
  tpu:
    type: gcp:tpu:V2Vm
    properties:
      name: test-tpu
      zone: us-central1-c
      runtimeVersion: tpu-vm-tf-2.13.0
variables:
  available:
    fn::invoke:
      function: gcp:tpu:getV2RuntimeVersions
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Tpu V2 Vm Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as time from "@pulumi/time";

const available = gcp.tpu.getV2RuntimeVersions({});
const availableGetV2AcceleratorTypes = gcp.tpu.getV2AcceleratorTypes({});
const network = new gcp.compute.Network("network", {
    name: "tpu-net",
    autoCreateSubnetworks: false,
});
const subnet = new gcp.compute.Subnetwork("subnet", {
    name: "tpu-subnet",
    ipCidrRange: "10.0.0.0/16",
    region: "us-central1",
    network: network.id,
});
const sa = new gcp.serviceaccount.Account("sa", {
    accountId: "tpu-sa",
    displayName: "Test TPU VM",
});
const disk = new gcp.compute.Disk("disk", {
    name: "tpu-disk",
    image: "debian-cloud/debian-11",
    size: 10,
    type: "pd-ssd",
    zone: "us-central1-c",
});
// Wait after service account creation to limit eventual consistency errors.
const wait60Seconds = new time.index.Sleep("wait_60_seconds", {createDuration: "60s"}, {
    dependsOn: [sa],
});
const tpu = new gcp.tpu.V2Vm("tpu", {
    name: "test-tpu",
    zone: "us-central1-c",
    description: "Text description of the TPU.",
    runtimeVersion: "tpu-vm-tf-2.13.0",
    acceleratorConfig: {
        type: "V2",
        topology: "2x2",
    },
    cidrBlock: "10.0.0.0/29",
    networkConfig: {
        canIpForward: true,
        enableExternalIps: true,
        network: network.id,
        subnetwork: subnet.id,
        queueCount: 32,
    },
    schedulingConfig: {
        preemptible: true,
    },
    shieldedInstanceConfig: {
        enableSecureBoot: true,
    },
    serviceAccount: {
        email: sa.email,
        scopes: ["https://www.googleapis.com/auth/cloud-platform"],
    },
    dataDisks: [{
        sourceDisk: disk.id,
        mode: "READ_ONLY",
    }],
    labels: {
        foo: "bar",
    },
    metadata: {
        foo: "bar",
    },
    tags: ["foo"],
}, {
    dependsOn: [wait60Seconds],
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_time as time

available = gcp.tpu.get_v2_runtime_versions()
available_get_v2_accelerator_types = gcp.tpu.get_v2_accelerator_types()
network = gcp.compute.Network("network",
    name="tpu-net",
    auto_create_subnetworks=False)
subnet = gcp.compute.Subnetwork("subnet",
    name="tpu-subnet",
    ip_cidr_range="10.0.0.0/16",
    region="us-central1",
    network=network.id)
sa = gcp.serviceaccount.Account("sa",
    account_id="tpu-sa",
    display_name="Test TPU VM")
disk = gcp.compute.Disk("disk",
    name="tpu-disk",
    image="debian-cloud/debian-11",
    size=10,
    type="pd-ssd",
    zone="us-central1-c")
# Wait after service account creation to limit eventual consistency errors.
wait60_seconds = time.index.Sleep("wait_60_seconds", create_duration=60s,
opts = pulumi.ResourceOptions(depends_on=[sa]))
tpu = gcp.tpu.V2Vm("tpu",
    name="test-tpu",
    zone="us-central1-c",
    description="Text description of the TPU.",
    runtime_version="tpu-vm-tf-2.13.0",
    accelerator_config={
        "type": "V2",
        "topology": "2x2",
    },
    cidr_block="10.0.0.0/29",
    network_config={
        "can_ip_forward": True,
        "enable_external_ips": True,
        "network": network.id,
        "subnetwork": subnet.id,
        "queue_count": 32,
    },
    scheduling_config={
        "preemptible": True,
    },
    shielded_instance_config={
        "enable_secure_boot": True,
    },
    service_account={
        "email": sa.email,
        "scopes": ["https://www.googleapis.com/auth/cloud-platform"],
    },
    data_disks=[{
        "source_disk": disk.id,
        "mode": "READ_ONLY",
    }],
    labels={
        "foo": "bar",
    },
    metadata={
        "foo": "bar",
    },
    tags=["foo"],
    opts = pulumi.ResourceOptions(depends_on=[wait60_seconds]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Time = Pulumi.Time;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.Tpu.GetV2RuntimeVersions.Invoke();

    var availableGetV2AcceleratorTypes = Gcp.Tpu.GetV2AcceleratorTypes.Invoke();

    var network = new Gcp.Compute.Network("network", new()
    {
        Name = "tpu-net",
        AutoCreateSubnetworks = false,
    });

    var subnet = new Gcp.Compute.Subnetwork("subnet", new()
    {
        Name = "tpu-subnet",
        IpCidrRange = "10.0.0.0/16",
        Region = "us-central1",
        Network = network.Id,
    });

    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "tpu-sa",
        DisplayName = "Test TPU VM",
    });

    var disk = new Gcp.Compute.Disk("disk", new()
    {
        Name = "tpu-disk",
        Image = "debian-cloud/debian-11",
        Size = 10,
        Type = "pd-ssd",
        Zone = "us-central1-c",
    });

    // Wait after service account creation to limit eventual consistency errors.
    var wait60Seconds = new Time.Index.Sleep("wait_60_seconds", new()
    {
        CreateDuration = "60s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            sa,
        },
    });

    var tpu = new Gcp.Tpu.V2Vm("tpu", new()
    {
        Name = "test-tpu",
        Zone = "us-central1-c",
        Description = "Text description of the TPU.",
        RuntimeVersion = "tpu-vm-tf-2.13.0",
        AcceleratorConfig = new Gcp.Tpu.Inputs.V2VmAcceleratorConfigArgs
        {
            Type = "V2",
            Topology = "2x2",
        },
        CidrBlock = "10.0.0.0/29",
        NetworkConfig = new Gcp.Tpu.Inputs.V2VmNetworkConfigArgs
        {
            CanIpForward = true,
            EnableExternalIps = true,
            Network = network.Id,
            Subnetwork = subnet.Id,
            QueueCount = 32,
        },
        SchedulingConfig = new Gcp.Tpu.Inputs.V2VmSchedulingConfigArgs
        {
            Preemptible = true,
        },
        ShieldedInstanceConfig = new Gcp.Tpu.Inputs.V2VmShieldedInstanceConfigArgs
        {
            EnableSecureBoot = true,
        },
        ServiceAccount = new Gcp.Tpu.Inputs.V2VmServiceAccountArgs
        {
            Email = sa.Email,
            Scopes = new[]
            {
                "https://www.googleapis.com/auth/cloud-platform",
            },
        },
        DataDisks = new[]
        {
            new Gcp.Tpu.Inputs.V2VmDataDiskArgs
            {
                SourceDisk = disk.Id,
                Mode = "READ_ONLY",
            },
        },
        Labels = 
        {
            { "foo", "bar" },
        },
        Metadata = 
        {
            { "foo", "bar" },
        },
        Tags = new[]
        {
            "foo",
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            wait60Seconds,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
	"github.com/pulumi/pulumi-time/sdk/go/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tpu.GetV2RuntimeVersions(ctx, &tpu.GetV2RuntimeVersionsArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = tpu.GetV2AcceleratorTypes(ctx, &tpu.GetV2AcceleratorTypesArgs{}, nil)
		if err != nil {
			return err
		}
		network, err := compute.NewNetwork(ctx, "network", &compute.NetworkArgs{
			Name:                  pulumi.String("tpu-net"),
			AutoCreateSubnetworks: pulumi.Bool(false),
		})
		if err != nil {
			return err
		}
		subnet, err := compute.NewSubnetwork(ctx, "subnet", &compute.SubnetworkArgs{
			Name:        pulumi.String("tpu-subnet"),
			IpCidrRange: pulumi.String("10.0.0.0/16"),
			Region:      pulumi.String("us-central1"),
			Network:     network.ID(),
		})
		if err != nil {
			return err
		}
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId:   pulumi.String("tpu-sa"),
			DisplayName: pulumi.String("Test TPU VM"),
		})
		if err != nil {
			return err
		}
		disk, err := compute.NewDisk(ctx, "disk", &compute.DiskArgs{
			Name:  pulumi.String("tpu-disk"),
			Image: pulumi.String("debian-cloud/debian-11"),
			Size:  pulumi.Int(10),
			Type:  pulumi.String("pd-ssd"),
			Zone:  pulumi.String("us-central1-c"),
		})
		if err != nil {
			return err
		}
		// Wait after service account creation to limit eventual consistency errors.
		wait60Seconds, err := time.NewSleep(ctx, "wait_60_seconds", &time.SleepArgs{
			CreateDuration: "60s",
		}, pulumi.DependsOn([]pulumi.Resource{
			sa,
		}))
		if err != nil {
			return err
		}
		_, err = tpu.NewV2Vm(ctx, "tpu", &tpu.V2VmArgs{
			Name:           pulumi.String("test-tpu"),
			Zone:           pulumi.String("us-central1-c"),
			Description:    pulumi.String("Text description of the TPU."),
			RuntimeVersion: pulumi.String("tpu-vm-tf-2.13.0"),
			AcceleratorConfig: &tpu.V2VmAcceleratorConfigArgs{
				Type:     pulumi.String("V2"),
				Topology: pulumi.String("2x2"),
			},
			CidrBlock: pulumi.String("10.0.0.0/29"),
			NetworkConfig: &tpu.V2VmNetworkConfigArgs{
				CanIpForward:      pulumi.Bool(true),
				EnableExternalIps: pulumi.Bool(true),
				Network:           network.ID(),
				Subnetwork:        subnet.ID(),
				QueueCount:        pulumi.Int(32),
			},
			SchedulingConfig: &tpu.V2VmSchedulingConfigArgs{
				Preemptible: pulumi.Bool(true),
			},
			ShieldedInstanceConfig: &tpu.V2VmShieldedInstanceConfigArgs{
				EnableSecureBoot: pulumi.Bool(true),
			},
			ServiceAccount: &tpu.V2VmServiceAccountArgs{
				Email: sa.Email,
				Scopes: pulumi.StringArray{
					pulumi.String("https://www.googleapis.com/auth/cloud-platform"),
				},
			},
			DataDisks: tpu.V2VmDataDiskArray{
				&tpu.V2VmDataDiskArgs{
					SourceDisk: disk.ID(),
					Mode:       pulumi.String("READ_ONLY"),
				},
			},
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Metadata: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Tags: pulumi.StringArray{
				pulumi.String("foo"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			wait60Seconds,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tpu.TpuFunctions;
import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.Subnetwork;
import com.pulumi.gcp.compute.SubnetworkArgs;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.compute.Disk;
import com.pulumi.gcp.compute.DiskArgs;
import com.pulumi.time.sleep;
import com.pulumi.time.SleepArgs;
import com.pulumi.gcp.tpu.V2Vm;
import com.pulumi.gcp.tpu.V2VmArgs;
import com.pulumi.gcp.tpu.inputs.V2VmAcceleratorConfigArgs;
import com.pulumi.gcp.tpu.inputs.V2VmNetworkConfigArgs;
import com.pulumi.gcp.tpu.inputs.V2VmSchedulingConfigArgs;
import com.pulumi.gcp.tpu.inputs.V2VmShieldedInstanceConfigArgs;
import com.pulumi.gcp.tpu.inputs.V2VmServiceAccountArgs;
import com.pulumi.gcp.tpu.inputs.V2VmDataDiskArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = TpuFunctions.getV2RuntimeVersions();

        final var availableGetV2AcceleratorTypes = TpuFunctions.getV2AcceleratorTypes();

        var network = new Network("network", NetworkArgs.builder()
            .name("tpu-net")
            .autoCreateSubnetworks(false)
            .build());

        var subnet = new Subnetwork("subnet", SubnetworkArgs.builder()
            .name("tpu-subnet")
            .ipCidrRange("10.0.0.0/16")
            .region("us-central1")
            .network(network.id())
            .build());

        var sa = new Account("sa", AccountArgs.builder()
            .accountId("tpu-sa")
            .displayName("Test TPU VM")
            .build());

        var disk = new Disk("disk", DiskArgs.builder()
            .name("tpu-disk")
            .image("debian-cloud/debian-11")
            .size(10)
            .type("pd-ssd")
            .zone("us-central1-c")
            .build());

        // Wait after service account creation to limit eventual consistency errors.
        var wait60Seconds = new Sleep("wait60Seconds", SleepArgs.builder()
            .createDuration("60s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(sa)
                .build());

        var tpu = new V2Vm("tpu", V2VmArgs.builder()
            .name("test-tpu")
            .zone("us-central1-c")
            .description("Text description of the TPU.")
            .runtimeVersion("tpu-vm-tf-2.13.0")
            .acceleratorConfig(V2VmAcceleratorConfigArgs.builder()
                .type("V2")
                .topology("2x2")
                .build())
            .cidrBlock("10.0.0.0/29")
            .networkConfig(V2VmNetworkConfigArgs.builder()
                .canIpForward(true)
                .enableExternalIps(true)
                .network(network.id())
                .subnetwork(subnet.id())
                .queueCount(32)
                .build())
            .schedulingConfig(V2VmSchedulingConfigArgs.builder()
                .preemptible(true)
                .build())
            .shieldedInstanceConfig(V2VmShieldedInstanceConfigArgs.builder()
                .enableSecureBoot(true)
                .build())
            .serviceAccount(V2VmServiceAccountArgs.builder()
                .email(sa.email())
                .scopes("https://www.googleapis.com/auth/cloud-platform")
                .build())
            .dataDisks(V2VmDataDiskArgs.builder()
                .sourceDisk(disk.id())
                .mode("READ_ONLY")
                .build())
            .labels(Map.of("foo", "bar"))
            .metadata(Map.of("foo", "bar"))
            .tags("foo")
            .build(), CustomResourceOptions.builder()
                .dependsOn(wait60Seconds)
                .build());

    }
}
```
```yaml
resources:
  tpu:
    type: gcp:tpu:V2Vm
    properties:
      name: test-tpu
      zone: us-central1-c
      description: Text description of the TPU.
      runtimeVersion: tpu-vm-tf-2.13.0
      acceleratorConfig:
        type: V2
        topology: 2x2
      cidrBlock: 10.0.0.0/29
      networkConfig:
        canIpForward: true
        enableExternalIps: true
        network: ${network.id}
        subnetwork: ${subnet.id}
        queueCount: 32
      schedulingConfig:
        preemptible: true
      shieldedInstanceConfig:
        enableSecureBoot: true
      serviceAccount:
        email: ${sa.email}
        scopes:
          - https://www.googleapis.com/auth/cloud-platform
      dataDisks:
        - sourceDisk: ${disk.id}
          mode: READ_ONLY
      labels:
        foo: bar
      metadata:
        foo: bar
      tags:
        - foo
    options:
      dependsOn:
        - ${wait60Seconds}
  subnet:
    type: gcp:compute:Subnetwork
    properties:
      name: tpu-subnet
      ipCidrRange: 10.0.0.0/16
      region: us-central1
      network: ${network.id}
  network:
    type: gcp:compute:Network
    properties:
      name: tpu-net
      autoCreateSubnetworks: false
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: tpu-sa
      displayName: Test TPU VM
  disk:
    type: gcp:compute:Disk
    properties:
      name: tpu-disk
      image: debian-cloud/debian-11
      size: 10
      type: pd-ssd
      zone: us-central1-c
  # Wait after service account creation to limit eventual consistency errors.
  wait60Seconds:
    type: time:sleep
    name: wait_60_seconds
    properties:
      createDuration: 60s
    options:
      dependsOn:
        - ${sa}
variables:
  available:
    fn::invoke:
      function: gcp:tpu:getV2RuntimeVersions
      arguments: {}
  availableGetV2AcceleratorTypes:
    fn::invoke:
      function: gcp:tpu:getV2AcceleratorTypes
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Vm can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{zone}}/nodes/{{name}}`

* `{{project}}/{{zone}}/{{name}}`

* `{{zone}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Vm can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:tpu/v2Vm:V2Vm default projects/{{project}}/locations/{{zone}}/nodes/{{name}}
```

```sh
$ pulumi import gcp:tpu/v2Vm:V2Vm default {{project}}/{{zone}}/{{name}}
```

```sh
$ pulumi import gcp:tpu/v2Vm:V2Vm default {{zone}}/{{name}}
```

```sh
$ pulumi import gcp:tpu/v2Vm:V2Vm default {{name}}
```

┴
acceleratorConfigWBU:S
Q
tpuV2VmAcceleratorConfig3gcp:tpu/V2VmAcceleratorConfig:V2VmAcceleratorConfig╥The AccleratorConfig for the TPU Node. `accelerator_config` cannot be used at the same time
as `accelerator_type`. If neither is specified, `accelerator_type` defaults to 'v2-8'.
Structure is documented below.
╚
acceleratorTypeB" оTPU accelerator type for the TPU. `accelerator_type` cannot be used at the same time as
`accelerator_config`. If neither is specified, `accelerator_type` defaults to 'v2-8'.
Р
	cidrBlockB" №The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must
be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger
block would be wasteful (a node can only consume one IP address). Errors will occur if the
CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts
with any subnetworks in the user's provided network, or the provided network is peered with
another network that is using that CIDR block.
Ф
	dataDisks>B<*::8
6
tpuV2VmDataDisk!gcp:tpu/V2VmDataDisk:V2VmDataDiskGThe additional data disks for the Node.
Structure is documented below.
2
descriptionB" Text description of the TPU.
О
labelsB2" √Resource labels to represent user-provided metadata.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
j
metadataB2" VCustom metadata to apply to the TPU Node. Can set startup-script and shutdown-script.
-
nameB" The immutable name of the TPU.
ж
networkConfigKBI:G
E
tpuV2VmNetworkConfig+gcp:tpu/V2VmNetworkConfig:V2VmNetworkConfigHNetwork configurations for the TPU node.
Structure is documented below.
№
networkConfigsMBK*I:G
E
tpuV2VmNetworkConfig+gcp:tpu/V2VmNetworkConfig:V2VmNetworkConfigЪRepeated network configurations for the TPU node. This field is used to specify multiple
network configs for the TPU node.
Structure is documented below.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
;
runtimeVersion" %Runtime version for the TPU.


- - -
п
schedulingConfigTBR:P
N
tpuV2VmSchedulingConfig1gcp:tpu/V2VmSchedulingConfig:V2VmSchedulingConfigEThe scheduling options for this node.
Structure is documented below.
Ф
serviceAccountNBL:J
H
tpuV2VmServiceAccount-gcp:tpu/V2VmServiceAccount:V2VmServiceAccount▒The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is
specified, the default compute service account will be used.
Structure is documented below.
╝
shieldedInstanceConfigfBd:b
`
tpuV2VmShieldedInstanceConfig=gcp:tpu/V2VmShieldedInstanceConfig:V2VmShieldedInstanceConfig:Shielded Instance options.
Structure is documented below.
y
tagsB*" iTags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
^
zoneB" PThe GCP location for the TPU. If it is not provided, the provider zone is used.
"┐
acceleratorConfigU:S
Q
tpuV2VmAcceleratorConfig3gcp:tpu/V2VmAcceleratorConfig:V2VmAcceleratorConfig╥The AccleratorConfig for the TPU Node. `accelerator_config` cannot be used at the same time
as `accelerator_type`. If neither is specified, `accelerator_type` defaults to 'v2-8'.
Structure is documented below.
"╞
acceleratorType" оTPU accelerator type for the TPU. `accelerator_type` cannot be used at the same time as
`accelerator_config`. If neither is specified, `accelerator_type` defaults to 'v2-8'.
":

apiVersion" (The API version that created this Node.
"О
	cidrBlock" №The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must
be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger
block would be wasteful (a node can only consume one IP address). Errors will occur if the
CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts
with any subnetworks in the user's provided network, or the provided network is peered with
another network that is using that CIDR block.
"Ф
	dataDisks>B<*::8
6
tpuV2VmDataDisk!gcp:tpu/V2VmDataDisk:V2VmDataDiskGThe additional data disks for the Node.
Structure is documented below.
"2
descriptionB" Text description of the TPU.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"1
health" #The health status of the TPU node.
"q
healthDescription" XIf this field is populated, it contains a description of why the TPU Node is unhealthy.
"О
labelsB2" √Resource labels to represent user-provided metadata.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"j
metadataB2" VCustom metadata to apply to the TPU Node. Can set startup-script and shutdown-script.
"F
multisliceNode
 0Whether the Node belongs to a Multislice group.
"+
name" The immutable name of the TPU.
"д
networkConfigI:G
E
tpuV2VmNetworkConfig+gcp:tpu/V2VmNetworkConfig:V2VmNetworkConfigHNetwork configurations for the TPU node.
Structure is documented below.
"№
networkConfigsMBK*I:G
E
tpuV2VmNetworkConfig+gcp:tpu/V2VmNetworkConfig:V2VmNetworkConfigЪRepeated network configurations for the TPU node. This field is used to specify multiple
network configs for the TPU node.
Structure is documented below.
"п
networkEndpointsQ*O:M
K
tpuV2VmNetworkEndpoint/gcp:tpu/V2VmNetworkEndpoint:V2VmNetworkEndpoint╟The network endpoints where TPU workers can be accessed and sent work. It is recommended that
runtime clients of the node reach out to the 0th entry in this map first.
Structure is documented below.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"Y
queuedResource" CThe qualified name of the QueuedResource that requested this Node.
";
runtimeVersion" %Runtime version for the TPU.


- - -
"п
schedulingConfigTBR:P
N
tpuV2VmSchedulingConfig1gcp:tpu/V2VmSchedulingConfig:V2VmSchedulingConfigEThe scheduling options for this node.
Structure is documented below.
"Т
serviceAccountL:J
H
tpuV2VmServiceAccount-gcp:tpu/V2VmServiceAccount:V2VmServiceAccount▒The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is
specified, the default compute service account will be used.
Structure is documented below.
"╝
shieldedInstanceConfigfBd:b
`
tpuV2VmShieldedInstanceConfig=gcp:tpu/V2VmShieldedInstanceConfig:V2VmShieldedInstanceConfig:Shielded Instance options.
Structure is documented below.
"1
state" $The current state for the TPU Node.
"Ч
symptoms9*7:5
3
tpuV2VmSymptomgcp:tpu/V2VmSymptom:V2VmSymptomPThe Symptoms that have occurred to the TPU Node.
Structure is documented below.
"y
tagsB*" iTags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
"\
zone" PThe GCP location for the TPU. If it is not provided, the provider zone is used.
*·ы

)

transcoderJobgcp:transcoder/job:Jobю┌
Transcoding Job Resource


To get more information about Job, see:

* [API documentation](https://cloud.google.com/transcoder/docs/reference/rest/v1/projects.locations.jobs)
* How-to Guides
    * [Transcoder](https://cloud.google.com/transcoder/docs/)

## Example Usage

### Transcoder Job Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.storage.Bucket("default", {
    name: "transcoder-job",
    location: "US",
    forceDestroy: true,
    uniformBucketLevelAccess: true,
    publicAccessPrevention: "enforced",
});
const exampleMp4 = new gcp.storage.BucketObject("example_mp4", {
    name: "example.mp4",
    source: new pulumi.asset.FileAsset("./test-fixtures/example.mp4"),
    bucket: _default.name,
});
const defaultJobTemplate = new gcp.transcoder.JobTemplate("default", {
    jobTemplateId: "example-job-template",
    location: "us-central1",
    config: {
        inputs: [{
            key: "input0",
            uri: pulumi.interpolate`gs://${_default.name}/${exampleMp4.name}`,
        }],
        output: {
            uri: pulumi.interpolate`gs://${_default.name}/outputs/`,
        },
        editLists: [{
            key: "atom0",
            inputs: ["input0"],
            startTimeOffset: "0s",
        }],
        elementaryStreams: [
            {
                key: "video-stream0",
                videoStream: {
                    h264: {
                        widthPixels: 640,
                        heightPixels: 360,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 550000,
                        vbvFullnessBits: 495000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "video-stream1",
                videoStream: {
                    h264: {
                        widthPixels: 1280,
                        heightPixels: 720,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 2500000,
                        vbvFullnessBits: 2250000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "audio-stream0",
                audioStream: {
                    codec: "aac",
                    bitrateBps: 64000,
                    channelCount: 2,
                    channelLayouts: [
                        "fl",
                        "fr",
                    ],
                    sampleRateHertz: 48000,
                },
            },
        ],
        muxStreams: [
            {
                key: "sd",
                fileName: "sd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                key: "hd",
                fileName: "hd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
    },
    labels: {
        label: "key",
    },
});
const defaultJob = new gcp.transcoder.Job("default", {
    templateId: defaultJobTemplate.name,
    location: "us-central1",
    labels: {
        label: "key",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.storage.Bucket("default",
    name="transcoder-job",
    location="US",
    force_destroy=True,
    uniform_bucket_level_access=True,
    public_access_prevention="enforced")
example_mp4 = gcp.storage.BucketObject("example_mp4",
    name="example.mp4",
    source=pulumi.FileAsset("./test-fixtures/example.mp4"),
    bucket=default.name)
default_job_template = gcp.transcoder.JobTemplate("default",
    job_template_id="example-job-template",
    location="us-central1",
    config={
        "inputs": [{
            "key": "input0",
            "uri": pulumi.Output.all(
                defaultName=default.name,
                exampleMp4Name=example_mp4.name
).apply(lambda resolved_outputs: f"gs://{resolved_outputs['defaultName']}/{resolved_outputs['exampleMp4Name']}")
,
        }],
        "output": {
            "uri": default.name.apply(lambda name: f"gs://{name}/outputs/"),
        },
        "edit_lists": [{
            "key": "atom0",
            "inputs": ["input0"],
            "start_time_offset": "0s",
        }],
        "elementary_streams": [
            {
                "key": "video-stream0",
                "video_stream": {
                    "h264": {
                        "width_pixels": 640,
                        "height_pixels": 360,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 550000,
                        "vbv_fullness_bits": 495000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "video-stream1",
                "video_stream": {
                    "h264": {
                        "width_pixels": 1280,
                        "height_pixels": 720,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 2500000,
                        "vbv_fullness_bits": 2250000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "audio-stream0",
                "audio_stream": {
                    "codec": "aac",
                    "bitrate_bps": 64000,
                    "channel_count": 2,
                    "channel_layouts": [
                        "fl",
                        "fr",
                    ],
                    "sample_rate_hertz": 48000,
                },
            },
        ],
        "mux_streams": [
            {
                "key": "sd",
                "file_name": "sd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                "key": "hd",
                "file_name": "hd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
    },
    labels={
        "label": "key",
    })
default_job = gcp.transcoder.Job("default",
    template_id=default_job_template.name,
    location="us-central1",
    labels={
        "label": "key",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.Storage.Bucket("default", new()
    {
        Name = "transcoder-job",
        Location = "US",
        ForceDestroy = true,
        UniformBucketLevelAccess = true,
        PublicAccessPrevention = "enforced",
    });

    var exampleMp4 = new Gcp.Storage.BucketObject("example_mp4", new()
    {
        Name = "example.mp4",
        Source = new FileAsset("./test-fixtures/example.mp4"),
        Bucket = @default.Name,
    });

    var defaultJobTemplate = new Gcp.Transcoder.JobTemplate("default", new()
    {
        JobTemplateId = "example-job-template",
        Location = "us-central1",
        Config = new Gcp.Transcoder.Inputs.JobTemplateConfigArgs
        {
            Inputs = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigInputArgs
                {
                    Key = "input0",
                    Uri = Output.Tuple(@default.Name, exampleMp4.Name).Apply(values =>
                    {
                        var defaultName = values.Item1;
                        var exampleMp4Name = values.Item2;
                        return $"gs://{defaultName}/{exampleMp4Name}";
                    }),
                },
            },
            Output = new Gcp.Transcoder.Inputs.JobTemplateConfigOutputArgs
            {
                Uri = @default.Name.Apply(name => $"gs://{name}/outputs/"),
            },
            EditLists = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigEditListArgs
                {
                    Key = "atom0",
                    Inputs = new[]
                    {
                        "input0",
                    },
                    StartTimeOffset = "0s",
                },
            },
            ElementaryStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "video-stream0",
                    VideoStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 640,
                            HeightPixels = 360,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 550000,
                            VbvFullnessBits = 495000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "video-stream1",
                    VideoStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 1280,
                            HeightPixels = 720,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 2500000,
                            VbvFullnessBits = 2250000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "audio-stream0",
                    AudioStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamAudioStreamArgs
                    {
                        Codec = "aac",
                        BitrateBps = 64000,
                        ChannelCount = 2,
                        ChannelLayouts = new[]
                        {
                            "fl",
                            "fr",
                        },
                        SampleRateHertz = 48000,
                    },
                },
            },
            MuxStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "sd",
                    FileName = "sd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream0",
                        "audio-stream0",
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "hd",
                    FileName = "hd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream1",
                        "audio-stream0",
                    },
                },
            },
        },
        Labels = 
        {
            { "label", "key" },
        },
    });

    var defaultJob = new Gcp.Transcoder.Job("default", new()
    {
        TemplateId = defaultJobTemplate.Name,
        Location = "us-central1",
        Labels = 
        {
            { "label", "key" },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "default", &storage.BucketArgs{
			Name:                     pulumi.String("transcoder-job"),
			Location:                 pulumi.String("US"),
			ForceDestroy:             pulumi.Bool(true),
			UniformBucketLevelAccess: pulumi.Bool(true),
			PublicAccessPrevention:   pulumi.String("enforced"),
		})
		if err != nil {
			return err
		}
		exampleMp4, err := storage.NewBucketObject(ctx, "example_mp4", &storage.BucketObjectArgs{
			Name:   pulumi.String("example.mp4"),
			Source: pulumi.NewFileAsset("./test-fixtures/example.mp4"),
			Bucket: _default.Name,
		})
		if err != nil {
			return err
		}
		defaultJobTemplate, err := transcoder.NewJobTemplate(ctx, "default", &transcoder.JobTemplateArgs{
			JobTemplateId: pulumi.String("example-job-template"),
			Location:      pulumi.String("us-central1"),
			Config: &transcoder.JobTemplateConfigArgs{
				Inputs: transcoder.JobTemplateConfigInputTypeArray{
					&transcoder.JobTemplateConfigInputTypeArgs{
						Key: pulumi.String("input0"),
						Uri: pulumi.All(_default.Name, exampleMp4.Name).ApplyT(func(_args []interface{}) (string, error) {
							defaultName := _args[0].(string)
							exampleMp4Name := _args[1].(string)
							return fmt.Sprintf("gs://%v/%v", defaultName, exampleMp4Name), nil
						}).(pulumi.StringOutput),
					},
				},
				Output: &transcoder.JobTemplateConfigOutputTypeArgs{
					Uri: _default.Name.ApplyT(func(name string) (string, error) {
						return fmt.Sprintf("gs://%v/outputs/", name), nil
					}).(pulumi.StringOutput),
				},
				EditLists: transcoder.JobTemplateConfigEditListArray{
					&transcoder.JobTemplateConfigEditListArgs{
						Key: pulumi.String("atom0"),
						Inputs: pulumi.StringArray{
							pulumi.String("input0"),
						},
						StartTimeOffset: pulumi.String("0s"),
					},
				},
				ElementaryStreams: transcoder.JobTemplateConfigElementaryStreamArray{
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream0"),
						VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(640),
								HeightPixels:    pulumi.Int(360),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(550000),
								VbvFullnessBits: pulumi.Int(495000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream1"),
						VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(1280),
								HeightPixels:    pulumi.Int(720),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(2500000),
								VbvFullnessBits: pulumi.Int(2250000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("audio-stream0"),
						AudioStream: &transcoder.JobTemplateConfigElementaryStreamAudioStreamArgs{
							Codec:        pulumi.String("aac"),
							BitrateBps:   pulumi.Int(64000),
							ChannelCount: pulumi.Int(2),
							ChannelLayouts: pulumi.StringArray{
								pulumi.String("fl"),
								pulumi.String("fr"),
							},
							SampleRateHertz: pulumi.Int(48000),
						},
					},
				},
				MuxStreams: transcoder.JobTemplateConfigMuxStreamArray{
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("sd"),
						FileName:  pulumi.String("sd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream0"),
							pulumi.String("audio-stream0"),
						},
					},
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("hd"),
						FileName:  pulumi.String("hd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream1"),
							pulumi.String("audio-stream0"),
						},
					},
				},
			},
			Labels: pulumi.StringMap{
				"label": pulumi.String("key"),
			},
		})
		if err != nil {
			return err
		}
		_, err = transcoder.NewJob(ctx, "default", &transcoder.JobArgs{
			TemplateId: defaultJobTemplate.Name,
			Location:   pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label": pulumi.String("key"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.transcoder.JobTemplate;
import com.pulumi.gcp.transcoder.JobTemplateArgs;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigArgs;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigOutputArgs;
import com.pulumi.gcp.transcoder.Job;
import com.pulumi.gcp.transcoder.JobArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Bucket("default", BucketArgs.builder()
            .name("transcoder-job")
            .location("US")
            .forceDestroy(true)
            .uniformBucketLevelAccess(true)
            .publicAccessPrevention("enforced")
            .build());

        var exampleMp4 = new BucketObject("exampleMp4", BucketObjectArgs.builder()
            .name("example.mp4")
            .source(new FileAsset("./test-fixtures/example.mp4"))
            .bucket(default_.name())
            .build());

        var defaultJobTemplate = new JobTemplate("defaultJobTemplate", JobTemplateArgs.builder()
            .jobTemplateId("example-job-template")
            .location("us-central1")
            .config(JobTemplateConfigArgs.builder()
                .inputs(JobTemplateConfigInputArgs.builder()
                    .key("input0")
                    .uri(Output.tuple(default_.name(), exampleMp4.name()).applyValue(values -> {
                        var defaultName = values.t1;
                        var exampleMp4Name = values.t2;
                        return String.format("gs://%s/%s", defaultName,exampleMp4Name);
                    }))
                    .build())
                .output(JobTemplateConfigOutputArgs.builder()
                    .uri(default_.name().applyValue(name -> String.format("gs://%s/outputs/", name)))
                    .build())
                .editLists(JobTemplateConfigEditListArgs.builder()
                    .key("atom0")
                    .inputs("input0")
                    .startTimeOffset("0s")
                    .build())
                .elementaryStreams(                
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("video-stream0")
                        .videoStream(JobTemplateConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobTemplateConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(640)
                                .heightPixels(360)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(550000)
                                .vbvFullnessBits(495000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("video-stream1")
                        .videoStream(JobTemplateConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobTemplateConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(1280)
                                .heightPixels(720)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(2500000)
                                .vbvFullnessBits(2250000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("audio-stream0")
                        .audioStream(JobTemplateConfigElementaryStreamAudioStreamArgs.builder()
                            .codec("aac")
                            .bitrateBps(64000)
                            .channelCount(2)
                            .channelLayouts(                            
                                "fl",
                                "fr")
                            .sampleRateHertz(48000)
                            .build())
                        .build())
                .muxStreams(                
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("sd")
                        .fileName("sd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream0",
                            "audio-stream0")
                        .build(),
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("hd")
                        .fileName("hd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream1",
                            "audio-stream0")
                        .build())
                .build())
            .labels(Map.of("label", "key"))
            .build());

        var defaultJob = new Job("defaultJob", JobArgs.builder()
            .templateId(defaultJobTemplate.name())
            .location("us-central1")
            .labels(Map.of("label", "key"))
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:storage:Bucket
    properties:
      name: transcoder-job
      location: US
      forceDestroy: true
      uniformBucketLevelAccess: true
      publicAccessPrevention: enforced
  exampleMp4:
    type: gcp:storage:BucketObject
    name: example_mp4
    properties:
      name: example.mp4
      source:
        fn::FileAsset: ./test-fixtures/example.mp4
      bucket: ${default.name}
  defaultJob:
    type: gcp:transcoder:Job
    name: default
    properties:
      templateId: ${defaultJobTemplate.name}
      location: us-central1
      labels:
        label: key
  defaultJobTemplate:
    type: gcp:transcoder:JobTemplate
    name: default
    properties:
      jobTemplateId: example-job-template
      location: us-central1
      config:
        inputs:
          - key: input0
            uri: gs://${default.name}/${exampleMp4.name}
        output:
          uri: gs://${default.name}/outputs/
        editLists:
          - key: atom0
            inputs:
              - input0
            startTimeOffset: 0s
        elementaryStreams:
          - key: video-stream0
            videoStream:
              h264:
                widthPixels: 640
                heightPixels: 360
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 550000
                vbvFullnessBits: 495000
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: video-stream1
            videoStream:
              h264:
                widthPixels: 1280
                heightPixels: 720
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 2.5e+06
                vbvFullnessBits: 2.25e+06
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: audio-stream0
            audioStream:
              codec: aac
              bitrateBps: 64000
              channelCount: 2
              channelLayouts:
                - fl
                - fr
              sampleRateHertz: 48000
        muxStreams:
          - key: sd
            fileName: sd.mp4
            container: mp4
            elementaryStreams:
              - video-stream0
              - audio-stream0
          - key: hd
            fileName: hd.mp4
            container: mp4
            elementaryStreams:
              - video-stream1
              - audio-stream0
      labels:
        label: key
```
<!--End PulumiCodeChooser -->
### Transcoder Job Pubsub


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.storage.Bucket("default", {
    name: "transcoder-job",
    location: "US",
    forceDestroy: true,
    uniformBucketLevelAccess: true,
    publicAccessPrevention: "enforced",
});
const exampleMp4 = new gcp.storage.BucketObject("example_mp4", {
    name: "example.mp4",
    source: new pulumi.asset.FileAsset("./test-fixtures/example.mp4"),
    bucket: _default.name,
});
const transcoderNotifications = new gcp.pubsub.Topic("transcoder_notifications", {name: "transcoder-notifications"});
const defaultJob = new gcp.transcoder.Job("default", {
    location: "us-central1",
    config: {
        inputs: [{
            key: "input0",
            uri: pulumi.interpolate`gs://${_default.name}/${exampleMp4.name}`,
        }],
        editLists: [{
            key: "atom0",
            inputs: ["input0"],
            startTimeOffset: "0s",
        }],
        adBreaks: [{
            startTimeOffset: "3.500s",
        }],
        elementaryStreams: [
            {
                key: "video-stream0",
                videoStream: {
                    h264: {
                        widthPixels: 640,
                        heightPixels: 360,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 550000,
                        vbvFullnessBits: 495000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "video-stream1",
                videoStream: {
                    h264: {
                        widthPixels: 1280,
                        heightPixels: 720,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 2500000,
                        vbvFullnessBits: 2250000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "audio-stream0",
                audioStream: {
                    codec: "aac",
                    bitrateBps: 64000,
                    channelCount: 2,
                    channelLayouts: [
                        "fl",
                        "fr",
                    ],
                    sampleRateHertz: 48000,
                },
            },
        ],
        muxStreams: [
            {
                key: "sd",
                fileName: "sd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                key: "hd",
                fileName: "hd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
        pubsubDestination: {
            topic: transcoderNotifications.id,
        },
        output: {
            uri: pulumi.interpolate`gs://${_default.name}/outputs/`,
        },
    },
    labels: {
        label: "key",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.storage.Bucket("default",
    name="transcoder-job",
    location="US",
    force_destroy=True,
    uniform_bucket_level_access=True,
    public_access_prevention="enforced")
example_mp4 = gcp.storage.BucketObject("example_mp4",
    name="example.mp4",
    source=pulumi.FileAsset("./test-fixtures/example.mp4"),
    bucket=default.name)
transcoder_notifications = gcp.pubsub.Topic("transcoder_notifications", name="transcoder-notifications")
default_job = gcp.transcoder.Job("default",
    location="us-central1",
    config={
        "inputs": [{
            "key": "input0",
            "uri": pulumi.Output.all(
                defaultName=default.name,
                exampleMp4Name=example_mp4.name
).apply(lambda resolved_outputs: f"gs://{resolved_outputs['defaultName']}/{resolved_outputs['exampleMp4Name']}")
,
        }],
        "edit_lists": [{
            "key": "atom0",
            "inputs": ["input0"],
            "start_time_offset": "0s",
        }],
        "ad_breaks": [{
            "start_time_offset": "3.500s",
        }],
        "elementary_streams": [
            {
                "key": "video-stream0",
                "video_stream": {
                    "h264": {
                        "width_pixels": 640,
                        "height_pixels": 360,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 550000,
                        "vbv_fullness_bits": 495000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "video-stream1",
                "video_stream": {
                    "h264": {
                        "width_pixels": 1280,
                        "height_pixels": 720,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 2500000,
                        "vbv_fullness_bits": 2250000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "audio-stream0",
                "audio_stream": {
                    "codec": "aac",
                    "bitrate_bps": 64000,
                    "channel_count": 2,
                    "channel_layouts": [
                        "fl",
                        "fr",
                    ],
                    "sample_rate_hertz": 48000,
                },
            },
        ],
        "mux_streams": [
            {
                "key": "sd",
                "file_name": "sd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                "key": "hd",
                "file_name": "hd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
        "pubsub_destination": {
            "topic": transcoder_notifications.id,
        },
        "output": {
            "uri": default.name.apply(lambda name: f"gs://{name}/outputs/"),
        },
    },
    labels={
        "label": "key",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.Storage.Bucket("default", new()
    {
        Name = "transcoder-job",
        Location = "US",
        ForceDestroy = true,
        UniformBucketLevelAccess = true,
        PublicAccessPrevention = "enforced",
    });

    var exampleMp4 = new Gcp.Storage.BucketObject("example_mp4", new()
    {
        Name = "example.mp4",
        Source = new FileAsset("./test-fixtures/example.mp4"),
        Bucket = @default.Name,
    });

    var transcoderNotifications = new Gcp.PubSub.Topic("transcoder_notifications", new()
    {
        Name = "transcoder-notifications",
    });

    var defaultJob = new Gcp.Transcoder.Job("default", new()
    {
        Location = "us-central1",
        Config = new Gcp.Transcoder.Inputs.JobConfigArgs
        {
            Inputs = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigInputArgs
                {
                    Key = "input0",
                    Uri = Output.Tuple(@default.Name, exampleMp4.Name).Apply(values =>
                    {
                        var defaultName = values.Item1;
                        var exampleMp4Name = values.Item2;
                        return $"gs://{defaultName}/{exampleMp4Name}";
                    }),
                },
            },
            EditLists = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigEditListArgs
                {
                    Key = "atom0",
                    Inputs = new[]
                    {
                        "input0",
                    },
                    StartTimeOffset = "0s",
                },
            },
            AdBreaks = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigAdBreakArgs
                {
                    StartTimeOffset = "3.500s",
                },
            },
            ElementaryStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
                {
                    Key = "video-stream0",
                    VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 640,
                            HeightPixels = 360,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 550000,
                            VbvFullnessBits = 495000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
                {
                    Key = "video-stream1",
                    VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 1280,
                            HeightPixels = 720,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 2500000,
                            VbvFullnessBits = 2250000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
                {
                    Key = "audio-stream0",
                    AudioStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamAudioStreamArgs
                    {
                        Codec = "aac",
                        BitrateBps = 64000,
                        ChannelCount = 2,
                        ChannelLayouts = new[]
                        {
                            "fl",
                            "fr",
                        },
                        SampleRateHertz = 48000,
                    },
                },
            },
            MuxStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "sd",
                    FileName = "sd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream0",
                        "audio-stream0",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "hd",
                    FileName = "hd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream1",
                        "audio-stream0",
                    },
                },
            },
            PubsubDestination = new Gcp.Transcoder.Inputs.JobConfigPubsubDestinationArgs
            {
                Topic = transcoderNotifications.Id,
            },
            Output = new Gcp.Transcoder.Inputs.JobConfigOutputArgs
            {
                Uri = @default.Name.Apply(name => $"gs://{name}/outputs/"),
            },
        },
        Labels = 
        {
            { "label", "key" },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "default", &storage.BucketArgs{
			Name:                     pulumi.String("transcoder-job"),
			Location:                 pulumi.String("US"),
			ForceDestroy:             pulumi.Bool(true),
			UniformBucketLevelAccess: pulumi.Bool(true),
			PublicAccessPrevention:   pulumi.String("enforced"),
		})
		if err != nil {
			return err
		}
		exampleMp4, err := storage.NewBucketObject(ctx, "example_mp4", &storage.BucketObjectArgs{
			Name:   pulumi.String("example.mp4"),
			Source: pulumi.NewFileAsset("./test-fixtures/example.mp4"),
			Bucket: _default.Name,
		})
		if err != nil {
			return err
		}
		transcoderNotifications, err := pubsub.NewTopic(ctx, "transcoder_notifications", &pubsub.TopicArgs{
			Name: pulumi.String("transcoder-notifications"),
		})
		if err != nil {
			return err
		}
		_, err = transcoder.NewJob(ctx, "default", &transcoder.JobArgs{
			Location: pulumi.String("us-central1"),
			Config: &transcoder.JobConfigArgs{
				Inputs: transcoder.JobConfigInputTypeArray{
					&transcoder.JobConfigInputTypeArgs{
						Key: pulumi.String("input0"),
						Uri: pulumi.All(_default.Name, exampleMp4.Name).ApplyT(func(_args []interface{}) (string, error) {
							defaultName := _args[0].(string)
							exampleMp4Name := _args[1].(string)
							return fmt.Sprintf("gs://%v/%v", defaultName, exampleMp4Name), nil
						}).(pulumi.StringOutput),
					},
				},
				EditLists: transcoder.JobConfigEditListArray{
					&transcoder.JobConfigEditListArgs{
						Key: pulumi.String("atom0"),
						Inputs: pulumi.StringArray{
							pulumi.String("input0"),
						},
						StartTimeOffset: pulumi.String("0s"),
					},
				},
				AdBreaks: transcoder.JobConfigAdBreakArray{
					&transcoder.JobConfigAdBreakArgs{
						StartTimeOffset: pulumi.String("3.500s"),
					},
				},
				ElementaryStreams: transcoder.JobConfigElementaryStreamArray{
					&transcoder.JobConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream0"),
						VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(640),
								HeightPixels:    pulumi.Int(360),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(550000),
								VbvFullnessBits: pulumi.Int(495000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream1"),
						VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(1280),
								HeightPixels:    pulumi.Int(720),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(2500000),
								VbvFullnessBits: pulumi.Int(2250000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobConfigElementaryStreamArgs{
						Key: pulumi.String("audio-stream0"),
						AudioStream: &transcoder.JobConfigElementaryStreamAudioStreamArgs{
							Codec:        pulumi.String("aac"),
							BitrateBps:   pulumi.Int(64000),
							ChannelCount: pulumi.Int(2),
							ChannelLayouts: pulumi.StringArray{
								pulumi.String("fl"),
								pulumi.String("fr"),
							},
							SampleRateHertz: pulumi.Int(48000),
						},
					},
				},
				MuxStreams: transcoder.JobConfigMuxStreamArray{
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("sd"),
						FileName:  pulumi.String("sd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream0"),
							pulumi.String("audio-stream0"),
						},
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("hd"),
						FileName:  pulumi.String("hd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream1"),
							pulumi.String("audio-stream0"),
						},
					},
				},
				PubsubDestination: &transcoder.JobConfigPubsubDestinationArgs{
					Topic: transcoderNotifications.ID(),
				},
				Output: &transcoder.JobConfigOutputTypeArgs{
					Uri: _default.Name.ApplyT(func(name string) (string, error) {
						return fmt.Sprintf("gs://%v/outputs/", name), nil
					}).(pulumi.StringOutput),
				},
			},
			Labels: pulumi.StringMap{
				"label": pulumi.String("key"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.transcoder.Job;
import com.pulumi.gcp.transcoder.JobArgs;
import com.pulumi.gcp.transcoder.inputs.JobConfigArgs;
import com.pulumi.gcp.transcoder.inputs.JobConfigPubsubDestinationArgs;
import com.pulumi.gcp.transcoder.inputs.JobConfigOutputArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Bucket("default", BucketArgs.builder()
            .name("transcoder-job")
            .location("US")
            .forceDestroy(true)
            .uniformBucketLevelAccess(true)
            .publicAccessPrevention("enforced")
            .build());

        var exampleMp4 = new BucketObject("exampleMp4", BucketObjectArgs.builder()
            .name("example.mp4")
            .source(new FileAsset("./test-fixtures/example.mp4"))
            .bucket(default_.name())
            .build());

        var transcoderNotifications = new Topic("transcoderNotifications", TopicArgs.builder()
            .name("transcoder-notifications")
            .build());

        var defaultJob = new Job("defaultJob", JobArgs.builder()
            .location("us-central1")
            .config(JobConfigArgs.builder()
                .inputs(JobConfigInputArgs.builder()
                    .key("input0")
                    .uri(Output.tuple(default_.name(), exampleMp4.name()).applyValue(values -> {
                        var defaultName = values.t1;
                        var exampleMp4Name = values.t2;
                        return String.format("gs://%s/%s", defaultName,exampleMp4Name);
                    }))
                    .build())
                .editLists(JobConfigEditListArgs.builder()
                    .key("atom0")
                    .inputs("input0")
                    .startTimeOffset("0s")
                    .build())
                .adBreaks(JobConfigAdBreakArgs.builder()
                    .startTimeOffset("3.500s")
                    .build())
                .elementaryStreams(                
                    JobConfigElementaryStreamArgs.builder()
                        .key("video-stream0")
                        .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(640)
                                .heightPixels(360)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(550000)
                                .vbvFullnessBits(495000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobConfigElementaryStreamArgs.builder()
                        .key("video-stream1")
                        .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(1280)
                                .heightPixels(720)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(2500000)
                                .vbvFullnessBits(2250000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobConfigElementaryStreamArgs.builder()
                        .key("audio-stream0")
                        .audioStream(JobConfigElementaryStreamAudioStreamArgs.builder()
                            .codec("aac")
                            .bitrateBps(64000)
                            .channelCount(2)
                            .channelLayouts(                            
                                "fl",
                                "fr")
                            .sampleRateHertz(48000)
                            .build())
                        .build())
                .muxStreams(                
                    JobConfigMuxStreamArgs.builder()
                        .key("sd")
                        .fileName("sd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream0",
                            "audio-stream0")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("hd")
                        .fileName("hd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream1",
                            "audio-stream0")
                        .build())
                .pubsubDestination(JobConfigPubsubDestinationArgs.builder()
                    .topic(transcoderNotifications.id())
                    .build())
                .output(JobConfigOutputArgs.builder()
                    .uri(default_.name().applyValue(name -> String.format("gs://%s/outputs/", name)))
                    .build())
                .build())
            .labels(Map.of("label", "key"))
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:storage:Bucket
    properties:
      name: transcoder-job
      location: US
      forceDestroy: true
      uniformBucketLevelAccess: true
      publicAccessPrevention: enforced
  exampleMp4:
    type: gcp:storage:BucketObject
    name: example_mp4
    properties:
      name: example.mp4
      source:
        fn::FileAsset: ./test-fixtures/example.mp4
      bucket: ${default.name}
  transcoderNotifications:
    type: gcp:pubsub:Topic
    name: transcoder_notifications
    properties:
      name: transcoder-notifications
  defaultJob:
    type: gcp:transcoder:Job
    name: default
    properties:
      location: us-central1
      config:
        inputs:
          - key: input0
            uri: gs://${default.name}/${exampleMp4.name}
        editLists:
          - key: atom0
            inputs:
              - input0
            startTimeOffset: 0s
        adBreaks:
          - startTimeOffset: 3.500s
        elementaryStreams:
          - key: video-stream0
            videoStream:
              h264:
                widthPixels: 640
                heightPixels: 360
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 550000
                vbvFullnessBits: 495000
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: video-stream1
            videoStream:
              h264:
                widthPixels: 1280
                heightPixels: 720
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 2.5e+06
                vbvFullnessBits: 2.25e+06
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: audio-stream0
            audioStream:
              codec: aac
              bitrateBps: 64000
              channelCount: 2
              channelLayouts:
                - fl
                - fr
              sampleRateHertz: 48000
        muxStreams:
          - key: sd
            fileName: sd.mp4
            container: mp4
            elementaryStreams:
              - video-stream0
              - audio-stream0
          - key: hd
            fileName: hd.mp4
            container: mp4
            elementaryStreams:
              - video-stream1
              - audio-stream0
        pubsubDestination:
          topic: ${transcoderNotifications.id}
        output:
          uri: gs://${default.name}/outputs/
      labels:
        label: key
```
<!--End PulumiCodeChooser -->
### Transcoder Job Encryptions


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.storage.Bucket("default", {
    name: "transcoder-job",
    location: "US",
    forceDestroy: true,
    uniformBucketLevelAccess: true,
    publicAccessPrevention: "enforced",
});
const exampleMp4 = new gcp.storage.BucketObject("example_mp4", {
    name: "example.mp4",
    source: new pulumi.asset.FileAsset("./test-fixtures/example.mp4"),
    bucket: _default.name,
});
const encryptionKey = new gcp.secretmanager.Secret("encryption_key", {
    secretId: "transcoder-encryption-key",
    replication: {
        auto: {},
    },
});
const encryptionKeySecretVersion = new gcp.secretmanager.SecretVersion("encryption_key", {
    secret: encryptionKey.name,
    secretData: "4A67F2C1B8E93A4F6D3E7890A1BC23DF",
});
const project = gcp.organizations.getProject({});
// this is required to allow the transcoder service identity to access the secret
const transcoder = new gcp.projects.ServiceIdentity("transcoder", {
    project: project.then(project => project.projectId),
    service: "transcoder.googleapis.com",
});
const transcoderEncryptionKeyAccessor = new gcp.secretmanager.SecretIamMember("transcoder_encryption_key_accessor", {
    secretId: encryptionKey.secretId,
    project: encryptionKey.project,
    role: "roles/secretmanager.secretAccessor",
    member: pulumi.interpolate`serviceAccount:${transcoder.email}`,
});
const defaultJob = new gcp.transcoder.Job("default", {
    location: "us-central1",
    config: {
        inputs: [{
            key: "input0",
            uri: pulumi.interpolate`gs://${_default.name}/${exampleMp4.name}`,
        }],
        elementaryStreams: [
            {
                key: "es_video",
                videoStream: {
                    h264: {
                        profile: "main",
                        heightPixels: 600,
                        widthPixels: 800,
                        bitrateBps: 1000000,
                        frameRate: 60,
                    },
                },
            },
            {
                key: "es_audio",
                audioStream: {
                    codec: "aac",
                    channelCount: 2,
                    bitrateBps: 160000,
                },
            },
        ],
        encryptions: [
            {
                id: "aes-128",
                secretManagerKeySource: {
                    secretVersion: encryptionKeySecretVersion.name,
                },
                drmSystems: {
                    clearkey: {},
                },
                aes128: {},
            },
            {
                id: "cenc",
                secretManagerKeySource: {
                    secretVersion: encryptionKeySecretVersion.name,
                },
                drmSystems: {
                    widevine: {},
                },
                mpegCenc: {
                    scheme: "cenc",
                },
            },
            {
                id: "cbcs",
                secretManagerKeySource: {
                    secretVersion: encryptionKeySecretVersion.name,
                },
                drmSystems: {
                    widevine: {},
                },
                mpegCenc: {
                    scheme: "cbcs",
                },
            },
        ],
        muxStreams: [
            {
                key: "ts_aes128",
                container: "ts",
                elementaryStreams: [
                    "es_video",
                    "es_audio",
                ],
                segmentSettings: {
                    segmentDuration: "6s",
                },
                encryptionId: "aes-128",
            },
            {
                key: "fmp4_cenc_video",
                container: "fmp4",
                elementaryStreams: ["es_video"],
                segmentSettings: {
                    segmentDuration: "6s",
                },
                encryptionId: "cenc",
            },
            {
                key: "fmp4_cenc_audio",
                container: "fmp4",
                elementaryStreams: ["es_audio"],
                segmentSettings: {
                    segmentDuration: "6s",
                },
                encryptionId: "cenc",
            },
            {
                key: "fmp4_cbcs_video",
                container: "fmp4",
                elementaryStreams: ["es_video"],
                segmentSettings: {
                    segmentDuration: "6s",
                },
                encryptionId: "cbcs",
            },
            {
                key: "fmp4_cbcs_audio",
                container: "fmp4",
                elementaryStreams: ["es_audio"],
                segmentSettings: {
                    segmentDuration: "6s",
                },
                encryptionId: "cbcs",
            },
        ],
        manifests: [
            {
                fileName: "manifest_aes128.m3u8",
                type: "HLS",
                muxStreams: ["ts_aes128"],
            },
            {
                fileName: "manifest_cenc.mpd",
                type: "DASH",
                muxStreams: [
                    "fmp4_cenc_video",
                    "fmp4_cenc_audio",
                ],
            },
            {
                fileName: "manifest_cbcs.mpd",
                type: "DASH",
                muxStreams: [
                    "fmp4_cbcs_video",
                    "fmp4_cbcs_audio",
                ],
            },
        ],
        output: {
            uri: pulumi.interpolate`gs://${_default.name}/outputs/`,
        },
    },
    labels: {
        label: "key",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.storage.Bucket("default",
    name="transcoder-job",
    location="US",
    force_destroy=True,
    uniform_bucket_level_access=True,
    public_access_prevention="enforced")
example_mp4 = gcp.storage.BucketObject("example_mp4",
    name="example.mp4",
    source=pulumi.FileAsset("./test-fixtures/example.mp4"),
    bucket=default.name)
encryption_key = gcp.secretmanager.Secret("encryption_key",
    secret_id="transcoder-encryption-key",
    replication={
        "auto": {},
    })
encryption_key_secret_version = gcp.secretmanager.SecretVersion("encryption_key",
    secret=encryption_key.name,
    secret_data="4A67F2C1B8E93A4F6D3E7890A1BC23DF")
project = gcp.organizations.get_project()
# this is required to allow the transcoder service identity to access the secret
transcoder = gcp.projects.ServiceIdentity("transcoder",
    project=project.project_id,
    service="transcoder.googleapis.com")
transcoder_encryption_key_accessor = gcp.secretmanager.SecretIamMember("transcoder_encryption_key_accessor",
    secret_id=encryption_key.secret_id,
    project=encryption_key.project,
    role="roles/secretmanager.secretAccessor",
    member=transcoder.email.apply(lambda email: f"serviceAccount:{email}"))
default_job = gcp.transcoder.Job("default",
    location="us-central1",
    config={
        "inputs": [{
            "key": "input0",
            "uri": pulumi.Output.all(
                defaultName=default.name,
                exampleMp4Name=example_mp4.name
).apply(lambda resolved_outputs: f"gs://{resolved_outputs['defaultName']}/{resolved_outputs['exampleMp4Name']}")
,
        }],
        "elementary_streams": [
            {
                "key": "es_video",
                "video_stream": {
                    "h264": {
                        "profile": "main",
                        "height_pixels": 600,
                        "width_pixels": 800,
                        "bitrate_bps": 1000000,
                        "frame_rate": 60,
                    },
                },
            },
            {
                "key": "es_audio",
                "audio_stream": {
                    "codec": "aac",
                    "channel_count": 2,
                    "bitrate_bps": 160000,
                },
            },
        ],
        "encryptions": [
            {
                "id": "aes-128",
                "secret_manager_key_source": {
                    "secret_version": encryption_key_secret_version.name,
                },
                "drm_systems": {
                    "clearkey": {},
                },
                "aes128": {},
            },
            {
                "id": "cenc",
                "secret_manager_key_source": {
                    "secret_version": encryption_key_secret_version.name,
                },
                "drm_systems": {
                    "widevine": {},
                },
                "mpeg_cenc": {
                    "scheme": "cenc",
                },
            },
            {
                "id": "cbcs",
                "secret_manager_key_source": {
                    "secret_version": encryption_key_secret_version.name,
                },
                "drm_systems": {
                    "widevine": {},
                },
                "mpeg_cenc": {
                    "scheme": "cbcs",
                },
            },
        ],
        "mux_streams": [
            {
                "key": "ts_aes128",
                "container": "ts",
                "elementary_streams": [
                    "es_video",
                    "es_audio",
                ],
                "segment_settings": {
                    "segment_duration": "6s",
                },
                "encryption_id": "aes-128",
            },
            {
                "key": "fmp4_cenc_video",
                "container": "fmp4",
                "elementary_streams": ["es_video"],
                "segment_settings": {
                    "segment_duration": "6s",
                },
                "encryption_id": "cenc",
            },
            {
                "key": "fmp4_cenc_audio",
                "container": "fmp4",
                "elementary_streams": ["es_audio"],
                "segment_settings": {
                    "segment_duration": "6s",
                },
                "encryption_id": "cenc",
            },
            {
                "key": "fmp4_cbcs_video",
                "container": "fmp4",
                "elementary_streams": ["es_video"],
                "segment_settings": {
                    "segment_duration": "6s",
                },
                "encryption_id": "cbcs",
            },
            {
                "key": "fmp4_cbcs_audio",
                "container": "fmp4",
                "elementary_streams": ["es_audio"],
                "segment_settings": {
                    "segment_duration": "6s",
                },
                "encryption_id": "cbcs",
            },
        ],
        "manifests": [
            {
                "file_name": "manifest_aes128.m3u8",
                "type": "HLS",
                "mux_streams": ["ts_aes128"],
            },
            {
                "file_name": "manifest_cenc.mpd",
                "type": "DASH",
                "mux_streams": [
                    "fmp4_cenc_video",
                    "fmp4_cenc_audio",
                ],
            },
            {
                "file_name": "manifest_cbcs.mpd",
                "type": "DASH",
                "mux_streams": [
                    "fmp4_cbcs_video",
                    "fmp4_cbcs_audio",
                ],
            },
        ],
        "output": {
            "uri": default.name.apply(lambda name: f"gs://{name}/outputs/"),
        },
    },
    labels={
        "label": "key",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.Storage.Bucket("default", new()
    {
        Name = "transcoder-job",
        Location = "US",
        ForceDestroy = true,
        UniformBucketLevelAccess = true,
        PublicAccessPrevention = "enforced",
    });

    var exampleMp4 = new Gcp.Storage.BucketObject("example_mp4", new()
    {
        Name = "example.mp4",
        Source = new FileAsset("./test-fixtures/example.mp4"),
        Bucket = @default.Name,
    });

    var encryptionKey = new Gcp.SecretManager.Secret("encryption_key", new()
    {
        SecretId = "transcoder-encryption-key",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = null,
        },
    });

    var encryptionKeySecretVersion = new Gcp.SecretManager.SecretVersion("encryption_key", new()
    {
        Secret = encryptionKey.Name,
        SecretData = "4A67F2C1B8E93A4F6D3E7890A1BC23DF",
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    // this is required to allow the transcoder service identity to access the secret
    var transcoder = new Gcp.Projects.ServiceIdentity("transcoder", new()
    {
        Project = project.Apply(getProjectResult => getProjectResult.ProjectId),
        Service = "transcoder.googleapis.com",
    });

    var transcoderEncryptionKeyAccessor = new Gcp.SecretManager.SecretIamMember("transcoder_encryption_key_accessor", new()
    {
        SecretId = encryptionKey.SecretId,
        Project = encryptionKey.Project,
        Role = "roles/secretmanager.secretAccessor",
        Member = transcoder.Email.Apply(email => $"serviceAccount:{email}"),
    });

    var defaultJob = new Gcp.Transcoder.Job("default", new()
    {
        Location = "us-central1",
        Config = new Gcp.Transcoder.Inputs.JobConfigArgs
        {
            Inputs = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigInputArgs
                {
                    Key = "input0",
                    Uri = Output.Tuple(@default.Name, exampleMp4.Name).Apply(values =>
                    {
                        var defaultName = values.Item1;
                        var exampleMp4Name = values.Item2;
                        return $"gs://{defaultName}/{exampleMp4Name}";
                    }),
                },
            },
            ElementaryStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
                {
                    Key = "es_video",
                    VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
                        {
                            Profile = "main",
                            HeightPixels = 600,
                            WidthPixels = 800,
                            BitrateBps = 1000000,
                            FrameRate = 60,
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
                {
                    Key = "es_audio",
                    AudioStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamAudioStreamArgs
                    {
                        Codec = "aac",
                        ChannelCount = 2,
                        BitrateBps = 160000,
                    },
                },
            },
            Encryptions = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigEncryptionArgs
                {
                    Id = "aes-128",
                    SecretManagerKeySource = new Gcp.Transcoder.Inputs.JobConfigEncryptionSecretManagerKeySourceArgs
                    {
                        SecretVersion = encryptionKeySecretVersion.Name,
                    },
                    DrmSystems = new Gcp.Transcoder.Inputs.JobConfigEncryptionDrmSystemsArgs
                    {
                        Clearkey = null,
                    },
                    Aes128 = null,
                },
                new Gcp.Transcoder.Inputs.JobConfigEncryptionArgs
                {
                    Id = "cenc",
                    SecretManagerKeySource = new Gcp.Transcoder.Inputs.JobConfigEncryptionSecretManagerKeySourceArgs
                    {
                        SecretVersion = encryptionKeySecretVersion.Name,
                    },
                    DrmSystems = new Gcp.Transcoder.Inputs.JobConfigEncryptionDrmSystemsArgs
                    {
                        Widevine = null,
                    },
                    MpegCenc = new Gcp.Transcoder.Inputs.JobConfigEncryptionMpegCencArgs
                    {
                        Scheme = "cenc",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigEncryptionArgs
                {
                    Id = "cbcs",
                    SecretManagerKeySource = new Gcp.Transcoder.Inputs.JobConfigEncryptionSecretManagerKeySourceArgs
                    {
                        SecretVersion = encryptionKeySecretVersion.Name,
                    },
                    DrmSystems = new Gcp.Transcoder.Inputs.JobConfigEncryptionDrmSystemsArgs
                    {
                        Widevine = null,
                    },
                    MpegCenc = new Gcp.Transcoder.Inputs.JobConfigEncryptionMpegCencArgs
                    {
                        Scheme = "cbcs",
                    },
                },
            },
            MuxStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "ts_aes128",
                    Container = "ts",
                    ElementaryStreams = new[]
                    {
                        "es_video",
                        "es_audio",
                    },
                    SegmentSettings = new Gcp.Transcoder.Inputs.JobConfigMuxStreamSegmentSettingsArgs
                    {
                        SegmentDuration = "6s",
                    },
                    EncryptionId = "aes-128",
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "fmp4_cenc_video",
                    Container = "fmp4",
                    ElementaryStreams = new[]
                    {
                        "es_video",
                    },
                    SegmentSettings = new Gcp.Transcoder.Inputs.JobConfigMuxStreamSegmentSettingsArgs
                    {
                        SegmentDuration = "6s",
                    },
                    EncryptionId = "cenc",
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "fmp4_cenc_audio",
                    Container = "fmp4",
                    ElementaryStreams = new[]
                    {
                        "es_audio",
                    },
                    SegmentSettings = new Gcp.Transcoder.Inputs.JobConfigMuxStreamSegmentSettingsArgs
                    {
                        SegmentDuration = "6s",
                    },
                    EncryptionId = "cenc",
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "fmp4_cbcs_video",
                    Container = "fmp4",
                    ElementaryStreams = new[]
                    {
                        "es_video",
                    },
                    SegmentSettings = new Gcp.Transcoder.Inputs.JobConfigMuxStreamSegmentSettingsArgs
                    {
                        SegmentDuration = "6s",
                    },
                    EncryptionId = "cbcs",
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "fmp4_cbcs_audio",
                    Container = "fmp4",
                    ElementaryStreams = new[]
                    {
                        "es_audio",
                    },
                    SegmentSettings = new Gcp.Transcoder.Inputs.JobConfigMuxStreamSegmentSettingsArgs
                    {
                        SegmentDuration = "6s",
                    },
                    EncryptionId = "cbcs",
                },
            },
            Manifests = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigManifestArgs
                {
                    FileName = "manifest_aes128.m3u8",
                    Type = "HLS",
                    MuxStreams = new[]
                    {
                        "ts_aes128",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigManifestArgs
                {
                    FileName = "manifest_cenc.mpd",
                    Type = "DASH",
                    MuxStreams = new[]
                    {
                        "fmp4_cenc_video",
                        "fmp4_cenc_audio",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigManifestArgs
                {
                    FileName = "manifest_cbcs.mpd",
                    Type = "DASH",
                    MuxStreams = new[]
                    {
                        "fmp4_cbcs_video",
                        "fmp4_cbcs_audio",
                    },
                },
            },
            Output = new Gcp.Transcoder.Inputs.JobConfigOutputArgs
            {
                Uri = @default.Name.Apply(name => $"gs://{name}/outputs/"),
            },
        },
        Labels = 
        {
            { "label", "key" },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "default", &storage.BucketArgs{
			Name:                     pulumi.String("transcoder-job"),
			Location:                 pulumi.String("US"),
			ForceDestroy:             pulumi.Bool(true),
			UniformBucketLevelAccess: pulumi.Bool(true),
			PublicAccessPrevention:   pulumi.String("enforced"),
		})
		if err != nil {
			return err
		}
		exampleMp4, err := storage.NewBucketObject(ctx, "example_mp4", &storage.BucketObjectArgs{
			Name:   pulumi.String("example.mp4"),
			Source: pulumi.NewFileAsset("./test-fixtures/example.mp4"),
			Bucket: _default.Name,
		})
		if err != nil {
			return err
		}
		encryptionKey, err := secretmanager.NewSecret(ctx, "encryption_key", &secretmanager.SecretArgs{
			SecretId: pulumi.String("transcoder-encryption-key"),
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{},
			},
		})
		if err != nil {
			return err
		}
		encryptionKeySecretVersion, err := secretmanager.NewSecretVersion(ctx, "encryption_key", &secretmanager.SecretVersionArgs{
			Secret:     encryptionKey.Name,
			SecretData: pulumi.String("4A67F2C1B8E93A4F6D3E7890A1BC23DF"),
		})
		if err != nil {
			return err
		}
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		// this is required to allow the transcoder service identity to access the secret
		transcoder, err := projects.NewServiceIdentity(ctx, "transcoder", &projects.ServiceIdentityArgs{
			Project: pulumi.String(project.ProjectId),
			Service: pulumi.String("transcoder.googleapis.com"),
		})
		if err != nil {
			return err
		}
		_, err = secretmanager.NewSecretIamMember(ctx, "transcoder_encryption_key_accessor", &secretmanager.SecretIamMemberArgs{
			SecretId: encryptionKey.SecretId,
			Project:  encryptionKey.Project,
			Role:     pulumi.String("roles/secretmanager.secretAccessor"),
			Member: transcoder.Email.ApplyT(func(email string) (string, error) {
				return fmt.Sprintf("serviceAccount:%v", email), nil
			}).(pulumi.StringOutput),
		})
		if err != nil {
			return err
		}
		_, err = transcoder.NewJob(ctx, "default", &transcoder.JobArgs{
			Location: pulumi.String("us-central1"),
			Config: &transcoder.JobConfigArgs{
				Inputs: transcoder.JobConfigInputTypeArray{
					&transcoder.JobConfigInputTypeArgs{
						Key: pulumi.String("input0"),
						Uri: pulumi.All(_default.Name, exampleMp4.Name).ApplyT(func(_args []interface{}) (string, error) {
							defaultName := _args[0].(string)
							exampleMp4Name := _args[1].(string)
							return fmt.Sprintf("gs://%v/%v", defaultName, exampleMp4Name), nil
						}).(pulumi.StringOutput),
					},
				},
				ElementaryStreams: transcoder.JobConfigElementaryStreamArray{
					&transcoder.JobConfigElementaryStreamArgs{
						Key: pulumi.String("es_video"),
						VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
								Profile:      pulumi.String("main"),
								HeightPixels: pulumi.Int(600),
								WidthPixels:  pulumi.Int(800),
								BitrateBps:   pulumi.Int(1000000),
								FrameRate:    pulumi.Int(60),
							},
						},
					},
					&transcoder.JobConfigElementaryStreamArgs{
						Key: pulumi.String("es_audio"),
						AudioStream: &transcoder.JobConfigElementaryStreamAudioStreamArgs{
							Codec:        pulumi.String("aac"),
							ChannelCount: pulumi.Int(2),
							BitrateBps:   pulumi.Int(160000),
						},
					},
				},
				Encryptions: transcoder.JobConfigEncryptionArray{
					&transcoder.JobConfigEncryptionArgs{
						Id: pulumi.String("aes-128"),
						SecretManagerKeySource: &transcoder.JobConfigEncryptionSecretManagerKeySourceArgs{
							SecretVersion: encryptionKeySecretVersion.Name,
						},
						DrmSystems: &transcoder.JobConfigEncryptionDrmSystemsArgs{
							Clearkey: &transcoder.JobConfigEncryptionDrmSystemsClearkeyArgs{},
						},
						Aes128: &transcoder.JobConfigEncryptionAes128Args{},
					},
					&transcoder.JobConfigEncryptionArgs{
						Id: pulumi.String("cenc"),
						SecretManagerKeySource: &transcoder.JobConfigEncryptionSecretManagerKeySourceArgs{
							SecretVersion: encryptionKeySecretVersion.Name,
						},
						DrmSystems: &transcoder.JobConfigEncryptionDrmSystemsArgs{
							Widevine: &transcoder.JobConfigEncryptionDrmSystemsWidevineArgs{},
						},
						MpegCenc: &transcoder.JobConfigEncryptionMpegCencArgs{
							Scheme: pulumi.String("cenc"),
						},
					},
					&transcoder.JobConfigEncryptionArgs{
						Id: pulumi.String("cbcs"),
						SecretManagerKeySource: &transcoder.JobConfigEncryptionSecretManagerKeySourceArgs{
							SecretVersion: encryptionKeySecretVersion.Name,
						},
						DrmSystems: &transcoder.JobConfigEncryptionDrmSystemsArgs{
							Widevine: &transcoder.JobConfigEncryptionDrmSystemsWidevineArgs{},
						},
						MpegCenc: &transcoder.JobConfigEncryptionMpegCencArgs{
							Scheme: pulumi.String("cbcs"),
						},
					},
				},
				MuxStreams: transcoder.JobConfigMuxStreamArray{
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("ts_aes128"),
						Container: pulumi.String("ts"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("es_video"),
							pulumi.String("es_audio"),
						},
						SegmentSettings: &transcoder.JobConfigMuxStreamSegmentSettingsArgs{
							SegmentDuration: pulumi.String("6s"),
						},
						EncryptionId: pulumi.String("aes-128"),
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("fmp4_cenc_video"),
						Container: pulumi.String("fmp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("es_video"),
						},
						SegmentSettings: &transcoder.JobConfigMuxStreamSegmentSettingsArgs{
							SegmentDuration: pulumi.String("6s"),
						},
						EncryptionId: pulumi.String("cenc"),
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("fmp4_cenc_audio"),
						Container: pulumi.String("fmp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("es_audio"),
						},
						SegmentSettings: &transcoder.JobConfigMuxStreamSegmentSettingsArgs{
							SegmentDuration: pulumi.String("6s"),
						},
						EncryptionId: pulumi.String("cenc"),
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("fmp4_cbcs_video"),
						Container: pulumi.String("fmp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("es_video"),
						},
						SegmentSettings: &transcoder.JobConfigMuxStreamSegmentSettingsArgs{
							SegmentDuration: pulumi.String("6s"),
						},
						EncryptionId: pulumi.String("cbcs"),
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("fmp4_cbcs_audio"),
						Container: pulumi.String("fmp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("es_audio"),
						},
						SegmentSettings: &transcoder.JobConfigMuxStreamSegmentSettingsArgs{
							SegmentDuration: pulumi.String("6s"),
						},
						EncryptionId: pulumi.String("cbcs"),
					},
				},
				Manifests: transcoder.JobConfigManifestArray{
					&transcoder.JobConfigManifestArgs{
						FileName: pulumi.String("manifest_aes128.m3u8"),
						Type:     pulumi.String("HLS"),
						MuxStreams: pulumi.StringArray{
							pulumi.String("ts_aes128"),
						},
					},
					&transcoder.JobConfigManifestArgs{
						FileName: pulumi.String("manifest_cenc.mpd"),
						Type:     pulumi.String("DASH"),
						MuxStreams: pulumi.StringArray{
							pulumi.String("fmp4_cenc_video"),
							pulumi.String("fmp4_cenc_audio"),
						},
					},
					&transcoder.JobConfigManifestArgs{
						FileName: pulumi.String("manifest_cbcs.mpd"),
						Type:     pulumi.String("DASH"),
						MuxStreams: pulumi.StringArray{
							pulumi.String("fmp4_cbcs_video"),
							pulumi.String("fmp4_cbcs_audio"),
						},
					},
				},
				Output: &transcoder.JobConfigOutputTypeArgs{
					Uri: _default.Name.ApplyT(func(name string) (string, error) {
						return fmt.Sprintf("gs://%v/outputs/", name), nil
					}).(pulumi.StringOutput),
				},
			},
			Labels: pulumi.StringMap{
				"label": pulumi.String("key"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.projects.ServiceIdentity;
import com.pulumi.gcp.projects.ServiceIdentityArgs;
import com.pulumi.gcp.secretmanager.SecretIamMember;
import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
import com.pulumi.gcp.transcoder.Job;
import com.pulumi.gcp.transcoder.JobArgs;
import com.pulumi.gcp.transcoder.inputs.JobConfigArgs;
import com.pulumi.gcp.transcoder.inputs.JobConfigOutputArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Bucket("default", BucketArgs.builder()
            .name("transcoder-job")
            .location("US")
            .forceDestroy(true)
            .uniformBucketLevelAccess(true)
            .publicAccessPrevention("enforced")
            .build());

        var exampleMp4 = new BucketObject("exampleMp4", BucketObjectArgs.builder()
            .name("example.mp4")
            .source(new FileAsset("./test-fixtures/example.mp4"))
            .bucket(default_.name())
            .build());

        var encryptionKey = new Secret("encryptionKey", SecretArgs.builder()
            .secretId("transcoder-encryption-key")
            .replication(SecretReplicationArgs.builder()
                .auto()
                .build())
            .build());

        var encryptionKeySecretVersion = new SecretVersion("encryptionKeySecretVersion", SecretVersionArgs.builder()
            .secret(encryptionKey.name())
            .secretData("4A67F2C1B8E93A4F6D3E7890A1BC23DF")
            .build());

        final var project = OrganizationsFunctions.getProject();

        // this is required to allow the transcoder service identity to access the secret
        var transcoder = new ServiceIdentity("transcoder", ServiceIdentityArgs.builder()
            .project(project.applyValue(getProjectResult -> getProjectResult.projectId()))
            .service("transcoder.googleapis.com")
            .build());

        var transcoderEncryptionKeyAccessor = new SecretIamMember("transcoderEncryptionKeyAccessor", SecretIamMemberArgs.builder()
            .secretId(encryptionKey.secretId())
            .project(encryptionKey.project())
            .role("roles/secretmanager.secretAccessor")
            .member(transcoder.email().applyValue(email -> String.format("serviceAccount:%s", email)))
            .build());

        var defaultJob = new Job("defaultJob", JobArgs.builder()
            .location("us-central1")
            .config(JobConfigArgs.builder()
                .inputs(JobConfigInputArgs.builder()
                    .key("input0")
                    .uri(Output.tuple(default_.name(), exampleMp4.name()).applyValue(values -> {
                        var defaultName = values.t1;
                        var exampleMp4Name = values.t2;
                        return String.format("gs://%s/%s", defaultName,exampleMp4Name);
                    }))
                    .build())
                .elementaryStreams(                
                    JobConfigElementaryStreamArgs.builder()
                        .key("es_video")
                        .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
                                .profile("main")
                                .heightPixels(600)
                                .widthPixels(800)
                                .bitrateBps(1000000)
                                .frameRate(60)
                                .build())
                            .build())
                        .build(),
                    JobConfigElementaryStreamArgs.builder()
                        .key("es_audio")
                        .audioStream(JobConfigElementaryStreamAudioStreamArgs.builder()
                            .codec("aac")
                            .channelCount(2)
                            .bitrateBps(160000)
                            .build())
                        .build())
                .encryptions(                
                    JobConfigEncryptionArgs.builder()
                        .id("aes-128")
                        .secretManagerKeySource(JobConfigEncryptionSecretManagerKeySourceArgs.builder()
                            .secretVersion(encryptionKeySecretVersion.name())
                            .build())
                        .drmSystems(JobConfigEncryptionDrmSystemsArgs.builder()
                            .clearkey()
                            .build())
                        .aes128()
                        .build(),
                    JobConfigEncryptionArgs.builder()
                        .id("cenc")
                        .secretManagerKeySource(JobConfigEncryptionSecretManagerKeySourceArgs.builder()
                            .secretVersion(encryptionKeySecretVersion.name())
                            .build())
                        .drmSystems(JobConfigEncryptionDrmSystemsArgs.builder()
                            .widevine()
                            .build())
                        .mpegCenc(JobConfigEncryptionMpegCencArgs.builder()
                            .scheme("cenc")
                            .build())
                        .build(),
                    JobConfigEncryptionArgs.builder()
                        .id("cbcs")
                        .secretManagerKeySource(JobConfigEncryptionSecretManagerKeySourceArgs.builder()
                            .secretVersion(encryptionKeySecretVersion.name())
                            .build())
                        .drmSystems(JobConfigEncryptionDrmSystemsArgs.builder()
                            .widevine()
                            .build())
                        .mpegCenc(JobConfigEncryptionMpegCencArgs.builder()
                            .scheme("cbcs")
                            .build())
                        .build())
                .muxStreams(                
                    JobConfigMuxStreamArgs.builder()
                        .key("ts_aes128")
                        .container("ts")
                        .elementaryStreams(                        
                            "es_video",
                            "es_audio")
                        .segmentSettings(JobConfigMuxStreamSegmentSettingsArgs.builder()
                            .segmentDuration("6s")
                            .build())
                        .encryptionId("aes-128")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("fmp4_cenc_video")
                        .container("fmp4")
                        .elementaryStreams("es_video")
                        .segmentSettings(JobConfigMuxStreamSegmentSettingsArgs.builder()
                            .segmentDuration("6s")
                            .build())
                        .encryptionId("cenc")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("fmp4_cenc_audio")
                        .container("fmp4")
                        .elementaryStreams("es_audio")
                        .segmentSettings(JobConfigMuxStreamSegmentSettingsArgs.builder()
                            .segmentDuration("6s")
                            .build())
                        .encryptionId("cenc")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("fmp4_cbcs_video")
                        .container("fmp4")
                        .elementaryStreams("es_video")
                        .segmentSettings(JobConfigMuxStreamSegmentSettingsArgs.builder()
                            .segmentDuration("6s")
                            .build())
                        .encryptionId("cbcs")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("fmp4_cbcs_audio")
                        .container("fmp4")
                        .elementaryStreams("es_audio")
                        .segmentSettings(JobConfigMuxStreamSegmentSettingsArgs.builder()
                            .segmentDuration("6s")
                            .build())
                        .encryptionId("cbcs")
                        .build())
                .manifests(                
                    JobConfigManifestArgs.builder()
                        .fileName("manifest_aes128.m3u8")
                        .type("HLS")
                        .muxStreams("ts_aes128")
                        .build(),
                    JobConfigManifestArgs.builder()
                        .fileName("manifest_cenc.mpd")
                        .type("DASH")
                        .muxStreams(                        
                            "fmp4_cenc_video",
                            "fmp4_cenc_audio")
                        .build(),
                    JobConfigManifestArgs.builder()
                        .fileName("manifest_cbcs.mpd")
                        .type("DASH")
                        .muxStreams(                        
                            "fmp4_cbcs_video",
                            "fmp4_cbcs_audio")
                        .build())
                .output(JobConfigOutputArgs.builder()
                    .uri(default_.name().applyValue(name -> String.format("gs://%s/outputs/", name)))
                    .build())
                .build())
            .labels(Map.of("label", "key"))
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:storage:Bucket
    properties:
      name: transcoder-job
      location: US
      forceDestroy: true
      uniformBucketLevelAccess: true
      publicAccessPrevention: enforced
  exampleMp4:
    type: gcp:storage:BucketObject
    name: example_mp4
    properties:
      name: example.mp4
      source:
        fn::FileAsset: ./test-fixtures/example.mp4
      bucket: ${default.name}
  encryptionKey:
    type: gcp:secretmanager:Secret
    name: encryption_key
    properties:
      secretId: transcoder-encryption-key
      replication:
        auto: {}
  encryptionKeySecretVersion:
    type: gcp:secretmanager:SecretVersion
    name: encryption_key
    properties:
      secret: ${encryptionKey.name}
      secretData: 4A67F2C1B8E93A4F6D3E7890A1BC23DF
  # this is required to allow the transcoder service identity to access the secret
  transcoder:
    type: gcp:projects:ServiceIdentity
    properties:
      project: ${project.projectId}
      service: transcoder.googleapis.com
  transcoderEncryptionKeyAccessor:
    type: gcp:secretmanager:SecretIamMember
    name: transcoder_encryption_key_accessor
    properties:
      secretId: ${encryptionKey.secretId}
      project: ${encryptionKey.project}
      role: roles/secretmanager.secretAccessor
      member: serviceAccount:${transcoder.email}
  defaultJob:
    type: gcp:transcoder:Job
    name: default
    properties:
      location: us-central1
      config:
        inputs:
          - key: input0
            uri: gs://${default.name}/${exampleMp4.name}
        elementaryStreams:
          - key: es_video
            videoStream:
              h264:
                profile: main
                heightPixels: 600
                widthPixels: 800
                bitrateBps: 1e+06
                frameRate: 60
          - key: es_audio
            audioStream:
              codec: aac
              channelCount: 2
              bitrateBps: 160000
        encryptions:
          - id: aes-128
            secretManagerKeySource:
              secretVersion: ${encryptionKeySecretVersion.name}
            drmSystems:
              clearkey: {}
            aes128: {}
          - id: cenc
            secretManagerKeySource:
              secretVersion: ${encryptionKeySecretVersion.name}
            drmSystems:
              widevine: {}
            mpegCenc:
              scheme: cenc
          - id: cbcs
            secretManagerKeySource:
              secretVersion: ${encryptionKeySecretVersion.name}
            drmSystems:
              widevine: {}
            mpegCenc:
              scheme: cbcs
        muxStreams:
          - key: ts_aes128
            container: ts
            elementaryStreams:
              - es_video
              - es_audio
            segmentSettings:
              segmentDuration: 6s
            encryptionId: aes-128
          - key: fmp4_cenc_video
            container: fmp4
            elementaryStreams:
              - es_video
            segmentSettings:
              segmentDuration: 6s
            encryptionId: cenc
          - key: fmp4_cenc_audio
            container: fmp4
            elementaryStreams:
              - es_audio
            segmentSettings:
              segmentDuration: 6s
            encryptionId: cenc
          - key: fmp4_cbcs_video
            container: fmp4
            elementaryStreams:
              - es_video
            segmentSettings:
              segmentDuration: 6s
            encryptionId: cbcs
          - key: fmp4_cbcs_audio
            container: fmp4
            elementaryStreams:
              - es_audio
            segmentSettings:
              segmentDuration: 6s
            encryptionId: cbcs
        manifests:
          - fileName: manifest_aes128.m3u8
            type: HLS
            muxStreams:
              - ts_aes128
          - fileName: manifest_cenc.mpd
            type: DASH
            muxStreams:
              - fmp4_cenc_video
              - fmp4_cenc_audio
          - fileName: manifest_cbcs.mpd
            type: DASH
            muxStreams:
              - fmp4_cbcs_video
              - fmp4_cbcs_audio
        output:
          uri: gs://${default.name}/outputs/
      labels:
        label: key
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Transcoder Job Overlays


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.storage.Bucket("default", {
    name: "transcoder-job",
    location: "US",
    forceDestroy: true,
    uniformBucketLevelAccess: true,
    publicAccessPrevention: "enforced",
});
const exampleMp4 = new gcp.storage.BucketObject("example_mp4", {
    name: "example.mp4",
    source: new pulumi.asset.FileAsset("./test-fixtures/example.mp4"),
    bucket: _default.name,
});
const overlayPng = new gcp.storage.BucketObject("overlay_png", {
    name: "overlay.png",
    source: new pulumi.asset.FileAsset("./test-fixtures/overlay.png"),
    bucket: _default.name,
});
const defaultJob = new gcp.transcoder.Job("default", {
    location: "us-central1",
    config: {
        inputs: [{
            key: "input0",
            uri: pulumi.interpolate`gs://${_default.name}/${exampleMp4.name}`,
        }],
        editLists: [{
            key: "atom0",
            inputs: ["input0"],
            startTimeOffset: "0s",
        }],
        adBreaks: [{
            startTimeOffset: "3.500s",
        }],
        overlays: [{
            animations: [{
                animationFade: {
                    fadeType: "FADE_IN",
                    startTimeOffset: "1.500s",
                    endTimeOffset: "3.500s",
                    xy: {
                        x: 1,
                        y: 0.5,
                    },
                },
            }],
            image: {
                uri: pulumi.interpolate`gs://${_default.name}/${overlayPng.name}`,
            },
        }],
        elementaryStreams: [
            {
                key: "video-stream0",
                videoStream: {
                    h264: {
                        widthPixels: 640,
                        heightPixels: 360,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 550000,
                        vbvFullnessBits: 495000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "video-stream1",
                videoStream: {
                    h264: {
                        widthPixels: 1280,
                        heightPixels: 720,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 2500000,
                        vbvFullnessBits: 2250000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "audio-stream0",
                audioStream: {
                    codec: "aac",
                    bitrateBps: 64000,
                    channelCount: 2,
                    channelLayouts: [
                        "fl",
                        "fr",
                    ],
                    sampleRateHertz: 48000,
                },
            },
        ],
        muxStreams: [
            {
                key: "sd",
                fileName: "sd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                key: "hd",
                fileName: "hd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
        output: {
            uri: pulumi.interpolate`gs://${_default.name}/outputs/`,
        },
    },
    labels: {
        label: "key",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.storage.Bucket("default",
    name="transcoder-job",
    location="US",
    force_destroy=True,
    uniform_bucket_level_access=True,
    public_access_prevention="enforced")
example_mp4 = gcp.storage.BucketObject("example_mp4",
    name="example.mp4",
    source=pulumi.FileAsset("./test-fixtures/example.mp4"),
    bucket=default.name)
overlay_png = gcp.storage.BucketObject("overlay_png",
    name="overlay.png",
    source=pulumi.FileAsset("./test-fixtures/overlay.png"),
    bucket=default.name)
default_job = gcp.transcoder.Job("default",
    location="us-central1",
    config={
        "inputs": [{
            "key": "input0",
            "uri": pulumi.Output.all(
                defaultName=default.name,
                exampleMp4Name=example_mp4.name
).apply(lambda resolved_outputs: f"gs://{resolved_outputs['defaultName']}/{resolved_outputs['exampleMp4Name']}")
,
        }],
        "edit_lists": [{
            "key": "atom0",
            "inputs": ["input0"],
            "start_time_offset": "0s",
        }],
        "ad_breaks": [{
            "start_time_offset": "3.500s",
        }],
        "overlays": [{
            "animations": [{
                "animation_fade": {
                    "fade_type": "FADE_IN",
                    "start_time_offset": "1.500s",
                    "end_time_offset": "3.500s",
                    "xy": {
                        "x": 1,
                        "y": 0.5,
                    },
                },
            }],
            "image": {
                "uri": pulumi.Output.all(
                    defaultName=default.name,
                    overlayPngName=overlay_png.name
).apply(lambda resolved_outputs: f"gs://{resolved_outputs['defaultName']}/{resolved_outputs['overlayPngName']}")
,
            },
        }],
        "elementary_streams": [
            {
                "key": "video-stream0",
                "video_stream": {
                    "h264": {
                        "width_pixels": 640,
                        "height_pixels": 360,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 550000,
                        "vbv_fullness_bits": 495000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "video-stream1",
                "video_stream": {
                    "h264": {
                        "width_pixels": 1280,
                        "height_pixels": 720,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 2500000,
                        "vbv_fullness_bits": 2250000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "audio-stream0",
                "audio_stream": {
                    "codec": "aac",
                    "bitrate_bps": 64000,
                    "channel_count": 2,
                    "channel_layouts": [
                        "fl",
                        "fr",
                    ],
                    "sample_rate_hertz": 48000,
                },
            },
        ],
        "mux_streams": [
            {
                "key": "sd",
                "file_name": "sd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                "key": "hd",
                "file_name": "hd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
        "output": {
            "uri": default.name.apply(lambda name: f"gs://{name}/outputs/"),
        },
    },
    labels={
        "label": "key",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.Storage.Bucket("default", new()
    {
        Name = "transcoder-job",
        Location = "US",
        ForceDestroy = true,
        UniformBucketLevelAccess = true,
        PublicAccessPrevention = "enforced",
    });

    var exampleMp4 = new Gcp.Storage.BucketObject("example_mp4", new()
    {
        Name = "example.mp4",
        Source = new FileAsset("./test-fixtures/example.mp4"),
        Bucket = @default.Name,
    });

    var overlayPng = new Gcp.Storage.BucketObject("overlay_png", new()
    {
        Name = "overlay.png",
        Source = new FileAsset("./test-fixtures/overlay.png"),
        Bucket = @default.Name,
    });

    var defaultJob = new Gcp.Transcoder.Job("default", new()
    {
        Location = "us-central1",
        Config = new Gcp.Transcoder.Inputs.JobConfigArgs
        {
            Inputs = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigInputArgs
                {
                    Key = "input0",
                    Uri = Output.Tuple(@default.Name, exampleMp4.Name).Apply(values =>
                    {
                        var defaultName = values.Item1;
                        var exampleMp4Name = values.Item2;
                        return $"gs://{defaultName}/{exampleMp4Name}";
                    }),
                },
            },
            EditLists = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigEditListArgs
                {
                    Key = "atom0",
                    Inputs = new[]
                    {
                        "input0",
                    },
                    StartTimeOffset = "0s",
                },
            },
            AdBreaks = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigAdBreakArgs
                {
                    StartTimeOffset = "3.500s",
                },
            },
            Overlays = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigOverlayArgs
                {
                    Animations = new[]
                    {
                        new Gcp.Transcoder.Inputs.JobConfigOverlayAnimationArgs
                        {
                            AnimationFade = new Gcp.Transcoder.Inputs.JobConfigOverlayAnimationAnimationFadeArgs
                            {
                                FadeType = "FADE_IN",
                                StartTimeOffset = "1.500s",
                                EndTimeOffset = "3.500s",
                                Xy = new Gcp.Transcoder.Inputs.JobConfigOverlayAnimationAnimationFadeXyArgs
                                {
                                    X = 1,
                                    Y = 0.5,
                                },
                            },
                        },
                    },
                    Image = new Gcp.Transcoder.Inputs.JobConfigOverlayImageArgs
                    {
                        Uri = Output.Tuple(@default.Name, overlayPng.Name).Apply(values =>
                        {
                            var defaultName = values.Item1;
                            var overlayPngName = values.Item2;
                            return $"gs://{defaultName}/{overlayPngName}";
                        }),
                    },
                },
            },
            ElementaryStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
                {
                    Key = "video-stream0",
                    VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 640,
                            HeightPixels = 360,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 550000,
                            VbvFullnessBits = 495000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
                {
                    Key = "video-stream1",
                    VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 1280,
                            HeightPixels = 720,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 2500000,
                            VbvFullnessBits = 2250000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
                {
                    Key = "audio-stream0",
                    AudioStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamAudioStreamArgs
                    {
                        Codec = "aac",
                        BitrateBps = 64000,
                        ChannelCount = 2,
                        ChannelLayouts = new[]
                        {
                            "fl",
                            "fr",
                        },
                        SampleRateHertz = 48000,
                    },
                },
            },
            MuxStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "sd",
                    FileName = "sd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream0",
                        "audio-stream0",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "hd",
                    FileName = "hd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream1",
                        "audio-stream0",
                    },
                },
            },
            Output = new Gcp.Transcoder.Inputs.JobConfigOutputArgs
            {
                Uri = @default.Name.Apply(name => $"gs://{name}/outputs/"),
            },
        },
        Labels = 
        {
            { "label", "key" },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "default", &storage.BucketArgs{
			Name:                     pulumi.String("transcoder-job"),
			Location:                 pulumi.String("US"),
			ForceDestroy:             pulumi.Bool(true),
			UniformBucketLevelAccess: pulumi.Bool(true),
			PublicAccessPrevention:   pulumi.String("enforced"),
		})
		if err != nil {
			return err
		}
		exampleMp4, err := storage.NewBucketObject(ctx, "example_mp4", &storage.BucketObjectArgs{
			Name:   pulumi.String("example.mp4"),
			Source: pulumi.NewFileAsset("./test-fixtures/example.mp4"),
			Bucket: _default.Name,
		})
		if err != nil {
			return err
		}
		overlayPng, err := storage.NewBucketObject(ctx, "overlay_png", &storage.BucketObjectArgs{
			Name:   pulumi.String("overlay.png"),
			Source: pulumi.NewFileAsset("./test-fixtures/overlay.png"),
			Bucket: _default.Name,
		})
		if err != nil {
			return err
		}
		_, err = transcoder.NewJob(ctx, "default", &transcoder.JobArgs{
			Location: pulumi.String("us-central1"),
			Config: &transcoder.JobConfigArgs{
				Inputs: transcoder.JobConfigInputTypeArray{
					&transcoder.JobConfigInputTypeArgs{
						Key: pulumi.String("input0"),
						Uri: pulumi.All(_default.Name, exampleMp4.Name).ApplyT(func(_args []interface{}) (string, error) {
							defaultName := _args[0].(string)
							exampleMp4Name := _args[1].(string)
							return fmt.Sprintf("gs://%v/%v", defaultName, exampleMp4Name), nil
						}).(pulumi.StringOutput),
					},
				},
				EditLists: transcoder.JobConfigEditListArray{
					&transcoder.JobConfigEditListArgs{
						Key: pulumi.String("atom0"),
						Inputs: pulumi.StringArray{
							pulumi.String("input0"),
						},
						StartTimeOffset: pulumi.String("0s"),
					},
				},
				AdBreaks: transcoder.JobConfigAdBreakArray{
					&transcoder.JobConfigAdBreakArgs{
						StartTimeOffset: pulumi.String("3.500s"),
					},
				},
				Overlays: transcoder.JobConfigOverlayArray{
					&transcoder.JobConfigOverlayArgs{
						Animations: transcoder.JobConfigOverlayAnimationArray{
							&transcoder.JobConfigOverlayAnimationArgs{
								AnimationFade: &transcoder.JobConfigOverlayAnimationAnimationFadeArgs{
									FadeType:        pulumi.String("FADE_IN"),
									StartTimeOffset: pulumi.String("1.500s"),
									EndTimeOffset:   pulumi.String("3.500s"),
									Xy: &transcoder.JobConfigOverlayAnimationAnimationFadeXyArgs{
										X: pulumi.Float64(1),
										Y: pulumi.Float64(0.5),
									},
								},
							},
						},
						Image: &transcoder.JobConfigOverlayImageArgs{
							Uri: pulumi.All(_default.Name, overlayPng.Name).ApplyT(func(_args []interface{}) (string, error) {
								defaultName := _args[0].(string)
								overlayPngName := _args[1].(string)
								return fmt.Sprintf("gs://%v/%v", defaultName, overlayPngName), nil
							}).(pulumi.StringOutput),
						},
					},
				},
				ElementaryStreams: transcoder.JobConfigElementaryStreamArray{
					&transcoder.JobConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream0"),
						VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(640),
								HeightPixels:    pulumi.Int(360),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(550000),
								VbvFullnessBits: pulumi.Int(495000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream1"),
						VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(1280),
								HeightPixels:    pulumi.Int(720),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(2500000),
								VbvFullnessBits: pulumi.Int(2250000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobConfigElementaryStreamArgs{
						Key: pulumi.String("audio-stream0"),
						AudioStream: &transcoder.JobConfigElementaryStreamAudioStreamArgs{
							Codec:        pulumi.String("aac"),
							BitrateBps:   pulumi.Int(64000),
							ChannelCount: pulumi.Int(2),
							ChannelLayouts: pulumi.StringArray{
								pulumi.String("fl"),
								pulumi.String("fr"),
							},
							SampleRateHertz: pulumi.Int(48000),
						},
					},
				},
				MuxStreams: transcoder.JobConfigMuxStreamArray{
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("sd"),
						FileName:  pulumi.String("sd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream0"),
							pulumi.String("audio-stream0"),
						},
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("hd"),
						FileName:  pulumi.String("hd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream1"),
							pulumi.String("audio-stream0"),
						},
					},
				},
				Output: &transcoder.JobConfigOutputTypeArgs{
					Uri: _default.Name.ApplyT(func(name string) (string, error) {
						return fmt.Sprintf("gs://%v/outputs/", name), nil
					}).(pulumi.StringOutput),
				},
			},
			Labels: pulumi.StringMap{
				"label": pulumi.String("key"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.transcoder.Job;
import com.pulumi.gcp.transcoder.JobArgs;
import com.pulumi.gcp.transcoder.inputs.JobConfigArgs;
import com.pulumi.gcp.transcoder.inputs.JobConfigOutputArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Bucket("default", BucketArgs.builder()
            .name("transcoder-job")
            .location("US")
            .forceDestroy(true)
            .uniformBucketLevelAccess(true)
            .publicAccessPrevention("enforced")
            .build());

        var exampleMp4 = new BucketObject("exampleMp4", BucketObjectArgs.builder()
            .name("example.mp4")
            .source(new FileAsset("./test-fixtures/example.mp4"))
            .bucket(default_.name())
            .build());

        var overlayPng = new BucketObject("overlayPng", BucketObjectArgs.builder()
            .name("overlay.png")
            .source(new FileAsset("./test-fixtures/overlay.png"))
            .bucket(default_.name())
            .build());

        var defaultJob = new Job("defaultJob", JobArgs.builder()
            .location("us-central1")
            .config(JobConfigArgs.builder()
                .inputs(JobConfigInputArgs.builder()
                    .key("input0")
                    .uri(Output.tuple(default_.name(), exampleMp4.name()).applyValue(values -> {
                        var defaultName = values.t1;
                        var exampleMp4Name = values.t2;
                        return String.format("gs://%s/%s", defaultName,exampleMp4Name);
                    }))
                    .build())
                .editLists(JobConfigEditListArgs.builder()
                    .key("atom0")
                    .inputs("input0")
                    .startTimeOffset("0s")
                    .build())
                .adBreaks(JobConfigAdBreakArgs.builder()
                    .startTimeOffset("3.500s")
                    .build())
                .overlays(JobConfigOverlayArgs.builder()
                    .animations(JobConfigOverlayAnimationArgs.builder()
                        .animationFade(JobConfigOverlayAnimationAnimationFadeArgs.builder()
                            .fadeType("FADE_IN")
                            .startTimeOffset("1.500s")
                            .endTimeOffset("3.500s")
                            .xy(JobConfigOverlayAnimationAnimationFadeXyArgs.builder()
                                .x(1)
                                .y(0.5)
                                .build())
                            .build())
                        .build())
                    .image(JobConfigOverlayImageArgs.builder()
                        .uri(Output.tuple(default_.name(), overlayPng.name()).applyValue(values -> {
                            var defaultName = values.t1;
                            var overlayPngName = values.t2;
                            return String.format("gs://%s/%s", defaultName,overlayPngName);
                        }))
                        .build())
                    .build())
                .elementaryStreams(                
                    JobConfigElementaryStreamArgs.builder()
                        .key("video-stream0")
                        .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(640)
                                .heightPixels(360)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(550000)
                                .vbvFullnessBits(495000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobConfigElementaryStreamArgs.builder()
                        .key("video-stream1")
                        .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(1280)
                                .heightPixels(720)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(2500000)
                                .vbvFullnessBits(2250000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobConfigElementaryStreamArgs.builder()
                        .key("audio-stream0")
                        .audioStream(JobConfigElementaryStreamAudioStreamArgs.builder()
                            .codec("aac")
                            .bitrateBps(64000)
                            .channelCount(2)
                            .channelLayouts(                            
                                "fl",
                                "fr")
                            .sampleRateHertz(48000)
                            .build())
                        .build())
                .muxStreams(                
                    JobConfigMuxStreamArgs.builder()
                        .key("sd")
                        .fileName("sd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream0",
                            "audio-stream0")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("hd")
                        .fileName("hd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream1",
                            "audio-stream0")
                        .build())
                .output(JobConfigOutputArgs.builder()
                    .uri(default_.name().applyValue(name -> String.format("gs://%s/outputs/", name)))
                    .build())
                .build())
            .labels(Map.of("label", "key"))
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:storage:Bucket
    properties:
      name: transcoder-job
      location: US
      forceDestroy: true
      uniformBucketLevelAccess: true
      publicAccessPrevention: enforced
  exampleMp4:
    type: gcp:storage:BucketObject
    name: example_mp4
    properties:
      name: example.mp4
      source:
        fn::FileAsset: ./test-fixtures/example.mp4
      bucket: ${default.name}
  overlayPng:
    type: gcp:storage:BucketObject
    name: overlay_png
    properties:
      name: overlay.png
      source:
        fn::FileAsset: ./test-fixtures/overlay.png
      bucket: ${default.name}
  defaultJob:
    type: gcp:transcoder:Job
    name: default
    properties:
      location: us-central1
      config:
        inputs:
          - key: input0
            uri: gs://${default.name}/${exampleMp4.name}
        editLists:
          - key: atom0
            inputs:
              - input0
            startTimeOffset: 0s
        adBreaks:
          - startTimeOffset: 3.500s
        overlays:
          - animations:
              - animationFade:
                  fadeType: FADE_IN
                  startTimeOffset: 1.500s
                  endTimeOffset: 3.500s
                  xy:
                    x: 1
                    y: 0.5
            image:
              uri: gs://${default.name}/${overlayPng.name}
        elementaryStreams:
          - key: video-stream0
            videoStream:
              h264:
                widthPixels: 640
                heightPixels: 360
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 550000
                vbvFullnessBits: 495000
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: video-stream1
            videoStream:
              h264:
                widthPixels: 1280
                heightPixels: 720
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 2.5e+06
                vbvFullnessBits: 2.25e+06
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: audio-stream0
            audioStream:
              codec: aac
              bitrateBps: 64000
              channelCount: 2
              channelLayouts:
                - fl
                - fr
              sampleRateHertz: 48000
        muxStreams:
          - key: sd
            fileName: sd.mp4
            container: mp4
            elementaryStreams:
              - video-stream0
              - audio-stream0
          - key: hd
            fileName: hd.mp4
            container: mp4
            elementaryStreams:
              - video-stream1
              - audio-stream0
        output:
          uri: gs://${default.name}/outputs/
      labels:
        label: key
```
<!--End PulumiCodeChooser -->
### Transcoder Job Manifests


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.storage.Bucket("default", {
    name: "transcoder-job",
    location: "US",
    forceDestroy: true,
    uniformBucketLevelAccess: true,
    publicAccessPrevention: "enforced",
});
const exampleMp4 = new gcp.storage.BucketObject("example_mp4", {
    name: "example.mp4",
    source: new pulumi.asset.FileAsset("./test-fixtures/example.mp4"),
    bucket: _default.name,
});
const defaultJob = new gcp.transcoder.Job("default", {
    location: "us-central1",
    config: {
        inputs: [{
            key: "input0",
            uri: pulumi.interpolate`gs://${_default.name}/${exampleMp4.name}`,
        }],
        editLists: [{
            key: "atom0",
            startTimeOffset: "0s",
            inputs: ["input0"],
        }],
        adBreaks: [{
            startTimeOffset: "3.500s",
        }],
        elementaryStreams: [
            {
                key: "video-stream0",
                videoStream: {
                    h264: {
                        widthPixels: 640,
                        heightPixels: 360,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 550000,
                        vbvFullnessBits: 495000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "video-stream1",
                videoStream: {
                    h264: {
                        widthPixels: 1280,
                        heightPixels: 720,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 2500000,
                        vbvFullnessBits: 2250000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "audio-stream0",
                audioStream: {
                    codec: "aac",
                    bitrateBps: 64000,
                    channelCount: 2,
                    channelLayouts: [
                        "fl",
                        "fr",
                    ],
                    sampleRateHertz: 48000,
                },
            },
        ],
        muxStreams: [
            {
                key: "sd",
                fileName: "sd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                key: "hd",
                fileName: "hd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
            {
                key: "media-sd",
                fileName: "media-sd.ts",
                container: "ts",
                elementaryStreams: [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                key: "media-hd",
                fileName: "media-hd.ts",
                container: "ts",
                elementaryStreams: [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
            {
                key: "video-only-sd",
                fileName: "video-only-sd.m4s",
                container: "fmp4",
                elementaryStreams: ["video-stream0"],
            },
            {
                key: "video-only-hd",
                fileName: "video-only-hd.m4s",
                container: "fmp4",
                elementaryStreams: ["video-stream1"],
            },
            {
                key: "audio-only",
                fileName: "audio-only.m4s",
                container: "fmp4",
                elementaryStreams: ["audio-stream0"],
            },
        ],
        manifests: [
            {
                fileName: "manifest.m3u8",
                type: "HLS",
                muxStreams: [
                    "media-sd",
                    "media-hd",
                ],
            },
            {
                fileName: "manifest.mpd",
                type: "DASH",
                muxStreams: [
                    "video-only-sd",
                    "video-only-hd",
                    "audio-only",
                ],
            },
        ],
        output: {
            uri: pulumi.interpolate`gs://${_default.name}/outputs/`,
        },
    },
    labels: {
        label: "key",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.storage.Bucket("default",
    name="transcoder-job",
    location="US",
    force_destroy=True,
    uniform_bucket_level_access=True,
    public_access_prevention="enforced")
example_mp4 = gcp.storage.BucketObject("example_mp4",
    name="example.mp4",
    source=pulumi.FileAsset("./test-fixtures/example.mp4"),
    bucket=default.name)
default_job = gcp.transcoder.Job("default",
    location="us-central1",
    config={
        "inputs": [{
            "key": "input0",
            "uri": pulumi.Output.all(
                defaultName=default.name,
                exampleMp4Name=example_mp4.name
).apply(lambda resolved_outputs: f"gs://{resolved_outputs['defaultName']}/{resolved_outputs['exampleMp4Name']}")
,
        }],
        "edit_lists": [{
            "key": "atom0",
            "start_time_offset": "0s",
            "inputs": ["input0"],
        }],
        "ad_breaks": [{
            "start_time_offset": "3.500s",
        }],
        "elementary_streams": [
            {
                "key": "video-stream0",
                "video_stream": {
                    "h264": {
                        "width_pixels": 640,
                        "height_pixels": 360,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 550000,
                        "vbv_fullness_bits": 495000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "video-stream1",
                "video_stream": {
                    "h264": {
                        "width_pixels": 1280,
                        "height_pixels": 720,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 2500000,
                        "vbv_fullness_bits": 2250000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "audio-stream0",
                "audio_stream": {
                    "codec": "aac",
                    "bitrate_bps": 64000,
                    "channel_count": 2,
                    "channel_layouts": [
                        "fl",
                        "fr",
                    ],
                    "sample_rate_hertz": 48000,
                },
            },
        ],
        "mux_streams": [
            {
                "key": "sd",
                "file_name": "sd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                "key": "hd",
                "file_name": "hd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
            {
                "key": "media-sd",
                "file_name": "media-sd.ts",
                "container": "ts",
                "elementary_streams": [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                "key": "media-hd",
                "file_name": "media-hd.ts",
                "container": "ts",
                "elementary_streams": [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
            {
                "key": "video-only-sd",
                "file_name": "video-only-sd.m4s",
                "container": "fmp4",
                "elementary_streams": ["video-stream0"],
            },
            {
                "key": "video-only-hd",
                "file_name": "video-only-hd.m4s",
                "container": "fmp4",
                "elementary_streams": ["video-stream1"],
            },
            {
                "key": "audio-only",
                "file_name": "audio-only.m4s",
                "container": "fmp4",
                "elementary_streams": ["audio-stream0"],
            },
        ],
        "manifests": [
            {
                "file_name": "manifest.m3u8",
                "type": "HLS",
                "mux_streams": [
                    "media-sd",
                    "media-hd",
                ],
            },
            {
                "file_name": "manifest.mpd",
                "type": "DASH",
                "mux_streams": [
                    "video-only-sd",
                    "video-only-hd",
                    "audio-only",
                ],
            },
        ],
        "output": {
            "uri": default.name.apply(lambda name: f"gs://{name}/outputs/"),
        },
    },
    labels={
        "label": "key",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.Storage.Bucket("default", new()
    {
        Name = "transcoder-job",
        Location = "US",
        ForceDestroy = true,
        UniformBucketLevelAccess = true,
        PublicAccessPrevention = "enforced",
    });

    var exampleMp4 = new Gcp.Storage.BucketObject("example_mp4", new()
    {
        Name = "example.mp4",
        Source = new FileAsset("./test-fixtures/example.mp4"),
        Bucket = @default.Name,
    });

    var defaultJob = new Gcp.Transcoder.Job("default", new()
    {
        Location = "us-central1",
        Config = new Gcp.Transcoder.Inputs.JobConfigArgs
        {
            Inputs = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigInputArgs
                {
                    Key = "input0",
                    Uri = Output.Tuple(@default.Name, exampleMp4.Name).Apply(values =>
                    {
                        var defaultName = values.Item1;
                        var exampleMp4Name = values.Item2;
                        return $"gs://{defaultName}/{exampleMp4Name}";
                    }),
                },
            },
            EditLists = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigEditListArgs
                {
                    Key = "atom0",
                    StartTimeOffset = "0s",
                    Inputs = new[]
                    {
                        "input0",
                    },
                },
            },
            AdBreaks = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigAdBreakArgs
                {
                    StartTimeOffset = "3.500s",
                },
            },
            ElementaryStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
                {
                    Key = "video-stream0",
                    VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 640,
                            HeightPixels = 360,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 550000,
                            VbvFullnessBits = 495000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
                {
                    Key = "video-stream1",
                    VideoStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 1280,
                            HeightPixels = 720,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 2500000,
                            VbvFullnessBits = 2250000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigElementaryStreamArgs
                {
                    Key = "audio-stream0",
                    AudioStream = new Gcp.Transcoder.Inputs.JobConfigElementaryStreamAudioStreamArgs
                    {
                        Codec = "aac",
                        BitrateBps = 64000,
                        ChannelCount = 2,
                        ChannelLayouts = new[]
                        {
                            "fl",
                            "fr",
                        },
                        SampleRateHertz = 48000,
                    },
                },
            },
            MuxStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "sd",
                    FileName = "sd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream0",
                        "audio-stream0",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "hd",
                    FileName = "hd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream1",
                        "audio-stream0",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "media-sd",
                    FileName = "media-sd.ts",
                    Container = "ts",
                    ElementaryStreams = new[]
                    {
                        "video-stream0",
                        "audio-stream0",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "media-hd",
                    FileName = "media-hd.ts",
                    Container = "ts",
                    ElementaryStreams = new[]
                    {
                        "video-stream1",
                        "audio-stream0",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "video-only-sd",
                    FileName = "video-only-sd.m4s",
                    Container = "fmp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream0",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "video-only-hd",
                    FileName = "video-only-hd.m4s",
                    Container = "fmp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream1",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigMuxStreamArgs
                {
                    Key = "audio-only",
                    FileName = "audio-only.m4s",
                    Container = "fmp4",
                    ElementaryStreams = new[]
                    {
                        "audio-stream0",
                    },
                },
            },
            Manifests = new[]
            {
                new Gcp.Transcoder.Inputs.JobConfigManifestArgs
                {
                    FileName = "manifest.m3u8",
                    Type = "HLS",
                    MuxStreams = new[]
                    {
                        "media-sd",
                        "media-hd",
                    },
                },
                new Gcp.Transcoder.Inputs.JobConfigManifestArgs
                {
                    FileName = "manifest.mpd",
                    Type = "DASH",
                    MuxStreams = new[]
                    {
                        "video-only-sd",
                        "video-only-hd",
                        "audio-only",
                    },
                },
            },
            Output = new Gcp.Transcoder.Inputs.JobConfigOutputArgs
            {
                Uri = @default.Name.Apply(name => $"gs://{name}/outputs/"),
            },
        },
        Labels = 
        {
            { "label", "key" },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.NewBucket(ctx, "default", &storage.BucketArgs{
			Name:                     pulumi.String("transcoder-job"),
			Location:                 pulumi.String("US"),
			ForceDestroy:             pulumi.Bool(true),
			UniformBucketLevelAccess: pulumi.Bool(true),
			PublicAccessPrevention:   pulumi.String("enforced"),
		})
		if err != nil {
			return err
		}
		exampleMp4, err := storage.NewBucketObject(ctx, "example_mp4", &storage.BucketObjectArgs{
			Name:   pulumi.String("example.mp4"),
			Source: pulumi.NewFileAsset("./test-fixtures/example.mp4"),
			Bucket: _default.Name,
		})
		if err != nil {
			return err
		}
		_, err = transcoder.NewJob(ctx, "default", &transcoder.JobArgs{
			Location: pulumi.String("us-central1"),
			Config: &transcoder.JobConfigArgs{
				Inputs: transcoder.JobConfigInputTypeArray{
					&transcoder.JobConfigInputTypeArgs{
						Key: pulumi.String("input0"),
						Uri: pulumi.All(_default.Name, exampleMp4.Name).ApplyT(func(_args []interface{}) (string, error) {
							defaultName := _args[0].(string)
							exampleMp4Name := _args[1].(string)
							return fmt.Sprintf("gs://%v/%v", defaultName, exampleMp4Name), nil
						}).(pulumi.StringOutput),
					},
				},
				EditLists: transcoder.JobConfigEditListArray{
					&transcoder.JobConfigEditListArgs{
						Key:             pulumi.String("atom0"),
						StartTimeOffset: pulumi.String("0s"),
						Inputs: pulumi.StringArray{
							pulumi.String("input0"),
						},
					},
				},
				AdBreaks: transcoder.JobConfigAdBreakArray{
					&transcoder.JobConfigAdBreakArgs{
						StartTimeOffset: pulumi.String("3.500s"),
					},
				},
				ElementaryStreams: transcoder.JobConfigElementaryStreamArray{
					&transcoder.JobConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream0"),
						VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(640),
								HeightPixels:    pulumi.Int(360),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(550000),
								VbvFullnessBits: pulumi.Int(495000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream1"),
						VideoStream: &transcoder.JobConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(1280),
								HeightPixels:    pulumi.Int(720),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(2500000),
								VbvFullnessBits: pulumi.Int(2250000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobConfigElementaryStreamArgs{
						Key: pulumi.String("audio-stream0"),
						AudioStream: &transcoder.JobConfigElementaryStreamAudioStreamArgs{
							Codec:        pulumi.String("aac"),
							BitrateBps:   pulumi.Int(64000),
							ChannelCount: pulumi.Int(2),
							ChannelLayouts: pulumi.StringArray{
								pulumi.String("fl"),
								pulumi.String("fr"),
							},
							SampleRateHertz: pulumi.Int(48000),
						},
					},
				},
				MuxStreams: transcoder.JobConfigMuxStreamArray{
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("sd"),
						FileName:  pulumi.String("sd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream0"),
							pulumi.String("audio-stream0"),
						},
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("hd"),
						FileName:  pulumi.String("hd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream1"),
							pulumi.String("audio-stream0"),
						},
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("media-sd"),
						FileName:  pulumi.String("media-sd.ts"),
						Container: pulumi.String("ts"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream0"),
							pulumi.String("audio-stream0"),
						},
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("media-hd"),
						FileName:  pulumi.String("media-hd.ts"),
						Container: pulumi.String("ts"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream1"),
							pulumi.String("audio-stream0"),
						},
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("video-only-sd"),
						FileName:  pulumi.String("video-only-sd.m4s"),
						Container: pulumi.String("fmp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream0"),
						},
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("video-only-hd"),
						FileName:  pulumi.String("video-only-hd.m4s"),
						Container: pulumi.String("fmp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream1"),
						},
					},
					&transcoder.JobConfigMuxStreamArgs{
						Key:       pulumi.String("audio-only"),
						FileName:  pulumi.String("audio-only.m4s"),
						Container: pulumi.String("fmp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("audio-stream0"),
						},
					},
				},
				Manifests: transcoder.JobConfigManifestArray{
					&transcoder.JobConfigManifestArgs{
						FileName: pulumi.String("manifest.m3u8"),
						Type:     pulumi.String("HLS"),
						MuxStreams: pulumi.StringArray{
							pulumi.String("media-sd"),
							pulumi.String("media-hd"),
						},
					},
					&transcoder.JobConfigManifestArgs{
						FileName: pulumi.String("manifest.mpd"),
						Type:     pulumi.String("DASH"),
						MuxStreams: pulumi.StringArray{
							pulumi.String("video-only-sd"),
							pulumi.String("video-only-hd"),
							pulumi.String("audio-only"),
						},
					},
				},
				Output: &transcoder.JobConfigOutputTypeArgs{
					Uri: _default.Name.ApplyT(func(name string) (string, error) {
						return fmt.Sprintf("gs://%v/outputs/", name), nil
					}).(pulumi.StringOutput),
				},
			},
			Labels: pulumi.StringMap{
				"label": pulumi.String("key"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.transcoder.Job;
import com.pulumi.gcp.transcoder.JobArgs;
import com.pulumi.gcp.transcoder.inputs.JobConfigArgs;
import com.pulumi.gcp.transcoder.inputs.JobConfigOutputArgs;
import com.pulumi.asset.FileAsset;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new Bucket("default", BucketArgs.builder()
            .name("transcoder-job")
            .location("US")
            .forceDestroy(true)
            .uniformBucketLevelAccess(true)
            .publicAccessPrevention("enforced")
            .build());

        var exampleMp4 = new BucketObject("exampleMp4", BucketObjectArgs.builder()
            .name("example.mp4")
            .source(new FileAsset("./test-fixtures/example.mp4"))
            .bucket(default_.name())
            .build());

        var defaultJob = new Job("defaultJob", JobArgs.builder()
            .location("us-central1")
            .config(JobConfigArgs.builder()
                .inputs(JobConfigInputArgs.builder()
                    .key("input0")
                    .uri(Output.tuple(default_.name(), exampleMp4.name()).applyValue(values -> {
                        var defaultName = values.t1;
                        var exampleMp4Name = values.t2;
                        return String.format("gs://%s/%s", defaultName,exampleMp4Name);
                    }))
                    .build())
                .editLists(JobConfigEditListArgs.builder()
                    .key("atom0")
                    .startTimeOffset("0s")
                    .inputs("input0")
                    .build())
                .adBreaks(JobConfigAdBreakArgs.builder()
                    .startTimeOffset("3.500s")
                    .build())
                .elementaryStreams(                
                    JobConfigElementaryStreamArgs.builder()
                        .key("video-stream0")
                        .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(640)
                                .heightPixels(360)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(550000)
                                .vbvFullnessBits(495000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobConfigElementaryStreamArgs.builder()
                        .key("video-stream1")
                        .videoStream(JobConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(1280)
                                .heightPixels(720)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(2500000)
                                .vbvFullnessBits(2250000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobConfigElementaryStreamArgs.builder()
                        .key("audio-stream0")
                        .audioStream(JobConfigElementaryStreamAudioStreamArgs.builder()
                            .codec("aac")
                            .bitrateBps(64000)
                            .channelCount(2)
                            .channelLayouts(                            
                                "fl",
                                "fr")
                            .sampleRateHertz(48000)
                            .build())
                        .build())
                .muxStreams(                
                    JobConfigMuxStreamArgs.builder()
                        .key("sd")
                        .fileName("sd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream0",
                            "audio-stream0")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("hd")
                        .fileName("hd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream1",
                            "audio-stream0")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("media-sd")
                        .fileName("media-sd.ts")
                        .container("ts")
                        .elementaryStreams(                        
                            "video-stream0",
                            "audio-stream0")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("media-hd")
                        .fileName("media-hd.ts")
                        .container("ts")
                        .elementaryStreams(                        
                            "video-stream1",
                            "audio-stream0")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("video-only-sd")
                        .fileName("video-only-sd.m4s")
                        .container("fmp4")
                        .elementaryStreams("video-stream0")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("video-only-hd")
                        .fileName("video-only-hd.m4s")
                        .container("fmp4")
                        .elementaryStreams("video-stream1")
                        .build(),
                    JobConfigMuxStreamArgs.builder()
                        .key("audio-only")
                        .fileName("audio-only.m4s")
                        .container("fmp4")
                        .elementaryStreams("audio-stream0")
                        .build())
                .manifests(                
                    JobConfigManifestArgs.builder()
                        .fileName("manifest.m3u8")
                        .type("HLS")
                        .muxStreams(                        
                            "media-sd",
                            "media-hd")
                        .build(),
                    JobConfigManifestArgs.builder()
                        .fileName("manifest.mpd")
                        .type("DASH")
                        .muxStreams(                        
                            "video-only-sd",
                            "video-only-hd",
                            "audio-only")
                        .build())
                .output(JobConfigOutputArgs.builder()
                    .uri(default_.name().applyValue(name -> String.format("gs://%s/outputs/", name)))
                    .build())
                .build())
            .labels(Map.of("label", "key"))
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:storage:Bucket
    properties:
      name: transcoder-job
      location: US
      forceDestroy: true
      uniformBucketLevelAccess: true
      publicAccessPrevention: enforced
  exampleMp4:
    type: gcp:storage:BucketObject
    name: example_mp4
    properties:
      name: example.mp4
      source:
        fn::FileAsset: ./test-fixtures/example.mp4
      bucket: ${default.name}
  defaultJob:
    type: gcp:transcoder:Job
    name: default
    properties:
      location: us-central1
      config:
        inputs:
          - key: input0
            uri: gs://${default.name}/${exampleMp4.name}
        editLists:
          - key: atom0
            startTimeOffset: 0s
            inputs:
              - input0
        adBreaks:
          - startTimeOffset: 3.500s
        elementaryStreams:
          - key: video-stream0
            videoStream:
              h264:
                widthPixels: 640
                heightPixels: 360
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 550000
                vbvFullnessBits: 495000
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: video-stream1
            videoStream:
              h264:
                widthPixels: 1280
                heightPixels: 720
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 2.5e+06
                vbvFullnessBits: 2.25e+06
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: audio-stream0
            audioStream:
              codec: aac
              bitrateBps: 64000
              channelCount: 2
              channelLayouts:
                - fl
                - fr
              sampleRateHertz: 48000
        muxStreams:
          - key: sd
            fileName: sd.mp4
            container: mp4
            elementaryStreams:
              - video-stream0
              - audio-stream0
          - key: hd
            fileName: hd.mp4
            container: mp4
            elementaryStreams:
              - video-stream1
              - audio-stream0
          - key: media-sd
            fileName: media-sd.ts
            container: ts
            elementaryStreams:
              - video-stream0
              - audio-stream0
          - key: media-hd
            fileName: media-hd.ts
            container: ts
            elementaryStreams:
              - video-stream1
              - audio-stream0
          - key: video-only-sd
            fileName: video-only-sd.m4s
            container: fmp4
            elementaryStreams:
              - video-stream0
          - key: video-only-hd
            fileName: video-only-hd.m4s
            container: fmp4
            elementaryStreams:
              - video-stream1
          - key: audio-only
            fileName: audio-only.m4s
            container: fmp4
            elementaryStreams:
              - audio-stream0
        manifests:
          - fileName: manifest.m3u8
            type: HLS
            muxStreams:
              - media-sd
              - media-hd
          - fileName: manifest.mpd
            type: DASH
            muxStreams:
              - video-only-sd
              - video-only-hd
              - audio-only
        output:
          uri: gs://${default.name}/outputs/
      labels:
        label: key
```
<!--End PulumiCodeChooser -->

## Import

Job can be imported using any of these accepted formats:

* `{{project}}/{{name}}`

* `{{project}} {{name}}`

* `{{name}}`

When using the `pulumi import` command, Job can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:transcoder/job:Job default {{project}}/{{name}}
```

```sh
$ pulumi import gcp:transcoder/job:Job default "{{project}} {{name}}"
```

```sh
$ pulumi import gcp:transcoder/job:Job default {{name}}
```

С
configAB?:=
;

transcoder	JobConfig"gcp:transcoder/JobConfig:JobConfigDThe configuration for this template.
Structure is documented below.
▓
labelsB2" ЯThe labels associated with this job. You can use these to organize and group your jobs.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
F
location" 6The location of the transcoding job resource.


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
П

templateIdB" {Specify the templateId to use for populating Job.config.
The default is preset/web-hd, which is the only supported preset.
"П
config?:=
;

transcoder	JobConfig"gcp:transcoder/JobConfig:JobConfigDThe configuration for this template.
Structure is documented below.
"0

createTime" The time the job was created.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"2
endTime" #The time the transcoding finished.
"▓
labelsB2" ЯThe labels associated with this job. You can use these to organize and group your jobs.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"F
location" 6The location of the transcoding job resource.


- - -
"*
name" The resource name of the job.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"3
	startTime" "The time the transcoding started.
"+
state" The current state of the job.
"Н

templateId" {Specify the templateId to use for populating Job.config.
The default is preset/web-hd, which is the only supported preset.
*х¤
A

transcoderJobTemplate&gcp:transcoder/jobTemplate:JobTemplate╢юTranscoding Job Template Resource


To get more information about JobTemplate, see:

* [API documentation](https://cloud.google.com/transcoder/docs/reference/rest/v1/projects.locations.jobTemplates)
* How-to Guides
    * [Transcoder](https://cloud.google.com/transcoder/docs/)

## Example Usage

### Transcoder Job Template Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.transcoder.JobTemplate("default", {
    jobTemplateId: "example-job-template",
    location: "us-central1",
    config: {
        inputs: [{
            key: "input0",
        }],
        editLists: [{
            key: "atom0",
            inputs: ["input0"],
            startTimeOffset: "0s",
        }],
        adBreaks: [{
            startTimeOffset: "3.500s",
        }],
        elementaryStreams: [
            {
                key: "video-stream0",
                videoStream: {
                    h264: {
                        widthPixels: 640,
                        heightPixels: 360,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 550000,
                        vbvFullnessBits: 495000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "video-stream1",
                videoStream: {
                    h264: {
                        widthPixels: 1280,
                        heightPixels: 720,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 2500000,
                        vbvFullnessBits: 2250000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "audio-stream0",
                audioStream: {
                    codec: "aac",
                    bitrateBps: 64000,
                    channelCount: 2,
                    channelLayouts: [
                        "fl",
                        "fr",
                    ],
                    sampleRateHertz: 48000,
                },
            },
        ],
        muxStreams: [
            {
                key: "sd",
                fileName: "sd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                key: "hd",
                fileName: "hd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
    },
    labels: {
        label: "key",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.transcoder.JobTemplate("default",
    job_template_id="example-job-template",
    location="us-central1",
    config={
        "inputs": [{
            "key": "input0",
        }],
        "edit_lists": [{
            "key": "atom0",
            "inputs": ["input0"],
            "start_time_offset": "0s",
        }],
        "ad_breaks": [{
            "start_time_offset": "3.500s",
        }],
        "elementary_streams": [
            {
                "key": "video-stream0",
                "video_stream": {
                    "h264": {
                        "width_pixels": 640,
                        "height_pixels": 360,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 550000,
                        "vbv_fullness_bits": 495000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "video-stream1",
                "video_stream": {
                    "h264": {
                        "width_pixels": 1280,
                        "height_pixels": 720,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 2500000,
                        "vbv_fullness_bits": 2250000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "audio-stream0",
                "audio_stream": {
                    "codec": "aac",
                    "bitrate_bps": 64000,
                    "channel_count": 2,
                    "channel_layouts": [
                        "fl",
                        "fr",
                    ],
                    "sample_rate_hertz": 48000,
                },
            },
        ],
        "mux_streams": [
            {
                "key": "sd",
                "file_name": "sd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                "key": "hd",
                "file_name": "hd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
    },
    labels={
        "label": "key",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.Transcoder.JobTemplate("default", new()
    {
        JobTemplateId = "example-job-template",
        Location = "us-central1",
        Config = new Gcp.Transcoder.Inputs.JobTemplateConfigArgs
        {
            Inputs = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigInputArgs
                {
                    Key = "input0",
                },
            },
            EditLists = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigEditListArgs
                {
                    Key = "atom0",
                    Inputs = new[]
                    {
                        "input0",
                    },
                    StartTimeOffset = "0s",
                },
            },
            AdBreaks = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigAdBreakArgs
                {
                    StartTimeOffset = "3.500s",
                },
            },
            ElementaryStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "video-stream0",
                    VideoStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 640,
                            HeightPixels = 360,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 550000,
                            VbvFullnessBits = 495000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "video-stream1",
                    VideoStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 1280,
                            HeightPixels = 720,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 2500000,
                            VbvFullnessBits = 2250000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "audio-stream0",
                    AudioStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamAudioStreamArgs
                    {
                        Codec = "aac",
                        BitrateBps = 64000,
                        ChannelCount = 2,
                        ChannelLayouts = new[]
                        {
                            "fl",
                            "fr",
                        },
                        SampleRateHertz = 48000,
                    },
                },
            },
            MuxStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "sd",
                    FileName = "sd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream0",
                        "audio-stream0",
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "hd",
                    FileName = "hd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream1",
                        "audio-stream0",
                    },
                },
            },
        },
        Labels = 
        {
            { "label", "key" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := transcoder.NewJobTemplate(ctx, "default", &transcoder.JobTemplateArgs{
			JobTemplateId: pulumi.String("example-job-template"),
			Location:      pulumi.String("us-central1"),
			Config: &transcoder.JobTemplateConfigArgs{
				Inputs: transcoder.JobTemplateConfigInputTypeArray{
					&transcoder.JobTemplateConfigInputTypeArgs{
						Key: pulumi.String("input0"),
					},
				},
				EditLists: transcoder.JobTemplateConfigEditListArray{
					&transcoder.JobTemplateConfigEditListArgs{
						Key: pulumi.String("atom0"),
						Inputs: pulumi.StringArray{
							pulumi.String("input0"),
						},
						StartTimeOffset: pulumi.String("0s"),
					},
				},
				AdBreaks: transcoder.JobTemplateConfigAdBreakArray{
					&transcoder.JobTemplateConfigAdBreakArgs{
						StartTimeOffset: pulumi.String("3.500s"),
					},
				},
				ElementaryStreams: transcoder.JobTemplateConfigElementaryStreamArray{
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream0"),
						VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(640),
								HeightPixels:    pulumi.Int(360),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(550000),
								VbvFullnessBits: pulumi.Int(495000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream1"),
						VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(1280),
								HeightPixels:    pulumi.Int(720),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(2500000),
								VbvFullnessBits: pulumi.Int(2250000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("audio-stream0"),
						AudioStream: &transcoder.JobTemplateConfigElementaryStreamAudioStreamArgs{
							Codec:        pulumi.String("aac"),
							BitrateBps:   pulumi.Int(64000),
							ChannelCount: pulumi.Int(2),
							ChannelLayouts: pulumi.StringArray{
								pulumi.String("fl"),
								pulumi.String("fr"),
							},
							SampleRateHertz: pulumi.Int(48000),
						},
					},
				},
				MuxStreams: transcoder.JobTemplateConfigMuxStreamArray{
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("sd"),
						FileName:  pulumi.String("sd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream0"),
							pulumi.String("audio-stream0"),
						},
					},
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("hd"),
						FileName:  pulumi.String("hd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream1"),
							pulumi.String("audio-stream0"),
						},
					},
				},
			},
			Labels: pulumi.StringMap{
				"label": pulumi.String("key"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.transcoder.JobTemplate;
import com.pulumi.gcp.transcoder.JobTemplateArgs;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new JobTemplate("default", JobTemplateArgs.builder()
            .jobTemplateId("example-job-template")
            .location("us-central1")
            .config(JobTemplateConfigArgs.builder()
                .inputs(JobTemplateConfigInputArgs.builder()
                    .key("input0")
                    .build())
                .editLists(JobTemplateConfigEditListArgs.builder()
                    .key("atom0")
                    .inputs("input0")
                    .startTimeOffset("0s")
                    .build())
                .adBreaks(JobTemplateConfigAdBreakArgs.builder()
                    .startTimeOffset("3.500s")
                    .build())
                .elementaryStreams(                
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("video-stream0")
                        .videoStream(JobTemplateConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobTemplateConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(640)
                                .heightPixels(360)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(550000)
                                .vbvFullnessBits(495000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("video-stream1")
                        .videoStream(JobTemplateConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobTemplateConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(1280)
                                .heightPixels(720)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(2500000)
                                .vbvFullnessBits(2250000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("audio-stream0")
                        .audioStream(JobTemplateConfigElementaryStreamAudioStreamArgs.builder()
                            .codec("aac")
                            .bitrateBps(64000)
                            .channelCount(2)
                            .channelLayouts(                            
                                "fl",
                                "fr")
                            .sampleRateHertz(48000)
                            .build())
                        .build())
                .muxStreams(                
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("sd")
                        .fileName("sd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream0",
                            "audio-stream0")
                        .build(),
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("hd")
                        .fileName("hd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream1",
                            "audio-stream0")
                        .build())
                .build())
            .labels(Map.of("label", "key"))
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:transcoder:JobTemplate
    properties:
      jobTemplateId: example-job-template
      location: us-central1
      config:
        inputs:
          - key: input0
        editLists:
          - key: atom0
            inputs:
              - input0
            startTimeOffset: 0s
        adBreaks:
          - startTimeOffset: 3.500s
        elementaryStreams:
          - key: video-stream0
            videoStream:
              h264:
                widthPixels: 640
                heightPixels: 360
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 550000
                vbvFullnessBits: 495000
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: video-stream1
            videoStream:
              h264:
                widthPixels: 1280
                heightPixels: 720
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 2.5e+06
                vbvFullnessBits: 2.25e+06
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: audio-stream0
            audioStream:
              codec: aac
              bitrateBps: 64000
              channelCount: 2
              channelLayouts:
                - fl
                - fr
              sampleRateHertz: 48000
        muxStreams:
          - key: sd
            fileName: sd.mp4
            container: mp4
            elementaryStreams:
              - video-stream0
              - audio-stream0
          - key: hd
            fileName: hd.mp4
            container: mp4
            elementaryStreams:
              - video-stream1
              - audio-stream0
      labels:
        label: key
```
<!--End PulumiCodeChooser -->
### Transcoder Job Template Overlays


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const _default = new gcp.transcoder.JobTemplate("default", {
    jobTemplateId: "example-job-template",
    location: "us-central1",
    config: {
        inputs: [{
            key: "input0",
            uri: "gs://example/example.mp4",
        }],
        output: {
            uri: "gs://example/outputs/",
        },
        editLists: [{
            key: "atom0",
            inputs: ["input0"],
            startTimeOffset: "0s",
        }],
        adBreaks: [{
            startTimeOffset: "3.500s",
        }],
        overlays: [{
            animations: [{
                animationFade: {
                    fadeType: "FADE_IN",
                    startTimeOffset: "1.500s",
                    endTimeOffset: "3.500s",
                    xy: {
                        x: 1,
                        y: 0.5,
                    },
                },
            }],
            image: {
                uri: "gs://example/overlay.png",
            },
        }],
        elementaryStreams: [
            {
                key: "video-stream0",
                videoStream: {
                    h264: {
                        widthPixels: 640,
                        heightPixels: 360,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 550000,
                        vbvFullnessBits: 495000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "video-stream1",
                videoStream: {
                    h264: {
                        widthPixels: 1280,
                        heightPixels: 720,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 2500000,
                        vbvFullnessBits: 2250000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "audio-stream0",
                audioStream: {
                    codec: "aac",
                    bitrateBps: 64000,
                    channelCount: 2,
                    channelLayouts: [
                        "fl",
                        "fr",
                    ],
                    sampleRateHertz: 48000,
                },
            },
        ],
        muxStreams: [
            {
                key: "sd",
                fileName: "sd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                key: "hd",
                fileName: "hd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
    },
    labels: {
        label: "key",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.transcoder.JobTemplate("default",
    job_template_id="example-job-template",
    location="us-central1",
    config={
        "inputs": [{
            "key": "input0",
            "uri": "gs://example/example.mp4",
        }],
        "output": {
            "uri": "gs://example/outputs/",
        },
        "edit_lists": [{
            "key": "atom0",
            "inputs": ["input0"],
            "start_time_offset": "0s",
        }],
        "ad_breaks": [{
            "start_time_offset": "3.500s",
        }],
        "overlays": [{
            "animations": [{
                "animation_fade": {
                    "fade_type": "FADE_IN",
                    "start_time_offset": "1.500s",
                    "end_time_offset": "3.500s",
                    "xy": {
                        "x": 1,
                        "y": 0.5,
                    },
                },
            }],
            "image": {
                "uri": "gs://example/overlay.png",
            },
        }],
        "elementary_streams": [
            {
                "key": "video-stream0",
                "video_stream": {
                    "h264": {
                        "width_pixels": 640,
                        "height_pixels": 360,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 550000,
                        "vbv_fullness_bits": 495000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "video-stream1",
                "video_stream": {
                    "h264": {
                        "width_pixels": 1280,
                        "height_pixels": 720,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 2500000,
                        "vbv_fullness_bits": 2250000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "audio-stream0",
                "audio_stream": {
                    "codec": "aac",
                    "bitrate_bps": 64000,
                    "channel_count": 2,
                    "channel_layouts": [
                        "fl",
                        "fr",
                    ],
                    "sample_rate_hertz": 48000,
                },
            },
        ],
        "mux_streams": [
            {
                "key": "sd",
                "file_name": "sd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                "key": "hd",
                "file_name": "hd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
    },
    labels={
        "label": "key",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = new Gcp.Transcoder.JobTemplate("default", new()
    {
        JobTemplateId = "example-job-template",
        Location = "us-central1",
        Config = new Gcp.Transcoder.Inputs.JobTemplateConfigArgs
        {
            Inputs = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigInputArgs
                {
                    Key = "input0",
                    Uri = "gs://example/example.mp4",
                },
            },
            Output = new Gcp.Transcoder.Inputs.JobTemplateConfigOutputArgs
            {
                Uri = "gs://example/outputs/",
            },
            EditLists = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigEditListArgs
                {
                    Key = "atom0",
                    Inputs = new[]
                    {
                        "input0",
                    },
                    StartTimeOffset = "0s",
                },
            },
            AdBreaks = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigAdBreakArgs
                {
                    StartTimeOffset = "3.500s",
                },
            },
            Overlays = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigOverlayArgs
                {
                    Animations = new[]
                    {
                        new Gcp.Transcoder.Inputs.JobTemplateConfigOverlayAnimationArgs
                        {
                            AnimationFade = new Gcp.Transcoder.Inputs.JobTemplateConfigOverlayAnimationAnimationFadeArgs
                            {
                                FadeType = "FADE_IN",
                                StartTimeOffset = "1.500s",
                                EndTimeOffset = "3.500s",
                                Xy = new Gcp.Transcoder.Inputs.JobTemplateConfigOverlayAnimationAnimationFadeXyArgs
                                {
                                    X = 1,
                                    Y = 0.5,
                                },
                            },
                        },
                    },
                    Image = new Gcp.Transcoder.Inputs.JobTemplateConfigOverlayImageArgs
                    {
                        Uri = "gs://example/overlay.png",
                    },
                },
            },
            ElementaryStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "video-stream0",
                    VideoStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 640,
                            HeightPixels = 360,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 550000,
                            VbvFullnessBits = 495000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "video-stream1",
                    VideoStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 1280,
                            HeightPixels = 720,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 2500000,
                            VbvFullnessBits = 2250000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "audio-stream0",
                    AudioStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamAudioStreamArgs
                    {
                        Codec = "aac",
                        BitrateBps = 64000,
                        ChannelCount = 2,
                        ChannelLayouts = new[]
                        {
                            "fl",
                            "fr",
                        },
                        SampleRateHertz = 48000,
                    },
                },
            },
            MuxStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "sd",
                    FileName = "sd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream0",
                        "audio-stream0",
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "hd",
                    FileName = "hd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream1",
                        "audio-stream0",
                    },
                },
            },
        },
        Labels = 
        {
            { "label", "key" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := transcoder.NewJobTemplate(ctx, "default", &transcoder.JobTemplateArgs{
			JobTemplateId: pulumi.String("example-job-template"),
			Location:      pulumi.String("us-central1"),
			Config: &transcoder.JobTemplateConfigArgs{
				Inputs: transcoder.JobTemplateConfigInputTypeArray{
					&transcoder.JobTemplateConfigInputTypeArgs{
						Key: pulumi.String("input0"),
						Uri: pulumi.String("gs://example/example.mp4"),
					},
				},
				Output: &transcoder.JobTemplateConfigOutputTypeArgs{
					Uri: pulumi.String("gs://example/outputs/"),
				},
				EditLists: transcoder.JobTemplateConfigEditListArray{
					&transcoder.JobTemplateConfigEditListArgs{
						Key: pulumi.String("atom0"),
						Inputs: pulumi.StringArray{
							pulumi.String("input0"),
						},
						StartTimeOffset: pulumi.String("0s"),
					},
				},
				AdBreaks: transcoder.JobTemplateConfigAdBreakArray{
					&transcoder.JobTemplateConfigAdBreakArgs{
						StartTimeOffset: pulumi.String("3.500s"),
					},
				},
				Overlays: transcoder.JobTemplateConfigOverlayArray{
					&transcoder.JobTemplateConfigOverlayArgs{
						Animations: transcoder.JobTemplateConfigOverlayAnimationArray{
							&transcoder.JobTemplateConfigOverlayAnimationArgs{
								AnimationFade: &transcoder.JobTemplateConfigOverlayAnimationAnimationFadeArgs{
									FadeType:        pulumi.String("FADE_IN"),
									StartTimeOffset: pulumi.String("1.500s"),
									EndTimeOffset:   pulumi.String("3.500s"),
									Xy: &transcoder.JobTemplateConfigOverlayAnimationAnimationFadeXyArgs{
										X: pulumi.Float64(1),
										Y: pulumi.Float64(0.5),
									},
								},
							},
						},
						Image: &transcoder.JobTemplateConfigOverlayImageArgs{
							Uri: pulumi.String("gs://example/overlay.png"),
						},
					},
				},
				ElementaryStreams: transcoder.JobTemplateConfigElementaryStreamArray{
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream0"),
						VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(640),
								HeightPixels:    pulumi.Int(360),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(550000),
								VbvFullnessBits: pulumi.Int(495000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream1"),
						VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(1280),
								HeightPixels:    pulumi.Int(720),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(2500000),
								VbvFullnessBits: pulumi.Int(2250000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("audio-stream0"),
						AudioStream: &transcoder.JobTemplateConfigElementaryStreamAudioStreamArgs{
							Codec:        pulumi.String("aac"),
							BitrateBps:   pulumi.Int(64000),
							ChannelCount: pulumi.Int(2),
							ChannelLayouts: pulumi.StringArray{
								pulumi.String("fl"),
								pulumi.String("fr"),
							},
							SampleRateHertz: pulumi.Int(48000),
						},
					},
				},
				MuxStreams: transcoder.JobTemplateConfigMuxStreamArray{
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("sd"),
						FileName:  pulumi.String("sd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream0"),
							pulumi.String("audio-stream0"),
						},
					},
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("hd"),
						FileName:  pulumi.String("hd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream1"),
							pulumi.String("audio-stream0"),
						},
					},
				},
			},
			Labels: pulumi.StringMap{
				"label": pulumi.String("key"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.transcoder.JobTemplate;
import com.pulumi.gcp.transcoder.JobTemplateArgs;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigArgs;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigOutputArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var default_ = new JobTemplate("default", JobTemplateArgs.builder()
            .jobTemplateId("example-job-template")
            .location("us-central1")
            .config(JobTemplateConfigArgs.builder()
                .inputs(JobTemplateConfigInputArgs.builder()
                    .key("input0")
                    .uri("gs://example/example.mp4")
                    .build())
                .output(JobTemplateConfigOutputArgs.builder()
                    .uri("gs://example/outputs/")
                    .build())
                .editLists(JobTemplateConfigEditListArgs.builder()
                    .key("atom0")
                    .inputs("input0")
                    .startTimeOffset("0s")
                    .build())
                .adBreaks(JobTemplateConfigAdBreakArgs.builder()
                    .startTimeOffset("3.500s")
                    .build())
                .overlays(JobTemplateConfigOverlayArgs.builder()
                    .animations(JobTemplateConfigOverlayAnimationArgs.builder()
                        .animationFade(JobTemplateConfigOverlayAnimationAnimationFadeArgs.builder()
                            .fadeType("FADE_IN")
                            .startTimeOffset("1.500s")
                            .endTimeOffset("3.500s")
                            .xy(JobTemplateConfigOverlayAnimationAnimationFadeXyArgs.builder()
                                .x(1)
                                .y(0.5)
                                .build())
                            .build())
                        .build())
                    .image(JobTemplateConfigOverlayImageArgs.builder()
                        .uri("gs://example/overlay.png")
                        .build())
                    .build())
                .elementaryStreams(                
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("video-stream0")
                        .videoStream(JobTemplateConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobTemplateConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(640)
                                .heightPixels(360)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(550000)
                                .vbvFullnessBits(495000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("video-stream1")
                        .videoStream(JobTemplateConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobTemplateConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(1280)
                                .heightPixels(720)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(2500000)
                                .vbvFullnessBits(2250000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("audio-stream0")
                        .audioStream(JobTemplateConfigElementaryStreamAudioStreamArgs.builder()
                            .codec("aac")
                            .bitrateBps(64000)
                            .channelCount(2)
                            .channelLayouts(                            
                                "fl",
                                "fr")
                            .sampleRateHertz(48000)
                            .build())
                        .build())
                .muxStreams(                
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("sd")
                        .fileName("sd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream0",
                            "audio-stream0")
                        .build(),
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("hd")
                        .fileName("hd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream1",
                            "audio-stream0")
                        .build())
                .build())
            .labels(Map.of("label", "key"))
            .build());

    }
}
```
```yaml
resources:
  default:
    type: gcp:transcoder:JobTemplate
    properties:
      jobTemplateId: example-job-template
      location: us-central1
      config:
        inputs:
          - key: input0
            uri: gs://example/example.mp4
        output:
          uri: gs://example/outputs/
        editLists:
          - key: atom0
            inputs:
              - input0
            startTimeOffset: 0s
        adBreaks:
          - startTimeOffset: 3.500s
        overlays:
          - animations:
              - animationFade:
                  fadeType: FADE_IN
                  startTimeOffset: 1.500s
                  endTimeOffset: 3.500s
                  xy:
                    x: 1
                    y: 0.5
            image:
              uri: gs://example/overlay.png
        elementaryStreams:
          - key: video-stream0
            videoStream:
              h264:
                widthPixels: 640
                heightPixels: 360
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 550000
                vbvFullnessBits: 495000
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: video-stream1
            videoStream:
              h264:
                widthPixels: 1280
                heightPixels: 720
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 2.5e+06
                vbvFullnessBits: 2.25e+06
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: audio-stream0
            audioStream:
              codec: aac
              bitrateBps: 64000
              channelCount: 2
              channelLayouts:
                - fl
                - fr
              sampleRateHertz: 48000
        muxStreams:
          - key: sd
            fileName: sd.mp4
            container: mp4
            elementaryStreams:
              - video-stream0
              - audio-stream0
          - key: hd
            fileName: hd.mp4
            container: mp4
            elementaryStreams:
              - video-stream1
              - audio-stream0
      labels:
        label: key
```
<!--End PulumiCodeChooser -->
### Transcoder Job Template Encryptions


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const encryptionKey = new gcp.secretmanager.Secret("encryption_key", {
    secretId: "transcoder-encryption-key",
    replication: {
        auto: {},
    },
});
const encryptionKeySecretVersion = new gcp.secretmanager.SecretVersion("encryption_key", {
    secret: encryptionKey.name,
    secretData: "4A67F2C1B8E93A4F6D3E7890A1BC23DF",
});
const _default = new gcp.transcoder.JobTemplate("default", {
    jobTemplateId: "example-job-template",
    location: "us-central1",
    config: {
        elementaryStreams: [
            {
                key: "es_video",
                videoStream: {
                    h264: {
                        profile: "main",
                        heightPixels: 600,
                        widthPixels: 800,
                        bitrateBps: 1000000,
                        frameRate: 60,
                    },
                },
            },
            {
                key: "es_audio",
                audioStream: {
                    codec: "aac",
                    channelCount: 2,
                    bitrateBps: 160000,
                },
            },
        ],
        encryptions: [
            {
                id: "aes-128",
                secretManagerKeySource: {
                    secretVersion: encryptionKeySecretVersion.name,
                },
                drmSystems: {
                    clearkey: {},
                },
                aes128: {},
            },
            {
                id: "cenc",
                secretManagerKeySource: {
                    secretVersion: encryptionKeySecretVersion.name,
                },
                drmSystems: {
                    widevine: {},
                },
                mpegCenc: {
                    scheme: "cenc",
                },
            },
            {
                id: "cbcs",
                secretManagerKeySource: {
                    secretVersion: encryptionKeySecretVersion.name,
                },
                drmSystems: {
                    widevine: {},
                },
                mpegCenc: {
                    scheme: "cbcs",
                },
            },
        ],
        muxStreams: [
            {
                key: "ts_aes128",
                container: "ts",
                elementaryStreams: [
                    "es_video",
                    "es_audio",
                ],
                segmentSettings: {
                    segmentDuration: "6s",
                },
                encryptionId: "aes-128",
            },
            {
                key: "fmp4_cenc_video",
                container: "fmp4",
                elementaryStreams: ["es_video"],
                segmentSettings: {
                    segmentDuration: "6s",
                },
                encryptionId: "cenc",
            },
            {
                key: "fmp4_cenc_audio",
                container: "fmp4",
                elementaryStreams: ["es_audio"],
                segmentSettings: {
                    segmentDuration: "6s",
                },
                encryptionId: "cenc",
            },
            {
                key: "fmp4_cbcs_video",
                container: "fmp4",
                elementaryStreams: ["es_video"],
                segmentSettings: {
                    segmentDuration: "6s",
                },
                encryptionId: "cbcs",
            },
            {
                key: "fmp4_cbcs_audio",
                container: "fmp4",
                elementaryStreams: ["es_audio"],
                segmentSettings: {
                    segmentDuration: "6s",
                },
                encryptionId: "cbcs",
            },
        ],
        manifests: [
            {
                fileName: "manifest_aes128.m3u8",
                type: "HLS",
                muxStreams: ["ts_aes128"],
            },
            {
                fileName: "manifest_cenc.mpd",
                type: "DASH",
                muxStreams: [
                    "fmp4_cenc_video",
                    "fmp4_cenc_audio",
                ],
            },
            {
                fileName: "manifest_cbcs.mpd",
                type: "DASH",
                muxStreams: [
                    "fmp4_cbcs_video",
                    "fmp4_cbcs_audio",
                ],
            },
        ],
    },
    labels: {
        label: "key",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

encryption_key = gcp.secretmanager.Secret("encryption_key",
    secret_id="transcoder-encryption-key",
    replication={
        "auto": {},
    })
encryption_key_secret_version = gcp.secretmanager.SecretVersion("encryption_key",
    secret=encryption_key.name,
    secret_data="4A67F2C1B8E93A4F6D3E7890A1BC23DF")
default = gcp.transcoder.JobTemplate("default",
    job_template_id="example-job-template",
    location="us-central1",
    config={
        "elementary_streams": [
            {
                "key": "es_video",
                "video_stream": {
                    "h264": {
                        "profile": "main",
                        "height_pixels": 600,
                        "width_pixels": 800,
                        "bitrate_bps": 1000000,
                        "frame_rate": 60,
                    },
                },
            },
            {
                "key": "es_audio",
                "audio_stream": {
                    "codec": "aac",
                    "channel_count": 2,
                    "bitrate_bps": 160000,
                },
            },
        ],
        "encryptions": [
            {
                "id": "aes-128",
                "secret_manager_key_source": {
                    "secret_version": encryption_key_secret_version.name,
                },
                "drm_systems": {
                    "clearkey": {},
                },
                "aes128": {},
            },
            {
                "id": "cenc",
                "secret_manager_key_source": {
                    "secret_version": encryption_key_secret_version.name,
                },
                "drm_systems": {
                    "widevine": {},
                },
                "mpeg_cenc": {
                    "scheme": "cenc",
                },
            },
            {
                "id": "cbcs",
                "secret_manager_key_source": {
                    "secret_version": encryption_key_secret_version.name,
                },
                "drm_systems": {
                    "widevine": {},
                },
                "mpeg_cenc": {
                    "scheme": "cbcs",
                },
            },
        ],
        "mux_streams": [
            {
                "key": "ts_aes128",
                "container": "ts",
                "elementary_streams": [
                    "es_video",
                    "es_audio",
                ],
                "segment_settings": {
                    "segment_duration": "6s",
                },
                "encryption_id": "aes-128",
            },
            {
                "key": "fmp4_cenc_video",
                "container": "fmp4",
                "elementary_streams": ["es_video"],
                "segment_settings": {
                    "segment_duration": "6s",
                },
                "encryption_id": "cenc",
            },
            {
                "key": "fmp4_cenc_audio",
                "container": "fmp4",
                "elementary_streams": ["es_audio"],
                "segment_settings": {
                    "segment_duration": "6s",
                },
                "encryption_id": "cenc",
            },
            {
                "key": "fmp4_cbcs_video",
                "container": "fmp4",
                "elementary_streams": ["es_video"],
                "segment_settings": {
                    "segment_duration": "6s",
                },
                "encryption_id": "cbcs",
            },
            {
                "key": "fmp4_cbcs_audio",
                "container": "fmp4",
                "elementary_streams": ["es_audio"],
                "segment_settings": {
                    "segment_duration": "6s",
                },
                "encryption_id": "cbcs",
            },
        ],
        "manifests": [
            {
                "file_name": "manifest_aes128.m3u8",
                "type": "HLS",
                "mux_streams": ["ts_aes128"],
            },
            {
                "file_name": "manifest_cenc.mpd",
                "type": "DASH",
                "mux_streams": [
                    "fmp4_cenc_video",
                    "fmp4_cenc_audio",
                ],
            },
            {
                "file_name": "manifest_cbcs.mpd",
                "type": "DASH",
                "mux_streams": [
                    "fmp4_cbcs_video",
                    "fmp4_cbcs_audio",
                ],
            },
        ],
    },
    labels={
        "label": "key",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var encryptionKey = new Gcp.SecretManager.Secret("encryption_key", new()
    {
        SecretId = "transcoder-encryption-key",
        Replication = new Gcp.SecretManager.Inputs.SecretReplicationArgs
        {
            Auto = null,
        },
    });

    var encryptionKeySecretVersion = new Gcp.SecretManager.SecretVersion("encryption_key", new()
    {
        Secret = encryptionKey.Name,
        SecretData = "4A67F2C1B8E93A4F6D3E7890A1BC23DF",
    });

    var @default = new Gcp.Transcoder.JobTemplate("default", new()
    {
        JobTemplateId = "example-job-template",
        Location = "us-central1",
        Config = new Gcp.Transcoder.Inputs.JobTemplateConfigArgs
        {
            ElementaryStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "es_video",
                    VideoStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamH264Args
                        {
                            Profile = "main",
                            HeightPixels = 600,
                            WidthPixels = 800,
                            BitrateBps = 1000000,
                            FrameRate = 60,
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "es_audio",
                    AudioStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamAudioStreamArgs
                    {
                        Codec = "aac",
                        ChannelCount = 2,
                        BitrateBps = 160000,
                    },
                },
            },
            Encryptions = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigEncryptionArgs
                {
                    Id = "aes-128",
                    SecretManagerKeySource = new Gcp.Transcoder.Inputs.JobTemplateConfigEncryptionSecretManagerKeySourceArgs
                    {
                        SecretVersion = encryptionKeySecretVersion.Name,
                    },
                    DrmSystems = new Gcp.Transcoder.Inputs.JobTemplateConfigEncryptionDrmSystemsArgs
                    {
                        Clearkey = null,
                    },
                    Aes128 = null,
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigEncryptionArgs
                {
                    Id = "cenc",
                    SecretManagerKeySource = new Gcp.Transcoder.Inputs.JobTemplateConfigEncryptionSecretManagerKeySourceArgs
                    {
                        SecretVersion = encryptionKeySecretVersion.Name,
                    },
                    DrmSystems = new Gcp.Transcoder.Inputs.JobTemplateConfigEncryptionDrmSystemsArgs
                    {
                        Widevine = null,
                    },
                    MpegCenc = new Gcp.Transcoder.Inputs.JobTemplateConfigEncryptionMpegCencArgs
                    {
                        Scheme = "cenc",
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigEncryptionArgs
                {
                    Id = "cbcs",
                    SecretManagerKeySource = new Gcp.Transcoder.Inputs.JobTemplateConfigEncryptionSecretManagerKeySourceArgs
                    {
                        SecretVersion = encryptionKeySecretVersion.Name,
                    },
                    DrmSystems = new Gcp.Transcoder.Inputs.JobTemplateConfigEncryptionDrmSystemsArgs
                    {
                        Widevine = null,
                    },
                    MpegCenc = new Gcp.Transcoder.Inputs.JobTemplateConfigEncryptionMpegCencArgs
                    {
                        Scheme = "cbcs",
                    },
                },
            },
            MuxStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "ts_aes128",
                    Container = "ts",
                    ElementaryStreams = new[]
                    {
                        "es_video",
                        "es_audio",
                    },
                    SegmentSettings = new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamSegmentSettingsArgs
                    {
                        SegmentDuration = "6s",
                    },
                    EncryptionId = "aes-128",
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "fmp4_cenc_video",
                    Container = "fmp4",
                    ElementaryStreams = new[]
                    {
                        "es_video",
                    },
                    SegmentSettings = new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamSegmentSettingsArgs
                    {
                        SegmentDuration = "6s",
                    },
                    EncryptionId = "cenc",
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "fmp4_cenc_audio",
                    Container = "fmp4",
                    ElementaryStreams = new[]
                    {
                        "es_audio",
                    },
                    SegmentSettings = new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamSegmentSettingsArgs
                    {
                        SegmentDuration = "6s",
                    },
                    EncryptionId = "cenc",
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "fmp4_cbcs_video",
                    Container = "fmp4",
                    ElementaryStreams = new[]
                    {
                        "es_video",
                    },
                    SegmentSettings = new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamSegmentSettingsArgs
                    {
                        SegmentDuration = "6s",
                    },
                    EncryptionId = "cbcs",
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "fmp4_cbcs_audio",
                    Container = "fmp4",
                    ElementaryStreams = new[]
                    {
                        "es_audio",
                    },
                    SegmentSettings = new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamSegmentSettingsArgs
                    {
                        SegmentDuration = "6s",
                    },
                    EncryptionId = "cbcs",
                },
            },
            Manifests = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigManifestArgs
                {
                    FileName = "manifest_aes128.m3u8",
                    Type = "HLS",
                    MuxStreams = new[]
                    {
                        "ts_aes128",
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigManifestArgs
                {
                    FileName = "manifest_cenc.mpd",
                    Type = "DASH",
                    MuxStreams = new[]
                    {
                        "fmp4_cenc_video",
                        "fmp4_cenc_audio",
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigManifestArgs
                {
                    FileName = "manifest_cbcs.mpd",
                    Type = "DASH",
                    MuxStreams = new[]
                    {
                        "fmp4_cbcs_video",
                        "fmp4_cbcs_audio",
                    },
                },
            },
        },
        Labels = 
        {
            { "label", "key" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/secretmanager"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		encryptionKey, err := secretmanager.NewSecret(ctx, "encryption_key", &secretmanager.SecretArgs{
			SecretId: pulumi.String("transcoder-encryption-key"),
			Replication: &secretmanager.SecretReplicationArgs{
				Auto: &secretmanager.SecretReplicationAutoArgs{},
			},
		})
		if err != nil {
			return err
		}
		encryptionKeySecretVersion, err := secretmanager.NewSecretVersion(ctx, "encryption_key", &secretmanager.SecretVersionArgs{
			Secret:     encryptionKey.Name,
			SecretData: pulumi.String("4A67F2C1B8E93A4F6D3E7890A1BC23DF"),
		})
		if err != nil {
			return err
		}
		_, err = transcoder.NewJobTemplate(ctx, "default", &transcoder.JobTemplateArgs{
			JobTemplateId: pulumi.String("example-job-template"),
			Location:      pulumi.String("us-central1"),
			Config: &transcoder.JobTemplateConfigArgs{
				ElementaryStreams: transcoder.JobTemplateConfigElementaryStreamArray{
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("es_video"),
						VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
								Profile:      pulumi.String("main"),
								HeightPixels: pulumi.Int(600),
								WidthPixels:  pulumi.Int(800),
								BitrateBps:   pulumi.Int(1000000),
								FrameRate:    pulumi.Int(60),
							},
						},
					},
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("es_audio"),
						AudioStream: &transcoder.JobTemplateConfigElementaryStreamAudioStreamArgs{
							Codec:        pulumi.String("aac"),
							ChannelCount: pulumi.Int(2),
							BitrateBps:   pulumi.Int(160000),
						},
					},
				},
				Encryptions: transcoder.JobTemplateConfigEncryptionArray{
					&transcoder.JobTemplateConfigEncryptionArgs{
						Id: pulumi.String("aes-128"),
						SecretManagerKeySource: &transcoder.JobTemplateConfigEncryptionSecretManagerKeySourceArgs{
							SecretVersion: encryptionKeySecretVersion.Name,
						},
						DrmSystems: &transcoder.JobTemplateConfigEncryptionDrmSystemsArgs{
							Clearkey: &transcoder.JobTemplateConfigEncryptionDrmSystemsClearkeyArgs{},
						},
						Aes128: &transcoder.JobTemplateConfigEncryptionAes128Args{},
					},
					&transcoder.JobTemplateConfigEncryptionArgs{
						Id: pulumi.String("cenc"),
						SecretManagerKeySource: &transcoder.JobTemplateConfigEncryptionSecretManagerKeySourceArgs{
							SecretVersion: encryptionKeySecretVersion.Name,
						},
						DrmSystems: &transcoder.JobTemplateConfigEncryptionDrmSystemsArgs{
							Widevine: &transcoder.JobTemplateConfigEncryptionDrmSystemsWidevineArgs{},
						},
						MpegCenc: &transcoder.JobTemplateConfigEncryptionMpegCencArgs{
							Scheme: pulumi.String("cenc"),
						},
					},
					&transcoder.JobTemplateConfigEncryptionArgs{
						Id: pulumi.String("cbcs"),
						SecretManagerKeySource: &transcoder.JobTemplateConfigEncryptionSecretManagerKeySourceArgs{
							SecretVersion: encryptionKeySecretVersion.Name,
						},
						DrmSystems: &transcoder.JobTemplateConfigEncryptionDrmSystemsArgs{
							Widevine: &transcoder.JobTemplateConfigEncryptionDrmSystemsWidevineArgs{},
						},
						MpegCenc: &transcoder.JobTemplateConfigEncryptionMpegCencArgs{
							Scheme: pulumi.String("cbcs"),
						},
					},
				},
				MuxStreams: transcoder.JobTemplateConfigMuxStreamArray{
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("ts_aes128"),
						Container: pulumi.String("ts"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("es_video"),
							pulumi.String("es_audio"),
						},
						SegmentSettings: &transcoder.JobTemplateConfigMuxStreamSegmentSettingsArgs{
							SegmentDuration: pulumi.String("6s"),
						},
						EncryptionId: pulumi.String("aes-128"),
					},
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("fmp4_cenc_video"),
						Container: pulumi.String("fmp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("es_video"),
						},
						SegmentSettings: &transcoder.JobTemplateConfigMuxStreamSegmentSettingsArgs{
							SegmentDuration: pulumi.String("6s"),
						},
						EncryptionId: pulumi.String("cenc"),
					},
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("fmp4_cenc_audio"),
						Container: pulumi.String("fmp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("es_audio"),
						},
						SegmentSettings: &transcoder.JobTemplateConfigMuxStreamSegmentSettingsArgs{
							SegmentDuration: pulumi.String("6s"),
						},
						EncryptionId: pulumi.String("cenc"),
					},
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("fmp4_cbcs_video"),
						Container: pulumi.String("fmp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("es_video"),
						},
						SegmentSettings: &transcoder.JobTemplateConfigMuxStreamSegmentSettingsArgs{
							SegmentDuration: pulumi.String("6s"),
						},
						EncryptionId: pulumi.String("cbcs"),
					},
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("fmp4_cbcs_audio"),
						Container: pulumi.String("fmp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("es_audio"),
						},
						SegmentSettings: &transcoder.JobTemplateConfigMuxStreamSegmentSettingsArgs{
							SegmentDuration: pulumi.String("6s"),
						},
						EncryptionId: pulumi.String("cbcs"),
					},
				},
				Manifests: transcoder.JobTemplateConfigManifestArray{
					&transcoder.JobTemplateConfigManifestArgs{
						FileName: pulumi.String("manifest_aes128.m3u8"),
						Type:     pulumi.String("HLS"),
						MuxStreams: pulumi.StringArray{
							pulumi.String("ts_aes128"),
						},
					},
					&transcoder.JobTemplateConfigManifestArgs{
						FileName: pulumi.String("manifest_cenc.mpd"),
						Type:     pulumi.String("DASH"),
						MuxStreams: pulumi.StringArray{
							pulumi.String("fmp4_cenc_video"),
							pulumi.String("fmp4_cenc_audio"),
						},
					},
					&transcoder.JobTemplateConfigManifestArgs{
						FileName: pulumi.String("manifest_cbcs.mpd"),
						Type:     pulumi.String("DASH"),
						MuxStreams: pulumi.StringArray{
							pulumi.String("fmp4_cbcs_video"),
							pulumi.String("fmp4_cbcs_audio"),
						},
					},
				},
			},
			Labels: pulumi.StringMap{
				"label": pulumi.String("key"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.secretmanager.Secret;
import com.pulumi.gcp.secretmanager.SecretArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
import com.pulumi.gcp.secretmanager.SecretVersion;
import com.pulumi.gcp.secretmanager.SecretVersionArgs;
import com.pulumi.gcp.transcoder.JobTemplate;
import com.pulumi.gcp.transcoder.JobTemplateArgs;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var encryptionKey = new Secret("encryptionKey", SecretArgs.builder()
            .secretId("transcoder-encryption-key")
            .replication(SecretReplicationArgs.builder()
                .auto()
                .build())
            .build());

        var encryptionKeySecretVersion = new SecretVersion("encryptionKeySecretVersion", SecretVersionArgs.builder()
            .secret(encryptionKey.name())
            .secretData("4A67F2C1B8E93A4F6D3E7890A1BC23DF")
            .build());

        var default_ = new JobTemplate("default", JobTemplateArgs.builder()
            .jobTemplateId("example-job-template")
            .location("us-central1")
            .config(JobTemplateConfigArgs.builder()
                .elementaryStreams(                
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("es_video")
                        .videoStream(JobTemplateConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobTemplateConfigElementaryStreamVideoStreamH264Args.builder()
                                .profile("main")
                                .heightPixels(600)
                                .widthPixels(800)
                                .bitrateBps(1000000)
                                .frameRate(60)
                                .build())
                            .build())
                        .build(),
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("es_audio")
                        .audioStream(JobTemplateConfigElementaryStreamAudioStreamArgs.builder()
                            .codec("aac")
                            .channelCount(2)
                            .bitrateBps(160000)
                            .build())
                        .build())
                .encryptions(                
                    JobTemplateConfigEncryptionArgs.builder()
                        .id("aes-128")
                        .secretManagerKeySource(JobTemplateConfigEncryptionSecretManagerKeySourceArgs.builder()
                            .secretVersion(encryptionKeySecretVersion.name())
                            .build())
                        .drmSystems(JobTemplateConfigEncryptionDrmSystemsArgs.builder()
                            .clearkey()
                            .build())
                        .aes128()
                        .build(),
                    JobTemplateConfigEncryptionArgs.builder()
                        .id("cenc")
                        .secretManagerKeySource(JobTemplateConfigEncryptionSecretManagerKeySourceArgs.builder()
                            .secretVersion(encryptionKeySecretVersion.name())
                            .build())
                        .drmSystems(JobTemplateConfigEncryptionDrmSystemsArgs.builder()
                            .widevine()
                            .build())
                        .mpegCenc(JobTemplateConfigEncryptionMpegCencArgs.builder()
                            .scheme("cenc")
                            .build())
                        .build(),
                    JobTemplateConfigEncryptionArgs.builder()
                        .id("cbcs")
                        .secretManagerKeySource(JobTemplateConfigEncryptionSecretManagerKeySourceArgs.builder()
                            .secretVersion(encryptionKeySecretVersion.name())
                            .build())
                        .drmSystems(JobTemplateConfigEncryptionDrmSystemsArgs.builder()
                            .widevine()
                            .build())
                        .mpegCenc(JobTemplateConfigEncryptionMpegCencArgs.builder()
                            .scheme("cbcs")
                            .build())
                        .build())
                .muxStreams(                
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("ts_aes128")
                        .container("ts")
                        .elementaryStreams(                        
                            "es_video",
                            "es_audio")
                        .segmentSettings(JobTemplateConfigMuxStreamSegmentSettingsArgs.builder()
                            .segmentDuration("6s")
                            .build())
                        .encryptionId("aes-128")
                        .build(),
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("fmp4_cenc_video")
                        .container("fmp4")
                        .elementaryStreams("es_video")
                        .segmentSettings(JobTemplateConfigMuxStreamSegmentSettingsArgs.builder()
                            .segmentDuration("6s")
                            .build())
                        .encryptionId("cenc")
                        .build(),
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("fmp4_cenc_audio")
                        .container("fmp4")
                        .elementaryStreams("es_audio")
                        .segmentSettings(JobTemplateConfigMuxStreamSegmentSettingsArgs.builder()
                            .segmentDuration("6s")
                            .build())
                        .encryptionId("cenc")
                        .build(),
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("fmp4_cbcs_video")
                        .container("fmp4")
                        .elementaryStreams("es_video")
                        .segmentSettings(JobTemplateConfigMuxStreamSegmentSettingsArgs.builder()
                            .segmentDuration("6s")
                            .build())
                        .encryptionId("cbcs")
                        .build(),
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("fmp4_cbcs_audio")
                        .container("fmp4")
                        .elementaryStreams("es_audio")
                        .segmentSettings(JobTemplateConfigMuxStreamSegmentSettingsArgs.builder()
                            .segmentDuration("6s")
                            .build())
                        .encryptionId("cbcs")
                        .build())
                .manifests(                
                    JobTemplateConfigManifestArgs.builder()
                        .fileName("manifest_aes128.m3u8")
                        .type("HLS")
                        .muxStreams("ts_aes128")
                        .build(),
                    JobTemplateConfigManifestArgs.builder()
                        .fileName("manifest_cenc.mpd")
                        .type("DASH")
                        .muxStreams(                        
                            "fmp4_cenc_video",
                            "fmp4_cenc_audio")
                        .build(),
                    JobTemplateConfigManifestArgs.builder()
                        .fileName("manifest_cbcs.mpd")
                        .type("DASH")
                        .muxStreams(                        
                            "fmp4_cbcs_video",
                            "fmp4_cbcs_audio")
                        .build())
                .build())
            .labels(Map.of("label", "key"))
            .build());

    }
}
```
```yaml
resources:
  encryptionKey:
    type: gcp:secretmanager:Secret
    name: encryption_key
    properties:
      secretId: transcoder-encryption-key
      replication:
        auto: {}
  encryptionKeySecretVersion:
    type: gcp:secretmanager:SecretVersion
    name: encryption_key
    properties:
      secret: ${encryptionKey.name}
      secretData: 4A67F2C1B8E93A4F6D3E7890A1BC23DF
  default:
    type: gcp:transcoder:JobTemplate
    properties:
      jobTemplateId: example-job-template
      location: us-central1
      config:
        elementaryStreams:
          - key: es_video
            videoStream:
              h264:
                profile: main
                heightPixels: 600
                widthPixels: 800
                bitrateBps: 1e+06
                frameRate: 60
          - key: es_audio
            audioStream:
              codec: aac
              channelCount: 2
              bitrateBps: 160000
        encryptions:
          - id: aes-128
            secretManagerKeySource:
              secretVersion: ${encryptionKeySecretVersion.name}
            drmSystems:
              clearkey: {}
            aes128: {}
          - id: cenc
            secretManagerKeySource:
              secretVersion: ${encryptionKeySecretVersion.name}
            drmSystems:
              widevine: {}
            mpegCenc:
              scheme: cenc
          - id: cbcs
            secretManagerKeySource:
              secretVersion: ${encryptionKeySecretVersion.name}
            drmSystems:
              widevine: {}
            mpegCenc:
              scheme: cbcs
        muxStreams:
          - key: ts_aes128
            container: ts
            elementaryStreams:
              - es_video
              - es_audio
            segmentSettings:
              segmentDuration: 6s
            encryptionId: aes-128
          - key: fmp4_cenc_video
            container: fmp4
            elementaryStreams:
              - es_video
            segmentSettings:
              segmentDuration: 6s
            encryptionId: cenc
          - key: fmp4_cenc_audio
            container: fmp4
            elementaryStreams:
              - es_audio
            segmentSettings:
              segmentDuration: 6s
            encryptionId: cenc
          - key: fmp4_cbcs_video
            container: fmp4
            elementaryStreams:
              - es_video
            segmentSettings:
              segmentDuration: 6s
            encryptionId: cbcs
          - key: fmp4_cbcs_audio
            container: fmp4
            elementaryStreams:
              - es_audio
            segmentSettings:
              segmentDuration: 6s
            encryptionId: cbcs
        manifests:
          - fileName: manifest_aes128.m3u8
            type: HLS
            muxStreams:
              - ts_aes128
          - fileName: manifest_cenc.mpd
            type: DASH
            muxStreams:
              - fmp4_cenc_video
              - fmp4_cenc_audio
          - fileName: manifest_cbcs.mpd
            type: DASH
            muxStreams:
              - fmp4_cbcs_video
              - fmp4_cbcs_audio
      labels:
        label: key
```
<!--End PulumiCodeChooser -->
### Transcoder Job Template Pubsub


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const transcoderNotifications = new gcp.pubsub.Topic("transcoder_notifications", {name: "transcoder-notifications"});
const _default = new gcp.transcoder.JobTemplate("default", {
    jobTemplateId: "example-job-template",
    location: "us-central1",
    config: {
        inputs: [{
            key: "input0",
            uri: "gs://example/example.mp4",
        }],
        output: {
            uri: "gs://example/outputs/",
        },
        editLists: [{
            key: "atom0",
            inputs: ["input0"],
            startTimeOffset: "0s",
        }],
        adBreaks: [{
            startTimeOffset: "3.500s",
        }],
        elementaryStreams: [
            {
                key: "video-stream0",
                videoStream: {
                    h264: {
                        widthPixels: 640,
                        heightPixels: 360,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 550000,
                        vbvFullnessBits: 495000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "video-stream1",
                videoStream: {
                    h264: {
                        widthPixels: 1280,
                        heightPixels: 720,
                        bitrateBps: 550000,
                        frameRate: 60,
                        pixelFormat: "yuv420p",
                        rateControlMode: "vbr",
                        crfLevel: 21,
                        gopDuration: "3s",
                        vbvSizeBits: 2500000,
                        vbvFullnessBits: 2250000,
                        entropyCoder: "cabac",
                        profile: "high",
                        preset: "veryfast",
                    },
                },
            },
            {
                key: "audio-stream0",
                audioStream: {
                    codec: "aac",
                    bitrateBps: 64000,
                    channelCount: 2,
                    channelLayouts: [
                        "fl",
                        "fr",
                    ],
                    sampleRateHertz: 48000,
                },
            },
        ],
        muxStreams: [
            {
                key: "sd",
                fileName: "sd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                key: "hd",
                fileName: "hd.mp4",
                container: "mp4",
                elementaryStreams: [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
        pubsubDestination: {
            topic: transcoderNotifications.id,
        },
    },
    labels: {
        label: "key",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

transcoder_notifications = gcp.pubsub.Topic("transcoder_notifications", name="transcoder-notifications")
default = gcp.transcoder.JobTemplate("default",
    job_template_id="example-job-template",
    location="us-central1",
    config={
        "inputs": [{
            "key": "input0",
            "uri": "gs://example/example.mp4",
        }],
        "output": {
            "uri": "gs://example/outputs/",
        },
        "edit_lists": [{
            "key": "atom0",
            "inputs": ["input0"],
            "start_time_offset": "0s",
        }],
        "ad_breaks": [{
            "start_time_offset": "3.500s",
        }],
        "elementary_streams": [
            {
                "key": "video-stream0",
                "video_stream": {
                    "h264": {
                        "width_pixels": 640,
                        "height_pixels": 360,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 550000,
                        "vbv_fullness_bits": 495000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "video-stream1",
                "video_stream": {
                    "h264": {
                        "width_pixels": 1280,
                        "height_pixels": 720,
                        "bitrate_bps": 550000,
                        "frame_rate": 60,
                        "pixel_format": "yuv420p",
                        "rate_control_mode": "vbr",
                        "crf_level": 21,
                        "gop_duration": "3s",
                        "vbv_size_bits": 2500000,
                        "vbv_fullness_bits": 2250000,
                        "entropy_coder": "cabac",
                        "profile": "high",
                        "preset": "veryfast",
                    },
                },
            },
            {
                "key": "audio-stream0",
                "audio_stream": {
                    "codec": "aac",
                    "bitrate_bps": 64000,
                    "channel_count": 2,
                    "channel_layouts": [
                        "fl",
                        "fr",
                    ],
                    "sample_rate_hertz": 48000,
                },
            },
        ],
        "mux_streams": [
            {
                "key": "sd",
                "file_name": "sd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream0",
                    "audio-stream0",
                ],
            },
            {
                "key": "hd",
                "file_name": "hd.mp4",
                "container": "mp4",
                "elementary_streams": [
                    "video-stream1",
                    "audio-stream0",
                ],
            },
        ],
        "pubsub_destination": {
            "topic": transcoder_notifications.id,
        },
    },
    labels={
        "label": "key",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var transcoderNotifications = new Gcp.PubSub.Topic("transcoder_notifications", new()
    {
        Name = "transcoder-notifications",
    });

    var @default = new Gcp.Transcoder.JobTemplate("default", new()
    {
        JobTemplateId = "example-job-template",
        Location = "us-central1",
        Config = new Gcp.Transcoder.Inputs.JobTemplateConfigArgs
        {
            Inputs = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigInputArgs
                {
                    Key = "input0",
                    Uri = "gs://example/example.mp4",
                },
            },
            Output = new Gcp.Transcoder.Inputs.JobTemplateConfigOutputArgs
            {
                Uri = "gs://example/outputs/",
            },
            EditLists = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigEditListArgs
                {
                    Key = "atom0",
                    Inputs = new[]
                    {
                        "input0",
                    },
                    StartTimeOffset = "0s",
                },
            },
            AdBreaks = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigAdBreakArgs
                {
                    StartTimeOffset = "3.500s",
                },
            },
            ElementaryStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "video-stream0",
                    VideoStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 640,
                            HeightPixels = 360,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 550000,
                            VbvFullnessBits = 495000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "video-stream1",
                    VideoStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamArgs
                    {
                        H264 = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamVideoStreamH264Args
                        {
                            WidthPixels = 1280,
                            HeightPixels = 720,
                            BitrateBps = 550000,
                            FrameRate = 60,
                            PixelFormat = "yuv420p",
                            RateControlMode = "vbr",
                            CrfLevel = 21,
                            GopDuration = "3s",
                            VbvSizeBits = 2500000,
                            VbvFullnessBits = 2250000,
                            EntropyCoder = "cabac",
                            Profile = "high",
                            Preset = "veryfast",
                        },
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamArgs
                {
                    Key = "audio-stream0",
                    AudioStream = new Gcp.Transcoder.Inputs.JobTemplateConfigElementaryStreamAudioStreamArgs
                    {
                        Codec = "aac",
                        BitrateBps = 64000,
                        ChannelCount = 2,
                        ChannelLayouts = new[]
                        {
                            "fl",
                            "fr",
                        },
                        SampleRateHertz = 48000,
                    },
                },
            },
            MuxStreams = new[]
            {
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "sd",
                    FileName = "sd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream0",
                        "audio-stream0",
                    },
                },
                new Gcp.Transcoder.Inputs.JobTemplateConfigMuxStreamArgs
                {
                    Key = "hd",
                    FileName = "hd.mp4",
                    Container = "mp4",
                    ElementaryStreams = new[]
                    {
                        "video-stream1",
                        "audio-stream0",
                    },
                },
            },
            PubsubDestination = new Gcp.Transcoder.Inputs.JobTemplateConfigPubsubDestinationArgs
            {
                Topic = transcoderNotifications.Id,
            },
        },
        Labels = 
        {
            { "label", "key" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/transcoder"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		transcoderNotifications, err := pubsub.NewTopic(ctx, "transcoder_notifications", &pubsub.TopicArgs{
			Name: pulumi.String("transcoder-notifications"),
		})
		if err != nil {
			return err
		}
		_, err = transcoder.NewJobTemplate(ctx, "default", &transcoder.JobTemplateArgs{
			JobTemplateId: pulumi.String("example-job-template"),
			Location:      pulumi.String("us-central1"),
			Config: &transcoder.JobTemplateConfigArgs{
				Inputs: transcoder.JobTemplateConfigInputTypeArray{
					&transcoder.JobTemplateConfigInputTypeArgs{
						Key: pulumi.String("input0"),
						Uri: pulumi.String("gs://example/example.mp4"),
					},
				},
				Output: &transcoder.JobTemplateConfigOutputTypeArgs{
					Uri: pulumi.String("gs://example/outputs/"),
				},
				EditLists: transcoder.JobTemplateConfigEditListArray{
					&transcoder.JobTemplateConfigEditListArgs{
						Key: pulumi.String("atom0"),
						Inputs: pulumi.StringArray{
							pulumi.String("input0"),
						},
						StartTimeOffset: pulumi.String("0s"),
					},
				},
				AdBreaks: transcoder.JobTemplateConfigAdBreakArray{
					&transcoder.JobTemplateConfigAdBreakArgs{
						StartTimeOffset: pulumi.String("3.500s"),
					},
				},
				ElementaryStreams: transcoder.JobTemplateConfigElementaryStreamArray{
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream0"),
						VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(640),
								HeightPixels:    pulumi.Int(360),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(550000),
								VbvFullnessBits: pulumi.Int(495000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("video-stream1"),
						VideoStream: &transcoder.JobTemplateConfigElementaryStreamVideoStreamArgs{
							H264: &transcoder.JobTemplateConfigElementaryStreamVideoStreamH264Args{
								WidthPixels:     pulumi.Int(1280),
								HeightPixels:    pulumi.Int(720),
								BitrateBps:      pulumi.Int(550000),
								FrameRate:       pulumi.Int(60),
								PixelFormat:     pulumi.String("yuv420p"),
								RateControlMode: pulumi.String("vbr"),
								CrfLevel:        pulumi.Int(21),
								GopDuration:     pulumi.String("3s"),
								VbvSizeBits:     pulumi.Int(2500000),
								VbvFullnessBits: pulumi.Int(2250000),
								EntropyCoder:    pulumi.String("cabac"),
								Profile:         pulumi.String("high"),
								Preset:          pulumi.String("veryfast"),
							},
						},
					},
					&transcoder.JobTemplateConfigElementaryStreamArgs{
						Key: pulumi.String("audio-stream0"),
						AudioStream: &transcoder.JobTemplateConfigElementaryStreamAudioStreamArgs{
							Codec:        pulumi.String("aac"),
							BitrateBps:   pulumi.Int(64000),
							ChannelCount: pulumi.Int(2),
							ChannelLayouts: pulumi.StringArray{
								pulumi.String("fl"),
								pulumi.String("fr"),
							},
							SampleRateHertz: pulumi.Int(48000),
						},
					},
				},
				MuxStreams: transcoder.JobTemplateConfigMuxStreamArray{
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("sd"),
						FileName:  pulumi.String("sd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream0"),
							pulumi.String("audio-stream0"),
						},
					},
					&transcoder.JobTemplateConfigMuxStreamArgs{
						Key:       pulumi.String("hd"),
						FileName:  pulumi.String("hd.mp4"),
						Container: pulumi.String("mp4"),
						ElementaryStreams: pulumi.StringArray{
							pulumi.String("video-stream1"),
							pulumi.String("audio-stream0"),
						},
					},
				},
				PubsubDestination: &transcoder.JobTemplateConfigPubsubDestinationArgs{
					Topic: transcoderNotifications.ID(),
				},
			},
			Labels: pulumi.StringMap{
				"label": pulumi.String("key"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.pubsub.Topic;
import com.pulumi.gcp.pubsub.TopicArgs;
import com.pulumi.gcp.transcoder.JobTemplate;
import com.pulumi.gcp.transcoder.JobTemplateArgs;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigArgs;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigOutputArgs;
import com.pulumi.gcp.transcoder.inputs.JobTemplateConfigPubsubDestinationArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var transcoderNotifications = new Topic("transcoderNotifications", TopicArgs.builder()
            .name("transcoder-notifications")
            .build());

        var default_ = new JobTemplate("default", JobTemplateArgs.builder()
            .jobTemplateId("example-job-template")
            .location("us-central1")
            .config(JobTemplateConfigArgs.builder()
                .inputs(JobTemplateConfigInputArgs.builder()
                    .key("input0")
                    .uri("gs://example/example.mp4")
                    .build())
                .output(JobTemplateConfigOutputArgs.builder()
                    .uri("gs://example/outputs/")
                    .build())
                .editLists(JobTemplateConfigEditListArgs.builder()
                    .key("atom0")
                    .inputs("input0")
                    .startTimeOffset("0s")
                    .build())
                .adBreaks(JobTemplateConfigAdBreakArgs.builder()
                    .startTimeOffset("3.500s")
                    .build())
                .elementaryStreams(                
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("video-stream0")
                        .videoStream(JobTemplateConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobTemplateConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(640)
                                .heightPixels(360)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(550000)
                                .vbvFullnessBits(495000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("video-stream1")
                        .videoStream(JobTemplateConfigElementaryStreamVideoStreamArgs.builder()
                            .h264(JobTemplateConfigElementaryStreamVideoStreamH264Args.builder()
                                .widthPixels(1280)
                                .heightPixels(720)
                                .bitrateBps(550000)
                                .frameRate(60)
                                .pixelFormat("yuv420p")
                                .rateControlMode("vbr")
                                .crfLevel(21)
                                .gopDuration("3s")
                                .vbvSizeBits(2500000)
                                .vbvFullnessBits(2250000)
                                .entropyCoder("cabac")
                                .profile("high")
                                .preset("veryfast")
                                .build())
                            .build())
                        .build(),
                    JobTemplateConfigElementaryStreamArgs.builder()
                        .key("audio-stream0")
                        .audioStream(JobTemplateConfigElementaryStreamAudioStreamArgs.builder()
                            .codec("aac")
                            .bitrateBps(64000)
                            .channelCount(2)
                            .channelLayouts(                            
                                "fl",
                                "fr")
                            .sampleRateHertz(48000)
                            .build())
                        .build())
                .muxStreams(                
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("sd")
                        .fileName("sd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream0",
                            "audio-stream0")
                        .build(),
                    JobTemplateConfigMuxStreamArgs.builder()
                        .key("hd")
                        .fileName("hd.mp4")
                        .container("mp4")
                        .elementaryStreams(                        
                            "video-stream1",
                            "audio-stream0")
                        .build())
                .pubsubDestination(JobTemplateConfigPubsubDestinationArgs.builder()
                    .topic(transcoderNotifications.id())
                    .build())
                .build())
            .labels(Map.of("label", "key"))
            .build());

    }
}
```
```yaml
resources:
  transcoderNotifications:
    type: gcp:pubsub:Topic
    name: transcoder_notifications
    properties:
      name: transcoder-notifications
  default:
    type: gcp:transcoder:JobTemplate
    properties:
      jobTemplateId: example-job-template
      location: us-central1
      config:
        inputs:
          - key: input0
            uri: gs://example/example.mp4
        output:
          uri: gs://example/outputs/
        editLists:
          - key: atom0
            inputs:
              - input0
            startTimeOffset: 0s
        adBreaks:
          - startTimeOffset: 3.500s
        elementaryStreams:
          - key: video-stream0
            videoStream:
              h264:
                widthPixels: 640
                heightPixels: 360
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 550000
                vbvFullnessBits: 495000
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: video-stream1
            videoStream:
              h264:
                widthPixels: 1280
                heightPixels: 720
                bitrateBps: 550000
                frameRate: 60
                pixelFormat: yuv420p
                rateControlMode: vbr
                crfLevel: 21
                gopDuration: 3s
                vbvSizeBits: 2.5e+06
                vbvFullnessBits: 2.25e+06
                entropyCoder: cabac
                profile: high
                preset: veryfast
          - key: audio-stream0
            audioStream:
              codec: aac
              bitrateBps: 64000
              channelCount: 2
              channelLayouts:
                - fl
                - fr
              sampleRateHertz: 48000
        muxStreams:
          - key: sd
            fileName: sd.mp4
            container: mp4
            elementaryStreams:
              - video-stream0
              - audio-stream0
          - key: hd
            fileName: hd.mp4
            container: mp4
            elementaryStreams:
              - video-stream1
              - audio-stream0
        pubsubDestination:
          topic: ${transcoderNotifications.id}
      labels:
        label: key
```
<!--End PulumiCodeChooser -->

## Import

JobTemplate can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}`

* `{{project}}/{{location}}/{{job_template_id}}`

* `{{location}}/{{job_template_id}}`

When using the `pulumi import` command, JobTemplate can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:transcoder/jobTemplate:JobTemplate default projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}
```

```sh
$ pulumi import gcp:transcoder/jobTemplate:JobTemplate default {{project}}/{{location}}/{{job_template_id}}
```

```sh
$ pulumi import gcp:transcoder/jobTemplate:JobTemplate default {{location}}/{{job_template_id}}
```

й
configYBW:U
S

transcoderJobTemplateConfig2gcp:transcoder/JobTemplateConfig:JobTemplateConfigDThe configuration for this template.
Structure is documented below.
A
jobTemplateId" ,ID to use for the Transcoding job template.
─
labelsB2" ▒The labels associated with this job template. You can use these to organize and group your job templates.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
O
location" ?The location of the transcoding job template resource.


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"з
configW:U
S

transcoderJobTemplateConfig2gcp:transcoder/JobTemplateConfig:JobTemplateConfigDThe configuration for this template.
Structure is documented below.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"A
jobTemplateId" ,ID to use for the Transcoding job template.
"─
labelsB2" ▒The labels associated with this job template. You can use these to organize and group your job templates.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"O
location" ?The location of the transcoding job template resource.


- - -
"3
name" 'The resource name of the job template.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
*д2
3
vertex	AiDatasetgcp:vertex/aiDataset:AiDataset╣A collection of DataItems and Annotations on them.


To get more information about Dataset, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.datasets)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/vertex-ai/docs)

## Example Usage

### Vertex Ai Dataset


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const dataset = new gcp.vertex.AiDataset("dataset", {
    displayName: "terraform",
    metadataSchemaUri: "gs://google-cloud-aiplatform/schema/dataset/metadata/image_1.0.0.yaml",
    region: "us-central1",
    labels: {
        env: "test",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

dataset = gcp.vertex.AiDataset("dataset",
    display_name="terraform",
    metadata_schema_uri="gs://google-cloud-aiplatform/schema/dataset/metadata/image_1.0.0.yaml",
    region="us-central1",
    labels={
        "env": "test",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var dataset = new Gcp.Vertex.AiDataset("dataset", new()
    {
        DisplayName = "terraform",
        MetadataSchemaUri = "gs://google-cloud-aiplatform/schema/dataset/metadata/image_1.0.0.yaml",
        Region = "us-central1",
        Labels = 
        {
            { "env", "test" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := vertex.NewAiDataset(ctx, "dataset", &vertex.AiDatasetArgs{
			DisplayName:       pulumi.String("terraform"),
			MetadataSchemaUri: pulumi.String("gs://google-cloud-aiplatform/schema/dataset/metadata/image_1.0.0.yaml"),
			Region:            pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"env": pulumi.String("test"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiDataset;
import com.pulumi.gcp.vertex.AiDatasetArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var dataset = new AiDataset("dataset", AiDatasetArgs.builder()
            .displayName("terraform")
            .metadataSchemaUri("gs://google-cloud-aiplatform/schema/dataset/metadata/image_1.0.0.yaml")
            .region("us-central1")
            .labels(Map.of("env", "test"))
            .build());

    }
}
```
```yaml
resources:
  dataset:
    type: gcp:vertex:AiDataset
    properties:
      displayName: terraform
      metadataSchemaUri: gs://google-cloud-aiplatform/schema/dataset/metadata/image_1.0.0.yaml
      region: us-central1
      labels:
        env: test
```
<!--End PulumiCodeChooser -->

## Import

This resource does not support import.

П
displayName" |The user-defined name of the Dataset. The name can be up to 128 characters long and can be consist of any UTF-8 characters.
г
encryptionSpeccBa:_
]
vertexAiDatasetEncryptionSpec:gcp:vertex/AiDatasetEncryptionSpec:AiDatasetEncryptionSpecлCustomer-managed encryption key spec for a Dataset. If set, this Dataset and all sub-resources of this Dataset will be secured by this key.
Structure is documented below.
Х
labelsB2" ВA set of key/value label pairs to assign to this Workflow.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
░
metadataSchemaUri" ЦPoints to a YAML file stored on Google Cloud Storage describing additional information about the Dataset. The schema is defined as an OpenAPI 3.0.2 Schema Object. The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/metadata/.


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
:
regionB" *The region of the dataset. eg us-central1
"Ь

createTime" ЙThe timestamp of when the dataset was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"П
displayName" |The user-defined name of the Dataset. The name can be up to 128 characters long and can be consist of any UTF-8 characters.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"г
encryptionSpeccBa:_
]
vertexAiDatasetEncryptionSpec:gcp:vertex/AiDatasetEncryptionSpec:AiDatasetEncryptionSpecлCustomer-managed encryption key spec for a Dataset. If set, this Dataset and all sub-resources of this Dataset will be secured by this key.
Structure is documented below.
"Х
labelsB2" ВA set of key/value label pairs to assign to this Workflow.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"░
metadataSchemaUri" ЦPoints to a YAML file stored on Google Cloud Storage describing additional information about the Dataset. The schema is defined as an OpenAPI 3.0.2 Schema Object. The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/metadata/.


- - -
"K
name" ?The resource name of the Dataset. This value is set by Google.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"8
region" *The region of the dataset. eg us-central1
"б

updateTime" ОThe timestamp of when the dataset was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
*■D
`
vertexAiDeploymentResourcePool<gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePoolж9'DeploymentResourcePool can be shared by multiple deployed models,
whose underlying specification consists of dedicated resources.'


To get more information about DeploymentResourcePool, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.deploymentResourcePools)

## Example Usage

### Vertex Ai Deployment Resource Pool


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const deploymentResourcePool = new gcp.vertex.AiDeploymentResourcePool("deployment_resource_pool", {
    region: "us-central1",
    name: "example-deployment-resource-pool",
    dedicatedResources: {
        machineSpec: {
            machineType: "n1-standard-4",
            acceleratorType: "NVIDIA_TESLA_P4",
            acceleratorCount: 1,
        },
        minReplicaCount: 1,
        maxReplicaCount: 2,
        autoscalingMetricSpecs: [{
            metricName: "aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle",
            target: 60,
        }],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

deployment_resource_pool = gcp.vertex.AiDeploymentResourcePool("deployment_resource_pool",
    region="us-central1",
    name="example-deployment-resource-pool",
    dedicated_resources={
        "machine_spec": {
            "machine_type": "n1-standard-4",
            "accelerator_type": "NVIDIA_TESLA_P4",
            "accelerator_count": 1,
        },
        "min_replica_count": 1,
        "max_replica_count": 2,
        "autoscaling_metric_specs": [{
            "metric_name": "aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle",
            "target": 60,
        }],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var deploymentResourcePool = new Gcp.Vertex.AiDeploymentResourcePool("deployment_resource_pool", new()
    {
        Region = "us-central1",
        Name = "example-deployment-resource-pool",
        DedicatedResources = new Gcp.Vertex.Inputs.AiDeploymentResourcePoolDedicatedResourcesArgs
        {
            MachineSpec = new Gcp.Vertex.Inputs.AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgs
            {
                MachineType = "n1-standard-4",
                AcceleratorType = "NVIDIA_TESLA_P4",
                AcceleratorCount = 1,
            },
            MinReplicaCount = 1,
            MaxReplicaCount = 2,
            AutoscalingMetricSpecs = new[]
            {
                new Gcp.Vertex.Inputs.AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgs
                {
                    MetricName = "aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle",
                    Target = 60,
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := vertex.NewAiDeploymentResourcePool(ctx, "deployment_resource_pool", &vertex.AiDeploymentResourcePoolArgs{
			Region: pulumi.String("us-central1"),
			Name:   pulumi.String("example-deployment-resource-pool"),
			DedicatedResources: &vertex.AiDeploymentResourcePoolDedicatedResourcesArgs{
				MachineSpec: &vertex.AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgs{
					MachineType:      pulumi.String("n1-standard-4"),
					AcceleratorType:  pulumi.String("NVIDIA_TESLA_P4"),
					AcceleratorCount: pulumi.Int(1),
				},
				MinReplicaCount: pulumi.Int(1),
				MaxReplicaCount: pulumi.Int(2),
				AutoscalingMetricSpecs: vertex.AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArray{
					&vertex.AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgs{
						MetricName: pulumi.String("aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle"),
						Target:     pulumi.Int(60),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiDeploymentResourcePool;
import com.pulumi.gcp.vertex.AiDeploymentResourcePoolArgs;
import com.pulumi.gcp.vertex.inputs.AiDeploymentResourcePoolDedicatedResourcesArgs;
import com.pulumi.gcp.vertex.inputs.AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var deploymentResourcePool = new AiDeploymentResourcePool("deploymentResourcePool", AiDeploymentResourcePoolArgs.builder()
            .region("us-central1")
            .name("example-deployment-resource-pool")
            .dedicatedResources(AiDeploymentResourcePoolDedicatedResourcesArgs.builder()
                .machineSpec(AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgs.builder()
                    .machineType("n1-standard-4")
                    .acceleratorType("NVIDIA_TESLA_P4")
                    .acceleratorCount(1)
                    .build())
                .minReplicaCount(1)
                .maxReplicaCount(2)
                .autoscalingMetricSpecs(AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgs.builder()
                    .metricName("aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle")
                    .target(60)
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  deploymentResourcePool:
    type: gcp:vertex:AiDeploymentResourcePool
    name: deployment_resource_pool
    properties:
      region: us-central1
      name: example-deployment-resource-pool
      dedicatedResources:
        machineSpec:
          machineType: n1-standard-4
          acceleratorType: NVIDIA_TESLA_P4
          acceleratorCount: 1
        minReplicaCount: 1
        maxReplicaCount: 2
        autoscalingMetricSpecs:
          - metricName: aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle
            target: 60
```
<!--End PulumiCodeChooser -->

## Import

DeploymentResourcePool can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/deploymentResourcePools/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, DeploymentResourcePool can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default projects/{{project}}/locations/{{region}}/deploymentResourcePools/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiDeploymentResourcePool:AiDeploymentResourcePool default {{name}}
```

в
dedicatedResourcesЯBЬ:Щ
Ц
vertex*AiDeploymentResourcePoolDedicatedResources`gcp:vertex/AiDeploymentResourcePoolDedicatedResources:AiDeploymentResourcePoolDedicatedResourcesjThe underlying dedicated resources that the deployment resource pool uses.
Structure is documented below.
Р
nameB" БThe resource name of deployment resource pool. The maximum length is 63 characters, and valid characters are `/^a-z?$/`.


- - -
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
G
regionB" 7The region of deployment resource pool. eg us-central1
"y

createTime" gA timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"в
dedicatedResourcesЯBЬ:Щ
Ц
vertex*AiDeploymentResourcePoolDedicatedResources`gcp:vertex/AiDeploymentResourcePoolDedicatedResources:AiDeploymentResourcePoolDedicatedResourcesjThe underlying dedicated resources that the deployment resource pool uses.
Structure is documented below.
"О
name" БThe resource name of deployment resource pool. The maximum length is 63 characters, and valid characters are `/^a-z?$/`.


- - -
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"G
regionB" 7The region of deployment resource pool. eg us-central1
*ад
6
vertex
AiEndpoint gcp:vertex/aiEndpoint:AiEndpointш┌Models are deployed into it, and afterwards Endpoint is called to obtain predictions and explanations.


To get more information about Endpoint, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.endpoints)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/vertex-ai/docs)

## Example Usage

### Vertex Ai Endpoint Network


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const vertexNetwork = new gcp.compute.Network("vertex_network", {name: "network-name"});
const vertexRange = new gcp.compute.GlobalAddress("vertex_range", {
    name: "address-name",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 24,
    network: vertexNetwork.id,
});
const vertexVpcConnection = new gcp.servicenetworking.Connection("vertex_vpc_connection", {
    network: vertexNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [vertexRange.name],
});
const bqDataset = new gcp.bigquery.Dataset("bq_dataset", {
    datasetId: "some_dataset",
    friendlyName: "logging dataset",
    description: "This is a dataset that requests are logged to",
    location: "US",
    deleteContentsOnDestroy: true,
});
const project = gcp.organizations.getProject({});
const endpoint = new gcp.vertex.AiEndpoint("endpoint", {
    name: "endpoint-name",
    displayName: "sample-endpoint",
    description: "A sample vertex endpoint",
    location: "us-central1",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    network: pulumi.all([project, vertexNetwork.name]).apply(([project, name]) => `projects/${project.number}/global/networks/${name}`),
    encryptionSpec: {
        kmsKeyName: "kms-name",
    },
    predictRequestResponseLoggingConfig: {
        bigqueryDestination: {
            outputUri: pulumi.all([project, bqDataset.datasetId]).apply(([project, datasetId]) => `bq://${project.projectId}.${datasetId}.request_response_logging`),
        },
        enabled: true,
        samplingRate: 0.1,
    },
    trafficSplit: JSON.stringify({
        "12345": 100,
    }),
}, {
    dependsOn: [vertexVpcConnection],
});
const cryptoKey = new gcp.kms.CryptoKeyIAMMember("crypto_key", {
    cryptoKeyId: "kms-name",
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-aiplatform.iam.gserviceaccount.com`),
});
```
```python
import pulumi
import json
import pulumi_gcp as gcp

vertex_network = gcp.compute.Network("vertex_network", name="network-name")
vertex_range = gcp.compute.GlobalAddress("vertex_range",
    name="address-name",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=24,
    network=vertex_network.id)
vertex_vpc_connection = gcp.servicenetworking.Connection("vertex_vpc_connection",
    network=vertex_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[vertex_range.name])
bq_dataset = gcp.bigquery.Dataset("bq_dataset",
    dataset_id="some_dataset",
    friendly_name="logging dataset",
    description="This is a dataset that requests are logged to",
    location="US",
    delete_contents_on_destroy=True)
project = gcp.organizations.get_project()
endpoint = gcp.vertex.AiEndpoint("endpoint",
    name="endpoint-name",
    display_name="sample-endpoint",
    description="A sample vertex endpoint",
    location="us-central1",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    network=vertex_network.name.apply(lambda name: f"projects/{project.number}/global/networks/{name}"),
    encryption_spec={
        "kms_key_name": "kms-name",
    },
    predict_request_response_logging_config={
        "bigquery_destination": {
            "output_uri": bq_dataset.dataset_id.apply(lambda dataset_id: f"bq://{project.project_id}.{dataset_id}.request_response_logging"),
        },
        "enabled": True,
        "sampling_rate": 0.1,
    },
    traffic_split=json.dumps({
        "12345": 100,
    }),
    opts = pulumi.ResourceOptions(depends_on=[vertex_vpc_connection]))
crypto_key = gcp.kms.CryptoKeyIAMMember("crypto_key",
    crypto_key_id="kms-name",
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=f"serviceAccount:service-{project.number}@gcp-sa-aiplatform.iam.gserviceaccount.com")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var vertexNetwork = new Gcp.Compute.Network("vertex_network", new()
    {
        Name = "network-name",
    });

    var vertexRange = new Gcp.Compute.GlobalAddress("vertex_range", new()
    {
        Name = "address-name",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 24,
        Network = vertexNetwork.Id,
    });

    var vertexVpcConnection = new Gcp.ServiceNetworking.Connection("vertex_vpc_connection", new()
    {
        Network = vertexNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            vertexRange.Name,
        },
    });

    var bqDataset = new Gcp.BigQuery.Dataset("bq_dataset", new()
    {
        DatasetId = "some_dataset",
        FriendlyName = "logging dataset",
        Description = "This is a dataset that requests are logged to",
        Location = "US",
        DeleteContentsOnDestroy = true,
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    var endpoint = new Gcp.Vertex.AiEndpoint("endpoint", new()
    {
        Name = "endpoint-name",
        DisplayName = "sample-endpoint",
        Description = "A sample vertex endpoint",
        Location = "us-central1",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        Network = Output.Tuple(project, vertexNetwork.Name).Apply(values =>
        {
            var project = values.Item1;
            var name = values.Item2;
            return $"projects/{project.Apply(getProjectResult => getProjectResult.Number)}/global/networks/{name}";
        }),
        EncryptionSpec = new Gcp.Vertex.Inputs.AiEndpointEncryptionSpecArgs
        {
            KmsKeyName = "kms-name",
        },
        PredictRequestResponseLoggingConfig = new Gcp.Vertex.Inputs.AiEndpointPredictRequestResponseLoggingConfigArgs
        {
            BigqueryDestination = new Gcp.Vertex.Inputs.AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgs
            {
                OutputUri = Output.Tuple(project, bqDataset.DatasetId).Apply(values =>
                {
                    var project = values.Item1;
                    var datasetId = values.Item2;
                    return $"bq://{project.Apply(getProjectResult => getProjectResult.ProjectId)}.{datasetId}.request_response_logging";
                }),
            },
            Enabled = true,
            SamplingRate = 0.1,
        },
        TrafficSplit = JsonSerializer.Serialize(new Dictionary<string, object?>
        {
            ["12345"] = 100,
        }),
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vertexVpcConnection,
        },
    });

    var cryptoKey = new Gcp.Kms.CryptoKeyIAMMember("crypto_key", new()
    {
        CryptoKeyId = "kms-name",
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-aiplatform.iam.gserviceaccount.com",
    });

});
```
```go
package main

import (
	"encoding/json"
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		vertexNetwork, err := compute.NewNetwork(ctx, "vertex_network", &compute.NetworkArgs{
			Name: pulumi.String("network-name"),
		})
		if err != nil {
			return err
		}
		vertexRange, err := compute.NewGlobalAddress(ctx, "vertex_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("address-name"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(24),
			Network:      vertexNetwork.ID(),
		})
		if err != nil {
			return err
		}
		vertexVpcConnection, err := servicenetworking.NewConnection(ctx, "vertex_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: vertexNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				vertexRange.Name,
			},
		})
		if err != nil {
			return err
		}
		bqDataset, err := bigquery.NewDataset(ctx, "bq_dataset", &bigquery.DatasetArgs{
			DatasetId:               pulumi.String("some_dataset"),
			FriendlyName:            pulumi.String("logging dataset"),
			Description:             pulumi.String("This is a dataset that requests are logged to"),
			Location:                pulumi.String("US"),
			DeleteContentsOnDestroy: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		tmpJSON0, err := json.Marshal(map[string]interface{}{
			"12345": 100,
		})
		if err != nil {
			return err
		}
		json0 := string(tmpJSON0)
		_, err = vertex.NewAiEndpoint(ctx, "endpoint", &vertex.AiEndpointArgs{
			Name:        pulumi.String("endpoint-name"),
			DisplayName: pulumi.String("sample-endpoint"),
			Description: pulumi.String("A sample vertex endpoint"),
			Location:    pulumi.String("us-central1"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			Network: vertexNetwork.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("projects/%v/global/networks/%v", project.Number, name), nil
			}).(pulumi.StringOutput),
			EncryptionSpec: &vertex.AiEndpointEncryptionSpecArgs{
				KmsKeyName: pulumi.String("kms-name"),
			},
			PredictRequestResponseLoggingConfig: &vertex.AiEndpointPredictRequestResponseLoggingConfigArgs{
				BigqueryDestination: &vertex.AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgs{
					OutputUri: bqDataset.DatasetId.ApplyT(func(datasetId string) (string, error) {
						return fmt.Sprintf("bq://%v.%v.request_response_logging", project.ProjectId, datasetId), nil
					}).(pulumi.StringOutput),
				},
				Enabled:      pulumi.Bool(true),
				SamplingRate: pulumi.Float64(0.1),
			},
			TrafficSplit: pulumi.String(json0),
		}, pulumi.DependsOn([]pulumi.Resource{
			vertexVpcConnection,
		}))
		if err != nil {
			return err
		}
		_, err = kms.NewCryptoKeyIAMMember(ctx, "crypto_key", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: pulumi.String("kms-name"),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-aiplatform.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.bigquery.Dataset;
import com.pulumi.gcp.bigquery.DatasetArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.vertex.AiEndpoint;
import com.pulumi.gcp.vertex.AiEndpointArgs;
import com.pulumi.gcp.vertex.inputs.AiEndpointEncryptionSpecArgs;
import com.pulumi.gcp.vertex.inputs.AiEndpointPredictRequestResponseLoggingConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import static com.pulumi.codegen.internal.Serialization.*;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var vertexNetwork = new Network("vertexNetwork", NetworkArgs.builder()
            .name("network-name")
            .build());

        var vertexRange = new GlobalAddress("vertexRange", GlobalAddressArgs.builder()
            .name("address-name")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(24)
            .network(vertexNetwork.id())
            .build());

        var vertexVpcConnection = new Connection("vertexVpcConnection", ConnectionArgs.builder()
            .network(vertexNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(vertexRange.name())
            .build());

        var bqDataset = new Dataset("bqDataset", DatasetArgs.builder()
            .datasetId("some_dataset")
            .friendlyName("logging dataset")
            .description("This is a dataset that requests are logged to")
            .location("US")
            .deleteContentsOnDestroy(true)
            .build());

        final var project = OrganizationsFunctions.getProject();

        var endpoint = new AiEndpoint("endpoint", AiEndpointArgs.builder()
            .name("endpoint-name")
            .displayName("sample-endpoint")
            .description("A sample vertex endpoint")
            .location("us-central1")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .network(vertexNetwork.name().applyValue(name -> String.format("projects/%s/global/networks/%s", project.applyValue(getProjectResult -> getProjectResult.number()),name)))
            .encryptionSpec(AiEndpointEncryptionSpecArgs.builder()
                .kmsKeyName("kms-name")
                .build())
            .predictRequestResponseLoggingConfig(AiEndpointPredictRequestResponseLoggingConfigArgs.builder()
                .bigqueryDestination(AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgs.builder()
                    .outputUri(bqDataset.datasetId().applyValue(datasetId -> String.format("bq://%s.%s.request_response_logging", project.applyValue(getProjectResult -> getProjectResult.projectId()),datasetId)))
                    .build())
                .enabled(true)
                .samplingRate(0.1)
                .build())
            .trafficSplit(serializeJson(
                jsonObject(
                    jsonProperty("12345", 100)
                )))
            .build(), CustomResourceOptions.builder()
                .dependsOn(vertexVpcConnection)
                .build());

        var cryptoKey = new CryptoKeyIAMMember("cryptoKey", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId("kms-name")
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(String.format("serviceAccount:service-%s@gcp-sa-aiplatform.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

    }
}
```
```yaml
resources:
  endpoint:
    type: gcp:vertex:AiEndpoint
    properties:
      name: endpoint-name
      displayName: sample-endpoint
      description: A sample vertex endpoint
      location: us-central1
      region: us-central1
      labels:
        label-one: value-one
      network: projects/${project.number}/global/networks/${vertexNetwork.name}
      encryptionSpec:
        kmsKeyName: kms-name
      predictRequestResponseLoggingConfig:
        bigqueryDestination:
          outputUri: bq://${project.projectId}.${bqDataset.datasetId}.request_response_logging
        enabled: true
        samplingRate: 0.1
      trafficSplit:
        fn::toJSON:
          '12345': 100
    options:
      dependsOn:
        - ${vertexVpcConnection}
  vertexVpcConnection:
    type: gcp:servicenetworking:Connection
    name: vertex_vpc_connection
    properties:
      network: ${vertexNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${vertexRange.name}
  vertexRange:
    type: gcp:compute:GlobalAddress
    name: vertex_range
    properties:
      name: address-name
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 24
      network: ${vertexNetwork.id}
  vertexNetwork:
    type: gcp:compute:Network
    name: vertex_network
    properties:
      name: network-name
  cryptoKey:
    type: gcp:kms:CryptoKeyIAMMember
    name: crypto_key
    properties:
      cryptoKeyId: kms-name
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: serviceAccount:service-${project.number}@gcp-sa-aiplatform.iam.gserviceaccount.com
  bqDataset:
    type: gcp:bigquery:Dataset
    name: bq_dataset
    properties:
      datasetId: some_dataset
      friendlyName: logging dataset
      description: This is a dataset that requests are logged to
      location: US
      deleteContentsOnDestroy: true
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Vertex Ai Endpoint Private Service Connect


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const endpoint = new gcp.vertex.AiEndpoint("endpoint", {
    name: "endpoint-name_8270",
    displayName: "sample-endpoint",
    description: "A sample vertex endpoint",
    location: "us-central1",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    privateServiceConnectConfig: {
        enablePrivateServiceConnect: true,
        projectAllowlists: [project.then(project => project.projectId)],
        enableSecurePrivateServiceConnect: false,
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
endpoint = gcp.vertex.AiEndpoint("endpoint",
    name="endpoint-name_8270",
    display_name="sample-endpoint",
    description="A sample vertex endpoint",
    location="us-central1",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    private_service_connect_config={
        "enable_private_service_connect": True,
        "project_allowlists": [project.project_id],
        "enable_secure_private_service_connect": False,
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var endpoint = new Gcp.Vertex.AiEndpoint("endpoint", new()
    {
        Name = "endpoint-name_8270",
        DisplayName = "sample-endpoint",
        Description = "A sample vertex endpoint",
        Location = "us-central1",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        PrivateServiceConnectConfig = new Gcp.Vertex.Inputs.AiEndpointPrivateServiceConnectConfigArgs
        {
            EnablePrivateServiceConnect = true,
            ProjectAllowlists = new[]
            {
                project.Apply(getProjectResult => getProjectResult.ProjectId),
            },
            EnableSecurePrivateServiceConnect = false,
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = vertex.NewAiEndpoint(ctx, "endpoint", &vertex.AiEndpointArgs{
			Name:        pulumi.String("endpoint-name_8270"),
			DisplayName: pulumi.String("sample-endpoint"),
			Description: pulumi.String("A sample vertex endpoint"),
			Location:    pulumi.String("us-central1"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			PrivateServiceConnectConfig: &vertex.AiEndpointPrivateServiceConnectConfigArgs{
				EnablePrivateServiceConnect: pulumi.Bool(true),
				ProjectAllowlists: pulumi.StringArray{
					pulumi.String(project.ProjectId),
				},
				EnableSecurePrivateServiceConnect: pulumi.Bool(false),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.vertex.AiEndpoint;
import com.pulumi.gcp.vertex.AiEndpointArgs;
import com.pulumi.gcp.vertex.inputs.AiEndpointPrivateServiceConnectConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var endpoint = new AiEndpoint("endpoint", AiEndpointArgs.builder()
            .name("endpoint-name_8270")
            .displayName("sample-endpoint")
            .description("A sample vertex endpoint")
            .location("us-central1")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .privateServiceConnectConfig(AiEndpointPrivateServiceConnectConfigArgs.builder()
                .enablePrivateServiceConnect(true)
                .projectAllowlists(project.applyValue(getProjectResult -> getProjectResult.projectId()))
                .enableSecurePrivateServiceConnect(false)
                .build())
            .build());

    }
}
```
```yaml
resources:
  endpoint:
    type: gcp:vertex:AiEndpoint
    properties:
      name: endpoint-name_8270
      displayName: sample-endpoint
      description: A sample vertex endpoint
      location: us-central1
      region: us-central1
      labels:
        label-one: value-one
      privateServiceConnectConfig:
        enablePrivateServiceConnect: true
        projectAllowlists:
          - ${project.projectId}
        enableSecurePrivateServiceConnect: false
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Vertex Ai Endpoint Dedicated Endpoint


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const endpoint = new gcp.vertex.AiEndpoint("endpoint", {
    name: "endpoint-name_41150",
    displayName: "sample-endpoint",
    description: "A sample vertex endpoint",
    location: "us-central1",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    dedicatedEndpointEnabled: true,
});
const project = gcp.organizations.getProject({});
```
```python
import pulumi
import pulumi_gcp as gcp

endpoint = gcp.vertex.AiEndpoint("endpoint",
    name="endpoint-name_41150",
    display_name="sample-endpoint",
    description="A sample vertex endpoint",
    location="us-central1",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    dedicated_endpoint_enabled=True)
project = gcp.organizations.get_project()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var endpoint = new Gcp.Vertex.AiEndpoint("endpoint", new()
    {
        Name = "endpoint-name_41150",
        DisplayName = "sample-endpoint",
        Description = "A sample vertex endpoint",
        Location = "us-central1",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        DedicatedEndpointEnabled = true,
    });

    var project = Gcp.Organizations.GetProject.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := vertex.NewAiEndpoint(ctx, "endpoint", &vertex.AiEndpointArgs{
			Name:        pulumi.String("endpoint-name_41150"),
			DisplayName: pulumi.String("sample-endpoint"),
			Description: pulumi.String("A sample vertex endpoint"),
			Location:    pulumi.String("us-central1"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			DedicatedEndpointEnabled: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		_, err = organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiEndpoint;
import com.pulumi.gcp.vertex.AiEndpointArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var endpoint = new AiEndpoint("endpoint", AiEndpointArgs.builder()
            .name("endpoint-name_41150")
            .displayName("sample-endpoint")
            .description("A sample vertex endpoint")
            .location("us-central1")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .dedicatedEndpointEnabled(true)
            .build());

        final var project = OrganizationsFunctions.getProject();

    }
}
```
```yaml
resources:
  endpoint:
    type: gcp:vertex:AiEndpoint
    properties:
      name: endpoint-name_41150
      displayName: sample-endpoint
      description: A sample vertex endpoint
      location: us-central1
      region: us-central1
      labels:
        label-one: value-one
      dedicatedEndpointEnabled: true
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Endpoint can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{location}}/endpoints/{{name}}`

* `{{project}}/{{location}}/{{name}}`

* `{{location}}/{{name}}`

When using the `pulumi import` command, Endpoint can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiEndpoint:AiEndpoint default projects/{{project}}/locations/{{location}}/endpoints/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiEndpoint:AiEndpoint default {{project}}/{{location}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiEndpoint:AiEndpoint default {{location}}/{{name}}
```

л
dedicatedEndpointEnabledB
 ИIf true, the endpoint will be exposed through a dedicated DNS [Endpoint.dedicated_endpoint_dns]. Your request to the dedicated DNS will be isolated from other users' traffic and will have better performance and reliability. Note: Once you enabled dedicated endpoint, you won't be able to send request to the shared DNS {region}-aiplatform.googleapis.com. The limitation will be removed soon.
6
descriptionB" !The description of the Endpoint.
Т
displayName" Required. The display name of the Endpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.
к
encryptionSpecfBd:b
`
vertexAiEndpointEncryptionSpec<gcp:vertex/AiEndpointEncryptionSpec:AiEndpointEncryptionSpecпCustomer-managed encryption key spec for an Endpoint. If set, this Endpoint and all sub-resources of this Endpoint will be secured by this key.
Structure is documented below.
и
labelsB2" ХThe labels with user-defined metadata to organize your Endpoints. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
6
location" &The location for the resource


- - -
~
nameB" pThe resource name of the Endpoint. The name must be numeric with no leading zeros and can be at most 10 digits.
╢
networkB" дThe full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the Endpoint should be peered. Private services access must already be configured for the network. If left unspecified, the Endpoint is not peered with any network. Only one of the fields, network or enable_private_service_connect, can be set. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is network name. Only one of the fields, `network` or `privateServiceConnectConfig`, can be set.
░
#predictRequestResponseLoggingConfigиBе:в
Я
vertex-AiEndpointPredictRequestResponseLoggingConfigfgcp:vertex/AiEndpointPredictRequestResponseLoggingConfig:AiEndpointPredictRequestResponseLoggingConfig^Configures the request-response logging for online prediction.
Structure is documented below.
┴
privateServiceConnectConfigРBН:К
З
vertex%AiEndpointPrivateServiceConnectConfigVgcp:vertex/AiEndpointPrivateServiceConnectConfig:AiEndpointPrivateServiceConnectConfigОConfiguration for private service connect. `network` and `privateServiceConnectConfig` are mutually exclusive.
Structure is documented below.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
,
regionB" The region for the resource
╓
trafficSplitB" ┐A map from a DeployedModel's id to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel.
If a DeployedModel's id is not listed in this map, then it receives no traffic.
The traffic percentage values must add up to 100, or map must be empty if the Endpoint is to not accept any traffic at a moment. See
the `deployModel` [example](https://cloud.google.com/vertex-ai/docs/general/deployment#deploy_a_model_to_an_endpoint) and
[documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.endpoints/deployModel) for more information.
> **Note:** To set the map to empty, set `"{}"`, apply, and then remove the field from your config.
"V

createTime" D(Output)
Output only. Timestamp when the DeployedModel was created.
"╫
dedicatedEndpointDns" ║Output only. DNS of the dedicated endpoint. Will only be populated if dedicatedEndpointEnabled is true. Format: `https://{endpointId}.{region}-{projectNumber}.prediction.vertexai.goog`.
"л
dedicatedEndpointEnabledB
 ИIf true, the endpoint will be exposed through a dedicated DNS [Endpoint.dedicated_endpoint_dns]. Your request to the dedicated DNS will be isolated from other users' traffic and will have better performance and reliability. Note: Once you enabled dedicated endpoint, you won't be able to send request to the shared DNS {region}-aiplatform.googleapis.com. The limitation will be removed soon.
"н
deployedModelsc*a:_
]
vertexAiEndpointDeployedModel:gcp:vertex/AiEndpointDeployedModel:AiEndpointDeployedModel╡Output only. The models deployed in this Endpoint. To add or remove DeployedModels use EndpointService.DeployModel and EndpointService.UndeployModel respectively. Models can also be deployed and undeployed using the [Cloud Console](https://console.cloud.google.com/vertex-ai/).
Structure is documented below.
"6
descriptionB" !The description of the Endpoint.
"Т
displayName" Required. The display name of the Endpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"к
encryptionSpecfBd:b
`
vertexAiEndpointEncryptionSpec<gcp:vertex/AiEndpointEncryptionSpec:AiEndpointEncryptionSpecпCustomer-managed encryption key spec for an Endpoint. If set, this Endpoint and all sub-resources of this Endpoint will be secured by this key.
Structure is documented below.
"r
etag" fUsed to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
"и
labelsB2" ХThe labels with user-defined metadata to organize your Endpoints. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"6
location" &The location for the resource


- - -
"м
modelDeploymentMonitoringJob" ЗOutput only. Resource name of the Model Monitoring job associated with this Endpoint if monitoring is enabled by CreateModelDeploymentMonitoringJob. Format: `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
"|
name" pThe resource name of the Endpoint. The name must be numeric with no leading zeros and can be at most 10 digits.
"╢
networkB" дThe full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the Endpoint should be peered. Private services access must already be configured for the network. If left unspecified, the Endpoint is not peered with any network. Only one of the fields, network or enable_private_service_connect, can be set. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is network name. Only one of the fields, `network` or `privateServiceConnectConfig`, can be set.
"░
#predictRequestResponseLoggingConfigиBе:в
Я
vertex-AiEndpointPredictRequestResponseLoggingConfigfgcp:vertex/AiEndpointPredictRequestResponseLoggingConfig:AiEndpointPredictRequestResponseLoggingConfig^Configures the request-response logging for online prediction.
Structure is documented below.
"┴
privateServiceConnectConfigРBН:К
З
vertex%AiEndpointPrivateServiceConnectConfigVgcp:vertex/AiEndpointPrivateServiceConnectConfig:AiEndpointPrivateServiceConnectConfigОConfiguration for private service connect. `network` and `privateServiceConnectConfig` are mutually exclusive.
Structure is documented below.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
",
regionB" The region for the resource
"╘
trafficSplit" ┐A map from a DeployedModel's id to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel.
If a DeployedModel's id is not listed in this map, then it receives no traffic.
The traffic percentage values must add up to 100, or map must be empty if the Endpoint is to not accept any traffic at a moment. See
the `deployModel` [example](https://cloud.google.com/vertex-ai/docs/general/deployment#deploy_a_model_to_an_endpoint) and
[documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.endpoints/deployModel) for more information.
> **Note:** To set the map to empty, set `"{}"`, apply, and then remove the field from your config.
"N

updateTime" <Output only. Timestamp when this Endpoint was last updated.
*И
T
vertexAiEndpointIamBinding4gcp:vertex/aiEndpointIamBinding:AiEndpointIamBindingВ
	conditionuBs:q
o
vertexAiEndpointIamBindingConditionFgcp:vertex/AiEndpointIamBindingCondition:AiEndpointIamBindingCondition
endpoint" 
locationB" 
members*" 
projectB" 

role" "В
	conditionuBs:q
o
vertexAiEndpointIamBindingConditionFgcp:vertex/AiEndpointIamBindingCondition:AiEndpointIamBindingCondition"
endpoint" "

etag" "
location" "
members*" "
project" "

role" *ў
Q
vertexAiEndpointIamMember2gcp:vertex/aiEndpointIamMember:AiEndpointIamMember
	conditionrBp:n
l
vertexAiEndpointIamMemberConditionDgcp:vertex/AiEndpointIamMemberCondition:AiEndpointIamMemberCondition
endpoint" 
locationB" 
member" 
projectB" 

role" "
	conditionrBp:n
l
vertexAiEndpointIamMemberConditionDgcp:vertex/AiEndpointIamMemberCondition:AiEndpointIamMemberCondition"
endpoint" "

etag" "
location" "
member" "
project" "

role" *х
Q
vertexAiEndpointIamPolicy2gcp:vertex/aiEndpointIamPolicy:AiEndpointIamPolicy
endpoint" 
locationB" 

policyData" 
projectB" "
endpoint" "

etag" "
location" "

policyData" "
project" *фk
B
vertexAiFeatureGroup(gcp:vertex/aiFeatureGroup:AiFeatureGroupёVVertex AI Feature Group.


To get more information about FeatureGroup, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureGroups)
* How-to Guides
    * [Creating a Feature Group](https://cloud.google.com/vertex-ai/docs/featurestore/latest/create-featuregroup)

## Example Usage

### Vertex Ai Feature Group


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sampleDataset = new gcp.bigquery.Dataset("sample_dataset", {
    datasetId: "job_load_dataset",
    friendlyName: "test",
    description: "This is a test description",
    location: "US",
});
const sampleTable = new gcp.bigquery.Table("sample_table", {
    deletionProtection: false,
    datasetId: sampleDataset.datasetId,
    tableId: "job_load_table",
    schema: `[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
`,
});
const featureGroup = new gcp.vertex.AiFeatureGroup("feature_group", {
    name: "example_feature_group",
    description: "A sample feature group",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    bigQuery: {
        bigQuerySource: {
            inputUri: pulumi.interpolate`bq://${sampleTable.project}.${sampleTable.datasetId}.${sampleTable.tableId}`,
        },
        entityIdColumns: ["feature_id"],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sample_dataset = gcp.bigquery.Dataset("sample_dataset",
    dataset_id="job_load_dataset",
    friendly_name="test",
    description="This is a test description",
    location="US")
sample_table = gcp.bigquery.Table("sample_table",
    deletion_protection=False,
    dataset_id=sample_dataset.dataset_id,
    table_id="job_load_table",
    schema="""[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
""")
feature_group = gcp.vertex.AiFeatureGroup("feature_group",
    name="example_feature_group",
    description="A sample feature group",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    big_query={
        "big_query_source": {
            "input_uri": pulumi.Output.all(
                project=sample_table.project,
                dataset_id=sample_table.dataset_id,
                table_id=sample_table.table_id
).apply(lambda resolved_outputs: f"bq://{resolved_outputs['project']}.{resolved_outputs['dataset_id']}.{resolved_outputs['table_id']}")
,
        },
        "entity_id_columns": ["feature_id"],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sampleDataset = new Gcp.BigQuery.Dataset("sample_dataset", new()
    {
        DatasetId = "job_load_dataset",
        FriendlyName = "test",
        Description = "This is a test description",
        Location = "US",
    });

    var sampleTable = new Gcp.BigQuery.Table("sample_table", new()
    {
        DeletionProtection = false,
        DatasetId = sampleDataset.DatasetId,
        TableId = "job_load_table",
        Schema = @"[
    {
        ""name"": ""feature_id"",
        ""type"": ""STRING"",
        ""mode"": ""NULLABLE""
    },
    {
        ""name"": ""feature_timestamp"",
        ""type"": ""TIMESTAMP"",
        ""mode"": ""NULLABLE""
    }
]
",
    });

    var featureGroup = new Gcp.Vertex.AiFeatureGroup("feature_group", new()
    {
        Name = "example_feature_group",
        Description = "A sample feature group",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        BigQuery = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryArgs
        {
            BigQuerySource = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryBigQuerySourceArgs
            {
                InputUri = Output.Tuple(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).Apply(values =>
                {
                    var project = values.Item1;
                    var datasetId = values.Item2;
                    var tableId = values.Item3;
                    return $"bq://{project}.{datasetId}.{tableId}";
                }),
            },
            EntityIdColumns = new[]
            {
                "feature_id",
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sampleDataset, err := bigquery.NewDataset(ctx, "sample_dataset", &bigquery.DatasetArgs{
			DatasetId:    pulumi.String("job_load_dataset"),
			FriendlyName: pulumi.String("test"),
			Description:  pulumi.String("This is a test description"),
			Location:     pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		sampleTable, err := bigquery.NewTable(ctx, "sample_table", &bigquery.TableArgs{
			DeletionProtection: pulumi.Bool(false),
			DatasetId:          sampleDataset.DatasetId,
			TableId:            pulumi.String("job_load_table"),
			Schema: pulumi.String(`[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
`),
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiFeatureGroup(ctx, "feature_group", &vertex.AiFeatureGroupArgs{
			Name:        pulumi.String("example_feature_group"),
			Description: pulumi.String("A sample feature group"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			BigQuery: &vertex.AiFeatureGroupBigQueryArgs{
				BigQuerySource: &vertex.AiFeatureGroupBigQueryBigQuerySourceArgs{
					InputUri: pulumi.All(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).ApplyT(func(_args []interface{}) (string, error) {
						project := _args[0].(string)
						datasetId := _args[1].(string)
						tableId := _args[2].(string)
						return fmt.Sprintf("bq://%v.%v.%v", project, datasetId, tableId), nil
					}).(pulumi.StringOutput),
				},
				EntityIdColumns: pulumi.StringArray{
					pulumi.String("feature_id"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.bigquery.Dataset;
import com.pulumi.gcp.bigquery.DatasetArgs;
import com.pulumi.gcp.bigquery.Table;
import com.pulumi.gcp.bigquery.TableArgs;
import com.pulumi.gcp.vertex.AiFeatureGroup;
import com.pulumi.gcp.vertex.AiFeatureGroupArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryBigQuerySourceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sampleDataset = new Dataset("sampleDataset", DatasetArgs.builder()
            .datasetId("job_load_dataset")
            .friendlyName("test")
            .description("This is a test description")
            .location("US")
            .build());

        var sampleTable = new Table("sampleTable", TableArgs.builder()
            .deletionProtection(false)
            .datasetId(sampleDataset.datasetId())
            .tableId("job_load_table")
            .schema("""
[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
            """)
            .build());

        var featureGroup = new AiFeatureGroup("featureGroup", AiFeatureGroupArgs.builder()
            .name("example_feature_group")
            .description("A sample feature group")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .bigQuery(AiFeatureGroupBigQueryArgs.builder()
                .bigQuerySource(AiFeatureGroupBigQueryBigQuerySourceArgs.builder()
                    .inputUri(Output.tuple(sampleTable.project(), sampleTable.datasetId(), sampleTable.tableId()).applyValue(values -> {
                        var project = values.t1;
                        var datasetId = values.t2;
                        var tableId = values.t3;
                        return String.format("bq://%s.%s.%s", project,datasetId,tableId);
                    }))
                    .build())
                .entityIdColumns("feature_id")
                .build())
            .build());

    }
}
```
```yaml
resources:
  featureGroup:
    type: gcp:vertex:AiFeatureGroup
    name: feature_group
    properties:
      name: example_feature_group
      description: A sample feature group
      region: us-central1
      labels:
        label-one: value-one
      bigQuery:
        bigQuerySource:
          inputUri: bq://${sampleTable.project}.${sampleTable.datasetId}.${sampleTable.tableId}
        entityIdColumns:
          - feature_id
  sampleDataset:
    type: gcp:bigquery:Dataset
    name: sample_dataset
    properties:
      datasetId: job_load_dataset
      friendlyName: test
      description: This is a test description
      location: US
  sampleTable:
    type: gcp:bigquery:Table
    name: sample_table
    properties:
      deletionProtection: false
      datasetId: ${sampleDataset.datasetId}
      tableId: job_load_table
      schema: |
        [
            {
                "name": "feature_id",
                "type": "STRING",
                "mode": "NULLABLE"
            },
            {
                "name": "feature_timestamp",
                "type": "TIMESTAMP",
                "mode": "NULLABLE"
            }
        ]
```
<!--End PulumiCodeChooser -->

## Import

FeatureGroup can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/featureGroups/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, FeatureGroup can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiFeatureGroup:AiFeatureGroup default projects/{{project}}/locations/{{region}}/featureGroups/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureGroup:AiFeatureGroup default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureGroup:AiFeatureGroup default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureGroup:AiFeatureGroup default {{name}}
```

х
bigQuery`B^:\
Z
vertexAiFeatureGroupBigQuery8gcp:vertex/AiFeatureGroupBigQuery:AiFeatureGroupBigQueryЎIndicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time series source, which is required to have an entityId and a feature_timestamp column in the source.
Structure is documented below.
:
descriptionB" %The description of the FeatureGroup.
Ю
labelsB2" ЛThe labels with user-defined metadata to organize your FeatureGroup.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
6
nameB" (The resource name of the Feature Group.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
<
regionB" ,The region of feature group. eg us-central1
"х
bigQuery`B^:\
Z
vertexAiFeatureGroupBigQuery8gcp:vertex/AiFeatureGroupBigQuery:AiFeatureGroupBigQueryЎIndicates that features for this group come from BigQuery Table/View. By default treats the source as a sparse time series source, which is required to have an entityId and a feature_timestamp column in the source.
Structure is documented below.
"б

createTime" ОThe timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
":
descriptionB" %The description of the FeatureGroup.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"B
etag" 6Used to perform consistent read-modify-write updates.
"Ю
labelsB2" ЛThe labels with user-defined metadata to organize your FeatureGroup.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"4
name" (The resource name of the Feature Group.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"<
regionB" ,The region of feature group. eg us-central1
"ж

updateTime" УThe timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
*ЯВ
W
vertexAiFeatureGroupFeature6gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature▒oVertex AI Feature Group Feature is feature metadata information.


To get more information about FeatureGroupFeature, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureGroups.features)
* How-to Guides
    * [Creating a Feature](https://cloud.google.com/vertex-ai/docs/featurestore/latest/create-feature)

## Example Usage

### Vertex Ai Feature Group Feature


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sampleDataset = new gcp.bigquery.Dataset("sample_dataset", {
    datasetId: "job_load_dataset",
    friendlyName: "test",
    description: "This is a test description",
    location: "US",
});
const sampleTable = new gcp.bigquery.Table("sample_table", {
    deletionProtection: false,
    datasetId: sampleDataset.datasetId,
    tableId: "job_load_table",
    schema: `[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_feature",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
`,
});
const sampleFeatureGroup = new gcp.vertex.AiFeatureGroup("sample_feature_group", {
    name: "example_feature_group",
    description: "A sample feature group",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    bigQuery: {
        bigQuerySource: {
            inputUri: pulumi.interpolate`bq://${sampleTable.project}.${sampleTable.datasetId}.${sampleTable.tableId}`,
        },
        entityIdColumns: ["feature_id"],
    },
});
const featureGroupFeature = new gcp.vertex.AiFeatureGroupFeature("feature_group_feature", {
    name: "example_feature",
    region: "us-central1",
    featureGroup: sampleFeatureGroup.name,
    description: "A sample feature",
    labels: {
        "label-one": "value-one",
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

sample_dataset = gcp.bigquery.Dataset("sample_dataset",
    dataset_id="job_load_dataset",
    friendly_name="test",
    description="This is a test description",
    location="US")
sample_table = gcp.bigquery.Table("sample_table",
    deletion_protection=False,
    dataset_id=sample_dataset.dataset_id,
    table_id="job_load_table",
    schema="""[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_feature",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
""")
sample_feature_group = gcp.vertex.AiFeatureGroup("sample_feature_group",
    name="example_feature_group",
    description="A sample feature group",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    big_query={
        "big_query_source": {
            "input_uri": pulumi.Output.all(
                project=sample_table.project,
                dataset_id=sample_table.dataset_id,
                table_id=sample_table.table_id
).apply(lambda resolved_outputs: f"bq://{resolved_outputs['project']}.{resolved_outputs['dataset_id']}.{resolved_outputs['table_id']}")
,
        },
        "entity_id_columns": ["feature_id"],
    })
feature_group_feature = gcp.vertex.AiFeatureGroupFeature("feature_group_feature",
    name="example_feature",
    region="us-central1",
    feature_group=sample_feature_group.name,
    description="A sample feature",
    labels={
        "label-one": "value-one",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sampleDataset = new Gcp.BigQuery.Dataset("sample_dataset", new()
    {
        DatasetId = "job_load_dataset",
        FriendlyName = "test",
        Description = "This is a test description",
        Location = "US",
    });

    var sampleTable = new Gcp.BigQuery.Table("sample_table", new()
    {
        DeletionProtection = false,
        DatasetId = sampleDataset.DatasetId,
        TableId = "job_load_table",
        Schema = @"[
    {
        ""name"": ""feature_id"",
        ""type"": ""STRING"",
        ""mode"": ""NULLABLE""
    },
    {
        ""name"": ""example_feature"",
        ""type"": ""STRING"",
        ""mode"": ""NULLABLE""
    },
    {
        ""name"": ""feature_timestamp"",
        ""type"": ""TIMESTAMP"",
        ""mode"": ""NULLABLE""
    }
]
",
    });

    var sampleFeatureGroup = new Gcp.Vertex.AiFeatureGroup("sample_feature_group", new()
    {
        Name = "example_feature_group",
        Description = "A sample feature group",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        BigQuery = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryArgs
        {
            BigQuerySource = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryBigQuerySourceArgs
            {
                InputUri = Output.Tuple(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).Apply(values =>
                {
                    var project = values.Item1;
                    var datasetId = values.Item2;
                    var tableId = values.Item3;
                    return $"bq://{project}.{datasetId}.{tableId}";
                }),
            },
            EntityIdColumns = new[]
            {
                "feature_id",
            },
        },
    });

    var featureGroupFeature = new Gcp.Vertex.AiFeatureGroupFeature("feature_group_feature", new()
    {
        Name = "example_feature",
        Region = "us-central1",
        FeatureGroup = sampleFeatureGroup.Name,
        Description = "A sample feature",
        Labels = 
        {
            { "label-one", "value-one" },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sampleDataset, err := bigquery.NewDataset(ctx, "sample_dataset", &bigquery.DatasetArgs{
			DatasetId:    pulumi.String("job_load_dataset"),
			FriendlyName: pulumi.String("test"),
			Description:  pulumi.String("This is a test description"),
			Location:     pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		sampleTable, err := bigquery.NewTable(ctx, "sample_table", &bigquery.TableArgs{
			DeletionProtection: pulumi.Bool(false),
			DatasetId:          sampleDataset.DatasetId,
			TableId:            pulumi.String("job_load_table"),
			Schema: pulumi.String(`[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_feature",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
`),
		})
		if err != nil {
			return err
		}
		sampleFeatureGroup, err := vertex.NewAiFeatureGroup(ctx, "sample_feature_group", &vertex.AiFeatureGroupArgs{
			Name:        pulumi.String("example_feature_group"),
			Description: pulumi.String("A sample feature group"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			BigQuery: &vertex.AiFeatureGroupBigQueryArgs{
				BigQuerySource: &vertex.AiFeatureGroupBigQueryBigQuerySourceArgs{
					InputUri: pulumi.All(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).ApplyT(func(_args []interface{}) (string, error) {
						project := _args[0].(string)
						datasetId := _args[1].(string)
						tableId := _args[2].(string)
						return fmt.Sprintf("bq://%v.%v.%v", project, datasetId, tableId), nil
					}).(pulumi.StringOutput),
				},
				EntityIdColumns: pulumi.StringArray{
					pulumi.String("feature_id"),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiFeatureGroupFeature(ctx, "feature_group_feature", &vertex.AiFeatureGroupFeatureArgs{
			Name:         pulumi.String("example_feature"),
			Region:       pulumi.String("us-central1"),
			FeatureGroup: sampleFeatureGroup.Name,
			Description:  pulumi.String("A sample feature"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.bigquery.Dataset;
import com.pulumi.gcp.bigquery.DatasetArgs;
import com.pulumi.gcp.bigquery.Table;
import com.pulumi.gcp.bigquery.TableArgs;
import com.pulumi.gcp.vertex.AiFeatureGroup;
import com.pulumi.gcp.vertex.AiFeatureGroupArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryBigQuerySourceArgs;
import com.pulumi.gcp.vertex.AiFeatureGroupFeature;
import com.pulumi.gcp.vertex.AiFeatureGroupFeatureArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sampleDataset = new Dataset("sampleDataset", DatasetArgs.builder()
            .datasetId("job_load_dataset")
            .friendlyName("test")
            .description("This is a test description")
            .location("US")
            .build());

        var sampleTable = new Table("sampleTable", TableArgs.builder()
            .deletionProtection(false)
            .datasetId(sampleDataset.datasetId())
            .tableId("job_load_table")
            .schema("""
[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_feature",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
            """)
            .build());

        var sampleFeatureGroup = new AiFeatureGroup("sampleFeatureGroup", AiFeatureGroupArgs.builder()
            .name("example_feature_group")
            .description("A sample feature group")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .bigQuery(AiFeatureGroupBigQueryArgs.builder()
                .bigQuerySource(AiFeatureGroupBigQueryBigQuerySourceArgs.builder()
                    .inputUri(Output.tuple(sampleTable.project(), sampleTable.datasetId(), sampleTable.tableId()).applyValue(values -> {
                        var project = values.t1;
                        var datasetId = values.t2;
                        var tableId = values.t3;
                        return String.format("bq://%s.%s.%s", project,datasetId,tableId);
                    }))
                    .build())
                .entityIdColumns("feature_id")
                .build())
            .build());

        var featureGroupFeature = new AiFeatureGroupFeature("featureGroupFeature", AiFeatureGroupFeatureArgs.builder()
            .name("example_feature")
            .region("us-central1")
            .featureGroup(sampleFeatureGroup.name())
            .description("A sample feature")
            .labels(Map.of("label-one", "value-one"))
            .build());

    }
}
```
```yaml
resources:
  featureGroupFeature:
    type: gcp:vertex:AiFeatureGroupFeature
    name: feature_group_feature
    properties:
      name: example_feature
      region: us-central1
      featureGroup: ${sampleFeatureGroup.name}
      description: A sample feature
      labels:
        label-one: value-one
  sampleFeatureGroup:
    type: gcp:vertex:AiFeatureGroup
    name: sample_feature_group
    properties:
      name: example_feature_group
      description: A sample feature group
      region: us-central1
      labels:
        label-one: value-one
      bigQuery:
        bigQuerySource:
          inputUri: bq://${sampleTable.project}.${sampleTable.datasetId}.${sampleTable.tableId}
        entityIdColumns:
          - feature_id
  sampleDataset:
    type: gcp:bigquery:Dataset
    name: sample_dataset
    properties:
      datasetId: job_load_dataset
      friendlyName: test
      description: This is a test description
      location: US
  sampleTable:
    type: gcp:bigquery:Table
    name: sample_table
    properties:
      deletionProtection: false
      datasetId: ${sampleDataset.datasetId}
      tableId: job_load_table
      schema: |
        [
            {
                "name": "feature_id",
                "type": "STRING",
                "mode": "NULLABLE"
            },
            {
                "name": "example_feature",
                "type": "STRING",
                "mode": "NULLABLE"
            },
            {
                "name": "feature_timestamp",
                "type": "TIMESTAMP",
                "mode": "NULLABLE"
            }
        ]
```
<!--End PulumiCodeChooser -->

## Import

FeatureGroupFeature can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}}/features/{{name}}`

* `{{project}}/{{region}}/{{feature_group}}/{{name}}`

* `{{region}}/{{feature_group}}/{{name}}`

* `{{feature_group}}/{{name}}`

When using the `pulumi import` command, FeatureGroupFeature can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default projects/{{project}}/locations/{{region}}/featureGroups/{{feature_group}}/features/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default {{project}}/{{region}}/{{feature_group}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default {{region}}/{{feature_group}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureGroupFeature:AiFeatureGroupFeature default {{feature_group}}/{{name}}
```

:
descriptionB" %The description of the FeatureGroup.
3
featureGroup" The name of the Feature Group.
Ю
labelsB2" ЛThe labels with user-defined metadata to organize your FeatureGroup.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
>
nameB" 0The resource name of the Feature Group Feature.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
h
region" ZThe region for the resource. It should be the same as the feature group's region.


- - -
Т
versionColumnNameB" wThe name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
"б

createTime" ОThe timestamp of when the FeatureGroup was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
":
descriptionB" %The description of the FeatureGroup.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"3
featureGroup" The name of the Feature Group.
"Ю
labelsB2" ЛThe labels with user-defined metadata to organize your FeatureGroup.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"<
name" 0The resource name of the Feature Group Feature.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"h
region" ZThe region for the resource. It should be the same as the feature group's region.


- - -
"ж

updateTime" УThe timestamp of when the FeatureGroup was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"Р
versionColumnName" wThe name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use featureId.
*гп
T
vertexAiFeatureOnlineStore4gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStoreПВVertex AI Feature Online Store provides a centralized repository for serving ML features and embedding indexes at low latency. The Feature Online Store is a top-level container.


To get more information about FeatureOnlineStore, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureOnlineStores)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/vertex-ai/docs)

## Example Usage

### Vertex Ai Feature Online Store


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featureOnlineStore = new gcp.vertex.AiFeatureOnlineStore("feature_online_store", {
    name: "example_feature_online_store",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    bigtable: {
        autoScaling: {
            minNodeCount: 1,
            maxNodeCount: 3,
            cpuUtilizationTarget: 50,
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

feature_online_store = gcp.vertex.AiFeatureOnlineStore("feature_online_store",
    name="example_feature_online_store",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    bigtable={
        "auto_scaling": {
            "min_node_count": 1,
            "max_node_count": 3,
            "cpu_utilization_target": 50,
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featureOnlineStore = new Gcp.Vertex.AiFeatureOnlineStore("feature_online_store", new()
    {
        Name = "example_feature_online_store",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        Bigtable = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableArgs
        {
            AutoScaling = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs
            {
                MinNodeCount = 1,
                MaxNodeCount = 3,
                CpuUtilizationTarget = 50,
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := vertex.NewAiFeatureOnlineStore(ctx, "feature_online_store", &vertex.AiFeatureOnlineStoreArgs{
			Name: pulumi.String("example_feature_online_store"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			Bigtable: &vertex.AiFeatureOnlineStoreBigtableArgs{
				AutoScaling: &vertex.AiFeatureOnlineStoreBigtableAutoScalingArgs{
					MinNodeCount:         pulumi.Int(1),
					MaxNodeCount:         pulumi.Int(3),
					CpuUtilizationTarget: pulumi.Int(50),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureOnlineStore;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featureOnlineStore = new AiFeatureOnlineStore("featureOnlineStore", AiFeatureOnlineStoreArgs.builder()
            .name("example_feature_online_store")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .bigtable(AiFeatureOnlineStoreBigtableArgs.builder()
                .autoScaling(AiFeatureOnlineStoreBigtableAutoScalingArgs.builder()
                    .minNodeCount(1)
                    .maxNodeCount(3)
                    .cpuUtilizationTarget(50)
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  featureOnlineStore:
    type: gcp:vertex:AiFeatureOnlineStore
    name: feature_online_store
    properties:
      name: example_feature_online_store
      labels:
        foo: bar
      region: us-central1
      bigtable:
        autoScaling:
          minNodeCount: 1
          maxNodeCount: 3
          cpuUtilizationTarget: 50
```
<!--End PulumiCodeChooser -->
### Vertex Ai Featureonlinestore With Optimized


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const featureonlinestore = new gcp.vertex.AiFeatureOnlineStore("featureonlinestore", {
    name: "example_feature_online_store_optimized",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    optimized: {},
    dedicatedServingEndpoint: {
        privateServiceConnectConfig: {
            enablePrivateServiceConnect: true,
            projectAllowlists: [project.then(project => project.number)],
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
featureonlinestore = gcp.vertex.AiFeatureOnlineStore("featureonlinestore",
    name="example_feature_online_store_optimized",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    optimized={},
    dedicated_serving_endpoint={
        "private_service_connect_config": {
            "enable_private_service_connect": True,
            "project_allowlists": [project.number],
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var featureonlinestore = new Gcp.Vertex.AiFeatureOnlineStore("featureonlinestore", new()
    {
        Name = "example_feature_online_store_optimized",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        Optimized = null,
        DedicatedServingEndpoint = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreDedicatedServingEndpointArgs
        {
            PrivateServiceConnectConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgs
            {
                EnablePrivateServiceConnect = true,
                ProjectAllowlists = new[]
                {
                    project.Apply(getProjectResult => getProjectResult.Number),
                },
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = vertex.NewAiFeatureOnlineStore(ctx, "featureonlinestore", &vertex.AiFeatureOnlineStoreArgs{
			Name: pulumi.String("example_feature_online_store_optimized"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region:    pulumi.String("us-central1"),
			Optimized: &vertex.AiFeatureOnlineStoreOptimizedArgs{},
			DedicatedServingEndpoint: &vertex.AiFeatureOnlineStoreDedicatedServingEndpointArgs{
				PrivateServiceConnectConfig: &vertex.AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgs{
					EnablePrivateServiceConnect: pulumi.Bool(true),
					ProjectAllowlists: pulumi.StringArray{
						pulumi.String(project.Number),
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.vertex.AiFeatureOnlineStore;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreOptimizedArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreDedicatedServingEndpointArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var featureonlinestore = new AiFeatureOnlineStore("featureonlinestore", AiFeatureOnlineStoreArgs.builder()
            .name("example_feature_online_store_optimized")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .optimized()
            .dedicatedServingEndpoint(AiFeatureOnlineStoreDedicatedServingEndpointArgs.builder()
                .privateServiceConnectConfig(AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgs.builder()
                    .enablePrivateServiceConnect(true)
                    .projectAllowlists(project.applyValue(getProjectResult -> getProjectResult.number()))
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  featureonlinestore:
    type: gcp:vertex:AiFeatureOnlineStore
    properties:
      name: example_feature_online_store_optimized
      labels:
        foo: bar
      region: us-central1
      optimized: {}
      dedicatedServingEndpoint:
        privateServiceConnectConfig:
          enablePrivateServiceConnect: true
          projectAllowlists:
            - ${project.number}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Vertex Ai Featureonlinestore With Beta Fields Bigtable


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featureonlinestore = new gcp.vertex.AiFeatureOnlineStore("featureonlinestore", {
    name: "example_feature_online_store_beta_bigtable",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    bigtable: {
        autoScaling: {
            minNodeCount: 1,
            maxNodeCount: 2,
            cpuUtilizationTarget: 80,
        },
    },
    embeddingManagement: {
        enabled: true,
    },
    forceDestroy: true,
});
const project = gcp.organizations.getProject({});
```
```python
import pulumi
import pulumi_gcp as gcp

featureonlinestore = gcp.vertex.AiFeatureOnlineStore("featureonlinestore",
    name="example_feature_online_store_beta_bigtable",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    bigtable={
        "auto_scaling": {
            "min_node_count": 1,
            "max_node_count": 2,
            "cpu_utilization_target": 80,
        },
    },
    embedding_management={
        "enabled": True,
    },
    force_destroy=True)
project = gcp.organizations.get_project()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featureonlinestore = new Gcp.Vertex.AiFeatureOnlineStore("featureonlinestore", new()
    {
        Name = "example_feature_online_store_beta_bigtable",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        Bigtable = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableArgs
        {
            AutoScaling = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs
            {
                MinNodeCount = 1,
                MaxNodeCount = 2,
                CpuUtilizationTarget = 80,
            },
        },
        EmbeddingManagement = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreEmbeddingManagementArgs
        {
            Enabled = true,
        },
        ForceDestroy = true,
    });

    var project = Gcp.Organizations.GetProject.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := vertex.NewAiFeatureOnlineStore(ctx, "featureonlinestore", &vertex.AiFeatureOnlineStoreArgs{
			Name: pulumi.String("example_feature_online_store_beta_bigtable"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			Bigtable: &vertex.AiFeatureOnlineStoreBigtableArgs{
				AutoScaling: &vertex.AiFeatureOnlineStoreBigtableAutoScalingArgs{
					MinNodeCount:         pulumi.Int(1),
					MaxNodeCount:         pulumi.Int(2),
					CpuUtilizationTarget: pulumi.Int(80),
				},
			},
			EmbeddingManagement: &vertex.AiFeatureOnlineStoreEmbeddingManagementArgs{
				Enabled: pulumi.Bool(true),
			},
			ForceDestroy: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		_, err = organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureOnlineStore;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreEmbeddingManagementArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featureonlinestore = new AiFeatureOnlineStore("featureonlinestore", AiFeatureOnlineStoreArgs.builder()
            .name("example_feature_online_store_beta_bigtable")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .bigtable(AiFeatureOnlineStoreBigtableArgs.builder()
                .autoScaling(AiFeatureOnlineStoreBigtableAutoScalingArgs.builder()
                    .minNodeCount(1)
                    .maxNodeCount(2)
                    .cpuUtilizationTarget(80)
                    .build())
                .build())
            .embeddingManagement(AiFeatureOnlineStoreEmbeddingManagementArgs.builder()
                .enabled(true)
                .build())
            .forceDestroy(true)
            .build());

        final var project = OrganizationsFunctions.getProject();

    }
}
```
```yaml
resources:
  featureonlinestore:
    type: gcp:vertex:AiFeatureOnlineStore
    properties:
      name: example_feature_online_store_beta_bigtable
      labels:
        foo: bar
      region: us-central1
      bigtable:
        autoScaling:
          minNodeCount: 1
          maxNodeCount: 2
          cpuUtilizationTarget: 80
      embeddingManagement:
        enabled: true
      forceDestroy: true
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

FeatureOnlineStore can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/featureOnlineStores/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, FeatureOnlineStore can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStore default projects/{{project}}/locations/{{region}}/featureOnlineStores/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStore default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStore default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureOnlineStore:AiFeatureOnlineStore default {{name}}
```

е
bigtablerBp:n
l
vertexAiFeatureOnlineStoreBigtableDgcp:vertex/AiFeatureOnlineStoreBigtable:AiFeatureOnlineStoreBigtableдSettings for Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
Structure is documented below.
╫
dedicatedServingEndpointеBв:Я
Ь
vertex,AiFeatureOnlineStoreDedicatedServingEndpointdgcp:vertex/AiFeatureOnlineStoreDedicatedServingEndpoint:AiFeatureOnlineStoreDedicatedServingEndpointТThe dedicated serving endpoint for this FeatureOnlineStore, which is different from common vertex service endpoint. Only need to be set when you choose Optimized storage type or enable EmbeddingManagement. Will use public endpoint by default.
Structure is documented below.
к
embeddingManagementЦBУ:Р
Н
vertex'AiFeatureOnlineStoreEmbeddingManagementZgcp:vertex/AiFeatureOnlineStoreEmbeddingManagement:AiFeatureOnlineStoreEmbeddingManagement∙The settings for embedding management in FeatureOnlineStore. Embedding management can only be set for BigTable. It is enabled by default for optimized storagetype.
Structure is documented below.

> **Warning:** `embedding_management` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
v
forceDestroyB
 `If set to true, any FeatureViews and Features for this FeatureOnlineStore will also be deleted.
з
labelsB2" ФThe labels with user-defined metadata to organize your feature online stores.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
╣
nameB" кThe resource name of the Feature Online Store. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.


- - -
Е
	optimizeduBs:q
o
vertexAiFeatureOnlineStoreOptimizedFgcp:vertex/AiFeatureOnlineStoreOptimized:AiFeatureOnlineStoreOptimizedАSettings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
C
regionB" 3The region of feature online store. eg us-central1
"е
bigtablerBp:n
l
vertexAiFeatureOnlineStoreBigtableDgcp:vertex/AiFeatureOnlineStoreBigtable:AiFeatureOnlineStoreBigtableдSettings for Cloud Bigtable instance that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore.
Structure is documented below.
"й

createTime" ЦThe timestamp of when the feature online store was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"╘
dedicatedServingEndpointв:Я
Ь
vertex,AiFeatureOnlineStoreDedicatedServingEndpointdgcp:vertex/AiFeatureOnlineStoreDedicatedServingEndpoint:AiFeatureOnlineStoreDedicatedServingEndpointТThe dedicated serving endpoint for this FeatureOnlineStore, which is different from common vertex service endpoint. Only need to be set when you choose Optimized storage type or enable EmbeddingManagement. Will use public endpoint by default.
Structure is documented below.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"з
embeddingManagementУ:Р
Н
vertex'AiFeatureOnlineStoreEmbeddingManagementZgcp:vertex/AiFeatureOnlineStoreEmbeddingManagement:AiFeatureOnlineStoreEmbeddingManagement∙The settings for embedding management in FeatureOnlineStore. Embedding management can only be set for BigTable. It is enabled by default for optimized storagetype.
Structure is documented below.

> **Warning:** `embedding_management` is deprecated. This field is no longer needed anymore and embedding management is automatically enabled when specifying Optimized storage type
"B
etag" 6Used to perform consistent read-modify-write updates.
"v
forceDestroyB
 `If set to true, any FeatureViews and Features for this FeatureOnlineStore will also be deleted.
"з
labelsB2" ФThe labels with user-defined metadata to organize your feature online stores.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"╖
name" кThe resource name of the Feature Online Store. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.


- - -
"Е
	optimizeduBs:q
o
vertexAiFeatureOnlineStoreOptimizedFgcp:vertex/AiFeatureOnlineStoreOptimized:AiFeatureOnlineStoreOptimizedАSettings for the Optimized store that will be created to serve featureValues for all FeatureViews under this FeatureOnlineStore
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"A
region" 3The region of feature online store. eg us-central1
"┼
state" ╖The state of the Feature Online Store. See the possible states in [this link](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureOnlineStores#state).
"о

updateTime" ЫThe timestamp of when the feature online store was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
*Иє
u
vertexAiFeatureOnlineStoreFeatureviewJgcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureviewє╚FeatureView is representation of values that the FeatureOnlineStore will serve based on its syncConfig.


To get more information about FeatureOnlineStoreFeatureview, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featureOnlineStores.featureViews)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/vertex-ai/docs)

## Example Usage

### Vertex Ai Featureonlinestore Featureview


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featureonlinestore = new gcp.vertex.AiFeatureOnlineStore("featureonlinestore", {
    name: "example_feature_view",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    bigtable: {
        autoScaling: {
            minNodeCount: 1,
            maxNodeCount: 2,
            cpuUtilizationTarget: 80,
        },
    },
});
const tf_test_dataset = new gcp.bigquery.Dataset("tf-test-dataset", {
    datasetId: "example_feature_view",
    friendlyName: "test",
    description: "This is a test description",
    location: "US",
});
const tf_test_table = new gcp.bigquery.Table("tf-test-table", {
    deletionProtection: false,
    datasetId: tf_test_dataset.datasetId,
    tableId: "example_feature_view",
    schema: `  [
  {
    "name": "entity_id",
    "mode": "NULLABLE",
    "type": "STRING",
    "description": "Test default entity_id"
  },
    {
    "name": "test_entity_column",
    "mode": "NULLABLE",
    "type": "STRING",
    "description": "test secondary entity column"
  },
  {
    "name": "feature_timestamp",
    "mode": "NULLABLE",
    "type": "TIMESTAMP",
    "description": "Default timestamp value"
  }
]
`,
});
const featureview = new gcp.vertex.AiFeatureOnlineStoreFeatureview("featureview", {
    name: "example_feature_view",
    region: "us-central1",
    featureOnlineStore: featureonlinestore.name,
    syncConfig: {
        cron: "0 0 * * *",
    },
    bigQuerySource: {
        uri: pulumi.interpolate`bq://${tf_test_table.project}.${tf_test_table.datasetId}.${tf_test_table.tableId}`,
        entityIdColumns: ["test_entity_column"],
    },
});
const project = gcp.organizations.getProject({});
```
```python
import pulumi
import pulumi_gcp as gcp

featureonlinestore = gcp.vertex.AiFeatureOnlineStore("featureonlinestore",
    name="example_feature_view",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    bigtable={
        "auto_scaling": {
            "min_node_count": 1,
            "max_node_count": 2,
            "cpu_utilization_target": 80,
        },
    })
tf_test_dataset = gcp.bigquery.Dataset("tf-test-dataset",
    dataset_id="example_feature_view",
    friendly_name="test",
    description="This is a test description",
    location="US")
tf_test_table = gcp.bigquery.Table("tf-test-table",
    deletion_protection=False,
    dataset_id=tf_test_dataset.dataset_id,
    table_id="example_feature_view",
    schema="""  [
  {
    "name": "entity_id",
    "mode": "NULLABLE",
    "type": "STRING",
    "description": "Test default entity_id"
  },
    {
    "name": "test_entity_column",
    "mode": "NULLABLE",
    "type": "STRING",
    "description": "test secondary entity column"
  },
  {
    "name": "feature_timestamp",
    "mode": "NULLABLE",
    "type": "TIMESTAMP",
    "description": "Default timestamp value"
  }
]
""")
featureview = gcp.vertex.AiFeatureOnlineStoreFeatureview("featureview",
    name="example_feature_view",
    region="us-central1",
    feature_online_store=featureonlinestore.name,
    sync_config={
        "cron": "0 0 * * *",
    },
    big_query_source={
        "uri": pulumi.Output.all(
            project=tf_test_table.project,
            dataset_id=tf_test_table.dataset_id,
            table_id=tf_test_table.table_id
).apply(lambda resolved_outputs: f"bq://{resolved_outputs['project']}.{resolved_outputs['dataset_id']}.{resolved_outputs['table_id']}")
,
        "entity_id_columns": ["test_entity_column"],
    })
project = gcp.organizations.get_project()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featureonlinestore = new Gcp.Vertex.AiFeatureOnlineStore("featureonlinestore", new()
    {
        Name = "example_feature_view",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        Bigtable = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableArgs
        {
            AutoScaling = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs
            {
                MinNodeCount = 1,
                MaxNodeCount = 2,
                CpuUtilizationTarget = 80,
            },
        },
    });

    var tf_test_dataset = new Gcp.BigQuery.Dataset("tf-test-dataset", new()
    {
        DatasetId = "example_feature_view",
        FriendlyName = "test",
        Description = "This is a test description",
        Location = "US",
    });

    var tf_test_table = new Gcp.BigQuery.Table("tf-test-table", new()
    {
        DeletionProtection = false,
        DatasetId = tf_test_dataset.DatasetId,
        TableId = "example_feature_view",
        Schema = @"  [
  {
    ""name"": ""entity_id"",
    ""mode"": ""NULLABLE"",
    ""type"": ""STRING"",
    ""description"": ""Test default entity_id""
  },
    {
    ""name"": ""test_entity_column"",
    ""mode"": ""NULLABLE"",
    ""type"": ""STRING"",
    ""description"": ""test secondary entity column""
  },
  {
    ""name"": ""feature_timestamp"",
    ""mode"": ""NULLABLE"",
    ""type"": ""TIMESTAMP"",
    ""description"": ""Default timestamp value""
  }
]
",
    });

    var featureview = new Gcp.Vertex.AiFeatureOnlineStoreFeatureview("featureview", new()
    {
        Name = "example_feature_view",
        Region = "us-central1",
        FeatureOnlineStore = featureonlinestore.Name,
        SyncConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs
        {
            Cron = "0 0 * * *",
        },
        BigQuerySource = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs
        {
            Uri = Output.Tuple(tf_test_table.Project, tf_test_table.DatasetId, tf_test_table.TableId).Apply(values =>
            {
                var project = values.Item1;
                var datasetId = values.Item2;
                var tableId = values.Item3;
                return $"bq://{project}.{datasetId}.{tableId}";
            }),
            EntityIdColumns = new[]
            {
                "test_entity_column",
            },
        },
    });

    var project = Gcp.Organizations.GetProject.Invoke();

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		featureonlinestore, err := vertex.NewAiFeatureOnlineStore(ctx, "featureonlinestore", &vertex.AiFeatureOnlineStoreArgs{
			Name: pulumi.String("example_feature_view"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			Bigtable: &vertex.AiFeatureOnlineStoreBigtableArgs{
				AutoScaling: &vertex.AiFeatureOnlineStoreBigtableAutoScalingArgs{
					MinNodeCount:         pulumi.Int(1),
					MaxNodeCount:         pulumi.Int(2),
					CpuUtilizationTarget: pulumi.Int(80),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = bigquery.NewDataset(ctx, "tf-test-dataset", &bigquery.DatasetArgs{
			DatasetId:    pulumi.String("example_feature_view"),
			FriendlyName: pulumi.String("test"),
			Description:  pulumi.String("This is a test description"),
			Location:     pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		_, err = bigquery.NewTable(ctx, "tf-test-table", &bigquery.TableArgs{
			DeletionProtection: pulumi.Bool(false),
			DatasetId:          tf_test_dataset.DatasetId,
			TableId:            pulumi.String("example_feature_view"),
			Schema: pulumi.String(`  [
  {
    "name": "entity_id",
    "mode": "NULLABLE",
    "type": "STRING",
    "description": "Test default entity_id"
  },
    {
    "name": "test_entity_column",
    "mode": "NULLABLE",
    "type": "STRING",
    "description": "test secondary entity column"
  },
  {
    "name": "feature_timestamp",
    "mode": "NULLABLE",
    "type": "TIMESTAMP",
    "description": "Default timestamp value"
  }
]
`),
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiFeatureOnlineStoreFeatureview(ctx, "featureview", &vertex.AiFeatureOnlineStoreFeatureviewArgs{
			Name:               pulumi.String("example_feature_view"),
			Region:             pulumi.String("us-central1"),
			FeatureOnlineStore: featureonlinestore.Name,
			SyncConfig: &vertex.AiFeatureOnlineStoreFeatureviewSyncConfigArgs{
				Cron: pulumi.String("0 0 * * *"),
			},
			BigQuerySource: &vertex.AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs{
				Uri: pulumi.All(tf_test_table.Project, tf_test_table.DatasetId, tf_test_table.TableId).ApplyT(func(_args []interface{}) (string, error) {
					project := _args[0].(string)
					datasetId := _args[1].(string)
					tableId := _args[2].(string)
					return fmt.Sprintf("bq://%v.%v.%v", project, datasetId, tableId), nil
				}).(pulumi.StringOutput),
				EntityIdColumns: pulumi.StringArray{
					pulumi.String("test_entity_column"),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureOnlineStore;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs;
import com.pulumi.gcp.bigquery.Dataset;
import com.pulumi.gcp.bigquery.DatasetArgs;
import com.pulumi.gcp.bigquery.Table;
import com.pulumi.gcp.bigquery.TableArgs;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureview;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureviewArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featureonlinestore = new AiFeatureOnlineStore("featureonlinestore", AiFeatureOnlineStoreArgs.builder()
            .name("example_feature_view")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .bigtable(AiFeatureOnlineStoreBigtableArgs.builder()
                .autoScaling(AiFeatureOnlineStoreBigtableAutoScalingArgs.builder()
                    .minNodeCount(1)
                    .maxNodeCount(2)
                    .cpuUtilizationTarget(80)
                    .build())
                .build())
            .build());

        var tf_test_dataset = new Dataset("tf-test-dataset", DatasetArgs.builder()
            .datasetId("example_feature_view")
            .friendlyName("test")
            .description("This is a test description")
            .location("US")
            .build());

        var tf_test_table = new Table("tf-test-table", TableArgs.builder()
            .deletionProtection(false)
            .datasetId(tf_test_dataset.datasetId())
            .tableId("example_feature_view")
            .schema("""
  [
  {
    "name": "entity_id",
    "mode": "NULLABLE",
    "type": "STRING",
    "description": "Test default entity_id"
  },
    {
    "name": "test_entity_column",
    "mode": "NULLABLE",
    "type": "STRING",
    "description": "test secondary entity column"
  },
  {
    "name": "feature_timestamp",
    "mode": "NULLABLE",
    "type": "TIMESTAMP",
    "description": "Default timestamp value"
  }
]
            """)
            .build());

        var featureview = new AiFeatureOnlineStoreFeatureview("featureview", AiFeatureOnlineStoreFeatureviewArgs.builder()
            .name("example_feature_view")
            .region("us-central1")
            .featureOnlineStore(featureonlinestore.name())
            .syncConfig(AiFeatureOnlineStoreFeatureviewSyncConfigArgs.builder()
                .cron("0 0 * * *")
                .build())
            .bigQuerySource(AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs.builder()
                .uri(Output.tuple(tf_test_table.project(), tf_test_table.datasetId(), tf_test_table.tableId()).applyValue(values -> {
                    var project = values.t1;
                    var datasetId = values.t2;
                    var tableId = values.t3;
                    return String.format("bq://%s.%s.%s", project,datasetId,tableId);
                }))
                .entityIdColumns("test_entity_column")
                .build())
            .build());

        final var project = OrganizationsFunctions.getProject();

    }
}
```
```yaml
resources:
  featureonlinestore:
    type: gcp:vertex:AiFeatureOnlineStore
    properties:
      name: example_feature_view
      labels:
        foo: bar
      region: us-central1
      bigtable:
        autoScaling:
          minNodeCount: 1
          maxNodeCount: 2
          cpuUtilizationTarget: 80
  tf-test-dataset:
    type: gcp:bigquery:Dataset
    properties:
      datasetId: example_feature_view
      friendlyName: test
      description: This is a test description
      location: US
  tf-test-table:
    type: gcp:bigquery:Table
    properties:
      deletionProtection: false
      datasetId: ${["tf-test-dataset"].datasetId}
      tableId: example_feature_view
      schema: |2
          [
          {
            "name": "entity_id",
            "mode": "NULLABLE",
            "type": "STRING",
            "description": "Test default entity_id"
          },
            {
            "name": "test_entity_column",
            "mode": "NULLABLE",
            "type": "STRING",
            "description": "test secondary entity column"
          },
          {
            "name": "feature_timestamp",
            "mode": "NULLABLE",
            "type": "TIMESTAMP",
            "description": "Default timestamp value"
          }
        ]
  featureview:
    type: gcp:vertex:AiFeatureOnlineStoreFeatureview
    properties:
      name: example_feature_view
      region: us-central1
      featureOnlineStore: ${featureonlinestore.name}
      syncConfig:
        cron: 0 0 * * *
      bigQuerySource:
        uri: bq://${["tf-test-table"].project}.${["tf-test-table"].datasetId}.${["tf-test-table"].tableId}
        entityIdColumns:
          - test_entity_column
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Vertex Ai Featureonlinestore Featureview Feature Registry


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featureonlinestore = new gcp.vertex.AiFeatureOnlineStore("featureonlinestore", {
    name: "example_feature_view_feature_registry",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    bigtable: {
        autoScaling: {
            minNodeCount: 1,
            maxNodeCount: 2,
            cpuUtilizationTarget: 80,
        },
    },
});
const sampleDataset = new gcp.bigquery.Dataset("sample_dataset", {
    datasetId: "example_feature_view_feature_registry",
    friendlyName: "test",
    description: "This is a test description",
    location: "US",
});
const sampleTable = new gcp.bigquery.Table("sample_table", {
    deletionProtection: false,
    datasetId: sampleDataset.datasetId,
    tableId: "example_feature_view_feature_registry",
    schema: `[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_feature_view_feature_registry",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
`,
});
const sampleFeatureGroup = new gcp.vertex.AiFeatureGroup("sample_feature_group", {
    name: "example_feature_view_feature_registry",
    description: "A sample feature group",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    bigQuery: {
        bigQuerySource: {
            inputUri: pulumi.interpolate`bq://${sampleTable.project}.${sampleTable.datasetId}.${sampleTable.tableId}`,
        },
        entityIdColumns: ["feature_id"],
    },
});
const sampleFeature = new gcp.vertex.AiFeatureGroupFeature("sample_feature", {
    name: "example_feature_view_feature_registry",
    region: "us-central1",
    featureGroup: sampleFeatureGroup.name,
    description: "A sample feature",
    labels: {
        "label-one": "value-one",
    },
});
const featureviewFeatureregistry = new gcp.vertex.AiFeatureOnlineStoreFeatureview("featureview_featureregistry", {
    name: "example_feature_view_feature_registry",
    region: "us-central1",
    featureOnlineStore: featureonlinestore.name,
    syncConfig: {
        cron: "0 0 * * *",
    },
    featureRegistrySource: {
        featureGroups: [{
            featureGroupId: sampleFeatureGroup.name,
            featureIds: [sampleFeature.name],
        }],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

featureonlinestore = gcp.vertex.AiFeatureOnlineStore("featureonlinestore",
    name="example_feature_view_feature_registry",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    bigtable={
        "auto_scaling": {
            "min_node_count": 1,
            "max_node_count": 2,
            "cpu_utilization_target": 80,
        },
    })
sample_dataset = gcp.bigquery.Dataset("sample_dataset",
    dataset_id="example_feature_view_feature_registry",
    friendly_name="test",
    description="This is a test description",
    location="US")
sample_table = gcp.bigquery.Table("sample_table",
    deletion_protection=False,
    dataset_id=sample_dataset.dataset_id,
    table_id="example_feature_view_feature_registry",
    schema="""[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_feature_view_feature_registry",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
""")
sample_feature_group = gcp.vertex.AiFeatureGroup("sample_feature_group",
    name="example_feature_view_feature_registry",
    description="A sample feature group",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    big_query={
        "big_query_source": {
            "input_uri": pulumi.Output.all(
                project=sample_table.project,
                dataset_id=sample_table.dataset_id,
                table_id=sample_table.table_id
).apply(lambda resolved_outputs: f"bq://{resolved_outputs['project']}.{resolved_outputs['dataset_id']}.{resolved_outputs['table_id']}")
,
        },
        "entity_id_columns": ["feature_id"],
    })
sample_feature = gcp.vertex.AiFeatureGroupFeature("sample_feature",
    name="example_feature_view_feature_registry",
    region="us-central1",
    feature_group=sample_feature_group.name,
    description="A sample feature",
    labels={
        "label-one": "value-one",
    })
featureview_featureregistry = gcp.vertex.AiFeatureOnlineStoreFeatureview("featureview_featureregistry",
    name="example_feature_view_feature_registry",
    region="us-central1",
    feature_online_store=featureonlinestore.name,
    sync_config={
        "cron": "0 0 * * *",
    },
    feature_registry_source={
        "feature_groups": [{
            "feature_group_id": sample_feature_group.name,
            "feature_ids": [sample_feature.name],
        }],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featureonlinestore = new Gcp.Vertex.AiFeatureOnlineStore("featureonlinestore", new()
    {
        Name = "example_feature_view_feature_registry",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        Bigtable = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableArgs
        {
            AutoScaling = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs
            {
                MinNodeCount = 1,
                MaxNodeCount = 2,
                CpuUtilizationTarget = 80,
            },
        },
    });

    var sampleDataset = new Gcp.BigQuery.Dataset("sample_dataset", new()
    {
        DatasetId = "example_feature_view_feature_registry",
        FriendlyName = "test",
        Description = "This is a test description",
        Location = "US",
    });

    var sampleTable = new Gcp.BigQuery.Table("sample_table", new()
    {
        DeletionProtection = false,
        DatasetId = sampleDataset.DatasetId,
        TableId = "example_feature_view_feature_registry",
        Schema = @"[
    {
        ""name"": ""feature_id"",
        ""type"": ""STRING"",
        ""mode"": ""NULLABLE""
    },
    {
        ""name"": ""example_feature_view_feature_registry"",
        ""type"": ""STRING"",
        ""mode"": ""NULLABLE""
    },
    {
        ""name"": ""feature_timestamp"",
        ""type"": ""TIMESTAMP"",
        ""mode"": ""NULLABLE""
    }
]
",
    });

    var sampleFeatureGroup = new Gcp.Vertex.AiFeatureGroup("sample_feature_group", new()
    {
        Name = "example_feature_view_feature_registry",
        Description = "A sample feature group",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        BigQuery = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryArgs
        {
            BigQuerySource = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryBigQuerySourceArgs
            {
                InputUri = Output.Tuple(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).Apply(values =>
                {
                    var project = values.Item1;
                    var datasetId = values.Item2;
                    var tableId = values.Item3;
                    return $"bq://{project}.{datasetId}.{tableId}";
                }),
            },
            EntityIdColumns = new[]
            {
                "feature_id",
            },
        },
    });

    var sampleFeature = new Gcp.Vertex.AiFeatureGroupFeature("sample_feature", new()
    {
        Name = "example_feature_view_feature_registry",
        Region = "us-central1",
        FeatureGroup = sampleFeatureGroup.Name,
        Description = "A sample feature",
        Labels = 
        {
            { "label-one", "value-one" },
        },
    });

    var featureviewFeatureregistry = new Gcp.Vertex.AiFeatureOnlineStoreFeatureview("featureview_featureregistry", new()
    {
        Name = "example_feature_view_feature_registry",
        Region = "us-central1",
        FeatureOnlineStore = featureonlinestore.Name,
        SyncConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs
        {
            Cron = "0 0 * * *",
        },
        FeatureRegistrySource = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs
        {
            FeatureGroups = new[]
            {
                new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs
                {
                    FeatureGroupId = sampleFeatureGroup.Name,
                    FeatureIds = new[]
                    {
                        sampleFeature.Name,
                    },
                },
            },
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		featureonlinestore, err := vertex.NewAiFeatureOnlineStore(ctx, "featureonlinestore", &vertex.AiFeatureOnlineStoreArgs{
			Name: pulumi.String("example_feature_view_feature_registry"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			Bigtable: &vertex.AiFeatureOnlineStoreBigtableArgs{
				AutoScaling: &vertex.AiFeatureOnlineStoreBigtableAutoScalingArgs{
					MinNodeCount:         pulumi.Int(1),
					MaxNodeCount:         pulumi.Int(2),
					CpuUtilizationTarget: pulumi.Int(80),
				},
			},
		})
		if err != nil {
			return err
		}
		sampleDataset, err := bigquery.NewDataset(ctx, "sample_dataset", &bigquery.DatasetArgs{
			DatasetId:    pulumi.String("example_feature_view_feature_registry"),
			FriendlyName: pulumi.String("test"),
			Description:  pulumi.String("This is a test description"),
			Location:     pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		sampleTable, err := bigquery.NewTable(ctx, "sample_table", &bigquery.TableArgs{
			DeletionProtection: pulumi.Bool(false),
			DatasetId:          sampleDataset.DatasetId,
			TableId:            pulumi.String("example_feature_view_feature_registry"),
			Schema: pulumi.String(`[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_feature_view_feature_registry",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
`),
		})
		if err != nil {
			return err
		}
		sampleFeatureGroup, err := vertex.NewAiFeatureGroup(ctx, "sample_feature_group", &vertex.AiFeatureGroupArgs{
			Name:        pulumi.String("example_feature_view_feature_registry"),
			Description: pulumi.String("A sample feature group"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			BigQuery: &vertex.AiFeatureGroupBigQueryArgs{
				BigQuerySource: &vertex.AiFeatureGroupBigQueryBigQuerySourceArgs{
					InputUri: pulumi.All(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).ApplyT(func(_args []interface{}) (string, error) {
						project := _args[0].(string)
						datasetId := _args[1].(string)
						tableId := _args[2].(string)
						return fmt.Sprintf("bq://%v.%v.%v", project, datasetId, tableId), nil
					}).(pulumi.StringOutput),
				},
				EntityIdColumns: pulumi.StringArray{
					pulumi.String("feature_id"),
				},
			},
		})
		if err != nil {
			return err
		}
		sampleFeature, err := vertex.NewAiFeatureGroupFeature(ctx, "sample_feature", &vertex.AiFeatureGroupFeatureArgs{
			Name:         pulumi.String("example_feature_view_feature_registry"),
			Region:       pulumi.String("us-central1"),
			FeatureGroup: sampleFeatureGroup.Name,
			Description:  pulumi.String("A sample feature"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiFeatureOnlineStoreFeatureview(ctx, "featureview_featureregistry", &vertex.AiFeatureOnlineStoreFeatureviewArgs{
			Name:               pulumi.String("example_feature_view_feature_registry"),
			Region:             pulumi.String("us-central1"),
			FeatureOnlineStore: featureonlinestore.Name,
			SyncConfig: &vertex.AiFeatureOnlineStoreFeatureviewSyncConfigArgs{
				Cron: pulumi.String("0 0 * * *"),
			},
			FeatureRegistrySource: &vertex.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs{
				FeatureGroups: vertex.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArray{
					&vertex.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs{
						FeatureGroupId: sampleFeatureGroup.Name,
						FeatureIds: pulumi.StringArray{
							sampleFeature.Name,
						},
					},
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureOnlineStore;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs;
import com.pulumi.gcp.bigquery.Dataset;
import com.pulumi.gcp.bigquery.DatasetArgs;
import com.pulumi.gcp.bigquery.Table;
import com.pulumi.gcp.bigquery.TableArgs;
import com.pulumi.gcp.vertex.AiFeatureGroup;
import com.pulumi.gcp.vertex.AiFeatureGroupArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryBigQuerySourceArgs;
import com.pulumi.gcp.vertex.AiFeatureGroupFeature;
import com.pulumi.gcp.vertex.AiFeatureGroupFeatureArgs;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureview;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureviewArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featureonlinestore = new AiFeatureOnlineStore("featureonlinestore", AiFeatureOnlineStoreArgs.builder()
            .name("example_feature_view_feature_registry")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .bigtable(AiFeatureOnlineStoreBigtableArgs.builder()
                .autoScaling(AiFeatureOnlineStoreBigtableAutoScalingArgs.builder()
                    .minNodeCount(1)
                    .maxNodeCount(2)
                    .cpuUtilizationTarget(80)
                    .build())
                .build())
            .build());

        var sampleDataset = new Dataset("sampleDataset", DatasetArgs.builder()
            .datasetId("example_feature_view_feature_registry")
            .friendlyName("test")
            .description("This is a test description")
            .location("US")
            .build());

        var sampleTable = new Table("sampleTable", TableArgs.builder()
            .deletionProtection(false)
            .datasetId(sampleDataset.datasetId())
            .tableId("example_feature_view_feature_registry")
            .schema("""
[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_feature_view_feature_registry",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
            """)
            .build());

        var sampleFeatureGroup = new AiFeatureGroup("sampleFeatureGroup", AiFeatureGroupArgs.builder()
            .name("example_feature_view_feature_registry")
            .description("A sample feature group")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .bigQuery(AiFeatureGroupBigQueryArgs.builder()
                .bigQuerySource(AiFeatureGroupBigQueryBigQuerySourceArgs.builder()
                    .inputUri(Output.tuple(sampleTable.project(), sampleTable.datasetId(), sampleTable.tableId()).applyValue(values -> {
                        var project = values.t1;
                        var datasetId = values.t2;
                        var tableId = values.t3;
                        return String.format("bq://%s.%s.%s", project,datasetId,tableId);
                    }))
                    .build())
                .entityIdColumns("feature_id")
                .build())
            .build());

        var sampleFeature = new AiFeatureGroupFeature("sampleFeature", AiFeatureGroupFeatureArgs.builder()
            .name("example_feature_view_feature_registry")
            .region("us-central1")
            .featureGroup(sampleFeatureGroup.name())
            .description("A sample feature")
            .labels(Map.of("label-one", "value-one"))
            .build());

        var featureviewFeatureregistry = new AiFeatureOnlineStoreFeatureview("featureviewFeatureregistry", AiFeatureOnlineStoreFeatureviewArgs.builder()
            .name("example_feature_view_feature_registry")
            .region("us-central1")
            .featureOnlineStore(featureonlinestore.name())
            .syncConfig(AiFeatureOnlineStoreFeatureviewSyncConfigArgs.builder()
                .cron("0 0 * * *")
                .build())
            .featureRegistrySource(AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs.builder()
                .featureGroups(AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs.builder()
                    .featureGroupId(sampleFeatureGroup.name())
                    .featureIds(sampleFeature.name())
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  featureonlinestore:
    type: gcp:vertex:AiFeatureOnlineStore
    properties:
      name: example_feature_view_feature_registry
      labels:
        foo: bar
      region: us-central1
      bigtable:
        autoScaling:
          minNodeCount: 1
          maxNodeCount: 2
          cpuUtilizationTarget: 80
  sampleDataset:
    type: gcp:bigquery:Dataset
    name: sample_dataset
    properties:
      datasetId: example_feature_view_feature_registry
      friendlyName: test
      description: This is a test description
      location: US
  sampleTable:
    type: gcp:bigquery:Table
    name: sample_table
    properties:
      deletionProtection: false
      datasetId: ${sampleDataset.datasetId}
      tableId: example_feature_view_feature_registry
      schema: |
        [
            {
                "name": "feature_id",
                "type": "STRING",
                "mode": "NULLABLE"
            },
            {
                "name": "example_feature_view_feature_registry",
                "type": "STRING",
                "mode": "NULLABLE"
            },
            {
                "name": "feature_timestamp",
                "type": "TIMESTAMP",
                "mode": "NULLABLE"
            }
        ]
  sampleFeatureGroup:
    type: gcp:vertex:AiFeatureGroup
    name: sample_feature_group
    properties:
      name: example_feature_view_feature_registry
      description: A sample feature group
      region: us-central1
      labels:
        label-one: value-one
      bigQuery:
        bigQuerySource:
          inputUri: bq://${sampleTable.project}.${sampleTable.datasetId}.${sampleTable.tableId}
        entityIdColumns:
          - feature_id
  sampleFeature:
    type: gcp:vertex:AiFeatureGroupFeature
    name: sample_feature
    properties:
      name: example_feature_view_feature_registry
      region: us-central1
      featureGroup: ${sampleFeatureGroup.name}
      description: A sample feature
      labels:
        label-one: value-one
  featureviewFeatureregistry:
    type: gcp:vertex:AiFeatureOnlineStoreFeatureview
    name: featureview_featureregistry
    properties:
      name: example_feature_view_feature_registry
      region: us-central1
      featureOnlineStore: ${featureonlinestore.name}
      syncConfig:
        cron: 0 0 * * *
      featureRegistrySource:
        featureGroups:
          - featureGroupId: ${sampleFeatureGroup.name}
            featureIds:
              - ${sampleFeature.name}
```
<!--End PulumiCodeChooser -->
### Vertex Ai Featureonlinestore Featureview Cross Project


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as time from "@pulumi/time";

const testProject = gcp.organizations.getProject({});
const project = new gcp.organizations.Project("project", {
    projectId: "tf-test_89313",
    name: "tf-test_60646",
    orgId: "123456789",
    billingAccount: "000000-0000000-0000000-000000",
    deletionPolicy: "DELETE",
});
const wait60Seconds = new time.index.Sleep("wait_60_seconds", {createDuration: "60s"}, {
    dependsOn: [project],
});
const vertexai = new gcp.projects.Service("vertexai", {
    service: "aiplatform.googleapis.com",
    project: project.projectId,
    disableOnDestroy: false,
}, {
    dependsOn: [wait60Seconds],
});
const featureonlinestore = new gcp.vertex.AiFeatureOnlineStore("featureonlinestore", {
    name: "example_cross_project_featureview",
    project: project.projectId,
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    bigtable: {
        autoScaling: {
            minNodeCount: 1,
            maxNodeCount: 2,
            cpuUtilizationTarget: 80,
        },
    },
}, {
    dependsOn: [vertexai],
});
const sampleDataset = new gcp.bigquery.Dataset("sample_dataset", {
    datasetId: "example_cross_project_featureview",
    friendlyName: "test",
    description: "This is a test description",
    location: "US",
});
const viewer = new gcp.bigquery.DatasetIamMember("viewer", {
    project: testProject.then(testProject => testProject.projectId),
    datasetId: sampleDataset.datasetId,
    role: "roles/bigquery.dataViewer",
    member: pulumi.interpolate`serviceAccount:service-${project.number}@gcp-sa-aiplatform.iam.gserviceaccount.com`,
}, {
    dependsOn: [featureonlinestore],
});
const wait30Seconds = new time.index.Sleep("wait_30_seconds", {createDuration: "30s"}, {
    dependsOn: [viewer],
});
const sampleTable = new gcp.bigquery.Table("sample_table", {
    deletionProtection: false,
    datasetId: sampleDataset.datasetId,
    tableId: "example_cross_project_featureview",
    schema: `[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_cross_project_featureview",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
`,
});
const sampleFeatureGroup = new gcp.vertex.AiFeatureGroup("sample_feature_group", {
    name: "example_cross_project_featureview",
    description: "A sample feature group",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    bigQuery: {
        bigQuerySource: {
            inputUri: pulumi.interpolate`bq://${sampleTable.project}.${sampleTable.datasetId}.${sampleTable.tableId}`,
        },
        entityIdColumns: ["feature_id"],
    },
});
const sampleFeature = new gcp.vertex.AiFeatureGroupFeature("sample_feature", {
    name: "example_cross_project_featureview",
    region: "us-central1",
    featureGroup: sampleFeatureGroup.name,
    description: "A sample feature",
    labels: {
        "label-one": "value-one",
    },
});
const crossProjectFeatureview = new gcp.vertex.AiFeatureOnlineStoreFeatureview("cross_project_featureview", {
    name: "example_cross_project_featureview",
    project: project.projectId,
    region: "us-central1",
    featureOnlineStore: featureonlinestore.name,
    syncConfig: {
        cron: "0 0 * * *",
    },
    featureRegistrySource: {
        featureGroups: [{
            featureGroupId: sampleFeatureGroup.name,
            featureIds: [sampleFeature.name],
        }],
        projectNumber: testProject.then(testProject => testProject.number),
    },
}, {
    dependsOn: [
        vertexai,
        wait30Seconds,
    ],
});
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_time as time

test_project = gcp.organizations.get_project()
project = gcp.organizations.Project("project",
    project_id="tf-test_89313",
    name="tf-test_60646",
    org_id="123456789",
    billing_account="000000-0000000-0000000-000000",
    deletion_policy="DELETE")
wait60_seconds = time.index.Sleep("wait_60_seconds", create_duration=60s,
opts = pulumi.ResourceOptions(depends_on=[project]))
vertexai = gcp.projects.Service("vertexai",
    service="aiplatform.googleapis.com",
    project=project.project_id,
    disable_on_destroy=False,
    opts = pulumi.ResourceOptions(depends_on=[wait60_seconds]))
featureonlinestore = gcp.vertex.AiFeatureOnlineStore("featureonlinestore",
    name="example_cross_project_featureview",
    project=project.project_id,
    labels={
        "foo": "bar",
    },
    region="us-central1",
    bigtable={
        "auto_scaling": {
            "min_node_count": 1,
            "max_node_count": 2,
            "cpu_utilization_target": 80,
        },
    },
    opts = pulumi.ResourceOptions(depends_on=[vertexai]))
sample_dataset = gcp.bigquery.Dataset("sample_dataset",
    dataset_id="example_cross_project_featureview",
    friendly_name="test",
    description="This is a test description",
    location="US")
viewer = gcp.bigquery.DatasetIamMember("viewer",
    project=test_project.project_id,
    dataset_id=sample_dataset.dataset_id,
    role="roles/bigquery.dataViewer",
    member=project.number.apply(lambda number: f"serviceAccount:service-{number}@gcp-sa-aiplatform.iam.gserviceaccount.com"),
    opts = pulumi.ResourceOptions(depends_on=[featureonlinestore]))
wait30_seconds = time.index.Sleep("wait_30_seconds", create_duration=30s,
opts = pulumi.ResourceOptions(depends_on=[viewer]))
sample_table = gcp.bigquery.Table("sample_table",
    deletion_protection=False,
    dataset_id=sample_dataset.dataset_id,
    table_id="example_cross_project_featureview",
    schema="""[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_cross_project_featureview",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
""")
sample_feature_group = gcp.vertex.AiFeatureGroup("sample_feature_group",
    name="example_cross_project_featureview",
    description="A sample feature group",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    big_query={
        "big_query_source": {
            "input_uri": pulumi.Output.all(
                project=sample_table.project,
                dataset_id=sample_table.dataset_id,
                table_id=sample_table.table_id
).apply(lambda resolved_outputs: f"bq://{resolved_outputs['project']}.{resolved_outputs['dataset_id']}.{resolved_outputs['table_id']}")
,
        },
        "entity_id_columns": ["feature_id"],
    })
sample_feature = gcp.vertex.AiFeatureGroupFeature("sample_feature",
    name="example_cross_project_featureview",
    region="us-central1",
    feature_group=sample_feature_group.name,
    description="A sample feature",
    labels={
        "label-one": "value-one",
    })
cross_project_featureview = gcp.vertex.AiFeatureOnlineStoreFeatureview("cross_project_featureview",
    name="example_cross_project_featureview",
    project=project.project_id,
    region="us-central1",
    feature_online_store=featureonlinestore.name,
    sync_config={
        "cron": "0 0 * * *",
    },
    feature_registry_source={
        "feature_groups": [{
            "feature_group_id": sample_feature_group.name,
            "feature_ids": [sample_feature.name],
        }],
        "project_number": test_project.number,
    },
    opts = pulumi.ResourceOptions(depends_on=[
            vertexai,
            wait30_seconds,
        ]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Time = Pulumi.Time;

return await Deployment.RunAsync(() => 
{
    var testProject = Gcp.Organizations.GetProject.Invoke();

    var project = new Gcp.Organizations.Project("project", new()
    {
        ProjectId = "tf-test_89313",
        Name = "tf-test_60646",
        OrgId = "123456789",
        BillingAccount = "000000-0000000-0000000-000000",
        DeletionPolicy = "DELETE",
    });

    var wait60Seconds = new Time.Index.Sleep("wait_60_seconds", new()
    {
        CreateDuration = "60s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            project,
        },
    });

    var vertexai = new Gcp.Projects.Service("vertexai", new()
    {
        ServiceName = "aiplatform.googleapis.com",
        Project = project.ProjectId,
        DisableOnDestroy = false,
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            wait60Seconds,
        },
    });

    var featureonlinestore = new Gcp.Vertex.AiFeatureOnlineStore("featureonlinestore", new()
    {
        Name = "example_cross_project_featureview",
        Project = project.ProjectId,
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        Bigtable = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableArgs
        {
            AutoScaling = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs
            {
                MinNodeCount = 1,
                MaxNodeCount = 2,
                CpuUtilizationTarget = 80,
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vertexai,
        },
    });

    var sampleDataset = new Gcp.BigQuery.Dataset("sample_dataset", new()
    {
        DatasetId = "example_cross_project_featureview",
        FriendlyName = "test",
        Description = "This is a test description",
        Location = "US",
    });

    var viewer = new Gcp.BigQuery.DatasetIamMember("viewer", new()
    {
        Project = testProject.Apply(getProjectResult => getProjectResult.ProjectId),
        DatasetId = sampleDataset.DatasetId,
        Role = "roles/bigquery.dataViewer",
        Member = project.Number.Apply(number => $"serviceAccount:service-{number}@gcp-sa-aiplatform.iam.gserviceaccount.com"),
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            featureonlinestore,
        },
    });

    var wait30Seconds = new Time.Index.Sleep("wait_30_seconds", new()
    {
        CreateDuration = "30s",
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            viewer,
        },
    });

    var sampleTable = new Gcp.BigQuery.Table("sample_table", new()
    {
        DeletionProtection = false,
        DatasetId = sampleDataset.DatasetId,
        TableId = "example_cross_project_featureview",
        Schema = @"[
    {
        ""name"": ""feature_id"",
        ""type"": ""STRING"",
        ""mode"": ""NULLABLE""
    },
    {
        ""name"": ""example_cross_project_featureview"",
        ""type"": ""STRING"",
        ""mode"": ""NULLABLE""
    },
    {
        ""name"": ""feature_timestamp"",
        ""type"": ""TIMESTAMP"",
        ""mode"": ""NULLABLE""
    }
]
",
    });

    var sampleFeatureGroup = new Gcp.Vertex.AiFeatureGroup("sample_feature_group", new()
    {
        Name = "example_cross_project_featureview",
        Description = "A sample feature group",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        BigQuery = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryArgs
        {
            BigQuerySource = new Gcp.Vertex.Inputs.AiFeatureGroupBigQueryBigQuerySourceArgs
            {
                InputUri = Output.Tuple(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).Apply(values =>
                {
                    var project = values.Item1;
                    var datasetId = values.Item2;
                    var tableId = values.Item3;
                    return $"bq://{project}.{datasetId}.{tableId}";
                }),
            },
            EntityIdColumns = new[]
            {
                "feature_id",
            },
        },
    });

    var sampleFeature = new Gcp.Vertex.AiFeatureGroupFeature("sample_feature", new()
    {
        Name = "example_cross_project_featureview",
        Region = "us-central1",
        FeatureGroup = sampleFeatureGroup.Name,
        Description = "A sample feature",
        Labels = 
        {
            { "label-one", "value-one" },
        },
    });

    var crossProjectFeatureview = new Gcp.Vertex.AiFeatureOnlineStoreFeatureview("cross_project_featureview", new()
    {
        Name = "example_cross_project_featureview",
        Project = project.ProjectId,
        Region = "us-central1",
        FeatureOnlineStore = featureonlinestore.Name,
        SyncConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs
        {
            Cron = "0 0 * * *",
        },
        FeatureRegistrySource = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs
        {
            FeatureGroups = new[]
            {
                new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs
                {
                    FeatureGroupId = sampleFeatureGroup.Name,
                    FeatureIds = new[]
                    {
                        sampleFeature.Name,
                    },
                },
            },
            ProjectNumber = testProject.Apply(getProjectResult => getProjectResult.Number),
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vertexai,
            wait30Seconds,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/projects"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi-time/sdk/go/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		testProject, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		project, err := organizations.NewProject(ctx, "project", &organizations.ProjectArgs{
			ProjectId:      pulumi.String("tf-test_89313"),
			Name:           pulumi.String("tf-test_60646"),
			OrgId:          pulumi.String("123456789"),
			BillingAccount: pulumi.String("000000-0000000-0000000-000000"),
			DeletionPolicy: pulumi.String("DELETE"),
		})
		if err != nil {
			return err
		}
		wait60Seconds, err := time.NewSleep(ctx, "wait_60_seconds", &time.SleepArgs{
			CreateDuration: "60s",
		}, pulumi.DependsOn([]pulumi.Resource{
			project,
		}))
		if err != nil {
			return err
		}
		vertexai, err := projects.NewService(ctx, "vertexai", &projects.ServiceArgs{
			Service:          pulumi.String("aiplatform.googleapis.com"),
			Project:          project.ProjectId,
			DisableOnDestroy: pulumi.Bool(false),
		}, pulumi.DependsOn([]pulumi.Resource{
			wait60Seconds,
		}))
		if err != nil {
			return err
		}
		featureonlinestore, err := vertex.NewAiFeatureOnlineStore(ctx, "featureonlinestore", &vertex.AiFeatureOnlineStoreArgs{
			Name:    pulumi.String("example_cross_project_featureview"),
			Project: project.ProjectId,
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			Bigtable: &vertex.AiFeatureOnlineStoreBigtableArgs{
				AutoScaling: &vertex.AiFeatureOnlineStoreBigtableAutoScalingArgs{
					MinNodeCount:         pulumi.Int(1),
					MaxNodeCount:         pulumi.Int(2),
					CpuUtilizationTarget: pulumi.Int(80),
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			vertexai,
		}))
		if err != nil {
			return err
		}
		sampleDataset, err := bigquery.NewDataset(ctx, "sample_dataset", &bigquery.DatasetArgs{
			DatasetId:    pulumi.String("example_cross_project_featureview"),
			FriendlyName: pulumi.String("test"),
			Description:  pulumi.String("This is a test description"),
			Location:     pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		viewer, err := bigquery.NewDatasetIamMember(ctx, "viewer", &bigquery.DatasetIamMemberArgs{
			Project:   pulumi.String(testProject.ProjectId),
			DatasetId: sampleDataset.DatasetId,
			Role:      pulumi.String("roles/bigquery.dataViewer"),
			Member: project.Number.ApplyT(func(number string) (string, error) {
				return fmt.Sprintf("serviceAccount:service-%v@gcp-sa-aiplatform.iam.gserviceaccount.com", number), nil
			}).(pulumi.StringOutput),
		}, pulumi.DependsOn([]pulumi.Resource{
			featureonlinestore,
		}))
		if err != nil {
			return err
		}
		wait30Seconds, err := time.NewSleep(ctx, "wait_30_seconds", &time.SleepArgs{
			CreateDuration: "30s",
		}, pulumi.DependsOn([]pulumi.Resource{
			viewer,
		}))
		if err != nil {
			return err
		}
		sampleTable, err := bigquery.NewTable(ctx, "sample_table", &bigquery.TableArgs{
			DeletionProtection: pulumi.Bool(false),
			DatasetId:          sampleDataset.DatasetId,
			TableId:            pulumi.String("example_cross_project_featureview"),
			Schema: pulumi.String(`[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_cross_project_featureview",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
`),
		})
		if err != nil {
			return err
		}
		sampleFeatureGroup, err := vertex.NewAiFeatureGroup(ctx, "sample_feature_group", &vertex.AiFeatureGroupArgs{
			Name:        pulumi.String("example_cross_project_featureview"),
			Description: pulumi.String("A sample feature group"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			BigQuery: &vertex.AiFeatureGroupBigQueryArgs{
				BigQuerySource: &vertex.AiFeatureGroupBigQueryBigQuerySourceArgs{
					InputUri: pulumi.All(sampleTable.Project, sampleTable.DatasetId, sampleTable.TableId).ApplyT(func(_args []interface{}) (string, error) {
						project := _args[0].(string)
						datasetId := _args[1].(string)
						tableId := _args[2].(string)
						return fmt.Sprintf("bq://%v.%v.%v", project, datasetId, tableId), nil
					}).(pulumi.StringOutput),
				},
				EntityIdColumns: pulumi.StringArray{
					pulumi.String("feature_id"),
				},
			},
		})
		if err != nil {
			return err
		}
		sampleFeature, err := vertex.NewAiFeatureGroupFeature(ctx, "sample_feature", &vertex.AiFeatureGroupFeatureArgs{
			Name:         pulumi.String("example_cross_project_featureview"),
			Region:       pulumi.String("us-central1"),
			FeatureGroup: sampleFeatureGroup.Name,
			Description:  pulumi.String("A sample feature"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiFeatureOnlineStoreFeatureview(ctx, "cross_project_featureview", &vertex.AiFeatureOnlineStoreFeatureviewArgs{
			Name:               pulumi.String("example_cross_project_featureview"),
			Project:            project.ProjectId,
			Region:             pulumi.String("us-central1"),
			FeatureOnlineStore: featureonlinestore.Name,
			SyncConfig: &vertex.AiFeatureOnlineStoreFeatureviewSyncConfigArgs{
				Cron: pulumi.String("0 0 * * *"),
			},
			FeatureRegistrySource: &vertex.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs{
				FeatureGroups: vertex.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArray{
					&vertex.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs{
						FeatureGroupId: sampleFeatureGroup.Name,
						FeatureIds: pulumi.StringArray{
							sampleFeature.Name,
						},
					},
				},
				ProjectNumber: pulumi.String(testProject.Number),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			vertexai,
			wait30Seconds,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.organizations.Project;
import com.pulumi.gcp.organizations.ProjectArgs;
import com.pulumi.time.sleep;
import com.pulumi.time.SleepArgs;
import com.pulumi.gcp.projects.Service;
import com.pulumi.gcp.projects.ServiceArgs;
import com.pulumi.gcp.vertex.AiFeatureOnlineStore;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs;
import com.pulumi.gcp.bigquery.Dataset;
import com.pulumi.gcp.bigquery.DatasetArgs;
import com.pulumi.gcp.bigquery.DatasetIamMember;
import com.pulumi.gcp.bigquery.DatasetIamMemberArgs;
import com.pulumi.gcp.bigquery.Table;
import com.pulumi.gcp.bigquery.TableArgs;
import com.pulumi.gcp.vertex.AiFeatureGroup;
import com.pulumi.gcp.vertex.AiFeatureGroupArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureGroupBigQueryBigQuerySourceArgs;
import com.pulumi.gcp.vertex.AiFeatureGroupFeature;
import com.pulumi.gcp.vertex.AiFeatureGroupFeatureArgs;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureview;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureviewArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var testProject = OrganizationsFunctions.getProject();

        var project = new Project("project", ProjectArgs.builder()
            .projectId("tf-test_89313")
            .name("tf-test_60646")
            .orgId("123456789")
            .billingAccount("000000-0000000-0000000-000000")
            .deletionPolicy("DELETE")
            .build());

        var wait60Seconds = new Sleep("wait60Seconds", SleepArgs.builder()
            .createDuration("60s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(project)
                .build());

        var vertexai = new Service("vertexai", ServiceArgs.builder()
            .service("aiplatform.googleapis.com")
            .project(project.projectId())
            .disableOnDestroy(false)
            .build(), CustomResourceOptions.builder()
                .dependsOn(wait60Seconds)
                .build());

        var featureonlinestore = new AiFeatureOnlineStore("featureonlinestore", AiFeatureOnlineStoreArgs.builder()
            .name("example_cross_project_featureview")
            .project(project.projectId())
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .bigtable(AiFeatureOnlineStoreBigtableArgs.builder()
                .autoScaling(AiFeatureOnlineStoreBigtableAutoScalingArgs.builder()
                    .minNodeCount(1)
                    .maxNodeCount(2)
                    .cpuUtilizationTarget(80)
                    .build())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(vertexai)
                .build());

        var sampleDataset = new Dataset("sampleDataset", DatasetArgs.builder()
            .datasetId("example_cross_project_featureview")
            .friendlyName("test")
            .description("This is a test description")
            .location("US")
            .build());

        var viewer = new DatasetIamMember("viewer", DatasetIamMemberArgs.builder()
            .project(testProject.applyValue(getProjectResult -> getProjectResult.projectId()))
            .datasetId(sampleDataset.datasetId())
            .role("roles/bigquery.dataViewer")
            .member(project.number().applyValue(number -> String.format("serviceAccount:service-%s@gcp-sa-aiplatform.iam.gserviceaccount.com", number)))
            .build(), CustomResourceOptions.builder()
                .dependsOn(featureonlinestore)
                .build());

        var wait30Seconds = new Sleep("wait30Seconds", SleepArgs.builder()
            .createDuration("30s")
            .build(), CustomResourceOptions.builder()
                .dependsOn(viewer)
                .build());

        var sampleTable = new Table("sampleTable", TableArgs.builder()
            .deletionProtection(false)
            .datasetId(sampleDataset.datasetId())
            .tableId("example_cross_project_featureview")
            .schema("""
[
    {
        "name": "feature_id",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "example_cross_project_featureview",
        "type": "STRING",
        "mode": "NULLABLE"
    },
    {
        "name": "feature_timestamp",
        "type": "TIMESTAMP",
        "mode": "NULLABLE"
    }
]
            """)
            .build());

        var sampleFeatureGroup = new AiFeatureGroup("sampleFeatureGroup", AiFeatureGroupArgs.builder()
            .name("example_cross_project_featureview")
            .description("A sample feature group")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .bigQuery(AiFeatureGroupBigQueryArgs.builder()
                .bigQuerySource(AiFeatureGroupBigQueryBigQuerySourceArgs.builder()
                    .inputUri(Output.tuple(sampleTable.project(), sampleTable.datasetId(), sampleTable.tableId()).applyValue(values -> {
                        var project = values.t1;
                        var datasetId = values.t2;
                        var tableId = values.t3;
                        return String.format("bq://%s.%s.%s", project,datasetId,tableId);
                    }))
                    .build())
                .entityIdColumns("feature_id")
                .build())
            .build());

        var sampleFeature = new AiFeatureGroupFeature("sampleFeature", AiFeatureGroupFeatureArgs.builder()
            .name("example_cross_project_featureview")
            .region("us-central1")
            .featureGroup(sampleFeatureGroup.name())
            .description("A sample feature")
            .labels(Map.of("label-one", "value-one"))
            .build());

        var crossProjectFeatureview = new AiFeatureOnlineStoreFeatureview("crossProjectFeatureview", AiFeatureOnlineStoreFeatureviewArgs.builder()
            .name("example_cross_project_featureview")
            .project(project.projectId())
            .region("us-central1")
            .featureOnlineStore(featureonlinestore.name())
            .syncConfig(AiFeatureOnlineStoreFeatureviewSyncConfigArgs.builder()
                .cron("0 0 * * *")
                .build())
            .featureRegistrySource(AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs.builder()
                .featureGroups(AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs.builder()
                    .featureGroupId(sampleFeatureGroup.name())
                    .featureIds(sampleFeature.name())
                    .build())
                .projectNumber(testProject.applyValue(getProjectResult -> getProjectResult.number()))
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    vertexai,
                    wait30Seconds)
                .build());

    }
}
```
```yaml
resources:
  project:
    type: gcp:organizations:Project
    properties:
      projectId: tf-test_89313
      name: tf-test_60646
      orgId: '123456789'
      billingAccount: 000000-0000000-0000000-000000
      deletionPolicy: DELETE
  wait60Seconds:
    type: time:sleep
    name: wait_60_seconds
    properties:
      createDuration: 60s
    options:
      dependsOn:
        - ${project}
  wait30Seconds:
    type: time:sleep
    name: wait_30_seconds
    properties:
      createDuration: 30s
    options:
      dependsOn:
        - ${viewer}
  vertexai:
    type: gcp:projects:Service
    properties:
      service: aiplatform.googleapis.com
      project: ${project.projectId}
      disableOnDestroy: false # Needed for CI tests for permissions to propagate, should not be needed for actual usage
    options:
      dependsOn:
        - ${wait60Seconds}
  viewer:
    type: gcp:bigquery:DatasetIamMember
    properties:
      project: ${testProject.projectId}
      datasetId: ${sampleDataset.datasetId}
      role: roles/bigquery.dataViewer
      member: serviceAccount:service-${project.number}@gcp-sa-aiplatform.iam.gserviceaccount.com
    options:
      dependsOn:
        - ${featureonlinestore}
  featureonlinestore:
    type: gcp:vertex:AiFeatureOnlineStore
    properties:
      name: example_cross_project_featureview
      project: ${project.projectId}
      labels:
        foo: bar
      region: us-central1
      bigtable:
        autoScaling:
          minNodeCount: 1
          maxNodeCount: 2
          cpuUtilizationTarget: 80
    options:
      dependsOn:
        - ${vertexai}
  sampleDataset:
    type: gcp:bigquery:Dataset
    name: sample_dataset
    properties:
      datasetId: example_cross_project_featureview
      friendlyName: test
      description: This is a test description
      location: US
  sampleTable:
    type: gcp:bigquery:Table
    name: sample_table
    properties:
      deletionProtection: false
      datasetId: ${sampleDataset.datasetId}
      tableId: example_cross_project_featureview
      schema: |
        [
            {
                "name": "feature_id",
                "type": "STRING",
                "mode": "NULLABLE"
            },
            {
                "name": "example_cross_project_featureview",
                "type": "STRING",
                "mode": "NULLABLE"
            },
            {
                "name": "feature_timestamp",
                "type": "TIMESTAMP",
                "mode": "NULLABLE"
            }
        ]
  sampleFeatureGroup:
    type: gcp:vertex:AiFeatureGroup
    name: sample_feature_group
    properties:
      name: example_cross_project_featureview
      description: A sample feature group
      region: us-central1
      labels:
        label-one: value-one
      bigQuery:
        bigQuerySource:
          inputUri: bq://${sampleTable.project}.${sampleTable.datasetId}.${sampleTable.tableId}
        entityIdColumns:
          - feature_id
  sampleFeature:
    type: gcp:vertex:AiFeatureGroupFeature
    name: sample_feature
    properties:
      name: example_cross_project_featureview
      region: us-central1
      featureGroup: ${sampleFeatureGroup.name}
      description: A sample feature
      labels:
        label-one: value-one
  crossProjectFeatureview:
    type: gcp:vertex:AiFeatureOnlineStoreFeatureview
    name: cross_project_featureview
    properties:
      name: example_cross_project_featureview
      project: ${project.projectId}
      region: us-central1
      featureOnlineStore: ${featureonlinestore.name}
      syncConfig:
        cron: 0 0 * * *
      featureRegistrySource:
        featureGroups:
          - featureGroupId: ${sampleFeatureGroup.name}
            featureIds:
              - ${sampleFeature.name}
        projectNumber: ${testProject.number}
    options:
      dependsOn:
        - ${vertexai}
        - ${wait30Seconds}
variables:
  testProject:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Vertex Ai Featureonlinestore Featureview With Vector Search


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featureonlinestore = new gcp.vertex.AiFeatureOnlineStore("featureonlinestore", {
    name: "example_feature_view_vector_search",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    bigtable: {
        autoScaling: {
            minNodeCount: 1,
            maxNodeCount: 2,
            cpuUtilizationTarget: 80,
        },
    },
    embeddingManagement: {
        enabled: true,
    },
});
const tf_test_dataset = new gcp.bigquery.Dataset("tf-test-dataset", {
    datasetId: "example_feature_view_vector_search",
    friendlyName: "test",
    description: "This is a test description",
    location: "US",
});
const tf_test_table = new gcp.bigquery.Table("tf-test-table", {
    deletionProtection: false,
    datasetId: tf_test_dataset.datasetId,
    tableId: "example_feature_view_vector_search",
    schema: `[
{
  "name": "test_primary_id",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "primary test id"
},
{
  "name": "embedding",
  "mode": "REPEATED",
  "type": "FLOAT",
  "description": "embedding column for primary_id column"
},
{
  "name": "country",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "country"
},
{
  "name": "test_crowding_column",
  "mode": "NULLABLE",
  "type": "INTEGER",
  "description": "test crowding column"
},
{
  "name": "entity_id",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "Test default entity_id"
},
{
  "name": "test_entity_column",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "test secondary entity column"
},
{
  "name": "feature_timestamp",
  "mode": "NULLABLE",
  "type": "TIMESTAMP",
  "description": "Default timestamp value"
}
]
`,
});
const featureviewVectorSearch = new gcp.vertex.AiFeatureOnlineStoreFeatureview("featureview_vector_search", {
    name: "example_feature_view_vector_search",
    region: "us-central1",
    featureOnlineStore: featureonlinestore.name,
    syncConfig: {
        cron: "0 0 * * *",
    },
    bigQuerySource: {
        uri: pulumi.interpolate`bq://${tf_test_table.project}.${tf_test_table.datasetId}.${tf_test_table.tableId}`,
        entityIdColumns: ["test_entity_column"],
    },
    vectorSearchConfig: {
        embeddingColumn: "embedding",
        filterColumns: ["country"],
        crowdingColumn: "test_crowding_column",
        distanceMeasureType: "DOT_PRODUCT_DISTANCE",
        treeAhConfig: {
            leafNodeEmbeddingCount: "1000",
        },
        embeddingDimension: 2,
    },
});
const project = gcp.organizations.getProject({});
```
```python
import pulumi
import pulumi_gcp as gcp

featureonlinestore = gcp.vertex.AiFeatureOnlineStore("featureonlinestore",
    name="example_feature_view_vector_search",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    bigtable={
        "auto_scaling": {
            "min_node_count": 1,
            "max_node_count": 2,
            "cpu_utilization_target": 80,
        },
    },
    embedding_management={
        "enabled": True,
    })
tf_test_dataset = gcp.bigquery.Dataset("tf-test-dataset",
    dataset_id="example_feature_view_vector_search",
    friendly_name="test",
    description="This is a test description",
    location="US")
tf_test_table = gcp.bigquery.Table("tf-test-table",
    deletion_protection=False,
    dataset_id=tf_test_dataset.dataset_id,
    table_id="example_feature_view_vector_search",
    schema="""[
{
  "name": "test_primary_id",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "primary test id"
},
{
  "name": "embedding",
  "mode": "REPEATED",
  "type": "FLOAT",
  "description": "embedding column for primary_id column"
},
{
  "name": "country",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "country"
},
{
  "name": "test_crowding_column",
  "mode": "NULLABLE",
  "type": "INTEGER",
  "description": "test crowding column"
},
{
  "name": "entity_id",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "Test default entity_id"
},
{
  "name": "test_entity_column",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "test secondary entity column"
},
{
  "name": "feature_timestamp",
  "mode": "NULLABLE",
  "type": "TIMESTAMP",
  "description": "Default timestamp value"
}
]
""")
featureview_vector_search = gcp.vertex.AiFeatureOnlineStoreFeatureview("featureview_vector_search",
    name="example_feature_view_vector_search",
    region="us-central1",
    feature_online_store=featureonlinestore.name,
    sync_config={
        "cron": "0 0 * * *",
    },
    big_query_source={
        "uri": pulumi.Output.all(
            project=tf_test_table.project,
            dataset_id=tf_test_table.dataset_id,
            table_id=tf_test_table.table_id
).apply(lambda resolved_outputs: f"bq://{resolved_outputs['project']}.{resolved_outputs['dataset_id']}.{resolved_outputs['table_id']}")
,
        "entity_id_columns": ["test_entity_column"],
    },
    vector_search_config={
        "embedding_column": "embedding",
        "filter_columns": ["country"],
        "crowding_column": "test_crowding_column",
        "distance_measure_type": "DOT_PRODUCT_DISTANCE",
        "tree_ah_config": {
            "leaf_node_embedding_count": "1000",
        },
        "embedding_dimension": 2,
    })
project = gcp.organizations.get_project()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featureonlinestore = new Gcp.Vertex.AiFeatureOnlineStore("featureonlinestore", new()
    {
        Name = "example_feature_view_vector_search",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        Bigtable = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableArgs
        {
            AutoScaling = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs
            {
                MinNodeCount = 1,
                MaxNodeCount = 2,
                CpuUtilizationTarget = 80,
            },
        },
        EmbeddingManagement = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreEmbeddingManagementArgs
        {
            Enabled = true,
        },
    });

    var tf_test_dataset = new Gcp.BigQuery.Dataset("tf-test-dataset", new()
    {
        DatasetId = "example_feature_view_vector_search",
        FriendlyName = "test",
        Description = "This is a test description",
        Location = "US",
    });

    var tf_test_table = new Gcp.BigQuery.Table("tf-test-table", new()
    {
        DeletionProtection = false,
        DatasetId = tf_test_dataset.DatasetId,
        TableId = "example_feature_view_vector_search",
        Schema = @"[
{
  ""name"": ""test_primary_id"",
  ""mode"": ""NULLABLE"",
  ""type"": ""STRING"",
  ""description"": ""primary test id""
},
{
  ""name"": ""embedding"",
  ""mode"": ""REPEATED"",
  ""type"": ""FLOAT"",
  ""description"": ""embedding column for primary_id column""
},
{
  ""name"": ""country"",
  ""mode"": ""NULLABLE"",
  ""type"": ""STRING"",
  ""description"": ""country""
},
{
  ""name"": ""test_crowding_column"",
  ""mode"": ""NULLABLE"",
  ""type"": ""INTEGER"",
  ""description"": ""test crowding column""
},
{
  ""name"": ""entity_id"",
  ""mode"": ""NULLABLE"",
  ""type"": ""STRING"",
  ""description"": ""Test default entity_id""
},
{
  ""name"": ""test_entity_column"",
  ""mode"": ""NULLABLE"",
  ""type"": ""STRING"",
  ""description"": ""test secondary entity column""
},
{
  ""name"": ""feature_timestamp"",
  ""mode"": ""NULLABLE"",
  ""type"": ""TIMESTAMP"",
  ""description"": ""Default timestamp value""
}
]
",
    });

    var featureviewVectorSearch = new Gcp.Vertex.AiFeatureOnlineStoreFeatureview("featureview_vector_search", new()
    {
        Name = "example_feature_view_vector_search",
        Region = "us-central1",
        FeatureOnlineStore = featureonlinestore.Name,
        SyncConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs
        {
            Cron = "0 0 * * *",
        },
        BigQuerySource = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs
        {
            Uri = Output.Tuple(tf_test_table.Project, tf_test_table.DatasetId, tf_test_table.TableId).Apply(values =>
            {
                var project = values.Item1;
                var datasetId = values.Item2;
                var tableId = values.Item3;
                return $"bq://{project}.{datasetId}.{tableId}";
            }),
            EntityIdColumns = new[]
            {
                "test_entity_column",
            },
        },
        VectorSearchConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs
        {
            EmbeddingColumn = "embedding",
            FilterColumns = new[]
            {
                "country",
            },
            CrowdingColumn = "test_crowding_column",
            DistanceMeasureType = "DOT_PRODUCT_DISTANCE",
            TreeAhConfig = new Gcp.Vertex.Inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs
            {
                LeafNodeEmbeddingCount = "1000",
            },
            EmbeddingDimension = 2,
        },
    });

    var project = Gcp.Organizations.GetProject.Invoke();

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/bigquery"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		featureonlinestore, err := vertex.NewAiFeatureOnlineStore(ctx, "featureonlinestore", &vertex.AiFeatureOnlineStoreArgs{
			Name: pulumi.String("example_feature_view_vector_search"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			Bigtable: &vertex.AiFeatureOnlineStoreBigtableArgs{
				AutoScaling: &vertex.AiFeatureOnlineStoreBigtableAutoScalingArgs{
					MinNodeCount:         pulumi.Int(1),
					MaxNodeCount:         pulumi.Int(2),
					CpuUtilizationTarget: pulumi.Int(80),
				},
			},
			EmbeddingManagement: &vertex.AiFeatureOnlineStoreEmbeddingManagementArgs{
				Enabled: pulumi.Bool(true),
			},
		})
		if err != nil {
			return err
		}
		_, err = bigquery.NewDataset(ctx, "tf-test-dataset", &bigquery.DatasetArgs{
			DatasetId:    pulumi.String("example_feature_view_vector_search"),
			FriendlyName: pulumi.String("test"),
			Description:  pulumi.String("This is a test description"),
			Location:     pulumi.String("US"),
		})
		if err != nil {
			return err
		}
		_, err = bigquery.NewTable(ctx, "tf-test-table", &bigquery.TableArgs{
			DeletionProtection: pulumi.Bool(false),
			DatasetId:          tf_test_dataset.DatasetId,
			TableId:            pulumi.String("example_feature_view_vector_search"),
			Schema: pulumi.String(`[
{
  "name": "test_primary_id",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "primary test id"
},
{
  "name": "embedding",
  "mode": "REPEATED",
  "type": "FLOAT",
  "description": "embedding column for primary_id column"
},
{
  "name": "country",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "country"
},
{
  "name": "test_crowding_column",
  "mode": "NULLABLE",
  "type": "INTEGER",
  "description": "test crowding column"
},
{
  "name": "entity_id",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "Test default entity_id"
},
{
  "name": "test_entity_column",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "test secondary entity column"
},
{
  "name": "feature_timestamp",
  "mode": "NULLABLE",
  "type": "TIMESTAMP",
  "description": "Default timestamp value"
}
]
`),
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiFeatureOnlineStoreFeatureview(ctx, "featureview_vector_search", &vertex.AiFeatureOnlineStoreFeatureviewArgs{
			Name:               pulumi.String("example_feature_view_vector_search"),
			Region:             pulumi.String("us-central1"),
			FeatureOnlineStore: featureonlinestore.Name,
			SyncConfig: &vertex.AiFeatureOnlineStoreFeatureviewSyncConfigArgs{
				Cron: pulumi.String("0 0 * * *"),
			},
			BigQuerySource: &vertex.AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs{
				Uri: pulumi.All(tf_test_table.Project, tf_test_table.DatasetId, tf_test_table.TableId).ApplyT(func(_args []interface{}) (string, error) {
					project := _args[0].(string)
					datasetId := _args[1].(string)
					tableId := _args[2].(string)
					return fmt.Sprintf("bq://%v.%v.%v", project, datasetId, tableId), nil
				}).(pulumi.StringOutput),
				EntityIdColumns: pulumi.StringArray{
					pulumi.String("test_entity_column"),
				},
			},
			VectorSearchConfig: &vertex.AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs{
				EmbeddingColumn: pulumi.String("embedding"),
				FilterColumns: pulumi.StringArray{
					pulumi.String("country"),
				},
				CrowdingColumn:      pulumi.String("test_crowding_column"),
				DistanceMeasureType: pulumi.String("DOT_PRODUCT_DISTANCE"),
				TreeAhConfig: &vertex.AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs{
					LeafNodeEmbeddingCount: pulumi.String("1000"),
				},
				EmbeddingDimension: pulumi.Int(2),
			},
		})
		if err != nil {
			return err
		}
		_, err = organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureOnlineStore;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreBigtableAutoScalingArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreEmbeddingManagementArgs;
import com.pulumi.gcp.bigquery.Dataset;
import com.pulumi.gcp.bigquery.DatasetArgs;
import com.pulumi.gcp.bigquery.Table;
import com.pulumi.gcp.bigquery.TableArgs;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureview;
import com.pulumi.gcp.vertex.AiFeatureOnlineStoreFeatureviewArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewSyncConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featureonlinestore = new AiFeatureOnlineStore("featureonlinestore", AiFeatureOnlineStoreArgs.builder()
            .name("example_feature_view_vector_search")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .bigtable(AiFeatureOnlineStoreBigtableArgs.builder()
                .autoScaling(AiFeatureOnlineStoreBigtableAutoScalingArgs.builder()
                    .minNodeCount(1)
                    .maxNodeCount(2)
                    .cpuUtilizationTarget(80)
                    .build())
                .build())
            .embeddingManagement(AiFeatureOnlineStoreEmbeddingManagementArgs.builder()
                .enabled(true)
                .build())
            .build());

        var tf_test_dataset = new Dataset("tf-test-dataset", DatasetArgs.builder()
            .datasetId("example_feature_view_vector_search")
            .friendlyName("test")
            .description("This is a test description")
            .location("US")
            .build());

        var tf_test_table = new Table("tf-test-table", TableArgs.builder()
            .deletionProtection(false)
            .datasetId(tf_test_dataset.datasetId())
            .tableId("example_feature_view_vector_search")
            .schema("""
[
{
  "name": "test_primary_id",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "primary test id"
},
{
  "name": "embedding",
  "mode": "REPEATED",
  "type": "FLOAT",
  "description": "embedding column for primary_id column"
},
{
  "name": "country",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "country"
},
{
  "name": "test_crowding_column",
  "mode": "NULLABLE",
  "type": "INTEGER",
  "description": "test crowding column"
},
{
  "name": "entity_id",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "Test default entity_id"
},
{
  "name": "test_entity_column",
  "mode": "NULLABLE",
  "type": "STRING",
  "description": "test secondary entity column"
},
{
  "name": "feature_timestamp",
  "mode": "NULLABLE",
  "type": "TIMESTAMP",
  "description": "Default timestamp value"
}
]
            """)
            .build());

        var featureviewVectorSearch = new AiFeatureOnlineStoreFeatureview("featureviewVectorSearch", AiFeatureOnlineStoreFeatureviewArgs.builder()
            .name("example_feature_view_vector_search")
            .region("us-central1")
            .featureOnlineStore(featureonlinestore.name())
            .syncConfig(AiFeatureOnlineStoreFeatureviewSyncConfigArgs.builder()
                .cron("0 0 * * *")
                .build())
            .bigQuerySource(AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs.builder()
                .uri(Output.tuple(tf_test_table.project(), tf_test_table.datasetId(), tf_test_table.tableId()).applyValue(values -> {
                    var project = values.t1;
                    var datasetId = values.t2;
                    var tableId = values.t3;
                    return String.format("bq://%s.%s.%s", project,datasetId,tableId);
                }))
                .entityIdColumns("test_entity_column")
                .build())
            .vectorSearchConfig(AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs.builder()
                .embeddingColumn("embedding")
                .filterColumns("country")
                .crowdingColumn("test_crowding_column")
                .distanceMeasureType("DOT_PRODUCT_DISTANCE")
                .treeAhConfig(AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs.builder()
                    .leafNodeEmbeddingCount("1000")
                    .build())
                .embeddingDimension("2")
                .build())
            .build());

        final var project = OrganizationsFunctions.getProject();

    }
}
```
```yaml
resources:
  featureonlinestore:
    type: gcp:vertex:AiFeatureOnlineStore
    properties:
      name: example_feature_view_vector_search
      labels:
        foo: bar
      region: us-central1
      bigtable:
        autoScaling:
          minNodeCount: 1
          maxNodeCount: 2
          cpuUtilizationTarget: 80
      embeddingManagement:
        enabled: true
  tf-test-dataset:
    type: gcp:bigquery:Dataset
    properties:
      datasetId: example_feature_view_vector_search
      friendlyName: test
      description: This is a test description
      location: US
  tf-test-table:
    type: gcp:bigquery:Table
    properties:
      deletionProtection: false
      datasetId: ${["tf-test-dataset"].datasetId}
      tableId: example_feature_view_vector_search
      schema: |
        [
        {
          "name": "test_primary_id",
          "mode": "NULLABLE",
          "type": "STRING",
          "description": "primary test id"
        },
        {
          "name": "embedding",
          "mode": "REPEATED",
          "type": "FLOAT",
          "description": "embedding column for primary_id column"
        },
        {
          "name": "country",
          "mode": "NULLABLE",
          "type": "STRING",
          "description": "country"
        },
        {
          "name": "test_crowding_column",
          "mode": "NULLABLE",
          "type": "INTEGER",
          "description": "test crowding column"
        },
        {
          "name": "entity_id",
          "mode": "NULLABLE",
          "type": "STRING",
          "description": "Test default entity_id"
        },
        {
          "name": "test_entity_column",
          "mode": "NULLABLE",
          "type": "STRING",
          "description": "test secondary entity column"
        },
        {
          "name": "feature_timestamp",
          "mode": "NULLABLE",
          "type": "TIMESTAMP",
          "description": "Default timestamp value"
        }
        ]
  featureviewVectorSearch:
    type: gcp:vertex:AiFeatureOnlineStoreFeatureview
    name: featureview_vector_search
    properties:
      name: example_feature_view_vector_search
      region: us-central1
      featureOnlineStore: ${featureonlinestore.name}
      syncConfig:
        cron: 0 0 * * *
      bigQuerySource:
        uri: bq://${["tf-test-table"].project}.${["tf-test-table"].datasetId}.${["tf-test-table"].tableId}
        entityIdColumns:
          - test_entity_column
      vectorSearchConfig:
        embeddingColumn: embedding
        filterColumns:
          - country
        crowdingColumn: test_crowding_column
        distanceMeasureType: DOT_PRODUCT_DISTANCE
        treeAhConfig:
          leafNodeEmbeddingCount: '1000'
        embeddingDimension: '2'
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

FeatureOnlineStoreFeatureview can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}}/featureViews/{{name}}`

* `{{project}}/{{region}}/{{feature_online_store}}/{{name}}`

* `{{region}}/{{feature_online_store}}/{{name}}`

* `{{feature_online_store}}/{{name}}`

When using the `pulumi import` command, FeatureOnlineStoreFeatureview can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default projects/{{project}}/locations/{{region}}/featureOnlineStores/{{feature_online_store}}/featureViews/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default {{project}}/{{region}}/{{feature_online_store}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default {{region}}/{{feature_online_store}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureOnlineStoreFeatureview:AiFeatureOnlineStoreFeatureview default {{feature_online_store}}/{{name}}
```

╬
bigQuerySourceиBе:в
Я
vertex-AiFeatureOnlineStoreFeatureviewBigQuerySourcefgcp:vertex/AiFeatureOnlineStoreFeatureviewBigQuerySource:AiFeatureOnlineStoreFeatureviewBigQuerySourceРConfigures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
Structure is documented below.
Y
featureOnlineStore" ?The name of the FeatureOnlineStore to use for the featureview.
ф
featureRegistrySource╜B║:╖
┤
vertex4AiFeatureOnlineStoreFeatureviewFeatureRegistrySourcetgcp:vertex/AiFeatureOnlineStoreFeatureviewFeatureRegistrySource:AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceКConfigures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
Structure is documented below.
Ш
labelsB2" ЕA set of key/value label pairs to assign to this FeatureView.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
Ы
nameB" МName of the FeatureView. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
k
region" ]The region for the resource. It should be the same as the featureonlinestore region.


- - -
Й

syncConfigЬBЩ:Ц
У
vertex)AiFeatureOnlineStoreFeatureviewSyncConfig^gcp:vertex/AiFeatureOnlineStoreFeatureviewSyncConfig:AiFeatureOnlineStoreFeatureviewSyncConfig█Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
Structure is documented below.
╞
vectorSearchConfig┤B▒:о
л
vertex1AiFeatureOnlineStoreFeatureviewVectorSearchConfigngcp:vertex/AiFeatureOnlineStoreFeatureviewVectorSearchConfig:AiFeatureOnlineStoreFeatureviewVectorSearchConfig°Configuration for vector search. It contains the required configurations to create an index from source data, so that approximate nearest neighbor (a.k.a ANN) algorithms search can be performed during online serving.
Structure is documented below.
"╬
bigQuerySourceиBе:в
Я
vertex-AiFeatureOnlineStoreFeatureviewBigQuerySourcefgcp:vertex/AiFeatureOnlineStoreFeatureviewBigQuerySource:AiFeatureOnlineStoreFeatureviewBigQuerySourceРConfigures how data is supposed to be extracted from a BigQuery source to be loaded onto the FeatureOnlineStore.
Structure is documented below.
"з

createTime" ФThe timestamp of when the featureOnlinestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"Y
featureOnlineStore" ?The name of the FeatureOnlineStore to use for the featureview.
"ф
featureRegistrySource╜B║:╖
┤
vertex4AiFeatureOnlineStoreFeatureviewFeatureRegistrySourcetgcp:vertex/AiFeatureOnlineStoreFeatureviewFeatureRegistrySource:AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceКConfigures the features from a Feature Registry source that need to be loaded onto the FeatureOnlineStore.
Structure is documented below.
"Ш
labelsB2" ЕA set of key/value label pairs to assign to this FeatureView.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"Щ
name" МName of the FeatureView. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"k
region" ]The region for the resource. It should be the same as the featureonlinestore region.


- - -
"Й

syncConfigЬBЩ:Ц
У
vertex)AiFeatureOnlineStoreFeatureviewSyncConfig^gcp:vertex/AiFeatureOnlineStoreFeatureviewSyncConfig:AiFeatureOnlineStoreFeatureviewSyncConfig█Configures when data is to be synced/updated for this FeatureView. At the end of the sync the latest featureValues for each entityId of this FeatureView are made ready for online serving.
Structure is documented below.
"м

updateTime" ЩThe timestamp of when the featureOnlinestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"╞
vectorSearchConfig┤B▒:о
л
vertex1AiFeatureOnlineStoreFeatureviewVectorSearchConfigngcp:vertex/AiFeatureOnlineStoreFeatureviewVectorSearchConfig:AiFeatureOnlineStoreFeatureviewVectorSearchConfig°Configuration for vector search. It contains the required configurations to create an index from source data, so that approximate nearest neighbor (a.k.a ANN) algorithms search can be performed during online serving.
Structure is documented below.
*ўЗ
B
vertexAiFeatureStore(gcp:vertex/aiFeatureStore:AiFeatureStoreоhA collection of DataItems and Annotations on them.


To get more information about Featurestore, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/vertex-ai/docs)

## Example Usage

### Vertex Ai Featurestore


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
    name: "terraform",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    onlineServingConfig: {
        fixedNodeCount: 2,
    },
    encryptionSpec: {
        kmsKeyName: "kms-name",
    },
    forceDestroy: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

featurestore = gcp.vertex.AiFeatureStore("featurestore",
    name="terraform",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    online_serving_config={
        "fixed_node_count": 2,
    },
    encryption_spec={
        "kms_key_name": "kms-name",
    },
    force_destroy=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featurestore = new Gcp.Vertex.AiFeatureStore("featurestore", new()
    {
        Name = "terraform",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        OnlineServingConfig = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigArgs
        {
            FixedNodeCount = 2,
        },
        EncryptionSpec = new Gcp.Vertex.Inputs.AiFeatureStoreEncryptionSpecArgs
        {
            KmsKeyName = "kms-name",
        },
        ForceDestroy = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
			Name: pulumi.String("terraform"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
				FixedNodeCount: pulumi.Int(2),
			},
			EncryptionSpec: &vertex.AiFeatureStoreEncryptionSpecArgs{
				KmsKeyName: pulumi.String("kms-name"),
			},
			ForceDestroy: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureStore;
import com.pulumi.gcp.vertex.AiFeatureStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreOnlineServingConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEncryptionSpecArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featurestore = new AiFeatureStore("featurestore", AiFeatureStoreArgs.builder()
            .name("terraform")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .onlineServingConfig(AiFeatureStoreOnlineServingConfigArgs.builder()
                .fixedNodeCount(2)
                .build())
            .encryptionSpec(AiFeatureStoreEncryptionSpecArgs.builder()
                .kmsKeyName("kms-name")
                .build())
            .forceDestroy(true)
            .build());

    }
}
```
```yaml
resources:
  featurestore:
    type: gcp:vertex:AiFeatureStore
    properties:
      name: terraform
      labels:
        foo: bar
      region: us-central1
      onlineServingConfig:
        fixedNodeCount: 2
      encryptionSpec:
        kmsKeyName: kms-name
      forceDestroy: true
```
<!--End PulumiCodeChooser -->
### Vertex Ai Featurestore With Beta Fields


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
    name: "terraform2",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    onlineServingConfig: {
        fixedNodeCount: 2,
    },
    encryptionSpec: {
        kmsKeyName: "kms-name",
    },
    onlineStorageTtlDays: 30,
    forceDestroy: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

featurestore = gcp.vertex.AiFeatureStore("featurestore",
    name="terraform2",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    online_serving_config={
        "fixed_node_count": 2,
    },
    encryption_spec={
        "kms_key_name": "kms-name",
    },
    online_storage_ttl_days=30,
    force_destroy=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featurestore = new Gcp.Vertex.AiFeatureStore("featurestore", new()
    {
        Name = "terraform2",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        OnlineServingConfig = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigArgs
        {
            FixedNodeCount = 2,
        },
        EncryptionSpec = new Gcp.Vertex.Inputs.AiFeatureStoreEncryptionSpecArgs
        {
            KmsKeyName = "kms-name",
        },
        OnlineStorageTtlDays = 30,
        ForceDestroy = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
			Name: pulumi.String("terraform2"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
				FixedNodeCount: pulumi.Int(2),
			},
			EncryptionSpec: &vertex.AiFeatureStoreEncryptionSpecArgs{
				KmsKeyName: pulumi.String("kms-name"),
			},
			OnlineStorageTtlDays: pulumi.Int(30),
			ForceDestroy:         pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureStore;
import com.pulumi.gcp.vertex.AiFeatureStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreOnlineServingConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEncryptionSpecArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featurestore = new AiFeatureStore("featurestore", AiFeatureStoreArgs.builder()
            .name("terraform2")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .onlineServingConfig(AiFeatureStoreOnlineServingConfigArgs.builder()
                .fixedNodeCount(2)
                .build())
            .encryptionSpec(AiFeatureStoreEncryptionSpecArgs.builder()
                .kmsKeyName("kms-name")
                .build())
            .onlineStorageTtlDays(30)
            .forceDestroy(true)
            .build());

    }
}
```
```yaml
resources:
  featurestore:
    type: gcp:vertex:AiFeatureStore
    properties:
      name: terraform2
      labels:
        foo: bar
      region: us-central1
      onlineServingConfig:
        fixedNodeCount: 2
      encryptionSpec:
        kmsKeyName: kms-name
      onlineStorageTtlDays: 30
      forceDestroy: true
```
<!--End PulumiCodeChooser -->
### Vertex Ai Featurestore Scaling


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
    name: "terraform3",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    onlineServingConfig: {
        scaling: {
            minNodeCount: 2,
            maxNodeCount: 10,
        },
    },
    encryptionSpec: {
        kmsKeyName: "kms-name",
    },
    forceDestroy: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

featurestore = gcp.vertex.AiFeatureStore("featurestore",
    name="terraform3",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    online_serving_config={
        "scaling": {
            "min_node_count": 2,
            "max_node_count": 10,
        },
    },
    encryption_spec={
        "kms_key_name": "kms-name",
    },
    force_destroy=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featurestore = new Gcp.Vertex.AiFeatureStore("featurestore", new()
    {
        Name = "terraform3",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        OnlineServingConfig = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigArgs
        {
            Scaling = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigScalingArgs
            {
                MinNodeCount = 2,
                MaxNodeCount = 10,
            },
        },
        EncryptionSpec = new Gcp.Vertex.Inputs.AiFeatureStoreEncryptionSpecArgs
        {
            KmsKeyName = "kms-name",
        },
        ForceDestroy = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
			Name: pulumi.String("terraform3"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
				Scaling: &vertex.AiFeatureStoreOnlineServingConfigScalingArgs{
					MinNodeCount: pulumi.Int(2),
					MaxNodeCount: pulumi.Int(10),
				},
			},
			EncryptionSpec: &vertex.AiFeatureStoreEncryptionSpecArgs{
				KmsKeyName: pulumi.String("kms-name"),
			},
			ForceDestroy: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureStore;
import com.pulumi.gcp.vertex.AiFeatureStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreOnlineServingConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreOnlineServingConfigScalingArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEncryptionSpecArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featurestore = new AiFeatureStore("featurestore", AiFeatureStoreArgs.builder()
            .name("terraform3")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .onlineServingConfig(AiFeatureStoreOnlineServingConfigArgs.builder()
                .scaling(AiFeatureStoreOnlineServingConfigScalingArgs.builder()
                    .minNodeCount(2)
                    .maxNodeCount(10)
                    .build())
                .build())
            .encryptionSpec(AiFeatureStoreEncryptionSpecArgs.builder()
                .kmsKeyName("kms-name")
                .build())
            .forceDestroy(true)
            .build());

    }
}
```
```yaml
resources:
  featurestore:
    type: gcp:vertex:AiFeatureStore
    properties:
      name: terraform3
      labels:
        foo: bar
      region: us-central1
      onlineServingConfig:
        scaling:
          minNodeCount: 2
          maxNodeCount: 10
      encryptionSpec:
        kmsKeyName: kms-name
      forceDestroy: true
```
<!--End PulumiCodeChooser -->

## Import

Featurestore can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/featurestores/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Featurestore can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default projects/{{project}}/locations/{{region}}/featurestores/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiFeatureStore:AiFeatureStore default {{name}}
```

Ў
encryptionSpecrBp:n
l
vertexAiFeatureStoreEncryptionSpecDgcp:vertex/AiFeatureStoreEncryptionSpec:AiFeatureStoreEncryptionSpecpIf set, both of the online and offline data storage will be secured by this key.
Structure is documented below.
n
forceDestroyB
 XIf set to true, any EntityTypes and Features for this Featurestore will also be deleted
Щ
labelsB2" ЖA set of key/value label pairs to assign to this Featurestore.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
а
nameB" СThe name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
▀
onlineServingConfigБB:}
{
vertex!AiFeatureStoreOnlineServingConfigNgcp:vertex/AiFeatureStoreOnlineServingConfig:AiFeatureStoreOnlineServingConfigDConfig for online serving resources.
Structure is documented below.
Ю
onlineStorageTtlDaysB  TTL in days for feature values that will be stored in online serving storage. The Feature Store online storage periodically removes obsolete feature values older than onlineStorageTtlDays since the feature generation time. Note that onlineStorageTtlDays should be less than or equal to offlineStorageTtlDays for each EntityType under a featurestore. If not set, default to 4000 days
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
:
regionB" *The region of the dataset. eg us-central1
"б

createTime" ОThe timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"Ў
encryptionSpecrBp:n
l
vertexAiFeatureStoreEncryptionSpecDgcp:vertex/AiFeatureStoreEncryptionSpec:AiFeatureStoreEncryptionSpecpIf set, both of the online and offline data storage will be secured by this key.
Structure is documented below.
"B
etag" 6Used to perform consistent read-modify-write updates.
"n
forceDestroyB
 XIf set to true, any EntityTypes and Features for this Featurestore will also be deleted
"Щ
labelsB2" ЖA set of key/value label pairs to assign to this Featurestore.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"Ю
name" СThe name of the Featurestore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
"▀
onlineServingConfigБB:}
{
vertex!AiFeatureStoreOnlineServingConfigNgcp:vertex/AiFeatureStoreOnlineServingConfig:AiFeatureStoreOnlineServingConfigDConfig for online serving resources.
Structure is documented below.
"Ю
onlineStorageTtlDaysB  TTL in days for feature values that will be stored in online serving storage. The Feature Store online storage periodically removes obsolete feature values older than onlineStorageTtlDays since the feature generation time. Note that onlineStorageTtlDays should be less than or equal to offlineStorageTtlDays for each EntityType under a featurestore. If not set, default to 4000 days
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"8
region" *The region of the dataset. eg us-central1
"ж

updateTime" УThe timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
*║┤
`
vertexAiFeatureStoreEntityType<gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType╢ЦAn entity type is a type of object in a system that needs to be modeled and have stored information about. For example, driver is an entity type, and driver0 is an instance of an entity type driver.


To get more information about FeaturestoreEntitytype, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/vertex-ai/docs)

## Example Usage

### Vertex Ai Featurestore Entitytype


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
    name: "terraform",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    onlineServingConfig: {
        fixedNodeCount: 2,
    },
    encryptionSpec: {
        kmsKeyName: "kms-name",
    },
});
const entity = new gcp.vertex.AiFeatureStoreEntityType("entity", {
    name: "terraform",
    labels: {
        foo: "bar",
    },
    description: "test description",
    featurestore: featurestore.id,
    monitoringConfig: {
        snapshotAnalysis: {
            disabled: false,
            monitoringIntervalDays: 1,
            stalenessDays: 21,
        },
        numericalThresholdConfig: {
            value: 0.8,
        },
        categoricalThresholdConfig: {
            value: 10,
        },
        importFeaturesAnalysis: {
            state: "ENABLED",
            anomalyDetectionBaseline: "PREVIOUS_IMPORT_FEATURES_STATS",
        },
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

featurestore = gcp.vertex.AiFeatureStore("featurestore",
    name="terraform",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    online_serving_config={
        "fixed_node_count": 2,
    },
    encryption_spec={
        "kms_key_name": "kms-name",
    })
entity = gcp.vertex.AiFeatureStoreEntityType("entity",
    name="terraform",
    labels={
        "foo": "bar",
    },
    description="test description",
    featurestore=featurestore.id,
    monitoring_config={
        "snapshot_analysis": {
            "disabled": False,
            "monitoring_interval_days": 1,
            "staleness_days": 21,
        },
        "numerical_threshold_config": {
            "value": 0.8,
        },
        "categorical_threshold_config": {
            "value": 10,
        },
        "import_features_analysis": {
            "state": "ENABLED",
            "anomaly_detection_baseline": "PREVIOUS_IMPORT_FEATURES_STATS",
        },
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featurestore = new Gcp.Vertex.AiFeatureStore("featurestore", new()
    {
        Name = "terraform",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        OnlineServingConfig = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigArgs
        {
            FixedNodeCount = 2,
        },
        EncryptionSpec = new Gcp.Vertex.Inputs.AiFeatureStoreEncryptionSpecArgs
        {
            KmsKeyName = "kms-name",
        },
    });

    var entity = new Gcp.Vertex.AiFeatureStoreEntityType("entity", new()
    {
        Name = "terraform",
        Labels = 
        {
            { "foo", "bar" },
        },
        Description = "test description",
        Featurestore = featurestore.Id,
        MonitoringConfig = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigArgs
        {
            SnapshotAnalysis = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs
            {
                Disabled = false,
                MonitoringIntervalDays = 1,
                StalenessDays = 21,
            },
            NumericalThresholdConfig = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs
            {
                Value = 0.8,
            },
            CategoricalThresholdConfig = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs
            {
                Value = 10,
            },
            ImportFeaturesAnalysis = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs
            {
                State = "ENABLED",
                AnomalyDetectionBaseline = "PREVIOUS_IMPORT_FEATURES_STATS",
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		featurestore, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
			Name: pulumi.String("terraform"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
				FixedNodeCount: pulumi.Int(2),
			},
			EncryptionSpec: &vertex.AiFeatureStoreEncryptionSpecArgs{
				KmsKeyName: pulumi.String("kms-name"),
			},
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiFeatureStoreEntityType(ctx, "entity", &vertex.AiFeatureStoreEntityTypeArgs{
			Name: pulumi.String("terraform"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Description:  pulumi.String("test description"),
			Featurestore: featurestore.ID(),
			MonitoringConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigArgs{
				SnapshotAnalysis: &vertex.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs{
					Disabled:               pulumi.Bool(false),
					MonitoringIntervalDays: pulumi.Int(1),
					StalenessDays:          pulumi.Int(21),
				},
				NumericalThresholdConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs{
					Value: pulumi.Float64(0.8),
				},
				CategoricalThresholdConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs{
					Value: pulumi.Float64(10),
				},
				ImportFeaturesAnalysis: &vertex.AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs{
					State:                    pulumi.String("ENABLED"),
					AnomalyDetectionBaseline: pulumi.String("PREVIOUS_IMPORT_FEATURES_STATS"),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureStore;
import com.pulumi.gcp.vertex.AiFeatureStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreOnlineServingConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEncryptionSpecArgs;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityType;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityTypeArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featurestore = new AiFeatureStore("featurestore", AiFeatureStoreArgs.builder()
            .name("terraform")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .onlineServingConfig(AiFeatureStoreOnlineServingConfigArgs.builder()
                .fixedNodeCount(2)
                .build())
            .encryptionSpec(AiFeatureStoreEncryptionSpecArgs.builder()
                .kmsKeyName("kms-name")
                .build())
            .build());

        var entity = new AiFeatureStoreEntityType("entity", AiFeatureStoreEntityTypeArgs.builder()
            .name("terraform")
            .labels(Map.of("foo", "bar"))
            .description("test description")
            .featurestore(featurestore.id())
            .monitoringConfig(AiFeatureStoreEntityTypeMonitoringConfigArgs.builder()
                .snapshotAnalysis(AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs.builder()
                    .disabled(false)
                    .monitoringIntervalDays(1)
                    .stalenessDays(21)
                    .build())
                .numericalThresholdConfig(AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs.builder()
                    .value(0.8)
                    .build())
                .categoricalThresholdConfig(AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs.builder()
                    .value(10)
                    .build())
                .importFeaturesAnalysis(AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs.builder()
                    .state("ENABLED")
                    .anomalyDetectionBaseline("PREVIOUS_IMPORT_FEATURES_STATS")
                    .build())
                .build())
            .build());

    }
}
```
```yaml
resources:
  featurestore:
    type: gcp:vertex:AiFeatureStore
    properties:
      name: terraform
      labels:
        foo: bar
      region: us-central1
      onlineServingConfig:
        fixedNodeCount: 2
      encryptionSpec:
        kmsKeyName: kms-name
  entity:
    type: gcp:vertex:AiFeatureStoreEntityType
    properties:
      name: terraform
      labels:
        foo: bar
      description: test description
      featurestore: ${featurestore.id}
      monitoringConfig:
        snapshotAnalysis:
          disabled: false
          monitoringIntervalDays: 1
          stalenessDays: 21
        numericalThresholdConfig:
          value: 0.8
        categoricalThresholdConfig:
          value: 10
        importFeaturesAnalysis:
          state: ENABLED
          anomalyDetectionBaseline: PREVIOUS_IMPORT_FEATURES_STATS
```
<!--End PulumiCodeChooser -->
### Vertex Ai Featurestore Entitytype With Beta Fields


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
    name: "terraform2",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    onlineServingConfig: {
        fixedNodeCount: 2,
    },
    encryptionSpec: {
        kmsKeyName: "kms-name",
    },
});
const entity = new gcp.vertex.AiFeatureStoreEntityType("entity", {
    name: "terraform2",
    labels: {
        foo: "bar",
    },
    featurestore: featurestore.id,
    monitoringConfig: {
        snapshotAnalysis: {
            disabled: false,
            monitoringInterval: "86400s",
        },
        categoricalThresholdConfig: {
            value: 0.3,
        },
        numericalThresholdConfig: {
            value: 0.3,
        },
    },
    offlineStorageTtlDays: 30,
});
```
```python
import pulumi
import pulumi_gcp as gcp

featurestore = gcp.vertex.AiFeatureStore("featurestore",
    name="terraform2",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    online_serving_config={
        "fixed_node_count": 2,
    },
    encryption_spec={
        "kms_key_name": "kms-name",
    })
entity = gcp.vertex.AiFeatureStoreEntityType("entity",
    name="terraform2",
    labels={
        "foo": "bar",
    },
    featurestore=featurestore.id,
    monitoring_config={
        "snapshot_analysis": {
            "disabled": False,
            "monitoring_interval": "86400s",
        },
        "categorical_threshold_config": {
            "value": 0.3,
        },
        "numerical_threshold_config": {
            "value": 0.3,
        },
    },
    offline_storage_ttl_days=30)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featurestore = new Gcp.Vertex.AiFeatureStore("featurestore", new()
    {
        Name = "terraform2",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        OnlineServingConfig = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigArgs
        {
            FixedNodeCount = 2,
        },
        EncryptionSpec = new Gcp.Vertex.Inputs.AiFeatureStoreEncryptionSpecArgs
        {
            KmsKeyName = "kms-name",
        },
    });

    var entity = new Gcp.Vertex.AiFeatureStoreEntityType("entity", new()
    {
        Name = "terraform2",
        Labels = 
        {
            { "foo", "bar" },
        },
        Featurestore = featurestore.Id,
        MonitoringConfig = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigArgs
        {
            SnapshotAnalysis = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs
            {
                Disabled = false,
                MonitoringInterval = "86400s",
            },
            CategoricalThresholdConfig = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs
            {
                Value = 0.3,
            },
            NumericalThresholdConfig = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs
            {
                Value = 0.3,
            },
        },
        OfflineStorageTtlDays = 30,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		featurestore, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
			Name: pulumi.String("terraform2"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
				FixedNodeCount: pulumi.Int(2),
			},
			EncryptionSpec: &vertex.AiFeatureStoreEncryptionSpecArgs{
				KmsKeyName: pulumi.String("kms-name"),
			},
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiFeatureStoreEntityType(ctx, "entity", &vertex.AiFeatureStoreEntityTypeArgs{
			Name: pulumi.String("terraform2"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Featurestore: featurestore.ID(),
			MonitoringConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigArgs{
				SnapshotAnalysis: &vertex.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs{
					Disabled:           pulumi.Bool(false),
					MonitoringInterval: pulumi.String("86400s"),
				},
				CategoricalThresholdConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs{
					Value: pulumi.Float64(0.3),
				},
				NumericalThresholdConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs{
					Value: pulumi.Float64(0.3),
				},
			},
			OfflineStorageTtlDays: pulumi.Int(30),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureStore;
import com.pulumi.gcp.vertex.AiFeatureStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreOnlineServingConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEncryptionSpecArgs;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityType;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityTypeArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featurestore = new AiFeatureStore("featurestore", AiFeatureStoreArgs.builder()
            .name("terraform2")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .onlineServingConfig(AiFeatureStoreOnlineServingConfigArgs.builder()
                .fixedNodeCount(2)
                .build())
            .encryptionSpec(AiFeatureStoreEncryptionSpecArgs.builder()
                .kmsKeyName("kms-name")
                .build())
            .build());

        var entity = new AiFeatureStoreEntityType("entity", AiFeatureStoreEntityTypeArgs.builder()
            .name("terraform2")
            .labels(Map.of("foo", "bar"))
            .featurestore(featurestore.id())
            .monitoringConfig(AiFeatureStoreEntityTypeMonitoringConfigArgs.builder()
                .snapshotAnalysis(AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs.builder()
                    .disabled(false)
                    .monitoringInterval("86400s")
                    .build())
                .categoricalThresholdConfig(AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs.builder()
                    .value(0.3)
                    .build())
                .numericalThresholdConfig(AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs.builder()
                    .value(0.3)
                    .build())
                .build())
            .offlineStorageTtlDays(30)
            .build());

    }
}
```
```yaml
resources:
  featurestore:
    type: gcp:vertex:AiFeatureStore
    properties:
      name: terraform2
      labels:
        foo: bar
      region: us-central1
      onlineServingConfig:
        fixedNodeCount: 2
      encryptionSpec:
        kmsKeyName: kms-name
  entity:
    type: gcp:vertex:AiFeatureStoreEntityType
    properties:
      name: terraform2
      labels:
        foo: bar
      featurestore: ${featurestore.id}
      monitoringConfig:
        snapshotAnalysis:
          disabled: false
          monitoringInterval: 86400s
        categoricalThresholdConfig:
          value: 0.3
        numericalThresholdConfig:
          value: 0.3
      offlineStorageTtlDays: 30
```
<!--End PulumiCodeChooser -->

## Import

FeaturestoreEntitytype can be imported using any of these accepted formats:

* `{{featurestore}}/entityTypes/{{name}}`

When using the `pulumi import` command, FeaturestoreEntitytype can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiFeatureStoreEntityType:AiFeatureStoreEntityType default {{featurestore}}/entityTypes/{{name}}
```

>
descriptionB" )Optional. Description of the EntityType.
Ц
featurestore" БThe name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.


- - -
Ч
labelsB2" ДA set of key/value label pairs to assign to this EntityType.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
╙
monitoringConfigЩBЦ:У
Р
vertex(AiFeatureStoreEntityTypeMonitoringConfig\gcp:vertex/AiFeatureStoreEntityTypeMonitoringConfig:AiFeatureStoreEntityTypeMonitoringConfigвThe default monitoring configuration for all Features under this EntityType.
If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
Structure is documented below.
Ю
nameB" ПThe name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
ь
offlineStorageTtlDaysB ╠Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline storage. The Feature Store offline storage periodically removes obsolete feature values older than offlineStorageTtlDays since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
"б

createTime" ОThe timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
">
descriptionB" )Optional. Description of the EntityType.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"B
etag" 6Used to perform consistent read-modify-write updates.
"Ц
featurestore" БThe name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.


- - -
"Ч
labelsB2" ДA set of key/value label pairs to assign to this EntityType.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"╙
monitoringConfigЩBЦ:У
Р
vertex(AiFeatureStoreEntityTypeMonitoringConfig\gcp:vertex/AiFeatureStoreEntityTypeMonitoringConfig:AiFeatureStoreEntityTypeMonitoringConfigвThe default monitoring configuration for all Features under this EntityType.
If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
Structure is documented below.
"Ь
name" ПThe name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
"ь
offlineStorageTtlDaysB ╠Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline storage. The Feature Store offline storage periodically removes obsolete feature values older than offlineStorageTtlDays since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
",
region" The region of the EntityType.
"ж

updateTime" УThe timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
*─Т
u
vertexAiFeatureStoreEntityTypeFeatureJgcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeatureФ}Feature Metadata information that describes an attribute of an entity type. For example, apple is an entity type, and color is a feature that describes apple.


To get more information about FeaturestoreEntitytypeFeature, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/vertex-ai/docs)

## Example Usage

### Vertex Ai Featurestore Entitytype Feature


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
    name: "terraform",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    onlineServingConfig: {
        fixedNodeCount: 2,
    },
});
const entity = new gcp.vertex.AiFeatureStoreEntityType("entity", {
    name: "terraform",
    labels: {
        foo: "bar",
    },
    featurestore: featurestore.id,
});
const feature = new gcp.vertex.AiFeatureStoreEntityTypeFeature("feature", {
    name: "terraform",
    labels: {
        foo: "bar",
    },
    entitytype: entity.id,
    valueType: "INT64_ARRAY",
});
```
```python
import pulumi
import pulumi_gcp as gcp

featurestore = gcp.vertex.AiFeatureStore("featurestore",
    name="terraform",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    online_serving_config={
        "fixed_node_count": 2,
    })
entity = gcp.vertex.AiFeatureStoreEntityType("entity",
    name="terraform",
    labels={
        "foo": "bar",
    },
    featurestore=featurestore.id)
feature = gcp.vertex.AiFeatureStoreEntityTypeFeature("feature",
    name="terraform",
    labels={
        "foo": "bar",
    },
    entitytype=entity.id,
    value_type="INT64_ARRAY")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featurestore = new Gcp.Vertex.AiFeatureStore("featurestore", new()
    {
        Name = "terraform",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        OnlineServingConfig = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigArgs
        {
            FixedNodeCount = 2,
        },
    });

    var entity = new Gcp.Vertex.AiFeatureStoreEntityType("entity", new()
    {
        Name = "terraform",
        Labels = 
        {
            { "foo", "bar" },
        },
        Featurestore = featurestore.Id,
    });

    var feature = new Gcp.Vertex.AiFeatureStoreEntityTypeFeature("feature", new()
    {
        Name = "terraform",
        Labels = 
        {
            { "foo", "bar" },
        },
        Entitytype = entity.Id,
        ValueType = "INT64_ARRAY",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		featurestore, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
			Name: pulumi.String("terraform"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
				FixedNodeCount: pulumi.Int(2),
			},
		})
		if err != nil {
			return err
		}
		entity, err := vertex.NewAiFeatureStoreEntityType(ctx, "entity", &vertex.AiFeatureStoreEntityTypeArgs{
			Name: pulumi.String("terraform"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Featurestore: featurestore.ID(),
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiFeatureStoreEntityTypeFeature(ctx, "feature", &vertex.AiFeatureStoreEntityTypeFeatureArgs{
			Name: pulumi.String("terraform"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Entitytype: entity.ID(),
			ValueType:  pulumi.String("INT64_ARRAY"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureStore;
import com.pulumi.gcp.vertex.AiFeatureStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreOnlineServingConfigArgs;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityType;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityTypeArgs;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityTypeFeature;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityTypeFeatureArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featurestore = new AiFeatureStore("featurestore", AiFeatureStoreArgs.builder()
            .name("terraform")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .onlineServingConfig(AiFeatureStoreOnlineServingConfigArgs.builder()
                .fixedNodeCount(2)
                .build())
            .build());

        var entity = new AiFeatureStoreEntityType("entity", AiFeatureStoreEntityTypeArgs.builder()
            .name("terraform")
            .labels(Map.of("foo", "bar"))
            .featurestore(featurestore.id())
            .build());

        var feature = new AiFeatureStoreEntityTypeFeature("feature", AiFeatureStoreEntityTypeFeatureArgs.builder()
            .name("terraform")
            .labels(Map.of("foo", "bar"))
            .entitytype(entity.id())
            .valueType("INT64_ARRAY")
            .build());

    }
}
```
```yaml
resources:
  featurestore:
    type: gcp:vertex:AiFeatureStore
    properties:
      name: terraform
      labels:
        foo: bar
      region: us-central1
      onlineServingConfig:
        fixedNodeCount: 2
  entity:
    type: gcp:vertex:AiFeatureStoreEntityType
    properties:
      name: terraform
      labels:
        foo: bar
      featurestore: ${featurestore.id}
  feature:
    type: gcp:vertex:AiFeatureStoreEntityTypeFeature
    properties:
      name: terraform
      labels:
        foo: bar
      entitytype: ${entity.id}
      valueType: INT64_ARRAY
```
<!--End PulumiCodeChooser -->
### Vertex Ai Featurestore Entitytype Feature With Beta Fields


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const featurestore = new gcp.vertex.AiFeatureStore("featurestore", {
    name: "terraform2",
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    onlineServingConfig: {
        fixedNodeCount: 2,
    },
});
const entity = new gcp.vertex.AiFeatureStoreEntityType("entity", {
    name: "terraform2",
    labels: {
        foo: "bar",
    },
    featurestore: featurestore.id,
    monitoringConfig: {
        snapshotAnalysis: {
            disabled: false,
            monitoringInterval: "86400s",
        },
        categoricalThresholdConfig: {
            value: 0.3,
        },
        numericalThresholdConfig: {
            value: 0.3,
        },
    },
});
const feature = new gcp.vertex.AiFeatureStoreEntityTypeFeature("feature", {
    name: "terraform2",
    labels: {
        foo: "bar",
    },
    entitytype: entity.id,
    valueType: "INT64_ARRAY",
});
```
```python
import pulumi
import pulumi_gcp as gcp

featurestore = gcp.vertex.AiFeatureStore("featurestore",
    name="terraform2",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    online_serving_config={
        "fixed_node_count": 2,
    })
entity = gcp.vertex.AiFeatureStoreEntityType("entity",
    name="terraform2",
    labels={
        "foo": "bar",
    },
    featurestore=featurestore.id,
    monitoring_config={
        "snapshot_analysis": {
            "disabled": False,
            "monitoring_interval": "86400s",
        },
        "categorical_threshold_config": {
            "value": 0.3,
        },
        "numerical_threshold_config": {
            "value": 0.3,
        },
    })
feature = gcp.vertex.AiFeatureStoreEntityTypeFeature("feature",
    name="terraform2",
    labels={
        "foo": "bar",
    },
    entitytype=entity.id,
    value_type="INT64_ARRAY")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var featurestore = new Gcp.Vertex.AiFeatureStore("featurestore", new()
    {
        Name = "terraform2",
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        OnlineServingConfig = new Gcp.Vertex.Inputs.AiFeatureStoreOnlineServingConfigArgs
        {
            FixedNodeCount = 2,
        },
    });

    var entity = new Gcp.Vertex.AiFeatureStoreEntityType("entity", new()
    {
        Name = "terraform2",
        Labels = 
        {
            { "foo", "bar" },
        },
        Featurestore = featurestore.Id,
        MonitoringConfig = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigArgs
        {
            SnapshotAnalysis = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs
            {
                Disabled = false,
                MonitoringInterval = "86400s",
            },
            CategoricalThresholdConfig = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs
            {
                Value = 0.3,
            },
            NumericalThresholdConfig = new Gcp.Vertex.Inputs.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs
            {
                Value = 0.3,
            },
        },
    });

    var feature = new Gcp.Vertex.AiFeatureStoreEntityTypeFeature("feature", new()
    {
        Name = "terraform2",
        Labels = 
        {
            { "foo", "bar" },
        },
        Entitytype = entity.Id,
        ValueType = "INT64_ARRAY",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		featurestore, err := vertex.NewAiFeatureStore(ctx, "featurestore", &vertex.AiFeatureStoreArgs{
			Name: pulumi.String("terraform2"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region: pulumi.String("us-central1"),
			OnlineServingConfig: &vertex.AiFeatureStoreOnlineServingConfigArgs{
				FixedNodeCount: pulumi.Int(2),
			},
		})
		if err != nil {
			return err
		}
		entity, err := vertex.NewAiFeatureStoreEntityType(ctx, "entity", &vertex.AiFeatureStoreEntityTypeArgs{
			Name: pulumi.String("terraform2"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Featurestore: featurestore.ID(),
			MonitoringConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigArgs{
				SnapshotAnalysis: &vertex.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs{
					Disabled:           pulumi.Bool(false),
					MonitoringInterval: pulumi.String("86400s"),
				},
				CategoricalThresholdConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs{
					Value: pulumi.Float64(0.3),
				},
				NumericalThresholdConfig: &vertex.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs{
					Value: pulumi.Float64(0.3),
				},
			},
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiFeatureStoreEntityTypeFeature(ctx, "feature", &vertex.AiFeatureStoreEntityTypeFeatureArgs{
			Name: pulumi.String("terraform2"),
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Entitytype: entity.ID(),
			ValueType:  pulumi.String("INT64_ARRAY"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiFeatureStore;
import com.pulumi.gcp.vertex.AiFeatureStoreArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreOnlineServingConfigArgs;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityType;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityTypeArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityTypeFeature;
import com.pulumi.gcp.vertex.AiFeatureStoreEntityTypeFeatureArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var featurestore = new AiFeatureStore("featurestore", AiFeatureStoreArgs.builder()
            .name("terraform2")
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .onlineServingConfig(AiFeatureStoreOnlineServingConfigArgs.builder()
                .fixedNodeCount(2)
                .build())
            .build());

        var entity = new AiFeatureStoreEntityType("entity", AiFeatureStoreEntityTypeArgs.builder()
            .name("terraform2")
            .labels(Map.of("foo", "bar"))
            .featurestore(featurestore.id())
            .monitoringConfig(AiFeatureStoreEntityTypeMonitoringConfigArgs.builder()
                .snapshotAnalysis(AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs.builder()
                    .disabled(false)
                    .monitoringInterval("86400s")
                    .build())
                .categoricalThresholdConfig(AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs.builder()
                    .value(0.3)
                    .build())
                .numericalThresholdConfig(AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs.builder()
                    .value(0.3)
                    .build())
                .build())
            .build());

        var feature = new AiFeatureStoreEntityTypeFeature("feature", AiFeatureStoreEntityTypeFeatureArgs.builder()
            .name("terraform2")
            .labels(Map.of("foo", "bar"))
            .entitytype(entity.id())
            .valueType("INT64_ARRAY")
            .build());

    }
}
```
```yaml
resources:
  featurestore:
    type: gcp:vertex:AiFeatureStore
    properties:
      name: terraform2
      labels:
        foo: bar
      region: us-central1
      onlineServingConfig:
        fixedNodeCount: 2
  entity:
    type: gcp:vertex:AiFeatureStoreEntityType
    properties:
      name: terraform2
      labels:
        foo: bar
      featurestore: ${featurestore.id}
      monitoringConfig:
        snapshotAnalysis:
          disabled: false
          monitoringInterval: 86400s
        categoricalThresholdConfig:
          value: 0.3
        numericalThresholdConfig:
          value: 0.3
  feature:
    type: gcp:vertex:AiFeatureStoreEntityTypeFeature
    properties:
      name: terraform2
      labels:
        foo: bar
      entitytype: ${entity.id}
      valueType: INT64_ARRAY
```
<!--End PulumiCodeChooser -->

## Import

FeaturestoreEntitytypeFeature can be imported using any of these accepted formats:

* `{{entitytype}}/features/{{name}}`

When using the `pulumi import` command, FeaturestoreEntitytypeFeature can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeFeature:AiFeatureStoreEntityTypeFeature default {{entitytype}}/features/{{name}}
```

1
descriptionB" Description of the feature.
н

entitytype" ЪThe name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.


- - -
У
labelsB2" АA set of key/value label pairs to assign to the feature.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
°
nameB" щThe name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
о
	valueType" ЬType of Feature value. Immutable. https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
"а

createTime" НThe timestamp of when the entity type was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"1
descriptionB" Description of the feature.
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"н

entitytype" ЪThe name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entitytype}.


- - -
"B
etag" 6Used to perform consistent read-modify-write updates.
"У
labelsB2" АA set of key/value label pairs to assign to the feature.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"Ў
name" щThe name of the feature. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"(
region" The region of the feature
"л

updateTime" ШThe timestamp when the entity type was most recently updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"о
	valueType" ЬType of Feature value. Immutable. https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features#ValueType
*ш*
~
vertex"AiFeatureStoreEntityTypeIamBindingPgcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBindingР

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* {{featurestore}}/entityTypes/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Vertex AI featurestoreentitytype IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding editor "{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding editor "{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamBinding:AiFeatureStoreEntityTypeIamBinding editor {{featurestore}}/entityTypes/{{featurestore_entitytype}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

░
	conditionвBЯ:Ь
Щ
vertex+AiFeatureStoreEntityTypeIamBindingConditionbgcp:vertex/AiFeatureStoreEntityTypeIamBindingCondition:AiFeatureStoreEntityTypeIamBindingConditionM

entitytype" ;Used to find the parent resource to bind the IAM policy to
╔
featurestore" ┤The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
ц
role" ┘The role that should be applied. Only one
`gcp.vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"░
	conditionвBЯ:Ь
Щ
vertex+AiFeatureStoreEntityTypeIamBindingConditionbgcp:vertex/AiFeatureStoreEntityTypeIamBindingCondition:AiFeatureStoreEntityTypeIamBindingCondition"M

entitytype" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"╔
featurestore" ┤The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
"╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"ц
role" ┘The role that should be applied. Only one
`gcp.vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*╙*
{
vertex!AiFeatureStoreEntityTypeIamMemberNgcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMemberК

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* {{featurestore}}/entityTypes/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Vertex AI featurestoreentitytype IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMember editor "{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMember editor "{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamMember:AiFeatureStoreEntityTypeIamMember editor {{featurestore}}/entityTypes/{{featurestore_entitytype}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

н
	conditionЯBЬ:Щ
Ц
vertex*AiFeatureStoreEntityTypeIamMemberCondition`gcp:vertex/AiFeatureStoreEntityTypeIamMemberCondition:AiFeatureStoreEntityTypeIamMemberConditionM

entitytype" ;Used to find the parent resource to bind the IAM policy to
╔
featurestore" ┤The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
ц
role" ┘The role that should be applied. Only one
`gcp.vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"н
	conditionЯBЬ:Щ
Ц
vertex*AiFeatureStoreEntityTypeIamMemberCondition`gcp:vertex/AiFeatureStoreEntityTypeIamMemberCondition:AiFeatureStoreEntityTypeIamMemberCondition"M

entitytype" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"╔
featurestore" ┤The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
"╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"ц
role" ┘The role that should be applied. Only one
`gcp.vertex.AiFeatureStoreEntityTypeIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*╖
{
vertex!AiFeatureStoreEntityTypeIamPolicyNgcp:vertex/aiFeatureStoreEntityTypeIamPolicy:AiFeatureStoreEntityTypeIamPolicyК

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* {{featurestore}}/entityTypes/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Vertex AI featurestoreentitytype IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamPolicy:AiFeatureStoreEntityTypeIamPolicy editor "{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamPolicy:AiFeatureStoreEntityTypeIamPolicy editor "{{featurestore}}/entityTypes/{{featurestore_entitytype}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreEntityTypeIamPolicy:AiFeatureStoreEntityTypeIamPolicy editor {{featurestore}}/entityTypes/{{featurestore_entitytype}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

M

entitytype" ;Used to find the parent resource to bind the IAM policy to
╔
featurestore" ┤The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"M

entitytype" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"╔
featurestore" ┤The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
*▀0
`
vertexAiFeatureStoreIamBinding<gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding╧

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{region}}/featurestores/{{name}}

* {{project}}/{{region}}/{{name}}

* {{region}}/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Vertex AI featurestore IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding editor "projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding editor "projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreIamBinding:AiFeatureStoreIamBinding editor projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

П
	conditionБB:}
{
vertex!AiFeatureStoreIamBindingConditionNgcp:vertex/AiFeatureStoreIamBindingCondition:AiFeatureStoreIamBindingConditionO
featurestore" ;Used to find the parent resource to bind the IAM policy to
╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
У
projectB" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
╔
regionB" ╕The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
▄
role" ╧The role that should be applied. Only one
`gcp.vertex.AiFeatureStoreIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"П
	conditionБB:}
{
vertex!AiFeatureStoreIamBindingConditionNgcp:vertex/AiFeatureStoreIamBindingCondition:AiFeatureStoreIamBindingCondition"3
etag" '(Computed) The etag of the IAM policy.
"O
featurestore" ;Used to find the parent resource to bind the IAM policy to
"╓	
members*" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"С
project" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"╟
region" ╕The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
"▄
role" ╧The role that should be applied. Only one
`gcp.vertex.AiFeatureStoreIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*╚0
]
vertexAiFeatureStoreIamMember:gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember╔

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{region}}/featurestores/{{name}}

* {{project}}/{{region}}/{{name}}

* {{region}}/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Vertex AI featurestore IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember editor "projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember editor "projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreIamMember:AiFeatureStoreIamMember editor projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

Л
	condition~B|:z
x
vertex AiFeatureStoreIamMemberConditionLgcp:vertex/AiFeatureStoreIamMemberCondition:AiFeatureStoreIamMemberConditionO
featurestore" ;Used to find the parent resource to bind the IAM policy to
╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
У
projectB" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
╔
regionB" ╕The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
▄
role" ╧The role that should be applied. Only one
`gcp.vertex.AiFeatureStoreIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
"Л
	condition~B|:z
x
vertex AiFeatureStoreIamMemberConditionLgcp:vertex/AiFeatureStoreIamMemberCondition:AiFeatureStoreIamMemberCondition"3
etag" '(Computed) The etag of the IAM policy.
"O
featurestore" ;Used to find the parent resource to bind the IAM policy to
"╙	
member" ─	Identities that will be granted the privilege in `role`.
Each entry can have one of the following values:
* **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
* **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
* **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
* **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
* **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
* **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
* **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
* **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
* **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"
"С
project" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"╟
region" ╕The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
"▄
role" ╧The role that should be applied. Only one
`gcp.vertex.AiFeatureStoreIamBinding` can be used per role. Note that custom roles must be of the format
`[projects|organizations]/{parent-name}/roles/{role-name}`.
*Д
]
vertexAiFeatureStoreIamPolicy:gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy╔

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{region}}/featurestores/{{name}}

* {{project}}/{{region}}/{{name}}

* {{region}}/{{name}}

* {{name}}

Any variables not passed in the import command will be taken from the provider configuration.

Vertex AI featurestore IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy editor "projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy editor "projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```sh
$ pulumi import gcp:vertex/aiFeatureStoreIamPolicy:AiFeatureStoreIamPolicy editor projects/{{project}}/locations/{{region}}/featurestores/{{featurestore}}
```

-> **Custom Roles** If you're importing a IAM resource with a custom role, make sure to use the

 full name of the custom role, e.g. `[projects/my-project|organizations/my-org]/roles/my-custom-role`.

O
featurestore" ;Used to find the parent resource to bind the IAM policy to
_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
У
projectB" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
╔
regionB" ╕The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
"3
etag" '(Computed) The etag of the IAM policy.
"O
featurestore" ;Used to find the parent resource to bind the IAM policy to
"_

policyData" MThe policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"С
project" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"╟
region" ╕The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
*╢▄
-
vertexAiIndexgcp:vertex/aiIndex:AiIndex┤╜A representation of a collection of database items organized in a way that allows for approximate nearest neighbor (a.k.a ANN) algorithms search.


To get more information about Index, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes/)

## Example Usage

### Vertex Ai Index


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const bucket = new gcp.storage.Bucket("bucket", {
    name: "vertex-ai-index-test",
    location: "us-central1",
    uniformBucketLevelAccess: true,
});
// The sample data comes from the following link:
// https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
const data = new gcp.storage.BucketObject("data", {
    name: "contents/data.json",
    bucket: bucket.name,
    content: `{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
`,
});
const index = new gcp.vertex.AiIndex("index", {
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    displayName: "test-index",
    description: "index for test",
    metadata: {
        contentsDeltaUri: pulumi.interpolate`gs://${bucket.name}/contents`,
        config: {
            dimensions: 2,
            approximateNeighborsCount: 150,
            shardSize: "SHARD_SIZE_SMALL",
            distanceMeasureType: "DOT_PRODUCT_DISTANCE",
            algorithmConfig: {
                treeAhConfig: {
                    leafNodeEmbeddingCount: 500,
                    leafNodesToSearchPercent: 7,
                },
            },
        },
    },
    indexUpdateMethod: "BATCH_UPDATE",
});
```
```python
import pulumi
import pulumi_gcp as gcp

bucket = gcp.storage.Bucket("bucket",
    name="vertex-ai-index-test",
    location="us-central1",
    uniform_bucket_level_access=True)
# The sample data comes from the following link:
# https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
data = gcp.storage.BucketObject("data",
    name="contents/data.json",
    bucket=bucket.name,
    content="""{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
""")
index = gcp.vertex.AiIndex("index",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    display_name="test-index",
    description="index for test",
    metadata={
        "contents_delta_uri": bucket.name.apply(lambda name: f"gs://{name}/contents"),
        "config": {
            "dimensions": 2,
            "approximate_neighbors_count": 150,
            "shard_size": "SHARD_SIZE_SMALL",
            "distance_measure_type": "DOT_PRODUCT_DISTANCE",
            "algorithm_config": {
                "tree_ah_config": {
                    "leaf_node_embedding_count": 500,
                    "leaf_nodes_to_search_percent": 7,
                },
            },
        },
    },
    index_update_method="BATCH_UPDATE")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "vertex-ai-index-test",
        Location = "us-central1",
        UniformBucketLevelAccess = true,
    });

    // The sample data comes from the following link:
    // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
    var data = new Gcp.Storage.BucketObject("data", new()
    {
        Name = "contents/data.json",
        Bucket = bucket.Name,
        Content = @"{""id"": ""42"", ""embedding"": [0.5, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""cat"", ""pet""]},{""namespace"": ""category"", ""allow"": [""feline""]}]}
{""id"": ""43"", ""embedding"": [0.6, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""dog"", ""pet""]},{""namespace"": ""category"", ""allow"": [""canine""]}]}
",
    });

    var index = new Gcp.Vertex.AiIndex("index", new()
    {
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        DisplayName = "test-index",
        Description = "index for test",
        Metadata = new Gcp.Vertex.Inputs.AiIndexMetadataArgs
        {
            ContentsDeltaUri = bucket.Name.Apply(name => $"gs://{name}/contents"),
            Config = new Gcp.Vertex.Inputs.AiIndexMetadataConfigArgs
            {
                Dimensions = 2,
                ApproximateNeighborsCount = 150,
                ShardSize = "SHARD_SIZE_SMALL",
                DistanceMeasureType = "DOT_PRODUCT_DISTANCE",
                AlgorithmConfig = new Gcp.Vertex.Inputs.AiIndexMetadataConfigAlgorithmConfigArgs
                {
                    TreeAhConfig = new Gcp.Vertex.Inputs.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs
                    {
                        LeafNodeEmbeddingCount = 500,
                        LeafNodesToSearchPercent = 7,
                    },
                },
            },
        },
        IndexUpdateMethod = "BATCH_UPDATE",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:                     pulumi.String("vertex-ai-index-test"),
			Location:                 pulumi.String("us-central1"),
			UniformBucketLevelAccess: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		// The sample data comes from the following link:
		// https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
		_, err = storage.NewBucketObject(ctx, "data", &storage.BucketObjectArgs{
			Name:    pulumi.String("contents/data.json"),
			Bucket:  bucket.Name,
			Content: pulumi.String("{\"id\": \"42\", \"embedding\": [0.5, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"cat\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"feline\"]}]}\n{\"id\": \"43\", \"embedding\": [0.6, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"dog\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"canine\"]}]}\n"),
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiIndex(ctx, "index", &vertex.AiIndexArgs{
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region:      pulumi.String("us-central1"),
			DisplayName: pulumi.String("test-index"),
			Description: pulumi.String("index for test"),
			Metadata: &vertex.AiIndexMetadataArgs{
				ContentsDeltaUri: bucket.Name.ApplyT(func(name string) (string, error) {
					return fmt.Sprintf("gs://%v/contents", name), nil
				}).(pulumi.StringOutput),
				Config: &vertex.AiIndexMetadataConfigArgs{
					Dimensions:                pulumi.Int(2),
					ApproximateNeighborsCount: pulumi.Int(150),
					ShardSize:                 pulumi.String("SHARD_SIZE_SMALL"),
					DistanceMeasureType:       pulumi.String("DOT_PRODUCT_DISTANCE"),
					AlgorithmConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigArgs{
						TreeAhConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs{
							LeafNodeEmbeddingCount:   pulumi.Int(500),
							LeafNodesToSearchPercent: pulumi.Int(7),
						},
					},
				},
			},
			IndexUpdateMethod: pulumi.String("BATCH_UPDATE"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.vertex.AiIndex;
import com.pulumi.gcp.vertex.AiIndexArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("vertex-ai-index-test")
            .location("us-central1")
            .uniformBucketLevelAccess(true)
            .build());

        // The sample data comes from the following link:
        // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
        var data = new BucketObject("data", BucketObjectArgs.builder()
            .name("contents/data.json")
            .bucket(bucket.name())
            .content("""
{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
            """)
            .build());

        var index = new AiIndex("index", AiIndexArgs.builder()
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .displayName("test-index")
            .description("index for test")
            .metadata(AiIndexMetadataArgs.builder()
                .contentsDeltaUri(bucket.name().applyValue(name -> String.format("gs://%s/contents", name)))
                .config(AiIndexMetadataConfigArgs.builder()
                    .dimensions(2)
                    .approximateNeighborsCount(150)
                    .shardSize("SHARD_SIZE_SMALL")
                    .distanceMeasureType("DOT_PRODUCT_DISTANCE")
                    .algorithmConfig(AiIndexMetadataConfigAlgorithmConfigArgs.builder()
                        .treeAhConfig(AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs.builder()
                            .leafNodeEmbeddingCount(500)
                            .leafNodesToSearchPercent(7)
                            .build())
                        .build())
                    .build())
                .build())
            .indexUpdateMethod("BATCH_UPDATE")
            .build());

    }
}
```
```yaml
resources:
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: vertex-ai-index-test
      location: us-central1
      uniformBucketLevelAccess: true
  # The sample data comes from the following link:
  # https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
  data:
    type: gcp:storage:BucketObject
    properties:
      name: contents/data.json
      bucket: ${bucket.name}
      content: |
        {"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
        {"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
  index:
    type: gcp:vertex:AiIndex
    properties:
      labels:
        foo: bar
      region: us-central1
      displayName: test-index
      description: index for test
      metadata:
        contentsDeltaUri: gs://${bucket.name}/contents
        config:
          dimensions: 2
          approximateNeighborsCount: 150
          shardSize: SHARD_SIZE_SMALL
          distanceMeasureType: DOT_PRODUCT_DISTANCE
          algorithmConfig:
            treeAhConfig:
              leafNodeEmbeddingCount: 500
              leafNodesToSearchPercent: 7
      indexUpdateMethod: BATCH_UPDATE
```
<!--End PulumiCodeChooser -->
### Vertex Ai Index Streaming


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const bucket = new gcp.storage.Bucket("bucket", {
    name: "vertex-ai-index-test",
    location: "us-central1",
    uniformBucketLevelAccess: true,
});
// The sample data comes from the following link:
// https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
const data = new gcp.storage.BucketObject("data", {
    name: "contents/data.json",
    bucket: bucket.name,
    content: `{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
`,
});
const index = new gcp.vertex.AiIndex("index", {
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    displayName: "test-index",
    description: "index for test",
    metadata: {
        contentsDeltaUri: pulumi.interpolate`gs://${bucket.name}/contents`,
        config: {
            dimensions: 2,
            shardSize: "SHARD_SIZE_LARGE",
            distanceMeasureType: "COSINE_DISTANCE",
            featureNormType: "UNIT_L2_NORM",
            algorithmConfig: {
                bruteForceConfig: {},
            },
        },
    },
    indexUpdateMethod: "STREAM_UPDATE",
});
```
```python
import pulumi
import pulumi_gcp as gcp

bucket = gcp.storage.Bucket("bucket",
    name="vertex-ai-index-test",
    location="us-central1",
    uniform_bucket_level_access=True)
# The sample data comes from the following link:
# https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
data = gcp.storage.BucketObject("data",
    name="contents/data.json",
    bucket=bucket.name,
    content="""{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
""")
index = gcp.vertex.AiIndex("index",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    display_name="test-index",
    description="index for test",
    metadata={
        "contents_delta_uri": bucket.name.apply(lambda name: f"gs://{name}/contents"),
        "config": {
            "dimensions": 2,
            "shard_size": "SHARD_SIZE_LARGE",
            "distance_measure_type": "COSINE_DISTANCE",
            "feature_norm_type": "UNIT_L2_NORM",
            "algorithm_config": {
                "brute_force_config": {},
            },
        },
    },
    index_update_method="STREAM_UPDATE")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "vertex-ai-index-test",
        Location = "us-central1",
        UniformBucketLevelAccess = true,
    });

    // The sample data comes from the following link:
    // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
    var data = new Gcp.Storage.BucketObject("data", new()
    {
        Name = "contents/data.json",
        Bucket = bucket.Name,
        Content = @"{""id"": ""42"", ""embedding"": [0.5, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""cat"", ""pet""]},{""namespace"": ""category"", ""allow"": [""feline""]}]}
{""id"": ""43"", ""embedding"": [0.6, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""dog"", ""pet""]},{""namespace"": ""category"", ""allow"": [""canine""]}]}
",
    });

    var index = new Gcp.Vertex.AiIndex("index", new()
    {
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        DisplayName = "test-index",
        Description = "index for test",
        Metadata = new Gcp.Vertex.Inputs.AiIndexMetadataArgs
        {
            ContentsDeltaUri = bucket.Name.Apply(name => $"gs://{name}/contents"),
            Config = new Gcp.Vertex.Inputs.AiIndexMetadataConfigArgs
            {
                Dimensions = 2,
                ShardSize = "SHARD_SIZE_LARGE",
                DistanceMeasureType = "COSINE_DISTANCE",
                FeatureNormType = "UNIT_L2_NORM",
                AlgorithmConfig = new Gcp.Vertex.Inputs.AiIndexMetadataConfigAlgorithmConfigArgs
                {
                    BruteForceConfig = null,
                },
            },
        },
        IndexUpdateMethod = "STREAM_UPDATE",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:                     pulumi.String("vertex-ai-index-test"),
			Location:                 pulumi.String("us-central1"),
			UniformBucketLevelAccess: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		// The sample data comes from the following link:
		// https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
		_, err = storage.NewBucketObject(ctx, "data", &storage.BucketObjectArgs{
			Name:    pulumi.String("contents/data.json"),
			Bucket:  bucket.Name,
			Content: pulumi.String("{\"id\": \"42\", \"embedding\": [0.5, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"cat\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"feline\"]}]}\n{\"id\": \"43\", \"embedding\": [0.6, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"dog\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"canine\"]}]}\n"),
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiIndex(ctx, "index", &vertex.AiIndexArgs{
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region:      pulumi.String("us-central1"),
			DisplayName: pulumi.String("test-index"),
			Description: pulumi.String("index for test"),
			Metadata: &vertex.AiIndexMetadataArgs{
				ContentsDeltaUri: bucket.Name.ApplyT(func(name string) (string, error) {
					return fmt.Sprintf("gs://%v/contents", name), nil
				}).(pulumi.StringOutput),
				Config: &vertex.AiIndexMetadataConfigArgs{
					Dimensions:          pulumi.Int(2),
					ShardSize:           pulumi.String("SHARD_SIZE_LARGE"),
					DistanceMeasureType: pulumi.String("COSINE_DISTANCE"),
					FeatureNormType:     pulumi.String("UNIT_L2_NORM"),
					AlgorithmConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigArgs{
						BruteForceConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs{},
					},
				},
			},
			IndexUpdateMethod: pulumi.String("STREAM_UPDATE"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.gcp.vertex.AiIndex;
import com.pulumi.gcp.vertex.AiIndexArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("vertex-ai-index-test")
            .location("us-central1")
            .uniformBucketLevelAccess(true)
            .build());

        // The sample data comes from the following link:
        // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
        var data = new BucketObject("data", BucketObjectArgs.builder()
            .name("contents/data.json")
            .bucket(bucket.name())
            .content("""
{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
            """)
            .build());

        var index = new AiIndex("index", AiIndexArgs.builder()
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .displayName("test-index")
            .description("index for test")
            .metadata(AiIndexMetadataArgs.builder()
                .contentsDeltaUri(bucket.name().applyValue(name -> String.format("gs://%s/contents", name)))
                .config(AiIndexMetadataConfigArgs.builder()
                    .dimensions(2)
                    .shardSize("SHARD_SIZE_LARGE")
                    .distanceMeasureType("COSINE_DISTANCE")
                    .featureNormType("UNIT_L2_NORM")
                    .algorithmConfig(AiIndexMetadataConfigAlgorithmConfigArgs.builder()
                        .bruteForceConfig()
                        .build())
                    .build())
                .build())
            .indexUpdateMethod("STREAM_UPDATE")
            .build());

    }
}
```
```yaml
resources:
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: vertex-ai-index-test
      location: us-central1
      uniformBucketLevelAccess: true
  # The sample data comes from the following link:
  # https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
  data:
    type: gcp:storage:BucketObject
    properties:
      name: contents/data.json
      bucket: ${bucket.name}
      content: |
        {"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
        {"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
  index:
    type: gcp:vertex:AiIndex
    properties:
      labels:
        foo: bar
      region: us-central1
      displayName: test-index
      description: index for test
      metadata:
        contentsDeltaUri: gs://${bucket.name}/contents
        config:
          dimensions: 2
          shardSize: SHARD_SIZE_LARGE
          distanceMeasureType: COSINE_DISTANCE
          featureNormType: UNIT_L2_NORM
          algorithmConfig:
            bruteForceConfig: {}
      indexUpdateMethod: STREAM_UPDATE
```
<!--End PulumiCodeChooser -->

## Import

Index can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/indexes/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Index can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiIndex:AiIndex default projects/{{project}}/locations/{{region}}/indexes/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiIndex:AiIndex default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiIndex:AiIndex default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiIndex:AiIndex default {{name}}
```

3
descriptionB" The description of the Index.
Н
displayName" zThe display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.


- - -
о
indexUpdateMethodB" ТThe update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by default.
* BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update.
* STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be applied in corresponding DeployedIndexes in nearly real-time.
Щ
labelsB2" ЖThe labels with user-defined metadata to organize your Indexes.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
в
metadataKBI:G
E
vertexAiIndexMetadata*gcp:vertex/AiIndexMetadata:AiIndexMetadataIAn additional information about the Index
Structure is documented below.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
8
regionB" (The region of the index. eg us-central1
"Ъ

createTime" ЗThe timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"Ы
deployedIndexesZ*X:V
T
vertexAiIndexDeployedIndex4gcp:vertex/AiIndexDeployedIndex:AiIndexDeployedIndexлThe pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had been undeployed first.
Structure is documented below.
"3
descriptionB" The description of the Index.
"Н
displayName" zThe display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.


- - -
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"B
etag" 6Used to perform consistent read-modify-write updates.
"Ъ

indexStatsN*L:J
H
vertexAiIndexIndexStat,gcp:vertex/AiIndexIndexStat:AiIndexIndexStat<Stats of the index resource.
Structure is documented below.
"о
indexUpdateMethodB" ТThe update method to use with this Index. The value must be the followings. If not set, BATCH_UPDATE will be used by default.
* BATCH_UPDATE: user can call indexes.patch with files on Cloud Storage of datapoints to update.
* STREAM_UPDATE: user can call indexes.upsertDatapoints/DeleteDatapoints to update the Index and the updates will be applied in corresponding DeployedIndexes in nearly real-time.
"Щ
labelsB2" ЖThe labels with user-defined metadata to organize your Indexes.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"в
metadataKBI:G
E
vertexAiIndexMetadata*gcp:vertex/AiIndexMetadata:AiIndexMetadataIAn additional information about the Index
Structure is documented below.
"╫
metadataSchemaUri" ╜Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific to it. Unset if the Index does not have any additional information.
",
name"  The resource name of the Index.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"8
regionB" (The region of the index. eg us-central1
"Я

updateTime" МThe timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
*а░
E
vertexAiIndexEndpoint*gcp:vertex/aiIndexEndpoint:AiIndexEndpoint╔ОAn endpoint indexes are deployed into. An index endpoint can have multiple deployed indexes.


To get more information about IndexEndpoint, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints/)

## Example Usage

### Vertex Ai Index Endpoint


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const vertexNetwork = new gcp.compute.Network("vertex_network", {name: "network-name"});
const vertexRange = new gcp.compute.GlobalAddress("vertex_range", {
    name: "address-name",
    purpose: "VPC_PEERING",
    addressType: "INTERNAL",
    prefixLength: 24,
    network: vertexNetwork.id,
});
const vertexVpcConnection = new gcp.servicenetworking.Connection("vertex_vpc_connection", {
    network: vertexNetwork.id,
    service: "servicenetworking.googleapis.com",
    reservedPeeringRanges: [vertexRange.name],
});
const project = gcp.organizations.getProject({});
const indexEndpoint = new gcp.vertex.AiIndexEndpoint("index_endpoint", {
    displayName: "sample-endpoint",
    description: "A sample vertex endpoint",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    network: pulumi.all([project, vertexNetwork.name]).apply(([project, name]) => `projects/${project.number}/global/networks/${name}`),
}, {
    dependsOn: [vertexVpcConnection],
});
```
```python
import pulumi
import pulumi_gcp as gcp

vertex_network = gcp.compute.Network("vertex_network", name="network-name")
vertex_range = gcp.compute.GlobalAddress("vertex_range",
    name="address-name",
    purpose="VPC_PEERING",
    address_type="INTERNAL",
    prefix_length=24,
    network=vertex_network.id)
vertex_vpc_connection = gcp.servicenetworking.Connection("vertex_vpc_connection",
    network=vertex_network.id,
    service="servicenetworking.googleapis.com",
    reserved_peering_ranges=[vertex_range.name])
project = gcp.organizations.get_project()
index_endpoint = gcp.vertex.AiIndexEndpoint("index_endpoint",
    display_name="sample-endpoint",
    description="A sample vertex endpoint",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    network=vertex_network.name.apply(lambda name: f"projects/{project.number}/global/networks/{name}"),
    opts = pulumi.ResourceOptions(depends_on=[vertex_vpc_connection]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var vertexNetwork = new Gcp.Compute.Network("vertex_network", new()
    {
        Name = "network-name",
    });

    var vertexRange = new Gcp.Compute.GlobalAddress("vertex_range", new()
    {
        Name = "address-name",
        Purpose = "VPC_PEERING",
        AddressType = "INTERNAL",
        PrefixLength = 24,
        Network = vertexNetwork.Id,
    });

    var vertexVpcConnection = new Gcp.ServiceNetworking.Connection("vertex_vpc_connection", new()
    {
        Network = vertexNetwork.Id,
        Service = "servicenetworking.googleapis.com",
        ReservedPeeringRanges = new[]
        {
            vertexRange.Name,
        },
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    var indexEndpoint = new Gcp.Vertex.AiIndexEndpoint("index_endpoint", new()
    {
        DisplayName = "sample-endpoint",
        Description = "A sample vertex endpoint",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        Network = Output.Tuple(project, vertexNetwork.Name).Apply(values =>
        {
            var project = values.Item1;
            var name = values.Item2;
            return $"projects/{project.Apply(getProjectResult => getProjectResult.Number)}/global/networks/{name}";
        }),
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vertexVpcConnection,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/servicenetworking"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		vertexNetwork, err := compute.NewNetwork(ctx, "vertex_network", &compute.NetworkArgs{
			Name: pulumi.String("network-name"),
		})
		if err != nil {
			return err
		}
		vertexRange, err := compute.NewGlobalAddress(ctx, "vertex_range", &compute.GlobalAddressArgs{
			Name:         pulumi.String("address-name"),
			Purpose:      pulumi.String("VPC_PEERING"),
			AddressType:  pulumi.String("INTERNAL"),
			PrefixLength: pulumi.Int(24),
			Network:      vertexNetwork.ID(),
		})
		if err != nil {
			return err
		}
		vertexVpcConnection, err := servicenetworking.NewConnection(ctx, "vertex_vpc_connection", &servicenetworking.ConnectionArgs{
			Network: vertexNetwork.ID(),
			Service: pulumi.String("servicenetworking.googleapis.com"),
			ReservedPeeringRanges: pulumi.StringArray{
				vertexRange.Name,
			},
		})
		if err != nil {
			return err
		}
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = vertex.NewAiIndexEndpoint(ctx, "index_endpoint", &vertex.AiIndexEndpointArgs{
			DisplayName: pulumi.String("sample-endpoint"),
			Description: pulumi.String("A sample vertex endpoint"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			Network: vertexNetwork.Name.ApplyT(func(name string) (string, error) {
				return fmt.Sprintf("projects/%v/global/networks/%v", project.Number, name), nil
			}).(pulumi.StringOutput),
		}, pulumi.DependsOn([]pulumi.Resource{
			vertexVpcConnection,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.compute.Network;
import com.pulumi.gcp.compute.NetworkArgs;
import com.pulumi.gcp.compute.GlobalAddress;
import com.pulumi.gcp.compute.GlobalAddressArgs;
import com.pulumi.gcp.servicenetworking.Connection;
import com.pulumi.gcp.servicenetworking.ConnectionArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.vertex.AiIndexEndpoint;
import com.pulumi.gcp.vertex.AiIndexEndpointArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var vertexNetwork = new Network("vertexNetwork", NetworkArgs.builder()
            .name("network-name")
            .build());

        var vertexRange = new GlobalAddress("vertexRange", GlobalAddressArgs.builder()
            .name("address-name")
            .purpose("VPC_PEERING")
            .addressType("INTERNAL")
            .prefixLength(24)
            .network(vertexNetwork.id())
            .build());

        var vertexVpcConnection = new Connection("vertexVpcConnection", ConnectionArgs.builder()
            .network(vertexNetwork.id())
            .service("servicenetworking.googleapis.com")
            .reservedPeeringRanges(vertexRange.name())
            .build());

        final var project = OrganizationsFunctions.getProject();

        var indexEndpoint = new AiIndexEndpoint("indexEndpoint", AiIndexEndpointArgs.builder()
            .displayName("sample-endpoint")
            .description("A sample vertex endpoint")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .network(vertexNetwork.name().applyValue(name -> String.format("projects/%s/global/networks/%s", project.applyValue(getProjectResult -> getProjectResult.number()),name)))
            .build(), CustomResourceOptions.builder()
                .dependsOn(vertexVpcConnection)
                .build());

    }
}
```
```yaml
resources:
  indexEndpoint:
    type: gcp:vertex:AiIndexEndpoint
    name: index_endpoint
    properties:
      displayName: sample-endpoint
      description: A sample vertex endpoint
      region: us-central1
      labels:
        label-one: value-one
      network: projects/${project.number}/global/networks/${vertexNetwork.name}
    options:
      dependsOn:
        - ${vertexVpcConnection}
  vertexVpcConnection:
    type: gcp:servicenetworking:Connection
    name: vertex_vpc_connection
    properties:
      network: ${vertexNetwork.id}
      service: servicenetworking.googleapis.com
      reservedPeeringRanges:
        - ${vertexRange.name}
  vertexRange:
    type: gcp:compute:GlobalAddress
    name: vertex_range
    properties:
      name: address-name
      purpose: VPC_PEERING
      addressType: INTERNAL
      prefixLength: 24
      network: ${vertexNetwork.id}
  vertexNetwork:
    type: gcp:compute:Network
    name: vertex_network
    properties:
      name: network-name
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Vertex Ai Index Endpoint With Psc


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const indexEndpoint = new gcp.vertex.AiIndexEndpoint("index_endpoint", {
    displayName: "sample-endpoint",
    description: "A sample vertex endpoint",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    privateServiceConnectConfig: {
        enablePrivateServiceConnect: true,
        projectAllowlists: [project.then(project => project.name)],
    },
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
index_endpoint = gcp.vertex.AiIndexEndpoint("index_endpoint",
    display_name="sample-endpoint",
    description="A sample vertex endpoint",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    private_service_connect_config={
        "enable_private_service_connect": True,
        "project_allowlists": [project.name],
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var indexEndpoint = new Gcp.Vertex.AiIndexEndpoint("index_endpoint", new()
    {
        DisplayName = "sample-endpoint",
        Description = "A sample vertex endpoint",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        PrivateServiceConnectConfig = new Gcp.Vertex.Inputs.AiIndexEndpointPrivateServiceConnectConfigArgs
        {
            EnablePrivateServiceConnect = true,
            ProjectAllowlists = new[]
            {
                project.Apply(getProjectResult => getProjectResult.Name),
            },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = vertex.NewAiIndexEndpoint(ctx, "index_endpoint", &vertex.AiIndexEndpointArgs{
			DisplayName: pulumi.String("sample-endpoint"),
			Description: pulumi.String("A sample vertex endpoint"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			PrivateServiceConnectConfig: &vertex.AiIndexEndpointPrivateServiceConnectConfigArgs{
				EnablePrivateServiceConnect: pulumi.Bool(true),
				ProjectAllowlists: pulumi.StringArray{
					pulumi.String(project.Name),
				},
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.vertex.AiIndexEndpoint;
import com.pulumi.gcp.vertex.AiIndexEndpointArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexEndpointPrivateServiceConnectConfigArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var indexEndpoint = new AiIndexEndpoint("indexEndpoint", AiIndexEndpointArgs.builder()
            .displayName("sample-endpoint")
            .description("A sample vertex endpoint")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .privateServiceConnectConfig(AiIndexEndpointPrivateServiceConnectConfigArgs.builder()
                .enablePrivateServiceConnect(true)
                .projectAllowlists(project.applyValue(getProjectResult -> getProjectResult.name()))
                .build())
            .build());

    }
}
```
```yaml
resources:
  indexEndpoint:
    type: gcp:vertex:AiIndexEndpoint
    name: index_endpoint
    properties:
      displayName: sample-endpoint
      description: A sample vertex endpoint
      region: us-central1
      labels:
        label-one: value-one
      privateServiceConnectConfig:
        enablePrivateServiceConnect: true
        projectAllowlists:
          - ${project.name}
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Vertex Ai Index Endpoint With Public Endpoint


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const indexEndpoint = new gcp.vertex.AiIndexEndpoint("index_endpoint", {
    displayName: "sample-endpoint",
    description: "A sample vertex endpoint with an public endpoint",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    publicEndpointEnabled: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

index_endpoint = gcp.vertex.AiIndexEndpoint("index_endpoint",
    display_name="sample-endpoint",
    description="A sample vertex endpoint with an public endpoint",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    public_endpoint_enabled=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var indexEndpoint = new Gcp.Vertex.AiIndexEndpoint("index_endpoint", new()
    {
        DisplayName = "sample-endpoint",
        Description = "A sample vertex endpoint with an public endpoint",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        PublicEndpointEnabled = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := vertex.NewAiIndexEndpoint(ctx, "index_endpoint", &vertex.AiIndexEndpointArgs{
			DisplayName: pulumi.String("sample-endpoint"),
			Description: pulumi.String("A sample vertex endpoint with an public endpoint"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			PublicEndpointEnabled: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiIndexEndpoint;
import com.pulumi.gcp.vertex.AiIndexEndpointArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var indexEndpoint = new AiIndexEndpoint("indexEndpoint", AiIndexEndpointArgs.builder()
            .displayName("sample-endpoint")
            .description("A sample vertex endpoint with an public endpoint")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .publicEndpointEnabled(true)
            .build());

    }
}
```
```yaml
resources:
  indexEndpoint:
    type: gcp:vertex:AiIndexEndpoint
    name: index_endpoint
    properties:
      displayName: sample-endpoint
      description: A sample vertex endpoint with an public endpoint
      region: us-central1
      labels:
        label-one: value-one
      publicEndpointEnabled: true
```
<!--End PulumiCodeChooser -->

## Import

IndexEndpoint can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/indexEndpoints/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, IndexEndpoint can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiIndexEndpoint:AiIndexEndpoint default projects/{{project}}/locations/{{region}}/indexEndpoints/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiIndexEndpoint:AiIndexEndpoint default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiIndexEndpoint:AiIndexEndpoint default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiIndexEndpoint:AiIndexEndpoint default {{name}}
```

3
descriptionB" The description of the Index.
Н
displayName" zThe display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.


- - -
Щ
labelsB2" ЖThe labels with user-defined metadata to organize your Indexes.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
г
networkB" СThe full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the index endpoint should be peered.
Private services access must already be configured for the network. If left unspecified, the index endpoint is not peered with any network.
[Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`.
Where `{project}` is a project number, as in `12345`, and `{network}` is network name.
┌
privateServiceConnectConfigЯBЬ:Щ
Ц
vertex*AiIndexEndpointPrivateServiceConnectConfig`gcp:vertex/AiIndexEndpointPrivateServiceConnectConfig:AiIndexEndpointPrivateServiceConnectConfigШOptional. Configuration for private service connect. `network` and `privateServiceConnectConfig` are mutually exclusive.
Structure is documented below.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
g
publicEndpointEnabledB
 HIf true, the deployed index will be accessible through public endpoint.
A
regionB" 1The region of the index endpoint. eg us-central1
"Ъ

createTime" ЗThe timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"3
descriptionB" The description of the Index.
"Н
displayName" zThe display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.


- - -
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"B
etag" 6Used to perform consistent read-modify-write updates.
"Щ
labelsB2" ЖThe labels with user-defined metadata to organize your Indexes.
**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
",
name"  The resource name of the Index.
"г
networkB" СThe full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the index endpoint should be peered.
Private services access must already be configured for the network. If left unspecified, the index endpoint is not peered with any network.
[Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`.
Where `{project}` is a project number, as in `12345`, and `{network}` is network name.
"╫
privateServiceConnectConfigЬ:Щ
Ц
vertex*AiIndexEndpointPrivateServiceConnectConfig`gcp:vertex/AiIndexEndpointPrivateServiceConnectConfig:AiIndexEndpointPrivateServiceConnectConfigШOptional. Configuration for private service connect. `network` and `privateServiceConnectConfig` are mutually exclusive.
Structure is documented below.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Ф
publicEndpointDomainName" tIf publicEndpointEnabled is true, this field will be populated with the domain name to use for this index endpoint.
"g
publicEndpointEnabledB
 HIf true, the deployed index will be accessible through public endpoint.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"A
regionB" 1The region of the index endpoint. eg us-central1
"Я

updateTime" МThe timestamp of when the Index was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
*╓╣
l
vertexAiIndexEndpointDeployedIndexDgcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex■ьAn endpoint indexes are deployed into. An index endpoint can have multiple deployed indexes.


To get more information about IndexEndpointDeployedIndex, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex)

## Example Usage

### Vertex Ai Index Endpoint Deployed Index Basic


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {accountId: "vertex-sa"});
const bucket = new gcp.storage.Bucket("bucket", {
    name: "bucket-name",
    location: "us-central1",
    uniformBucketLevelAccess: true,
});
const index = new gcp.vertex.AiIndex("index", {
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    displayName: "test-index",
    description: "index for test",
    metadata: {
        contentsDeltaUri: pulumi.interpolate`gs://${bucket.name}/contents`,
        config: {
            dimensions: 2,
            approximateNeighborsCount: 150,
            shardSize: "SHARD_SIZE_SMALL",
            distanceMeasureType: "DOT_PRODUCT_DISTANCE",
            algorithmConfig: {
                treeAhConfig: {
                    leafNodeEmbeddingCount: 500,
                    leafNodesToSearchPercent: 7,
                },
            },
        },
    },
    indexUpdateMethod: "BATCH_UPDATE",
});
const vertexNetwork = gcp.compute.getNetwork({
    name: "network-name",
});
const project = gcp.organizations.getProject({});
const vertexIndexEndpointDeployed = new gcp.vertex.AiIndexEndpoint("vertex_index_endpoint_deployed", {
    displayName: "sample-endpoint",
    description: "A sample vertex endpoint",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    network: Promise.all([project, vertexNetwork]).then(([project, vertexNetwork]) => `projects/${project.number}/global/networks/${vertexNetwork.name}`),
});
const basicDeployedIndex = new gcp.vertex.AiIndexEndpointDeployedIndex("basic_deployed_index", {
    indexEndpoint: vertexIndexEndpointDeployed.id,
    index: index.id,
    deployedIndexId: "deployed_index_id",
    reservedIpRanges: ["vertex-ai-range"],
    enableAccessLogging: false,
    displayName: "vertex-deployed-index",
    deployedIndexAuthConfig: {
        authProvider: {
            audiences: ["123456-my-app"],
            allowedIssuers: [sa.email],
        },
    },
}, {
    dependsOn: [
        vertexIndexEndpointDeployed,
        sa,
    ],
});
// The sample data comes from the following link:
// https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
const data = new gcp.storage.BucketObject("data", {
    name: "contents/data.json",
    bucket: bucket.name,
    content: `{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
`,
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa", account_id="vertex-sa")
bucket = gcp.storage.Bucket("bucket",
    name="bucket-name",
    location="us-central1",
    uniform_bucket_level_access=True)
index = gcp.vertex.AiIndex("index",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    display_name="test-index",
    description="index for test",
    metadata={
        "contents_delta_uri": bucket.name.apply(lambda name: f"gs://{name}/contents"),
        "config": {
            "dimensions": 2,
            "approximate_neighbors_count": 150,
            "shard_size": "SHARD_SIZE_SMALL",
            "distance_measure_type": "DOT_PRODUCT_DISTANCE",
            "algorithm_config": {
                "tree_ah_config": {
                    "leaf_node_embedding_count": 500,
                    "leaf_nodes_to_search_percent": 7,
                },
            },
        },
    },
    index_update_method="BATCH_UPDATE")
vertex_network = gcp.compute.get_network(name="network-name")
project = gcp.organizations.get_project()
vertex_index_endpoint_deployed = gcp.vertex.AiIndexEndpoint("vertex_index_endpoint_deployed",
    display_name="sample-endpoint",
    description="A sample vertex endpoint",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    network=f"projects/{project.number}/global/networks/{vertex_network.name}")
basic_deployed_index = gcp.vertex.AiIndexEndpointDeployedIndex("basic_deployed_index",
    index_endpoint=vertex_index_endpoint_deployed.id,
    index=index.id,
    deployed_index_id="deployed_index_id",
    reserved_ip_ranges=["vertex-ai-range"],
    enable_access_logging=False,
    display_name="vertex-deployed-index",
    deployed_index_auth_config={
        "auth_provider": {
            "audiences": ["123456-my-app"],
            "allowed_issuers": [sa.email],
        },
    },
    opts = pulumi.ResourceOptions(depends_on=[
            vertex_index_endpoint_deployed,
            sa,
        ]))
# The sample data comes from the following link:
# https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
data = gcp.storage.BucketObject("data",
    name="contents/data.json",
    bucket=bucket.name,
    content="""{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
""")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "vertex-sa",
    });

    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "bucket-name",
        Location = "us-central1",
        UniformBucketLevelAccess = true,
    });

    var index = new Gcp.Vertex.AiIndex("index", new()
    {
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        DisplayName = "test-index",
        Description = "index for test",
        Metadata = new Gcp.Vertex.Inputs.AiIndexMetadataArgs
        {
            ContentsDeltaUri = bucket.Name.Apply(name => $"gs://{name}/contents"),
            Config = new Gcp.Vertex.Inputs.AiIndexMetadataConfigArgs
            {
                Dimensions = 2,
                ApproximateNeighborsCount = 150,
                ShardSize = "SHARD_SIZE_SMALL",
                DistanceMeasureType = "DOT_PRODUCT_DISTANCE",
                AlgorithmConfig = new Gcp.Vertex.Inputs.AiIndexMetadataConfigAlgorithmConfigArgs
                {
                    TreeAhConfig = new Gcp.Vertex.Inputs.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs
                    {
                        LeafNodeEmbeddingCount = 500,
                        LeafNodesToSearchPercent = 7,
                    },
                },
            },
        },
        IndexUpdateMethod = "BATCH_UPDATE",
    });

    var vertexNetwork = Gcp.Compute.GetNetwork.Invoke(new()
    {
        Name = "network-name",
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    var vertexIndexEndpointDeployed = new Gcp.Vertex.AiIndexEndpoint("vertex_index_endpoint_deployed", new()
    {
        DisplayName = "sample-endpoint",
        Description = "A sample vertex endpoint",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        Network = Output.Tuple(project, vertexNetwork).Apply(values =>
        {
            var project = values.Item1;
            var vertexNetwork = values.Item2;
            return $"projects/{project.Apply(getProjectResult => getProjectResult.Number)}/global/networks/{vertexNetwork.Apply(getNetworkResult => getNetworkResult.Name)}";
        }),
    });

    var basicDeployedIndex = new Gcp.Vertex.AiIndexEndpointDeployedIndex("basic_deployed_index", new()
    {
        IndexEndpoint = vertexIndexEndpointDeployed.Id,
        Index = index.Id,
        DeployedIndexId = "deployed_index_id",
        ReservedIpRanges = new[]
        {
            "vertex-ai-range",
        },
        EnableAccessLogging = false,
        DisplayName = "vertex-deployed-index",
        DeployedIndexAuthConfig = new Gcp.Vertex.Inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs
        {
            AuthProvider = new Gcp.Vertex.Inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs
            {
                Audiences = new[]
                {
                    "123456-my-app",
                },
                AllowedIssuers = new[]
                {
                    sa.Email,
                },
            },
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vertexIndexEndpointDeployed,
            sa,
        },
    });

    // The sample data comes from the following link:
    // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
    var data = new Gcp.Storage.BucketObject("data", new()
    {
        Name = "contents/data.json",
        Bucket = bucket.Name,
        Content = @"{""id"": ""42"", ""embedding"": [0.5, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""cat"", ""pet""]},{""namespace"": ""category"", ""allow"": [""feline""]}]}
{""id"": ""43"", ""embedding"": [0.6, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""dog"", ""pet""]},{""namespace"": ""category"", ""allow"": [""canine""]}]}
",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId: pulumi.String("vertex-sa"),
		})
		if err != nil {
			return err
		}
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:                     pulumi.String("bucket-name"),
			Location:                 pulumi.String("us-central1"),
			UniformBucketLevelAccess: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		index, err := vertex.NewAiIndex(ctx, "index", &vertex.AiIndexArgs{
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region:      pulumi.String("us-central1"),
			DisplayName: pulumi.String("test-index"),
			Description: pulumi.String("index for test"),
			Metadata: &vertex.AiIndexMetadataArgs{
				ContentsDeltaUri: bucket.Name.ApplyT(func(name string) (string, error) {
					return fmt.Sprintf("gs://%v/contents", name), nil
				}).(pulumi.StringOutput),
				Config: &vertex.AiIndexMetadataConfigArgs{
					Dimensions:                pulumi.Int(2),
					ApproximateNeighborsCount: pulumi.Int(150),
					ShardSize:                 pulumi.String("SHARD_SIZE_SMALL"),
					DistanceMeasureType:       pulumi.String("DOT_PRODUCT_DISTANCE"),
					AlgorithmConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigArgs{
						TreeAhConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs{
							LeafNodeEmbeddingCount:   pulumi.Int(500),
							LeafNodesToSearchPercent: pulumi.Int(7),
						},
					},
				},
			},
			IndexUpdateMethod: pulumi.String("BATCH_UPDATE"),
		})
		if err != nil {
			return err
		}
		vertexNetwork, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
			Name: "network-name",
		}, nil)
		if err != nil {
			return err
		}
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		vertexIndexEndpointDeployed, err := vertex.NewAiIndexEndpoint(ctx, "vertex_index_endpoint_deployed", &vertex.AiIndexEndpointArgs{
			DisplayName: pulumi.String("sample-endpoint"),
			Description: pulumi.String("A sample vertex endpoint"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			Network: pulumi.Sprintf("projects/%v/global/networks/%v", project.Number, vertexNetwork.Name),
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiIndexEndpointDeployedIndex(ctx, "basic_deployed_index", &vertex.AiIndexEndpointDeployedIndexArgs{
			IndexEndpoint:   vertexIndexEndpointDeployed.ID(),
			Index:           index.ID(),
			DeployedIndexId: pulumi.String("deployed_index_id"),
			ReservedIpRanges: pulumi.StringArray{
				pulumi.String("vertex-ai-range"),
			},
			EnableAccessLogging: pulumi.Bool(false),
			DisplayName:         pulumi.String("vertex-deployed-index"),
			DeployedIndexAuthConfig: &vertex.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs{
				AuthProvider: &vertex.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs{
					Audiences: pulumi.StringArray{
						pulumi.String("123456-my-app"),
					},
					AllowedIssuers: pulumi.StringArray{
						sa.Email,
					},
				},
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			vertexIndexEndpointDeployed,
			sa,
		}))
		if err != nil {
			return err
		}
		// The sample data comes from the following link:
		// https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
		_, err = storage.NewBucketObject(ctx, "data", &storage.BucketObjectArgs{
			Name:    pulumi.String("contents/data.json"),
			Bucket:  bucket.Name,
			Content: pulumi.String("{\"id\": \"42\", \"embedding\": [0.5, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"cat\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"feline\"]}]}\n{\"id\": \"43\", \"embedding\": [0.6, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"dog\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"canine\"]}]}\n"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.vertex.AiIndex;
import com.pulumi.gcp.vertex.AiIndexArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs;
import com.pulumi.gcp.compute.ComputeFunctions;
import com.pulumi.gcp.compute.inputs.GetNetworkArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.vertex.AiIndexEndpoint;
import com.pulumi.gcp.vertex.AiIndexEndpointArgs;
import com.pulumi.gcp.vertex.AiIndexEndpointDeployedIndex;
import com.pulumi.gcp.vertex.AiIndexEndpointDeployedIndexArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("vertex-sa")
            .build());

        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("bucket-name")
            .location("us-central1")
            .uniformBucketLevelAccess(true)
            .build());

        var index = new AiIndex("index", AiIndexArgs.builder()
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .displayName("test-index")
            .description("index for test")
            .metadata(AiIndexMetadataArgs.builder()
                .contentsDeltaUri(bucket.name().applyValue(name -> String.format("gs://%s/contents", name)))
                .config(AiIndexMetadataConfigArgs.builder()
                    .dimensions(2)
                    .approximateNeighborsCount(150)
                    .shardSize("SHARD_SIZE_SMALL")
                    .distanceMeasureType("DOT_PRODUCT_DISTANCE")
                    .algorithmConfig(AiIndexMetadataConfigAlgorithmConfigArgs.builder()
                        .treeAhConfig(AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs.builder()
                            .leafNodeEmbeddingCount(500)
                            .leafNodesToSearchPercent(7)
                            .build())
                        .build())
                    .build())
                .build())
            .indexUpdateMethod("BATCH_UPDATE")
            .build());

        final var vertexNetwork = ComputeFunctions.getNetwork(GetNetworkArgs.builder()
            .name("network-name")
            .build());

        final var project = OrganizationsFunctions.getProject();

        var vertexIndexEndpointDeployed = new AiIndexEndpoint("vertexIndexEndpointDeployed", AiIndexEndpointArgs.builder()
            .displayName("sample-endpoint")
            .description("A sample vertex endpoint")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .network(String.format("projects/%s/global/networks/%s", project.applyValue(getProjectResult -> getProjectResult.number()),vertexNetwork.applyValue(getNetworkResult -> getNetworkResult.name())))
            .build());

        var basicDeployedIndex = new AiIndexEndpointDeployedIndex("basicDeployedIndex", AiIndexEndpointDeployedIndexArgs.builder()
            .indexEndpoint(vertexIndexEndpointDeployed.id())
            .index(index.id())
            .deployedIndexId("deployed_index_id")
            .reservedIpRanges("vertex-ai-range")
            .enableAccessLogging(false)
            .displayName("vertex-deployed-index")
            .deployedIndexAuthConfig(AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs.builder()
                .authProvider(AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs.builder()
                    .audiences("123456-my-app")
                    .allowedIssuers(sa.email())
                    .build())
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    vertexIndexEndpointDeployed,
                    sa)
                .build());

        // The sample data comes from the following link:
        // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
        var data = new BucketObject("data", BucketObjectArgs.builder()
            .name("contents/data.json")
            .bucket(bucket.name())
            .content("""
{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
            """)
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: vertex-sa
  basicDeployedIndex:
    type: gcp:vertex:AiIndexEndpointDeployedIndex
    name: basic_deployed_index
    properties:
      indexEndpoint: ${vertexIndexEndpointDeployed.id}
      index: ${index.id}
      deployedIndexId: deployed_index_id
      reservedIpRanges:
        - vertex-ai-range
      enableAccessLogging: false
      displayName: vertex-deployed-index
      deployedIndexAuthConfig:
        authProvider:
          audiences:
            - 123456-my-app
          allowedIssuers:
            - ${sa.email}
    options:
      dependsOn:
        - ${vertexIndexEndpointDeployed}
        - ${sa}
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: bucket-name
      location: us-central1
      uniformBucketLevelAccess: true
  # The sample data comes from the following link:
  # https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
  data:
    type: gcp:storage:BucketObject
    properties:
      name: contents/data.json
      bucket: ${bucket.name}
      content: |
        {"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
        {"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
  index:
    type: gcp:vertex:AiIndex
    properties:
      labels:
        foo: bar
      region: us-central1
      displayName: test-index
      description: index for test
      metadata:
        contentsDeltaUri: gs://${bucket.name}/contents
        config:
          dimensions: 2
          approximateNeighborsCount: 150
          shardSize: SHARD_SIZE_SMALL
          distanceMeasureType: DOT_PRODUCT_DISTANCE
          algorithmConfig:
            treeAhConfig:
              leafNodeEmbeddingCount: 500
              leafNodesToSearchPercent: 7
      indexUpdateMethod: BATCH_UPDATE
  vertexIndexEndpointDeployed:
    type: gcp:vertex:AiIndexEndpoint
    name: vertex_index_endpoint_deployed
    properties:
      displayName: sample-endpoint
      description: A sample vertex endpoint
      region: us-central1
      labels:
        label-one: value-one
      network: projects/${project.number}/global/networks/${vertexNetwork.name}
variables:
  vertexNetwork:
    fn::invoke:
      function: gcp:compute:getNetwork
      arguments:
        name: network-name
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->
### Vertex Ai Index Endpoint Deployed Index Basic Two


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const sa = new gcp.serviceaccount.Account("sa", {accountId: "vertex-sa"});
const bucket = new gcp.storage.Bucket("bucket", {
    name: "bucket-name",
    location: "us-central1",
    uniformBucketLevelAccess: true,
});
const index = new gcp.vertex.AiIndex("index", {
    labels: {
        foo: "bar",
    },
    region: "us-central1",
    displayName: "test-index",
    description: "index for test",
    metadata: {
        contentsDeltaUri: pulumi.interpolate`gs://${bucket.name}/contents`,
        config: {
            dimensions: 2,
            approximateNeighborsCount: 150,
            shardSize: "SHARD_SIZE_SMALL",
            distanceMeasureType: "DOT_PRODUCT_DISTANCE",
            algorithmConfig: {
                treeAhConfig: {
                    leafNodeEmbeddingCount: 500,
                    leafNodesToSearchPercent: 7,
                },
            },
        },
    },
    indexUpdateMethod: "BATCH_UPDATE",
});
const vertexNetwork = gcp.compute.getNetwork({
    name: "network-name",
});
const project = gcp.organizations.getProject({});
const vertexIndexEndpointDeployed = new gcp.vertex.AiIndexEndpoint("vertex_index_endpoint_deployed", {
    displayName: "sample-endpoint",
    description: "A sample vertex endpoint",
    region: "us-central1",
    labels: {
        "label-one": "value-one",
    },
    network: Promise.all([project, vertexNetwork]).then(([project, vertexNetwork]) => `projects/${project.number}/global/networks/${vertexNetwork.name}`),
});
const basicDeployedIndex = new gcp.vertex.AiIndexEndpointDeployedIndex("basic_deployed_index", {
    indexEndpoint: vertexIndexEndpointDeployed.id,
    index: index.id,
    deployedIndexId: "deployed_index_id",
    reservedIpRanges: ["vertex-ai-range"],
    enableAccessLogging: false,
    displayName: "vertex-deployed-index",
    deployedIndexAuthConfig: {
        authProvider: {
            audiences: ["123456-my-app"],
            allowedIssuers: [sa.email],
        },
    },
    automaticResources: {
        maxReplicaCount: 4,
    },
}, {
    dependsOn: [
        vertexIndexEndpointDeployed,
        sa,
    ],
});
// The sample data comes from the following link:
// https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
const data = new gcp.storage.BucketObject("data", {
    name: "contents/data.json",
    bucket: bucket.name,
    content: `{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
`,
});
```
```python
import pulumi
import pulumi_gcp as gcp

sa = gcp.serviceaccount.Account("sa", account_id="vertex-sa")
bucket = gcp.storage.Bucket("bucket",
    name="bucket-name",
    location="us-central1",
    uniform_bucket_level_access=True)
index = gcp.vertex.AiIndex("index",
    labels={
        "foo": "bar",
    },
    region="us-central1",
    display_name="test-index",
    description="index for test",
    metadata={
        "contents_delta_uri": bucket.name.apply(lambda name: f"gs://{name}/contents"),
        "config": {
            "dimensions": 2,
            "approximate_neighbors_count": 150,
            "shard_size": "SHARD_SIZE_SMALL",
            "distance_measure_type": "DOT_PRODUCT_DISTANCE",
            "algorithm_config": {
                "tree_ah_config": {
                    "leaf_node_embedding_count": 500,
                    "leaf_nodes_to_search_percent": 7,
                },
            },
        },
    },
    index_update_method="BATCH_UPDATE")
vertex_network = gcp.compute.get_network(name="network-name")
project = gcp.organizations.get_project()
vertex_index_endpoint_deployed = gcp.vertex.AiIndexEndpoint("vertex_index_endpoint_deployed",
    display_name="sample-endpoint",
    description="A sample vertex endpoint",
    region="us-central1",
    labels={
        "label-one": "value-one",
    },
    network=f"projects/{project.number}/global/networks/{vertex_network.name}")
basic_deployed_index = gcp.vertex.AiIndexEndpointDeployedIndex("basic_deployed_index",
    index_endpoint=vertex_index_endpoint_deployed.id,
    index=index.id,
    deployed_index_id="deployed_index_id",
    reserved_ip_ranges=["vertex-ai-range"],
    enable_access_logging=False,
    display_name="vertex-deployed-index",
    deployed_index_auth_config={
        "auth_provider": {
            "audiences": ["123456-my-app"],
            "allowed_issuers": [sa.email],
        },
    },
    automatic_resources={
        "max_replica_count": 4,
    },
    opts = pulumi.ResourceOptions(depends_on=[
            vertex_index_endpoint_deployed,
            sa,
        ]))
# The sample data comes from the following link:
# https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
data = gcp.storage.BucketObject("data",
    name="contents/data.json",
    bucket=bucket.name,
    content="""{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
""")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var sa = new Gcp.ServiceAccount.Account("sa", new()
    {
        AccountId = "vertex-sa",
    });

    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "bucket-name",
        Location = "us-central1",
        UniformBucketLevelAccess = true,
    });

    var index = new Gcp.Vertex.AiIndex("index", new()
    {
        Labels = 
        {
            { "foo", "bar" },
        },
        Region = "us-central1",
        DisplayName = "test-index",
        Description = "index for test",
        Metadata = new Gcp.Vertex.Inputs.AiIndexMetadataArgs
        {
            ContentsDeltaUri = bucket.Name.Apply(name => $"gs://{name}/contents"),
            Config = new Gcp.Vertex.Inputs.AiIndexMetadataConfigArgs
            {
                Dimensions = 2,
                ApproximateNeighborsCount = 150,
                ShardSize = "SHARD_SIZE_SMALL",
                DistanceMeasureType = "DOT_PRODUCT_DISTANCE",
                AlgorithmConfig = new Gcp.Vertex.Inputs.AiIndexMetadataConfigAlgorithmConfigArgs
                {
                    TreeAhConfig = new Gcp.Vertex.Inputs.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs
                    {
                        LeafNodeEmbeddingCount = 500,
                        LeafNodesToSearchPercent = 7,
                    },
                },
            },
        },
        IndexUpdateMethod = "BATCH_UPDATE",
    });

    var vertexNetwork = Gcp.Compute.GetNetwork.Invoke(new()
    {
        Name = "network-name",
    });

    var project = Gcp.Organizations.GetProject.Invoke();

    var vertexIndexEndpointDeployed = new Gcp.Vertex.AiIndexEndpoint("vertex_index_endpoint_deployed", new()
    {
        DisplayName = "sample-endpoint",
        Description = "A sample vertex endpoint",
        Region = "us-central1",
        Labels = 
        {
            { "label-one", "value-one" },
        },
        Network = Output.Tuple(project, vertexNetwork).Apply(values =>
        {
            var project = values.Item1;
            var vertexNetwork = values.Item2;
            return $"projects/{project.Apply(getProjectResult => getProjectResult.Number)}/global/networks/{vertexNetwork.Apply(getNetworkResult => getNetworkResult.Name)}";
        }),
    });

    var basicDeployedIndex = new Gcp.Vertex.AiIndexEndpointDeployedIndex("basic_deployed_index", new()
    {
        IndexEndpoint = vertexIndexEndpointDeployed.Id,
        Index = index.Id,
        DeployedIndexId = "deployed_index_id",
        ReservedIpRanges = new[]
        {
            "vertex-ai-range",
        },
        EnableAccessLogging = false,
        DisplayName = "vertex-deployed-index",
        DeployedIndexAuthConfig = new Gcp.Vertex.Inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs
        {
            AuthProvider = new Gcp.Vertex.Inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs
            {
                Audiences = new[]
                {
                    "123456-my-app",
                },
                AllowedIssuers = new[]
                {
                    sa.Email,
                },
            },
        },
        AutomaticResources = new Gcp.Vertex.Inputs.AiIndexEndpointDeployedIndexAutomaticResourcesArgs
        {
            MaxReplicaCount = 4,
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            vertexIndexEndpointDeployed,
            sa,
        },
    });

    // The sample data comes from the following link:
    // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
    var data = new Gcp.Storage.BucketObject("data", new()
    {
        Name = "contents/data.json",
        Bucket = bucket.Name,
        Content = @"{""id"": ""42"", ""embedding"": [0.5, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""cat"", ""pet""]},{""namespace"": ""category"", ""allow"": [""feline""]}]}
{""id"": ""43"", ""embedding"": [0.6, 1.0], ""restricts"": [{""namespace"": ""class"", ""allow"": [""dog"", ""pet""]},{""namespace"": ""category"", ""allow"": [""canine""]}]}
",
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/serviceaccount"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		sa, err := serviceaccount.NewAccount(ctx, "sa", &serviceaccount.AccountArgs{
			AccountId: pulumi.String("vertex-sa"),
		})
		if err != nil {
			return err
		}
		bucket, err := storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:                     pulumi.String("bucket-name"),
			Location:                 pulumi.String("us-central1"),
			UniformBucketLevelAccess: pulumi.Bool(true),
		})
		if err != nil {
			return err
		}
		index, err := vertex.NewAiIndex(ctx, "index", &vertex.AiIndexArgs{
			Labels: pulumi.StringMap{
				"foo": pulumi.String("bar"),
			},
			Region:      pulumi.String("us-central1"),
			DisplayName: pulumi.String("test-index"),
			Description: pulumi.String("index for test"),
			Metadata: &vertex.AiIndexMetadataArgs{
				ContentsDeltaUri: bucket.Name.ApplyT(func(name string) (string, error) {
					return fmt.Sprintf("gs://%v/contents", name), nil
				}).(pulumi.StringOutput),
				Config: &vertex.AiIndexMetadataConfigArgs{
					Dimensions:                pulumi.Int(2),
					ApproximateNeighborsCount: pulumi.Int(150),
					ShardSize:                 pulumi.String("SHARD_SIZE_SMALL"),
					DistanceMeasureType:       pulumi.String("DOT_PRODUCT_DISTANCE"),
					AlgorithmConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigArgs{
						TreeAhConfig: &vertex.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs{
							LeafNodeEmbeddingCount:   pulumi.Int(500),
							LeafNodesToSearchPercent: pulumi.Int(7),
						},
					},
				},
			},
			IndexUpdateMethod: pulumi.String("BATCH_UPDATE"),
		})
		if err != nil {
			return err
		}
		vertexNetwork, err := compute.LookupNetwork(ctx, &compute.LookupNetworkArgs{
			Name: "network-name",
		}, nil)
		if err != nil {
			return err
		}
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		vertexIndexEndpointDeployed, err := vertex.NewAiIndexEndpoint(ctx, "vertex_index_endpoint_deployed", &vertex.AiIndexEndpointArgs{
			DisplayName: pulumi.String("sample-endpoint"),
			Description: pulumi.String("A sample vertex endpoint"),
			Region:      pulumi.String("us-central1"),
			Labels: pulumi.StringMap{
				"label-one": pulumi.String("value-one"),
			},
			Network: pulumi.Sprintf("projects/%v/global/networks/%v", project.Number, vertexNetwork.Name),
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiIndexEndpointDeployedIndex(ctx, "basic_deployed_index", &vertex.AiIndexEndpointDeployedIndexArgs{
			IndexEndpoint:   vertexIndexEndpointDeployed.ID(),
			Index:           index.ID(),
			DeployedIndexId: pulumi.String("deployed_index_id"),
			ReservedIpRanges: pulumi.StringArray{
				pulumi.String("vertex-ai-range"),
			},
			EnableAccessLogging: pulumi.Bool(false),
			DisplayName:         pulumi.String("vertex-deployed-index"),
			DeployedIndexAuthConfig: &vertex.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs{
				AuthProvider: &vertex.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs{
					Audiences: pulumi.StringArray{
						pulumi.String("123456-my-app"),
					},
					AllowedIssuers: pulumi.StringArray{
						sa.Email,
					},
				},
			},
			AutomaticResources: &vertex.AiIndexEndpointDeployedIndexAutomaticResourcesArgs{
				MaxReplicaCount: pulumi.Int(4),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			vertexIndexEndpointDeployed,
			sa,
		}))
		if err != nil {
			return err
		}
		// The sample data comes from the following link:
		// https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
		_, err = storage.NewBucketObject(ctx, "data", &storage.BucketObjectArgs{
			Name:    pulumi.String("contents/data.json"),
			Bucket:  bucket.Name,
			Content: pulumi.String("{\"id\": \"42\", \"embedding\": [0.5, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"cat\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"feline\"]}]}\n{\"id\": \"43\", \"embedding\": [0.6, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"dog\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"canine\"]}]}\n"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.serviceaccount.Account;
import com.pulumi.gcp.serviceaccount.AccountArgs;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.vertex.AiIndex;
import com.pulumi.gcp.vertex.AiIndexArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs;
import com.pulumi.gcp.compute.ComputeFunctions;
import com.pulumi.gcp.compute.inputs.GetNetworkArgs;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.vertex.AiIndexEndpoint;
import com.pulumi.gcp.vertex.AiIndexEndpointArgs;
import com.pulumi.gcp.vertex.AiIndexEndpointDeployedIndex;
import com.pulumi.gcp.vertex.AiIndexEndpointDeployedIndexArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs;
import com.pulumi.gcp.vertex.inputs.AiIndexEndpointDeployedIndexAutomaticResourcesArgs;
import com.pulumi.gcp.storage.BucketObject;
import com.pulumi.gcp.storage.BucketObjectArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var sa = new Account("sa", AccountArgs.builder()
            .accountId("vertex-sa")
            .build());

        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("bucket-name")
            .location("us-central1")
            .uniformBucketLevelAccess(true)
            .build());

        var index = new AiIndex("index", AiIndexArgs.builder()
            .labels(Map.of("foo", "bar"))
            .region("us-central1")
            .displayName("test-index")
            .description("index for test")
            .metadata(AiIndexMetadataArgs.builder()
                .contentsDeltaUri(bucket.name().applyValue(name -> String.format("gs://%s/contents", name)))
                .config(AiIndexMetadataConfigArgs.builder()
                    .dimensions(2)
                    .approximateNeighborsCount(150)
                    .shardSize("SHARD_SIZE_SMALL")
                    .distanceMeasureType("DOT_PRODUCT_DISTANCE")
                    .algorithmConfig(AiIndexMetadataConfigAlgorithmConfigArgs.builder()
                        .treeAhConfig(AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs.builder()
                            .leafNodeEmbeddingCount(500)
                            .leafNodesToSearchPercent(7)
                            .build())
                        .build())
                    .build())
                .build())
            .indexUpdateMethod("BATCH_UPDATE")
            .build());

        final var vertexNetwork = ComputeFunctions.getNetwork(GetNetworkArgs.builder()
            .name("network-name")
            .build());

        final var project = OrganizationsFunctions.getProject();

        var vertexIndexEndpointDeployed = new AiIndexEndpoint("vertexIndexEndpointDeployed", AiIndexEndpointArgs.builder()
            .displayName("sample-endpoint")
            .description("A sample vertex endpoint")
            .region("us-central1")
            .labels(Map.of("label-one", "value-one"))
            .network(String.format("projects/%s/global/networks/%s", project.applyValue(getProjectResult -> getProjectResult.number()),vertexNetwork.applyValue(getNetworkResult -> getNetworkResult.name())))
            .build());

        var basicDeployedIndex = new AiIndexEndpointDeployedIndex("basicDeployedIndex", AiIndexEndpointDeployedIndexArgs.builder()
            .indexEndpoint(vertexIndexEndpointDeployed.id())
            .index(index.id())
            .deployedIndexId("deployed_index_id")
            .reservedIpRanges("vertex-ai-range")
            .enableAccessLogging(false)
            .displayName("vertex-deployed-index")
            .deployedIndexAuthConfig(AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs.builder()
                .authProvider(AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs.builder()
                    .audiences("123456-my-app")
                    .allowedIssuers(sa.email())
                    .build())
                .build())
            .automaticResources(AiIndexEndpointDeployedIndexAutomaticResourcesArgs.builder()
                .maxReplicaCount(4)
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(                
                    vertexIndexEndpointDeployed,
                    sa)
                .build());

        // The sample data comes from the following link:
        // https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
        var data = new BucketObject("data", BucketObjectArgs.builder()
            .name("contents/data.json")
            .bucket(bucket.name())
            .content("""
{"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
{"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
            """)
            .build());

    }
}
```
```yaml
resources:
  sa:
    type: gcp:serviceaccount:Account
    properties:
      accountId: vertex-sa
  basicDeployedIndex:
    type: gcp:vertex:AiIndexEndpointDeployedIndex
    name: basic_deployed_index
    properties:
      indexEndpoint: ${vertexIndexEndpointDeployed.id}
      index: ${index.id}
      deployedIndexId: deployed_index_id
      reservedIpRanges:
        - vertex-ai-range
      enableAccessLogging: false
      displayName: vertex-deployed-index
      deployedIndexAuthConfig:
        authProvider:
          audiences:
            - 123456-my-app
          allowedIssuers:
            - ${sa.email}
      automaticResources:
        maxReplicaCount: 4
    options:
      dependsOn:
        - ${vertexIndexEndpointDeployed}
        - ${sa}
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: bucket-name
      location: us-central1
      uniformBucketLevelAccess: true
  # The sample data comes from the following link:
  # https://cloud.google.com/vertex-ai/docs/matching-engine/filtering#specify-namespaces-tokens
  data:
    type: gcp:storage:BucketObject
    properties:
      name: contents/data.json
      bucket: ${bucket.name}
      content: |
        {"id": "42", "embedding": [0.5, 1.0], "restricts": [{"namespace": "class", "allow": ["cat", "pet"]},{"namespace": "category", "allow": ["feline"]}]}
        {"id": "43", "embedding": [0.6, 1.0], "restricts": [{"namespace": "class", "allow": ["dog", "pet"]},{"namespace": "category", "allow": ["canine"]}]}
  index:
    type: gcp:vertex:AiIndex
    properties:
      labels:
        foo: bar
      region: us-central1
      displayName: test-index
      description: index for test
      metadata:
        contentsDeltaUri: gs://${bucket.name}/contents
        config:
          dimensions: 2
          approximateNeighborsCount: 150
          shardSize: SHARD_SIZE_SMALL
          distanceMeasureType: DOT_PRODUCT_DISTANCE
          algorithmConfig:
            treeAhConfig:
              leafNodeEmbeddingCount: 500
              leafNodesToSearchPercent: 7
      indexUpdateMethod: BATCH_UPDATE
  vertexIndexEndpointDeployed:
    type: gcp:vertex:AiIndexEndpoint
    name: vertex_index_endpoint_deployed
    properties:
      displayName: sample-endpoint
      description: A sample vertex endpoint
      region: us-central1
      labels:
        label-one: value-one
      network: projects/${project.number}/global/networks/${vertexNetwork.name}
variables:
  vertexNetwork:
    fn::invoke:
      function: gcp:compute:getNetwork
      arguments:
        name: network-name
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

IndexEndpointDeployedIndex can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/indexEndpoints/{{index_endpoint}}/deployedIndex/{{deployed_index_id}}`

* `{{project}}/{{region}}/{{index_endpoint}}/{{deployed_index_id}}`

* `{{region}}/{{index_endpoint}}/{{deployed_index_id}}`

* `{{index_endpoint}}/{{deployed_index_id}}`

When using the `pulumi import` command, IndexEndpointDeployedIndex can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default projects/{{project}}/locations/{{region}}/indexEndpoints/{{index_endpoint}}/deployedIndex/{{deployed_index_id}}
```

```sh
$ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default {{project}}/{{region}}/{{index_endpoint}}/{{deployed_index_id}}
```

```sh
$ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default {{region}}/{{index_endpoint}}/{{deployed_index_id}}
```

```sh
$ pulumi import gcp:vertex/aiIndexEndpointDeployedIndex:AiIndexEndpointDeployedIndex default {{index_endpoint}}/{{deployed_index_id}}
```

К
automaticResourcesлBи:е
в
vertex.AiIndexEndpointDeployedIndexAutomaticResourceshgcp:vertex/AiIndexEndpointDeployedIndexAutomaticResources:AiIndexEndpointDeployedIndexAutomaticResources┼A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration.
Structure is documented below.
Д
dedicatedResourcesлBи:е
в
vertex.AiIndexEndpointDeployedIndexDedicatedResourceshgcp:vertex/AiIndexEndpointDeployedIndexDedicatedResources:AiIndexEndpointDeployedIndexDedicatedResources┐A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard.
Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard.
Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32.
n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
Structure is documented below.
╖
deployedIndexAuthConfig║B╖:┤
▒
vertex3AiIndexEndpointDeployedIndexDeployedIndexAuthConfigrgcp:vertex/AiIndexEndpointDeployedIndexDeployedIndexAuthConfig:AiIndexEndpointDeployedIndexDeployedIndexAuthConfig_If set, the authentication is enabled for the private endpoint.
Structure is documented below.
°
deployedIndexId" рThe user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
╪
deploymentGroupB" ╛The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group.
Creating deployment_groups with reserved_ip_ranges is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See the official documentation here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
Note: we only support up to 5 deployment groups (not including 'default').
З
displayNameB" rThe display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
`
enableAccessLoggingB
 CIf true, private endpoint's access logs are sent to Cloud Logging.
>
index" 1The name of the Index this is the deployment of.
а
indexEndpoint" КIdentifies the index endpoint. Must be in the format
'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'


- - -
┤
reservedIpRangesB*" ЧA list of reserved ip ranges under the VPC network that can be used for this DeployedIndex.
If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network.
The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range'].
For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
"З
automaticResourcesи:е
в
vertex.AiIndexEndpointDeployedIndexAutomaticResourceshgcp:vertex/AiIndexEndpointDeployedIndexAutomaticResources:AiIndexEndpointDeployedIndexAutomaticResources┼A description of resources that the DeployedIndex uses, which to large degree are decided by Vertex AI, and optionally allows only a modest additional configuration.
Structure is documented below.
"Ъ

createTime" ЗThe timestamp of when the Index was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"Д
dedicatedResourcesлBи:е
в
vertex.AiIndexEndpointDeployedIndexDedicatedResourceshgcp:vertex/AiIndexEndpointDeployedIndexDedicatedResources:AiIndexEndpointDeployedIndexDedicatedResources┐A description of resources that are dedicated to the DeployedIndex, and that need a higher degree of manual configuration. The field minReplicaCount must be set to a value strictly greater than 0, or else validation will fail. We don't provide SLA when minReplicaCount=1. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
Available machine types for SMALL shard: e2-standard-2 and all machine types available for MEDIUM and LARGE shard.
Available machine types for MEDIUM shard: e2-standard-16 and all machine types available for LARGE shard.
Available machine types for LARGE shard: e2-highmem-16, n2d-standard-32.
n1-standard-16 and n1-standard-32 are still available, but we recommend e2-standard-16 and e2-highmem-16 for cost efficiency.
Structure is documented below.
"╖
deployedIndexAuthConfig║B╖:┤
▒
vertex3AiIndexEndpointDeployedIndexDeployedIndexAuthConfigrgcp:vertex/AiIndexEndpointDeployedIndexDeployedIndexAuthConfig:AiIndexEndpointDeployedIndexDeployedIndexAuthConfig_If set, the authentication is enabled for the private endpoint.
Structure is documented below.
"°
deployedIndexId" рThe user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.
"╪
deploymentGroupB" ╛The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group.
Creating deployment_groups with reserved_ip_ranges is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. [See the official documentation here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#DeployedIndex.FIELDS.deployment_group).
Note: we only support up to 5 deployment groups (not including 'default').
"З
displayNameB" rThe display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
"`
enableAccessLoggingB
 CIf true, private endpoint's access logs are sent to Cloud Logging.
">
index" 1The name of the Index this is the deployment of.
"а
indexEndpoint" КIdentifies the index endpoint. Must be in the format
'projects/{{project}}/locations/{{region}}/indexEndpoints/{{indexEndpoint}}'


- - -
"╡	
indexSyncTime" Я	The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously updated in the background to reflect these changes. If this timestamp's value is at least the [Index.update_time](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexes#Index.FIELDS.update_time) of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older, then to see which updates this DeployedIndex already contains (and which it does not), one must [list](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.operations/list#google.longrunning.Operations.ListOperations) the operations that are running on the original Index. Only the successfully completed Operations with updateTime equal or before this sync time are contained in this DeployedIndex.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples:┬а"2014-10-02T15:01:23Z"┬аand┬а"2014-10-02T15:01:23.045123456Z".
"4
name" (The name of the DeployedIndex resource.
"З
privateEndpointsв*Я:Ь
Щ
vertex+AiIndexEndpointDeployedIndexPrivateEndpointbgcp:vertex/AiIndexEndpointDeployedIndexPrivateEndpoint:AiIndexEndpointDeployedIndexPrivateEndpoint═Provides paths for users to send requests directly to the deployed index services running on Cloud via private services access. This field is populated if [network](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.indexEndpoints#IndexEndpoint.FIELDS.network) is configured.
Structure is documented below.
"┤
reservedIpRangesB*" ЧA list of reserved ip ranges under the VPC network that can be used for this DeployedIndex.
If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network.
The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range'].
For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.
*▐(
E
vertexAiMetadataStore*gcp:vertex/aiMetadataStore:AiMetadataStore═## Example Usage

### Vertex Ai Metadata Store


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const store = new gcp.vertex.AiMetadataStore("store", {
    name: "test-store",
    description: "Store to test the terraform module",
    region: "us-central1",
});
```
```python
import pulumi
import pulumi_gcp as gcp

store = gcp.vertex.AiMetadataStore("store",
    name="test-store",
    description="Store to test the terraform module",
    region="us-central1")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var store = new Gcp.Vertex.AiMetadataStore("store", new()
    {
        Name = "test-store",
        Description = "Store to test the terraform module",
        Region = "us-central1",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := vertex.NewAiMetadataStore(ctx, "store", &vertex.AiMetadataStoreArgs{
			Name:        pulumi.String("test-store"),
			Description: pulumi.String("Store to test the terraform module"),
			Region:      pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiMetadataStore;
import com.pulumi.gcp.vertex.AiMetadataStoreArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var store = new AiMetadataStore("store", AiMetadataStoreArgs.builder()
            .name("test-store")
            .description("Store to test the terraform module")
            .region("us-central1")
            .build());

    }
}
```
```yaml
resources:
  store:
    type: gcp:vertex:AiMetadataStore
    properties:
      name: test-store
      description: Store to test the terraform module
      region: us-central1
```
<!--End PulumiCodeChooser -->

## Import

MetadataStore can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/metadataStores/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, MetadataStore can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiMetadataStore:AiMetadataStore default projects/{{project}}/locations/{{region}}/metadataStores/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiMetadataStore:AiMetadataStore default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiMetadataStore:AiMetadataStore default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiMetadataStore:AiMetadataStore default {{name}}
```

7
descriptionB" "Description of the MetadataStore.
╟
encryptionSpecuBs:q
o
vertexAiMetadataStoreEncryptionSpecFgcp:vertex/AiMetadataStoreEncryptionSpec:AiMetadataStoreEncryptionSpec╜Customer-managed encryption key spec for a MetadataStore. If set, this MetadataStore and all sub-resources of this MetadataStore will be secured by this key.
Structure is documented below.
б
nameB" ТThe name of the MetadataStore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
A
regionB" 1The region of the Metadata Store. eg us-central1
"в

createTime" ПThe timestamp of when the MetadataStore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"7
descriptionB" "Description of the MetadataStore.
"╟
encryptionSpecuBs:q
o
vertexAiMetadataStoreEncryptionSpecFgcp:vertex/AiMetadataStoreEncryptionSpec:AiMetadataStoreEncryptionSpec╜Customer-managed encryption key spec for a MetadataStore. If set, this MetadataStore and all sub-resources of this MetadataStore will be secured by this key.
Structure is documented below.
"Я
name" ТThe name of the MetadataStore. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"?
region" 1The region of the Metadata Store. eg us-central1
"н
statesZ*X:V
T
vertexAiMetadataStoreState4gcp:vertex/AiMetadataStoreState:AiMetadataStoreStateGState information of the MetadataStore.
Structure is documented below.
"з

updateTime" ФThe timestamp of when the MetadataStore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
*╘i
?
vertexAiTensorboard&gcp:vertex/aiTensorboard:AiTensorboard╒STensorboard is a physical database that stores users' training metrics. A default Tensorboard is provided in each region of a GCP project. If needed users can also create extra Tensorboards in their projects.


To get more information about Tensorboard, see:

* [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.tensorboards)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/vertex-ai/docs)

## Example Usage

### Vertex Ai Tensorboard


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const tensorboard = new gcp.vertex.AiTensorboard("tensorboard", {
    displayName: "terraform",
    description: "sample description",
    labels: {
        key1: "value1",
        key2: "value2",
    },
    region: "us-central1",
});
```
```python
import pulumi
import pulumi_gcp as gcp

tensorboard = gcp.vertex.AiTensorboard("tensorboard",
    display_name="terraform",
    description="sample description",
    labels={
        "key1": "value1",
        "key2": "value2",
    },
    region="us-central1")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var tensorboard = new Gcp.Vertex.AiTensorboard("tensorboard", new()
    {
        DisplayName = "terraform",
        Description = "sample description",
        Labels = 
        {
            { "key1", "value1" },
            { "key2", "value2" },
        },
        Region = "us-central1",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := vertex.NewAiTensorboard(ctx, "tensorboard", &vertex.AiTensorboardArgs{
			DisplayName: pulumi.String("terraform"),
			Description: pulumi.String("sample description"),
			Labels: pulumi.StringMap{
				"key1": pulumi.String("value1"),
				"key2": pulumi.String("value2"),
			},
			Region: pulumi.String("us-central1"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.vertex.AiTensorboard;
import com.pulumi.gcp.vertex.AiTensorboardArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        var tensorboard = new AiTensorboard("tensorboard", AiTensorboardArgs.builder()
            .displayName("terraform")
            .description("sample description")
            .labels(Map.ofEntries(
                Map.entry("key1", "value1"),
                Map.entry("key2", "value2")
            ))
            .region("us-central1")
            .build());

    }
}
```
```yaml
resources:
  tensorboard:
    type: gcp:vertex:AiTensorboard
    properties:
      displayName: terraform
      description: sample description
      labels:
        key1: value1
        key2: value2
      region: us-central1
```
<!--End PulumiCodeChooser -->
### Vertex Ai Tensorboard Full


<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const project = gcp.organizations.getProject({});
const cryptoKey = new gcp.kms.CryptoKeyIAMMember("crypto_key", {
    cryptoKeyId: "kms-name",
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member: project.then(project => `serviceAccount:service-${project.number}@gcp-sa-aiplatform.iam.gserviceaccount.com`),
});
const tensorboard = new gcp.vertex.AiTensorboard("tensorboard", {
    displayName: "terraform",
    description: "sample description",
    labels: {
        key1: "value1",
        key2: "value2",
    },
    region: "us-central1",
    encryptionSpec: {
        kmsKeyName: "kms-name",
    },
}, {
    dependsOn: [cryptoKey],
});
```
```python
import pulumi
import pulumi_gcp as gcp

project = gcp.organizations.get_project()
crypto_key = gcp.kms.CryptoKeyIAMMember("crypto_key",
    crypto_key_id="kms-name",
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    member=f"serviceAccount:service-{project.number}@gcp-sa-aiplatform.iam.gserviceaccount.com")
tensorboard = gcp.vertex.AiTensorboard("tensorboard",
    display_name="terraform",
    description="sample description",
    labels={
        "key1": "value1",
        "key2": "value2",
    },
    region="us-central1",
    encryption_spec={
        "kms_key_name": "kms-name",
    },
    opts = pulumi.ResourceOptions(depends_on=[crypto_key]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var project = Gcp.Organizations.GetProject.Invoke();

    var cryptoKey = new Gcp.Kms.CryptoKeyIAMMember("crypto_key", new()
    {
        CryptoKeyId = "kms-name",
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Member = $"serviceAccount:service-{project.Apply(getProjectResult => getProjectResult.Number)}@gcp-sa-aiplatform.iam.gserviceaccount.com",
    });

    var tensorboard = new Gcp.Vertex.AiTensorboard("tensorboard", new()
    {
        DisplayName = "terraform",
        Description = "sample description",
        Labels = 
        {
            { "key1", "value1" },
            { "key2", "value2" },
        },
        Region = "us-central1",
        EncryptionSpec = new Gcp.Vertex.Inputs.AiTensorboardEncryptionSpecArgs
        {
            KmsKeyName = "kms-name",
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            cryptoKey,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/organizations"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/vertex"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		project, err := organizations.LookupProject(ctx, &organizations.LookupProjectArgs{}, nil)
		if err != nil {
			return err
		}
		cryptoKey, err := kms.NewCryptoKeyIAMMember(ctx, "crypto_key", &kms.CryptoKeyIAMMemberArgs{
			CryptoKeyId: pulumi.String("kms-name"),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Member:      pulumi.Sprintf("serviceAccount:service-%v@gcp-sa-aiplatform.iam.gserviceaccount.com", project.Number),
		})
		if err != nil {
			return err
		}
		_, err = vertex.NewAiTensorboard(ctx, "tensorboard", &vertex.AiTensorboardArgs{
			DisplayName: pulumi.String("terraform"),
			Description: pulumi.String("sample description"),
			Labels: pulumi.StringMap{
				"key1": pulumi.String("value1"),
				"key2": pulumi.String("value2"),
			},
			Region: pulumi.String("us-central1"),
			EncryptionSpec: &vertex.AiTensorboardEncryptionSpecArgs{
				KmsKeyName: pulumi.String("kms-name"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			cryptoKey,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.organizations.OrganizationsFunctions;
import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMMember;
import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
import com.pulumi.gcp.vertex.AiTensorboard;
import com.pulumi.gcp.vertex.AiTensorboardArgs;
import com.pulumi.gcp.vertex.inputs.AiTensorboardEncryptionSpecArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var project = OrganizationsFunctions.getProject();

        var cryptoKey = new CryptoKeyIAMMember("cryptoKey", CryptoKeyIAMMemberArgs.builder()
            .cryptoKeyId("kms-name")
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .member(String.format("serviceAccount:service-%s@gcp-sa-aiplatform.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
            .build());

        var tensorboard = new AiTensorboard("tensorboard", AiTensorboardArgs.builder()
            .displayName("terraform")
            .description("sample description")
            .labels(Map.ofEntries(
                Map.entry("key1", "value1"),
                Map.entry("key2", "value2")
            ))
            .region("us-central1")
            .encryptionSpec(AiTensorboardEncryptionSpecArgs.builder()
                .kmsKeyName("kms-name")
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(cryptoKey)
                .build());

    }
}
```
```yaml
resources:
  tensorboard:
    type: gcp:vertex:AiTensorboard
    properties:
      displayName: terraform
      description: sample description
      labels:
        key1: value1
        key2: value2
      region: us-central1
      encryptionSpec:
        kmsKeyName: kms-name
    options:
      dependsOn:
        - ${cryptoKey}
  cryptoKey:
    type: gcp:kms:CryptoKeyIAMMember
    name: crypto_key
    properties:
      cryptoKeyId: kms-name
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      member: serviceAccount:service-${project.number}@gcp-sa-aiplatform.iam.gserviceaccount.com
variables:
  project:
    fn::invoke:
      function: gcp:organizations:getProject
      arguments: {}
```
<!--End PulumiCodeChooser -->

## Import

Tensorboard can be imported using any of these accepted formats:

* `projects/{{project}}/locations/{{region}}/tensorboards/{{name}}`

* `{{project}}/{{region}}/{{name}}`

* `{{region}}/{{name}}`

* `{{name}}`

When using the `pulumi import` command, Tensorboard can be imported using one of the formats above. For example:

```sh
$ pulumi import gcp:vertex/aiTensorboard:AiTensorboard default projects/{{project}}/locations/{{region}}/tensorboards/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiTensorboard:AiTensorboard default {{project}}/{{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiTensorboard:AiTensorboard default {{region}}/{{name}}
```

```sh
$ pulumi import gcp:vertex/aiTensorboard:AiTensorboard default {{name}}
```

6
descriptionB" !Description of this Tensorboard.
C
displayName" 0User provided name of this Tensorboard.


- - -
╗
encryptionSpecoBm:k
i
vertexAiTensorboardEncryptionSpecBgcp:vertex/AiTensorboardEncryptionSpec:AiTensorboardEncryptionSpec╖Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this Tensorboard will be secured by this key.
Structure is documented below.
Я
labelsB2" МThe labels with user-defined metadata to organize your Tensorboards.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
{
projectB" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
>
regionB" .The region of the tensorboard. eg us-central1
"ж
blobStoragePathPrefix" ИConsumer project Cloud Storage path prefix used to store blob data, which can either be a bucket or directory. Does not end with a '/'.
"а

createTime" НThe timestamp of when the Tensorboard was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
"6
descriptionB" !Description of this Tensorboard.
"C
displayName" 0User provided name of this Tensorboard.


- - -
"ж
effectiveLabels2" МAll of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
"╗
encryptionSpecoBm:k
i
vertexAiTensorboardEncryptionSpecBgcp:vertex/AiTensorboardEncryptionSpec:AiTensorboardEncryptionSpec╖Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this Tensorboard will be secured by this key.
Structure is documented below.
"Я
labelsB2" МThe labels with user-defined metadata to organize your Tensorboards.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field `effective_labels` for all of the labels present on the resource.
"%
name" Name of the Tensorboard.
"y
project" jThe ID of the project in which the resource belongs.
If it is not provided, the provider project is used.
"Г
pulumiLabels2" mThe combination of labels configured directly on the resource
and default labels configured on the provider.
"<
region" .The region of the tensorboard. eg us-central1
"?
runCount" /The number of Runs stored in this Tensorboard.
"е

updateTime" ТThe timestamp of when the Tensorboard was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
2Ў,
D
siteverificationgetToken&gcp:siteverification/getToken:getTokenс&A verification token is used to demonstrate ownership of a website or domain.


To get more information about Token, see:

* [API documentation](https://developers.google.com/site-verification/v1)
* How-to Guides
    * [Getting Started](https://developers.google.com/site-verification/v1/getting_started)


## Example Usage

### Site Verification Via Site META Tag

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = gcp.siteverification.getToken({
    type: "SITE",
    identifier: "https://www.example.com",
    verificationMethod: "META",
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.siteverification.get_token(type="SITE",
    identifier="https://www.example.com",
    verification_method="META")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = Gcp.SiteVerification.GetToken.Invoke(new()
    {
        Type = "SITE",
        Identifier = "https://www.example.com",
        VerificationMethod = "META",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/siteverification"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := siteverification.GetToken(ctx, &siteverification.GetTokenArgs{
			Type:               "SITE",
			Identifier:         "https://www.example.com",
			VerificationMethod: "META",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.siteverification.SiteverificationFunctions;
import com.pulumi.gcp.siteverification.inputs.GetTokenArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = SiteverificationFunctions.getToken(GetTokenArgs.builder()
            .type("SITE")
            .identifier("https://www.example.com")
            .verificationMethod("META")
            .build());

    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: gcp:siteverification:getToken
      arguments:
        type: SITE
        identifier: https://www.example.com
        verificationMethod: META
```
<!--End PulumiCodeChooser -->

### Site Verification Via DNS TXT Record

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = gcp.siteverification.getToken({
    type: "INET_DOMAIN",
    identifier: "www.example.com",
    verificationMethod: "DNS_TXT",
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.siteverification.get_token(type="INET_DOMAIN",
    identifier="www.example.com",
    verification_method="DNS_TXT")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = Gcp.SiteVerification.GetToken.Invoke(new()
    {
        Type = "INET_DOMAIN",
        Identifier = "www.example.com",
        VerificationMethod = "DNS_TXT",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/siteverification"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := siteverification.GetToken(ctx, &siteverification.GetTokenArgs{
			Type:               "INET_DOMAIN",
			Identifier:         "www.example.com",
			VerificationMethod: "DNS_TXT",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.siteverification.SiteverificationFunctions;
import com.pulumi.gcp.siteverification.inputs.GetTokenArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = SiteverificationFunctions.getToken(GetTokenArgs.builder()
            .type("INET_DOMAIN")
            .identifier("www.example.com")
            .verificationMethod("DNS_TXT")
            .build());

    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: gcp:siteverification:getToken
      arguments:
        type: INET_DOMAIN
        identifier: www.example.com
        verificationMethod: DNS_TXT
```
<!--End PulumiCodeChooser -->
б

identifier" ОThe site identifier. If the type is set to SITE, the identifier is a URL. If the type is
set to INET_DOMAIN, the identifier is a domain name.
|
type" pThe type of resource to be verified, either a domain or a web site.
Possible values are: `INET_DOMAIN`, `SITE`.
█
verificationMethod" └The verification method for the Site Verification system to use to verify
this site or domain.
Possible values are: `ANALYTICS`, `DNS_CNAME`, `DNS_TXT`, `FILE`, `META`, `TAG_MANAGER`.


- - -
"E
id" ;The provider-assigned unique ID for this managed resource.
"

identifier" "K
token" >The generated token for use in subsequent verification steps.
"

type" "
verificationMethod" 2■
G

sourcerepogetRepository*gcp:sourcerepo/getRepository:getRepositoryмGet infomation about an existing Google Cloud Source Repository.
For more information see [the official documentation](https://cloud.google.com/source-repositories)
and
[API](https://cloud.google.com/source-repositories/docs/reference/rest/v1/projects.repos).


## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my-repo = gcp.sourcerepo.getRepository({
    name: "my-repository",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_repo = gcp.sourcerepo.get_repository(name="my-repository")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_repo = Gcp.SourceRepo.GetRepository.Invoke(new()
    {
        Name = "my-repository",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.LookupRepository(ctx, &sourcerepo.LookupRepositoryArgs{
			Name: "my-repository",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.SourcerepoFunctions;
import com.pulumi.gcp.sourcerepo.inputs.GetRepositoryArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var my-repo = SourcerepoFunctions.getRepository(GetRepositoryArgs.builder()
            .name("my-repository")
            .build());

    }
}
```
```yaml
variables:
  my-repo:
    fn::invoke:
      function: gcp:sourcerepo:getRepository
      arguments:
        name: my-repository
```
<!--End PulumiCodeChooser -->
f
name" ZResource name of the repository. The repo name may contain slashes. eg, `name/with/slash`
{
projectB" jThe ID of the project in which the resource belongs. If it is not provided, the provider project is used.
"
createIgnoreAlreadyExists
 "E
id" ;The provider-assigned unique ID for this managed resource.
"

name" "
projectB" "В
pubsubConfigsq*o:m
k

sourcerepogetRepositoryPubsubConfigBgcp:sourcerepo/getRepositoryPubsubConfig:getRepositoryPubsubConfig"

size "	
url" 2м
b

sourcerepogetRepositoryIamPolicy<gcp:sourcerepo/getRepositoryIamPolicy:getRepositoryIamPolicyиRetrieves the current IAM policy data for repository


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.sourcerepo.getRepositoryIamPolicy({
    project: my_repo.project,
    repository: my_repo.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.sourcerepo.get_repository_iam_policy(project=my_repo["project"],
    repository=my_repo["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.SourceRepo.GetRepositoryIamPolicy.Invoke(new()
    {
        Project = my_repo.Project,
        Repository = my_repo.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sourcerepo"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sourcerepo.LookupRepositoryIamPolicy(ctx, &sourcerepo.LookupRepositoryIamPolicyArgs{
			Project:    pulumi.StringRef(my_repo.Project),
			Repository: my_repo.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sourcerepo.SourcerepoFunctions;
import com.pulumi.gcp.sourcerepo.inputs.GetRepositoryIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = SourcerepoFunctions.getRepositoryIamPolicy(GetRepositoryIamPolicyArgs.builder()
            .project(my_repo.project())
            .repository(my_repo.name())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:sourcerepo:getRepositoryIamPolicy
      arguments:
        project: ${["my-repo"].project}
        repository: ${["my-repo"].name}
```
<!--End PulumiCodeChooser -->
У
projectB" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
M

repository" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"Ш

policyData" Е(Required only by `gcp.sourcerepo.RepositoryIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" "

repository" 2р
;
spannergetDatabase#gcp:spanner/getDatabase:getDatabase┤Get a spanner database from Google Cloud by its name and instance name.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const foo = gcp.spanner.getDatabase({
    name: "foo",
    instance: instance.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

foo = gcp.spanner.get_database(name="foo",
    instance=instance["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var foo = Gcp.Spanner.GetDatabase.Invoke(new()
    {
        Name = "foo",
        Instance = instance.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.LookupDatabase(ctx, &spanner.LookupDatabaseArgs{
			Name:     "foo",
			Instance: instance.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.SpannerFunctions;
import com.pulumi.gcp.spanner.inputs.GetDatabaseArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var foo = SpannerFunctions.getDatabase(GetDatabaseArgs.builder()
            .name("foo")
            .instance(instance.name())
            .build());

    }
}
```
```yaml
variables:
  foo:
    fn::invoke:
      function: gcp:spanner:getDatabase
      arguments:
        name: foo
        instance: ${instance.name}
```
<!--End PulumiCodeChooser -->
D
instance" 4The name of the database's spanner instance.

- - -
.
name" "The name of the spanner database.
q
projectB" `The project in which the resource belongs. If it
is not provided, the provider project is used.
"
databaseDialect" "
ddls*" "
deletionProtection
 "
enableDropProtection
 "Ж
encryptionConfigsq*o:m
k
spannergetDatabaseEncryptionConfigCgcp:spanner/getDatabaseEncryptionConfig:getDatabaseEncryptionConfig"E
id" ;The provider-assigned unique ID for this managed resource.
"
instance" "

name" "
projectB" "
state" "
versionRetentionPeriod" 2ь
V
spannergetDatabaseIamPolicy5gcp:spanner/getDatabaseIamPolicy:getDatabaseIamPolicy║Retrieves the current IAM policy data for a Spanner database.

## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const foo = gcp.spanner.getDatabaseIamPolicy({
    project: database.project,
    database: database.name,
    instance: database.instance,
});
```
```python
import pulumi
import pulumi_gcp as gcp

foo = gcp.spanner.get_database_iam_policy(project=database["project"],
    database=database["name"],
    instance=database["instance"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var foo = Gcp.Spanner.GetDatabaseIamPolicy.Invoke(new()
    {
        Project = database.Project,
        Database = database.Name,
        Instance = database.Instance,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.GetDatabaseIamPolicy(ctx, &spanner.GetDatabaseIamPolicyArgs{
			Project:  pulumi.StringRef(database.Project),
			Database: database.Name,
			Instance: database.Instance,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.SpannerFunctions;
import com.pulumi.gcp.spanner.inputs.GetDatabaseIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var foo = SpannerFunctions.getDatabaseIamPolicy(GetDatabaseIamPolicyArgs.builder()
            .project(database.project())
            .database(database.name())
            .instance(database.instance())
            .build());

    }
}
```
```yaml
variables:
  foo:
    fn::invoke:
      function: gcp:spanner:getDatabaseIamPolicy
      arguments:
        project: ${database.project}
        database: ${database.name}
        instance: ${database.instance}
```
<!--End PulumiCodeChooser -->
2
database" "The name of the Spanner database.
J
instance" :The name of the Spanner instance the database belongs to.
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"
database" "3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
instance" "-

policyData" (Computed) The policy data
"
project" 2╢
;
spannergetInstance#gcp:spanner/getInstance:getInstance┌Get a spanner instance from Google Cloud by its name.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const foo = gcp.spanner.getInstance({
    name: "bar",
});
```
```python
import pulumi
import pulumi_gcp as gcp

foo = gcp.spanner.get_instance(name="bar")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var foo = Gcp.Spanner.GetInstance.Invoke(new()
    {
        Name = "bar",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.LookupInstance(ctx, &spanner.LookupInstanceArgs{
			Name: "bar",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.SpannerFunctions;
import com.pulumi.gcp.spanner.inputs.GetInstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var foo = SpannerFunctions.getInstance(GetInstanceArgs.builder()
            .name("bar")
            .build());

    }
}
```
```yaml
variables:
  foo:
    fn::invoke:
      function: gcp:spanner:getInstance
      arguments:
        name: bar
```
<!--End PulumiCodeChooser -->

configB" 
displayNameB" 5
name" )The name of the spanner instance.

- - -
q
projectB" `The project in which the resource belongs. If it
is not provided, the provider project is used.
"К
autoscalingConfigst*r:p
n
spannergetInstanceAutoscalingConfigEgcp:spanner/getInstanceAutoscalingConfig:getInstanceAutoscalingConfig"
configB" "
defaultBackupScheduleType" "
displayNameB" "
edition" "
effectiveLabels2" "
forceDestroy
 "E
id" ;The provider-assigned unique ID for this managed resource.
"
labels2" "

name" "
numNodes "
processingUnits "
projectB" "
pulumiLabels2" "
state" 2м
V
spannergetInstanceIamPolicy5gcp:spanner/getInstanceIamPolicy:getInstanceIamPolicy▐Retrieves the current IAM policy data for a Spanner instance.

## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const foo = gcp.spanner.getInstanceIamPolicy({
    project: instance.project,
    instance: instance.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

foo = gcp.spanner.get_instance_iam_policy(project=instance["project"],
    instance=instance["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var foo = Gcp.Spanner.GetInstanceIamPolicy.Invoke(new()
    {
        Project = instance.Project,
        Instance = instance.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/spanner"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := spanner.GetInstanceIamPolicy(ctx, &spanner.GetInstanceIamPolicyArgs{
			Project:  pulumi.StringRef(instance.Project),
			Instance: instance.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.spanner.SpannerFunctions;
import com.pulumi.gcp.spanner.inputs.GetInstanceIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var foo = SpannerFunctions.getInstanceIamPolicy(GetInstanceIamPolicyArgs.builder()
            .project(instance.project())
            .instance(instance.name())
            .build());

    }
}
```
```yaml
variables:
  foo:
    fn::invoke:
      function: gcp:spanner:getInstanceIamPolicy
      arguments:
        project: ${instance.project}
        instance: ${instance.name}
```
<!--End PulumiCodeChooser -->
*
instance" The name of the instance.
{
projectB" jThe ID of the project in which the resource belongs. If it
is not provided, the provider project is used.
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
instance" "-

policyData" (Computed) The policy data
"
project" 2т
6
sqlgetBackupRun!gcp:sql/getBackupRun:getBackupRun╣Use this data source to get information about a Cloud SQL instance backup run.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const backup = gcp.sql.getBackupRun({
    instance: main.name,
    mostRecent: true,
});
```
```python
import pulumi
import pulumi_gcp as gcp

backup = gcp.sql.get_backup_run(instance=main["name"],
    most_recent=True)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var backup = Gcp.Sql.GetBackupRun.Invoke(new()
    {
        Instance = main.Name,
        MostRecent = true,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.GetBackupRun(ctx, &sql.GetBackupRunArgs{
			Instance:   main.Name,
			MostRecent: pulumi.BoolRef(true),
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.SqlFunctions;
import com.pulumi.gcp.sql.inputs.GetBackupRunArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var backup = SqlFunctions.getBackupRun(GetBackupRunArgs.builder()
            .instance(main.name())
            .mostRecent(true)
            .build());

    }
}
```
```yaml
variables:
  backup:
    fn::invoke:
      function: gcp:sql:getBackupRun
      arguments:
        instance: ${main.name}
        mostRecent: true
```
<!--End PulumiCodeChooser -->
╞
backupIdB │The identifier for this backup run. Unique only for a specific Cloud SQL instance.
If left empty and multiple backups exist for the instance, `most_recent` must be set to `true`.
C
instance" 3The name of the instance the backup is taken from.
s

mostRecentB
 _Toggles use of the most recent backup run if multiple backups exist for a 
Cloud SQL instance.
i
projectB" XThe project to list instances for. If it
is not provided, the provider project is used.
"
backupId "E
id" ;The provider-assigned unique ID for this managed resource.
"
instance" ")
location" Location of the backups.
"

mostRecentB
 "
project" "Л
	startTime" zThe time the backup operation actually started in UTC timezone in RFC 3339 format, for 
example 2012-11-15T16:19:00.094Z.
"║
status" лThe status of this run. Refer to [API reference](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/backupRuns#SqlBackupRunStatus) for possible status values.
2╙
0
sql
getCaCertsgcp:sql/getCaCerts:getCaCertsШGet all of the trusted Certificate Authorities (CAs) for the specified SQL database instance. For more information see the
[official documentation](https://cloud.google.com/sql/)
and
[API](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/instances/listServerCas).


7
instance" 'The name or self link of the instance.
В
projectB" qThe ID of the project in which the resource belongs. If `project` is not provided, the provider project is used.
"N
activeVersion" 9SHA1 fingerprint of the currently active CA certificate.
"П
certsB*@:>
<
sqlgetCaCertsCert%gcp:sql/getCaCertsCert:getCaCertsCertBA list of server CA certificates for the instance. Each contains:
"E
id" ;The provider-assigned unique ID for this managed resource.
"
instance" "
project" 2И
3
sqlgetDatabasegcp:sql/getDatabase:getDatabase╔Use this data source to get information about a database in a Cloud SQL instance.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const qa = gcp.sql.getDatabase({
    name: "test-sql-database",
    instance: main.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

qa = gcp.sql.get_database(name="test-sql-database",
    instance=main["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var qa = Gcp.Sql.GetDatabase.Invoke(new()
    {
        Name = "test-sql-database",
        Instance = main.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.LookupDatabase(ctx, &sql.LookupDatabaseArgs{
			Name:     "test-sql-database",
			Instance: main.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.SqlFunctions;
import com.pulumi.gcp.sql.inputs.GetDatabaseArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var qa = SqlFunctions.getDatabase(GetDatabaseArgs.builder()
            .name("test-sql-database")
            .instance(main.name())
            .build());

    }
}
```
```yaml
variables:
  qa:
    fn::invoke:
      function: gcp:sql:getDatabase
      arguments:
        name: test-sql-database
        instance: ${main.name}
```
<!--End PulumiCodeChooser -->
[
instance" KThe name of the Cloud SQL database instance in which the database belongs.
&
name" The name of the database.
F
projectB" 5The ID of the project in which the instance belongs.
"
charset" "
	collation" "
deletionPolicy" "E
id" ;The provider-assigned unique ID for this managed resource.
"
instance" "

name" "
projectB" "
selfLink" 2ф
K
sqlgetDatabaseInstance/gcp:sql/getDatabaseInstance:getDatabaseInstance╘Use this data source to get information about a Cloud SQL instance.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const qa = gcp.sql.getDatabaseInstance({
    name: "test-sql-instance",
});
```
```python
import pulumi
import pulumi_gcp as gcp

qa = gcp.sql.get_database_instance(name="test-sql-instance")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var qa = Gcp.Sql.GetDatabaseInstance.Invoke(new()
    {
        Name = "test-sql-instance",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.LookupDatabaseInstance(ctx, &sql.LookupDatabaseInstanceArgs{
			Name: "test-sql-instance",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.SqlFunctions;
import com.pulumi.gcp.sql.inputs.GetDatabaseInstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var qa = SqlFunctions.getDatabaseInstance(GetDatabaseInstanceArgs.builder()
            .name("test-sql-instance")
            .build());

    }
}
```
```yaml
variables:
  qa:
    fn::invoke:
      function: gcp:sql:getDatabaseInstance
      arguments:
        name: test-sql-instance
```
<!--End PulumiCodeChooser -->
&
name" The name of the instance.
F
projectB" 5The ID of the project in which the resource belongs.
"$
availableMaintenanceVersions*" "j
clones`*^:\
Z
sqlgetDatabaseInstanceClone9gcp:sql/getDatabaseInstanceClone:getDatabaseInstanceClone"
connectionName" "
databaseVersion" "
deletionProtection
 "
dnsName" "
encryptionKeyName" "
firstIpAddress" "E
id" ;The provider-assigned unique ID for this managed resource.
"
instanceType" "{
ipAddressesl*j:h
f
sqlgetDatabaseInstanceIpAddressAgcp:sql/getDatabaseInstanceIpAddress:getDatabaseInstanceIpAddress"
maintenanceVersion" "
masterInstanceName" "

name" "
privateIpAddress" "
projectB" "
pscServiceAttachmentLink" "
publicIpAddress" "
region" "к
replicaConfigurationsР*Н:К
З
sql'getDatabaseInstanceReplicaConfigurationWgcp:sql/getDatabaseInstanceReplicaConfiguration:getDatabaseInstanceReplicaConfiguration"
replicaNames*" "к
restoreBackupContextsР*Н:К
З
sql'getDatabaseInstanceRestoreBackupContextWgcp:sql/getDatabaseInstanceRestoreBackupContext:getDatabaseInstanceRestoreBackupContext"
rootPassword" "
selfLink" "Ж
serverCaCertsu*s:q
o
sqlgetDatabaseInstanceServerCaCertGgcp:sql/getDatabaseInstanceServerCaCert:getDatabaseInstanceServerCaCert" 
serviceAccountEmailAddress" "r
settingsf*d:b
`
sqlgetDatabaseInstanceSetting=gcp:sql/getDatabaseInstanceSetting:getDatabaseInstanceSetting2и
Б
sql%getDatabaseInstanceLatestRecoveryTimeSgcp:sql/getDatabaseInstanceLatestRecoveryTime:getDatabaseInstanceLatestRecoveryTimeСGet Latest Recovery Time for a given instance. For more information see the
[official documentation](https://cloud.google.com/sql/)
and
[API](https://cloud.google.com/sql/docs/postgres/backup-recovery/pitr#get-the-latest-recovery-time).


## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.sql.getDatabaseInstanceLatestRecoveryTime({
    instance: "sample-instance",
});
export const latestRecoveryTime = _default;
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.sql.get_database_instance_latest_recovery_time(instance="sample-instance")
pulumi.export("latestRecoveryTime", default)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Sql.GetDatabaseInstanceLatestRecoveryTime.Invoke(new()
    {
        Instance = "sample-instance",
    });

    return new Dictionary<string, object?>
    {
        ["latestRecoveryTime"] = @default,
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := sql.GetDatabaseInstanceLatestRecoveryTime(ctx, &sql.GetDatabaseInstanceLatestRecoveryTimeArgs{
			Instance: "sample-instance",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("latestRecoveryTime", _default)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.SqlFunctions;
import com.pulumi.gcp.sql.inputs.GetDatabaseInstanceLatestRecoveryTimeArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = SqlFunctions.getDatabaseInstanceLatestRecoveryTime(GetDatabaseInstanceLatestRecoveryTimeArgs.builder()
            .instance("sample-instance")
            .build());

        ctx.export("latestRecoveryTime", default_);
    }
}
```
```yaml
variables:
  default:
    fn::invoke:
      function: gcp:sql:getDatabaseInstanceLatestRecoveryTime
      arguments:
        instance: sample-instance
outputs:
  latestRecoveryTime: ${default}
```
<!--End PulumiCodeChooser -->
*
instance" The name of the instance.
F
projectB" 5The ID of the project in which the resource belongs.
"E
id" ;The provider-assigned unique ID for this managed resource.
"*
instance" The name of the instance.
"a
latestRecoveryTime" GTimestamp, identifies the latest recovery time of the source instance.
"D
project" 5The ID of the project in which the resource belongs.
2╙
N
sqlgetDatabaseInstances1gcp:sql/getDatabaseInstances:getDatabaseInstances╓Use this data source to get information about a list of Cloud SQL instances in a project. You can also apply some filters over this list to get a more filtered list of Cloud SQL instances.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const qa = gcp.sql.getDatabaseInstances({
    project: "test-project",
});
```
```python
import pulumi
import pulumi_gcp as gcp

qa = gcp.sql.get_database_instances(project="test-project")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var qa = Gcp.Sql.GetDatabaseInstances.Invoke(new()
    {
        Project = "test-project",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.GetDatabaseInstances(ctx, &sql.GetDatabaseInstancesArgs{
			Project: pulumi.StringRef("test-project"),
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.SqlFunctions;
import com.pulumi.gcp.sql.inputs.GetDatabaseInstancesArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var qa = SqlFunctions.getDatabaseInstances(GetDatabaseInstancesArgs.builder()
            .project("test-project")
            .build());

    }
}
```
```yaml
variables:
  qa:
    fn::invoke:
      function: gcp:sql:getDatabaseInstances
      arguments:
        project: test-project
```
<!--End PulumiCodeChooser -->
l
databaseVersionB" STo filter out the Cloud SQL instances which are of the specified database version.
{
projectB" jThe ID of the project in which the resources belong. If it is not provided, the provider project is used.
a
regionB" QTo filter out the Cloud SQL instances which are located in the specified region.
Д
stateB" ЇTo filter out the Cloud SQL instances based on the current serving state of the database instance. Supported values include `SQL_INSTANCE_STATE_UNSPECIFIED`, `RUNNABLE`, `SUSPENDED`, `PENDING_DELETE`, `PENDING_CREATE`, `MAINTENANCE`, `FAILED`.
r
tierB" dTo filter out the Cloud SQL instances based on the tier(or machine type) of the database instances.
╖
zoneB" иTo filter out the Cloud SQL instances which are located in the specified zone. This zone refers to the Compute Engine zone that the instance is currently serving from.
"
databaseVersionB" "E
id" ;The provider-assigned unique ID for this managed resource.
"y
	instancesl*j:h
f
sqlgetDatabaseInstancesInstanceAgcp:sql/getDatabaseInstancesInstance:getDatabaseInstancesInstance"
projectB" "
regionB" "
stateB" "
tierB" "
zoneB" 2б
6
sqlgetDatabases!gcp:sql/getDatabases:getDatabasesКUse this data source to get information about a list of databases in a Cloud SQL instance.
## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const qa = gcp.sql.getDatabases({
    instance: main.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

qa = gcp.sql.get_databases(instance=main["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var qa = Gcp.Sql.GetDatabases.Invoke(new()
    {
        Instance = main.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/sql"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := sql.GetDatabases(ctx, &sql.GetDatabasesArgs{
			Instance: main.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.sql.SqlFunctions;
import com.pulumi.gcp.sql.inputs.GetDatabasesArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var qa = SqlFunctions.getDatabases(GetDatabasesArgs.builder()
            .instance(main.name())
            .build());

    }
}
```
```yaml
variables:
  qa:
    fn::invoke:
      function: gcp:sql:getDatabases
      arguments:
        instance: ${main.name}
```
<!--End PulumiCodeChooser -->
[
instance" KThe name of the Cloud SQL database instance in which the database belongs.
▒
projectB" ЯThe ID of the project in which the instance belongs.

> **Note** This datasource performs client-side sorting to provide consistent ordering of the databases.
"a
	databasesT*R:P
N
sqlgetDatabasesDatabase1gcp:sql/getDatabasesDatabase:getDatabasesDatabase"E
id" ;The provider-assigned unique ID for this managed resource.
"
instance" "
projectB" 2╡
*
sqlgetTiersgcp:sql/getTiers:getTiers·	Get all available machine types (tiers) for a project, for example, db-custom-1-3840. For more information see the
[official documentation](https://cloud.google.com/sql/)
and
[API](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/tiers/list).


## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const tiers = gcp.sql.getTiers({
    project: "sample-project",
});
const allAvailableTiers = tiers.then(tiers => .map(v => (v.tier)));
export const avaialbleTiers = allAvailableTiers;
```
```python
import pulumi
import pulumi_gcp as gcp

tiers = gcp.sql.get_tiers(project="sample-project")
all_available_tiers = [v.tier for v in tiers.tiers]
pulumi.export("avaialbleTiers", all_available_tiers)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var tiers = Gcp.Sql.GetTiers.Invoke(new()
    {
        Project = "sample-project",
    });

    var allAvailableTiers = .Select(v => 
    {
        return v.Tier;
    }).ToList();

    return new Dictionary<string, object?>
    {
        ["avaialbleTiers"] = allAvailableTiers,
    };
});
```
<!--End PulumiCodeChooser -->
Я
projectB" НThe Project ID for which to list tiers. If `project` is not provided, the project defined within the default provider configuration is used.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
project" "С
tiers<*::8
6
sqlgetTiersTier!gcp:sql/getTiersTier:getTiersTierJA list of all available machine types (tiers) for project. Each contains:
2▓"
5
storage	getBucketgcp:storage/getBucket:getBucket┤Gets an existing bucket in Google Cloud Storage service (GCS).
See [the official documentation](https://cloud.google.com/storage/docs/key-terms#buckets)
and
[API](https://cloud.google.com/storage/docs/json_api/v1/buckets).


## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const my-bucket = gcp.storage.getBucket({
    name: "my-bucket",
});
```
```python
import pulumi
import pulumi_gcp as gcp

my_bucket = gcp.storage.get_bucket(name="my-bucket")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var my_bucket = Gcp.Storage.GetBucket.Invoke(new()
    {
        Name = "my-bucket",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.LookupBucket(ctx, &storage.LookupBucketArgs{
			Name: "my-bucket",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetBucketArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var my-bucket = StorageFunctions.getBucket(GetBucketArgs.builder()
            .name("my-bucket")
            .build());

    }
}
```
```yaml
variables:
  my-bucket:
    fn::invoke:
      function: gcp:storage:getBucket
      arguments:
        name: my-bucket
```
<!--End PulumiCodeChooser -->
$
name" The name of the bucket.
М
projectB" ·The ID of the project in which the resource belongs. If it is not provided then the data source will use the Compute API to find the project id that corresponds to the project number returned from the Storage API, and if no Compute API permissions are available or if the Compute API is disabled it defaults to the provider value. Supplying a value for `project` doesn't influence retrieving data about the bucket but it can be used to prevent use of the Compute API. If you do provide a `project` value ensure that it is the correct value for that bucket; the data source will not check that the project id and project number match.
"e
autoclassesV*T:R
P
storagegetBucketAutoclass1gcp:storage/getBucketAutoclass:getBucketAutoclass"L
corsD*B:@
>
storagegetBucketCor%gcp:storage/getBucketCor:getBucketCor"Ф
customPlacementConfigsz*x:v
t
storagegetBucketCustomPlacementConfigIgcp:storage/getBucketCustomPlacementConfig:getBucketCustomPlacementConfig"
defaultEventBasedHold
 "
effectiveLabels2" "
enableObjectRetention
 "h
encryptionsY*W:U
S
storagegetBucketEncryption3gcp:storage/getBucketEncryption:getBucketEncryption"
forceDestroy
 "Ф
hierarchicalNamespacesz*x:v
t
storagegetBucketHierarchicalNamespaceIgcp:storage/getBucketHierarchicalNamespace:getBucketHierarchicalNamespace"E
id" ;The provider-assigned unique ID for this managed resource.
"
labels2" "t
lifecycleRulesb*`:^
\
storagegetBucketLifecycleRule9gcp:storage/getBucketLifecycleRule:getBucketLifecycleRule"
location" "\
loggingsP*N:L
J
storagegetBucketLogging-gcp:storage/getBucketLogging:getBucketLogging"

name" "
projectB" "
projectNumber "
publicAccessPrevention" "
pulumiLabels2" "
requesterPays
 "}
retentionPoliciesh*f:d
b
storagegetBucketRetentionPolicy=gcp:storage/getBucketRetentionPolicy:getBucketRetentionPolicy"	
rpo" "
selfLink" "Б
softDeletePoliciesk*i:g
e
storagegetBucketSoftDeletePolicy?gcp:storage/getBucketSoftDeletePolicy:getBucketSoftDeletePolicy"
storageClass" "
uniformBucketLevelAccess
 "	
url" "h
versioningsY*W:U
S
storagegetBucketVersioning3gcp:storage/getBucketVersioning:getBucketVersioning"\
websitesP*N:L
J
storagegetBucketWebsite-gcp:storage/getBucketWebsite:getBucketWebsite2Ы
P
storagegetBucketIamPolicy1gcp:storage/getBucketIamPolicy:getBucketIamPolicy▐Retrieves the current IAM policy data for bucket


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.storage.getBucketIamPolicy({
    bucket: _default.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.storage.get_bucket_iam_policy(bucket=default["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.Storage.GetBucketIamPolicy.Invoke(new()
    {
        Bucket = @default.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.GetBucketIamPolicy(ctx, &storage.GetBucketIamPolicyArgs{
			Bucket: _default.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetBucketIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = StorageFunctions.getBucketIamPolicy(GetBucketIamPolicyArgs.builder()
            .bucket(default_.name())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:storage:getBucketIamPolicy
      arguments:
        bucket: ${default.name}
```
<!--End PulumiCodeChooser -->
I
bucket" ;Used to find the parent resource to bind the IAM policy to
"
bucket" "3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"Р

policyData" ~(Required only by `gcp.storage.BucketIAMPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
2ъ)
G
storagegetBucketObject+gcp:storage/getBucketObject:getBucketObject╞Gets an existing object inside an existing bucket in Google Cloud Storage service (GCS).
See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
and
[API](https://cloud.google.com/storage/docs/json_api/v1/objects).


## Example Usage

Example picture stored within a folder.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const picture = gcp.storage.getBucketObject({
    name: "folder/butterfly01.jpg",
    bucket: "image-store",
});
```
```python
import pulumi
import pulumi_gcp as gcp

picture = gcp.storage.get_bucket_object(name="folder/butterfly01.jpg",
    bucket="image-store")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var picture = Gcp.Storage.GetBucketObject.Invoke(new()
    {
        Name = "folder/butterfly01.jpg",
        Bucket = "image-store",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.LookupBucketObject(ctx, &storage.LookupBucketObjectArgs{
			Name:   pulumi.StringRef("folder/butterfly01.jpg"),
			Bucket: pulumi.StringRef("image-store"),
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetBucketObjectArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var picture = StorageFunctions.getBucketObject(GetBucketObjectArgs.builder()
            .name("folder/butterfly01.jpg")
            .bucket("image-store")
            .build());

    }
}
```
```yaml
variables:
  picture:
    fn::invoke:
      function: gcp:storage:getBucketObject
      arguments:
        name: folder/butterfly01.jpg
        bucket: image-store
```
<!--End PulumiCodeChooser -->
3
bucketB" #The name of the containing bucket.
&
nameB" The name of the object.
"
bucketB" "№
cacheControl" ч(Computed) [Cache-Control](https://tools.ietf.org/html/rfc7234#section-5.2)
directive to specify caching behavior of object data. If omitted and object is accessible to all anonymous users, the default will be public, max-age=3600
"
content" "t
contentDisposition" Z(Computed) [Content-Disposition](https://tools.ietf.org/html/rfc6266) of the object data.
"~
contentEncoding" g(Computed) [Content-Encoding](https://tools.ietf.org/html/rfc7231#section-3.1.2.2) of the object data.
"~
contentLanguage" g(Computed) [Content-Language](https://tools.ietf.org/html/rfc7231#section-3.1.3.2) of the object data.
"╛
contentType" к(Computed) [Content-Type](https://tools.ietf.org/html/rfc7231#section-3.1.1.5) of the object data. Defaults to "application/octet-stream" or "text/plain; charset=utf-8".
"B
crc32c" 4(Computed) Base 64 CRC32 hash of the uploaded data.
"Ь
customerEncryptionsД*Б:
}
storage!getBucketObjectCustomerEncryptionOgcp:storage/getBucketObjectCustomerEncryption:getBucketObjectCustomerEncryption"
detectMd5hash" "Е
eventBasedHold
 ю(Computed) Whether an object is under [event-based hold](https://cloud.google.com/storage/docs/object-holds#hold-types). Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any).
"с

generation ╬(Computed) The content generation of this object. Used for object [versioning](https://cloud.google.com/storage/docs/object-versioning) and [soft delete](https://cloud.google.com/storage/docs/soft-delete).
"E
id" ;The provider-assigned unique ID for this managed resource.
"

kmsKeyName" "A
md5hash" 2(Computed) Base 64 MD5 hash of the uploaded data.
"E
	mediaLink" 4(Computed) A url reference to download this object.
"
metadata2" "
nameB" "

outputName" "v

retentionsh*f:d
b
storagegetBucketObjectRetention=gcp:storage/getBucketObjectRetention:getBucketObjectRetention";
selfLink" +(Computed) A url reference to this object.
"
source" "■
storageClass" щ(Computed) The [StorageClass](https://cloud.google.com/storage/docs/storage-classes) of the new bucket object.
Supported values include: `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`, `ARCHIVE`. If not provided, this defaults to the bucket's default
storage class or to a [standard](https://cloud.google.com/storage/docs/storage-classes#standard) class.
"ц
temporaryHold
 ╨(Computed) Whether an object is under [temporary hold](https://cloud.google.com/storage/docs/object-holds#hold-types). While this flag is set to true, the object is protected against deletion and overwrites.
2Ў
\
storagegetBucketObjectContent9gcp:storage/getBucketObjectContent:getBucketObjectContent╞Gets an existing object content inside an existing bucket in Google Cloud Storage service (GCS).
See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
and
[API](https://cloud.google.com/storage/docs/json_api/v1/objects).

> **Warning:** The object content will be saved in the state, and visible to everyone who has access to the state file.

## Example Usage

Example file object  stored within a folder.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const key = gcp.storage.getBucketObjectContent({
    name: "encryptedkey",
    bucket: "keystore",
});
export const encrypted = key.then(key => key.content);
```
```python
import pulumi
import pulumi_gcp as gcp

key = gcp.storage.get_bucket_object_content(name="encryptedkey",
    bucket="keystore")
pulumi.export("encrypted", key.content)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var key = Gcp.Storage.GetBucketObjectContent.Invoke(new()
    {
        Name = "encryptedkey",
        Bucket = "keystore",
    });

    return new Dictionary<string, object?>
    {
        ["encrypted"] = key.Apply(getBucketObjectContentResult => getBucketObjectContentResult.Content),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		key, err := storage.GetBucketObjectContent(ctx, &storage.GetBucketObjectContentArgs{
			Name:   "encryptedkey",
			Bucket: "keystore",
		}, nil)
		if err != nil {
			return err
		}
		ctx.Export("encrypted", key.Content)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetBucketObjectContentArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var key = StorageFunctions.getBucketObjectContent(GetBucketObjectContentArgs.builder()
            .name("encryptedkey")
            .bucket("keystore")
            .build());

        ctx.export("encrypted", key.applyValue(getBucketObjectContentResult -> getBucketObjectContentResult.content()));
    }
}
```
```yaml
variables:
  key:
    fn::invoke:
      function: gcp:storage:getBucketObjectContent
      arguments:
        name: encryptedkey
        bucket: keystore
outputs:
  encrypted: ${key.content}
```
<!--End PulumiCodeChooser -->
1
bucket" #The name of the containing bucket.
{
contentB" j(Computed) [Content-Language](https://tools.ietf.org/html/rfc7231#section-3.1.3.2) of the object content.
$
name" The name of the object.
"
bucket" "
cacheControl" "{
contentB" j(Computed) [Content-Language](https://tools.ietf.org/html/rfc7231#section-3.1.3.2) of the object content.
"
contentDisposition" "
contentEncoding" "
contentLanguage" "
contentType" "
crc32c" "│
customerEncryptionsЫ*Ш:Х
Т
storage(getBucketObjectContentCustomerEncryption]gcp:storage/getBucketObjectContentCustomerEncryption:getBucketObjectContentCustomerEncryption"
detectMd5hash" "
eventBasedHold
 "

generation "E
id" ;The provider-assigned unique ID for this managed resource.
"

kmsKeyName" "
md5hash" "
	mediaLink" "
metadata2" "

name" "

outputName" "Л

retentions}*{:y
w
storagegetBucketObjectContentRetentionKgcp:storage/getBucketObjectContentRetention:getBucketObjectContentRetention"
selfLink" "
source" "
storageClass" "
temporaryHold
 2├
J
storagegetBucketObjects-gcp:storage/getBucketObjects:getBucketObjectsпGets existing objects inside an existing bucket in Google Cloud Storage service (GCS).
See [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects)
and [API](https://cloud.google.com/storage/docs/json_api/v1/objects/list).

## Example Usage

Example files stored within a bucket.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const files = gcp.storage.getBucketObjects({
    bucket: "file-store",
});
```
```python
import pulumi
import pulumi_gcp as gcp

files = gcp.storage.get_bucket_objects(bucket="file-store")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var files = Gcp.Storage.GetBucketObjects.Invoke(new()
    {
        Bucket = "file-store",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.GetBucketObjects(ctx, &storage.GetBucketObjectsArgs{
			Bucket: "file-store",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetBucketObjectsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var files = StorageFunctions.getBucketObjects(GetBucketObjectsArgs.builder()
            .bucket("file-store")
            .build());

    }
}
```
```yaml
variables:
  files:
    fn::invoke:
      function: gcp:storage:getBucketObjects
      arguments:
        bucket: file-store
```
<!--End PulumiCodeChooser -->
1
bucket" #The name of the containing bucket.
S
	matchGlobB" @A glob pattern used to filter results (for example, `foo*bar`).
[
prefixB" KFilter results to include only objects whose names begin with this prefix.
"
bucket" "х
bucketObjectst*r:p
n
storagegetBucketObjectsBucketObjectEgcp:storage/getBucketObjectsBucketObject:getBucketObjectsBucketObject^A list of retrieved objects contained in the provided GCS bucket. Structure is defined below.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
	matchGlobB" "
prefixB" 2х
8
storage
getBuckets!gcp:storage/getBuckets:getBucketsЁGets a list of existing GCS buckets.
See [the official documentation](https://cloud.google.com/storage/docs/introduction)
and [API](https://cloud.google.com/storage/docs/json_api/v1/buckets/list).

## Example Usage

Example GCS buckets.

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const example = gcp.storage.getBuckets({
    project: "example-project",
});
```
```python
import pulumi
import pulumi_gcp as gcp

example = gcp.storage.get_buckets(project="example-project")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var example = Gcp.Storage.GetBuckets.Invoke(new()
    {
        Project = "example-project",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.GetBuckets(ctx, &storage.GetBucketsArgs{
			Project: pulumi.StringRef("example-project"),
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetBucketsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var example = StorageFunctions.getBuckets(GetBucketsArgs.builder()
            .project("example-project")
            .build());

    }
}
```
```yaml
variables:
  example:
    fn::invoke:
      function: gcp:storage:getBuckets
      arguments:
        project: example-project
```
<!--End PulumiCodeChooser -->
N
prefixB" >Filter results to buckets whose names begin with this prefix.
]
projectB" LThe ID of the project. If it is not provided, the provider project is used.
"Ю
bucketsP*N:L
J
storagegetBucketsBucket-gcp:storage/getBucketsBucket:getBucketsBucketAA list of all retrieved GCS buckets. Structure is defined below.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
prefixB" "
projectB" 2Т
e
storagegetManagedFolderIamPolicy?gcp:storage/getManagedFolderIamPolicy:getManagedFolderIamPolicy
bucket" 
managedFolder" "
bucket" "

etag" "E
id" ;The provider-assigned unique ID for this managed resource.
"
managedFolder" "

policyData" 2ЎI
P
storagegetObjectSignedUrl1gcp:storage/getObjectSignedUrl:getObjectSignedUrl°7The Google Cloud storage signed URL data source generates a signed URL for a given storage object. Signed URLs provide a way to give time-limited read or write access to anyone in possession of the URL, regardless of whether they have a Google account.

For more info about signed URL's is available [here](https://cloud.google.com/storage/docs/access-control/signed-urls).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const artifact = gcp.storage.getObjectSignedUrl({
    bucket: "install_binaries",
    path: "path/to/install_file.bin",
});
const vm = new gcp.compute.Instance("vm", {name: "vm"});
```
```python
import pulumi
import pulumi_gcp as gcp

artifact = gcp.storage.get_object_signed_url(bucket="install_binaries",
    path="path/to/install_file.bin")
vm = gcp.compute.Instance("vm", name="vm")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var artifact = Gcp.Storage.GetObjectSignedUrl.Invoke(new()
    {
        Bucket = "install_binaries",
        Path = "path/to/install_file.bin",
    });

    var vm = new Gcp.Compute.Instance("vm", new()
    {
        Name = "vm",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/compute"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.GetObjectSignedUrl(ctx, &storage.GetObjectSignedUrlArgs{
			Bucket: "install_binaries",
			Path:   "path/to/install_file.bin",
		}, nil)
		if err != nil {
			return err
		}
		_, err = compute.NewInstance(ctx, "vm", &compute.InstanceArgs{
			Name: pulumi.String("vm"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlArgs;
import com.pulumi.gcp.compute.Instance;
import com.pulumi.gcp.compute.InstanceArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var artifact = StorageFunctions.getObjectSignedUrl(GetObjectSignedUrlArgs.builder()
            .bucket("install_binaries")
            .path("path/to/install_file.bin")
            .build());

        var vm = new Instance("vm", InstanceArgs.builder()
            .name("vm")
            .build());

    }
}
```
```yaml
resources:
  vm:
    type: gcp:compute:Instance
    properties:
      name: vm
variables:
  artifact:
    fn::invoke:
      function: gcp:storage:getObjectSignedUrl
      arguments:
        bucket: install_binaries
        path: path/to/install_file.bin
```
<!--End PulumiCodeChooser -->

## Full Example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";
import * as std from "@pulumi/std";

const getUrl = std.file({
    input: "path/to/credentials.json",
}).then(invoke => gcp.storage.getObjectSignedUrl({
    bucket: "fried_chicken",
    path: "path/to/file",
    contentMd5: "pRviqwS4c4OTJRTe03FD1w==",
    contentType: "text/plain",
    duration: "2d",
    credentials: invoke.result,
    extensionHeaders: {
        "x-goog-if-generation-match": "1",
    },
}));
```
```python
import pulumi
import pulumi_gcp as gcp
import pulumi_std as std

get_url = gcp.storage.get_object_signed_url(bucket="fried_chicken",
    path="path/to/file",
    content_md5="pRviqwS4c4OTJRTe03FD1w==",
    content_type="text/plain",
    duration="2d",
    credentials=std.file(input="path/to/credentials.json").result,
    extension_headers={
        "x-goog-if-generation-match": "1",
    })
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;
using Std = Pulumi.Std;

return await Deployment.RunAsync(() => 
{
    var getUrl = Gcp.Storage.GetObjectSignedUrl.Invoke(new()
    {
        Bucket = "fried_chicken",
        Path = "path/to/file",
        ContentMd5 = "pRviqwS4c4OTJRTe03FD1w==",
        ContentType = "text/plain",
        Duration = "2d",
        Credentials = Std.File.Invoke(new()
        {
            Input = "path/to/credentials.json",
        }).Result,
        ExtensionHeaders = 
        {
            { "x-goog-if-generation-match", "1" },
        },
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi-std/sdk/go/std"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := storage.GetObjectSignedUrl(ctx, &storage.GetObjectSignedUrlArgs{
			Bucket:      "fried_chicken",
			Path:        "path/to/file",
			ContentMd5:  pulumi.StringRef("pRviqwS4c4OTJRTe03FD1w=="),
			ContentType: pulumi.StringRef("text/plain"),
			Duration:    pulumi.StringRef("2d"),
			Credentials: pulumi.StringRef(std.File(ctx, &std.FileArgs{
				Input: "path/to/credentials.json",
			}, nil).Result),
			ExtensionHeaders: map[string]interface{}{
				"x-goog-if-generation-match": "1",
			},
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetObjectSignedUrlArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var getUrl = StorageFunctions.getObjectSignedUrl(GetObjectSignedUrlArgs.builder()
            .bucket("fried_chicken")
            .path("path/to/file")
            .contentMd5("pRviqwS4c4OTJRTe03FD1w==")
            .contentType("text/plain")
            .duration("2d")
            .credentials(StdFunctions.file(FileArgs.builder()
                .input("path/to/credentials.json")
                .build()).result())
            .extensionHeaders(Map.of("x-goog-if-generation-match", 1))
            .build());

    }
}
```
```yaml
variables:
  getUrl:
    fn::invoke:
      function: gcp:storage:getObjectSignedUrl
      arguments:
        bucket: fried_chicken
        path: path/to/file
        contentMd5: pRviqwS4c4OTJRTe03FD1w==
        contentType: text/plain
        duration: 2d
        credentials:
          fn::invoke:
            function: std:file
            arguments:
              input: path/to/credentials.json
            return: result
        extensionHeaders:
          x-goog-if-generation-match: 1
```
<!--End PulumiCodeChooser -->
=
bucket" /The name of the bucket to read the object from
┘

contentMd5B" ─The [MD5 digest](https://cloud.google.com/storage/docs/hashes-etags#_MD5) value in Base64.
Typically retrieved from `google_storage_bucket_object.object.md5hash` attribute.
If you provide this in the datasource, the client (e.g. browser, curl) must provide the `Content-MD5` HTTP header with this same value in its request.
Ш
contentTypeB" ВIf you specify this in the datasource, the client must provide the `Content-Type` HTTP header with the same value in its request.
З
credentialsB" ёWhat Google service account credentials json should be used to sign the URL.
This data source checks the following locations for credentials, in order of preference: data source `credentials` attribute, provider `credentials` attribute and finally the GOOGLE_APPLICATION_CREDENTIALS environment variable.

> **NOTE** the default google credentials configured by `gcloud` sdk or the service account associated with a compute instance cannot be used, because these do not include the private key required to sign the URL. A valid `json` service account credentials key file must be used, as generated via Google cloud console.
╗
durationB" иFor how long shall the signed URL be valid (defaults to 1 hour - i.e. `1h`).
See [here](https://golang.org/pkg/time/#ParseDuration) for info on valid duration formats.
╬
extensionHeadersB2" ▒As needed. The server checks to make sure that the client provides matching values in requests using the signed URL.
Any header starting with `x-goog-` is accepted but see the [Google Docs](https://cloud.google.com/storage/docs/xml-api/reference-headers) for list of headers that are supported by Google.
S

httpMethodB" ?What HTTP Method will the signed URL allow (defaults to `GET`)
:
path" .The full path to the object inside the bucket
"
bucket" "

contentMd5B" "
contentTypeB" "
credentialsB" "
durationB" "
extensionHeadersB2" "

httpMethodB" "E
id" ;The provider-assigned unique ID for this managed resource.
"

path" "f
	signedUrl" UThe signed URL that can be used to access the storage object without authentication.
2шb
b
storagegetProjectServiceAccount=gcp:storage/getProjectServiceAccount:getProjectServiceAccountў[Get the email address of a project's unique [automatic Google Cloud Storage service account](https://cloud.google.com/storage/docs/projects#service-accounts).

For each Google Cloud project, Google maintains a unique service account which
is used as the identity for various Google Cloud Storage operations, including
operations involving
[customer-managed encryption keys](https://cloud.google.com/storage/docs/encryption/customer-managed-keys)
and those involving
[storage notifications to pub/sub](https://cloud.google.com/storage/docs/gsutil/commands/notification).
This automatic Google service account requires access to the relevant Cloud KMS keys or pub/sub topics, respectively, in order for Cloud Storage to use
these customer-managed resources.

The service account has a well-known, documented naming format which is parameterised on the numeric Google project ID.
However, as noted in [the docs](https://cloud.google.com/storage/docs/projects#service-accounts), it is only created when certain relevant actions occur which
presuppose its existence.
These actions include calling a [Cloud Storage API endpoint](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get) to yield the
service account's identity, or performing some operations in the UI which must use the service account's identity, such as attempting to list Cloud KMS keys
on the bucket creation page.

Use of this data source calls the relevant API endpoint to obtain the service account's identity and thus ensures it exists prior to any API operations
which demand its existence, such as specifying it in Cloud IAM policy.
Always prefer to use this data source over interpolating the project ID into the well-known format for this service account, as the latter approach may cause
provider update errors in cases where the service account does not yet exist.

>  When you write provider code which uses features depending on this service account *and* your provider code adds the service account in IAM policy on other resources,
   you must take care for race conditions between the establishment of the IAM policy and creation of the relevant Cloud Storage resource.
   Cloud Storage APIs will require permissions on resources such as pub/sub topics or Cloud KMS keys to exist *before* the attempt to utilise them in a
   bucket configuration, otherwise the API calls will fail.
   You may need to use `depends_on` to create an explicit dependency between the IAM policy resource and the Cloud Storage resource which depends on it.
   See the examples here and in the `gcp.storage.Notification` resource.

For more information see
[the API reference](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount).

## Example Usage

### Pub/Sub Notifications

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const gcsAccount = gcp.storage.getProjectServiceAccount({});
const binding = new gcp.pubsub.TopicIAMBinding("binding", {
    topic: topic.name,
    role: "roles/pubsub.publisher",
    members: [gcsAccount.then(gcsAccount => `serviceAccount:${gcsAccount.emailAddress}`)],
});
```
```python
import pulumi
import pulumi_gcp as gcp

gcs_account = gcp.storage.get_project_service_account()
binding = gcp.pubsub.TopicIAMBinding("binding",
    topic=topic["name"],
    role="roles/pubsub.publisher",
    members=[f"serviceAccount:{gcs_account.email_address}"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var gcsAccount = Gcp.Storage.GetProjectServiceAccount.Invoke();

    var binding = new Gcp.PubSub.TopicIAMBinding("binding", new()
    {
        Topic = topic.Name,
        Role = "roles/pubsub.publisher",
        Members = new[]
        {
            $"serviceAccount:{gcsAccount.Apply(getProjectServiceAccountResult => getProjectServiceAccountResult.EmailAddress)}",
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/pubsub"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		gcsAccount, err := storage.GetProjectServiceAccount(ctx, &storage.GetProjectServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = pubsub.NewTopicIAMBinding(ctx, "binding", &pubsub.TopicIAMBindingArgs{
			Topic: pulumi.Any(topic.Name),
			Role:  pulumi.String("roles/pubsub.publisher"),
			Members: pulumi.StringArray{
				pulumi.Sprintf("serviceAccount:%v", gcsAccount.EmailAddress),
			},
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetProjectServiceAccountArgs;
import com.pulumi.gcp.pubsub.TopicIAMBinding;
import com.pulumi.gcp.pubsub.TopicIAMBindingArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var gcsAccount = StorageFunctions.getProjectServiceAccount();

        var binding = new TopicIAMBinding("binding", TopicIAMBindingArgs.builder()
            .topic(topic.name())
            .role("roles/pubsub.publisher")
            .members(String.format("serviceAccount:%s", gcsAccount.applyValue(getProjectServiceAccountResult -> getProjectServiceAccountResult.emailAddress())))
            .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:pubsub:TopicIAMBinding
    properties:
      topic: ${topic.name}
      role: roles/pubsub.publisher
      members:
        - serviceAccount:${gcsAccount.emailAddress}
variables:
  gcsAccount:
    fn::invoke:
      function: gcp:storage:getProjectServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->


### Cloud KMS Keys

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const gcsAccount = gcp.storage.getProjectServiceAccount({});
const binding = new gcp.kms.CryptoKeyIAMBinding("binding", {
    cryptoKeyId: "your-crypto-key-id",
    role: "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    members: [gcsAccount.then(gcsAccount => `serviceAccount:${gcsAccount.emailAddress}`)],
});
const bucket = new gcp.storage.Bucket("bucket", {
    name: "kms-protected-bucket",
    location: "US",
    encryption: {
        defaultKmsKeyName: "your-crypto-key-id",
    },
}, {
    dependsOn: [binding],
});
```
```python
import pulumi
import pulumi_gcp as gcp

gcs_account = gcp.storage.get_project_service_account()
binding = gcp.kms.CryptoKeyIAMBinding("binding",
    crypto_key_id="your-crypto-key-id",
    role="roles/cloudkms.cryptoKeyEncrypterDecrypter",
    members=[f"serviceAccount:{gcs_account.email_address}"])
bucket = gcp.storage.Bucket("bucket",
    name="kms-protected-bucket",
    location="US",
    encryption={
        "default_kms_key_name": "your-crypto-key-id",
    },
    opts = pulumi.ResourceOptions(depends_on=[binding]))
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var gcsAccount = Gcp.Storage.GetProjectServiceAccount.Invoke();

    var binding = new Gcp.Kms.CryptoKeyIAMBinding("binding", new()
    {
        CryptoKeyId = "your-crypto-key-id",
        Role = "roles/cloudkms.cryptoKeyEncrypterDecrypter",
        Members = new[]
        {
            $"serviceAccount:{gcsAccount.Apply(getProjectServiceAccountResult => getProjectServiceAccountResult.EmailAddress)}",
        },
    });

    var bucket = new Gcp.Storage.Bucket("bucket", new()
    {
        Name = "kms-protected-bucket",
        Location = "US",
        Encryption = new Gcp.Storage.Inputs.BucketEncryptionArgs
        {
            DefaultKmsKeyName = "your-crypto-key-id",
        },
    }, new CustomResourceOptions
    {
        DependsOn =
        {
            binding,
        },
    });

});
```
```go
package main

import (
	"fmt"

	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/kms"
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		gcsAccount, err := storage.GetProjectServiceAccount(ctx, &storage.GetProjectServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		binding, err := kms.NewCryptoKeyIAMBinding(ctx, "binding", &kms.CryptoKeyIAMBindingArgs{
			CryptoKeyId: pulumi.String("your-crypto-key-id"),
			Role:        pulumi.String("roles/cloudkms.cryptoKeyEncrypterDecrypter"),
			Members: pulumi.StringArray{
				pulumi.Sprintf("serviceAccount:%v", gcsAccount.EmailAddress),
			},
		})
		if err != nil {
			return err
		}
		_, err = storage.NewBucket(ctx, "bucket", &storage.BucketArgs{
			Name:     pulumi.String("kms-protected-bucket"),
			Location: pulumi.String("US"),
			Encryption: &storage.BucketEncryptionArgs{
				DefaultKmsKeyName: pulumi.String("your-crypto-key-id"),
			},
		}, pulumi.DependsOn([]pulumi.Resource{
			binding,
		}))
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetProjectServiceAccountArgs;
import com.pulumi.gcp.kms.CryptoKeyIAMBinding;
import com.pulumi.gcp.kms.CryptoKeyIAMBindingArgs;
import com.pulumi.gcp.storage.Bucket;
import com.pulumi.gcp.storage.BucketArgs;
import com.pulumi.gcp.storage.inputs.BucketEncryptionArgs;
import com.pulumi.resources.CustomResourceOptions;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var gcsAccount = StorageFunctions.getProjectServiceAccount();

        var binding = new CryptoKeyIAMBinding("binding", CryptoKeyIAMBindingArgs.builder()
            .cryptoKeyId("your-crypto-key-id")
            .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
            .members(String.format("serviceAccount:%s", gcsAccount.applyValue(getProjectServiceAccountResult -> getProjectServiceAccountResult.emailAddress())))
            .build());

        var bucket = new Bucket("bucket", BucketArgs.builder()
            .name("kms-protected-bucket")
            .location("US")
            .encryption(BucketEncryptionArgs.builder()
                .defaultKmsKeyName("your-crypto-key-id")
                .build())
            .build(), CustomResourceOptions.builder()
                .dependsOn(binding)
                .build());

    }
}
```
```yaml
resources:
  binding:
    type: gcp:kms:CryptoKeyIAMBinding
    properties:
      cryptoKeyId: your-crypto-key-id
      role: roles/cloudkms.cryptoKeyEncrypterDecrypter
      members:
        - serviceAccount:${gcsAccount.emailAddress}
  bucket:
    type: gcp:storage:Bucket
    properties:
      name: kms-protected-bucket
      location: US
      encryption:
        defaultKmsKeyName: your-crypto-key-id
    options:
      dependsOn:
        - ${binding}
variables:
  gcsAccount:
    fn::invoke:
      function: gcp:storage:getProjectServiceAccount
      arguments: {}
```
<!--End PulumiCodeChooser -->
~
projectB" mThe project the unique service account was created for. If it is not provided, the provider project is used.
╛
userProjectB" иThe project the lookup originates from. This field is used if you are making the request
from a different account than the one you are finding the service account for.
"Ы
emailAddress" ЖThe email address of the service account. This value is often used to refer to the service account
in order to grant IAM permissions.
"E
id" ;The provider-assigned unique ID for this managed resource.
"╜
member" оThe Identity of the service account in the form `serviceAccount:{email_address}`. This value is often used to refer to the service account in order to grant IAM permissions.
"
project" "
userProjectB" 2Ж
z
storage getTransferProjectServiceAccountMgcp:storage/getTransferProjectServiceAccount:getTransferProjectServiceAccountЁUse this data source to retrieve Storage Transfer service account for this project

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.storage.getTransferProjectServiceAccount({});
export const defaultAccount = _default.then(_default => _default.email);
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.storage.get_transfer_project_service_account()
pulumi.export("defaultAccount", default.email)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Storage.GetTransferProjectServiceAccount.Invoke();

    return new Dictionary<string, object?>
    {
        ["defaultAccount"] = @default.Apply(@default => @default.Apply(getTransferProjectServiceAccountResult => getTransferProjectServiceAccountResult.Email)),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := storage.GetTransferProjectServiceAccount(ctx, &storage.GetTransferProjectServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		ctx.Export("defaultAccount", _default.Email)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetTransferProjectServiceAccountArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = StorageFunctions.getTransferProjectServiceAccount();

        ctx.export("defaultAccount", default_.email());
    }
}
```
```yaml
variables:
  default:
    fn::invoke:
      function: gcp:storage:getTransferProjectServiceAccount
      arguments: {}
outputs:
  defaultAccount: ${default.email}
```
<!--End PulumiCodeChooser -->
V
projectB" EThe project ID. If it is not provided, the provider project is used.
"q
email" dEmail address of the default service account used by Storage Transfer Jobs running in this project.
"E
id" ;The provider-assigned unique ID for this managed resource.
"╡
member" жThe Identity of the service account in the form `serviceAccount:{email}`. This value is often used to refer to the service account in order to grant IAM permissions.
"
project" "<
	subjectId" +Unique identifier for the service account.
2Г
w
storagegetTransferProjectServieAccountKgcp:storage/getTransferProjectServieAccount:getTransferProjectServieAccountЁUse this data source to retrieve Storage Transfer service account for this project

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const default = gcp.storage.getTransferProjectServiceAccount({});
export const defaultAccount = _default.then(_default => _default.email);
```
```python
import pulumi
import pulumi_gcp as gcp

default = gcp.storage.get_transfer_project_service_account()
pulumi.export("defaultAccount", default.email)
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var @default = Gcp.Storage.GetTransferProjectServiceAccount.Invoke();

    return new Dictionary<string, object?>
    {
        ["defaultAccount"] = @default.Apply(@default => @default.Apply(getTransferProjectServiceAccountResult => getTransferProjectServiceAccountResult.Email)),
    };
});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/storage"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_default, err := storage.GetTransferProjectServiceAccount(ctx, &storage.GetTransferProjectServiceAccountArgs{}, nil)
		if err != nil {
			return err
		}
		ctx.Export("defaultAccount", _default.Email)
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.storage.StorageFunctions;
import com.pulumi.gcp.storage.inputs.GetTransferProjectServiceAccountArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var default = StorageFunctions.getTransferProjectServiceAccount();

        ctx.export("defaultAccount", default_.email());
    }
}
```
```yaml
variables:
  default:
    fn::invoke:
      function: gcp:storage:getTransferProjectServiceAccount
      arguments: {}
outputs:
  defaultAccount: ${default.email}
```
<!--End PulumiCodeChooser -->
V
projectB" EThe project ID. If it is not provided, the provider project is used.
"q
email" dEmail address of the default service account used by Storage Transfer Jobs running in this project.
"E
id" ;The provider-assigned unique ID for this managed resource.
"╡
member" жThe Identity of the service account in the form `serviceAccount:{email}`. This value is often used to refer to the service account in order to grant IAM permissions.
"
project" "<
	subjectId" +Unique identifier for the service account.
2Ц'
/
tags	getTagKeygcp:tags/getTagKey:getTagKey╥Get a tag key by org or project `parent` and `short_name`.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const environmentTagKey = gcp.tags.getTagKey({
    parent: "organizations/12345",
    shortName: "environment",
});
```
```python
import pulumi
import pulumi_gcp as gcp

environment_tag_key = gcp.tags.get_tag_key(parent="organizations/12345",
    short_name="environment")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var environmentTagKey = Gcp.Tags.GetTagKey.Invoke(new()
    {
        Parent = "organizations/12345",
        ShortName = "environment",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.LookupTagKey(ctx, &tags.LookupTagKeyArgs{
			Parent:    "organizations/12345",
			ShortName: "environment",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagsFunctions;
import com.pulumi.gcp.tags.inputs.GetTagKeyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var environmentTagKey = TagsFunctions.getTagKey(GetTagKeyArgs.builder()
            .parent("organizations/12345")
            .shortName("environment")
            .build());

    }
}
```
```yaml
variables:
  environmentTagKey:
    fn::invoke:
      function: gcp:tags:getTagKey
      arguments:
        parent: organizations/12345
        shortName: environment
```
<!--End PulumiCodeChooser -->
<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const environmentTagKey = gcp.tags.getTagKey({
    parent: "projects/abc",
    shortName: "environment",
});
```
```python
import pulumi
import pulumi_gcp as gcp

environment_tag_key = gcp.tags.get_tag_key(parent="projects/abc",
    short_name="environment")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var environmentTagKey = Gcp.Tags.GetTagKey.Invoke(new()
    {
        Parent = "projects/abc",
        ShortName = "environment",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.LookupTagKey(ctx, &tags.LookupTagKeyArgs{
			Parent:    "projects/abc",
			ShortName: "environment",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagsFunctions;
import com.pulumi.gcp.tags.inputs.GetTagKeyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var environmentTagKey = TagsFunctions.getTagKey(GetTagKeyArgs.builder()
            .parent("projects/abc")
            .shortName("environment")
            .build());

    }
}
```
```yaml
variables:
  environmentTagKey:
    fn::invoke:
      function: gcp:tags:getTagKey
      arguments:
        parent: projects/abc
        shortName: environment
```
<!--End PulumiCodeChooser -->
Ы
parent" МThe resource name of the parent organization or project. It can be in format `organizations/{org_id}` or `projects/{project_id_or_number}`.
+
	shortName" The tag key's short_name.
"╨

createTime" ╜Creation time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"
description" "H
id" >an identifier for the resource with format `tagKeys/{{name}}`
"5
name" )The generated numeric id for the TagKey.
"l
namespacedName" VNamespaced name of the TagKey which is in the format `{parentNamespace}/{shortName}`.
"
parent" "
	shortName" "╬

updateTime" ╗Update time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
2▌
J
tagsgetTagKeyIamPolicy.gcp:tags/getTagKeyIamPolicy:getTagKeyIamPolicyйRetrieves the current IAM policy data for tagkey


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.tags.getTagKeyIamPolicy({
    tagKey: key.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.tags.get_tag_key_iam_policy(tag_key=key["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.Tags.GetTagKeyIamPolicy.Invoke(new()
    {
        TagKey = key.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.LookupTagKeyIamPolicy(ctx, &tags.LookupTagKeyIamPolicyArgs{
			TagKey: key.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagsFunctions;
import com.pulumi.gcp.tags.inputs.GetTagKeyIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = TagsFunctions.getTagKeyIamPolicy(GetTagKeyIamPolicyArgs.builder()
            .tagKey(key.name())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:tags:getTagKeyIamPolicy
      arguments:
        tagKey: ${key.name}
```
<!--End PulumiCodeChooser -->
I
tagKey" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"Н

policyData" {(Required only by `gcp.tags.TagKeyIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
tagKey" 2Ч 
2
tags
getTagKeysgcp:tags/getTagKeys:getTagKeys╛Get tag keys by org or project `parent`.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const environmentTagKey = gcp.tags.getTagKeys({
    parent: "organizations/12345",
});
```
```python
import pulumi
import pulumi_gcp as gcp

environment_tag_key = gcp.tags.get_tag_keys(parent="organizations/12345")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var environmentTagKey = Gcp.Tags.GetTagKeys.Invoke(new()
    {
        Parent = "organizations/12345",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.GetTagKeys(ctx, &tags.GetTagKeysArgs{
			Parent: "organizations/12345",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagsFunctions;
import com.pulumi.gcp.tags.inputs.GetTagKeysArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var environmentTagKey = TagsFunctions.getTagKeys(GetTagKeysArgs.builder()
            .parent("organizations/12345")
            .build());

    }
}
```
```yaml
variables:
  environmentTagKey:
    fn::invoke:
      function: gcp:tags:getTagKeys
      arguments:
        parent: organizations/12345
```
<!--End PulumiCodeChooser -->
<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const environmentTagKey = gcp.tags.getTagKeys({
    parent: "projects/abc",
});
```
```python
import pulumi
import pulumi_gcp as gcp

environment_tag_key = gcp.tags.get_tag_keys(parent="projects/abc")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var environmentTagKey = Gcp.Tags.GetTagKeys.Invoke(new()
    {
        Parent = "projects/abc",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.GetTagKeys(ctx, &tags.GetTagKeysArgs{
			Parent: "projects/abc",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagsFunctions;
import com.pulumi.gcp.tags.inputs.GetTagKeysArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var environmentTagKey = TagsFunctions.getTagKeys(GetTagKeysArgs.builder()
            .parent("projects/abc")
            .build());

    }
}
```
```yaml
variables:
  environmentTagKey:
    fn::invoke:
      function: gcp:tags:getTagKeys
      arguments:
        parent: projects/abc
```
<!--End PulumiCodeChooser -->
Ы
parent" МThe resource name of the parent organization or project. It can be in format `organizations/{org_id}` or `projects/{project_id_or_number}`.
"E
id" ;The provider-assigned unique ID for this managed resource.
"I
keysA*?:=
;
tagsgetTagKeysKey$gcp:tags/getTagKeysKey:getTagKeysKey"p
parent" bThe resource name of the TagKey's parent. A TagKey can be parented by an Orgination or a Project.
2Є
5
tagsgetTagValue gcp:tags/getTagValue:getTagValueгGet a tag value by `parent` key and `short_name`.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const environmentProdTagValue = gcp.tags.getTagValue({
    parent: "tagKeys/56789",
    shortName: "production",
});
```
```python
import pulumi
import pulumi_gcp as gcp

environment_prod_tag_value = gcp.tags.get_tag_value(parent="tagKeys/56789",
    short_name="production")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var environmentProdTagValue = Gcp.Tags.GetTagValue.Invoke(new()
    {
        Parent = "tagKeys/56789",
        ShortName = "production",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.LookupTagValue(ctx, &tags.LookupTagValueArgs{
			Parent:    "tagKeys/56789",
			ShortName: "production",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagsFunctions;
import com.pulumi.gcp.tags.inputs.GetTagValueArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var environmentProdTagValue = TagsFunctions.getTagValue(GetTagValueArgs.builder()
            .parent("tagKeys/56789")
            .shortName("production")
            .build());

    }
}
```
```yaml
variables:
  environmentProdTagValue:
    fn::invoke:
      function: gcp:tags:getTagValue
      arguments:
        parent: tagKeys/56789
        shortName: production
```
<!--End PulumiCodeChooser -->
P
parent" BThe resource name of the parent tagKey in format `tagKey/{name}`.
-
	shortName" The tag value's short_name.
"╨

createTime" ╜Creation time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
"
description" "J
id" @an identifier for the resource with format `tagValues/{{name}}`
"7
name" +The generated numeric id for the TagValue.
"7
namespacedName" !Namespaced name of the TagValue.
"
parent" "
	shortName" "╬

updateTime" ╗Update time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
2Ц
P
tagsgetTagValueIamPolicy2gcp:tags/getTagValueIamPolicy:getTagValueIamPolicy╓Retrieves the current IAM policy data for tagvalue


## example

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const policy = gcp.tags.getTagValueIamPolicy({
    tagValue: value.name,
});
```
```python
import pulumi
import pulumi_gcp as gcp

policy = gcp.tags.get_tag_value_iam_policy(tag_value=value["name"])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var policy = Gcp.Tags.GetTagValueIamPolicy.Invoke(new()
    {
        TagValue = @value.Name,
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.LookupTagValueIamPolicy(ctx, &tags.LookupTagValueIamPolicyArgs{
			TagValue: value.Name,
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagsFunctions;
import com.pulumi.gcp.tags.inputs.GetTagValueIamPolicyArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var policy = TagsFunctions.getTagValueIamPolicy(GetTagValueIamPolicyArgs.builder()
            .tagValue(value.name())
            .build());

    }
}
```
```yaml
variables:
  policy:
    fn::invoke:
      function: gcp:tags:getTagValueIamPolicy
      arguments:
        tagValue: ${value.name}
```
<!--End PulumiCodeChooser -->
K
tagValue" ;Used to find the parent resource to bind the IAM policy to
"3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"П

policyData" }(Required only by `gcp.tags.TagValueIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
tagValue" 2ъ
8
tagsgetTagValues"gcp:tags/getTagValues:getTagValues╩Get tag values from a `parent` key.

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const environmentTagValues = gcp.tags.getTagValues({
    parent: "tagKeys/56789",
});
```
```python
import pulumi
import pulumi_gcp as gcp

environment_tag_values = gcp.tags.get_tag_values(parent="tagKeys/56789")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var environmentTagValues = Gcp.Tags.GetTagValues.Invoke(new()
    {
        Parent = "tagKeys/56789",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tags"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tags.GetTagValues(ctx, &tags.GetTagValuesArgs{
			Parent: "tagKeys/56789",
		}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tags.TagsFunctions;
import com.pulumi.gcp.tags.inputs.GetTagValuesArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var environmentTagValues = TagsFunctions.getTagValues(GetTagValuesArgs.builder()
            .parent("tagKeys/56789")
            .build());

    }
}
```
```yaml
variables:
  environmentTagValues:
    fn::invoke:
      function: gcp:tags:getTagValues
      arguments:
        parent: tagKeys/56789
```
<!--End PulumiCodeChooser -->
P
parent" BThe resource name of the parent tagKey in format `tagKey/{name}`.
"E
id" ;The provider-assigned unique ID for this managed resource.
"o
parent" aThe resource name of the new TagValue's parent TagKey. Must be of the form tagKeys/{tag_key_id}.
"W
valuesM*K:I
G
tagsgetTagValuesValue,gcp:tags/getTagValuesValue:getTagValuesValue2√+
Q
tpugetTensorflowVersions3gcp:tpu/getTensorflowVersions:getTensorflowVersionsЪ(Get TensorFlow versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v1/projects.locations.tensorflowVersions).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const available = gcp.tpu.getTensorflowVersions({});
```
```python
import pulumi
import pulumi_gcp as gcp

available = gcp.tpu.get_tensorflow_versions()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.Tpu.GetTensorflowVersions.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tpu.GetTensorflowVersions(ctx, &tpu.GetTensorflowVersionsArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tpu.TpuFunctions;
import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = TpuFunctions.getTensorflowVersions();

    }
}
```
```yaml
variables:
  available:
    fn::invoke:
      function: gcp:tpu:getTensorflowVersions
      arguments: {}
```
<!--End PulumiCodeChooser -->


### Configure Basic TPU Node With Available Version

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const available = gcp.tpu.getTensorflowVersions({});
const tpu = new gcp.tpu.Node("tpu", {
    name: "test-tpu",
    zone: "us-central1-b",
    acceleratorType: "v3-8",
    tensorflowVersion: available.then(available => available.versions?.[0]),
    cidrBlock: "10.2.0.0/29",
});
```
```python
import pulumi
import pulumi_gcp as gcp

available = gcp.tpu.get_tensorflow_versions()
tpu = gcp.tpu.Node("tpu",
    name="test-tpu",
    zone="us-central1-b",
    accelerator_type="v3-8",
    tensorflow_version=available.versions[0],
    cidr_block="10.2.0.0/29")
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.Tpu.GetTensorflowVersions.Invoke();

    var tpu = new Gcp.Tpu.Node("tpu", new()
    {
        Name = "test-tpu",
        Zone = "us-central1-b",
        AcceleratorType = "v3-8",
        TensorflowVersion = available.Apply(getTensorflowVersionsResult => getTensorflowVersionsResult.Versions[0]),
        CidrBlock = "10.2.0.0/29",
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		available, err := tpu.GetTensorflowVersions(ctx, &tpu.GetTensorflowVersionsArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = tpu.NewNode(ctx, "tpu", &tpu.NodeArgs{
			Name:              pulumi.String("test-tpu"),
			Zone:              pulumi.String("us-central1-b"),
			AcceleratorType:   pulumi.String("v3-8"),
			TensorflowVersion: pulumi.String(available.Versions[0]),
			CidrBlock:         pulumi.String("10.2.0.0/29"),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tpu.TpuFunctions;
import com.pulumi.gcp.tpu.inputs.GetTensorflowVersionsArgs;
import com.pulumi.gcp.tpu.Node;
import com.pulumi.gcp.tpu.NodeArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = TpuFunctions.getTensorflowVersions();

        var tpu = new Node("tpu", NodeArgs.builder()
            .name("test-tpu")
            .zone("us-central1-b")
            .acceleratorType("v3-8")
            .tensorflowVersion(available.applyValue(getTensorflowVersionsResult -> getTensorflowVersionsResult.versions()[0]))
            .cidrBlock("10.2.0.0/29")
            .build());

    }
}
```
```yaml
resources:
  tpu:
    type: gcp:tpu:Node
    properties:
      name: test-tpu
      zone: us-central1-b
      acceleratorType: v3-8
      tensorflowVersion: ${available.versions[0]}
      cidrBlock: 10.2.0.0/29
variables:
  available:
    fn::invoke:
      function: gcp:tpu:getTensorflowVersions
      arguments: {}
```
<!--End PulumiCodeChooser -->
h
projectB" WThe project to list versions for. If it
is not provided, the provider project is used.
_
zoneB" QThe zone to list versions for. If it
is not provided, the provider zone is used.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
project" "\
versions*" JThe list of TensorFlow versions available for the given project and zone.
"

zone" 2Ж2
Q
tpugetV2AcceleratorTypes3gcp:tpu/getV2AcceleratorTypes:getV2AcceleratorTypes░.Get accelerator types available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.acceleratorTypes).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const available = gcp.tpu.getV2AcceleratorTypes({});
```
```python
import pulumi
import pulumi_gcp as gcp

available = gcp.tpu.get_v2_accelerator_types()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.Tpu.GetV2AcceleratorTypes.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tpu.GetV2AcceleratorTypes(ctx, &tpu.GetV2AcceleratorTypesArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tpu.TpuFunctions;
import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = TpuFunctions.getV2AcceleratorTypes();

    }
}
```
```yaml
variables:
  available:
    fn::invoke:
      function: gcp:tpu:getV2AcceleratorTypes
      arguments: {}
```
<!--End PulumiCodeChooser -->


### Configure Basic TPU VM With Available Type

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const available = gcp.tpu.getV2AcceleratorTypes({});
const availableGetV2RuntimeVersions = gcp.tpu.getV2RuntimeVersions({});
const tpu = new gcp.tpu.V2Vm("tpu", {
    name: "test-tpu",
    zone: "us-central1-b",
    runtimeVersion: availableGetV2RuntimeVersions.then(availableGetV2RuntimeVersions => availableGetV2RuntimeVersions.versions?.[0]),
    acceleratorType: available.then(available => available.types?.[0]),
});
```
```python
import pulumi
import pulumi_gcp as gcp

available = gcp.tpu.get_v2_accelerator_types()
available_get_v2_runtime_versions = gcp.tpu.get_v2_runtime_versions()
tpu = gcp.tpu.V2Vm("tpu",
    name="test-tpu",
    zone="us-central1-b",
    runtime_version=available_get_v2_runtime_versions.versions[0],
    accelerator_type=available.types[0])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.Tpu.GetV2AcceleratorTypes.Invoke();

    var availableGetV2RuntimeVersions = Gcp.Tpu.GetV2RuntimeVersions.Invoke();

    var tpu = new Gcp.Tpu.V2Vm("tpu", new()
    {
        Name = "test-tpu",
        Zone = "us-central1-b",
        RuntimeVersion = availableGetV2RuntimeVersions.Apply(getV2RuntimeVersionsResult => getV2RuntimeVersionsResult.Versions[0]),
        AcceleratorType = available.Apply(getV2AcceleratorTypesResult => getV2AcceleratorTypesResult.Types[0]),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		available, err := tpu.GetV2AcceleratorTypes(ctx, &tpu.GetV2AcceleratorTypesArgs{}, nil)
		if err != nil {
			return err
		}
		availableGetV2RuntimeVersions, err := tpu.GetV2RuntimeVersions(ctx, &tpu.GetV2RuntimeVersionsArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = tpu.NewV2Vm(ctx, "tpu", &tpu.V2VmArgs{
			Name:            pulumi.String("test-tpu"),
			Zone:            pulumi.String("us-central1-b"),
			RuntimeVersion:  pulumi.String(availableGetV2RuntimeVersions.Versions[0]),
			AcceleratorType: pulumi.String(available.Types[0]),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tpu.TpuFunctions;
import com.pulumi.gcp.tpu.inputs.GetV2AcceleratorTypesArgs;
import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
import com.pulumi.gcp.tpu.V2Vm;
import com.pulumi.gcp.tpu.V2VmArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = TpuFunctions.getV2AcceleratorTypes();

        final var availableGetV2RuntimeVersions = TpuFunctions.getV2RuntimeVersions();

        var tpu = new V2Vm("tpu", V2VmArgs.builder()
            .name("test-tpu")
            .zone("us-central1-b")
            .runtimeVersion(availableGetV2RuntimeVersions.applyValue(getV2RuntimeVersionsResult -> getV2RuntimeVersionsResult.versions()[0]))
            .acceleratorType(available.applyValue(getV2AcceleratorTypesResult -> getV2AcceleratorTypesResult.types()[0]))
            .build());

    }
}
```
```yaml
resources:
  tpu:
    type: gcp:tpu:V2Vm
    properties:
      name: test-tpu
      zone: us-central1-b
      runtimeVersion: ${availableGetV2RuntimeVersions.versions[0]}
      acceleratorType: ${available.types[0]}
variables:
  available:
    fn::invoke:
      function: gcp:tpu:getV2AcceleratorTypes
      arguments: {}
  availableGetV2RuntimeVersions:
    fn::invoke:
      function: gcp:tpu:getV2RuntimeVersions
      arguments: {}
```
<!--End PulumiCodeChooser -->
e
projectB" TThe project to list types for. If it
is not provided, the provider project is used.
\
zoneB" NThe zone to list types for. If it
is not provided, the provider zone is used.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
project" "W
types*" HThe list of accelerator types available for the given project and zone.
"

zone" 2г(
N
tpugetV2RuntimeVersions1gcp:tpu/getV2RuntimeVersions:getV2RuntimeVersions╚$Get runtime versions available for a project. For more information see the [official documentation](https://cloud.google.com/tpu/docs/) and [API](https://cloud.google.com/tpu/docs/reference/rest/v2/projects.locations.runtimeVersions).

## Example Usage

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const available = gcp.tpu.getV2RuntimeVersions({});
```
```python
import pulumi
import pulumi_gcp as gcp

available = gcp.tpu.get_v2_runtime_versions()
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.Tpu.GetV2RuntimeVersions.Invoke();

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		_, err := tpu.GetV2RuntimeVersions(ctx, &tpu.GetV2RuntimeVersionsArgs{}, nil)
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tpu.TpuFunctions;
import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = TpuFunctions.getV2RuntimeVersions();

    }
}
```
```yaml
variables:
  available:
    fn::invoke:
      function: gcp:tpu:getV2RuntimeVersions
      arguments: {}
```
<!--End PulumiCodeChooser -->


### Configure Basic TPU VM With Available Version

<!--Start PulumiCodeChooser -->
```typescript
import * as pulumi from "@pulumi/pulumi";
import * as gcp from "@pulumi/gcp";

const available = gcp.tpu.getV2RuntimeVersions({});
const tpu = new gcp.tpu.V2Vm("tpu", {
    name: "test-tpu",
    zone: "us-central1-b",
    runtimeVersion: available.then(available => available.versions?.[0]),
});
```
```python
import pulumi
import pulumi_gcp as gcp

available = gcp.tpu.get_v2_runtime_versions()
tpu = gcp.tpu.V2Vm("tpu",
    name="test-tpu",
    zone="us-central1-b",
    runtime_version=available.versions[0])
```
```csharp
using System.Collections.Generic;
using System.Linq;
using Pulumi;
using Gcp = Pulumi.Gcp;

return await Deployment.RunAsync(() => 
{
    var available = Gcp.Tpu.GetV2RuntimeVersions.Invoke();

    var tpu = new Gcp.Tpu.V2Vm("tpu", new()
    {
        Name = "test-tpu",
        Zone = "us-central1-b",
        RuntimeVersion = available.Apply(getV2RuntimeVersionsResult => getV2RuntimeVersionsResult.Versions[0]),
    });

});
```
```go
package main

import (
	"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/tpu"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		available, err := tpu.GetV2RuntimeVersions(ctx, &tpu.GetV2RuntimeVersionsArgs{}, nil)
		if err != nil {
			return err
		}
		_, err = tpu.NewV2Vm(ctx, "tpu", &tpu.V2VmArgs{
			Name:           pulumi.String("test-tpu"),
			Zone:           pulumi.String("us-central1-b"),
			RuntimeVersion: pulumi.String(available.Versions[0]),
		})
		if err != nil {
			return err
		}
		return nil
	})
}
```
```java
package generated_program;

import com.pulumi.Context;
import com.pulumi.Pulumi;
import com.pulumi.core.Output;
import com.pulumi.gcp.tpu.TpuFunctions;
import com.pulumi.gcp.tpu.inputs.GetV2RuntimeVersionsArgs;
import com.pulumi.gcp.tpu.V2Vm;
import com.pulumi.gcp.tpu.V2VmArgs;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class App {
    public static void main(String[] args) {
        Pulumi.run(App::stack);
    }

    public static void stack(Context ctx) {
        final var available = TpuFunctions.getV2RuntimeVersions();

        var tpu = new V2Vm("tpu", V2VmArgs.builder()
            .name("test-tpu")
            .zone("us-central1-b")
            .runtimeVersion(available.applyValue(getV2RuntimeVersionsResult -> getV2RuntimeVersionsResult.versions()[0]))
            .build());

    }
}
```
```yaml
resources:
  tpu:
    type: gcp:tpu:V2Vm
    properties:
      name: test-tpu
      zone: us-central1-b
      runtimeVersion: ${available.versions[0]}
variables:
  available:
    fn::invoke:
      function: gcp:tpu:getV2RuntimeVersions
      arguments: {}
```
<!--End PulumiCodeChooser -->
h
projectB" WThe project to list versions for. If it
is not provided, the provider project is used.
_
zoneB" QThe zone to list versions for. If it
is not provided, the provider zone is used.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
project" "Y
versions*" GThe list of runtime versions available for the given project and zone.
"

zone" 2╟
Z
vertexgetAiEndpointIamPolicy8gcp:vertex/getAiEndpointIamPolicy:getAiEndpointIamPolicyK
endpoint" ;Used to find the parent resource to bind the IAM policy to
├
locationB" ░The location for the resource Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
location is specified, it is taken from the provider configuration.
У
projectB" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
"
endpoint" "3
etag" '(Computed) The etag of the IAM policy.
"E
id" ;The provider-assigned unique ID for this managed resource.
"
location" "Ф

policyData" Б(Required only by `gcp.vertex.AiEndpointIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" 2щ
Д
vertex$getAiFeaturestoreEntitytypeIamPolicyTgcp:vertex/getAiFeaturestoreEntitytypeIamPolicy:getAiFeaturestoreEntitytypeIamPolicyM

entitytype" ;Used to find the parent resource to bind the IAM policy to
╔
featurestore" ┤The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
"

entitytype" "3
etag" '(Computed) The etag of the IAM policy.
"
featurestore" "E
id" ;The provider-assigned unique ID for this managed resource.
"в

policyData" П(Required only by `gcp.vertex.AiFeatureStoreEntityTypeIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
2у
f
vertexgetAiFeaturestoreIamPolicy@gcp:vertex/getAiFeaturestoreIamPolicy:getAiFeaturestoreIamPolicyO
featurestore" ;Used to find the parent resource to bind the IAM policy to
У
projectB" БThe ID of the project in which the resource belongs.
If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
╔
regionB" ╕The region of the dataset. eg us-central1 Used to find the parent resource to bind the IAM policy to. If not specified,
the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
region is specified, it is taken from the provider configuration.
"3
etag" '(Computed) The etag of the IAM policy.
"
featurestore" "E
id" ;The provider-assigned unique ID for this managed resource.
"Ш

policyData" Е(Required only by `gcp.vertex.AiFeatureStoreIamPolicy`) The policy data generated by
a `gcp.organizations.getIAMPolicy` data source.
"
project" "
region" 2х
6
vertex
getAiIndex gcp:vertex/getAiIndex:getAiIndexТA representation of a collection of database items organized in a way that allows for approximate nearest neighbor (a.k.a ANN) algorithms search.
#
name" The name of the index.
F
projectB" 5The ID of the project in which the resource belongs.
.
region"  The region of the index.

- - -
"

createTime" "v
deployedIndexesc*a:_
]
vertexgetAiIndexDeployedIndex:gcp:vertex/getAiIndexDeployedIndex:getAiIndexDeployedIndex"
description" "
displayName" "
effectiveLabels2" "

etag" "E
id" ;The provider-assigned unique ID for this managed resource.
"e

indexStatsW*U:S
Q
vertexgetAiIndexIndexStat2gcp:vertex/getAiIndexIndexStat:getAiIndexIndexStat"
indexUpdateMethod" "
labels2" "
metadataSchemaUri" "a
	metadatasT*R:P
N
vertexgetAiIndexMetadata0gcp:vertex/getAiIndexMetadata:getAiIndexMetadata"

name" "
projectB" "
pulumiLabels2" "
region" "

updateTime" :ы
Y
siteverificationWebResourceSite4gcp:siteverification/WebResourceSite:WebResourceSiteН
Ки

identifier" ХThe site identifier. If the type is set to SITE, the identifier is a URL. If the type is
set to INET_DOMAIN, the identifier is a domain name.

- - -
]
type" QThe type of resource to be verified.
Possible values are: `INET_DOMAIN`, `SITE`.
:▒
w

sourcerepoRepositoryIamBindingConditionJgcp:sourcerepo/RepositoryIamBindingCondition:RepositoryIamBindingCondition6
4
descriptionB" 

expression" 
title" :о
t

sourcerepoRepositoryIamMemberConditionHgcp:sourcerepo/RepositoryIamMemberCondition:RepositoryIamMemberCondition6
4
descriptionB" 

expression" 
title" :Ь
b

sourcerepoRepositoryPubsubConfig<gcp:sourcerepo/RepositoryPubsubConfig:RepositoryPubsubConfig╡
▓■
messageFormat" шThe format of the Cloud Pub/Sub messages.
- PROTOBUF: The message payload is a serialized protocol buffer of SourceRepoEvent.
- JSON: The message payload is a JSON string of SourceRepoEvent.
Possible values are: `PROTOBUF`, `JSON`.
ч
serviceAccountEmailB" ╔Email address of the service account used for publishing Cloud Pub/Sub messages.
This service account needs to be in the same project as the PubsubConfig. When added,
the caller needs to have iam.serviceAccounts.actAs permission on this service account.
If unspecified, it defaults to the compute engine default service account.
E
topic" 8The identifier for this object. Format specified above.
:ц
k

sourcerepogetRepositoryPubsubConfigBgcp:sourcerepo/getRepositoryPubsubConfig:getRepositoryPubsubConfigЎ
є√
messageFormat" хThe format of the Cloud Pub/Sub messages.
- PROTOBUF: The message payload is a serialized protocol buffer of SourceRepoEvent.
- JSON: The message payload is a JSON string of SourceRepoEvent. Possible values: ["PROTOBUF", "JSON"]
х
serviceAccountEmail" ╔Email address of the service account used for publishing Cloud Pub/Sub messages.
This service account needs to be in the same project as the PubsubConfig. When added,
the caller needs to have iam.serviceAccounts.actAs permission on this service account.
If unspecified, it defaults to the compute engine default service account.

topic" :t
n
spannerBackupScheduleFullBackupSpecEgcp:spanner/BackupScheduleFullBackupSpec:BackupScheduleFullBackupSpec
 :К
Г
spanner#BackupScheduleIncrementalBackupSpecSgcp:spanner/BackupScheduleIncrementalBackupSpec:BackupScheduleIncrementalBackupSpec
 :Ъ
P
spannerBackupScheduleSpec1gcp:spanner/BackupScheduleSpec:BackupScheduleSpec┼
┬┐
cronSpecnBl:j
h
spannerBackupScheduleSpecCronSpecAgcp:spanner/BackupScheduleSpecCronSpec:BackupScheduleSpecCronSpecCCron style schedule specification..
Structure is documented below.
:│
h
spannerBackupScheduleSpecCronSpecAgcp:spanner/BackupScheduleSpecCronSpec:BackupScheduleSpecCronSpec╞
├└
textB" ▒Textual representation of the crontab. User can customize the
backup frequency and the backup version time using the cron
expression. The version time must be in UTC timzeone.
The backup will contain an externally consistent copy of the
database at the version time. Allowed frequencies are 12 hour, 1 day,
1 week and 1 month. Examples of valid cron specifications:
0 2/12 * * * : every 12 hours at (2, 14) hours past midnight in UTC.
0 2,14 * * * : every 12 hours at (2,14) hours past midnight in UTC.
0 2 * * *    : once a day at 2 past midnight in UTC.
0 2 * * 0    : once a week every Sunday at 2 past midnight in UTC.
0 2 8 * *    : once a month on 8th day at 2 past midnight in UTC.
:н
b
spannerDatabaseEncryptionConfig=gcp:spanner/DatabaseEncryptionConfig:DatabaseEncryptionConfig╞
├Ь

kmsKeyNameB" ЗFully qualified name of the KMS key to use to encrypt this database. This key must exist
in the same location as the Spanner Database.
б
kmsKeyNamesB*" ЙFully qualified name of the KMS keys to use to encrypt this database. The keys must exist
in the same locations as the Spanner Database.
:┴
k
spannerDatabaseIAMBindingConditionCgcp:spanner/DatabaseIAMBindingCondition:DatabaseIAMBindingCondition╤
╬
descriptionB" `

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:╛
h
spannerDatabaseIAMMemberConditionAgcp:spanner/DatabaseIAMMemberCondition:DatabaseIAMMemberCondition╤
╬
descriptionB" `

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:╘

e
spannerInstanceAutoscalingConfig?gcp:spanner/InstanceAutoscalingConfig:InstanceAutoscalingConfigъ	
ч	║
asymmetricAutoscalingOptions┬B┐*╝:╣
╢
spanner4InstanceAutoscalingConfigAsymmetricAutoscalingOptionugcp:spanner/InstanceAutoscalingConfigAsymmetricAutoscalingOption:InstanceAutoscalingConfigAsymmetricAutoscalingOptionUAsymmetric autoscaling options for specific replicas.
Structure is documented below.
▄
autoscalingLimitsбBЮ:Ы
Ш
spanner*InstanceAutoscalingConfigAutoscalingLimitsagcp:spanner/InstanceAutoscalingConfigAutoscalingLimits:InstanceAutoscalingConfigAutoscalingLimitsвDefines scale in controls to reduce the risk of response latency
and outages due to abrupt scale-in events. Users can define the minimum and
maximum compute capacity allocated to the instance, and the autoscaler will
only scale within that range. Users can either use nodes or processing
units to specify the limits, but should use the same unit to set both the
min_limit and max_limit.
Structure is documented below.
╚
autoscalingTargetsдBб:Ю
Ы
spanner+InstanceAutoscalingConfigAutoscalingTargetscgcp:spanner/InstanceAutoscalingConfigAutoscalingTargets:InstanceAutoscalingConfigAutoscalingTargetsКDefines scale in controls to reduce the risk of response latency
and outages due to abrupt scale-in events
Structure is documented below.
:г
╢
spanner4InstanceAutoscalingConfigAsymmetricAutoscalingOptionugcp:spanner/InstanceAutoscalingConfigAsymmetricAutoscalingOption:InstanceAutoscalingConfigAsymmetricAutoscalingOptionч
фб
	overrides╪:╒
╥
spanner=InstanceAutoscalingConfigAsymmetricAutoscalingOptionOverridesЗgcp:spanner/InstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrides:InstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrides9A nested object resource.
Structure is documented below.
╜
replicaSelectionэ:ъ
ч
spannerDInstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelectionХgcp:spanner/InstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelection:InstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelection9A nested object resource.
Structure is documented below.
:║
╥
spanner=InstanceAutoscalingConfigAsymmetricAutoscalingOptionOverridesЗgcp:spanner/InstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrides:InstanceAutoscalingConfigAsymmetricAutoscalingOptionOverridesт
▀▄
autoscalingLimitsЛ:И
Е
spannerNInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverridesAutoscalingLimitsйgcp:spanner/InstanceAutoscalingConfigAsymmetricAutoscalingOptionOverridesAutoscalingLimits:InstanceAutoscalingConfigAsymmetricAutoscalingOptionOverridesAutoscalingLimits9A nested object resource.
Structure is documented below.
:а
Е
spannerNInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverridesAutoscalingLimitsйgcp:spanner/InstanceAutoscalingConfigAsymmetricAutoscalingOptionOverridesAutoscalingLimits:InstanceAutoscalingConfigAsymmetricAutoscalingOptionOverridesAutoscalingLimitsХ
ТG
maxNodes 7The maximum number of nodes for this specific replica.
G
minNodes 7The minimum number of nodes for this specific replica.
:┼
ч
spannerDInstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelectionХgcp:spanner/InstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelection:InstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelectionY
WU
location" EThe location of the replica to apply asymmetric autoscaling options.
:Э
Ш
spanner*InstanceAutoscalingConfigAutoscalingLimitsagcp:spanner/InstanceAutoscalingConfigAutoscalingLimits:InstanceAutoscalingConfigAutoscalingLimits 
№I
maxNodesB 7The maximum number of nodes for this specific replica.
╦
maxProcessingUnitsB оSpecifies maximum number of processing units allocated to the instance.
If set, this number should be multiples of 1000 and be greater than or equal to
min_processing_units.
I
minNodesB 7The minimum number of nodes for this specific replica.
Х
minProcessingUnitsB ySpecifies minimum number of processing units allocated to the instance.
If set, this number should be multiples of 1000.
:Л
Ы
spanner+InstanceAutoscalingConfigAutoscalingTargetscgcp:spanner/InstanceAutoscalingConfigAutoscalingTargets:InstanceAutoscalingConfigAutoscalingTargetsъ
ч·
!highPriorityCpuUtilizationPercentB ╬Specifies the target high priority cpu utilization percentage that the autoscaler
should be trying to achieve for the instance.
This number is on a scale from 0 (no utilization) to 100 (full utilization)..
ч
storageUtilizationPercentB ├Specifies the target storage utilization percentage that the autoscaler
should be trying to achieve for the instance.
This number is on a scale from 0 (no utilization) to 100 (full utilization).
:е
Y
spannerInstanceConfigReplica7gcp:spanner/InstanceConfigReplica:InstanceConfigReplica╟
─М
defaultLeaderLocationB
 mIf true, this location is designated as the default leader location where
leader replicas are placed.

- - -
M
locationB" ;The location of the serving resources, e.g. "us-central1".
у
typeB" ╘Indicates the type of replica.  See the [replica types
documentation](https://cloud.google.com/spanner/docs/replication#replica_types)
for more details.
Possible values are: `READ_WRITE`, `READ_ONLY`, `WITNESS`.
:е
k
spannerInstanceIAMBindingConditionCgcp:spanner/InstanceIAMBindingCondition:InstanceIAMBindingCondition6
4
descriptionB" 

expression" 
title" :в
h
spannerInstanceIAMMemberConditionAgcp:spanner/InstanceIAMMemberCondition:InstanceIAMMemberCondition6
4
descriptionB" 

expression" 
title" :▓
k
spannergetDatabaseEncryptionConfigCgcp:spanner/getDatabaseEncryptionConfig:getDatabaseEncryptionConfig┬
┐Ъ

kmsKeyName" ЗFully qualified name of the KMS key to use to encrypt this database. This key must exist
in the same location as the Spanner Database.
Я
kmsKeyNames*" ЙFully qualified name of the KMS keys to use to encrypt this database. The keys must exist
in the same locations as the Spanner Database.
:С

n
spannergetInstanceAutoscalingConfigEgcp:spanner/getInstanceAutoscalingConfig:getInstanceAutoscalingConfigЮ	
Ы	б
asymmetricAutoscalingOptions╚*┼:┬
┐
spanner7getInstanceAutoscalingConfigAsymmetricAutoscalingOption{gcp:spanner/getInstanceAutoscalingConfigAsymmetricAutoscalingOption:getInstanceAutoscalingConfigAsymmetricAutoscalingOption6Asymmetric autoscaling options for specific replicas.
├
autoscalingLimitsз*д:б
Ю
spanner,getInstanceAutoscalingConfigAutoscalingLimitegcp:spanner/getInstanceAutoscalingConfigAutoscalingLimit:getInstanceAutoscalingConfigAutoscalingLimitГDefines scale in controls to reduce the risk of response latency
and outages due to abrupt scale-in events. Users can define the minimum and
maximum compute capacity allocated to the instance, and the autoscaler will
only scale within that range. Users can either use nodes or processing
units to specify the limits, but should use the same unit to set both the
min_limit and max_limit.
о
autoscalingTargetsк*з:д
б
spanner-getInstanceAutoscalingConfigAutoscalingTargetggcp:spanner/getInstanceAutoscalingConfigAutoscalingTarget:getInstanceAutoscalingConfigAutoscalingTargetkDefines scale in controls to reduce the risk of response latency
and outages due to abrupt scale-in events
:Д
┐
spanner7getInstanceAutoscalingConfigAsymmetricAutoscalingOption{gcp:spanner/getInstanceAutoscalingConfigAsymmetricAutoscalingOption:getInstanceAutoscalingConfigAsymmetricAutoscalingOption┐
╝Л
	overridesс*▐:█
╪
spanner?getInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrideЛgcp:spanner/getInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverride:getInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrideA nested object resource.
л
replicaSelections∙*Ў:є
Ё
spannerGgetInstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelectionЫgcp:spanner/getInstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelection:getInstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelectionA nested object resource.
:з
╪
spanner?getInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrideЛgcp:spanner/getInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverride:getInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverride╔
╞├
autoscalingLimitsС*О:Л
И
spannerOgetInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrideAutoscalingLimitлgcp:spanner/getInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrideAutoscalingLimit:getInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrideAutoscalingLimitA nested object resource.
:г
И
spannerOgetInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrideAutoscalingLimitлgcp:spanner/getInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrideAutoscalingLimit:getInstanceAutoscalingConfigAsymmetricAutoscalingOptionOverrideAutoscalingLimitХ
ТG
maxNodes 7The maximum number of nodes for this specific replica.
G
minNodes 7The minimum number of nodes for this specific replica.
:╬
Ё
spannerGgetInstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelectionЫgcp:spanner/getInstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelection:getInstanceAutoscalingConfigAsymmetricAutoscalingOptionReplicaSelectionY
WU
location" EThe location of the replica to apply asymmetric autoscaling options.
:Ь
Ю
spanner,getInstanceAutoscalingConfigAutoscalingLimitegcp:spanner/getInstanceAutoscalingConfigAutoscalingLimit:getInstanceAutoscalingConfigAutoscalingLimit°
їП
maxNodes Specifies maximum number of nodes allocated to the instance. If set, this number
should be greater than or equal to min_nodes.
╔
maxProcessingUnits оSpecifies maximum number of processing units allocated to the instance.
If set, this number should be multiples of 1000 and be greater than or equal to
min_processing_units.

minNodes oSpecifies number of nodes allocated to the instance. If set, this number
should be greater than or equal to 1.
У
minProcessingUnits ySpecifies minimum number of processing units allocated to the instance.
If set, this number should be multiples of 1000.
:Н
б
spanner-getInstanceAutoscalingConfigAutoscalingTargetggcp:spanner/getInstanceAutoscalingConfigAutoscalingTarget:getInstanceAutoscalingConfigAutoscalingTargetц
у°
!highPriorityCpuUtilizationPercent ╬Specifies the target high priority cpu utilization percentage that the autoscaler
should be trying to achieve for the instance.
This number is on a scale from 0 (no utilization) to 100 (full utilization)..
х
storageUtilizationPercent ├Specifies the target storage utilization percentage that the autoscaler
should be trying to achieve for the instance.
This number is on a scale from 0 (no utilization) to 100 (full utilization).
:И

Q
sqlDatabaseInstanceClone3gcp:sql/DatabaseInstanceClone:DatabaseInstanceClone▓	
п	З
allocatedIpRangeB" ьThe name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the cloned instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
б
databaseNamesB*" З(SQL Server only, use with `point_in_time`) Clone only the specified databases from the source instance. Clone all databases if empty.
Б
pointInTimeB" ыThe timestamp of the point in time that should be restored.

A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
м
preferredZoneB" Ф(Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance. [clone-unavailable-instance](https://cloud.google.com/sql/docs/postgres/clone-instance#clone-unavailable-instance)
L
sourceInstanceName" 2Name of the source instance which will be cloned.
:Ш
]
sqlDatabaseInstanceIpAddress;gcp:sql/DatabaseInstanceIpAddress:DatabaseInstanceIpAddress╢
│.
	ipAddressB" The IPv4 address assigned.
T
timeToRetireB" >The time this IP address will be retired, in RFC
3339 format.
+
typeB" The type of this IP address.
:щ
~
sql$DatabaseInstanceReplicaConfigurationQgcp:sql/DatabaseInstanceReplicaConfiguration:DatabaseInstanceReplicaConfigurationц
уP
caCertificateB" 9PEM representation of the trusted CA's x509
certificate.
┐
cascadableReplicaB
 гSpecifies if the replica is a cascadable replica. If true, instance must be in different region from primary.

> **NOTE:** Only supported for SQL Server database.
Q
clientCertificateB" 6PEM representation of the replica's x509
certificate.
Й
	clientKeyB" vPEM representation of the replica's private key. The
corresponding public key in encoded in the `client_certificate`.
l
connectRetryIntervalB NThe number of seconds
between connect retries. MySQL's default is 60 seconds.
┌
dumpFilePathB" ├Path to a SQL file in GCS from which replica
instances are created. Format is `gs://bucket/filename`. Note, if the master
instance is a source representation instance this field must be present.
н
failoverTargetB
 ФSpecifies if the replica is the failover target.
If the field is set to true the replica will be designated as a failover replica.
If the master instance fails, the replica instance will be promoted as
the new master instance.
> **NOTE:** Not supported for Postgres database.
J
masterHeartbeatPeriodB +Time in ms between replication
heartbeats.
;
passwordB" )Password for the replication connection.
B
	sslCipherB" /Permissible ciphers for use in SSL encryption.
7
usernameB" %Username for replication connection.
m
verifyServerCertificateB
 LTrue if the master's common name
value is checked during the SSL handshake.
:В
~
sql$DatabaseInstanceRestoreBackupContextQgcp:sql/DatabaseInstanceRestoreBackupContext:DatabaseInstanceRestoreBackupContext 
№=
backupRunId *The ID of the backup run to restore from.
{

instanceIdB" gThe ID of the instance that the backup was taken from. If left empty,
this instance's ID will be used.
>
projectB" -The full project ID of the source instance.`
:Ы
f
sqlDatabaseInstanceServerCaCertAgcp:sql/DatabaseInstanceServerCaCert:DatabaseInstanceServerCaCert░
нN
certB" @The CA Certificate used to connect to the SQL Instance via SSL.
2

commonNameB" The CN valid for the CA Cert.
2

createTimeB" Creation time of the CA Cert.
8
expirationTimeB"  Expiration time of the CA Cert.
9
sha1FingerprintB"  SHA Fingerprint of the CA Cert.
:░-
Z
sqlDatabaseInstanceSettings9gcp:sql/DatabaseInstanceSettings:DatabaseInstanceSettings╤,
╬,}
activationPolicyB" cThis specifies when the instance should be
active. Can be either `ALWAYS`, `NEVER` or `ON_DEMAND`.
╝
activeDirectoryConfigвBЯ:Ь
Щ
sql-DatabaseInstanceSettingsActiveDirectoryConfigcgcp:sql/DatabaseInstanceSettingsActiveDirectoryConfig:DatabaseInstanceSettingsActiveDirectoryConfig─
advancedMachineFeaturesиBе:в
Я
sql/DatabaseInstanceSettingsAdvancedMachineFeaturesggcp:sql/DatabaseInstanceSettingsAdvancedMachineFeatures:DatabaseInstanceSettingsAdvancedMachineFeatures▐
availabilityTypeB" ├The availability type of the Cloud SQL
instance, high availability (`REGIONAL`) or single zone (`ZONAL`).' For all instances, ensure that
`settings.backup_configuration.enabled` is set to `true`.
For MySQL instances, ensure that `settings.backup_configuration.binary_log_enabled` is set to `true`.
For Postgres and SQL Server instances, ensure that `settings.backup_configuration.point_in_time_recovery_enabled`
is set to `true`. Defaults to `ZONAL`.
┤
backupConfigurationЬBЩ:Ц
У
sql+DatabaseInstanceSettingsBackupConfiguration_gcp:sql/DatabaseInstanceSettingsBackupConfiguration:DatabaseInstanceSettingsBackupConfiguration:
	collationB" 'The name of server instance collation.
┌
connectorEnforcementB" ╗Control the enforcement of Cloud SQL Auth Proxy or Cloud SQL connectors for all the connections, can be `REQUIRED` or `NOT_REQUIRED`. If enabled, all the direct connections are rejected.
┴
dataCacheConfigРBН:К
З
sql'DatabaseInstanceSettingsDataCacheConfigWgcp:sql/DatabaseInstanceSettingsDataCacheConfig:DatabaseInstanceSettingsDataCacheConfigData cache configurations.
Ы
databaseFlagsЙBЖ*Г:А
~
sql$DatabaseInstanceSettingsDatabaseFlagQgcp:sql/DatabaseInstanceSettingsDatabaseFlag:DatabaseInstanceSettingsDatabaseFlagb
deletionProtectionEnabledB
 ?Configuration to protect against accidental instance deletion.
╝
denyMaintenancePeriodвBЯ:Ь
Щ
sql-DatabaseInstanceSettingsDenyMaintenancePeriodcgcp:sql/DatabaseInstanceSettingsDenyMaintenancePeriod:DatabaseInstanceSettingsDenyMaintenancePeriod▀
diskAutoresizeB
 ╞Enables auto-resizing of the storage size. Defaults to `true`. Note that if `disk_size` is set, future `pulumi up` calls will attempt to delete the instance in order to resize the disk to the value specified in disk_size if it has been resized. To avoid this, ensure that `lifecycle.ignore_changes` is applied to `disk_size`.
й
diskAutoresizeLimitB ЛThe maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
п
diskSizeB ЬThe size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB. Note that this value will override the resizing from `disk_autoresize` if that feature is enabled. To avoid this, set `lifecycle.ignore_changes` on this field.
Q
diskTypeB" ?The type of data disk: PD_SSD or PD_HDD. Defaults to `PD_SSD`.
X
editionB" GThe edition of the instance, can be `ENTERPRISE` or `ENTERPRISE_PLUS`.
А
enableDataplexIntegrationB
 ▄Enables [Cloud SQL instance integration with Dataplex](https://cloud.google.com/sql/docs/mysql/dataplex-catalog-integration). MySQL, Postgres and SQL Server instances are supported for this feature. Defaults to `false`.
°
enableGoogleMlIntegrationB
 ╘Enables [Cloud SQL instances to connect to Vertex AI](https://cloud.google.com/sql/docs/postgres/integrate-cloud-sql-with-vertex-ai) and pass requests for real-time predictions and insights. Defaults to `false`.
├
insightsConfigНBК:З
Д
sql&DatabaseInstanceSettingsInsightsConfigUgcp:sql/DatabaseInstanceSettingsInsightsConfig:DatabaseInstanceSettingsInsightsConfig!Configuration of Query Insights.
д
ipConfigurationРBН:К
З
sql'DatabaseInstanceSettingsIpConfigurationWgcp:sql/DatabaseInstanceSettingsIpConfiguration:DatabaseInstanceSettingsIpConfiguration░
locationPreferenceЩBЦ:У
Р
sql*DatabaseInstanceSettingsLocationPreference]gcp:sql/DatabaseInstanceSettingsLocationPreference:DatabaseInstanceSettingsLocationPreference─
maintenanceWindowЦBУ:Р
Н
sql)DatabaseInstanceSettingsMaintenanceWindow[gcp:sql/DatabaseInstanceSettingsMaintenanceWindow:DatabaseInstanceSettingsMaintenanceWindowХDeclares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.
╚
passwordValidationPolicyлBи:е
в
sql0DatabaseInstanceSettingsPasswordValidationPolicyigcp:sql/DatabaseInstanceSettingsPasswordValidationPolicy:DatabaseInstanceSettingsPasswordValidationPolicyL
pricingPlanB" 7Pricing plan for this instance, can only be `PER_USE`.
╕
sqlServerAuditConfigЯBЬ:Щ
Ц
sql,DatabaseInstanceSettingsSqlServerAuditConfigagcp:sql/DatabaseInstanceSettingsSqlServerAuditConfig:DatabaseInstanceSettingsSqlServerAuditConfig╜
tier" ░The machine type to use. See [tiers](https://cloud.google.com/sql/docs/admin-api/v1beta4/tiers)
for more details and supported versions. Postgres supports only shared-core machine types,
and custom machine types such as `db-custom-2-13312`. See the [Custom Machine Type Documentation](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) to learn about specifying custom machine types.
В
timeZoneB" pThe time_zone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.
U

userLabelsB2" ?A set of key/value user label pairs to assign to the instance.
O
versionB >Used to make sure changes to the `settings` block are
atomic.
:С
Щ
sql-DatabaseInstanceSettingsActiveDirectoryConfigcgcp:sql/DatabaseInstanceSettingsActiveDirectoryConfig:DatabaseInstanceSettingsActiveDirectoryConfigs
qo
domain" aThe domain name for the active directory (e.g., mydomain.com).
Can only be used with SQL Server.
:╤
Я
sql/DatabaseInstanceSettingsAdvancedMachineFeaturesggcp:sql/DatabaseInstanceSettingsAdvancedMachineFeatures:DatabaseInstanceSettingsAdvancedMachineFeaturesм
йж
threadsPerCoreB НThe number of threads per core. The value of this flag can be 1 or 2. To disable SMT, set this flag to 1. Only available in Cloud SQL for SQL Server instances. See [smt](https://cloud.google.com/sql/docs/sqlserver/create-instance#smt-create-instance) for more details.
:┐	
У
sql+DatabaseInstanceSettingsBackupConfiguration_gcp:sql/DatabaseInstanceSettingsBackupConfiguration:DatabaseInstanceSettingsBackupConfigurationж
г└
backupRetentionSettingsтB▀:▄
┘
sqlBDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsНgcp:sql/DatabaseInstanceSettingsBackupConfigurationBackupRetentionSettings:DatabaseInstanceSettingsBackupConfigurationBackupRetentionSettings@Backup retention settings. The configuration is detailed below.
Z
binaryLogEnabledB
 @True if binary logging is enabled.
Can only be used with MySQL.
:
enabledB
 )True if backup configuration is enabled.
=
locationB" +The region where the backup will be stored
╛
pointInTimeRecoveryEnabledB
 ЩTrue if Point-in-time recovery is enabled. Will restart database if enabled after instance creation. Valid only for PostgreSQL and SQL Server instances.
T
	startTimeB" A`HH:MM` format time indicating when backup
configuration starts.
я
transactionLogRetentionDaysB ╔The number of days of transaction logs we retain for point in time restore, from 1-7. For PostgreSQL Enterprise Plus instances, the number of days of retained transaction logs can be set from 1 to 35.
:¤
┘
sqlBDatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsНgcp:sql/DatabaseInstanceSettingsBackupConfigurationBackupRetentionSettings:DatabaseInstanceSettingsBackupConfigurationBackupRetentionSettingsЮ
Ы╜
retainedBackups еDepending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit
is 'COUNT', we will retain this many backups.
Y
retentionUnitB" BThe unit that 'retained_backups' represents. Defaults to `COUNT`.
:Ю
З
sql'DatabaseInstanceSettingsDataCacheConfigWgcp:sql/DatabaseInstanceSettingsDataCacheConfig:DatabaseInstanceSettingsDataCacheConfigС
ОЛ
dataCacheEnabledB
 qWhether data cache is enabled for the instance. Defaults to `false`. Can be used with MYSQL and PostgreSQL only.
:╞
~
sql$DatabaseInstanceSettingsDatabaseFlagQgcp:sql/DatabaseInstanceSettingsDatabaseFlag:DatabaseInstanceSettingsDatabaseFlagD
B
name" Name of the flag.
 
value" Value of the flag.
:╓
Щ
sql-DatabaseInstanceSettingsDenyMaintenancePeriodcgcp:sql/DatabaseInstanceSettingsDenyMaintenancePeriod:DatabaseInstanceSettingsDenyMaintenancePeriod╖
┤╔
endDate" ╣"deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the no maintenance interval recurs every year. The date is in format yyyy-m-dd (the month is without leading zeros)i.e., 2020-1-01, or 2020-11-01, or mm-dd, i.e., 11-01
═
	startDate" ╗"deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-m-dd (the month is without leading zeros)i.e., 2020-1-01, or 2020-11-01, or mm-dd, i.e., 11-01
Х
time" ИTime in UTC when the "deny maintenance period" starts on startDate and ends on endDate. The time is in format: HH:mm:SS, i.e., 00:00:00
:Л
Д
sql&DatabaseInstanceSettingsInsightsConfigUgcp:sql/DatabaseInstanceSettingsInsightsConfig:DatabaseInstanceSettingsInsightsConfigБ
■I
queryInsightsEnabledB
 +True if Query Insights feature is enabled.
Ч
queryPlansPerMinuteB zNumber of query execution plans captured by Insights per minute for all queries combined. Between 0 and 20. Default to 5.
╔
queryStringLengthB нMaximum query length stored in bytes. Between 256 and 4500. Default to 1024. Higher query lengths are more useful for analytical queries, but they also require more memory. Changing the query length requires you to restart the instance. You can still add tags to queries that exceed the length limit.
l
recordApplicationTagsB
 MTrue if Query Insights will record application tags from query when enabled.
]
recordClientAddressB
 @True if Query Insights will record client address when enabled.
:¤
З
sql'DatabaseInstanceSettingsIpConfigurationWgcp:sql/DatabaseInstanceSettingsIpConfiguration:DatabaseInstanceSettingsIpConfigurationЁ
эК
allocatedIpRangeB" яThe name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
▌
authorizedNetworks╞B├*└:╜
║
sql8DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkygcp:sql/DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork:DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork▀
'enablePrivatePathForGoogleCloudServicesB
 нWhether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.
│
ipv4EnabledB
 ЭWhether this Cloud SQL instance should be assigned
a public IPV4 address. At least `ipv4_enabled` must be enabled or a
`private_network` must be configured.
ц
privateNetworkB" ═The VPC network from which the Cloud SQL
instance is accessible for private IP. For example,┬аprojects/myProject/global/networks/default.
Specifying a network enables private IP.
At least `ipv4_enabled` must be enabled or a `private_network` must be configured.
This setting can be updated, but it cannot be removed after it is set.
ц

pscConfigsоBл*и:е
в
sql0DatabaseInstanceSettingsIpConfigurationPscConfigigcp:sql/DatabaseInstanceSettingsIpConfigurationPscConfig:DatabaseInstanceSettingsIpConfigurationPscConfig'PSC settings for a Cloud SQL instance.
м
serverCaModeB" ХSpecify how the server certificate's Certificate Authority is hosted. Supported values are `GOOGLE_MANAGED_INTERNAL_CA` and `GOOGLE_MANAGED_CAS_CA`.
ф
sslModeB" ╥Specify how SSL connection should be enforced in DB connections. Supported values are `ALLOW_UNENCRYPTED_AND_ENCRYPTED`, `ENCRYPTED_ONLY`, and `TRUSTED_CLIENT_CERTIFICATE_REQUIRED` (not supported for SQL Server). See [API reference doc](https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1/instances#ipconfiguration) for details.
:║
║
sql8DatabaseInstanceSettingsIpConfigurationAuthorizedNetworkygcp:sql/DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork:DatabaseInstanceSettingsIpConfigurationAuthorizedNetwork·
ўП
expirationTimeB" wThe [RFC 3339](https://tools.ietf.org/html/rfc3339)
formatted date time string indicating when this whitelist expires.
/
nameB" !A name for this whitelist entry.
▒
value" гA CIDR notation IPv4 or IPv6 address that is allowed to
access this instance. Must be set even if other two attributes are not for
the whitelist to become active.
:у
в
sql0DatabaseInstanceSettingsIpConfigurationPscConfigigcp:sql/DatabaseInstanceSettingsIpConfigurationPscConfig:DatabaseInstanceSettingsIpConfigurationPscConfig╗
╕└
allowedConsumerProjectsB*" ЬList of consumer projects that are allow-listed for PSC connections to this instance. This instance can be connected to with PSC from any network in these projects. Each consumer project in this list may be represented by a project number (numeric) or by a project id (alphanumeric).
е
pscAutoConnectionsтB▀*▄:┘
╓
sqlADatabaseInstanceSettingsIpConfigurationPscConfigPscAutoConnectionЛgcp:sql/DatabaseInstanceSettingsIpConfigurationPscConfigPscAutoConnection:DatabaseInstanceSettingsIpConfigurationPscConfigPscAutoConnectionйA comma-separated list of networks or a comma-separated list of network-project pairs. Each project in this list is represented by a project number (numeric) or by a project ID (alphanumeric). This allows Private Service Connect connections to be created automatically for the specified networks.
K

pscEnabledB
 7Whether PSC connectivity is enabled for this instance.
:И
╓
sqlADatabaseInstanceSettingsIpConfigurationPscConfigPscAutoConnectionЛgcp:sql/DatabaseInstanceSettingsIpConfigurationPscConfigPscAutoConnection:DatabaseInstanceSettingsIpConfigurationPscConfigPscAutoConnectionм
й╝
consumerNetwork" д"The consumer network of this consumer endpoint. This must be a resource path that includes both the host project and the network name. For example, `projects/project1/global/networks/network1`. The consumer host project of this network might be different from the consumer service project."
h
consumerServiceProjectIdB" FThe project ID of consumer service project of this consumer endpoint.
:╨
Р
sql*DatabaseInstanceSettingsLocationPreference]gcp:sql/DatabaseInstanceSettingsLocationPreference:DatabaseInstanceSettingsLocationPreference║
╖v
followGaeApplicationB" XA GAE application whose zone to remain
in. Must be in the same region as this instance.
U
secondaryZoneB" >The preferred Compute Engine zone for the secondary/failover.
f
zoneB" XThe preferred compute engine
[zone](https://cloud.google.com/compute/docs/zones?hl=en).
:Ы
Н
sql)DatabaseInstanceSettingsMaintenanceWindow[gcp:sql/DatabaseInstanceSettingsMaintenanceWindow:DatabaseInstanceSettingsMaintenanceWindowИ
Е5
dayB (Day of week (`1-7`), starting on Monday
=
hourB /Hour of day (`0-23`), ignored if `day` not set
М
updateTrackB" wReceive updates after one week (`canary`) or after two weeks (`stable`) or after five weeks (`week5`) of notification.
:ї
в
sql0DatabaseInstanceSettingsPasswordValidationPolicyigcp:sql/DatabaseInstanceSettingsPasswordValidationPolicy:DatabaseInstanceSettingsPasswordValidationPolicy═
╩

complexityB" kChecks if the password is a combination of lowercase, uppercase, numeric, and non-alphanumeric characters.
U
disallowUsernameSubstringB
 2Prevents the use of the username in the password.
O
enablePasswordPolicy
 3Enables or disable the password validation policy.
[
	minLengthB HSpecifies the minimum number of characters that the password must have.
h
passwordChangeIntervalB" HSpecifies the minimum duration after which you can change the password.
X
reuseIntervalB ASpecifies the number of previous passwords that you can't reuse.
:│
Ц
sql,DatabaseInstanceSettingsSqlServerAuditConfigagcp:sql/DatabaseInstanceSettingsSqlServerAuditConfig:DatabaseInstanceSettingsSqlServerAuditConfigЧ
ФJ
bucketB" :The name of the destination bucket (e.g., gs://mybucket).
б
retentionIntervalB" ЕHow long to keep generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
б
uploadIntervalB" ИHow often to upload generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
:б
H
sqlUserPasswordPolicy-gcp:sql/UserPasswordPolicy:UserPasswordPolicy╘
╤]
allowedFailedAttemptsB >Number of failed attempts allowed before the user get locked.
А
enableFailedAttemptsCheckB
 ]If true, the check that will lock user after too many failed login attempts will be enabled.
Э
enablePasswordVerificationB
 yIf true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
]
passwordExpirationDurationB" 9Password expiration duration with one week grace period.
n
statusesbB`*^:\
Z
sqlUserPasswordPolicyStatus9gcp:sql/UserPasswordPolicyStatus:UserPasswordPolicyStatus:¤
Z
sqlUserPasswordPolicyStatus9gcp:sql/UserPasswordPolicyStatus:UserPasswordPolicyStatusЮ
Ы>
lockedB
 .If true, user does not have login privileges.
Y
passwordExpirationTimeB" 9Password expiration duration with one week grace period.
:┘
W
sqlUserSqlServerUserDetail7gcp:sql/UserSqlServerUserDetail:UserSqlServerUserDetail~
|1
disabledB
 If the user has been disabled.
G
serverRolesB*" 0The server roles for this user in the database.
:ш
<
sqlgetCaCertsCert%gcp:sql/getCaCertsCert:getCaCertsCertз
дL
cert" @The CA certificate used to connect to the SQL instance via SSL.
0

commonName" The CN valid for the CA cert.
0

createTime" Creation time of the CA cert.
6
expirationTime"  Expiration time of the CA cert.
8
sha1Fingerprint" !SHA1 fingerprint of the CA cert.
:√
Z
sqlgetDatabaseInstanceClone9gcp:sql/getDatabaseInstanceClone:getDatabaseInstanceCloneЬ
ЩЕ
allocatedIpRange" ьThe name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the cloned instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
Э
databaseNames*" Е(SQL Server only, use with point_in_time) clone only the specified databases from the source instance. Clone all databases if empty.
O
pointInTime" <The timestamp of the point in time that should be restored.
╖
preferredZone" б(Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance.
d
sourceInstanceName" JThe name of the instance from which the point in time should be restored.
:Э
f
sqlgetDatabaseInstanceIpAddressAgcp:sql/getDatabaseInstanceIpAddress:getDatabaseInstanceIpAddress3
1
	ipAddress" 
timeToRetire" 

type" :щ
З
sql'getDatabaseInstanceReplicaConfigurationWgcp:sql/getDatabaseInstanceReplicaConfiguration:getDatabaseInstanceReplicaConfiguration▄

┘
N
caCertificate" 9PEM representation of the trusted CA's x509 certificate.
▓
cascadableReplica
 ШSpecifies if a SQL Server replica is a cascadable replica. A cascadable replica is a SQL Server cross region replica that supports replica(s) under it.
O
clientCertificate" 6PEM representation of the replica's x509 certificate.
Е
	clientKey" tPEM representation of the replica's private key. The corresponding public key in encoded in the client_certificate.
j
connectRetryInterval NThe number of seconds between connect retries. MySQL's default is 60 seconds.
Й
dumpFilePath" uPath to a SQL file in Google Cloud Storage from which replica instances are created. Format is gs://bucket/filename.
Х
failoverTarget
 ■Specifies if the replica is the failover target. If the field is set to true the replica will be designated as a failover replica. If the master instance fails, the replica instance will be promoted as the new master instance. Not supported for Postgres
H
masterHeartbeatPeriod +Time in ms between replication heartbeats.
9
password" )Password for the replication connection.
@
	sslCipher" /Permissible ciphers for use in SSL encryption.
5
username" %Username for replication connection.
k
verifyServerCertificate
 LTrue if the master's common name value is checked during the SSL handshake.
:р
З
sql'getDatabaseInstanceRestoreBackupContextWgcp:sql/getDatabaseInstanceRestoreBackupContext:getDatabaseInstanceRestoreBackupContext╙
╨=
backupRunId *The ID of the backup run to restore from.
I

instanceId" 7The ID of the instance that the backup was taken from.
D
project" 5The ID of the project in which the resource belongs.
:Ъ
o
sqlgetDatabaseInstanceServerCaCertGgcp:sql/getDatabaseInstanceServerCaCert:getDatabaseInstanceServerCaCertж
гL
cert" @The CA Certificate used to connect to the SQL Instance via SSL.
0

commonName" The CN valid for the CA Cert.
0

createTime" Creation time of the CA Cert.
6
expirationTime"  Expiration time of the CA Cert.
7
sha1Fingerprint"  SHA Fingerprint of the CA Cert.
:╬%
`
sqlgetDatabaseInstanceSetting=gcp:sql/getDatabaseInstanceSetting:getDatabaseInstanceSettingщ$
ц$u
activationPolicy" ]This specifies when the instance should be active. Can be either ALWAYS, NEVER or ON_DEMAND.
├
activeDirectoryConfigsи*е:в
Я
sql/getDatabaseInstanceSettingActiveDirectoryConfigggcp:sql/getDatabaseInstanceSettingActiveDirectoryConfig:getDatabaseInstanceSettingActiveDirectoryConfig╟
advancedMachineFeaturesл*и:е
в
sql0getDatabaseInstanceSettingAdvancedMachineFeatureigcp:sql/getDatabaseInstanceSettingAdvancedMachineFeature:getDatabaseInstanceSettingAdvancedMachineFeature║
availabilityType" бThe availability type of the Cloud SQL instance, high availability
(REGIONAL) or single zone (ZONAL). For all instances, ensure that
settings.backup_configuration.enabled is set to true.
For MySQL instances, ensure that settings.backup_configuration.binary_log_enabled is set to true.
For Postgres instances, ensure that settings.backup_configuration.point_in_time_recovery_enabled
is set to true. Defaults to ZONAL.
╗
backupConfigurationsв*Я:Ь
Щ
sql-getDatabaseInstanceSettingBackupConfigurationcgcp:sql/getDatabaseInstanceSettingBackupConfiguration:getDatabaseInstanceSettingBackupConfiguration8
	collation" 'The name of server instance collation.
│
connectorEnforcement" ЦEnables the enforcement of Cloud SQL Auth Proxy or Cloud SQL connectors for all the connections. If enabled, all the direct connections are rejected.
╚
dataCacheConfigsЦ*У:Р
Н
sql)getDatabaseInstanceSettingDataCacheConfig[gcp:sql/getDatabaseInstanceSettingDataCacheConfig:getDatabaseInstanceSettingDataCacheConfigData cache configurations.
Я
databaseFlagsН*К:З
Д
sql&getDatabaseInstanceSettingDatabaseFlagUgcp:sql/getDatabaseInstanceSettingDatabaseFlag:getDatabaseInstanceSettingDatabaseFlag`
deletionProtectionEnabled
 ?Configuration to protect against accidental instance deletion.
├
denyMaintenancePeriodsи*е:в
Я
sql/getDatabaseInstanceSettingDenyMaintenancePeriodggcp:sql/getDatabaseInstanceSettingDenyMaintenancePeriod:getDatabaseInstanceSettingDenyMaintenancePeriodS
diskAutoresize
 =Enables auto-resizing of the storage size. Defaults to true.
п
diskAutoresizeLimit УThe maximum size, in GB, to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
М
diskSize |The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.
M
diskType" =The type of data disk: PD_SSD or PD_HDD. Defaults to PD_SSD.
R
edition" CThe edition of the instance, can be ENTERPRISE or ENTERPRISE_PLUS.
?
enableDataplexIntegration
 Enables Dataplex Integration.
@
enableGoogleMlIntegration
 Enables Vertex AI Integration.
╩
insightsConfigsУ*Р:Н
К
sql(getDatabaseInstanceSettingInsightsConfigYgcp:sql/getDatabaseInstanceSettingInsightsConfig:getDatabaseInstanceSettingInsightsConfig!Configuration of Query Insights.
л
ipConfigurationsЦ*У:Р
Н
sql)getDatabaseInstanceSettingIpConfiguration[gcp:sql/getDatabaseInstanceSettingIpConfiguration:getDatabaseInstanceSettingIpConfiguration╖
locationPreferencesЯ*Ь:Щ
Ц
sql,getDatabaseInstanceSettingLocationPreferenceagcp:sql/getDatabaseInstanceSettingLocationPreference:getDatabaseInstanceSettingLocationPreference╦
maintenanceWindowsЬ*Щ:Ц
У
sql+getDatabaseInstanceSettingMaintenanceWindow_gcp:sql/getDatabaseInstanceSettingMaintenanceWindow:getDatabaseInstanceSettingMaintenanceWindowХDeclares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.
╨
passwordValidationPolicies▒*о:л
и
sql2getDatabaseInstanceSettingPasswordValidationPolicymgcp:sql/getDatabaseInstanceSettingPasswordValidationPolicy:getDatabaseInstanceSettingPasswordValidationPolicyH
pricingPlan" 5Pricing plan for this instance, can only be PER_USE.
┐
sqlServerAuditConfigsе*в:Я
Ь
sql.getDatabaseInstanceSettingSqlServerAuditConfigegcp:sql/getDatabaseInstanceSettingSqlServerAuditConfig:getDatabaseInstanceSettingSqlServerAuditConfigЩ
tier" МThe machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types.
А
timeZone" pThe time_zone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.
S

userLabels2" ?A set of key/value user label pairs to assign to the instance.
K
version <Used to make sure changes to the settings block are atomic.
: 
Я
sql/getDatabaseInstanceSettingActiveDirectoryConfigggcp:sql/getDatabaseInstanceSettingActiveDirectoryConfig:getDatabaseInstanceSettingActiveDirectoryConfig[
YW
domain" IDomain name of the Active Directory for SQL Server (e.g., mydomain.com).
:∙
в
sql0getDatabaseInstanceSettingAdvancedMachineFeatureigcp:sql/getDatabaseInstanceSettingAdvancedMachineFeature:getDatabaseInstanceSettingAdvancedMachineFeatureR
PN
threadsPerCore 8The number of threads per physical core. Can be 1 or 2.
:Х
Щ
sql-getDatabaseInstanceSettingBackupConfigurationcgcp:sql/getDatabaseInstanceSettingBackupConfiguration:getDatabaseInstanceSettingBackupConfigurationЎ
єБ
backupRetentionSettingsх*т:▀
▄
sqlCgetDatabaseInstanceSettingBackupConfigurationBackupRetentionSettingПgcp:sql/getDatabaseInstanceSettingBackupConfigurationBackupRetentionSetting:getDatabaseInstanceSettingBackupConfigurationBackupRetentionSettingв
binaryLogEnabled
 ЙTrue if binary logging is enabled. If settings.backup_configuration.enabled is false, this must be as well. Can only be used with MySQL.
8
enabled
 )True if backup configuration is enabled.
6
location" &Location of the backup configuration.
M
pointInTimeRecoveryEnabled
 +True if Point-in-time recovery is enabled.
P
	startTime" ?HH:MM format time indicating when backup configuration starts.
┤
transactionLogRetentionDays РThe number of days of transaction logs we retain for point in time restore, from 1-7. (For PostgreSQL Enterprise Plus instances, from 1 to 35.)
:Ё
▄
sqlCgetDatabaseInstanceSettingBackupConfigurationBackupRetentionSettingПgcp:sql/getDatabaseInstanceSettingBackupConfigurationBackupRetentionSetting:getDatabaseInstanceSettingBackupConfigurationBackupRetentionSettingО
Л4
retainedBackups Number of backups to retain.
S
retentionUnit" >The unit that 'retainedBackups' represents. Defaults to COUNT
:▐
Н
sql)getDatabaseInstanceSettingDataCacheConfig[gcp:sql/getDatabaseInstanceSettingDataCacheConfig:getDatabaseInstanceSettingDataCacheConfigL
JH
dataCacheEnabled
 0Whether data cache is enabled for the instance.
:╒
Д
sql&getDatabaseInstanceSettingDatabaseFlagUgcp:sql/getDatabaseInstanceSettingDatabaseFlag:getDatabaseInstanceSettingDatabaseFlagL
J&
name" The name of the instance.
 
value" Value of the flag.
:ы
Я
sql/getDatabaseInstanceSettingDenyMaintenancePeriodggcp:sql/getDatabaseInstanceSettingDenyMaintenancePeriod:getDatabaseInstanceSettingDenyMaintenancePeriod╞
├Р
endDate" АEnd date before which maintenance will not take place. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
У
	startDate" БStart date after which maintenance will not take place. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
Ч
time" КTime in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
:е
К
sql(getDatabaseInstanceSettingInsightsConfigYgcp:sql/getDatabaseInstanceSettingInsightsConfig:getDatabaseInstanceSettingInsightsConfigХ
ТG
queryInsightsEnabled
 +True if Query Insights feature is enabled.
Х
queryPlansPerMinute zNumber of query execution plans captured by Insights per minute for all queries combined. Between 0 and 20. Default to 5.
f
queryStringLength MMaximum query length stored in bytes. Between 256 and 4500. Default to 1024.
j
recordApplicationTags
 MTrue if Query Insights will record application tags from query when enabled.
[
recordClientAddress
 @True if Query Insights will record client address when enabled.
:▀
Н
sql)getDatabaseInstanceSettingIpConfiguration[gcp:sql/getDatabaseInstanceSettingIpConfiguration:getDatabaseInstanceSettingIpConfiguration╠
╔╫
allocatedIpRange" ╛The name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
р
authorizedNetworks╔*╞:├
└
sql:getDatabaseInstanceSettingIpConfigurationAuthorizedNetwork}gcp:sql/getDatabaseInstanceSettingIpConfigurationAuthorizedNetwork:getDatabaseInstanceSettingIpConfigurationAuthorizedNetwork▌
'enablePrivatePathForGoogleCloudServices
 нWhether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.
н
ipv4Enabled
 ЩWhether this Cloud SQL instance should be assigned a public IPV4 address. At least ipv4_enabled must be enabled or a private_network must be configured.
▀
privateNetwork" ╚The VPC network from which the Cloud SQL instance is accessible for private IP. For example, projects/myProject/global/networks/default. Specifying a network enables private IP. At least ipv4_enabled must be enabled or a private_network must be configured. This setting can be updated, but it cannot be removed after it is set.
щ

pscConfigs▒*о:л
и
sql2getDatabaseInstanceSettingIpConfigurationPscConfigmgcp:sql/getDatabaseInstanceSettingIpConfigurationPscConfig:getDatabaseInstanceSettingIpConfigurationPscConfig'PSC settings for a Cloud SQL instance.
Z
serverCaMode" FSpecify how the server certificate's Certificate Authority is hosted.
P
sslMode" ASpecify how SSL connection should be enforced in DB connections.
:Т
└
sql:getDatabaseInstanceSettingIpConfigurationAuthorizedNetwork}gcp:sql/getDatabaseInstanceSettingIpConfigurationAuthorizedNetwork:getDatabaseInstanceSettingIpConfigurationAuthorizedNetworkM
K
expirationTime" &
name" The name of the instance.

value" :ш
и
sql2getDatabaseInstanceSettingIpConfigurationPscConfigmgcp:sql/getDatabaseInstanceSettingIpConfigurationPscConfig:getDatabaseInstanceSettingIpConfigurationPscConfig║
╖╛
allowedConsumerProjects*" ЬList of consumer projects that are allow-listed for PSC connections to this instance. This instance can be connected to with PSC from any network in these projects. Each consumer project in this list may be represented by a project number (numeric) or by a project id (alphanumeric).
и
pscAutoConnectionsх*т:▀
▄
sqlCgetDatabaseInstanceSettingIpConfigurationPscConfigPscAutoConnectionПgcp:sql/getDatabaseInstanceSettingIpConfigurationPscConfigPscAutoConnection:getDatabaseInstanceSettingIpConfigurationPscConfigPscAutoConnectionйA comma-separated list of networks or a comma-separated list of network-project pairs. Each project in this list is represented by a project number (numeric) or by a project ID (alphanumeric). This allows Private Service Connect connections to be created automatically for the specified networks.
I

pscEnabled
 7Whether PSC connectivity is enabled for this instance.
:╧
▄
sqlCgetDatabaseInstanceSettingIpConfigurationPscConfigPscAutoConnectionПgcp:sql/getDatabaseInstanceSettingIpConfigurationPscConfigPscAutoConnection:getDatabaseInstanceSettingIpConfigurationPscConfigPscAutoConnectionэ
ъ 
consumerNetwork" чThe consumer network of this consumer endpoint. This must be a resource path that includes both the host project and the network name. The consumer host project of this network might be different from the consumer service project.
f
consumerServiceProjectId" FThe project ID of consumer service project of this consumer endpoint.
:й
Ц
sql,getDatabaseInstanceSettingLocationPreferenceagcp:sql/getDatabaseInstanceSettingLocationPreference:getDatabaseInstanceSettingLocationPreferenceН
КВ
followGaeApplication" fA Google App Engine application whose zone to remain in. Must be in the same region as this instance.
R
secondaryZone" =The preferred Compute Engine zone for the secondary/failover
/
zone" #The preferred compute engine zone.
:П
У
sql+getDatabaseInstanceSettingMaintenanceWindow_gcp:sql/getDatabaseInstanceSettingMaintenanceWindow:getDatabaseInstanceSettingMaintenanceWindowЎ
є1
day &Day of week (1-7), starting on Monday
7
hour +Hour of day (0-23), ignored if day not set
Д
updateTrack" qReceive updates after one week (canary) or after two weeks (stable) or after five weeks (week5) of notification.
:Г
и
sql2getDatabaseInstanceSettingPasswordValidationPolicymgcp:sql/getDatabaseInstanceSettingPasswordValidationPolicy:getDatabaseInstanceSettingPasswordValidationPolicy╒
╥'

complexity" Password complexity.
N
disallowUsernameSubstring
 -Disallow username as a part of the password.
K
enablePasswordPolicy
 /Whether the password policy is enabled or not.
7
	minLength &Minimum number of characters allowed.
Е
passwordChangeInterval" gMinimum interval after which the password can be changed. This flag is only supported for PostgresSQL.
I
reuseInterval 4Number of previous passwords that cannot be reused.
:┤
Ь
sql.getDatabaseInstanceSettingSqlServerAuditConfigegcp:sql/getDatabaseInstanceSettingSqlServerAuditConfig:getDatabaseInstanceSettingSqlServerAuditConfigТ
ПH
bucket" :The name of the destination bucket (e.g., gs://mybucket).
а
retentionInterval" ЖHow long to keep generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"..
Я
uploadInterval" ИHow often to upload generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
:Б
f
sqlgetDatabaseInstancesInstanceAgcp:sql/getDatabaseInstancesInstance:getDatabaseInstancesInstanceЦ
УF
availableMaintenanceVersions*"  Available Maintenance versions.
╤
clones{*y:w
u
sql!getDatabaseInstancesInstanceCloneKgcp:sql/getDatabaseInstancesInstanceClone:getDatabaseInstancesInstanceCloneJConfiguration for creating a new instance as a clone of another instance.
П
connectionName" yThe connection name of the instance to be used in connection strings. For example, when connecting with Cloud SQL Proxy.
j
databaseVersion" STo filter out the Cloud SQL instances which are of the specified database version.

deletionProtection
 -
dnsName" The dns name of the instance.

encryptionKeyName" 
firstIpAddress" ▒
instanceType" ЬThe type of the instance. The valid values are:- 'SQL_INSTANCE_TYPE_UNSPECIFIED', 'CLOUD_SQL_INSTANCE', 'ON_PREMISES_INSTANCE' and 'READ_REPLICA_INSTANCE'.
Ъ
ipAddressesК*З:Д
Б
sql%getDatabaseInstancesInstanceIpAddressSgcp:sql/getDatabaseInstancesInstanceIpAddress:getDatabaseInstancesInstanceIpAddress/
maintenanceVersion" Maintenance version.
╞
masterInstanceName" лThe name of the instance that will act as the master in the replication setup. Note, this requires the master to have binary_log_enabled set, as well as existing backups.


name" 
privateIpAddress" y
project" jThe ID of the project in which the resources belong. If it is not provided, the provider project is used.
P
pscServiceAttachmentLink" 0The link to service attachment of PSC instance.

publicIpAddress" _
region" QTo filter out the Cloud SQL instances which are located in the specified region.
ъ
replicaConfigurationsл*и:е
в
sql0getDatabaseInstancesInstanceReplicaConfigurationigcp:sql/getDatabaseInstancesInstanceReplicaConfiguration:getDatabaseInstancesInstanceReplicaConfiguration#The configuration for replication.
4
replicaNames*" The replicas of the instance.
┼
restoreBackupContextsл*и:е
в
sql0getDatabaseInstancesInstanceRestoreBackupContextigcp:sql/getDatabaseInstancesInstanceRestoreBackupContext:getDatabaseInstancesInstanceRestoreBackupContextG
rootPassword" 3Initial root password. Required for MS SQL Server.
1
selfLink" !The URI of the created resource.
е
serverCaCertsУ*Р:Н
К
sql(getDatabaseInstancesInstanceServerCaCertYgcp:sql/getDatabaseInstancesInstanceServerCaCert:getDatabaseInstancesInstanceServerCaCert^
serviceAccountEmailAddress" <The service account email address assigned to the instance.
█
settingsБ*:}
{
sql#getDatabaseInstancesInstanceSettingOgcp:sql/getDatabaseInstancesInstanceSetting:getDatabaseInstancesInstanceSettingKThe settings to use for the database. The configuration is detailed below.
:Ц
u
sql!getDatabaseInstancesInstanceCloneKgcp:sql/getDatabaseInstancesInstanceClone:getDatabaseInstancesInstanceCloneЬ
ЩЕ
allocatedIpRange" ьThe name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the cloned instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
Э
databaseNames*" Е(SQL Server only, use with point_in_time) clone only the specified databases from the source instance. Clone all databases if empty.
O
pointInTime" <The timestamp of the point in time that should be restored.
╖
preferredZone" б(Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance.
d
sourceInstanceName" JThe name of the instance from which the point in time should be restored.
:╣
Б
sql%getDatabaseInstancesInstanceIpAddressSgcp:sql/getDatabaseInstancesInstanceIpAddress:getDatabaseInstancesInstanceIpAddress3
1
	ipAddress" 
timeToRetire" 

type" :Д
в
sql0getDatabaseInstancesInstanceReplicaConfigurationigcp:sql/getDatabaseInstancesInstanceReplicaConfiguration:getDatabaseInstancesInstanceReplicaConfiguration▄

┘
N
caCertificate" 9PEM representation of the trusted CA's x509 certificate.
▓
cascadableReplica
 ШSpecifies if a SQL Server replica is a cascadable replica. A cascadable replica is a SQL Server cross region replica that supports replica(s) under it.
O
clientCertificate" 6PEM representation of the replica's x509 certificate.
Е
	clientKey" tPEM representation of the replica's private key. The corresponding public key in encoded in the client_certificate.
j
connectRetryInterval NThe number of seconds between connect retries. MySQL's default is 60 seconds.
Й
dumpFilePath" uPath to a SQL file in Google Cloud Storage from which replica instances are created. Format is gs://bucket/filename.
Х
failoverTarget
 ■Specifies if the replica is the failover target. If the field is set to true the replica will be designated as a failover replica. If the master instance fails, the replica instance will be promoted as the new master instance. Not supported for Postgres
H
masterHeartbeatPeriod +Time in ms between replication heartbeats.
9
password" )Password for the replication connection.
@
	sslCipher" /Permissible ciphers for use in SSL encryption.
5
username" %Username for replication connection.
k
verifyServerCertificate
 LTrue if the master's common name value is checked during the SSL handshake.
:░
в
sql0getDatabaseInstancesInstanceRestoreBackupContextigcp:sql/getDatabaseInstancesInstanceRestoreBackupContext:getDatabaseInstancesInstanceRestoreBackupContextИ
Е=
backupRunId *The ID of the backup run to restore from.
I

instanceId" 7The ID of the instance that the backup was taken from.
y
project" jThe ID of the project in which the resources belong. If it is not provided, the provider project is used.
:╢
К
sql(getDatabaseInstancesInstanceServerCaCertYgcp:sql/getDatabaseInstancesInstanceServerCaCert:getDatabaseInstancesInstanceServerCaCertж
гL
cert" @The CA Certificate used to connect to the SQL Instance via SSL.
0

commonName" The CN valid for the CA Cert.
0

createTime" Creation time of the CA Cert.
6
expirationTime"  Expiration time of the CA Cert.
7
sha1Fingerprint"  SHA Fingerprint of the CA Cert.
:Г'
{
sql#getDatabaseInstancesInstanceSettingOgcp:sql/getDatabaseInstancesInstanceSetting:getDatabaseInstancesInstanceSettingГ&
А&u
activationPolicy" ]This specifies when the instance should be active. Can be either ALWAYS, NEVER or ON_DEMAND.
▐
activeDirectoryConfigs├*└:╜
║
sql8getDatabaseInstancesInstanceSettingActiveDirectoryConfigygcp:sql/getDatabaseInstancesInstanceSettingActiveDirectoryConfig:getDatabaseInstancesInstanceSettingActiveDirectoryConfigт
advancedMachineFeatures╞*├:└
╜
sql9getDatabaseInstancesInstanceSettingAdvancedMachineFeature{gcp:sql/getDatabaseInstancesInstanceSettingAdvancedMachineFeature:getDatabaseInstancesInstanceSettingAdvancedMachineFeature║
availabilityType" бThe availability type of the Cloud SQL instance, high availability
(REGIONAL) or single zone (ZONAL). For all instances, ensure that
settings.backup_configuration.enabled is set to true.
For MySQL instances, ensure that settings.backup_configuration.binary_log_enabled is set to true.
For Postgres instances, ensure that settings.backup_configuration.point_in_time_recovery_enabled
is set to true. Defaults to ZONAL.
╓
backupConfigurations╜*║:╖
┤
sql6getDatabaseInstancesInstanceSettingBackupConfigurationugcp:sql/getDatabaseInstancesInstanceSettingBackupConfiguration:getDatabaseInstancesInstanceSettingBackupConfiguration8
	collation" 'The name of server instance collation.
│
connectorEnforcement" ЦEnables the enforcement of Cloud SQL Auth Proxy or Cloud SQL connectors for all the connections. If enabled, all the direct connections are rejected.
у
dataCacheConfigs▒*о:л
и
sql2getDatabaseInstancesInstanceSettingDataCacheConfigmgcp:sql/getDatabaseInstancesInstanceSettingDataCacheConfig:getDatabaseInstancesInstanceSettingDataCacheConfigData cache configurations.
║
databaseFlagsи*е:в
Я
sql/getDatabaseInstancesInstanceSettingDatabaseFlagggcp:sql/getDatabaseInstancesInstanceSettingDatabaseFlag:getDatabaseInstancesInstanceSettingDatabaseFlag`
deletionProtectionEnabled
 ?Configuration to protect against accidental instance deletion.
▐
denyMaintenancePeriods├*└:╜
║
sql8getDatabaseInstancesInstanceSettingDenyMaintenancePeriodygcp:sql/getDatabaseInstancesInstanceSettingDenyMaintenancePeriod:getDatabaseInstancesInstanceSettingDenyMaintenancePeriodS
diskAutoresize
 =Enables auto-resizing of the storage size. Defaults to true.
п
diskAutoresizeLimit УThe maximum size, in GB, to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
М
diskSize |The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.
M
diskType" =The type of data disk: PD_SSD or PD_HDD. Defaults to PD_SSD.
R
edition" CThe edition of the instance, can be ENTERPRISE or ENTERPRISE_PLUS.
?
enableDataplexIntegration
 Enables Dataplex Integration.
@
enableGoogleMlIntegration
 Enables Vertex AI Integration.
х
insightsConfigsо*л:и
е
sql1getDatabaseInstancesInstanceSettingInsightsConfigkgcp:sql/getDatabaseInstancesInstanceSettingInsightsConfig:getDatabaseInstancesInstanceSettingInsightsConfig!Configuration of Query Insights.
╞
ipConfigurations▒*о:л
и
sql2getDatabaseInstancesInstanceSettingIpConfigurationmgcp:sql/getDatabaseInstancesInstanceSettingIpConfiguration:getDatabaseInstancesInstanceSettingIpConfiguration╥
locationPreferences║*╖:┤
▒
sql5getDatabaseInstancesInstanceSettingLocationPreferencesgcp:sql/getDatabaseInstancesInstanceSettingLocationPreference:getDatabaseInstancesInstanceSettingLocationPreferenceц
maintenanceWindows╖*┤:▒
о
sql4getDatabaseInstancesInstanceSettingMaintenanceWindowqgcp:sql/getDatabaseInstancesInstanceSettingMaintenanceWindow:getDatabaseInstancesInstanceSettingMaintenanceWindowХDeclares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.
ы
passwordValidationPolicies╠*╔:╞
├
sql;getDatabaseInstancesInstanceSettingPasswordValidationPolicygcp:sql/getDatabaseInstancesInstanceSettingPasswordValidationPolicy:getDatabaseInstancesInstanceSettingPasswordValidationPolicyH
pricingPlan" 5Pricing plan for this instance, can only be PER_USE.
┌
sqlServerAuditConfigs└*╜:║
╖
sql7getDatabaseInstancesInstanceSettingSqlServerAuditConfigwgcp:sql/getDatabaseInstancesInstanceSettingSqlServerAuditConfig:getDatabaseInstancesInstanceSettingSqlServerAuditConfigp
tier" dTo filter out the Cloud SQL instances based on the tier(or machine type) of the database instances.
А
timeZone" pThe time_zone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.
S

userLabels2" ?A set of key/value user label pairs to assign to the instance.
K
version <Used to make sure changes to the settings block are atomic.
:Ъ
║
sql8getDatabaseInstancesInstanceSettingActiveDirectoryConfigygcp:sql/getDatabaseInstancesInstanceSettingActiveDirectoryConfig:getDatabaseInstancesInstanceSettingActiveDirectoryConfig[
YW
domain" IDomain name of the Active Directory for SQL Server (e.g., mydomain.com).
:Ф
╜
sql9getDatabaseInstancesInstanceSettingAdvancedMachineFeature{gcp:sql/getDatabaseInstancesInstanceSettingAdvancedMachineFeature:getDatabaseInstancesInstanceSettingAdvancedMachineFeatureR
PN
threadsPerCore 8The number of threads per physical core. Can be 1 or 2.
:╦
┤
sql6getDatabaseInstancesInstanceSettingBackupConfigurationugcp:sql/getDatabaseInstancesInstanceSettingBackupConfiguration:getDatabaseInstancesInstanceSettingBackupConfigurationС
ОЬ
backupRetentionSettingsА*¤:·
ў
sqlLgetDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSettingбgcp:sql/getDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSetting:getDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSettingв
binaryLogEnabled
 ЙTrue if binary logging is enabled. If settings.backup_configuration.enabled is false, this must be as well. Can only be used with MySQL.
8
enabled
 )True if backup configuration is enabled.
6
location" &Location of the backup configuration.
M
pointInTimeRecoveryEnabled
 +True if Point-in-time recovery is enabled.
P
	startTime" ?HH:MM format time indicating when backup configuration starts.
┤
transactionLogRetentionDays РThe number of days of transaction logs we retain for point in time restore, from 1-7. (For PostgreSQL Enterprise Plus instances, from 1 to 35.)
:Л
ў
sqlLgetDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSettingбgcp:sql/getDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSetting:getDatabaseInstancesInstanceSettingBackupConfigurationBackupRetentionSettingО
Л4
retainedBackups Number of backups to retain.
S
retentionUnit" >The unit that 'retainedBackups' represents. Defaults to COUNT
:∙
и
sql2getDatabaseInstancesInstanceSettingDataCacheConfigmgcp:sql/getDatabaseInstancesInstanceSettingDataCacheConfig:getDatabaseInstancesInstanceSettingDataCacheConfigL
JH
dataCacheEnabled
 0Whether data cache is enabled for the instance.
:ш
Я
sql/getDatabaseInstancesInstanceSettingDatabaseFlagggcp:sql/getDatabaseInstancesInstanceSettingDatabaseFlag:getDatabaseInstancesInstanceSettingDatabaseFlagD
B
name" Name of the flag.
 
value" Value of the flag.
:Ж
║
sql8getDatabaseInstancesInstanceSettingDenyMaintenancePeriodygcp:sql/getDatabaseInstancesInstanceSettingDenyMaintenancePeriod:getDatabaseInstancesInstanceSettingDenyMaintenancePeriod╞
├Р
endDate" АEnd date before which maintenance will not take place. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
У
	startDate" БStart date after which maintenance will not take place. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
Ч
time" КTime in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
:└
е
sql1getDatabaseInstancesInstanceSettingInsightsConfigkgcp:sql/getDatabaseInstancesInstanceSettingInsightsConfig:getDatabaseInstancesInstanceSettingInsightsConfigХ
ТG
queryInsightsEnabled
 +True if Query Insights feature is enabled.
Х
queryPlansPerMinute zNumber of query execution plans captured by Insights per minute for all queries combined. Between 0 and 20. Default to 5.
f
queryStringLength MMaximum query length stored in bytes. Between 256 and 4500. Default to 1024.
j
recordApplicationTags
 MTrue if Query Insights will record application tags from query when enabled.
[
recordClientAddress
 @True if Query Insights will record client address when enabled.
:▒
и
sql2getDatabaseInstancesInstanceSettingIpConfigurationmgcp:sql/getDatabaseInstancesInstanceSettingIpConfiguration:getDatabaseInstancesInstanceSettingIpConfigurationГ
А╫
allocatedIpRange" ╛The name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
№
authorizedNetworksх*т:▀
▄
sqlCgetDatabaseInstancesInstanceSettingIpConfigurationAuthorizedNetworkПgcp:sql/getDatabaseInstancesInstanceSettingIpConfigurationAuthorizedNetwork:getDatabaseInstancesInstanceSettingIpConfigurationAuthorizedNetwork▌
'enablePrivatePathForGoogleCloudServices
 нWhether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.
н
ipv4Enabled
 ЩWhether this Cloud SQL instance should be assigned a public IPV4 address. At least ipv4_enabled must be enabled or a private_network must be configured.
▀
privateNetwork" ╚The VPC network from which the Cloud SQL instance is accessible for private IP. For example, projects/myProject/global/networks/default. Specifying a network enables private IP. At least ipv4_enabled must be enabled or a private_network must be configured. This setting can be updated, but it cannot be removed after it is set.
Д

pscConfigs╠*╔:╞
├
sql;getDatabaseInstancesInstanceSettingIpConfigurationPscConfiggcp:sql/getDatabaseInstancesInstanceSettingIpConfigurationPscConfig:getDatabaseInstancesInstanceSettingIpConfigurationPscConfig'PSC settings for a Cloud SQL instance.
Z
serverCaMode" FSpecify how the server certificate's Certificate Authority is hosted.
P
sslMode" ASpecify how SSL connection should be enforced in DB connections.
:Т
▄
sqlCgetDatabaseInstancesInstanceSettingIpConfigurationAuthorizedNetworkПgcp:sql/getDatabaseInstancesInstanceSettingIpConfigurationAuthorizedNetwork:getDatabaseInstancesInstanceSettingIpConfigurationAuthorizedNetwork1
/
expirationTime" 

name" 
value" :Ю	
├
sql;getDatabaseInstancesInstanceSettingIpConfigurationPscConfiggcp:sql/getDatabaseInstancesInstanceSettingIpConfigurationPscConfig:getDatabaseInstancesInstanceSettingIpConfigurationPscConfig╒
╥╛
allowedConsumerProjects*" ЬList of consumer projects that are allow-listed for PSC connections to this instance. This instance can be connected to with PSC from any network in these projects. Each consumer project in this list may be represented by a project number (numeric) or by a project id (alphanumeric).
├
pscAutoConnectionsА*¤:·
ў
sqlLgetDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnectionбgcp:sql/getDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnection:getDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnectionйA comma-separated list of networks or a comma-separated list of network-project pairs. Each project in this list is represented by a project number (numeric) or by a project ID (alphanumeric). This allows Private Service Connect connections to be created automatically for the specified networks.
I

pscEnabled
 7Whether PSC connectivity is enabled for this instance.
:ъ
ў
sqlLgetDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnectionбgcp:sql/getDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnection:getDatabaseInstancesInstanceSettingIpConfigurationPscConfigPscAutoConnectionэ
ъ 
consumerNetwork" чThe consumer network of this consumer endpoint. This must be a resource path that includes both the host project and the network name. The consumer host project of this network might be different from the consumer service project.
f
consumerServiceProjectId" FThe project ID of consumer service project of this consumer endpoint.
:╦
▒
sql5getDatabaseInstancesInstanceSettingLocationPreferencesgcp:sql/getDatabaseInstancesInstanceSettingLocationPreference:getDatabaseInstancesInstanceSettingLocationPreferenceФ
СВ
followGaeApplication" fA Google App Engine application whose zone to remain in. Must be in the same region as this instance.
R
secondaryZone" =The preferred Compute Engine zone for the secondary/failover
╡
zone" иTo filter out the Cloud SQL instances which are located in the specified zone. This zone refers to the Compute Engine zone that the instance is currently serving from.
:к
о
sql4getDatabaseInstancesInstanceSettingMaintenanceWindowqgcp:sql/getDatabaseInstancesInstanceSettingMaintenanceWindow:getDatabaseInstancesInstanceSettingMaintenanceWindowЎ
є1
day &Day of week (1-7), starting on Monday
7
hour +Hour of day (0-23), ignored if day not set
Д
updateTrack" qReceive updates after one week (canary) or after two weeks (stable) or after five weeks (week5) of notification.
:Ю
├
sql;getDatabaseInstancesInstanceSettingPasswordValidationPolicygcp:sql/getDatabaseInstancesInstanceSettingPasswordValidationPolicy:getDatabaseInstancesInstanceSettingPasswordValidationPolicy╒
╥'

complexity" Password complexity.
N
disallowUsernameSubstring
 -Disallow username as a part of the password.
K
enablePasswordPolicy
 /Whether the password policy is enabled or not.
7
	minLength &Minimum number of characters allowed.
Е
passwordChangeInterval" gMinimum interval after which the password can be changed. This flag is only supported for PostgresSQL.
I
reuseInterval 4Number of previous passwords that cannot be reused.
:╧
╖
sql7getDatabaseInstancesInstanceSettingSqlServerAuditConfigwgcp:sql/getDatabaseInstancesInstanceSettingSqlServerAuditConfig:getDatabaseInstancesInstanceSettingSqlServerAuditConfigТ
ПH
bucket" :The name of the destination bucket (e.g., gs://mybucket).
а
retentionInterval" ЖHow long to keep generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"..
Я
uploadInterval" ИHow often to upload generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
:Ф
N
sqlgetDatabasesDatabase1gcp:sql/getDatabasesDatabase:getDatabasesDatabase┴
╛ф
charset" ╘The charset value. See MySQL's
[Supported Character Sets and Collations](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html)
and Postgres' [Character Set Support](https://www.postgresql.org/docs/9.6/static/multibyte.html)
for more details and supported values. Postgres databases only support
a value of 'UTF8' at creation time.
ъ
	collation" ╪The collation value. See MySQL's
[Supported Character Sets and Collations](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html)
and Postgres' [Collation Support](https://www.postgresql.org/docs/9.6/static/collation.html)
for more details and supported values. Postgres databases only support
a value of 'en_US.UTF8' at creation time.
╧
deletionPolicy" ╕The deletion policy for the database. Setting ABANDON allows the resource
to be abandoned rather than deleted. This is useful for Postgres, where databases cannot be
deleted from the API if there are users other than cloudsqlsuperuser with access. Possible
values are: "ABANDON", "DELETE". Defaults to "DELETE".
[
instance" KThe name of the Cloud SQL database instance in which the database belongs.
w
name" kThe name of the database in the Cloud SQL instance.
This does not include the project ID or instance name.
п
project" ЯThe ID of the project in which the instance belongs.

> **Note** This datasource performs client-side sorting to provide consistent ordering of the databases.

selfLink" :┬
6
sqlgetTiersTier!gcp:sql/getTiersTier:getTiersTierЗ
Д>
	diskQuota -The maximum disk size of this tier in bytes.
8
ram -The maximum ram usage of this tier in bytes.
7
regions*" &The applicable regions for this tier.
O
tier" CAn identifier for the machine type, for example, db-custom-1-3840.
:─
G
storageBucketAutoclass+gcp:storage/BucketAutoclass:BucketAutoclass°
їж
enabled
 ЦWhile set to `true`, autoclass automatically transitions objects in your bucket to appropriate storage classes based on each object's access pattern.
╔
terminalStorageClassB" кThe storage class that objects in the bucket eventually transition to if they are not read for a certain length of time. Supported values include: `NEARLINE`, `ARCHIVE`.
:╒
5
storage	BucketCorgcp:storage/BucketCor:BucketCorЫ
Ш┴
maxAgeSecondsB йThe value, in seconds, to return in the [Access-Control-Max-Age header](https://www.w3.org/TR/cors/#access-control-max-age-response-header) used in preflight responses.
╣
methodsB*" еThe list of HTTP methods on which to include CORS response headers, (GET, OPTIONS, POST, etc) Note: "*" is permitted in the list of methods, and means "any method".
┴
originsB*" нThe list of [Origins](https://tools.ietf.org/html/rfc6454) eligible to receive CORS response headers. Note: "*" is permitted in the list of origins, and means "any Origin".
╤
responseHeadersB*" ╡The list of HTTP headers other than the [simple response headers](https://www.w3.org/TR/cors/#simple-response-header) to give permission for the user-agent to share across domains.
:ц
k
storageBucketCustomPlacementConfigCgcp:storage/BucketCustomPlacementConfig:BucketCustomPlacementConfigЎ
єЁ
dataLocations*" ╪The list of individual regions that comprise a dual-region bucket. See [Cloud Storage bucket locations](https://cloud.google.com/storage/docs/dual-regions#availability) for a list of acceptable regions. **Note**: If any of the data_locations changes, it will [recreate the bucket](https://cloud.google.com/storage/docs/locations#key-concepts).
:Б
J
storageBucketEncryption-gcp:storage/BucketEncryption:BucketEncryption▓
пм
defaultKmsKeyName" ТThe `id` of a Cloud KMS key that will be used to encrypt objects inserted into this bucket, if no encryption method is specified.
You must pay attention to whether the crypto key is available in the location that this bucket is created in.
See [the docs](https://cloud.google.com/storage/docs/encryption/using-customer-managed-keys) for more details.

> As per [the docs](https://cloud.google.com/storage/docs/encryption/using-customer-managed-keys) for customer-managed encryption keys, the IAM policy for the
specified key must permit the [automatic Google Cloud Storage service account](https://cloud.google.com/storage/docs/projects#service-accounts) for the bucket's
project to use the specified key for encryption and decryption operations.
Although the service account email address follows a well-known format, the service account is created on-demand and may not necessarily exist for your project
until a relevant action has occurred which triggers its creation.
You should use the [`gcp.storage.getProjectServiceAccount`](https://www.terraform.io/docs/providers/google/d/storage_project_service_account.html) data source to obtain the email
address for the service account when configuring IAM policy on the Cloud KMS key.
This data source calls an API which creates the account if required, ensuring your provider applies cleanly and repeatedly irrespective of the
state of the project.
You should take care for race conditions when the same provider manages IAM policy on the Cloud KMS crypto key. See the data source page for more details.
:▒
k
storageBucketHierarchicalNamespaceCgcp:storage/BucketHierarchicalNamespace:BucketHierarchicalNamespaceB
@>
enabled
 /Enables hierarchical namespace for the bucket.
:°
e
storageBucketIAMBindingCondition?gcp:storage/BucketIAMBindingCondition:BucketIAMBindingConditionО
Л╧
descriptionB" ╣An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.

> **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
consider it to be an entirely different resource and will treat it as such.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:ї
b
storageBucketIAMMemberCondition=gcp:storage/BucketIAMMemberCondition:BucketIAMMemberConditionО
Л╧
descriptionB" ╣An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.

> **Warning:** This provider considers the `role` and condition contents (`title`+`description`+`expression`) as the
identifier for the binding. This means that if any part of the condition is changed out-of-band, the provider will
consider it to be an entirely different resource and will treat it as such.
`

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:┬
S
storageBucketLifecycleRule3gcp:storage/BucketLifecycleRule:BucketLifecycleRuleъ
чщ
actioni:g
e
storageBucketLifecycleRuleAction?gcp:storage/BucketLifecycleRuleAction:BucketLifecycleRuleActiontThe Lifecycle Rule's action configuration. A single block of this type is supported. Structure is documented below.
°
	conditionr:p
n
storageBucketLifecycleRuleConditionEgcp:storage/BucketLifecycleRuleCondition:BucketLifecycleRuleConditionwThe Lifecycle Rule's condition configuration. A single block of this type is supported. Structure is documented below.
:З
e
storageBucketLifecycleRuleAction?gcp:storage/BucketLifecycleRuleAction:BucketLifecycleRuleActionЭ
Ъ№
storageClassB" хThe target [Storage Class](https://cloud.google.com/storage/docs/storage-classes) of objects affected by this Lifecycle Rule. Supported values include: `STANDARD`, `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`, `ARCHIVE`.
Ш
type" ЛThe type of the action of this Lifecycle Rule. Supported values include: `Delete`, `SetStorageClass` and `AbortIncompleteMultipartUpload`.
:╧
n
storageBucketLifecycleRuleConditionEgcp:storage/BucketLifecycleRuleCondition:BucketLifecycleRuleCondition▄
┘╩
ageB ╝Minimum age of an object in days to satisfy this condition. **Note** To set `0` value of `age`, `send_age_if_zero` should be set `true` otherwise `0` value of `age` field will be ignored.
ж
createdBeforeB" ОA date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when an object is created before midnight of the specified date in UTC.
╫
customTimeBeforeB" ╝A date in the RFC 3339 format YYYY-MM-DD. This condition is satisfied when the customTime metadata for the object is set to an earlier date than the date used in this lifecycle condition.
i
daysSinceCustomTimeB LNumber of days elapsed since the user-specified timestamp set on an object.
з
daysSinceNoncurrentTimeB ЕNumber of days elapsed since the noncurrent timestamp of an object. This
										condition is relevant only for versioned objects.
Y
matchesPrefixesB*" >One or more matching name prefixes to satisfy this condition.
Ц
matchesStorageClassesB*" Ї[Storage Class](https://cloud.google.com/storage/docs/storage-classes) of objects to satisfy this condition. Supported values include: `STANDARD`, `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`, `ARCHIVE`, `DURABLE_REDUCED_AVAILABILITY`.
Y
matchesSuffixesB*" >One or more matching name suffixes to satisfy this condition.
r
noncurrentTimeBeforeB" TCreation date of an object in RFC 3339 (e.g. 2017-06-13) to satisfy this condition.
Д
numNewerVersionsB jRelevant only for versioned objects. The number of newer versions of an object to satisfy this condition.
·
sendAgeIfZeroB
 тWhile set true, `age` value will be sent in the request even for zero value of the field. This field is only useful and required for setting 0 value to the `age` field. It can be used alone or together with `age` attribute. **NOTE** `age` attibute with `0` value will be ommitted from the API request if `send_age_if_zero` field is having `false` value.
к
sendDaysSinceCustomTimeIfZeroB
 ВWhile set true, `days_since_custom_time` value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the `days_since_custom_time` field. It can be used alone or together with `days_since_custom_time`.
║
!sendDaysSinceNoncurrentTimeIfZeroB
 ОWhile set true, `days_since_noncurrent_time` value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the `days_since_noncurrent_time` field. It can be used alone or together with `days_since_noncurrent_time`.
Ы
sendNumNewerVersionsIfZeroB
 ЎWhile set true, `num_newer_versions` value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the `num_newer_versions` field. It can be used alone or together with `num_newer_versions`.
в
	withStateB" ОMatch to live and/or archived objects. Unversioned buckets have only live objects. Supported values include: `"LIVE"`, `"ARCHIVED"`, `"ANY"`.
:Л
A
storageBucketLogging'gcp:storage/BucketLogging:BucketLogging┼
┬;
	logBucket" *The bucket that will receive log objects.
В
logObjectPrefixB" iThe object prefix for log objects. If it's not provided,
by default GCS sets this to this bucket's name.
:Й
t
storageBucketObjectCustomerEncryptionIgcp:storage/BucketObjectCustomerEncryption:BucketObjectCustomerEncryptionР
НC
encryptionAlgorithmB" &Encryption algorithm. Default: AES256
F
encryptionKey" 1Base64 encoded Customer-Supplied Encryption Key.
:к
Y
storageBucketObjectRetention7gcp:storage/BucketObjectRetention:BucketObjectRetention╠
╔F
mode" :The retention policy mode. Either `Locked` or `Unlocked`.

retainUntilTime" hThe time to retain the object until in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.

<a name>
:м
Y
storageBucketRetentionPolicy7gcp:storage/BucketRetentionPolicy:BucketRetentionPolicy╬
╦¤
isLockedB
 ъIf set to `true`, the bucket will be [locked](https://cloud.google.com/storage/docs/using-bucket-lock#lock-bucket) and permanently restrict edits to the bucket's retention policy.  Caution: Locking a bucket is an irreversible action.
╚
retentionPeriod ░The period of time, in seconds, that objects in the bucket must be retained and cannot be deleted, overwritten, or archived. The value must be less than 2,147,483,647 seconds.
:у
\
storageBucketSoftDeletePolicy9gcp:storage/BucketSoftDeletePolicy:BucketSoftDeletePolicyВ
 ▒
effectiveTimeB" ЩServer-determined value that indicates the time from which the policy, or one with a greater retention, was effective. This value is in RFC 3339 format.
╚
retentionDurationSecondsB еThe duration in seconds that soft-deleted objects in the bucket will be retained and cannot be permanently deleted. Default value is 604800. The value must be in between 604800(7 days) and 7776000(90 days). **Note**: To disable the soft delete policy on a bucket, This field must be set to 0.
:г
J
storageBucketVersioning-gcp:storage/BucketVersioning:BucketVersioningU
SQ
enabled
 BWhile set to `true`, versioning is fully enabled for this bucket.
:г
A
storageBucketWebsite'gcp:storage/BucketWebsite:BucketWebsite▌
┌|
mainPageSuffixB" dBehaves as the bucket's directory index where
missing objects are treated as potential directories.
Z
notFoundPageB" DThe custom object to return when a requested
resource is not found.
:ж
Й
storage%DefaultObjectAccessControlProjectTeamWgcp:storage/DefaultObjectAccessControlProjectTeam:DefaultObjectAccessControlProjectTeamЧ
ФC
projectNumberB" ,The project team associated with the entity
M
teamB" ?The team.
Possible values are: `editors`, `owners`, `viewers`.
:╚
t
storageInsightsReportConfigCsvOptionsIgcp:storage/InsightsReportConfigCsvOptions:InsightsReportConfigCsvOptions╧
╠_
	delimiterB" LThe delimiter used to separate the fields in the inventory report CSV file.
А
headerRequiredB
 hThe boolean that indicates whether or not headers are included in the inventory report CSV file.

- - -
f
recordSeparatorB" MThe character used to separate the records in the inventory report CSV file.
:Т
Ж
storage$InsightsReportConfigFrequencyOptionsUgcp:storage/InsightsReportConfigFrequencyOptions:InsightsReportConfigFrequencyOptionsЖ
Г▓
endDateб:Ю
Ы
storage+InsightsReportConfigFrequencyOptionsEndDatecgcp:storage/InsightsReportConfigFrequencyOptionsEndDate:InsightsReportConfigFrequencyOptionsEndDateВThe date to stop generating inventory reports. For example, {"day": 15, "month": 9, "year": 2022}.
Structure is documented below.
Н
	frequency" |The frequency in which inventory reports are generated. Values are DAILY or WEEKLY.
Possible values are: `DAILY`, `WEEKLY`.
╗
	startDateз:д
б
storage-InsightsReportConfigFrequencyOptionsStartDateggcp:storage/InsightsReportConfigFrequencyOptionsStartDate:InsightsReportConfigFrequencyOptionsStartDateГThe date to start generating inventory reports. For example, {"day": 15, "month": 8, "year": 2022}.
Structure is documented below.
:ч
Ы
storage+InsightsReportConfigFrequencyOptionsEndDatecgcp:storage/InsightsReportConfigFrequencyOptionsEndDate:InsightsReportConfigFrequencyOptionsEndDate╞
├F
day ;The day of the month to stop generating inventory reports.
=
month 0The month to stop generating inventory reports.
:
year .The year to stop generating inventory reports
:Ё
б
storage-InsightsReportConfigFrequencyOptionsStartDateggcp:storage/InsightsReportConfigFrequencyOptionsStartDate:InsightsReportConfigFrequencyOptionsStartDate╔
╞G
day <The day of the month to start generating inventory reports.
>
month 1The month to start generating inventory reports.
;
year /The year to start generating inventory reports
:Ъ
з
storage/InsightsReportConfigObjectMetadataReportOptionskgcp:storage/InsightsReportConfigObjectMetadataReportOptions:InsightsReportConfigObjectMetadataReportOptionsэ
ъM
metadataFields*" 5The metadata fields included in an inventory report.
ь
storageDestinationOptions∙:Ў
є
storageHInsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptionsЭgcp:storage/InsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptions:InsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptionsSOptions for where the inventory reports are stored.
Structure is documented below.
й
storageFilters█B╪:╒
╥
storage=InsightsReportConfigObjectMetadataReportOptionsStorageFiltersЗgcp:storage/InsightsReportConfigObjectMetadataReportOptionsStorageFilters:InsightsReportConfigObjectMetadataReportOptionsStorageFilters9A nested object resource.
Structure is documented below.
:╕
є
storageHInsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptionsЭgcp:storage/InsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptions:InsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptions┐
╝R
bucket" DThe destination bucket that stores the generated inventory reports.
f
destinationPathB" MThe path within the destination bucket to store generated inventory reports.
:╜
╥
storage=InsightsReportConfigObjectMetadataReportOptionsStorageFiltersЗgcp:storage/InsightsReportConfigObjectMetadataReportOptionsStorageFilters:InsightsReportConfigObjectMetadataReportOptionsStorageFiltersf
db
bucketB" RThe filter to use when specifying which bucket to generate inventory reports for.
:╨
z
storage ManagedFolderIamBindingConditionMgcp:storage/ManagedFolderIamBindingCondition:ManagedFolderIamBindingCondition╤
╬
descriptionB" `

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:═
w
storageManagedFolderIamMemberConditionKgcp:storage/ManagedFolderIamMemberCondition:ManagedFolderIamMemberCondition╤
╬
descriptionB" `

expression" NTextual representation of an expression in Common Expression Language syntax.
U
title" HA title for the expression, i.e. a short string describing its purpose.
:Р
t
storageObjectAccessControlProjectTeamIgcp:storage/ObjectAccessControlProjectTeam:ObjectAccessControlProjectTeamЧ
ФC
projectNumberB" ,The project team associated with the entity
M
teamB" ?The team.
Possible values are: `editors`, `owners`, `viewers`.
:ч
w
storageTransferAgentPoolBandwidthLimitKgcp:storage/TransferAgentPoolBandwidthLimit:TransferAgentPoolBandwidthLimitl
jh
	limitMbps" WBandwidth rate in megabytes per second, distributed across all the agents in the pool.
:М	
\
storageTransferJobEventStream9gcp:storage/TransferJobEventStream:TransferJobEventStreamл
иЪ
eventStreamExpirationTimeB" ЎSpecifies the data and time at which Storage Transfer Service stops listening for events from this stream. After this time, any transfers in progress will complete, but no new transfers are initiated.A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
и
eventStreamStartTimeB" ЙSpecifies the date and time that Storage Transfer Service starts listening for events from this stream. If no start time is specified or start time is in the past, Storage Transfer Service starts listening immediately. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
▌
name" ╨Specifies a unique name of the resource such as AWS SQS ARN in the form 'arn:aws:sqs:region:account_id:queue_name', or Pub/Sub subscription resource name in the form 'projects/{project}/subscriptions/{sub}'.
:г
q
storageTransferJobNotificationConfigGgcp:storage/TransferJobNotificationConfig:TransferJobNotificationConfigн
кч

eventTypesB*" ╨Event types for which a notification is desired. If empty, send notifications for all event types. The valid types are "TRANSFER_OPERATION_SUCCESS", "TRANSFER_OPERATION_FAILED", "TRANSFER_OPERATION_ABORTED".
g
payloadFormat" RThe desired format of the notification message payloads. One of "NONE" or "JSON".
╘
pubsubTopic" └The Topic.name of the Pub/Sub topic to which to publish notifications. Must be of the format: projects/{project}/topics/{topic}. Not matching this format results in an INVALID_ARGUMENT error.
:║
S
storageTransferJobSchedule3gcp:storage/TransferJobSchedule:TransferJobScheduleт
▀Д
repeatIntervalB" ыInterval between the start of each scheduled transfer. If unspecified, the default value is 24 hours. This value may not be less than 1 hour. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
╙
scheduleEndDateЙBЖ:Г
А
storage"TransferJobScheduleScheduleEndDateQgcp:storage/TransferJobScheduleScheduleEndDate:TransferJobScheduleScheduleEndDate│The last day the recurring transfer will be run. If `schedule_end_date` is the same as `schedule_start_date`, the transfer will be executed only once. Structure documented below.
у
scheduleStartDateМ:Й
Ж
storage$TransferJobScheduleScheduleStartDateUgcp:storage/TransferJobScheduleScheduleStartDate:TransferJobScheduleScheduleStartDate╛The first day the recurring transfer is scheduled to run. If `schedule_start_date` is in the past, the transfer will run for the first time on the following day. Structure documented below.
Щ
startTimeOfDayДBБ:
}
storage!TransferJobScheduleStartTimeOfDayOgcp:storage/TransferJobScheduleStartTimeOfDay:TransferJobScheduleStartTimeOfDay The time in UTC at which the transfer will be scheduled to start in a day. Transfers may start later than this time. If not specified, recurring and one-time transfers that are scheduled to run today will run immediately; recurring transfers that are scheduled to run on a future date will start at approximately midnight UTC on that date. Note that when configuring a transfer with the Cloud Platform Console, the transfer's start time in a day is specified in your local timezone. Structure documented below.
:├
А
storage"TransferJobScheduleScheduleEndDateQgcp:storage/TransferJobScheduleScheduleEndDate:TransferJobScheduleScheduleEndDate╜
║P
day EDay of month. Must be from 1 to 31 and valid for the year and month.
2
month %Month of year. Must be from 1 to 12.
2
year &Year of date. Must be from 1 to 9999.
:╔
Ж
storage$TransferJobScheduleScheduleStartDateUgcp:storage/TransferJobScheduleScheduleStartDate:TransferJobScheduleScheduleStartDate╜
║P
day EDay of month. Must be from 1 to 31 and valid for the year and month.
2
month %Month of year. Must be from 1 to 12.
2
year &Year of date. Must be from 1 to 9999.
:о
}
storage!TransferJobScheduleStartTimeOfDayOgcp:storage/TransferJobScheduleStartTimeOfDay:TransferJobScheduleStartTimeOfDayм
йE
hours 8Hours of day in 24 hour format. Should be from 0 to 23.
=
minutes .Minutes of hour of day. Must be from 0 to 59.
Q
nanos DFractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
N
seconds ?Seconds of minutes of the time. Must normally be from 0 to 59.
:о
_
storageTransferJobTransferSpec;gcp:storage/TransferJobTransferSpec:TransferJobTransferSpec╩
╟▐
awsS3DataSourceХBТ:П
М
storage&TransferJobTransferSpecAwsS3DataSourceYgcp:storage/TransferJobTransferSpecAwsS3DataSource:TransferJobTransferSpecAwsS3DataSource3An AWS S3 data source. Structure documented below.
Ц
azureBlobStorageDataSource╢B│:░
н
storage1TransferJobTransferSpecAzureBlobStorageDataSourceogcp:storage/TransferJobTransferSpecAzureBlobStorageDataSource:TransferJobTransferSpecAzureBlobStorageDataSource?An Azure Blob Storage data source. Structure documented below.
┘
gcsDataSinkЙBЖ:Г
А
storage"TransferJobTransferSpecGcsDataSinkQgcp:storage/TransferJobTransferSpecGcsDataSink:TransferJobTransferSpecGcsDataSink>A Google Cloud Storage data sink. Structure documented below.
у
gcsDataSourceПBМ:Й
Ж
storage$TransferJobTransferSpecGcsDataSourceUgcp:storage/TransferJobTransferSpecGcsDataSource:TransferJobTransferSpecGcsDataSource@A Google Cloud Storage data source. Structure documented below.
╪
hdfsDataSourceТBП:М
Й
storage%TransferJobTransferSpecHdfsDataSourceWgcp:storage/TransferJobTransferSpecHdfsDataSource:TransferJobTransferSpecHdfsDataSource1An HDFS data source. Structure documented below.
█
httpDataSourceТBП:М
Й
storage%TransferJobTransferSpecHttpDataSourceWgcp:storage/TransferJobTransferSpecHttpDataSource:TransferJobTransferSpecHttpDataSource4A HTTP URL data source. Structure documented below.
а
objectConditionsШBХ:Т
П
storage'TransferJobTransferSpecObjectConditions[gcp:storage/TransferJobTransferSpecObjectConditions:TransferJobTransferSpecObjectConditionsЁOnly objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' `last_modification_time` do not exclude objects in a data sink. Structure documented below.
╥
posixDataSinkПBМ:Й
Ж
storage$TransferJobTransferSpecPosixDataSinkUgcp:storage/TransferJobTransferSpecPosixDataSink:TransferJobTransferSpecPosixDataSink/A POSIX data sink. Structure documented below.
ч
posixDataSourceХBТ:П
М
storage&TransferJobTransferSpecPosixDataSourceYgcp:storage/TransferJobTransferSpecPosixDataSource:TransferJobTransferSpecPosixDataSource<A POSIX filesystem data source. Structure documented below.
К
sinkAgentPoolNameB" oSpecifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
О
sourceAgentPoolNameB" qSpecifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
╧
transferOptionsХBТ:П
М
storage&TransferJobTransferSpecTransferOptionsYgcp:storage/TransferJobTransferSpecTransferOptions:TransferJobTransferSpecTransferOptionsгCharacteristics of how to treat files from datasource and sink during job. If the option `delete_objects_unique_in_sink` is true, object conditions based on objects' `last_modification_time` are ignored and do not exclude objects in a data source or a data sink. Structure documented below.
:╢
М
storage&TransferJobTransferSpecAwsS3DataSourceYgcp:storage/TransferJobTransferSpecAwsS3DataSource:TransferJobTransferSpecAwsS3DataSourceд
бу
awsAccessKey╣B╢:│
░
storage2TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyqgcp:storage/TransferJobTransferSpecAwsS3DataSourceAwsAccessKey:TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyAWS credentials block.
"

bucketName" S3 Bucket name.
4
pathB" &S3 Bucket path in bucket to transfer.
▐
roleArnB" ╠The Amazon Resource Name (ARN) of the role to support temporary credentials via 'AssumeRoleWithWebIdentity'. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a 'AssumeRoleWithWebIdentity' call for the provided role using the [GoogleServiceAccount][] for this project.
:И
░
storage2TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyqgcp:storage/TransferJobTransferSpecAwsS3DataSourceAwsAccessKey:TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyS
Q
accessKeyId" AWS Key ID.
.
secretAccessKey" AWS Secret Access Key.
:Б

н
storage1TransferJobTransferSpecAzureBlobStorageDataSourceogcp:storage/TransferJobTransferSpecAzureBlobStorageDataSource:TransferJobTransferSpecAzureBlobStorageDataSource╬
╦╝
azureCredentialsчBф:с
▐
storageATransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsПgcp:storage/TransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentials:TransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentials>Credentials used to authenticate API requests to Azure block.
L
	container" ;The container to transfer from the Azure Storage account.`
н
credentialsSecretB" СFull Resource name of a secret in Secret Manager containing [SAS Credentials in JSON form](https://cloud.google.com/storage-transfer/docs/reference/rest/v1/TransferSpec#azureblobstoragedata:~:text=begin%20with%20a%20%27/%27.-,credentialsSecret,-string). Service Agent for Storage Transfer must have permissions to access secret. If credentials_secret is specified, do not specify azure_credentials.`,
╠
pathB" ╜Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
=
storageAccount" 'The name of the Azure Storage account.
:▓
▐
storageATransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentialsПgcp:storage/TransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentials:TransferJobTransferSpecAzureBlobStorageDataSourceAzureCredentials╬
╦╚
sasToken" ╖Azure shared access signature. See [Grant limited access to Azure Storage resources using shared access signatures (SAS)](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview).

<a name="nested_schedule_start_end_date"></a>The `schedule_start_date` and `schedule_end_date` blocks support:
:О
А
storage"TransferJobTransferSpecGcsDataSinkQgcp:storage/TransferJobTransferSpecGcsDataSink:TransferJobTransferSpecGcsDataSinkИ
Е4

bucketName" "Google Cloud Storage bucket name.
╠
pathB" ╜Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
:Ф
Ж
storage$TransferJobTransferSpecGcsDataSourceUgcp:storage/TransferJobTransferSpecGcsDataSource:TransferJobTransferSpecGcsDataSourceИ
Е4

bucketName" "Google Cloud Storage bucket name.
╠
pathB" ╜Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
:▀
Й
storage%TransferJobTransferSpecHdfsDataSourceWgcp:storage/TransferJobTransferSpecHdfsDataSource:TransferJobTransferSpecHdfsDataSource╨
═╩
path" ╜Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
:╬
Й
storage%TransferJobTransferSpecHttpDataSourceWgcp:storage/TransferJobTransferSpecHttpDataSource:TransferJobTransferSpecHttpDataSource┐
╝╣
listUrl" йThe URL that points to the file that stores the object list entries. This file must allow public access. Currently, only URLs with HTTP and HTTPS schemes are supported.
:ф
П
storage'TransferJobTransferSpecObjectConditions[gcp:storage/TransferJobTransferSpecObjectConditions:TransferJobTransferSpecObjectConditions╧
╠т
excludePrefixesB*" ╞`exclude_prefixes` must follow the requirements described for `include_prefixes`. See [Requirements](https://cloud.google.com/storage-transfer/docs/reference/rest/v1/TransferSpec#ObjectConditions).
°
includePrefixesB*" ▄If `include_prefixes` is specified, objects that satisfy the object conditions must have names that start with one of the `include_prefixes` and that do not start with any of the `exclude_prefixes`. If `include_prefixes` is not specified, all objects except those that have names starting with one of the `exclude_prefixes` must satisfy the object conditions. See [Requirements](https://cloud.google.com/storage-transfer/docs/reference/rest/v1/TransferSpec#ObjectConditions).
ф
lastModifiedBeforeB" ╟If specified, only objects with a "last modification time" before this timestamp and objects that don't have a "last modification time" are transferred. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
ш
lastModifiedSinceB" ╠If specified, only objects with a "last modification time" on or after this timestamp and objects that don't have a "last modification time" are transferred. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
К
#maxTimeElapsedSinceLastModificationB" ]A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
К
#minTimeElapsedSinceLastModificationB" ]A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
:╦
Ж
storage$TransferJobTransferSpecPosixDataSinkUgcp:storage/TransferJobTransferSpecPosixDataSink:TransferJobTransferSpecPosixDataSink@
><
rootDirectory" 'Root directory path to the filesystem.
:╤
М
storage&TransferJobTransferSpecPosixDataSourceYgcp:storage/TransferJobTransferSpecPosixDataSource:TransferJobTransferSpecPosixDataSource@
><
rootDirectory" 'Root directory path to the filesystem.
:Н
М
storage&TransferJobTransferSpecTransferOptionsYgcp:storage/TransferJobTransferSpecTransferOptions:TransferJobTransferSpecTransferOptions√
°█
$deleteObjectsFromSourceAfterTransferB
 мWhether objects should be deleted from the source after they are transferred to the sink. Note that this option and `delete_objects_unique_in_sink` are mutually exclusive.
┴
deleteObjectsUniqueInSinkB
 ЭWhether objects that exist only in the sink should be deleted. Note that this option and
`delete_objects_from_source_after_transfer` are mutually exclusive.
v
%overwriteObjectsAlreadyExistingInSinkB
 GWhether overwriting objects that already exist in the sink is allowed.
█
overwriteWhenB" ├When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by `overwrite_objects_already_existing_in_sink`. Possible values: ALWAYS, DIFFERENT, NEVER.
:┼
P
storagegetBucketAutoclass1gcp:storage/getBucketAutoclass:getBucketAutoclassЁ
эд
enabled
 ФWhile set to true, autoclass automatically transitions objects in your bucket to appropriate storage classes based on each object's access pattern.
├
terminalStorageClass" жThe storage class that objects in the bucket eventually transition to if they are not read for a certain length of time. Supported values include: NEARLINE, ARCHIVE.
:░
>
storagegetBucketCor%gcp:storage/getBucketCor:getBucketCorэ
ъx
maxAgeSeconds cThe value, in seconds, to return in the Access-Control-Max-Age header used in preflight responses.
╖
methods*" еThe list of HTTP methods on which to include CORS response headers, (GET, OPTIONS, POST, etc) Note: "*" is permitted in the list of methods, and means "any method".
Ш
origins*" ЖThe list of Origins eligible to receive CORS response headers. Note: "*" is permitted in the list of origins, and means "any Origin".
Ш
responseHeaders*" The list of HTTP headers other than the simple response headers to give permission for the user-agent to share across domains.
:╥
t
storagegetBucketCustomPlacementConfigIgcp:storage/getBucketCustomPlacementConfig:getBucketCustomPlacementConfig┘
╓╙
dataLocations*" ╗The list of individual regions that comprise a dual-region bucket. See the docs for a list of acceptable regions. Note: If any of the data_locations changes, it will recreate the bucket.
:√
S
storagegetBucketEncryption3gcp:storage/getBucketEncryption:getBucketEncryptionг
аЭ
defaultKmsKeyName" ГA Cloud KMS key that will be used to encrypt objects inserted into this bucket, if no encryption method is specified. You must pay attention to whether the crypto key is available in the location that this bucket is created in. See the docs for more details.
:╓
t
storagegetBucketHierarchicalNamespaceIgcp:storage/getBucketHierarchicalNamespace:getBucketHierarchicalNamespace^
\Z
enabled
 KSet this field true to organize bucket with logical file system structure.
:√
\
storagegetBucketLifecycleRule9gcp:storage/getBucketLifecycleRule:getBucketLifecycleRuleЪ
Ч╓
actionst*r:p
n
storagegetBucketLifecycleRuleActionEgcp:storage/getBucketLifecycleRuleAction:getBucketLifecycleRuleActionUThe Lifecycle Rule's action configuration. A single block of this type is supported.
╗

conditions}*{:y
w
storagegetBucketLifecycleRuleConditionKgcp:storage/getBucketLifecycleRuleCondition:getBucketLifecycleRuleCondition.The Lifecycle Rule's condition configuration.
:╣
n
storagegetBucketLifecycleRuleActionEgcp:storage/getBucketLifecycleRuleAction:getBucketLifecycleRuleAction╞
├л
storageClass" ЦThe target Storage Class of objects affected by this Lifecycle Rule. Supported values include: MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE.
Т
type" ЕThe type of the action of this Lifecycle Rule. Supported values include: Delete, SetStorageClass and AbortIncompleteMultipartUpload.
:Ф
w
storagegetBucketLifecycleRuleConditionKgcp:storage/getBucketLifecycleRuleCondition:getBucketLifecycleRuleConditionШ
ХG
age <Minimum age of an object in days to satisfy this condition.
i
createdBefore" TCreation date of an object in RFC 3339 (e.g. 2017-06-13) to satisfy this condition.
l
customTimeBefore" TCreation date of an object in RFC 3339 (e.g. 2017-06-13) to satisfy this condition.
g
daysSinceCustomTime LNumber of days elapsed since the user-specified timestamp set on an object.
е
daysSinceNoncurrentTime ЕNumber of days elapsed since the noncurrent timestamp of an object. This
										condition is relevant only for versioned objects.
W
matchesPrefixes*" >One or more matching name prefixes to satisfy this condition.
═
matchesStorageClasses*" нStorage Class of objects to satisfy this condition. Supported values include: MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, DURABLE_REDUCED_AVAILABILITY.
W
matchesSuffixes*" >One or more matching name suffixes to satisfy this condition.
p
noncurrentTimeBefore" TCreation date of an object in RFC 3339 (e.g. 2017-06-13) to satisfy this condition.
В
numNewerVersions jRelevant only for versioned objects. The number of newer versions of an object to satisfy this condition.
┘
sendAgeIfZero
 ├While set true, age value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the age field. It can be used alone or together with age.
в
sendDaysSinceCustomTimeIfZero
 №While set true, days_since_custom_time value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the days_since_custom_time field. It can be used alone or together with days_since_custom_time.
▓
!sendDaysSinceNoncurrentTimeIfZero
 ИWhile set true, days_since_noncurrent_time value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the days_since_noncurrent_time field. It can be used alone or together with days_since_noncurrent_time.
У
sendNumNewerVersionsIfZero
 ЁWhile set true, num_newer_versions value will be sent in the request even for zero value of the field. This field is only useful for setting 0 value to the num_newer_versions field. It can be used alone or together with num_newer_versions.
Ъ
	withState" ИMatch to live and/or archived objects. Unversioned buckets have only live objects. Supported values include: "LIVE", "ARCHIVED", "ANY".
:г
J
storagegetBucketLogging-gcp:storage/getBucketLogging:getBucketLogging╘
╤;
	logBucket" *The bucket that will receive log objects.
С
logObjectPrefix" zThe object prefix for log objects. If it's not provided, by default Google Cloud Storage sets this to this bucket's name.
:к
Т
storage(getBucketObjectContentCustomerEncryption]gcp:storage/getBucketObjectContentCustomerEncryption:getBucketObjectContentCustomerEncryptionТ
ПE
encryptionAlgorithm" *The encryption algorithm. Default: AES256
F
encryptionKey" 1Base64 encoded customer supplied encryption key.
:╤
w
storagegetBucketObjectContentRetentionKgcp:storage/getBucketObjectContentRetention:getBucketObjectContentRetention╒
╥W
mode" KThe object retention mode. Supported values include: "Unlocked", "Locked".
w
retainUntilTime" `Time in RFC 3339 (e.g. 2030-01-01T02:03:04Z) until which object retention protects this object.
:Ф
}
storage!getBucketObjectCustomerEncryptionOgcp:storage/getBucketObjectCustomerEncryption:getBucketObjectCustomerEncryptionТ
ПE
encryptionAlgorithm" *The encryption algorithm. Default: AES256
F
encryptionKey" 1Base64 encoded customer supplied encryption key.
:╝
b
storagegetBucketObjectRetention=gcp:storage/getBucketObjectRetention:getBucketObjectRetention╒
╥W
mode" KThe object retention mode. Supported values include: "Unlocked", "Locked".
w
retainUntilTime" `Time in RFC 3339 (e.g. 2030-01-01T02:03:04Z) until which object retention protects this object.
:э
n
storagegetBucketObjectsBucketObjectEgcp:storage/getBucketObjectsBucketObject:getBucketObjectsBucketObject·
ўk
contentType" X[Content-Type](https://tools.ietf.org/html/rfc7231#section-3.1.1.5) of the object data.
:
	mediaLink" )A url reference to download this object.
$
name" The name of the object.
0
selfLink"  A url reference to this object.
t
storageClass" `The [StorageClass](https://cloud.google.com/storage/docs/storage-classes) of the bucket object.
:ъ
b
storagegetBucketRetentionPolicy=gcp:storage/getBucketRetentionPolicy:getBucketRetentionPolicyГ
А▓
isLocked
 бIf set to true, the bucket will be locked and permanently restrict edits to the bucket's retention policy.  Caution: Locking a bucket is an irreversible action.
╚
retentionPeriod ░The period of time, in seconds, that objects in the bucket must be retained and cannot be deleted, overwritten, or archived. The value must be less than 3,155,760,000 seconds.
:╨
e
storagegetBucketSoftDeletePolicy?gcp:storage/getBucketSoftDeletePolicy:getBucketSoftDeletePolicyц
уп
effectiveTime" ЩServer-determined value that indicates the time from which the policy, or one with a greater retention, was effective. This value is in RFC 3339 format.
о
retentionDurationSeconds НThe duration in seconds that soft-deleted objects in the bucket will be retained and cannot be permanently deleted. Default value is 604800.
:к
S
storagegetBucketVersioning3gcp:storage/getBucketVersioning:getBucketVersioningS
QO
enabled
 @While set to true, versioning is fully enabled for this bucket.
:и
J
storagegetBucketWebsite-gcp:storage/getBucketWebsite:getBucketWebsite┘
╓z
mainPageSuffix" dBehaves as the bucket's directory index where missing objects are treated as potential directories.
X
notFoundPage" DThe custom object to return when a requested resource is not found.
:Й
J
storagegetBucketsBucket-gcp:storage/getBucketsBucket:getBucketsBucket║
╖A
labels2" 1User-provided bucket labels, in key/value pairs.
,
location" The location of the bucket.
$
name" The name of the bucket.
/
selfLink" A url reference to the bucket.
m
storageClass" YThe [StorageClass](https://cloud.google.com/storage/docs/storage-classes) of the bucket.
:Щ
_
tagsTagKeyIamBindingCondition<gcp:tags/TagKeyIamBindingCondition:TagKeyIamBindingCondition6
4
descriptionB" 

expression" 
title" :Ц
\
tagsTagKeyIamMemberCondition:gcp:tags/TagKeyIamMemberCondition:TagKeyIamMemberCondition6
4
descriptionB" 

expression" 
title" :Я
e
tagsTagValueIamBindingCondition@gcp:tags/TagValueIamBindingCondition:TagValueIamBindingCondition6
4
descriptionB" 

expression" 
title" :Ь
b
tagsTagValueIamMemberCondition>gcp:tags/TagValueIamMemberCondition:TagValueIamMemberCondition6
4
descriptionB" 

expression" 
title" :▄
;
tagsgetTagKeysKey$gcp:tags/getTagKeysKey:getTagKeysKeyЬ
Щ╨

createTime" ╜Creation time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
<
description" )User-assigned description of the TagKey.
J
name" >an identifier for the resource with format `tagKeys/{{name}}`
l
namespacedName" VNamespaced name of the TagKey which is in the format `{parentNamespace}/{shortName}`.
Ы
parent" МThe resource name of the parent organization or project. It can be in format `organizations/{org_id}` or `projects/{project_id_or_number}`.
╢
purpose" жA purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag. A purpose does not grant a policy engine exclusive rights to the Tag, and it may be referenced by other policy engines.
Ю
purposeData2" ИPurpose data corresponds to the policy system that the tag is intended for. See documentation for Purpose for formatting of this field.
В
	shortName" qThe user friendly name for a TagKey. The short name should be unique for TagKeys wihting the same tag namespace.
╬

updateTime" ╗Update time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
:Ф
G
tagsgetTagValuesValue,gcp:tags/getTagValuesValue:getTagValuesValue╚
┼╨

createTime" ╜Creation time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
>
description" +User-assigned description of the TagValue.
L
name" @an identifier for the resource with format `tagValues/{{name}}`
7
namespacedName" !Namespaced name of the TagValue.
P
parent" BThe resource name of the parent tagKey in format `tagKey/{name}`.
Е
	shortName" tUser-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey.
╬

updateTime" ╗Update time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
:╓
K
tpuNodeNetworkEndpoint/gcp:tpu/NodeNetworkEndpoint:NodeNetworkEndpointЖ
ГE
	ipAddressB" 2(Output)
The IP address of this network endpoint.
:
portB ,(Output)
The port of this network endpoint.
:Ъ
N
tpuNodeSchedulingConfig1gcp:tpu/NodeSchedulingConfig:NodeSchedulingConfigH
FD
preemptible
 1Defines whether the TPU instance is preemptible.
:Р
K
tpuV2QueuedResourceTpu/gcp:tpu/V2QueuedResourceTpu:V2QueuedResourceTpu└
╜║
	nodeSpecskBi*g:e
c
tpuV2QueuedResourceTpuNodeSpec?gcp:tpu/V2QueuedResourceTpuNodeSpec:V2QueuedResourceTpuNodeSpec@The TPU node(s) being requested.
Structure is documented below.
:з
c
tpuV2QueuedResourceTpuNodeSpec?gcp:tpu/V2QueuedResourceTpuNodeSpec:V2QueuedResourceTpuNodeSpec┐
╝ж
nodes:q
o
tpuV2QueuedResourceTpuNodeSpecNodeGgcp:tpu/V2QueuedResourceTpuNodeSpecNode:V2QueuedResourceTpuNodeSpecNode)The node.
Structure is documented below.
g
nodeIdB" WUnqualified node identifier used to identify the node in the project once provisioned.
(
parent" The parent resource name.
:╚
o
tpuV2QueuedResourceTpuNodeSpecNodeGgcp:tpu/V2QueuedResourceTpuNodeSpecNode:V2QueuedResourceTpuNodeSpecNode╘
╤f
acceleratorTypeB" MTPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
2
descriptionB" Text description of the TPU.
3
runtimeVersion" Runtime version for the TPU.
:Х
Q
tpuV2VmAcceleratorConfig3gcp:tpu/V2VmAcceleratorConfig:V2VmAcceleratorConfig┐
╝*
topology" Topology of TPU in chips.
Н
type" АType of TPU. Please select one of the allowed types: https://cloud.google.com/tpu/docs/reference/rest/v2/AcceleratorConfig#Type
:Ю
6
tpuV2VmDataDisk!gcp:tpu/V2VmDataDisk:V2VmDataDiskу
р╒
modeB" ╞The mode in which to attach this disk. If not specified, the default is READ_WRITE
mode. Only applicable to dataDisks.
Default value is `READ_WRITE`.
Possible values are: `READ_WRITE`, `READ_ONLY`.
Е

sourceDisk" sSpecifies the full path to an existing disk. For example:
"projects/my-project/zones/us-central1-c/disks/my-disk".
:К
E
tpuV2VmNetworkConfig+gcp:tpu/V2VmNetworkConfig:V2VmNetworkConfig└
╜╗
canIpForwardB
 дAllows the TPU node to send and receive packets with non-matching destination or source
IPs. This is required if you plan to use the TPU workers to forward routes.
╦
enableExternalIpsB
 пIndicates that external IP addresses would be associated with the TPU workers. If set to
false, the specified subnetwork or network should have Private Google Access enabled.
б
networkB" ПThe name of the network for the TPU node. It must be a preexisting Google Compute Engine
network. If none is provided, "default" will be used.
^

queueCountB JSpecifies networking queue count for TPU VM instance's network interface.
к

subnetworkB" ХThe name of the subnetwork for the TPU node. It must be a preexisting Google Compute
Engine subnetwork. If none is provided, "default" will be used.
:║
K
tpuV2VmNetworkEndpoint/gcp:tpu/V2VmNetworkEndpoint:V2VmNetworkEndpointъ
ч╪
accessConfigswBu*s:q
o
tpuV2VmNetworkEndpointAccessConfigGgcp:tpu/V2VmNetworkEndpointAccessConfig:V2VmNetworkEndpointAccessConfigN(Output)
The access config for the TPU worker.
Structure is documented below.
N
	ipAddressB" ;(Output)
The internal IP address of this network endpoint.
:
portB ,(Output)
The port of this network endpoint.
:╦
o
tpuV2VmNetworkEndpointAccessConfigGgcp:tpu/V2VmNetworkEndpointAccessConfig:V2VmNetworkEndpointAccessConfigX
VT

externalIpB" @(Output)
An external IP address associated with the TPU worker.
:█
N
tpuV2VmSchedulingConfig1gcp:tpu/V2VmSchedulingConfig:V2VmSchedulingConfigИ
Е>
preemptibleB
 )Defines whether the node is preemptible.
C
reservedB
 1Whether the node is created under a reservation.
:╩
H
tpuV2VmServiceAccount-gcp:tpu/V2VmServiceAccount:V2VmServiceAccount¤
·m
emailB" ^Email address of the service account. If empty, default Compute service account will be used.
И
scopesB*" vThe list of scopes to be made available for this service account. If empty, access to all
Cloud APIs will be allowed.
:╢
`
tpuV2VmShieldedInstanceConfig=gcp:tpu/V2VmShieldedInstanceConfig:V2VmShieldedInstanceConfigR
PN
enableSecureBoot
 6Defines whether the instance has Secure Boot enabled.
:▐
3
tpuV2VmSymptomgcp:tpu/V2VmSymptom:V2VmSymptomж
гD

createTimeB" 0(Output)
Timestamp when the Symptom is created.
G
detailsB" 6(Output)
Detailed information of the current Symptom.
3
symptomTypeB" (Output)
Type of the Symptom.
]
workerIdB" K(Output)
A string used to uniquely distinguish a worker within a TPU node.
:∙
;

transcoder	JobConfig"gcp:transcoder/JobConfig:JobConfig╣
╢П
adBreaksXBV*T:R
P

transcoderJobConfigAdBreak0gcp:transcoder/JobConfigAdBreak:JobConfigAdBreak)Ad break.
Structure is documented below.
╖
	editLists[BY*W:U
S

transcoderJobConfigEditList2gcp:transcoder/JobConfigEditList:JobConfigEditListMList of input assets stored in Cloud Storage.
Structure is documented below.
╫
elementaryStreamssBq*o:m
k

transcoderJobConfigElementaryStreamBgcp:transcoder/JobConfigElementaryStream:JobConfigElementaryStreamMList of input assets stored in Cloud Storage.
Structure is documented below.
─
encryptionsaB_*]:[
Y

transcoderJobConfigEncryption6gcp:transcoder/JobConfigEncryption:JobConfigEncryptionRList of encryption configurations for the content.
Structure is documented below.
л
inputsRBP*N:L
J

transcoderJobConfigInput,gcp:transcoder/JobConfigInput:JobConfigInputMList of input assets stored in Cloud Storage.
Structure is documented below.
б
	manifests[BY*W:U
S

transcoderJobConfigManifest2gcp:transcoder/JobConfigManifest:JobConfigManifest7Manifest configuration.
Structure is documented below.
╢

muxStreams^B\*Z:X
V

transcoderJobConfigMuxStream4gcp:transcoder/JobConfigMuxStream:JobConfigMuxStreamHMultiplexing settings for output stream.
Structure is documented below.
┤
outputSBQ:O
M

transcoderJobConfigOutput.gcp:transcoder/JobConfigOutput:JobConfigOutputULocation of output file(s) in a Cloud Storage bucket.
Structure is documented below.
┬
overlaysXBV*T:R
P

transcoderJobConfigOverlay0gcp:transcoder/JobConfigOverlay:JobConfigOverlay\List of overlays on the output video, in descending Z-order.
Structure is documented below.
┐
pubsubDestinationtBr:p
n

transcoderJobConfigPubsubDestinationDgcp:transcoder/JobConfigPubsubDestination:JobConfigPubsubDestination4Pub/Sub destination.
Structure is documented below.
:╛
P

transcoderJobConfigAdBreak0gcp:transcoder/JobConfigAdBreak:JobConfigAdBreakj
hf
startTimeOffsetB" MStart time in seconds for the ad break, relative to the output file timeline
:╓
S

transcoderJobConfigEditList2gcp:transcoder/JobConfigEditList:JobConfigEditList■
√U
inputsB*" CList of values identifying files that should be used in this atom.
)
keyB" A unique key for this atom.
w
startTimeOffsetB" ^Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
:щ
k

transcoderJobConfigElementaryStreamBgcp:transcoder/JobConfigElementaryStream:JobConfigElementaryStream∙
Ўу
audioStreamХBТ:П
М

transcoder$JobConfigElementaryStreamAudioStreamXgcp:transcoder/JobConfigElementaryStreamAudioStream:JobConfigElementaryStreamAudioStream<Encoding of an audio stream.
Structure is documented below.
)
keyB" A unique key for this atom.
т
videoStreamХBТ:П
М

transcoder$JobConfigElementaryStreamVideoStreamXgcp:transcoder/JobConfigElementaryStreamVideoStream:JobConfigElementaryStreamVideoStream;Encoding of a video stream.
Structure is documented below.
:ж
М

transcoder$JobConfigElementaryStreamAudioStreamXgcp:transcoder/JobConfigElementaryStreamAudioStream:JobConfigElementaryStreamAudioStreamФ
С4

bitrateBps "Audio bitrate in bits per second.
D
channelCountB .Number of audio channels. The default is `2`.
x
channelLayoutsB*" ^A list of channel names specifying layout of the audio channels. The default is ["fl", "fr"].
F
codecB" 7The codec for this audio stream. The default is `aac`.
Q
sampleRateHertzB 8The audio sample rate in Hertz. The default is `48000`.
:о
М

transcoder$JobConfigElementaryStreamVideoStreamXgcp:transcoder/JobConfigElementaryStreamVideoStream:JobConfigElementaryStreamVideoStreamЬ
ЩЦ
h264бBЮ:Ы
Ш

transcoder(JobConfigElementaryStreamVideoStreamH264`gcp:transcoder/JobConfigElementaryStreamVideoStreamH264:JobConfigElementaryStreamVideoStreamH264jH264 codec settings
Structure is documented below.


<a name="nested_h264"></a>The `h264` block supports:
:№
Ш

transcoder(JobConfigElementaryStreamVideoStreamH264`gcp:transcoder/JobConfigElementaryStreamVideoStreamH264:JobConfigElementaryStreamVideoStreamH264▐

█
8

bitrateBps &The video bitrate in bits per second.
9
crfLevelB 'Target CRF level. The default is '21'.
H
entropyCoderB" 2The entropy coder to use. The default is 'cabac'.
I
	frameRate 8The target video frame rate in frames per second (FPS).
_
gopDurationB" JSelect the GOP size based on the specified duration. The default is '3s'.
9
heightPixelsB #The height of the video in pixels.
╫
hlgкBз:д
б

transcoder+JobConfigElementaryStreamVideoStreamH264Hlgfgcp:transcoder/JobConfigElementaryStreamVideoStreamH264Hlg:JobConfigElementaryStreamVideoStreamH264Hlg#HLG color format setting for H264.
D
pixelFormatB" /Pixel format to use. The default is 'yuv420p'.
P
presetB" @Enforces the specified codec preset. The default is 'veryfast'.
7
profileB" &Enforces the specified codec profile.
A
rateControlModeB" (Specify the mode. The default is 'vbr'.
╫
sdrкBз:д
б

transcoder+JobConfigElementaryStreamVideoStreamH264Sdrfgcp:transcoder/JobConfigElementaryStreamVideoStreamH264Sdr:JobConfigElementaryStreamVideoStreamH264Sdr#SDR color format setting for H264.
`
vbvFullnessBitsB GInitial fullness of the Video Buffering Verifier (VBV) buffer in bits.
P
vbvSizeBitsB ;Size of the Video Buffering Verifier (VBV) buffer in bits.
7
widthPixelsB "The width of the video in pixels.
:и
б

transcoder+JobConfigElementaryStreamVideoStreamH264Hlgfgcp:transcoder/JobConfigElementaryStreamVideoStreamH264Hlg:JobConfigElementaryStreamVideoStreamH264Hlg
 :и
б

transcoder+JobConfigElementaryStreamVideoStreamH264Sdrfgcp:transcoder/JobConfigElementaryStreamVideoStreamH264Sdr:JobConfigElementaryStreamVideoStreamH264Sdr
 :П

Y

transcoderJobConfigEncryption6gcp:transcoder/JobConfigEncryption:JobConfigEncryption▒	
о	г
aes128qBo:m
k

transcoderJobConfigEncryptionAes128Bgcp:transcoder/JobConfigEncryptionAes128:JobConfigEncryptionAes128&Configuration for AES-128 encryption.
Ъ

drmSystems}B{:y
w

transcoderJobConfigEncryptionDrmSystemsJgcp:transcoder/JobConfigEncryptionDrmSystems:JobConfigEncryptionDrmSystemsМDRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
Structure is documented below.
9
id" /Identifier for this set of encryption options.
┌
mpegCencwBu:s
q

transcoderJobConfigEncryptionMpegCencFgcp:transcoder/JobConfigEncryptionMpegCenc:JobConfigEncryptionMpegCencUConfiguration for MPEG Common Encryption (MPEG-CENC).
Structure is documented below.
▓
	sampleAeszBx:v
t

transcoderJobConfigEncryptionSampleAesHgcp:transcoder/JobConfigEncryptionSampleAes:JobConfigEncryptionSampleAes)Configuration for SAMPLE-AES encryption.
Ы
secretManagerKeySourceдBб:Ю
Ы

transcoder)JobConfigEncryptionSecretManagerKeySourcebgcp:transcoder/JobConfigEncryptionSecretManagerKeySource:JobConfigEncryptionSecretManagerKeySourceZConfiguration for secrets stored in Google Secret Manager.
Structure is documented below.
:q
k

transcoderJobConfigEncryptionAes128Bgcp:transcoder/JobConfigEncryptionAes128:JobConfigEncryptionAes128
 :М
w

transcoderJobConfigEncryptionDrmSystemsJgcp:transcoder/JobConfigEncryptionDrmSystems:JobConfigEncryptionDrmSystemsР
Н┐
clearkeyШBХ:Т
П

transcoder%JobConfigEncryptionDrmSystemsClearkeyZgcp:transcoder/JobConfigEncryptionDrmSystemsClearkey:JobConfigEncryptionDrmSystemsClearkeyClearkey configuration.
┐
fairplayШBХ:Т
П

transcoder%JobConfigEncryptionDrmSystemsFairplayZgcp:transcoder/JobConfigEncryptionDrmSystemsFairplay:JobConfigEncryptionDrmSystemsFairplayFairplay configuration.
─
	playreadyЫBШ:Х
Т

transcoder&JobConfigEncryptionDrmSystemsPlayready\gcp:transcoder/JobConfigEncryptionDrmSystemsPlayready:JobConfigEncryptionDrmSystemsPlayreadyPlayready configuration.
┐
widevineШBХ:Т
П

transcoder%JobConfigEncryptionDrmSystemsWidevineZgcp:transcoder/JobConfigEncryptionDrmSystemsWidevine:JobConfigEncryptionDrmSystemsWidevineWidevine configuration.
:Ц
П

transcoder%JobConfigEncryptionDrmSystemsClearkeyZgcp:transcoder/JobConfigEncryptionDrmSystemsClearkey:JobConfigEncryptionDrmSystemsClearkey
 :Ц
П

transcoder%JobConfigEncryptionDrmSystemsFairplayZgcp:transcoder/JobConfigEncryptionDrmSystemsFairplay:JobConfigEncryptionDrmSystemsFairplay
 :Щ
Т

transcoder&JobConfigEncryptionDrmSystemsPlayready\gcp:transcoder/JobConfigEncryptionDrmSystemsPlayready:JobConfigEncryptionDrmSystemsPlayready
 :Ц
П

transcoder%JobConfigEncryptionDrmSystemsWidevineZgcp:transcoder/JobConfigEncryptionDrmSystemsWidevine:JobConfigEncryptionDrmSystemsWidevine
 :ж
q

transcoderJobConfigEncryptionMpegCencFgcp:transcoder/JobConfigEncryptionMpegCenc:JobConfigEncryptionMpegCenc1
/-
scheme" Specify the encryption scheme.
:z
t

transcoderJobConfigEncryptionSampleAesHgcp:transcoder/JobConfigEncryptionSampleAes:JobConfigEncryptionSampleAes
 :╒
Ы

transcoder)JobConfigEncryptionSecretManagerKeySourcebgcp:transcoder/JobConfigEncryptionSecretManagerKeySource:JobConfigEncryptionSecretManagerKeySource┤
▒о
secretVersion" ШThe name of the Secret Version containing the encryption key in the following format: projects/{project}/secrets/{secret_id}/versions/{version_number}.
:П
J

transcoderJobConfigInput,gcp:transcoder/JobConfigInput:JobConfigInput└
╜h
keyB" [A unique key for this input. Must be specified when using advanced mapping and edit lists.
╨
uriB" ┬URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, gs://bucket/inputs/file.mp4).
If empty, the value is populated from Job.input_uri.
:∙
S

transcoderJobConfigManifest2gcp:transcoder/JobConfigManifest:JobConfigManifestб
ЮM
fileNameB" ;The name of the generated file. The default is `manifest`.
f

muxStreamsB*" PList of user supplied MuxStream.key values that should appear in this manifest.
e
typeB" WType of the manifest.
Possible values are: `MANIFEST_TYPE_UNSPECIFIED`, `HLS`, `DASH`.
:б
V

transcoderJobConfigMuxStream4gcp:transcoder/JobConfigMuxStream:JobConfigMuxStream╞
├?
	containerB" ,The container format. The default is `mp4`.
]
elementaryStreamsB*" @List of ElementaryStream.key values multiplexed in this stream.
I
encryptionIdB" 3Identifier of the encryption configuration to use.
2
fileNameB"  The name of the generated file.
7
keyB" *A unique key for this multiplexed stream.
ш
segmentSettingsМBЙ:Ж
Г

transcoder!JobConfigMuxStreamSegmentSettingsRgcp:transcoder/JobConfigMuxStreamSegmentSettings:JobConfigMuxStreamSegmentSettingsFSegment settings for ts, fmp4 and vtt.
Structure is documented below.
:с
Г

transcoder!JobConfigMuxStreamSegmentSettingsRgcp:transcoder/JobConfigMuxStreamSegmentSettings:JobConfigMuxStreamSegmentSettingsY
WU
segmentDurationB" <Duration of the segments in seconds. The default is `6.0s`.
:д
M

transcoderJobConfigOutput.gcp:transcoder/JobConfigOutput:JobConfigOutputS
QO
uriB" BURI for the output file(s). For example, gs://my-bucket/outputs/.
:ю
P

transcoderJobConfigOverlay0gcp:transcoder/JobConfigOverlay:JobConfigOverlayЩ
ЦЄ

animationssBq*o:m
k

transcoderJobConfigOverlayAnimationBgcp:transcoder/JobConfigOverlayAnimation:JobConfigOverlayAnimationoList of animations. The list should be chronological, without any time overlap.
Structure is documented below.
Ю
imageeBc:a
_

transcoderJobConfigOverlayImage:gcp:transcoder/JobConfigOverlayImage:JobConfigOverlayImage.Image overlay.
Structure is documented below.
:Ё
k

transcoderJobConfigOverlayAnimationBgcp:transcoder/JobConfigOverlayAnimation:JobConfigOverlayAnimationА
¤·
animationFadeЫBШ:Х
Т

transcoder&JobConfigOverlayAnimationAnimationFade\gcp:transcoder/JobConfigOverlayAnimationAnimationFade:JobConfigOverlayAnimationAnimationFadeKDisplay overlay object with fade animation.
Structure is documented below.
:Б
Т

transcoder&JobConfigOverlayAnimationAnimationFade\gcp:transcoder/JobConfigOverlayAnimationAnimationFade:JobConfigOverlayAnimationAnimationFadeщ
цG
endTimeOffsetB" 0The time to end the fade animation, in seconds.
╚
fadeType" ╖Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
The possible values are:
* `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
* `FADE_IN`: Fade the overlay object into view.
* `FADE_OUT`: Fade the overlay object out of view.
Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
K
startTimeOffsetB" 2The time to start the fade animation, in seconds.
В
xyбBЮ:Ы
Ш

transcoder(JobConfigOverlayAnimationAnimationFadeXy`gcp:transcoder/JobConfigOverlayAnimationAnimationFadeXy:JobConfigOverlayAnimationAnimationFadeXyXNormalized coordinates based on output video resolution.
Structure is documented below.
:ы
Ш

transcoder(JobConfigOverlayAnimationAnimationFadeXy`gcp:transcoder/JobConfigOverlayAnimationAnimationFadeXy:JobConfigOverlayAnimationAnimationFadeXyN
L$
xB Normalized x coordinate.
$
yB Normalized y coordinate.
:└
_

transcoderJobConfigOverlayImage:gcp:transcoder/JobConfigOverlayImage:JobConfigOverlayImage]
[Y
uri" NURI of the image in Cloud Storage. For example, gs://bucket/inputs/image.png.
:Б
n

transcoderJobConfigPubsubDestinationDgcp:transcoder/JobConfigPubsubDestination:JobConfigPubsubDestinationО
ЛИ
topicB" yThe name of the Pub/Sub topic to publish job completion notification to. For example: projects/{project}/topics/{topic}.
:К
S

transcoderJobTemplateConfig2gcp:transcoder/JobTemplateConfig:JobTemplateConfig▓
пз
adBreakspBn*l:j
h

transcoderJobTemplateConfigAdBreak@gcp:transcoder/JobTemplateConfigAdBreak:JobTemplateConfigAdBreak)Ad break.
Structure is documented below.
╧
	editListssBq*o:m
k

transcoderJobTemplateConfigEditListBgcp:transcoder/JobTemplateConfigEditList:JobTemplateConfigEditListMList of input assets stored in Cloud Storage.
Structure is documented below.
Ї
elementaryStreamsПBМ*Й:Ж
Г

transcoder!JobTemplateConfigElementaryStreamRgcp:transcoder/JobTemplateConfigElementaryStream:JobTemplateConfigElementaryStreamMList of input assets stored in Cloud Storage.
Structure is documented below.
▄
encryptionsyBw*u:s
q

transcoderJobTemplateConfigEncryptionFgcp:transcoder/JobTemplateConfigEncryption:JobTemplateConfigEncryptionRList of encryption configurations for the content.
Structure is documented below.
├
inputsjBh*f:d
b

transcoderJobTemplateConfigInput<gcp:transcoder/JobTemplateConfigInput:JobTemplateConfigInputMList of input assets stored in Cloud Storage.
Structure is documented below.
╣
	manifestssBq*o:m
k

transcoderJobTemplateConfigManifestBgcp:transcoder/JobTemplateConfigManifest:JobTemplateConfigManifest7Manifest configuration.
Structure is documented below.
╬

muxStreamsvBt*r:p
n

transcoderJobTemplateConfigMuxStreamDgcp:transcoder/JobTemplateConfigMuxStream:JobTemplateConfigMuxStreamHMultiplexing settings for output stream.
Structure is documented below.
╠
outputkBi:g
e

transcoderJobTemplateConfigOutput>gcp:transcoder/JobTemplateConfigOutput:JobTemplateConfigOutputULocation of output file(s) in a Cloud Storage bucket.
Structure is documented below.
┌
overlayspBn*l:j
h

transcoderJobTemplateConfigOverlay@gcp:transcoder/JobTemplateConfigOverlay:JobTemplateConfigOverlay\List of overlays on the output video, in descending Z-order.
Structure is documented below.
█
pubsubDestinationПBМ:Й
Ж

transcoder"JobTemplateConfigPubsubDestinationTgcp:transcoder/JobTemplateConfigPubsubDestination:JobTemplateConfigPubsubDestination4Pub/Sub destination.
Structure is documented below.
:╓
h

transcoderJobTemplateConfigAdBreak@gcp:transcoder/JobTemplateConfigAdBreak:JobTemplateConfigAdBreakj
hf
startTimeOffsetB" MStart time in seconds for the ad break, relative to the output file timeline
:я
k

transcoderJobTemplateConfigEditListBgcp:transcoder/JobTemplateConfigEditList:JobTemplateConfigEditList 
№U
inputsB*" CList of values identifying files that should be used in this atom.
)
keyB" A unique key for this atom.
x
startTimeOffsetB" _Start time in seconds for the atom, relative to the input file timeline.  The default is `0s`.
:▓
Г

transcoder!JobTemplateConfigElementaryStreamRgcp:transcoder/JobTemplateConfigElementaryStream:JobTemplateConfigElementaryStreamй
ж√
audioStreamнBк:з
д

transcoder,JobTemplateConfigElementaryStreamAudioStreamhgcp:transcoder/JobTemplateConfigElementaryStreamAudioStream:JobTemplateConfigElementaryStreamAudioStream<Encoding of an audio stream.
Structure is documented below.
)
keyB" A unique key for this atom.
·
videoStreamнBк:з
д

transcoder,JobTemplateConfigElementaryStreamVideoStreamhgcp:transcoder/JobTemplateConfigElementaryStreamVideoStream:JobTemplateConfigElementaryStreamVideoStream;Encoding of a video stream.
Structure is documented below.
:┐
д

transcoder,JobTemplateConfigElementaryStreamAudioStreamhgcp:transcoder/JobTemplateConfigElementaryStreamAudioStream:JobTemplateConfigElementaryStreamAudioStreamХ
Т4

bitrateBps "Audio bitrate in bits per second.
D
channelCountB .Number of audio channels. The default is `2`.
y
channelLayoutsB*" _A list of channel names specifying layout of the audio channels.  The default is ["fl", "fr"].
F
codecB" 7The codec for this audio stream. The default is `aac`.
Q
sampleRateHertzB 8The audio sample rate in Hertz. The default is `48000`.
:▐
д

transcoder,JobTemplateConfigElementaryStreamVideoStreamhgcp:transcoder/JobTemplateConfigElementaryStreamVideoStream:JobTemplateConfigElementaryStreamVideoStream┤
▒о
h264╣B╢:│
░

transcoder0JobTemplateConfigElementaryStreamVideoStreamH264pgcp:transcoder/JobTemplateConfigElementaryStreamVideoStreamH264:JobTemplateConfigElementaryStreamVideoStreamH264jH264 codec settings
Structure is documented below.


<a name="nested_h264"></a>The `h264` block supports:
:─
░

transcoder0JobTemplateConfigElementaryStreamVideoStreamH264pgcp:transcoder/JobTemplateConfigElementaryStreamVideoStreamH264:JobTemplateConfigElementaryStreamVideoStreamH264О
Л8

bitrateBps &The video bitrate in bits per second.
9
crfLevelB 'Target CRF level. The default is '21'.
H
entropyCoderB" 2The entropy coder to use. The default is 'cabac'.
I
	frameRate 8The target video frame rate in frames per second (FPS).
_
gopDurationB" JSelect the GOP size based on the specified duration. The default is '3s'.
9
heightPixelsB #The height of the video in pixels.
я
hlg┬B┐:╝
╣

transcoder3JobTemplateConfigElementaryStreamVideoStreamH264Hlgvgcp:transcoder/JobTemplateConfigElementaryStreamVideoStreamH264Hlg:JobTemplateConfigElementaryStreamVideoStreamH264Hlg#HLG color format setting for H264.
D
pixelFormatB" /Pixel format to use. The default is 'yuv420p'.
P
presetB" @Enforces the specified codec preset. The default is 'veryfast'.
7
profileB" &Enforces the specified codec profile.
A
rateControlModeB" (Specify the mode. The default is 'vbr'.
я
sdr┬B┐:╝
╣

transcoder3JobTemplateConfigElementaryStreamVideoStreamH264Sdrvgcp:transcoder/JobTemplateConfigElementaryStreamVideoStreamH264Sdr:JobTemplateConfigElementaryStreamVideoStreamH264Sdr#SDR color format setting for H264.
`
vbvFullnessBitsB GInitial fullness of the Video Buffering Verifier (VBV) buffer in bits.
P
vbvSizeBitsB ;Size of the Video Buffering Verifier (VBV) buffer in bits.
7
widthPixelsB "The width of the video in pixels.
:└
╣

transcoder3JobTemplateConfigElementaryStreamVideoStreamH264Hlgvgcp:transcoder/JobTemplateConfigElementaryStreamVideoStreamH264Hlg:JobTemplateConfigElementaryStreamVideoStreamH264Hlg
 :└
╣

transcoder3JobTemplateConfigElementaryStreamVideoStreamH264Sdrvgcp:transcoder/JobTemplateConfigElementaryStreamVideoStreamH264Sdr:JobTemplateConfigElementaryStreamVideoStreamH264Sdr
 :п
q

transcoderJobTemplateConfigEncryptionFgcp:transcoder/JobTemplateConfigEncryption:JobTemplateConfigEncryption╣

╢
┐
aes128МBЙ:Ж
Г

transcoder!JobTemplateConfigEncryptionAes128Rgcp:transcoder/JobTemplateConfigEncryptionAes128:JobTemplateConfigEncryptionAes128&Configuration for AES-128 encryption.
╢

drmSystemsШBХ:Т
П

transcoder%JobTemplateConfigEncryptionDrmSystemsZgcp:transcoder/JobTemplateConfigEncryptionDrmSystems:JobTemplateConfigEncryptionDrmSystemsМDRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
Structure is documented below.
9
id" /Identifier for this set of encryption options.
Ў
mpegCencТBП:М
Й

transcoder#JobTemplateConfigEncryptionMpegCencVgcp:transcoder/JobTemplateConfigEncryptionMpegCenc:JobTemplateConfigEncryptionMpegCencUConfiguration for MPEG Common Encryption (MPEG-CENC).
Structure is documented below.
╬
	sampleAesХBТ:П
М

transcoder$JobTemplateConfigEncryptionSampleAesXgcp:transcoder/JobTemplateConfigEncryptionSampleAes:JobTemplateConfigEncryptionSampleAes)Configuration for SAMPLE-AES encryption.
│
secretManagerKeySource╝B╣:╢
│

transcoder1JobTemplateConfigEncryptionSecretManagerKeySourcergcp:transcoder/JobTemplateConfigEncryptionSecretManagerKeySource:JobTemplateConfigEncryptionSecretManagerKeySourceZConfiguration for secrets stored in Google Secret Manager.
Structure is documented below.
:К
Г

transcoder!JobTemplateConfigEncryptionAes128Rgcp:transcoder/JobTemplateConfigEncryptionAes128:JobTemplateConfigEncryptionAes128
 :Е
П

transcoder%JobTemplateConfigEncryptionDrmSystemsZgcp:transcoder/JobTemplateConfigEncryptionDrmSystems:JobTemplateConfigEncryptionDrmSystemsЁ
э╫
clearkey░Bн:к
з

transcoder-JobTemplateConfigEncryptionDrmSystemsClearkeyjgcp:transcoder/JobTemplateConfigEncryptionDrmSystemsClearkey:JobTemplateConfigEncryptionDrmSystemsClearkeyClearkey configuration.
╫
fairplay░Bн:к
з

transcoder-JobTemplateConfigEncryptionDrmSystemsFairplayjgcp:transcoder/JobTemplateConfigEncryptionDrmSystemsFairplay:JobTemplateConfigEncryptionDrmSystemsFairplayFairplay configuration.
▄
	playready│B░:н
к

transcoder.JobTemplateConfigEncryptionDrmSystemsPlayreadylgcp:transcoder/JobTemplateConfigEncryptionDrmSystemsPlayready:JobTemplateConfigEncryptionDrmSystemsPlayreadyPlayready configuration.
╫
widevine░Bн:к
з

transcoder-JobTemplateConfigEncryptionDrmSystemsWidevinejgcp:transcoder/JobTemplateConfigEncryptionDrmSystemsWidevine:JobTemplateConfigEncryptionDrmSystemsWidevineWidevine configuration.
:о
з

transcoder-JobTemplateConfigEncryptionDrmSystemsClearkeyjgcp:transcoder/JobTemplateConfigEncryptionDrmSystemsClearkey:JobTemplateConfigEncryptionDrmSystemsClearkey
 :о
з

transcoder-JobTemplateConfigEncryptionDrmSystemsFairplayjgcp:transcoder/JobTemplateConfigEncryptionDrmSystemsFairplay:JobTemplateConfigEncryptionDrmSystemsFairplay
 :▒
к

transcoder.JobTemplateConfigEncryptionDrmSystemsPlayreadylgcp:transcoder/JobTemplateConfigEncryptionDrmSystemsPlayready:JobTemplateConfigEncryptionDrmSystemsPlayready
 :о
з

transcoder-JobTemplateConfigEncryptionDrmSystemsWidevinejgcp:transcoder/JobTemplateConfigEncryptionDrmSystemsWidevine:JobTemplateConfigEncryptionDrmSystemsWidevine
 :┐
Й

transcoder#JobTemplateConfigEncryptionMpegCencVgcp:transcoder/JobTemplateConfigEncryptionMpegCenc:JobTemplateConfigEncryptionMpegCenc1
/-
scheme" Specify the encryption scheme.
:У
М

transcoder$JobTemplateConfigEncryptionSampleAesXgcp:transcoder/JobTemplateConfigEncryptionSampleAes:JobTemplateConfigEncryptionSampleAes
 :э
│

transcoder1JobTemplateConfigEncryptionSecretManagerKeySourcergcp:transcoder/JobTemplateConfigEncryptionSecretManagerKeySource:JobTemplateConfigEncryptionSecretManagerKeySource┤
▒о
secretVersion" ШThe name of the Secret Version containing the encryption key in the following format: projects/{project}/secrets/{secret_id}/versions/{version_number}.
:з
b

transcoderJobTemplateConfigInput<gcp:transcoder/JobTemplateConfigInput:JobTemplateConfigInput└
╜h
keyB" [A unique key for this input. Must be specified when using advanced mapping and edit lists.
╨
uriB" ┬URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, gs://bucket/inputs/file.mp4).
If empty, the value is populated from Job.input_uri.
:С
k

transcoderJobTemplateConfigManifestBgcp:transcoder/JobTemplateConfigManifest:JobTemplateConfigManifestб
ЮM
fileNameB" ;The name of the generated file. The default is `manifest`.
f

muxStreamsB*" PList of user supplied MuxStream.key values that should appear in this manifest.
e
typeB" WType of the manifest.
Possible values are: `MANIFEST_TYPE_UNSPECIFIED`, `HLS`, `DASH`.
:╤
n

transcoderJobTemplateConfigMuxStreamDgcp:transcoder/JobTemplateConfigMuxStream:JobTemplateConfigMuxStream▐
█?
	containerB" ,The container format. The default is `mp4`.
]
elementaryStreamsB*" @List of ElementaryStream.key values multiplexed in this stream.
I
encryptionIdB" 3Identifier of the encryption configuration to use.
2
fileNameB"  The name of the generated file.
7
keyB" *A unique key for this multiplexed stream.
А
segmentSettingsдBб:Ю
Ы

transcoder)JobTemplateConfigMuxStreamSegmentSettingsbgcp:transcoder/JobTemplateConfigMuxStreamSegmentSettings:JobTemplateConfigMuxStreamSegmentSettingsFSegment settings for ts, fmp4 and vtt.
Structure is documented below.
:∙
Ы

transcoder)JobTemplateConfigMuxStreamSegmentSettingsbgcp:transcoder/JobTemplateConfigMuxStreamSegmentSettings:JobTemplateConfigMuxStreamSegmentSettingsY
WU
segmentDurationB" <Duration of the segments in seconds. The default is `6.0s`.
:╝
e

transcoderJobTemplateConfigOutput>gcp:transcoder/JobTemplateConfigOutput:JobTemplateConfigOutputS
QO
uriB" BURI for the output file(s). For example, gs://my-bucket/outputs/.
:╗
h

transcoderJobTemplateConfigOverlay@gcp:transcoder/JobTemplateConfigOverlay:JobTemplateConfigOverlay╬
╦П

animationsПBМ*Й:Ж
Г

transcoder!JobTemplateConfigOverlayAnimationRgcp:transcoder/JobTemplateConfigOverlayAnimation:JobTemplateConfigOverlayAnimationoList of animations. The list should be chronological, without any time overlap.
Structure is documented below.
╢
image}B{:y
w

transcoderJobTemplateConfigOverlayImageJgcp:transcoder/JobTemplateConfigOverlayImage:JobTemplateConfigOverlayImage.Image overlay.
Structure is documented below.
:б
Г

transcoder!JobTemplateConfigOverlayAnimationRgcp:transcoder/JobTemplateConfigOverlayAnimation:JobTemplateConfigOverlayAnimationШ
ХТ
animationFade│B░:н
к

transcoder.JobTemplateConfigOverlayAnimationAnimationFadelgcp:transcoder/JobTemplateConfigOverlayAnimationAnimationFade:JobTemplateConfigOverlayAnimationAnimationFadeKDisplay overlay object with fade animation.
Structure is documented below.
:▒
к

transcoder.JobTemplateConfigOverlayAnimationAnimationFadelgcp:transcoder/JobTemplateConfigOverlayAnimationAnimationFade:JobTemplateConfigOverlayAnimationAnimationFadeБ
■G
endTimeOffsetB" 0The time to end the fade animation, in seconds.
╚
fadeType" ╖Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
The possible values are:
* `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
* `FADE_IN`: Fade the overlay object into view.
* `FADE_OUT`: Fade the overlay object out of view.
Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
K
startTimeOffsetB" 2The time to start the fade animation, in seconds.
Ъ
xy╣B╢:│
░

transcoder0JobTemplateConfigOverlayAnimationAnimationFadeXypgcp:transcoder/JobTemplateConfigOverlayAnimationAnimationFadeXy:JobTemplateConfigOverlayAnimationAnimationFadeXyXNormalized coordinates based on output video resolution.
Structure is documented below.
:Г
░

transcoder0JobTemplateConfigOverlayAnimationAnimationFadeXypgcp:transcoder/JobTemplateConfigOverlayAnimationAnimationFadeXy:JobTemplateConfigOverlayAnimationAnimationFadeXyN
L$
xB Normalized x coordinate.
$
yB Normalized y coordinate.
:╪
w

transcoderJobTemplateConfigOverlayImageJgcp:transcoder/JobTemplateConfigOverlayImage:JobTemplateConfigOverlayImage]
[Y
uri" NURI of the image in Cloud Storage. For example, gs://bucket/inputs/image.png.
:Ъ
Ж

transcoder"JobTemplateConfigPubsubDestinationTgcp:transcoder/JobTemplateConfigPubsubDestination:JobTemplateConfigPubsubDestinationО
ЛИ
topicB" yThe name of the Pub/Sub topic to publish job completion notification to. For example: projects/{project}/topics/{topic}.
:Н
]
vertexAiDatasetEncryptionSpec:gcp:vertex/AiDatasetEncryptionSpec:AiDatasetEncryptionSpecл
ие

kmsKeyNameB" РRequired. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
:▒
Ц
vertex*AiDeploymentResourcePoolDedicatedResources`gcp:vertex/AiDeploymentResourcePoolDedicatedResources:AiDeploymentResourcePoolDedicatedResourcesХ
ТЁ
autoscalingMetricSpecsтB▀*▄:┘
╓
vertex?AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecКgcp:vertex/AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpec:AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecqA list of the metric specifications that overrides a resource utilization metric.
Structure is documented below.
л
machineSpec╜:║
╖
vertex5AiDeploymentResourcePoolDedicatedResourcesMachineSpecvgcp:vertex/AiDeploymentResourcePoolDedicatedResourcesMachineSpec:AiDeploymentResourcePoolDedicatedResourcesMachineSpec\The specification of a single machine used by the prediction
Structure is documented below.
ж
maxReplicaCountB МThe maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
┼
minReplicaCount нThe minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
:├
╓
vertex?AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecКgcp:vertex/AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpec:AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecч
ф▐

metricName" ╦The resource metric name. Supported metrics: For Online Prediction: * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle` * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
А
targetB яThe target resource utilization in percentage (1% - 100%) for the given metric; once the real usage deviates from the target by a certain percentage, the machine replicas change. The default value is 60 (representing 60%) if not provided.
:╗
╖
vertex5AiDeploymentResourcePoolDedicatedResourcesMachineSpecvgcp:vertex/AiDeploymentResourcePoolDedicatedResourcesMachineSpec:AiDeploymentResourcePoolDedicatedResourcesMachineSpec■
√O
acceleratorCountB 5The number of accelerators to attach to the machine.
ц
acceleratorTypeB" ╠The type of accelerator(s) that may be attached to the machine as per accelerator_count. See possible values [here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/MachineSpec#AcceleratorType).
╛
machineTypeB" иThe type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types).
:▓
]
vertexAiEndpointDeployedModel:gcp:vertex/AiEndpointDeployedModel:AiEndpointDeployedModel╨
═▄
automaticResourcesЬBЩ*Ц:У
Р
vertex(AiEndpointDeployedModelAutomaticResource\gcp:vertex/AiEndpointDeployedModelAutomaticResource:AiEndpointDeployedModelAutomaticResourceж(Output)
A description of resources that to large degree are decided by Vertex AI, and require only a modest additional configuration.
Structure is documented below.
X

createTimeB" D(Output)
Output only. Timestamp when the DeployedModel was created.
┘
dedicatedResourcesЬBЩ*Ц:У
Р
vertex(AiEndpointDeployedModelDedicatedResource\gcp:vertex/AiEndpointDeployedModelDedicatedResource:AiEndpointDeployedModelDedicatedResourceг(Output)
A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
Structure is documented below.
Ф
displayNameB" Required. The display name of the Endpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.
ц
enableAccessLoggingB
 ╚(Output)
These logs are like standard server access logs, containing information like timestamp and latency for each prediction request. Note that Stackdriver logs may incur a cost, especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option.
ф
enableContainerLoggingB
 ├(Output)
If true, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Stackdriver Logging. Only supported for custom-trained Models and AutoML Tabular Models.
╔
idB" ╝(Output)
The ID of the DeployedModel. If not provided upon deployment, Vertex AI will generate a value for this ID. This value should be 1-10 characters, and valid characters are /[0-9]/.
е
modelB" Х(Output)
The name of the Model that this is the deployment of. Note that the Model may be in a different location than the DeployedModel's Endpoint.
\
modelVersionIdB" D(Output)
Output only. The version ID of the model that is deployed.
л
privateEndpointsЦBУ*Р:Н
К
vertex&AiEndpointDeployedModelPrivateEndpointXgcp:vertex/AiEndpointDeployedModelPrivateEndpoint:AiEndpointDeployedModelPrivateEndpoint¤(Output)
Output only. Provide paths for users to send predict/explain/health requests directly to the deployed model services running on Cloud via private services access. This field is populated if network is configured.
Structure is documented below.
А
serviceAccountB" ч(Output)
The service account that the DeployedModel's container runs as. Specify the email address of the service account. If this service account is not specified, the container runs as a service account that doesn't have access to the resource project. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
╦
sharedResourcesB" ▒(Output)
The resource name of the shared DeploymentResourcePool to deploy on. Format: projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}
:■
Р
vertex(AiEndpointDeployedModelAutomaticResource\gcp:vertex/AiEndpointDeployedModelAutomaticResource:AiEndpointDeployedModelAutomaticResourceш
х¤
maxReplicaCountB у(Output)
The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
т
minReplicaCountB ╚(Output)
The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
: 
Р
vertex(AiEndpointDeployedModelDedicatedResource\gcp:vertex/AiEndpointDeployedModelDedicatedResource:AiEndpointDeployedModelDedicatedResourceщ
ц┼	
autoscalingMetricSpecs▄B┘*╓:╙
╨
vertex=AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecЖgcp:vertex/AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpec:AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpec╦(Output)
The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.
Structure is documented below.
╢
machineSpecs╜B║*╖:┤
▒
vertex3AiEndpointDeployedModelDedicatedResourceMachineSpecrgcp:vertex/AiEndpointDeployedModelDedicatedResourceMachineSpec:AiEndpointDeployedModelDedicatedResourceMachineSpecf(Output)
The specification of a single machine used by the prediction.
Structure is documented below.
¤
maxReplicaCountB у(Output)
The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
т
minReplicaCountB ╚(Output)
The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
:╙
╨
vertex=AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecЖgcp:vertex/AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpec:AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpec¤
·ы

metricNameB" ╓(Output)
The resource metric name. Supported metrics: * For Online Prediction: * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle` * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
Й
targetB °(Output)
The target resource utilization in percentage (1% - 100%) for the given metric; once the real usage deviates from the target by a certain percentage, the machine replicas change. The default value is 60 (representing 60%) if not provided.
:╛
▒
vertex3AiEndpointDeployedModelDedicatedResourceMachineSpecrgcp:vertex/AiEndpointDeployedModelDedicatedResourceMachineSpec:AiEndpointDeployedModelDedicatedResourceMachineSpecЗ
ДX
acceleratorCountB >(Output)
The number of accelerators to attach to the machine.
я
acceleratorTypeB" ╒(Output)
The type of accelerator(s) that may be attached to the machine as per accelerator_count. See possible values [here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/MachineSpec#AcceleratorType).
╡
machineTypeB" Я(Output)
The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required. TODO(rsurowka): Try to better unify the required vs optional.
:▒
К
vertex&AiEndpointDeployedModelPrivateEndpointXgcp:vertex/AiEndpointDeployedModelPrivateEndpoint:AiEndpointDeployedModelPrivateEndpointб
ЮU
explainHttpUriB" =(Output)
Output only. Http(s) path to send explain requests.
Y
healthHttpUriB" B(Output)
Output only. Http(s) path to send health check requests.
X
predictHttpUriB" @(Output)
Output only. Http(s) path to send prediction requests.
П
serviceAttachmentB" t(Output)
Output only. The name of the service attachment resource. Populated if private service connect is enabled.
:Ш
`
vertexAiEndpointEncryptionSpec<gcp:vertex/AiEndpointEncryptionSpec:AiEndpointEncryptionSpec│
░н

kmsKeyName" ЪRequired. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
:й
o
vertexAiEndpointIamBindingConditionFgcp:vertex/AiEndpointIamBindingCondition:AiEndpointIamBindingCondition6
4
descriptionB" 

expression" 
title" :ж
l
vertexAiEndpointIamMemberConditionDgcp:vertex/AiEndpointIamMemberCondition:AiEndpointIamMemberCondition6
4
descriptionB" 

expression" 
title" :░
Я
vertex-AiEndpointPredictRequestResponseLoggingConfigfgcp:vertex/AiEndpointPredictRequestResponseLoggingConfig:AiEndpointPredictRequestResponseLoggingConfigЛ
Иё
bigqueryDestinationтB▀:▄
┘
vertex@AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationМgcp:vertex/AiEndpointPredictRequestResponseLoggingConfigBigqueryDestination:AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationЇBigQuery table for logging. If only given a project, a new dataset will be created with name `logging_<endpoint-display-name>_<endpoint-id>` where will be made BigQuery-dataset-name compatible (e.g. most special characters will become underscores). If no table name is given, a new table will be created with name `request_response_logging`
Structure is documented below.
/
enabledB
 If logging is enabled or not.
a
samplingRateB KPercentage of requests to be logged, expressed as a fraction in range(0,1]
:ц
┘
vertex@AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationМgcp:vertex/AiEndpointPredictRequestResponseLoggingConfigBigqueryDestination:AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationЗ
ДБ
	outputUriB" эBigQuery URI to a project or table, up to 2000 characters long. When only the project is specified, the Dataset and Table is created. When the full table reference is specified, the Dataset must exist and table must not exist. Accepted forms: - BigQuery path. For example: `bq://projectId` or `bq://projectId.bqDatasetId` or `bq://projectId.bqDatasetId.bqTableId`.
:№
З
vertex%AiEndpointPrivateServiceConnectConfigVgcp:vertex/AiEndpointPrivateServiceConnectConfig:AiEndpointPrivateServiceConnectConfigя
ьl
enablePrivateServiceConnect
 IRequired. If true, expose the IndexEndpoint via private service connect.
Ж
!enableSecurePrivateServiceConnectB
 ┌If set to true, enable secure private service connect with IAM authorization. Otherwise, private service connect will be done without authorization. Note latency will be slightly increased if authorization is enabled.
s
projectAllowlistsB*" VA list of Projects from which the forwarding rule will target the service attachment.
:╪
Z
vertexAiFeatureGroupBigQuery8gcp:vertex/AiFeatureGroupBigQuery:AiFeatureGroupBigQuery∙
ЎЖ
bigQuerySourceК:З
Д
vertex$AiFeatureGroupBigQueryBigQuerySourceTgcp:vertex/AiFeatureGroupBigQueryBigQuerySource:AiFeatureGroupBigQueryBigQuerySourcegThe BigQuery source URI that points to either a BigQuery Table or View.
Structure is documented below.
k
entityIdColumnsB*" PColumns to construct entityId / row keys. If not provided defaults to entityId.
:З
Д
vertex$AiFeatureGroupBigQueryBigQuerySourceTgcp:vertex/AiFeatureGroupBigQueryBigQuerySource:AiFeatureGroupBigQueryBigQuerySource~
|z
inputUri" jBigQuery URI to a table, up to 2000 characters long. For example: `bq://projectId.bqDatasetId.bqTableId.`
:ь
l
vertexAiFeatureOnlineStoreBigtableDgcp:vertex/AiFeatureOnlineStoreBigtable:AiFeatureOnlineStoreBigtable√
°ї
autoScalingУ:Р
Н
vertex'AiFeatureOnlineStoreBigtableAutoScalingZgcp:vertex/AiFeatureOnlineStoreBigtableAutoScaling:AiFeatureOnlineStoreBigtableAutoScalingPAutoscaling config applied to Bigtable Instance.
Structure is documented below.
:∙
Н
vertex'AiFeatureOnlineStoreBigtableAutoScalingZgcp:vertex/AiFeatureOnlineStoreBigtableAutoScaling:AiFeatureOnlineStoreBigtableAutoScalingц
у╧
cpuUtilizationTargetB ░A percentage of the cluster's CPU capacity. Can be from 10% to 80%. When a cluster's CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.
ж
maxNodeCount СThe maximum number of nodes to scale up to. Must be greater than or equal to minNodeCount, and less than or equal to 10 times of 'minNodeCount'.
f
minNodeCount RThe minimum number of nodes to scale down to. Must be greater than or equal to 1.
:Й
Ь
vertex,AiFeatureOnlineStoreDedicatedServingEndpointdgcp:vertex/AiFeatureOnlineStoreDedicatedServingEndpoint:AiFeatureOnlineStoreDedicatedServingEndpointч
ф╪
privateServiceConnectConfigўBЇ:ё
ю
vertexGAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigЪgcp:vertex/AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfig:AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfig?Private service connect config.
Structure is documented below.
Z
publicEndpointDomainNameB" 8(Output)
Domain name to use for this FeatureOnlineStore
к
serviceAttachmentB" О(Output)
Name of the service attachment resource. Applicable only if private service connect is enabled and after FeatureViewSync is created.
:Щ
ю
vertexGAiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigЪgcp:vertex/AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfig:AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigе
вк
enablePrivateServiceConnect
 ЖIf set to true, customers will use private service connection to send request. Otherwise, the connection will set to public endpoint.
s
projectAllowlistsB*" VA list of Projects from which the forwarding rule will target the service attachment.
:─
Н
vertex'AiFeatureOnlineStoreEmbeddingManagementZgcp:vertex/AiFeatureOnlineStoreEmbeddingManagement:AiFeatureOnlineStoreEmbeddingManagement2
0.
enabledB
 Enable embedding management.
:№
Я
vertex-AiFeatureOnlineStoreFeatureviewBigQuerySourcefgcp:vertex/AiFeatureOnlineStoreFeatureviewBigQuerySource:AiFeatureOnlineStoreFeatureviewBigQuerySource╫
╘_
entityIdColumns*" FColumns to construct entityId / row keys. Start by supporting 1 only.
q
uri" fThe BigQuery view URI that will be materialized on each sync trigger based on FeatureView.SyncConfig.
:ч
┤
vertex4AiFeatureOnlineStoreFeatureviewFeatureRegistrySourcetgcp:vertex/AiFeatureOnlineStoreFeatureviewFeatureRegistrySource:AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceн
к╬
featureGroupsт*▀:▄
┘
vertex@AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupМgcp:vertex/AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroup:AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupXList of features that need to be synced to Online Store.
Structure is documented below.
W
projectNumberB" @The project number of the parent project of the feature Groups.
:т
┘
vertex@AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupМgcp:vertex/AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroup:AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupГ
А7
featureGroupId" !Identifier of the feature group.
E

featureIds*" 1Identifiers of features under the feature group.
:А
У
vertex)AiFeatureOnlineStoreFeatureviewSyncConfig^gcp:vertex/AiFeatureOnlineStoreFeatureviewSyncConfig:AiFeatureOnlineStoreFeatureviewSyncConfigч
фс
cronB" ╥Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs.
To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}".
:ў
л
vertex1AiFeatureOnlineStoreFeatureviewVectorSearchConfigngcp:vertex/AiFeatureOnlineStoreFeatureviewVectorSearchConfig:AiFeatureOnlineStoreFeatureviewVectorSearchConfig╞
├ф
bruteForceConfigхBт:▀
▄
vertexAAiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigОgcp:vertex/AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfig:AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigчConfiguration options for using brute force search, which simply implements the standard linear search in the database for each query. It is primarily meant for benchmarking and to generate the ground truth for approximate search.
Т
crowdingColumnB" ∙Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowdingAttribute.
я
distanceMeasureTypeB" ╤The distance measure used in nearest neighbor search.
For details on allowed values, see the [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureOnlineStores.featureViews#DistanceMeasureType).
Possible values are: `SQUARED_L2_DISTANCE`, `COSINE_DISTANCE`, `DOT_PRODUCT_DISTANCE`.
t
embeddingColumn" ]Column of embedding. This column contains the source data to create index for vector search.
M
embeddingDimensionB 1The number of dimensions of the input embedding.
\
filterColumnsB*" CColumns of features that are used to filter vector search results.
п
treeAhConfig┘B╓:╙
╨
vertex=AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigЖgcp:vertex/AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfig:AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfig┬Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing). Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
Structure is documented below.
:у
▄
vertexAAiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigОgcp:vertex/AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfig:AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfig
 :╟
╨
vertex=AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigЖgcp:vertex/AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfig:AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigr
pn
leafNodeEmbeddingCountB" NNumber of embeddings on each leaf node. The default value is 1000 if not set.
:u
o
vertexAiFeatureOnlineStoreOptimizedFgcp:vertex/AiFeatureOnlineStoreOptimized:AiFeatureOnlineStoreOptimized
 :Ш
l
vertexAiFeatureStoreEncryptionSpecDgcp:vertex/AiFeatureStoreEncryptionSpec:AiFeatureStoreEncryptionSpecз
дб

kmsKeyName" ОThe Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the compute resource is created.
:╘
Щ
vertex+AiFeatureStoreEntityTypeIamBindingConditionbgcp:vertex/AiFeatureStoreEntityTypeIamBindingCondition:AiFeatureStoreEntityTypeIamBindingCondition6
4
descriptionB" 

expression" 
title" :╤
Ц
vertex*AiFeatureStoreEntityTypeIamMemberCondition`gcp:vertex/AiFeatureStoreEntityTypeIamMemberCondition:AiFeatureStoreEntityTypeIamMemberCondition6
4
descriptionB" 

expression" 
title" :Т
Р
vertex(AiFeatureStoreEntityTypeMonitoringConfig\gcp:vertex/AiFeatureStoreEntityTypeMonitoringConfig:AiFeatureStoreEntityTypeMonitoringConfig№
∙Ё
categoricalThresholdConfigшBх:т
▀
vertexBAiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigРgcp:vertex/AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfig:AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigцThreshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
Structure is documented below.
┘
importFeaturesAnalysis▄B┘:╓
╙
vertex>AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisИgcp:vertex/AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysis:AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysis`The config for ImportFeatures Analysis Based Feature Monitoring.
Structure is documented below.
ъ
numericalThresholdConfigтB▀:▄
┘
vertex@AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigМgcp:vertex/AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfig:AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigшThreshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
Structure is documented below.
║
snapshotAnalysis╔B╞:├
└
vertex8AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysis|gcp:vertex/AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysis:AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisZThe config for Snapshot Analysis Based Feature Monitoring.
Structure is documented below.
:а
▀
vertexBAiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigРgcp:vertex/AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfig:AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfig╗
╕╡
value зSpecify a threshold value that can trigger the alert. For categorical feature, the distribution distance is calculated by L-inifinity norm. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
:Р
╙
vertex>AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisИgcp:vertex/AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysis:AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysis╖	
┤	В
anomalyDetectionBaselineB" ▀Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
* LATEST_STATS: Choose the later one statistics generated by either most recent snapshot analysis or previous import features analysis. If non of them exists, skip anomaly detection and only generate a statistics.
* MOST_RECENT_SNAPSHOT_STATS: Use the statistics generated by the most recent snapshot analysis if exists.
* PREVIOUS_IMPORT_FEATURES_STATS: Use the statistics generated by the previous import features analysis if exists.
м
stateB" ЬWhether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
* DEFAULT: The default behavior of whether to enable the monitoring. EntityType-level config: disabled.
* ENABLED: Explicitly enables import features analysis. EntityType-level config: by default enables import features analysis for all Features under it.
* DISABLED: Explicitly disables import features analysis. EntityType-level config: by default disables import features analysis for all Features under it.
:г
┘
vertex@AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigМgcp:vertex/AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfig:AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfig─
┴╛
value ░Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by JensenтАУShannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
:├
└
vertex8AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysis|gcp:vertex/AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysis:AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysis¤	
·	Ф
disabledB
 БThe monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoringInterval for Features under it.
╬
monitoringIntervalB" ▒Configuration of the snapshot analysis based monitoring pipeline running interval. The value is rolled up to full day.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".

> **Warning:** `monitoring_interval` is deprecated and will be removed in a future release.
╙
monitoringIntervalDaysB ▓Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days. The default value is 1.
If both FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days and [FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval][] are set when creating/updating EntityTypes/Features, FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days will be used.
╣
stalenessDaysB бCustomized export features time window for snapshot analysis. Unit is one day. The default value is 21 days. Minimum value is 1 day. Maximum value is 4000 days.
:╡
{
vertex!AiFeatureStoreIamBindingConditionNgcp:vertex/AiFeatureStoreIamBindingCondition:AiFeatureStoreIamBindingCondition6
4
descriptionB" 

expression" 
title" :▓
x
vertex AiFeatureStoreIamMemberConditionLgcp:vertex/AiFeatureStoreIamMemberCondition:AiFeatureStoreIamMemberCondition6
4
descriptionB" 

expression" 
title" :Г
{
vertex!AiFeatureStoreOnlineServingConfigNgcp:vertex/AiFeatureStoreOnlineServingConfig:AiFeatureStoreOnlineServingConfigГ
А╕
fixedNodeCountB ЯThe number of nodes for each cluster. The number of nodes will not scale automatically but can be scaled manually by providing different values when updating.
┬
scalingЩBЦ:У
Р
vertex(AiFeatureStoreOnlineServingConfigScaling\gcp:vertex/AiFeatureStoreOnlineServingConfigScaling:AiFeatureStoreOnlineServingConfigScalingЪOnline serving scaling configuration. Only one of fixedNodeCount and scaling can be set. Setting one will reset the other.
Structure is documented below.
:Ю
Р
vertex(AiFeatureStoreOnlineServingConfigScaling\gcp:vertex/AiFeatureStoreOnlineServingConfigScaling:AiFeatureStoreOnlineServingConfigScalingИ
ЕЪ
maxNodeCount ЕThe maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of 'minNodeCount'.
f
minNodeCount RThe minimum number of nodes to scale down to. Must be greater than or equal to 1.
:А
T
vertexAiIndexDeployedIndex4gcp:vertex/AiIndexDeployedIndex:AiIndexDeployedIndexз
дZ
deployedIndexIdB" A(Output)
The ID of the DeployedIndex in the above IndexEndpoint.
F
indexEndpointB" /(Output)
A resource name of the IndexEndpoint.
:в
в
vertex.AiIndexEndpointDeployedIndexAutomaticResourceshgcp:vertex/AiIndexEndpointDeployedIndexAutomaticResources:AiIndexEndpointDeployedIndexAutomaticResources·

ў
╠
maxReplicaCountB ▓The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
е
minReplicaCountB ЛThe minimum number of replicas this DeployedModel will be always deployed on. If minReplicaCount is not set, the default value is 2 (we don't provide SLA when minReplicaCount=1).
If traffic against it increases, it may dynamically be deployed onto more replicas up to [maxReplicaCount](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/AutomaticResources#FIELDS.max_replica_count), and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
:у
в
vertex.AiIndexEndpointDeployedIndexDedicatedResourceshgcp:vertex/AiIndexEndpointDeployedIndexDedicatedResources:AiIndexEndpointDeployedIndexDedicatedResources╗
╕╚
machineSpec╔:╞
├
vertex9AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpec~gcp:vertex/AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpec:AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecmThe minimum number of replicas this DeployedModel will be always deployed on.
Structure is documented below.
╩
maxReplicaCountB ░The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If maxReplicaCount is not set, the default value is minReplicaCount
Э
minReplicaCount ЕThe minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1.
:Ї
├
vertex9AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpec~gcp:vertex/AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpec:AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecл
ие
machineTypeB" ПThe type of the machine.
See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types)
See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types).
For [DeployedModel](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints#DeployedModel) this field is optional, and the default value is n1-standard-2. For [BatchPredictionJob](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#BatchPredictionJob) or as part of [WorkerPoolSpec](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/CustomJobSpec#WorkerPoolSpec) this field is required.
:П
▒
vertex3AiIndexEndpointDeployedIndexDeployedIndexAuthConfigrgcp:vertex/AiIndexEndpointDeployedIndexDeployedIndexAuthConfig:AiIndexEndpointDeployedIndexDeployedIndexAuthConfig╪
╒╥
authProvider▀B▄:┘
╓
vertex?AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderКgcp:vertex/AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProvider:AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProvider`Defines the authentication provider that the DeployedIndex uses.
Structure is documented below.
:й
╓
vertex?AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderКgcp:vertex/AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProvider:AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProvider═
╩╛
allowedIssuersB*" гA list of allowed JWT issuers. Each entry must be a valid Google service account, in the following format: service-account-name@project-id.iam.gserviceaccount.com
Ж
	audiencesB*" qThe list of JWT audiences. that are allowed to access. A JWT containing any of these audiences will be accepted.
:О
Щ
vertex+AiIndexEndpointDeployedIndexPrivateEndpointbgcp:vertex/AiIndexEndpointDeployedIndexPrivateEndpoint:AiIndexEndpointDeployedIndexPrivateEndpointя
ьT
matchGrpcAddressB" :(Output)
The ip address used to send match gRPC requests.
О
pscAutomatedEndpointsтB▀*▄:┘
╓
vertex?AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointКgcp:vertex/AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpoint:AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointП(Output)
PscAutomatedEndpoints is populated if private service connect is enabled if PscAutomatedConfig is set.
Structure is documented below.
В
serviceAttachmentB" g(Output)
The name of the service attachment resource. Populated if private service connect is enabled.
:╬
╓
vertex?AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointКgcp:vertex/AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpoint:AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointЄ
яT
matchAddressB" >(Output)
ip Address created by the automated forwarding rule.
I
networkB" 8(Output)
Corresponding network in pscAutomationConfigs.
L
	projectIdB" 9(Output)
Corresponding projectId in pscAutomationConfigs
:Ж
Ц
vertex*AiIndexEndpointPrivateServiceConnectConfig`gcp:vertex/AiIndexEndpointPrivateServiceConnectConfig:AiIndexEndpointPrivateServiceConnectConfigъ
чp
enablePrivateServiceConnect
 MIf set to true, the IndexEndpoint is created without private service access.
s
projectAllowlistsB*" VA list of Projects from which the forwarding rule will target the service attachment.
:╪
H
vertexAiIndexIndexStat,gcp:vertex/AiIndexIndexStat:AiIndexIndexStatЛ
ИA
shardsCountB ,(Output)
The number of shards in the Index.
C
vectorsCountB" -(Output)
The number of vectors in the Index.
:╜
E
vertexAiIndexMetadata*gcp:vertex/AiIndexMetadata:AiIndexMetadataє
Ё╕
config]B[:Y
W
vertexAiIndexMetadataConfig6gcp:vertex/AiIndexMetadataConfig:AiIndexMetadataConfigOThe configuration of the Matching Engine Index.
Structure is documented below.
█
contentsDeltaUri" ┬Allows inserting, updating  or deleting the contents of the Matching Engine Index.
The string must be a valid Cloud Storage directory path. If this
field is set when calling IndexService.UpdateIndex, then no other
Index field can be also updated as part of the same call.
The expected structure and format of the files this URI points to is
described at https://cloud.google.com/vertex-ai/docs/matching-engine/using-matching-engine#input-data-format
╘
isCompleteOverwriteB
 ╢If this field is set together with contentsDeltaUri when calling IndexService.UpdateIndex,
then existing content of the Index will be replaced by the data from the contentsDeltaUri.
:Ё
W
vertexAiIndexMetadataConfig6gcp:vertex/AiIndexMetadataConfig:AiIndexMetadataConfigФ
СН
algorithmConfigНBК:З
Д
vertex$AiIndexMetadataConfigAlgorithmConfigTgcp:vertex/AiIndexMetadataConfigAlgorithmConfig:AiIndexMetadataConfigAlgorithmConfigjThe configuration with regard to the algorithms used for efficient search.
Structure is documented below.
├
approximateNeighborsCountB ЯThe default number of neighbors to find via approximate search before exact reordering is
performed. Exact reordering is a procedure where results returned by an
approximate search algorithm are reordered via a more expensive distance computation.
Required if tree-AH algorithm is used.
A

dimensions /The number of dimensions of the input vectors.
Є
distanceMeasureTypeB" ╘The distance measure used in nearest neighbor search. The value must be one of the followings:
* SQUARED_L2_DISTANCE: Euclidean (L_2) Distance
* L1_DISTANCE: Manhattan (L_1) Distance
* COSINE_DISTANCE: Cosine Distance. Defined as 1 - cosine similarity.
* DOT_PRODUCT_DISTANCE: Dot Product Distance. Defined as a negative of the dot product
╥
featureNormTypeB" ╕Type of normalization to be carried out on each vector. The value must be one of the followings:
* UNIT_L2_NORM: Unit L2 normalization type
* NONE: No normalization type is specified.
л
	shardSizeB" ЧIndex data is split into equal parts to be processed. These are called "shards".
The shard size must be specified when creating an index. The value must be one of the followings:
* SHARD_SIZE_SMALL: Small (2GB)
* SHARD_SIZE_MEDIUM: Medium (20GB)
* SHARD_SIZE_LARGE: Large (50GB)
:№
Д
vertex$AiIndexMetadataConfigAlgorithmConfigTgcp:vertex/AiIndexMetadataConfigAlgorithmConfig:AiIndexMetadataConfigAlgorithmConfigЄ
я▄
bruteForceConfig╜B║:╖
┤
vertex4AiIndexMetadataConfigAlgorithmConfigBruteForceConfigtgcp:vertex/AiIndexMetadataConfigAlgorithmConfigBruteForceConfig:AiIndexMetadataConfigAlgorithmConfigBruteForceConfigЗConfiguration options for using brute force search, which simply implements the
standard linear search in the database for each query.
Н
treeAhConfig▒Bо:л
и
vertex0AiIndexMetadataConfigAlgorithmConfigTreeAhConfiglgcp:vertex/AiIndexMetadataConfigAlgorithmConfigTreeAhConfig:AiIndexMetadataConfigAlgorithmConfigTreeAhConfig╚Configuration options for using the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
Structure is documented below.
:╗
┤
vertex4AiIndexMetadataConfigAlgorithmConfigBruteForceConfigtgcp:vertex/AiIndexMetadataConfigAlgorithmConfigBruteForceConfig:AiIndexMetadataConfigAlgorithmConfigBruteForceConfig
 :▀
и
vertex0AiIndexMetadataConfigAlgorithmConfigTreeAhConfiglgcp:vertex/AiIndexMetadataConfigAlgorithmConfigTreeAhConfig:AiIndexMetadataConfigAlgorithmConfigTreeAhConfig▒
оn
leafNodeEmbeddingCountB NNumber of embeddings on each leaf node. The default value is 1000 if not set.
╗
leafNodesToSearchPercentB ШThe default percentage of leaf nodes that any query may be searched. Must be in
range 1-100, inclusive. The default value is 10 (means 10%) if not set.
:Я
o
vertexAiMetadataStoreEncryptionSpecFgcp:vertex/AiMetadataStoreEncryptionSpec:AiMetadataStoreEncryptionSpecл
ие

kmsKeyNameB" РRequired. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
:╖
T
vertexAiMetadataStoreState4gcp:vertex/AiMetadataStoreState:AiMetadataStoreState_
][
diskUtilizationBytesB" =(Output)
The disk utilization of the MetadataStore in bytes.
:Н
i
vertexAiTensorboardEncryptionSpecBgcp:vertex/AiTensorboardEncryptionSpec:AiTensorboardEncryptionSpecЯ
ЬЩ

kmsKeyName" ЖThe Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
:є
]
vertexgetAiIndexDeployedIndex:gcp:vertex/getAiIndexDeployedIndex:getAiIndexDeployedIndexС
ОO
deployedIndexId" 8The ID of the DeployedIndex in the above IndexEndpoint.
;
indexEndpoint" &A resource name of the IndexEndpoint.
:╔
Q
vertexgetAiIndexIndexStat2gcp:vertex/getAiIndexIndexStat:getAiIndexIndexStatt
r6
shardsCount #The number of shards in the Index.
8
vectorsCount" $The number of vectors in the Index.
:п
N
vertexgetAiIndexMetadata0gcp:vertex/getAiIndexMetadata:getAiIndexMetadata▄
┘г
configsf*d:b
`
vertexgetAiIndexMetadataConfig<gcp:vertex/getAiIndexMetadataConfig:getAiIndexMetadataConfig0The configuration of the Matching Engine Index.
█
contentsDeltaUri" ┬Allows inserting, updating  or deleting the contents of the Matching Engine Index.
The string must be a valid Cloud Storage directory path. If this
field is set when calling IndexService.UpdateIndex, then no other
Index field can be also updated as part of the same call.
The expected structure and format of the files this URI points to is
described at https://cloud.google.com/vertex-ai/docs/matching-engine/using-matching-engine#input-data-format
╥
isCompleteOverwrite
 ╢If this field is set together with contentsDeltaUri when calling IndexService.UpdateIndex,
then existing content of the Index will be replaced by the data from the contentsDeltaUri.
:▄
`
vertexgetAiIndexMetadataConfig<gcp:vertex/getAiIndexMetadataConfig:getAiIndexMetadataConfigў
Ї°
algorithmConfigsЦ*У:Р
Н
vertex'getAiIndexMetadataConfigAlgorithmConfigZgcp:vertex/getAiIndexMetadataConfigAlgorithmConfig:getAiIndexMetadataConfigAlgorithmConfigKThe configuration with regard to the algorithms used for efficient search.
┴
approximateNeighborsCount ЯThe default number of neighbors to find via approximate search before exact reordering is
performed. Exact reordering is a procedure where results returned by an
approximate search algorithm are reordered via a more expensive distance computation.
Required if tree-AH algorithm is used.
A

dimensions /The number of dimensions of the input vectors.
Ё
distanceMeasureType" ╘The distance measure used in nearest neighbor search. The value must be one of the followings:
* SQUARED_L2_DISTANCE: Euclidean (L_2) Distance
* L1_DISTANCE: Manhattan (L_1) Distance
* COSINE_DISTANCE: Cosine Distance. Defined as 1 - cosine similarity.
* DOT_PRODUCT_DISTANCE: Dot Product Distance. Defined as a negative of the dot product
╨
featureNormType" ╕Type of normalization to be carried out on each vector. The value must be one of the followings:
* UNIT_L2_NORM: Unit L2 normalization type
* NONE: No normalization type is specified.
й
	shardSize" ЧIndex data is split into equal parts to be processed. These are called "shards".
The shard size must be specified when creating an index. The value must be one of the followings:
* SHARD_SIZE_SMALL: Small (2GB)
* SHARD_SIZE_MEDIUM: Medium (20GB)
* SHARD_SIZE_LARGE: Large (50GB)
:·
Н
vertex'getAiIndexMetadataConfigAlgorithmConfigZgcp:vertex/getAiIndexMetadataConfigAlgorithmConfig:getAiIndexMetadataConfigAlgorithmConfigч
фц
bruteForceConfigs╞*├:└
╜
vertex7getAiIndexMetadataConfigAlgorithmConfigBruteForceConfigzgcp:vertex/getAiIndexMetadataConfigAlgorithmConfigBruteForceConfig:getAiIndexMetadataConfigAlgorithmConfigBruteForceConfigЗConfiguration options for using brute force search, which simply implements the
standard linear search in the database for each query.
°
treeAhConfigs║*╖:┤
▒
vertex3getAiIndexMetadataConfigAlgorithmConfigTreeAhConfigrgcp:vertex/getAiIndexMetadataConfigAlgorithmConfigTreeAhConfig:getAiIndexMetadataConfigAlgorithmConfigTreeAhConfigйConfiguration options for using the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
:─
╜
vertex7getAiIndexMetadataConfigAlgorithmConfigBruteForceConfigzgcp:vertex/getAiIndexMetadataConfigAlgorithmConfigBruteForceConfig:getAiIndexMetadataConfigAlgorithmConfigBruteForceConfig
 :ф
▒
vertex3getAiIndexMetadataConfigAlgorithmConfigTreeAhConfigrgcp:vertex/getAiIndexMetadataConfigAlgorithmConfigTreeAhConfig:getAiIndexMetadataConfigAlgorithmConfigTreeAhConfigн
кl
leafNodeEmbeddingCount NNumber of embeddings on each leaf node. The default value is 1000 if not set.
╣
leafNodesToSearchPercent ШThe default percentage of leaf nodes that any query may be searched. Must be in
range 1-100, inclusive. The default value is 10 (means 10%) if not set.
