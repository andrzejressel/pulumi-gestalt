/// Manages the File Upload of an IoT Hub.
///
/// > **NOTE:** File upload can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.FileUpload` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: azure:core:ResourceGroup
///     properties:
///       name: example-resources
///       location: West Europe
///   exampleAccount:
///     type: azure:storage:Account
///     name: example
///     properties:
///       name: examplestorage
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       accountTier: Standard
///       accountReplicationType: LRS
///   exampleContainer:
///     type: azure:storage:Container
///     name: example
///     properties:
///       name: examplecontainer
///       storageAccountName: ${exampleAccount.name}
///       containerAccessType: private
///   exampleIoTHub:
///     type: azure:iot:IoTHub
///     name: example
///     properties:
///       name: example
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       sku:
///         name: S1
///         capacity: '1'
///   exampleFileUpload:
///     type: azure:iot:FileUpload
///     name: example
///     properties:
///       iothubId: ${exampleIoTHub.id}
///       connectionString: ${exampleAccount.primaryBlobConnectionString}
///       containerName: ${exampleContainer.name}
/// ```
///
/// ## Import
///
/// IoT Hub File Uploads can be imported using the `resource id`, e.g.
///
/// ```sh
/// $ pulumi import azure:iot/fileUpload:FileUpload example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1
/// ```
///
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod file_upload {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct FileUploadArgs {
        /// The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
        #[builder(into, default)]
        pub authentication_type: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The connection string for the Azure Storage account to which files are uploaded.
        #[builder(into)]
        pub connection_string: pulumi_gestalt_rust::InputOrOutput<String>,
        /// The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connection_string` specified.
        #[builder(into)]
        pub container_name: pulumi_gestalt_rust::InputOrOutput<String>,
        /// The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
        #[builder(into, default)]
        pub default_ttl: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The ID of the User Managed Identity used to authenticate against the storage account.
        ///
        /// > **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the IoT Hub. If `identity_id` is omitted when `authentication_type` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
        #[builder(into, default)]
        pub identity_id: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
        #[builder(into)]
        pub iothub_id: pulumi_gestalt_rust::InputOrOutput<String>,
        /// The lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
        #[builder(into, default)]
        pub lock_duration: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
        #[builder(into, default)]
        pub max_delivery_count: pulumi_gestalt_rust::InputOrOutput<Option<i32>>,
        /// Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
        #[builder(into, default)]
        pub notifications_enabled: pulumi_gestalt_rust::InputOrOutput<Option<bool>>,
        /// The period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
        #[builder(into, default)]
        pub sas_ttl: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
    }
    #[allow(dead_code)]
    pub struct FileUploadResult {
        /// The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
        pub authentication_type: pulumi_gestalt_rust::Output<Option<String>>,
        /// The connection string for the Azure Storage account to which files are uploaded.
        pub connection_string: pulumi_gestalt_rust::Output<String>,
        /// The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connection_string` specified.
        pub container_name: pulumi_gestalt_rust::Output<String>,
        /// The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
        pub default_ttl: pulumi_gestalt_rust::Output<Option<String>>,
        /// The ID of the User Managed Identity used to authenticate against the storage account.
        ///
        /// > **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the IoT Hub. If `identity_id` is omitted when `authentication_type` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
        pub identity_id: pulumi_gestalt_rust::Output<Option<String>>,
        /// The ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
        pub iothub_id: pulumi_gestalt_rust::Output<String>,
        /// The lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
        pub lock_duration: pulumi_gestalt_rust::Output<Option<String>>,
        /// The number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
        pub max_delivery_count: pulumi_gestalt_rust::Output<Option<i32>>,
        /// Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
        pub notifications_enabled: pulumi_gestalt_rust::Output<Option<bool>>,
        /// The period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
        pub sas_ttl: pulumi_gestalt_rust::Output<Option<String>>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::Context,
        name: &str,
        args: FileUploadArgs,
    ) -> FileUploadResult {
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let authentication_type_binding = args.authentication_type.get_output(context);
        let connection_string_binding = args.connection_string.get_output(context);
        let container_name_binding = args.container_name.get_output(context);
        let default_ttl_binding = args.default_ttl.get_output(context);
        let identity_id_binding = args.identity_id.get_output(context);
        let iothub_id_binding = args.iothub_id.get_output(context);
        let lock_duration_binding = args.lock_duration.get_output(context);
        let max_delivery_count_binding = args.max_delivery_count.get_output(context);
        let notifications_enabled_binding = args
            .notifications_enabled
            .get_output(context);
        let sas_ttl_binding = args.sas_ttl.get_output(context);
        let request = pulumi_gestalt_rust::RegisterResourceRequest {
            type_: "azure:iot/fileUpload:FileUpload".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "authenticationType".into(),
                    value: authentication_type_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "connectionString".into(),
                    value: connection_string_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "containerName".into(),
                    value: container_name_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "defaultTtl".into(),
                    value: default_ttl_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "identityId".into(),
                    value: identity_id_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "iothubId".into(),
                    value: iothub_id_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "lockDuration".into(),
                    value: lock_duration_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "maxDeliveryCount".into(),
                    value: max_delivery_count_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "notificationsEnabled".into(),
                    value: notifications_enabled_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "sasTtl".into(),
                    value: sas_ttl_binding.get_id(),
                },
            ],
        };
        let o = context.register_resource(request);
        FileUploadResult {
            authentication_type: o.get_field("authenticationType"),
            connection_string: o.get_field("connectionString"),
            container_name: o.get_field("containerName"),
            default_ttl: o.get_field("defaultTtl"),
            identity_id: o.get_field("identityId"),
            iothub_id: o.get_field("iothubId"),
            lock_duration: o.get_field("lockDuration"),
            max_delivery_count: o.get_field("maxDeliveryCount"),
            notifications_enabled: o.get_field("notificationsEnabled"),
            sas_ttl: o.get_field("sasTtl"),
        }
    }
}
