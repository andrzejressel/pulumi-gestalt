#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod get_signing_job {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct GetSigningJobArgs {
        /// ID of the signing job on output.
        #[builder(into)]
        pub job_id: pulumi_gestalt_rust::InputOrOutput<String>,
    }
    #[allow(dead_code)]
    pub struct GetSigningJobResult {
        /// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was completed.
        pub completed_at: pulumi_gestalt_rust::Output<String>,
        /// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was created.
        pub created_at: pulumi_gestalt_rust::Output<String>,
        /// The provider-assigned unique ID for this managed resource.
        pub id: pulumi_gestalt_rust::Output<String>,
        pub job_id: pulumi_gestalt_rust::Output<String>,
        /// IAM entity that initiated the signing job.
        pub job_invoker: pulumi_gestalt_rust::Output<String>,
        /// AWS account ID of the job owner.
        pub job_owner: pulumi_gestalt_rust::Output<String>,
        /// A human-readable name for the signing platform associated with the signing job.
        pub platform_display_name: pulumi_gestalt_rust::Output<String>,
        /// Platform to which your signed code image will be distributed.
        pub platform_id: pulumi_gestalt_rust::Output<String>,
        /// Name of the profile that initiated the signing operation.
        pub profile_name: pulumi_gestalt_rust::Output<String>,
        /// Version of the signing profile used to initiate the signing job.
        pub profile_version: pulumi_gestalt_rust::Output<String>,
        /// IAM principal that requested the signing job.
        pub requested_by: pulumi_gestalt_rust::Output<String>,
        /// Revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.
        pub revocation_records: pulumi_gestalt_rust::Output<
            Vec<super::super::super::types::signer::GetSigningJobRevocationRecord>,
        >,
        /// The time when the signature of a signing job expires.
        pub signature_expires_at: pulumi_gestalt_rust::Output<String>,
        /// Name of the S3 bucket where the signed code image is saved by code signing.
        pub signed_objects: pulumi_gestalt_rust::Output<
            Vec<super::super::super::types::signer::GetSigningJobSignedObject>,
        >,
        /// Object that contains the name of your S3 bucket or your raw code.
        pub sources: pulumi_gestalt_rust::Output<
            Vec<super::super::super::types::signer::GetSigningJobSource>,
        >,
        /// Status of the signing job.
        pub status: pulumi_gestalt_rust::Output<String>,
        /// String value that contains the status reason.
        pub status_reason: pulumi_gestalt_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn invoke(
        context: &pulumi_gestalt_rust::Context,
        args: GetSigningJobArgs,
    ) -> GetSigningJobResult {
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let job_id_binding = args.job_id.get_output(context);
        let request = pulumi_gestalt_rust::InvokeResourceRequest {
            token: "aws:signer/getSigningJob:getSigningJob".into(),
            version: super::super::super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "jobId".into(),
                    value: job_id_binding.get_id(),
                },
            ],
        };
        let o = context.invoke_resource(request);
        GetSigningJobResult {
            completed_at: o.get_field("completedAt"),
            created_at: o.get_field("createdAt"),
            id: o.get_field("id"),
            job_id: o.get_field("jobId"),
            job_invoker: o.get_field("jobInvoker"),
            job_owner: o.get_field("jobOwner"),
            platform_display_name: o.get_field("platformDisplayName"),
            platform_id: o.get_field("platformId"),
            profile_name: o.get_field("profileName"),
            profile_version: o.get_field("profileVersion"),
            requested_by: o.get_field("requestedBy"),
            revocation_records: o.get_field("revocationRecords"),
            signature_expires_at: o.get_field("signatureExpiresAt"),
            signed_objects: o.get_field("signedObjects"),
            sources: o.get_field("sources"),
            status: o.get_field("status"),
            status_reason: o.get_field("statusReason"),
        }
    }
}
