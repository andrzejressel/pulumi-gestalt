/// Creates a Signer Signing Profile Permission. That is, a cross-account permission for a signing profile.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   prodSp:
///     type: aws:signer:SigningProfile
///     name: prod_sp
///     properties:
///       platformId: AWSLambda-SHA384-ECDSA
///       namePrefix: prod_sp_
///       signatureValidityPeriod:
///         value: 5
///         type: YEARS
///       tags:
///         tag1: value1
///         tag2: value2
///   spPermission1:
///     type: aws:signer:SigningProfilePermission
///     name: sp_permission_1
///     properties:
///       profileName: ${prodSp.name}
///       action: signer:StartSigningJob
///       principal: ${awsAccount}
///   spPermission2:
///     type: aws:signer:SigningProfilePermission
///     name: sp_permission_2
///     properties:
///       profileName: ${prodSp.name}
///       action: signer:GetSigningProfile
///       principal: ${awsTeamRoleArn}
///       statementId: ProdAccountStartSigningJob_StatementId
///   spPermission3:
///     type: aws:signer:SigningProfilePermission
///     name: sp_permission_3
///     properties:
///       profileName: ${prodSp.name}
///       action: signer:RevokeSignature
///       principal: '123456789012'
///       profileVersion: ${prodSp.version}
///       statementIdPrefix: version-permission-
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import Signer signing profile permission statements using profile_name/statement_id. For example:
///
/// ```sh
/// $ pulumi import aws:signer/signingProfilePermission:SigningProfilePermission test_signer_signing_profile_permission prod_profile_DdW3Mk1foYL88fajut4mTVFGpuwfd4ACO6ANL0D1uIj7lrn8adK/ProdAccountStartSigningJobStatementId
/// ```
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod signing_profile_permission {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct SigningProfilePermissionArgs {
        /// An AWS Signer action permitted as part of cross-account permissions. Valid values: `signer:StartSigningJob`, `signer:GetSigningProfile`, `signer:RevokeSignature`, or `signer:SignPayload`.
        #[builder(into)]
        pub action: pulumi_gestalt_rust::InputOrOutput<String>,
        /// The AWS principal to be granted a cross-account permission.
        #[builder(into)]
        pub principal: pulumi_gestalt_rust::InputOrOutput<String>,
        /// Name of the signing profile to add the cross-account permissions.
        #[builder(into)]
        pub profile_name: pulumi_gestalt_rust::InputOrOutput<String>,
        /// The signing profile version that a permission applies to.
        #[builder(into, default)]
        pub profile_version: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// A unique statement identifier. By default generated by the provider.
        #[builder(into, default)]
        pub statement_id: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statement_id`.
        #[builder(into, default)]
        pub statement_id_prefix: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
    }
    #[allow(dead_code)]
    pub struct SigningProfilePermissionResult {
        /// An AWS Signer action permitted as part of cross-account permissions. Valid values: `signer:StartSigningJob`, `signer:GetSigningProfile`, `signer:RevokeSignature`, or `signer:SignPayload`.
        pub action: pulumi_gestalt_rust::Output<String>,
        /// The AWS principal to be granted a cross-account permission.
        pub principal: pulumi_gestalt_rust::Output<String>,
        /// Name of the signing profile to add the cross-account permissions.
        pub profile_name: pulumi_gestalt_rust::Output<String>,
        /// The signing profile version that a permission applies to.
        pub profile_version: pulumi_gestalt_rust::Output<String>,
        /// A unique statement identifier. By default generated by the provider.
        pub statement_id: pulumi_gestalt_rust::Output<String>,
        /// A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statement_id`.
        pub statement_id_prefix: pulumi_gestalt_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::Context,
        name: &str,
        args: SigningProfilePermissionArgs,
    ) -> SigningProfilePermissionResult {
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let action_binding = args.action.get_output(context);
        let principal_binding = args.principal.get_output(context);
        let profile_name_binding = args.profile_name.get_output(context);
        let profile_version_binding = args.profile_version.get_output(context);
        let statement_id_binding = args.statement_id.get_output(context);
        let statement_id_prefix_binding = args.statement_id_prefix.get_output(context);
        let request = pulumi_gestalt_rust::RegisterResourceRequest {
            type_: "aws:signer/signingProfilePermission:SigningProfilePermission".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "action".into(),
                    value: &action_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "principal".into(),
                    value: &principal_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "profileName".into(),
                    value: &profile_name_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "profileVersion".into(),
                    value: &profile_version_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "statementId".into(),
                    value: &statement_id_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "statementIdPrefix".into(),
                    value: &statement_id_prefix_binding.drop_type(),
                },
            ],
        };
        let o = context.register_resource(request);
        SigningProfilePermissionResult {
            action: o.get_field("action"),
            principal: o.get_field("principal"),
            profile_name: o.get_field("profileName"),
            profile_version: o.get_field("profileVersion"),
            statement_id: o.get_field("statementId"),
            statement_id_prefix: o.get_field("statementIdPrefix"),
        }
    }
}
