/// Provides a DB event subscription resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_gestalt_rust::Output;
/// use pulumi_gestalt_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let default = instance::create(
///         "default",
///         InstanceArgs::builder()
///             .allocated_storage(10)
///             .db_name("mydb")
///             .db_subnet_group_name("my_database_subnet_group")
///             .engine("mysql")
///             .engine_version("5.6.17")
///             .instance_class("db.t2.micro")
///             .parameter_group_name("default.mysql5.6")
///             .password("bar")
///             .username("foo")
///             .build_struct(),
///     );
///     let defaultEventSubscription = event_subscription::create(
///         "defaultEventSubscription",
///         EventSubscriptionArgs::builder()
///             .event_categories(
///                 vec![
///                     "availability", "deletion", "failover", "failure", "low storage",
///                     "maintenance", "notification", "read replica", "recovery",
///                     "restoration",
///                 ],
///             )
///             .name("rds-event-sub")
///             .sns_topic("${defaultTopic.arn}")
///             .source_ids(vec!["${default.identifier}",])
///             .source_type("db-instance")
///             .build_struct(),
///     );
///     let defaultTopic = topic::create(
///         "defaultTopic",
///         TopicArgs::builder().name("rds-events").build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import DB Event Subscriptions using the `name`. For example:
///
/// ```sh
/// $ pulumi import aws:rds/eventSubscription:EventSubscription default rds-event-sub
/// ```
#[allow(clippy::doc_lazy_continuation)]
pub mod event_subscription {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct EventSubscriptionArgs {
        /// A boolean flag to enable/disable the subscription. Defaults to true.
        #[builder(into, default)]
        pub enabled: pulumi_gestalt_rust::InputOrOutput<Option<bool>>,
        /// A list of event categories for a SourceType that you want to subscribe to. See http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html or run `aws rds describe-event-categories`.
        #[builder(into, default)]
        pub event_categories: pulumi_gestalt_rust::InputOrOutput<Option<Vec<String>>>,
        /// The name of the DB event subscription. By default generated by this provider.
        #[builder(into, default)]
        pub name: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The name of the DB event subscription. Conflicts with `name`.
        #[builder(into, default)]
        pub name_prefix: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The SNS topic to send events to.
        #[builder(into)]
        pub sns_topic: pulumi_gestalt_rust::InputOrOutput<String>,
        /// A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a source_type must also be specified.
        #[builder(into, default)]
        pub source_ids: pulumi_gestalt_rust::InputOrOutput<Option<Vec<String>>>,
        /// The type of source that will be generating the events. Valid options are `db-instance`, `db-security-group`, `db-parameter-group`, `db-snapshot`, `db-cluster`, `db-cluster-snapshot`, or `db-proxy`. If not set, all sources will be subscribed to.
        #[builder(into, default)]
        pub source_type: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        #[builder(into, default)]
        pub tags: pulumi_gestalt_rust::InputOrOutput<
            Option<std::collections::HashMap<String, String>>,
        >,
    }
    #[allow(dead_code)]
    pub struct EventSubscriptionResult {
        /// The Amazon Resource Name of the RDS event notification subscription
        pub arn: pulumi_gestalt_rust::Output<String>,
        /// The AWS customer account associated with the RDS event notification subscription
        pub customer_aws_id: pulumi_gestalt_rust::Output<String>,
        /// A boolean flag to enable/disable the subscription. Defaults to true.
        pub enabled: pulumi_gestalt_rust::Output<Option<bool>>,
        /// A list of event categories for a SourceType that you want to subscribe to. See http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html or run `aws rds describe-event-categories`.
        pub event_categories: pulumi_gestalt_rust::Output<Option<Vec<String>>>,
        /// The name of the DB event subscription. By default generated by this provider.
        pub name: pulumi_gestalt_rust::Output<String>,
        /// The name of the DB event subscription. Conflicts with `name`.
        pub name_prefix: pulumi_gestalt_rust::Output<String>,
        /// The SNS topic to send events to.
        pub sns_topic: pulumi_gestalt_rust::Output<String>,
        /// A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a source_type must also be specified.
        pub source_ids: pulumi_gestalt_rust::Output<Option<Vec<String>>>,
        /// The type of source that will be generating the events. Valid options are `db-instance`, `db-security-group`, `db-parameter-group`, `db-snapshot`, `db-cluster`, `db-cluster-snapshot`, or `db-proxy`. If not set, all sources will be subscribed to.
        pub source_type: pulumi_gestalt_rust::Output<Option<String>>,
        /// A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        pub tags: pulumi_gestalt_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        pub tags_all: pulumi_gestalt_rust::Output<
            std::collections::HashMap<String, String>,
        >,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::PulumiContext,
        name: &str,
        args: EventSubscriptionArgs,
    ) -> EventSubscriptionResult {
        use pulumi_gestalt_rust::__private::pulumi_gestalt_wit::client_bindings::component::pulumi_gestalt::register_interface;
        use std::collections::HashMap;
        let enabled_binding = args.enabled.get_output(context).get_inner();
        let event_categories_binding = args
            .event_categories
            .get_output(context)
            .get_inner();
        let name_binding = args.name.get_output(context).get_inner();
        let name_prefix_binding = args.name_prefix.get_output(context).get_inner();
        let sns_topic_binding = args.sns_topic.get_output(context).get_inner();
        let source_ids_binding = args.source_ids.get_output(context).get_inner();
        let source_type_binding = args.source_type.get_output(context).get_inner();
        let tags_binding = args.tags.get_output(context).get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "aws:rds/eventSubscription:EventSubscription".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "enabled".into(),
                    value: &enabled_binding,
                },
                register_interface::ObjectField {
                    name: "eventCategories".into(),
                    value: &event_categories_binding,
                },
                register_interface::ObjectField {
                    name: "name".into(),
                    value: &name_binding,
                },
                register_interface::ObjectField {
                    name: "namePrefix".into(),
                    value: &name_prefix_binding,
                },
                register_interface::ObjectField {
                    name: "snsTopic".into(),
                    value: &sns_topic_binding,
                },
                register_interface::ObjectField {
                    name: "sourceIds".into(),
                    value: &source_ids_binding,
                },
                register_interface::ObjectField {
                    name: "sourceType".into(),
                    value: &source_type_binding,
                },
                register_interface::ObjectField {
                    name: "tags".into(),
                    value: &tags_binding,
                },
            ]),
        };
        let o = register_interface::register(context.get_inner(), &request);
        EventSubscriptionResult {
            arn: pulumi_gestalt_rust::__private::into_domain(o.extract_field("arn")),
            customer_aws_id: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("customerAwsId"),
            ),
            enabled: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("enabled"),
            ),
            event_categories: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("eventCategories"),
            ),
            name: pulumi_gestalt_rust::__private::into_domain(o.extract_field("name")),
            name_prefix: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("namePrefix"),
            ),
            sns_topic: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("snsTopic"),
            ),
            source_ids: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("sourceIds"),
            ),
            source_type: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("sourceType"),
            ),
            tags: pulumi_gestalt_rust::__private::into_domain(o.extract_field("tags")),
            tags_all: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("tagsAll"),
            ),
        }
    }
}
