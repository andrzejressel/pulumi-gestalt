/// Provides a DocumentDB event subscription resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_gestalt_rust::Output;
/// use pulumi_gestalt_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = cluster::create(
///         "example",
///         ClusterArgs::builder()
///             .availability_zones(
///                 vec![
///                     "${available.names[0]}", "${available.names[1]}",
///                     "${available.names[2]}",
///                 ],
///             )
///             .cluster_identifier("example")
///             .master_password("mustbeeightcharaters")
///             .master_username("foo")
///             .skip_final_snapshot(true)
///             .build_struct(),
///     );
///     let exampleEventSubscription = event_subscription::create(
///         "exampleEventSubscription",
///         EventSubscriptionArgs::builder()
///             .enabled(true)
///             .event_categories(vec!["creation", "failure",])
///             .name("example")
///             .sns_topic_arn("${exampleTopic.arn}")
///             .source_ids(vec!["${example.id}",])
///             .source_type("db-cluster")
///             .build_struct(),
///     );
///     let exampleTopic = topic::create(
///         "exampleTopic",
///         TopicArgs::builder().name("example-events").build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import DocumentDB Event Subscriptions using the `name`. For example:
///
/// ```sh
/// $ pulumi import aws:docdb/eventSubscription:EventSubscription example event-sub
/// ```
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod event_subscription {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct EventSubscriptionArgs {
        /// A boolean flag to enable/disable the subscription. Defaults to true.
        #[builder(into, default)]
        pub enabled: pulumi_gestalt_rust::InputOrOutput<Option<bool>>,
        /// A list of event categories for a SourceType that you want to subscribe to. See https://docs.aws.amazon.com/documentdb/latest/developerguide/API_Event.html or run `aws docdb describe-event-categories`.
        #[builder(into, default)]
        pub event_categories: pulumi_gestalt_rust::InputOrOutput<Option<Vec<String>>>,
        /// The name of the DocumentDB event subscription. By default generated by this provider.
        #[builder(into, default)]
        pub name: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The name of the DocumentDB event subscription. Conflicts with `name`.
        #[builder(into, default)]
        pub name_prefix: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        #[builder(into)]
        pub sns_topic_arn: pulumi_gestalt_rust::InputOrOutput<String>,
        /// A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a source_type must also be specified.
        #[builder(into, default)]
        pub source_ids: pulumi_gestalt_rust::InputOrOutput<Option<Vec<String>>>,
        /// The type of source that will be generating the events. Valid options are `db-instance`, `db-cluster`, `db-parameter-group`, `db-security-group`,` db-cluster-snapshot`. If not set, all sources will be subscribed to.
        #[builder(into, default)]
        pub source_type: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        #[builder(into, default)]
        pub tags: pulumi_gestalt_rust::InputOrOutput<
            Option<std::collections::HashMap<String, String>>,
        >,
    }
    #[allow(dead_code)]
    pub struct EventSubscriptionResult {
        /// The Amazon Resource Name of the DocumentDB event notification subscription
        pub arn: pulumi_gestalt_rust::Output<String>,
        /// The AWS customer account associated with the DocumentDB event notification subscription
        pub customer_aws_id: pulumi_gestalt_rust::Output<String>,
        /// A boolean flag to enable/disable the subscription. Defaults to true.
        pub enabled: pulumi_gestalt_rust::Output<Option<bool>>,
        /// A list of event categories for a SourceType that you want to subscribe to. See https://docs.aws.amazon.com/documentdb/latest/developerguide/API_Event.html or run `aws docdb describe-event-categories`.
        pub event_categories: pulumi_gestalt_rust::Output<Option<Vec<String>>>,
        /// The name of the DocumentDB event subscription. By default generated by this provider.
        pub name: pulumi_gestalt_rust::Output<String>,
        /// The name of the DocumentDB event subscription. Conflicts with `name`.
        pub name_prefix: pulumi_gestalt_rust::Output<String>,
        pub sns_topic_arn: pulumi_gestalt_rust::Output<String>,
        /// A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a source_type must also be specified.
        pub source_ids: pulumi_gestalt_rust::Output<Option<Vec<String>>>,
        /// The type of source that will be generating the events. Valid options are `db-instance`, `db-cluster`, `db-parameter-group`, `db-security-group`,` db-cluster-snapshot`. If not set, all sources will be subscribed to.
        pub source_type: pulumi_gestalt_rust::Output<Option<String>>,
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        pub tags: pulumi_gestalt_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        pub tags_all: pulumi_gestalt_rust::Output<
            std::collections::HashMap<String, String>,
        >,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::Context,
        name: &str,
        args: EventSubscriptionArgs,
    ) -> EventSubscriptionResult {
        use pulumi_gestalt_rust::__private::pulumi_gestalt_wit::client_bindings::component::pulumi_gestalt::register_interface;
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let enabled_binding = args.enabled.get_output(context);
        let event_categories_binding = args.event_categories.get_output(context);
        let name_binding = args.name.get_output(context);
        let name_prefix_binding = args.name_prefix.get_output(context);
        let sns_topic_arn_binding = args.sns_topic_arn.get_output(context);
        let source_ids_binding = args.source_ids.get_output(context);
        let source_type_binding = args.source_type.get_output(context);
        let tags_binding = args.tags.get_output(context);
        let request = pulumi_gestalt_rust::RegisterResourceRequest {
            type_: "aws:docdb/eventSubscription:EventSubscription".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "enabled".into(),
                    value: enabled_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "eventCategories".into(),
                    value: event_categories_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "name".into(),
                    value: name_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "namePrefix".into(),
                    value: name_prefix_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "snsTopicArn".into(),
                    value: sns_topic_arn_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "sourceIds".into(),
                    value: source_ids_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "sourceType".into(),
                    value: source_type_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "tags".into(),
                    value: tags_binding.get_id(),
                },
            ],
        };
        let o = context.register_resource(request);
        EventSubscriptionResult {
            arn: o.get_field("arn"),
            customer_aws_id: o.get_field("customerAwsId"),
            enabled: o.get_field("enabled"),
            event_categories: o.get_field("eventCategories"),
            name: o.get_field("name"),
            name_prefix: o.get_field("namePrefix"),
            sns_topic_arn: o.get_field("snsTopicArn"),
            source_ids: o.get_field("sourceIds"),
            source_type: o.get_field("sourceType"),
            tags: o.get_field("tags"),
            tags_all: o.get_field("tagsAll"),
        }
    }
}
