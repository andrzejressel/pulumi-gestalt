/// Provides an SES domain DKIM generation resource.
///
/// Domain ownership needs to be confirmed first using ses_domain_identity Resource
///
/// ## Example Usage
///
///
/// ## Import
///
/// Using `pulumi import`, import DKIM tokens using the `domain` attribute. For example:
///
/// ```sh
/// $ pulumi import aws:ses/domainDkim:DomainDkim example example.com
/// ```
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod domain_dkim {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct DomainDkimArgs {
        /// Verified domain name to generate DKIM tokens for.
        #[builder(into)]
        pub domain: pulumi_gestalt_rust::InputOrOutput<String>,
    }
    #[allow(dead_code)]
    pub struct DomainDkimResult {
        /// Pulumi ID is the provider-assigned unique ID for this managed resource.
        /// It is set during deployments and may be missing (unknown) during planning phases.
        pub id: pulumi_gestalt_rust::Output<String>,
        /// DKIM tokens generated by SES.
        /// These tokens should be used to create CNAME records used to verify SES Easy DKIM.
        /// See below for an example of how this might be achieved
        /// when the domain is hosted in Route 53 and managed by this provider.
        /// Find out more about verifying domains in Amazon SES
        /// in the [AWS SES docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html).
        pub dkim_tokens: pulumi_gestalt_rust::Output<Vec<String>>,
        /// Verified domain name to generate DKIM tokens for.
        pub domain: pulumi_gestalt_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::Context,
        name: &str,
        args: DomainDkimArgs,
    ) -> DomainDkimResult {
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let domain_binding = args.domain.get_output(context);
        let request = pulumi_gestalt_rust::RegisterResourceRequest {
            type_: "aws:ses/domainDkim:DomainDkim".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "domain".into(),
                    value: &domain_binding.drop_type(),
                },
            ],
        };
        let o = context.register_resource(request);
        DomainDkimResult {
            id: o.get_field("id"),
            dkim_tokens: o.get_field("dkimTokens"),
            domain: o.get_field("domain"),
        }
    }
}
