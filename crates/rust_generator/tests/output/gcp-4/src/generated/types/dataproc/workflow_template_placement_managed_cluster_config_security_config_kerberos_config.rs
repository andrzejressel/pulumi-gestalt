#[derive(pulumi_gestalt_rust::__private::serde::Deserialize, pulumi_gestalt_rust::__private::serde::Serialize, pulumi_gestalt_rust::__private::bon::Builder, Debug, PartialEq, Clone)]
#[builder(finish_fn = build_struct)]
#[allow(dead_code)]
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub struct WorkflowTemplatePlacementManagedClusterConfigSecurityConfigKerberosConfig {
    /// The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
    #[builder(into)]
    #[serde(rename = "crossRealmTrustAdminServer")]
    pub r#cross_realm_trust_admin_server: Option<String>,
    /// The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
    #[builder(into)]
    #[serde(rename = "crossRealmTrustKdc")]
    pub r#cross_realm_trust_kdc: Option<String>,
    /// The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
    #[builder(into)]
    #[serde(rename = "crossRealmTrustRealm")]
    pub r#cross_realm_trust_realm: Option<String>,
    /// The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
    #[builder(into)]
    #[serde(rename = "crossRealmTrustSharedPassword")]
    pub r#cross_realm_trust_shared_password: Option<String>,
    /// Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
    #[builder(into)]
    #[serde(rename = "enableKerberos")]
    pub r#enable_kerberos: Option<bool>,
    /// The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
    #[builder(into)]
    #[serde(rename = "kdcDbKey")]
    pub r#kdc_db_key: Option<String>,
    /// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
    #[builder(into)]
    #[serde(rename = "keyPassword")]
    pub r#key_password: Option<String>,
    /// The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
    #[builder(into)]
    #[serde(rename = "keystore")]
    pub r#keystore: Option<String>,
    /// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
    #[builder(into)]
    #[serde(rename = "keystorePassword")]
    pub r#keystore_password: Option<String>,
    /// The uri of the KMS key used to encrypt various sensitive files.
    #[builder(into)]
    #[serde(rename = "kmsKey")]
    pub r#kms_key: Option<String>,
    /// The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
    #[builder(into)]
    #[serde(rename = "realm")]
    pub r#realm: Option<String>,
    /// The Cloud Storage URI of a KMS encrypted file containing the root principal password.
    #[builder(into)]
    #[serde(rename = "rootPrincipalPassword")]
    pub r#root_principal_password: Option<String>,
    /// The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
    #[builder(into)]
    #[serde(rename = "tgtLifetimeHours")]
    pub r#tgt_lifetime_hours: Option<i32>,
    /// The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
    #[builder(into)]
    #[serde(rename = "truststore")]
    pub r#truststore: Option<String>,
    /// The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
    #[builder(into)]
    #[serde(rename = "truststorePassword")]
    pub r#truststore_password: Option<String>,
}
