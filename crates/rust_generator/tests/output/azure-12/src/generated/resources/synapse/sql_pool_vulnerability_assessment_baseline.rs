/// Manages a Synapse SQL Pool Vulnerability Assessment Rule Baseline.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: azure:core:ResourceGroup
///     properties:
///       name: example
///       location: west europe
///   exampleAccount:
///     type: azure:storage:Account
///     name: example
///     properties:
///       name: example
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       accountKind: BlobStorage
///       accountTier: Standard
///       accountReplicationType: LRS
///   exampleDataLakeGen2Filesystem:
///     type: azure:storage:DataLakeGen2Filesystem
///     name: example
///     properties:
///       name: example
///       storageAccountId: ${exampleAccount.id}
///   exampleWorkspace:
///     type: azure:synapse:Workspace
///     name: example
///     properties:
///       name: example
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       storageDataLakeGen2FilesystemId: ${exampleDataLakeGen2Filesystem.id}
///       sqlAdministratorLogin: sqladminuser
///       sqlAdministratorLoginPassword: H@Sh1CoR3!
///       identity:
///         type: SystemAssigned
///   exampleSqlPool:
///     type: azure:synapse:SqlPool
///     name: example
///     properties:
///       name: example
///       synapseWorkspaceId: ${exampleWorkspace.id}
///       skuName: DW100c
///       createMode: Default
///   exampleContainer:
///     type: azure:storage:Container
///     name: example
///     properties:
///       name: example
///       storageAccountName: ${exampleAccount.name}
///       containerAccessType: private
///   exampleSqlPoolSecurityAlertPolicy:
///     type: azure:synapse:SqlPoolSecurityAlertPolicy
///     name: example
///     properties:
///       sqlPoolId: ${exampleSqlPool.id}
///       policyState: Enabled
///       storageEndpoint: ${exampleAccount.primaryBlobEndpoint}
///       storageAccountAccessKey: ${exampleAccount.primaryAccessKey}
///   exampleSqlPoolVulnerabilityAssessment:
///     type: azure:synapse:SqlPoolVulnerabilityAssessment
///     name: example
///     properties:
///       sqlPoolSecurityAlertPolicyId: ${exampleSqlPoolSecurityAlertPolicy.id}
///       storageContainerPath: ${exampleAccount.primaryBlobEndpoint}${exampleContainer.name}/
///       storageAccountAccessKey: ${exampleAccount.primaryAccessKey}
///   exampleSqlPoolVulnerabilityAssessmentBaseline:
///     type: azure:synapse:SqlPoolVulnerabilityAssessmentBaseline
///     name: example
///     properties:
///       name: default
///       ruleName: VA1017
///       sqlPoolVulnerabilityAssessmentId: ${exampleSqlPoolVulnerabilityAssessment.id}
///       baselines:
///         - results:
///             - userA
///             - SELECT
///         - results:
///             - userB
///             - SELECT
/// ```
///
/// ## Import
///
/// Synapse SQL Pool Vulnerability Assessment Rule Baselines can be imported using the `resource id`, e.g.
///
/// ```sh
/// $ pulumi import azure:synapse/sqlPoolVulnerabilityAssessmentBaseline:SqlPoolVulnerabilityAssessmentBaseline example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/vulnerabilityAssessments/default/rules/rule1/baselines/baseline1
/// ```
///
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod sql_pool_vulnerability_assessment_baseline {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct SqlPoolVulnerabilityAssessmentBaselineArgs {
        /// One or more `baseline` blocks as defined below.
        #[builder(into, default)]
        pub baselines: pulumi_gestalt_rust::InputOrOutput<
            Option<
                Vec<
                    super::super::types::synapse::SqlPoolVulnerabilityAssessmentBaselineBaseline,
                >,
            >,
        >,
        /// The name which should be used for this Synapse SQL Pool Vulnerability Assessment Rule Baseline.
        #[builder(into, default)]
        pub name: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The ID of the vulnerability assessment rule.
        #[builder(into)]
        pub rule_name: pulumi_gestalt_rust::InputOrOutput<String>,
        /// The ID of the Synapse SQL Pool Vulnerability Assessment. Changing this forces a new Synapse SQL Pool Vulnerability Assessment Rule Baseline to be created.
        #[builder(into)]
        pub sql_pool_vulnerability_assessment_id: pulumi_gestalt_rust::InputOrOutput<
            String,
        >,
    }
    #[allow(dead_code)]
    pub struct SqlPoolVulnerabilityAssessmentBaselineResult {
        /// One or more `baseline` blocks as defined below.
        pub baselines: pulumi_gestalt_rust::Output<
            Option<
                Vec<
                    super::super::types::synapse::SqlPoolVulnerabilityAssessmentBaselineBaseline,
                >,
            >,
        >,
        /// The name which should be used for this Synapse SQL Pool Vulnerability Assessment Rule Baseline.
        pub name: pulumi_gestalt_rust::Output<String>,
        /// The ID of the vulnerability assessment rule.
        pub rule_name: pulumi_gestalt_rust::Output<String>,
        /// The ID of the Synapse SQL Pool Vulnerability Assessment. Changing this forces a new Synapse SQL Pool Vulnerability Assessment Rule Baseline to be created.
        pub sql_pool_vulnerability_assessment_id: pulumi_gestalt_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::Context,
        name: &str,
        args: SqlPoolVulnerabilityAssessmentBaselineArgs,
    ) -> SqlPoolVulnerabilityAssessmentBaselineResult {
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let baselines_binding = args.baselines.get_output(context);
        let name_binding = args.name.get_output(context);
        let rule_name_binding = args.rule_name.get_output(context);
        let sql_pool_vulnerability_assessment_id_binding = args
            .sql_pool_vulnerability_assessment_id
            .get_output(context);
        let request = pulumi_gestalt_rust::RegisterResourceRequest {
            type_: "azure:synapse/sqlPoolVulnerabilityAssessmentBaseline:SqlPoolVulnerabilityAssessmentBaseline"
                .into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "baselines".into(),
                    value: &baselines_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "name".into(),
                    value: &name_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "ruleName".into(),
                    value: &rule_name_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "sqlPoolVulnerabilityAssessmentId".into(),
                    value: &sql_pool_vulnerability_assessment_id_binding.drop_type(),
                },
            ],
        };
        let o = context.register_resource(request);
        SqlPoolVulnerabilityAssessmentBaselineResult {
            baselines: o.get_field("baselines"),
            name: o.get_field("name"),
            rule_name: o.get_field("ruleName"),
            sql_pool_vulnerability_assessment_id: o
                .get_field("sqlPoolVulnerabilityAssessmentId"),
        }
    }
}
