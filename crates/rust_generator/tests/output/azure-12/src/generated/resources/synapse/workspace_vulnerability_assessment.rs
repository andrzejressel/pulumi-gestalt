/// Manages the Vulnerability Assessment for a Synapse Workspace.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: azure:core:ResourceGroup
///     properties:
///       name: example-resources
///       location: West Europe
///   exampleAccount:
///     type: azure:storage:Account
///     name: example
///     properties:
///       name: examplestorageacc
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       accountTier: Standard
///       accountReplicationType: LRS
///       accountKind: StorageV2
///       isHnsEnabled: 'true'
///   exampleContainer:
///     type: azure:storage:Container
///     name: example
///     properties:
///       name: example
///       storageAccountName: ${exampleAccount.name}
///   exampleDataLakeGen2Filesystem:
///     type: azure:storage:DataLakeGen2Filesystem
///     name: example
///     properties:
///       name: example
///       storageAccountId: ${exampleAccount.id}
///   exampleWorkspace:
///     type: azure:synapse:Workspace
///     name: example
///     properties:
///       name: example
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       storageDataLakeGen2FilesystemId: ${exampleDataLakeGen2Filesystem.id}
///       sqlAdministratorLogin: sqladminuser
///       sqlAdministratorLoginPassword: H@Sh1CoR3!
///       aadAdmin:
///         - login: AzureAD Admin
///           objectId: 00000000-0000-0000-0000-000000000000
///           tenantId: 00000000-0000-0000-0000-000000000000
///       identity:
///         type: SystemAssigned
///       tags:
///         Env: production
///   auditLogs:
///     type: azure:storage:Account
///     name: audit_logs
///     properties:
///       name: examplesa
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       accountTier: Standard
///       accountReplicationType: LRS
///   exampleWorkspaceSecurityAlertPolicy:
///     type: azure:synapse:WorkspaceSecurityAlertPolicy
///     name: example
///     properties:
///       synapseWorkspaceId: ${exampleWorkspace.id}
///       policyState: Enabled
///       storageEndpoint: ${auditLogs.primaryBlobEndpoint}
///       storageAccountAccessKey: ${auditLogs.primaryAccessKey}
///       disabledAlerts:
///         - Sql_Injection
///         - Data_Exfiltration
///       retentionDays: 20
///   exampleWorkspaceVulnerabilityAssessment:
///     type: azure:synapse:WorkspaceVulnerabilityAssessment
///     name: example
///     properties:
///       workspaceSecurityAlertPolicyId: ${exampleWorkspaceSecurityAlertPolicy.id}
///       storageContainerPath: ${exampleAccount.primaryBlobEndpoint}${exampleContainer.name}/
///       storageAccountAccessKey: ${exampleAccount.primaryAccessKey}
///       recurringScans:
///         enabled: true
///         emails:
///           - email@example1.com
///           - email@example2.com
/// ```
///
/// ## Import
///
/// Synapse Workspace Vulnerability Assessment can be imported using the `resource id`, e.g.
///
/// ```sh
/// $ pulumi import azure:synapse/workspaceVulnerabilityAssessment:WorkspaceVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/vulnerabilityAssessments/default
/// ```
///
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod workspace_vulnerability_assessment {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct WorkspaceVulnerabilityAssessmentArgs {
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        #[builder(into, default)]
        pub recurring_scans: pulumi_gestalt_rust::InputOrOutput<
            Option<
                super::super::types::synapse::WorkspaceVulnerabilityAssessmentRecurringScans,
            >,
        >,
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        #[builder(into, default)]
        pub storage_account_access_key: pulumi_gestalt_rust::InputOrOutput<
            Option<String>,
        >,
        /// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        #[builder(into)]
        pub storage_container_path: pulumi_gestalt_rust::InputOrOutput<String>,
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        #[builder(into, default)]
        pub storage_container_sas_key: pulumi_gestalt_rust::InputOrOutput<
            Option<String>,
        >,
        /// The ID of the security alert policy of the Synapse Workspace. Changing this forces a new resource to be created.
        #[builder(into)]
        pub workspace_security_alert_policy_id: pulumi_gestalt_rust::InputOrOutput<
            String,
        >,
    }
    #[allow(dead_code)]
    pub struct WorkspaceVulnerabilityAssessmentResult {
        /// Pulumi ID is the provider-assigned unique ID for this managed resource.
        /// It is set during deployments and may be missing (unknown) during planning phases.
        pub id: pulumi_gestalt_rust::Output<String>,
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        pub recurring_scans: pulumi_gestalt_rust::Output<
            super::super::types::synapse::WorkspaceVulnerabilityAssessmentRecurringScans,
        >,
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        pub storage_account_access_key: pulumi_gestalt_rust::Output<Option<String>>,
        /// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        pub storage_container_path: pulumi_gestalt_rust::Output<String>,
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        pub storage_container_sas_key: pulumi_gestalt_rust::Output<Option<String>>,
        /// The ID of the security alert policy of the Synapse Workspace. Changing this forces a new resource to be created.
        pub workspace_security_alert_policy_id: pulumi_gestalt_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::Context,
        name: &str,
        args: WorkspaceVulnerabilityAssessmentArgs,
    ) -> WorkspaceVulnerabilityAssessmentResult {
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let recurring_scans_binding = args.recurring_scans.get_output(context);
        let storage_account_access_key_binding = args
            .storage_account_access_key
            .get_output(context);
        let storage_container_path_binding = args
            .storage_container_path
            .get_output(context);
        let storage_container_sas_key_binding = args
            .storage_container_sas_key
            .get_output(context);
        let workspace_security_alert_policy_id_binding = args
            .workspace_security_alert_policy_id
            .get_output(context);
        let request = pulumi_gestalt_rust::RegisterResourceRequest {
            type_: "azure:synapse/workspaceVulnerabilityAssessment:WorkspaceVulnerabilityAssessment"
                .into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "recurringScans".into(),
                    value: &recurring_scans_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "storageAccountAccessKey".into(),
                    value: &storage_account_access_key_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "storageContainerPath".into(),
                    value: &storage_container_path_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "storageContainerSasKey".into(),
                    value: &storage_container_sas_key_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "workspaceSecurityAlertPolicyId".into(),
                    value: &workspace_security_alert_policy_id_binding.drop_type(),
                },
            ],
        };
        let o = context.register_resource(request);
        WorkspaceVulnerabilityAssessmentResult {
            id: o.get_field("id"),
            recurring_scans: o.get_field("recurringScans"),
            storage_account_access_key: o.get_field("storageAccountAccessKey"),
            storage_container_path: o.get_field("storageContainerPath"),
            storage_container_sas_key: o.get_field("storageContainerSasKey"),
            workspace_security_alert_policy_id: o
                .get_field("workspaceSecurityAlertPolicyId"),
        }
    }
}
