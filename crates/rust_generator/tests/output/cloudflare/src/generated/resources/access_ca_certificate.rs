/// Cloudflare Access can replace traditional SSH key models with
/// short-lived certificates issued to your users based on the token
/// generated by their Access login.
///
/// > It's required that an `account_id` or `zone_id` is provided and in
///    most cases using either is fine. However, if you're using a scoped
///    access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com"
///    zone needs to use the `zone_id` argument.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_gestalt_rust::Output;
/// use pulumi_gestalt_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let anotherExample = access_ca_certificate::create(
///         "anotherExample",
///         AccessCaCertificateArgs::builder()
///             .application_id("fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let example = access_ca_certificate::create(
///         "example",
///         AccessCaCertificateArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .application_id("6cd6cea3-3ef2-4542-9aea-85a0bbcd5414")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Account level CA certificate import.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessCaCertificate:AccessCaCertificate example account/<account_id>/<application_id>
/// ```
///
/// Zone level CA certificate import.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessCaCertificate:AccessCaCertificate example account/<zone_id>/<application_id>
/// ```
///
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod access_ca_certificate {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct AccessCaCertificateArgs {
        /// The account identifier to target for the resource. Conflicts with `zone_id`.
        #[builder(into, default)]
        pub account_id: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The Access Application ID to associate with the CA certificate.
        #[builder(into)]
        pub application_id: pulumi_gestalt_rust::InputOrOutput<String>,
        /// The zone identifier to target for the resource. Conflicts with `account_id`.
        #[builder(into, default)]
        pub zone_id: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
    }
    #[allow(dead_code)]
    pub struct AccessCaCertificateResult {
        /// The account identifier to target for the resource. Conflicts with `zone_id`.
        pub account_id: pulumi_gestalt_rust::Output<String>,
        /// The Access Application ID to associate with the CA certificate.
        pub application_id: pulumi_gestalt_rust::Output<String>,
        /// Application Audience (AUD) Tag of the CA certificate.
        pub aud: pulumi_gestalt_rust::Output<String>,
        /// Cryptographic public key of the generated CA certificate.
        pub public_key: pulumi_gestalt_rust::Output<String>,
        /// The zone identifier to target for the resource. Conflicts with `account_id`.
        pub zone_id: pulumi_gestalt_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::Context,
        name: &str,
        args: AccessCaCertificateArgs,
    ) -> AccessCaCertificateResult {
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let account_id_binding = args.account_id.get_output(context);
        let application_id_binding = args.application_id.get_output(context);
        let zone_id_binding = args.zone_id.get_output(context);
        let request = pulumi_gestalt_rust::RegisterResourceRequest {
            type_: "cloudflare:index/accessCaCertificate:AccessCaCertificate".into(),
            name: name.to_string(),
            version: super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "accountId".into(),
                    value: account_id_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "applicationId".into(),
                    value: application_id_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "zoneId".into(),
                    value: zone_id_binding.get_id(),
                },
            ],
        };
        let o = context.register_resource(request);
        AccessCaCertificateResult {
            account_id: o.get_field("accountId"),
            application_id: o.get_field("applicationId"),
            aud: o.get_field("aud"),
            public_key: o.get_field("publicKey"),
            zone_id: o.get_field("zoneId"),
        }
    }
}
