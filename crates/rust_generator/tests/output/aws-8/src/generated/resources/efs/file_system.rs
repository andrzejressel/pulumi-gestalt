/// Provides an Elastic File System (EFS) File System resource.
///
/// ## Example Usage
///
/// ### EFS File System w/ tags
///
/// ```yaml
/// resources:
///   foo:
///     type: aws:efs:FileSystem
///     properties:
///       creationToken: my-product
///       tags:
///         Name: MyProduct
/// ```
///
/// ### Using lifecycle policy
///
/// ```ignore
/// use pulumi_gestalt_rust::Output;
/// use pulumi_gestalt_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let fooWithLifecylePolicy = file_system::create(
///         "fooWithLifecylePolicy",
///         FileSystemArgs::builder()
///             .creation_token("my-product")
///             .lifecycle_policies(
///                 vec![
///                     FileSystemLifecyclePolicy::builder().transitionToIa("AFTER_30_DAYS")
///                     .build_struct(),
///                 ],
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import the EFS file systems using the `id`. For example:
///
/// ```sh
/// $ pulumi import aws:efs/fileSystem:FileSystem foo fs-6fa144c6
/// ```
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod file_system {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct FileSystemArgs {
        /// the AWS Availability Zone in which to create the file system. Used to create a file system that uses One Zone storage classes. See [user guide](https://docs.aws.amazon.com/efs/latest/ug/availability-durability.html) for more information.
        #[builder(into, default)]
        pub availability_zone_name: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// A unique name (a maximum of 64 characters are allowed)
        /// used as reference when creating the Elastic File System to ensure idempotent file
        /// system creation. By default generated by this provider. See [Elastic File System]
        /// user guide for more information.
        #[builder(into, default)]
        pub creation_token: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// If true, the disk will be encrypted.
        #[builder(into, default)]
        pub encrypted: pulumi_gestalt_rust::InputOrOutput<Option<bool>>,
        /// The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
        #[builder(into, default)]
        pub kms_key_id: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// A file system [lifecycle policy](https://docs.aws.amazon.com/efs/latest/ug/API_LifecyclePolicy.html) object. See `lifecycle_policy` block below for details.
        #[builder(into, default)]
        pub lifecycle_policies: pulumi_gestalt_rust::InputOrOutput<
            Option<Vec<super::super::types::efs::FileSystemLifecyclePolicy>>,
        >,
        /// The file system performance mode. Can be either `"generalPurpose"` or `"maxIO"` (Default: `"generalPurpose"`).
        #[builder(into, default)]
        pub performance_mode: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// A file system [protection](https://docs.aws.amazon.com/efs/latest/ug/API_FileSystemProtectionDescription.html) object. See `protection` block below for details.
        #[builder(into, default)]
        pub protection: pulumi_gestalt_rust::InputOrOutput<
            Option<super::super::types::efs::FileSystemProtection>,
        >,
        /// The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughput_mode` set to `provisioned`.
        #[builder(into, default)]
        pub provisioned_throughput_in_mibps: pulumi_gestalt_rust::InputOrOutput<
            Option<f64>,
        >,
        /// A map of tags to assign to the file system. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        #[builder(into, default)]
        pub tags: pulumi_gestalt_rust::InputOrOutput<
            Option<std::collections::HashMap<String, String>>,
        >,
        /// Throughput mode for the file system. Defaults to `bursting`. Valid values: `bursting`, `provisioned`, or `elastic`. When using `provisioned`, also set `provisioned_throughput_in_mibps`.
        #[builder(into, default)]
        pub throughput_mode: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
    }
    #[allow(dead_code)]
    pub struct FileSystemResult {
        /// Amazon Resource Name of the file system.
        pub arn: pulumi_gestalt_rust::Output<String>,
        /// The identifier of the Availability Zone in which the file system's One Zone storage classes exist.
        pub availability_zone_id: pulumi_gestalt_rust::Output<String>,
        /// the AWS Availability Zone in which to create the file system. Used to create a file system that uses One Zone storage classes. See [user guide](https://docs.aws.amazon.com/efs/latest/ug/availability-durability.html) for more information.
        pub availability_zone_name: pulumi_gestalt_rust::Output<String>,
        /// A unique name (a maximum of 64 characters are allowed)
        /// used as reference when creating the Elastic File System to ensure idempotent file
        /// system creation. By default generated by this provider. See [Elastic File System]
        /// user guide for more information.
        pub creation_token: pulumi_gestalt_rust::Output<String>,
        /// The DNS name for the filesystem per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
        pub dns_name: pulumi_gestalt_rust::Output<String>,
        /// If true, the disk will be encrypted.
        pub encrypted: pulumi_gestalt_rust::Output<bool>,
        /// The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
        pub kms_key_id: pulumi_gestalt_rust::Output<String>,
        /// A file system [lifecycle policy](https://docs.aws.amazon.com/efs/latest/ug/API_LifecyclePolicy.html) object. See `lifecycle_policy` block below for details.
        pub lifecycle_policies: pulumi_gestalt_rust::Output<
            Option<Vec<super::super::types::efs::FileSystemLifecyclePolicy>>,
        >,
        /// The value of the file system's `Name` tag.
        pub name: pulumi_gestalt_rust::Output<String>,
        /// The current number of mount targets that the file system has.
        pub number_of_mount_targets: pulumi_gestalt_rust::Output<i32>,
        /// The AWS account that created the file system. If the file system was createdby an IAM user, the parent account to which the user belongs is the owner.
        pub owner_id: pulumi_gestalt_rust::Output<String>,
        /// The file system performance mode. Can be either `"generalPurpose"` or `"maxIO"` (Default: `"generalPurpose"`).
        pub performance_mode: pulumi_gestalt_rust::Output<String>,
        /// A file system [protection](https://docs.aws.amazon.com/efs/latest/ug/API_FileSystemProtectionDescription.html) object. See `protection` block below for details.
        pub protection: pulumi_gestalt_rust::Output<
            super::super::types::efs::FileSystemProtection,
        >,
        /// The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with `throughput_mode` set to `provisioned`.
        pub provisioned_throughput_in_mibps: pulumi_gestalt_rust::Output<Option<f64>>,
        /// The latest known metered size (in bytes) of data stored in the file system, the value is not the exact size that the file system was at any point in time. See Size In Bytes.
        pub size_in_bytes: pulumi_gestalt_rust::Output<
            Vec<super::super::types::efs::FileSystemSizeInByte>,
        >,
        /// A map of tags to assign to the file system. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        pub tags: pulumi_gestalt_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        pub tags_all: pulumi_gestalt_rust::Output<
            std::collections::HashMap<String, String>,
        >,
        /// Throughput mode for the file system. Defaults to `bursting`. Valid values: `bursting`, `provisioned`, or `elastic`. When using `provisioned`, also set `provisioned_throughput_in_mibps`.
        pub throughput_mode: pulumi_gestalt_rust::Output<Option<String>>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::Context,
        name: &str,
        args: FileSystemArgs,
    ) -> FileSystemResult {
        use pulumi_gestalt_rust::__private::pulumi_gestalt_wit::client_bindings::component::pulumi_gestalt::register_interface;
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let availability_zone_name_binding = args
            .availability_zone_name
            .get_output(context);
        let creation_token_binding = args.creation_token.get_output(context);
        let encrypted_binding = args.encrypted.get_output(context);
        let kms_key_id_binding = args.kms_key_id.get_output(context);
        let lifecycle_policies_binding = args.lifecycle_policies.get_output(context);
        let performance_mode_binding = args.performance_mode.get_output(context);
        let protection_binding = args.protection.get_output(context);
        let provisioned_throughput_in_mibps_binding = args
            .provisioned_throughput_in_mibps
            .get_output(context);
        let tags_binding = args.tags.get_output(context);
        let throughput_mode_binding = args.throughput_mode.get_output(context);
        let request = pulumi_gestalt_rust::RegisterResourceRequest {
            type_: "aws:efs/fileSystem:FileSystem".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "availabilityZoneName".into(),
                    value: availability_zone_name_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "creationToken".into(),
                    value: creation_token_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "encrypted".into(),
                    value: encrypted_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "kmsKeyId".into(),
                    value: kms_key_id_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "lifecyclePolicies".into(),
                    value: lifecycle_policies_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "performanceMode".into(),
                    value: performance_mode_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "protection".into(),
                    value: protection_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "provisionedThroughputInMibps".into(),
                    value: provisioned_throughput_in_mibps_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "tags".into(),
                    value: tags_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "throughputMode".into(),
                    value: throughput_mode_binding.get_id(),
                },
            ],
        };
        let o = context.register_resource(request);
        FileSystemResult {
            arn: o.get_field("arn"),
            availability_zone_id: o.get_field("availabilityZoneId"),
            availability_zone_name: o.get_field("availabilityZoneName"),
            creation_token: o.get_field("creationToken"),
            dns_name: o.get_field("dnsName"),
            encrypted: o.get_field("encrypted"),
            kms_key_id: o.get_field("kmsKeyId"),
            lifecycle_policies: o.get_field("lifecyclePolicies"),
            name: o.get_field("name"),
            number_of_mount_targets: o.get_field("numberOfMountTargets"),
            owner_id: o.get_field("ownerId"),
            performance_mode: o.get_field("performanceMode"),
            protection: o.get_field("protection"),
            provisioned_throughput_in_mibps: o.get_field("provisionedThroughputInMibps"),
            size_in_bytes: o.get_field("sizeInBytes"),
            tags: o.get_field("tags"),
            tags_all: o.get_field("tagsAll"),
            throughput_mode: o.get_field("throughputMode"),
        }
    }
}
