/// Manages a Database Vulnerability Assessment Rule Baseline.
///
/// > **NOTE** Database Vulnerability Assessment is currently only available for MS SQL databases.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: azure:core:ResourceGroup
///     properties:
///       name: example-resources
///       location: West Europe
///   exampleSqlServer:
///     type: azurerm:sqlServer
///     name: example
///     properties:
///       name: mysqlserver
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       version: '12.0'
///       administratorLogin: 4dm1n157r470r
///       administratorLoginPassword: 4-v3ry-53cr37-p455w0rd
///   exampleAccount:
///     type: azure:storage:Account
///     name: example
///     properties:
///       name: accteststorageaccount
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       accountTier: Standard
///       accountReplicationType: GRS
///   exampleContainer:
///     type: azure:storage:Container
///     name: example
///     properties:
///       name: accteststoragecontainer
///       storageAccountName: ${exampleAccount.name}
///       containerAccessType: private
///   exampleServerSecurityAlertPolicy:
///     type: azure:mssql:ServerSecurityAlertPolicy
///     name: example
///     properties:
///       resourceGroupName: ${example.name}
///       serverName: ${exampleSqlServer.name}
///       state: Enabled
///   exampleSqlDatabase:
///     type: azurerm:sqlDatabase
///     name: example
///     properties:
///       name: mysqldatabase
///       resourceGroupName: ${example.name}
///       serverName: ${exampleSqlServer.name}
///       location: ${example.location}
///       edition: Standard
///   exampleServerVulnerabilityAssessment:
///     type: azure:mssql:ServerVulnerabilityAssessment
///     name: example
///     properties:
///       serverSecurityAlertPolicyId: ${exampleServerSecurityAlertPolicy.id}
///       storageContainerPath: ${exampleAccount.primaryBlobEndpoint}${exampleContainer.name}/
///       storageAccountAccessKey: ${exampleAccount.primaryAccessKey}
///   exampleDatabaseVulnerabilityAssessmentRuleBaseline:
///     type: azure:mssql:DatabaseVulnerabilityAssessmentRuleBaseline
///     name: example
///     properties:
///       serverVulnerabilityAssessmentId: ${exampleServerVulnerabilityAssessment.id}
///       databaseName: ${exampleSqlDatabase.name}
///       ruleId: VA2065
///       baselineName: master
///       baselineResults:
///         - results:
///             - allowedip1
///             - 123.123.123.123
///             - 123.123.123.123
///         - results:
///             - allowedip2
///             - 255.255.255.255
///             - 255.255.255.255
/// ```
///
/// ## Import
///
/// Database Vulnerability Assessment Rule Baseline can be imported using the `resource id`, e.g.
///
/// ```sh
/// $ pulumi import azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/servers/mssqlserver/databases/mysqldatabase/vulnerabilityAssessments/Default/rules/VA2065/baselines/master
/// ```
///
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod database_vulnerability_assessment_rule_baseline {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct DatabaseVulnerabilityAssessmentRuleBaselineArgs {
        /// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
        #[builder(into, default)]
        pub baseline_name: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// A `baseline_result` block as documented below. Multiple blocks can be defined.
        #[builder(into)]
        pub baseline_results: pulumi_gestalt_rust::InputOrOutput<
            Vec<
                super::super::types::mssql::DatabaseVulnerabilityAssessmentRuleBaselineBaselineResult,
            >,
        >,
        /// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
        #[builder(into)]
        pub database_name: pulumi_gestalt_rust::InputOrOutput<String>,
        /// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
        #[builder(into)]
        pub rule_id: pulumi_gestalt_rust::InputOrOutput<String>,
        /// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
        #[builder(into)]
        pub server_vulnerability_assessment_id: pulumi_gestalt_rust::InputOrOutput<
            String,
        >,
    }
    #[allow(dead_code)]
    pub struct DatabaseVulnerabilityAssessmentRuleBaselineResult {
        /// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
        pub baseline_name: pulumi_gestalt_rust::Output<Option<String>>,
        /// A `baseline_result` block as documented below. Multiple blocks can be defined.
        pub baseline_results: pulumi_gestalt_rust::Output<
            Vec<
                super::super::types::mssql::DatabaseVulnerabilityAssessmentRuleBaselineBaselineResult,
            >,
        >,
        /// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
        pub database_name: pulumi_gestalt_rust::Output<String>,
        /// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
        pub rule_id: pulumi_gestalt_rust::Output<String>,
        /// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
        pub server_vulnerability_assessment_id: pulumi_gestalt_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::PulumiContext,
        name: &str,
        args: DatabaseVulnerabilityAssessmentRuleBaselineArgs,
    ) -> DatabaseVulnerabilityAssessmentRuleBaselineResult {
        use pulumi_gestalt_rust::__private::pulumi_gestalt_wit::client_bindings::component::pulumi_gestalt::register_interface;
        use std::collections::HashMap;
        let baseline_name_binding_1 = args.baseline_name.get_output(context);
        let baseline_name_binding = baseline_name_binding_1.get_inner();
        let baseline_results_binding_1 = args.baseline_results.get_output(context);
        let baseline_results_binding = baseline_results_binding_1.get_inner();
        let database_name_binding_1 = args.database_name.get_output(context);
        let database_name_binding = database_name_binding_1.get_inner();
        let rule_id_binding_1 = args.rule_id.get_output(context);
        let rule_id_binding = rule_id_binding_1.get_inner();
        let server_vulnerability_assessment_id_binding_1 = args
            .server_vulnerability_assessment_id
            .get_output(context);
        let server_vulnerability_assessment_id_binding = server_vulnerability_assessment_id_binding_1
            .get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline"
                .into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "baselineName".into(),
                    value: &baseline_name_binding,
                },
                register_interface::ObjectField {
                    name: "baselineResults".into(),
                    value: &baseline_results_binding,
                },
                register_interface::ObjectField {
                    name: "databaseName".into(),
                    value: &database_name_binding,
                },
                register_interface::ObjectField {
                    name: "ruleId".into(),
                    value: &rule_id_binding,
                },
                register_interface::ObjectField {
                    name: "serverVulnerabilityAssessmentId".into(),
                    value: &server_vulnerability_assessment_id_binding,
                },
            ]),
        };
        let o = register_interface::register(context.get_inner(), &request);
        DatabaseVulnerabilityAssessmentRuleBaselineResult {
            baseline_name: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("baselineName"),
            ),
            baseline_results: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("baselineResults"),
            ),
            database_name: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("databaseName"),
            ),
            rule_id: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("ruleId"),
            ),
            server_vulnerability_assessment_id: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("serverVulnerabilityAssessmentId"),
            ),
        }
    }
}
