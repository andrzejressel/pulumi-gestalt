/// Manages the Vulnerability Assessment for a MS SQL Server.
///
/// > **NOTE** Vulnerability Assessment is currently only available for MS SQL databases.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_gestalt_rust::Output;
/// use pulumi_gestalt_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = resource_group::create(
///         "example",
///         ResourceGroupArgs::builder()
///             .location("West Europe")
///             .name("example-resources")
///             .build_struct(),
///     );
///     let exampleAccount = account::create(
///         "exampleAccount",
///         AccountArgs::builder()
///             .account_replication_type("GRS")
///             .account_tier("Standard")
///             .location("${example.location}")
///             .name("accteststorageaccount")
///             .resource_group_name("${example.name}")
///             .build_struct(),
///     );
///     let exampleContainer = container::create(
///         "exampleContainer",
///         ContainerArgs::builder()
///             .container_access_type("private")
///             .name("accteststoragecontainer")
///             .storage_account_name("${exampleAccount.name}")
///             .build_struct(),
///     );
///     let exampleServer = server::create(
///         "exampleServer",
///         ServerArgs::builder()
///             .administrator_login("4dm1n157r470r")
///             .administrator_login_password("4-v3ry-53cr37-p455w0rd")
///             .location("${example.location}")
///             .name("mysqlserver")
///             .resource_group_name("${example.name}")
///             .version("12.0")
///             .build_struct(),
///     );
///     let exampleServerSecurityAlertPolicy = server_security_alert_policy::create(
///         "exampleServerSecurityAlertPolicy",
///         ServerSecurityAlertPolicyArgs::builder()
///             .resource_group_name("${example.name}")
///             .server_name("${exampleServer.name}")
///             .state("Enabled")
///             .build_struct(),
///     );
///     let exampleServerVulnerabilityAssessment = server_vulnerability_assessment::create(
///         "exampleServerVulnerabilityAssessment",
///         ServerVulnerabilityAssessmentArgs::builder()
///             .recurring_scans(
///                 ServerVulnerabilityAssessmentRecurringScans::builder()
///                     .emailSubscriptionAdmins(true)
///                     .emails(vec!["email@example1.com", "email@example2.com",])
///                     .enabled(true)
///                     .build_struct(),
///             )
///             .server_security_alert_policy_id("${exampleServerSecurityAlertPolicy.id}")
///             .storage_account_access_key("${exampleAccount.primaryAccessKey}")
///             .storage_container_path(
///                 "${exampleAccount.primaryBlobEndpoint}${exampleContainer.name}/",
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// MS SQL Server Vulnerability Assessment can be imported using the `resource id`, e.g.
///
/// ```sh
/// $ pulumi import azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/servers/mssqlserver/vulnerabilityAssessments/Default
/// ```
///
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod server_vulnerability_assessment {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct ServerVulnerabilityAssessmentArgs {
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        #[builder(into, default)]
        pub recurring_scans: pulumi_gestalt_rust::InputOrOutput<
            Option<
                super::super::types::mssql::ServerVulnerabilityAssessmentRecurringScans,
            >,
        >,
        /// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
        #[builder(into)]
        pub server_security_alert_policy_id: pulumi_gestalt_rust::InputOrOutput<String>,
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        ///
        /// > **NOTE** The `storage_account_access_key` only applies if the storage account is not behind a virtual network or a firewall.
        #[builder(into, default)]
        pub storage_account_access_key: pulumi_gestalt_rust::InputOrOutput<
            Option<String>,
        >,
        /// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        #[builder(into)]
        pub storage_container_path: pulumi_gestalt_rust::InputOrOutput<String>,
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        ///
        /// > **NOTE** The `storage_container_sas_key` only applies if the storage account is not behind a virtual network or a firewall.
        #[builder(into, default)]
        pub storage_container_sas_key: pulumi_gestalt_rust::InputOrOutput<
            Option<String>,
        >,
    }
    #[allow(dead_code)]
    pub struct ServerVulnerabilityAssessmentResult {
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        pub recurring_scans: pulumi_gestalt_rust::Output<
            super::super::types::mssql::ServerVulnerabilityAssessmentRecurringScans,
        >,
        /// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
        pub server_security_alert_policy_id: pulumi_gestalt_rust::Output<String>,
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        ///
        /// > **NOTE** The `storage_account_access_key` only applies if the storage account is not behind a virtual network or a firewall.
        pub storage_account_access_key: pulumi_gestalt_rust::Output<Option<String>>,
        /// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        pub storage_container_path: pulumi_gestalt_rust::Output<String>,
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        ///
        /// > **NOTE** The `storage_container_sas_key` only applies if the storage account is not behind a virtual network or a firewall.
        pub storage_container_sas_key: pulumi_gestalt_rust::Output<Option<String>>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::Context,
        name: &str,
        args: ServerVulnerabilityAssessmentArgs,
    ) -> ServerVulnerabilityAssessmentResult {
        use pulumi_gestalt_rust::__private::pulumi_gestalt_wit::client_bindings::component::pulumi_gestalt::register_interface;
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let recurring_scans_binding = args.recurring_scans.get_output(context);
        let server_security_alert_policy_id_binding = args
            .server_security_alert_policy_id
            .get_output(context);
        let storage_account_access_key_binding = args
            .storage_account_access_key
            .get_output(context);
        let storage_container_path_binding = args
            .storage_container_path
            .get_output(context);
        let storage_container_sas_key_binding = args
            .storage_container_sas_key
            .get_output(context);
        let request = pulumi_gestalt_rust::RegisterResourceRequest {
            type_: "azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment"
                .into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "recurringScans".into(),
                    value: recurring_scans_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "serverSecurityAlertPolicyId".into(),
                    value: server_security_alert_policy_id_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "storageAccountAccessKey".into(),
                    value: storage_account_access_key_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "storageContainerPath".into(),
                    value: storage_container_path_binding.get_id(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "storageContainerSasKey".into(),
                    value: storage_container_sas_key_binding.get_id(),
                },
            ],
        };
        let o = context.register_resource(request);
        ServerVulnerabilityAssessmentResult {
            recurring_scans: o.get_field("recurringScans"),
            server_security_alert_policy_id: o.get_field("serverSecurityAlertPolicyId"),
            storage_account_access_key: o.get_field("storageAccountAccessKey"),
            storage_container_path: o.get_field("storageContainerPath"),
            storage_container_sas_key: o.get_field("storageContainerSasKey"),
        }
    }
}
