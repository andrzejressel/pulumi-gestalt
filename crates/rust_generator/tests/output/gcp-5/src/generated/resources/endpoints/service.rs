/// This resource creates and rolls out a Cloud Endpoints service using OpenAPI or gRPC.  View the relevant docs for [OpenAPI](https://cloud.google.com/endpoints/docs/openapi/) and [gRPC](https://cloud.google.com/endpoints/docs/grpc/).
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   openapiService:
///     type: gcp:endpoints:Service
///     name: openapi_service
///     properties:
///       serviceName: api-name.endpoints.project-id.cloud.goog
///       project: project-id
///       openapiConfig:
///         fn::invoke:
///           function: std:file
///           arguments:
///             input: openapi_spec.yml
///           return: result
///   grpcService:
///     type: gcp:endpoints:Service
///     name: grpc_service
///     properties:
///       serviceName: api-name.endpoints.project-id.cloud.goog
///       project: project-id
///       grpcConfig:
///         fn::invoke:
///           function: std:file
///           arguments:
///             input: service_spec.yml
///           return: result
///       protocOutputBase64:
///         fn::invoke:
///           function: std:filebase64
///           arguments:
///             input: compiled_descriptor_file.pb
///           return: result
/// ```
///
/// The example in `examples/endpoints_on_compute_engine` shows the API from the quickstart running on a Compute Engine VM and reachable through Cloud Endpoints, which may also be useful.
///
/// ## Import
///
/// This resource does not support import.
///
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod service {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct ServiceArgs {
        /// The full text of the Service Config YAML file (Example located [here](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/main/endpoints/bookstore-grpc/api_config.yaml)).
        /// If provided, must also provide `protoc_output_base64`.  `open_api` config must *not* be provided.
        #[builder(into, default)]
        pub grpc_config: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The full text of the OpenAPI YAML configuration as described [here](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md).
        /// Either this, or *both* of `grpc_config` and `protoc_output_base64` must be specified.
        #[builder(into, default)]
        pub openapi_config: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The project ID that the service belongs to.  If not provided, provider project is used.
        #[builder(into, default)]
        pub project: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The full contents of the Service Descriptor File generated by protoc.  This should be a compiled .pb file, base64-encoded.
        #[builder(into, default)]
        pub protoc_output_base64: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The name of the service.  Usually of the form `$apiname.endpoints.$projectid.cloud.goog`.
        ///
        /// - - -
        #[builder(into)]
        pub service_name: pulumi_gestalt_rust::InputOrOutput<String>,
    }
    #[allow(dead_code)]
    pub struct ServiceResult {
        /// Pulumi ID is the provider-assigned unique ID for this managed resource.
        /// It is set during deployments and may be missing (unknown) during planning phases.
        pub id: pulumi_gestalt_rust::Output<String>,
        /// A list of API objects; structure is documented below.
        pub apis: pulumi_gestalt_rust::Output<
            Vec<super::super::types::endpoints::ServiceApi>,
        >,
        /// The autogenerated ID for the configuration that is rolled out as part of the creation of this resource.  Must be provided to compute engine instances as a tag.
        pub config_id: pulumi_gestalt_rust::Output<String>,
        /// The address at which the service can be found - usually the same as the service name.
        pub dns_address: pulumi_gestalt_rust::Output<String>,
        /// A list of Endpoint objects; structure is documented below.
        pub endpoints: pulumi_gestalt_rust::Output<
            Vec<super::super::types::endpoints::ServiceEndpoint>,
        >,
        /// The full text of the Service Config YAML file (Example located [here](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/main/endpoints/bookstore-grpc/api_config.yaml)).
        /// If provided, must also provide `protoc_output_base64`.  `open_api` config must *not* be provided.
        pub grpc_config: pulumi_gestalt_rust::Output<Option<String>>,
        /// The full text of the OpenAPI YAML configuration as described [here](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md).
        /// Either this, or *both* of `grpc_config` and `protoc_output_base64` must be specified.
        pub openapi_config: pulumi_gestalt_rust::Output<Option<String>>,
        /// The project ID that the service belongs to.  If not provided, provider project is used.
        pub project: pulumi_gestalt_rust::Output<String>,
        /// The full contents of the Service Descriptor File generated by protoc.  This should be a compiled .pb file, base64-encoded.
        pub protoc_output_base64: pulumi_gestalt_rust::Output<Option<String>>,
        /// The name of the service.  Usually of the form `$apiname.endpoints.$projectid.cloud.goog`.
        ///
        /// - - -
        pub service_name: pulumi_gestalt_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::Context,
        name: &str,
        args: ServiceArgs,
    ) -> ServiceResult {
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let grpc_config_binding = args.grpc_config.get_output(context);
        let openapi_config_binding = args.openapi_config.get_output(context);
        let project_binding = args.project.get_output(context);
        let protoc_output_base64_binding = args.protoc_output_base64.get_output(context);
        let service_name_binding = args.service_name.get_output(context);
        let request = pulumi_gestalt_rust::RegisterResourceRequest {
            type_: "gcp:endpoints/service:Service".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "grpcConfig".into(),
                    value: &grpc_config_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "openapiConfig".into(),
                    value: &openapi_config_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "project".into(),
                    value: &project_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "protocOutputBase64".into(),
                    value: &protoc_output_base64_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "serviceName".into(),
                    value: &service_name_binding.drop_type(),
                },
            ],
        };
        let o = context.register_resource(request);
        ServiceResult {
            id: o.get_field("id"),
            apis: o.get_field("apis"),
            config_id: o.get_field("configId"),
            dns_address: o.get_field("dnsAddress"),
            endpoints: o.get_field("endpoints"),
            grpc_config: o.get_field("grpcConfig"),
            openapi_config: o.get_field("openapiConfig"),
            project: o.get_field("project"),
            protoc_output_base64: o.get_field("protocOutputBase64"),
            service_name: o.get_field("serviceName"),
        }
    }
}
