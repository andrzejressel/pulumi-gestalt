/// Provides a settings of an API Gateway Documentation Part.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: aws:apigateway:DocumentationPart
///     properties:
///       location:
///         type: METHOD
///         method: GET
///         path: /example
///       properties: '{"description":"Example description"}'
///       restApiId: ${exampleRestApi.id}
///   exampleRestApi:
///     type: aws:apigateway:RestApi
///     name: example
///     properties:
///       name: example_api
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import API Gateway documentation_parts using `REST-API-ID/DOC-PART-ID`. For example:
///
/// ```sh
/// $ pulumi import aws:apigateway/documentationPart:DocumentationPart example 5i4e1ko720/3oyy3t
/// ```
pub mod documentation_part {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct DocumentationPartArgs {
        /// Location of the targeted API entity of the to-be-created documentation part. See below.
        #[builder(into)]
        pub location: pulumi_gestalt_rust::InputOrOutput<
            super::super::types::apigateway::DocumentationPartLocation,
        >,
        /// Content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ \"description\": \"The API does ...\" }". Only Swagger-compliant key-value pairs can be exported and, hence, published.
        #[builder(into)]
        pub properties: pulumi_gestalt_rust::InputOrOutput<String>,
        /// ID of the associated Rest API
        #[builder(into)]
        pub rest_api_id: pulumi_gestalt_rust::InputOrOutput<String>,
    }
    #[allow(dead_code)]
    pub struct DocumentationPartResult {
        /// The DocumentationPart identifier, generated by API Gateway when the documentation part is created.
        pub documentation_part_id: pulumi_gestalt_rust::Output<String>,
        /// Location of the targeted API entity of the to-be-created documentation part. See below.
        pub location: pulumi_gestalt_rust::Output<
            super::super::types::apigateway::DocumentationPartLocation,
        >,
        /// Content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ \"description\": \"The API does ...\" }". Only Swagger-compliant key-value pairs can be exported and, hence, published.
        pub properties: pulumi_gestalt_rust::Output<String>,
        /// ID of the associated Rest API
        pub rest_api_id: pulumi_gestalt_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::PulumiContext,
        name: &str,
        args: DocumentationPartArgs,
    ) -> DocumentationPartResult {
        use pulumi_gestalt_rust::__private::pulumi_gestalt_wit::client_bindings::component::pulumi_gestalt::register_interface;
        use std::collections::HashMap;
        let location_binding = args.location.get_output(context).get_inner();
        let properties_binding = args.properties.get_output(context).get_inner();
        let rest_api_id_binding = args.rest_api_id.get_output(context).get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "aws:apigateway/documentationPart:DocumentationPart".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "location".into(),
                    value: &location_binding,
                },
                register_interface::ObjectField {
                    name: "properties".into(),
                    value: &properties_binding,
                },
                register_interface::ObjectField {
                    name: "restApiId".into(),
                    value: &rest_api_id_binding,
                },
            ]),
        };
        let o = register_interface::register(context.get_inner(), &request);
        DocumentationPartResult {
            documentation_part_id: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("documentationPartId"),
            ),
            location: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("location"),
            ),
            properties: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("properties"),
            ),
            rest_api_id: pulumi_gestalt_rust::__private::into_domain(
                o.extract_field("restApiId"),
            ),
        }
    }
}
