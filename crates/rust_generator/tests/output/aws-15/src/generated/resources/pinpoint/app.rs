/// Provides a Pinpoint App resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_gestalt_rust::Output;
/// use pulumi_gestalt_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = app::create(
///         "example",
///         AppArgs::builder()
///             .limits(AppLimits::builder().maximumDuration(600).build_struct())
///             .name("test-app")
///             .quiet_time(
///                 AppQuietTime::builder().end("06:00").start("00:00").build_struct(),
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import Pinpoint App using the `application-id`. For example:
///
/// ```sh
/// $ pulumi import aws:pinpoint/app:App name application-id
/// ```
#[allow(clippy::doc_lazy_continuation, clippy::tabs_in_doc_comments)]
pub mod app {
    #[derive(pulumi_gestalt_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct AppArgs {
        /// Specifies settings for invoking an AWS Lambda function that customizes a segment for a campaign
        #[builder(into, default)]
        pub campaign_hook: pulumi_gestalt_rust::InputOrOutput<
            Option<super::super::types::pinpoint::AppCampaignHook>,
        >,
        /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
        #[builder(into, default)]
        pub limits: pulumi_gestalt_rust::InputOrOutput<
            Option<super::super::types::pinpoint::AppLimits>,
        >,
        /// The application name. By default generated by Pulumi
        #[builder(into, default)]
        pub name: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The name of the Pinpoint application. Conflicts with `name`
        #[builder(into, default)]
        pub name_prefix: pulumi_gestalt_rust::InputOrOutput<Option<String>>,
        /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
        #[builder(into, default)]
        pub quiet_time: pulumi_gestalt_rust::InputOrOutput<
            Option<super::super::types::pinpoint::AppQuietTime>,
        >,
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        #[builder(into, default)]
        pub tags: pulumi_gestalt_rust::InputOrOutput<
            Option<std::collections::HashMap<String, String>>,
        >,
    }
    #[allow(dead_code)]
    pub struct AppResult {
        /// Pulumi ID is the provider-assigned unique ID for this managed resource.
        /// It is set during deployments and may be missing (unknown) during planning phases.
        pub id: pulumi_gestalt_rust::Output<String>,
        /// The Application ID of the Pinpoint App.
        pub application_id: pulumi_gestalt_rust::Output<String>,
        /// Amazon Resource Name (ARN) of the PinPoint Application
        pub arn: pulumi_gestalt_rust::Output<String>,
        /// Specifies settings for invoking an AWS Lambda function that customizes a segment for a campaign
        pub campaign_hook: pulumi_gestalt_rust::Output<
            Option<super::super::types::pinpoint::AppCampaignHook>,
        >,
        /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
        pub limits: pulumi_gestalt_rust::Output<
            Option<super::super::types::pinpoint::AppLimits>,
        >,
        /// The application name. By default generated by Pulumi
        pub name: pulumi_gestalt_rust::Output<String>,
        /// The name of the Pinpoint application. Conflicts with `name`
        pub name_prefix: pulumi_gestalt_rust::Output<String>,
        /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
        pub quiet_time: pulumi_gestalt_rust::Output<
            Option<super::super::types::pinpoint::AppQuietTime>,
        >,
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        pub tags: pulumi_gestalt_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        pub tags_all: pulumi_gestalt_rust::Output<
            std::collections::HashMap<String, String>,
        >,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_gestalt_rust::Context,
        name: &str,
        args: AppArgs,
    ) -> AppResult {
        use std::collections::HashMap;
        use pulumi_gestalt_rust::{GestaltCompositeOutput, GestaltContext, GestaltOutput};
        let campaign_hook_binding = args.campaign_hook.get_output(context);
        let limits_binding = args.limits.get_output(context);
        let name_binding = args.name.get_output(context);
        let name_prefix_binding = args.name_prefix.get_output(context);
        let quiet_time_binding = args.quiet_time.get_output(context);
        let tags_binding = args.tags.get_output(context);
        let request = pulumi_gestalt_rust::RegisterResourceRequest {
            type_: "aws:pinpoint/app:App".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: &[
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "campaignHook".into(),
                    value: &campaign_hook_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "limits".into(),
                    value: &limits_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "name".into(),
                    value: &name_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "namePrefix".into(),
                    value: &name_prefix_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "quietTime".into(),
                    value: &quiet_time_binding.drop_type(),
                },
                pulumi_gestalt_rust::ResourceRequestObjectField {
                    name: "tags".into(),
                    value: &tags_binding.drop_type(),
                },
            ],
        };
        let o = context.register_resource(request);
        AppResult {
            id: o.get_field("id"),
            application_id: o.get_field("applicationId"),
            arn: o.get_field("arn"),
            campaign_hook: o.get_field("campaignHook"),
            limits: o.get_field("limits"),
            name: o.get_field("name"),
            name_prefix: o.get_field("namePrefix"),
            quiet_time: o.get_field("quietTime"),
            tags: o.get_field("tags"),
            tags_all: o.get_field("tagsAll"),
        }
    }
}
