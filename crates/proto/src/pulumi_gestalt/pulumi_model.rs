// This file is @generated by prost-build.
/// Main Package definition
/// Represents a Pulumi package, which is a collection of resources and functions.
/// Corresponds to the root object in a Pulumi schema JSON file.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Package {
    /// The unqualified name of the package (e.g., "aws", "azure", "gcp", "kubernetes", "random", "docker").
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The human-friendly name of the package.
    #[prost(string, optional, tag = "2")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    /// The URL to download the provider plugin for this package.
    #[prost(string, optional, tag = "3")]
    pub plugin_download_url: ::core::option::Option<::prost::alloc::string::String>,
    /// The version of the package.
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
    /// A map of resource type tokens to resource definitions.
    #[prost(message, repeated, tag = "5")]
    pub resources: ::prost::alloc::vec::Vec<Resource>,
    /// A map of function type tokens to function definitions.
    #[prost(message, repeated, tag = "6")]
    pub functions: ::prost::alloc::vec::Vec<Function>,
    /// A map of type tokens to complex type definitions.
    #[prost(message, repeated, tag = "7")]
    pub types: ::prost::alloc::vec::Vec<GlobalType>,
}
/// Resource definition
/// Describes a resource provided by the package.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Resource {
    /// The Pulumi type token for the resource.
    #[prost(message, optional, tag = "1")]
    pub element_id: ::core::option::Option<ElementId>,
    /// A human-friendly description of the resource.
    #[prost(string, optional, tag = "2")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    /// A map of input property names to their definitions.
    #[prost(message, repeated, tag = "3")]
    pub input_properties: ::prost::alloc::vec::Vec<InputProperty>,
    /// A map of output property names to their definitions.
    #[prost(message, repeated, tag = "4")]
    pub output_properties: ::prost::alloc::vec::Vec<OutputProperty>,
}
/// Function definition
/// Describes a function (data source) provided by the package.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Function {
    /// The Pulumi type token for the function.
    #[prost(message, optional, tag = "1")]
    pub element_id: ::core::option::Option<ElementId>,
    /// A human-friendly description of the function.
    #[prost(string, optional, tag = "2")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    /// A map of input property names to their definitions.
    #[prost(message, repeated, tag = "3")]
    pub input_properties: ::prost::alloc::vec::Vec<InputProperty>,
    /// A map of output property names to their definitions.
    #[prost(message, repeated, tag = "4")]
    pub output_properties: ::prost::alloc::vec::Vec<OutputProperty>,
}
/// ElementId definition
/// Represents a Pulumi type token.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ElementId {
    /// The namespace of the element, e.g. \[`s3`\] for `aws:s3/bucket:Bucket`.
    #[prost(string, repeated, tag = "1")]
    pub namespace: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The name of the element, e.g. "Bucket".
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// The raw token string, e.g. `aws:s3/bucket:Bucket`.
    #[prost(string, tag = "3")]
    pub raw: ::prost::alloc::string::String,
}
/// InputProperty definition
/// Describes an input property for a resource or function.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InputProperty {
    /// The name of the input property.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The type of the input property.
    #[prost(message, optional, tag = "2")]
    pub r#type: ::core::option::Option<Type>,
    /// A human-friendly description of the input property.
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
}
/// OutputProperty definition
/// Describes an output property for a resource or function.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OutputProperty {
    /// The name of the output property.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The type of the output property.
    #[prost(message, optional, tag = "2")]
    pub r#type: ::core::option::Option<Type>,
    /// A human-friendly description of the output property.
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
}
/// Type definition
/// Describes the type of a property or a standalone complex type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Type {
    #[prost(oneof = "r#type::TypeValue", tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10")]
    pub type_value: ::core::option::Option<r#type::TypeValue>,
}
/// Nested message and enum types in `Type`.
pub mod r#type {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum TypeValue {
        /// Represents a boolean type.
        #[prost(message, tag = "1")]
        Boolean(super::Empty),
        /// Represents an integer type.
        #[prost(message, tag = "2")]
        Integer(super::Empty),
        /// Represents a number type (float/double).
        #[prost(message, tag = "3")]
        Number(super::Empty),
        /// Represents a string type.
        #[prost(message, tag = "4")]
        String(super::Empty),
        /// Represents an array type. The 'array_type' field specifies the element type.
        #[prost(message, tag = "5")]
        ArrayType(::prost::alloc::boxed::Box<super::Type>),
        /// Represents an object type (map). The 'object_type' field specifies the value type for properties.
        #[prost(message, tag = "6")]
        ObjectType(::prost::alloc::boxed::Box<super::Type>),
        /// Represents a reference to another type.
        #[prost(message, tag = "7")]
        RefType(super::RefType),
        /// Represents an optional type. The 'option_type' field specifies the underlying type.
        #[prost(message, tag = "8")]
        OptionType(::prost::alloc::boxed::Box<super::Type>),
        /// Represents a discriminated union of types.
        #[prost(message, tag = "9")]
        DiscriminatedUnion(super::DiscriminatedUnion),
        /// Represents a constant string value.
        #[prost(string, tag = "10")]
        ConstString(::prost::alloc::string::String),
    }
}
/// Empty message for types that don't need additional fields
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Empty {}
/// RefType definition
/// Describes a reference to another type within the Pulumi schema.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefType {
    #[prost(oneof = "ref_type::RefValue", tags = "1, 2, 3, 4")]
    pub ref_value: ::core::option::Option<ref_type::RefValue>,
}
/// Nested message and enum types in `RefType`.
pub mod ref_type {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum RefValue {
        /// A reference to a complex type defined in the 'types' section of the package.
        #[prost(message, tag = "1")]
        TypeRef(super::ElementId),
        /// A special type representing a Pulumi Archive.
        #[prost(message, tag = "2")]
        Archive(super::Empty),
        /// A special type representing a Pulumi Asset.
        #[prost(message, tag = "3")]
        Asset(super::Empty),
        /// A special type representing any type (pulumi.json#/Any).
        #[prost(message, tag = "4")]
        Any(super::Empty),
    }
}
/// DiscriminatedUnion definition
/// Represents a list of types that can be used in a discriminated union.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiscriminatedUnion {
    /// The list of possible types in the union.
    #[prost(message, repeated, tag = "1")]
    pub types: ::prost::alloc::vec::Vec<Type>,
}
/// GlobalType definition
/// Describes a complex type definition.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GlobalType {
    /// The Pulumi type token for this complex type.
    #[prost(message, optional, tag = "1")]
    pub element_id: ::core::option::Option<ElementId>,
    /// The actual value or structure of the global type.
    #[prost(message, optional, tag = "2")]
    pub global_type_value: ::core::option::Option<GlobalTypeValue>,
}
/// GlobalType definition
/// Represents the value of a complex type, which can be an object or an enum.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GlobalTypeValue {
    #[prost(oneof = "global_type_value::Value", tags = "1, 2, 3, 4")]
    pub value: ::core::option::Option<global_type_value::Value>,
}
/// Nested message and enum types in `GlobalTypeValue`.
pub mod global_type_value {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        /// The type is an object with properties.
        #[prost(message, tag = "1")]
        Object(super::ObjectType),
        /// The type is an enum with string values.
        #[prost(message, tag = "2")]
        StringEnum(super::StringEnum),
        /// The type is an enum with number values.
        #[prost(message, tag = "3")]
        NumberEnum(super::NumberEnum),
        /// The type is an enum with integer values.
        #[prost(message, tag = "4")]
        IntegerEnum(super::IntegerEnum),
    }
}
/// ObjectType definition
/// Describes an object type with a set of properties.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObjectType {
    /// A human-friendly description of the object type.
    #[prost(string, optional, tag = "1")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    /// A map of property names to their definitions.
    #[prost(message, repeated, tag = "2")]
    pub properties: ::prost::alloc::vec::Vec<GlobalTypeProperty>,
}
/// StringEnum definition
/// Describes an enum type with string values.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringEnum {
    /// A human-friendly description of the enum.
    #[prost(string, optional, tag = "1")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    /// The list of possible enum values.
    #[prost(message, repeated, tag = "2")]
    pub elements: ::prost::alloc::vec::Vec<StringEnumElement>,
}
/// NumberEnum definition
/// Describes an enum type with number (float/double) values.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumberEnum {
    /// A human-friendly description of the enum.
    #[prost(string, optional, tag = "1")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    /// The list of possible enum values.
    #[prost(message, repeated, tag = "2")]
    pub elements: ::prost::alloc::vec::Vec<NumberEnumElement>,
}
/// IntegerEnum definition
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IntegerEnum {
    /// A human-friendly description of the enum.
    #[prost(string, optional, tag = "1")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    /// The list of possible enum values.
    #[prost(message, repeated, tag = "2")]
    pub elements: ::prost::alloc::vec::Vec<IntegerEnumElement>,
}
/// GlobalTypeProperty definition
/// Describes a property within an ObjectType.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GlobalTypeProperty {
    /// The name of the property.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The type of the property.
    #[prost(message, optional, tag = "2")]
    pub r#type: ::core::option::Option<Type>,
    /// A human-friendly description of the property.
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
}
/// StringEnumElement definition
/// Describes a single element (value) of a StringEnum.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringEnumElement {
    /// The name of the enum element.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The string value of the enum element.
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
    /// A human-friendly description of the enum element.
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
}
/// NumberEnumElement definition
/// Describes a single element (value) of a NumberEnum.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumberEnumElement {
    /// The name of the enum element.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The number (float/double) value of the enum element.
    #[prost(double, tag = "2")]
    pub value: f64,
    /// A human-friendly description of the enum element.
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
}
/// IntegerEnumElement definition
/// Describes a single element (value) of an IntegerEnum.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IntegerEnumElement {
    /// The name of the enum element.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The integer value of the enum element.
    #[prost(int64, tag = "2")]
    pub value: i64,
    /// A human-friendly description of the enum element.
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
}
