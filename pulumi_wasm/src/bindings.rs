// Generated by `wit-bindgen` 0.18.0. DO NOT EDIT!
pub mod component {
  pub mod pulumi_wasm {
    
    #[allow(clippy::all)]
    pub mod external_world {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[allow(unused_unsafe, clippy::all)]
      pub fn register_resource(request: &[u8],) -> wit_bindgen::rt::vec::Vec::<u8>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let vec0 = request;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:pulumi-wasm/external-world@0.1.0")]
          extern "C" {
            #[link_name = "register-resource"]
            fn wit_import(_: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr0, len0, ptr1);
          let l2 = *((ptr1 + 0) as *const i32);
          let l3 = *((ptr1 + 4) as *const i32);
          let len4 = l3 as usize;
          Vec::from_raw_parts(l2 as *mut _, len4, len4)
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod component {
    pub mod pulumi_wasm {
      
      #[allow(clippy::all)]
      pub mod output_interface {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        
        pub use super::super::super::super::super::Output as Output;
        const _: () = {
          #[doc(hidden)]
          #[export_name = "component:pulumi-wasm/output-interface@0.1.0#[dtor]output"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: usize) {
            wit_bindgen::rt::Resource::<Output>::dtor(rep)
          }
        };
        unsafe impl wit_bindgen::rt::RustResource for Output{
          unsafe fn new(_rep: usize) -> u32 {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:pulumi-wasm/output-interface@0.1.0")]
              extern "C" {
                #[link_name = "[resource-new]output"]
                fn new(_: usize) -> u32;
              }
              new(_rep)
            }
          }
          
          unsafe fn rep(_handle: u32) -> usize {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:pulumi-wasm/output-interface@0.1.0")]
              extern "C" {
                #[link_name = "[resource-rep]output"]
                fn rep(_: u32) -> usize;
              }
              rep(_handle)
            }
          }
        }
        pub type OwnOutput = wit_bindgen::rt::Resource<Output>;
        
        
        unsafe impl wit_bindgen::rt::WasmResource for Output{
          #[inline]
          unsafe fn drop(_handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:pulumi-wasm/output-interface@0.1.0")]
              extern "C" {
                #[link_name = "[resource-drop]output"]
                fn drop(_: u32);
              }
              
              drop(_handle);
            }
          }
        }
        
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:pulumi-wasm/output-interface@0.1.0#create-struct"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_create_struct(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let base4 = arg0;
            let len4 = arg1;
            let mut result4 = Vec::with_capacity(len4 as usize);
            for i in 0..len4 {
              let base = base4 + i * 12;
              let e4 = {
                let l0 = *((base + 0) as *const i32);
                let l1 = *((base + 4) as *const i32);
                let len2 = l1 as usize;
                let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                let l3 = *((base + 8) as *const i32);
                
                (wit_bindgen::rt::string_lift(bytes2), wit_bindgen::rt::Resource::<Output>::lift_borrow(l3 as u32 as usize))
              };
              result4.push(e4);
            }
            wit_bindgen::rt::dealloc(base4, (len4 as usize) * 12, 4);
            let result5 = <_GuestImpl as Guest>::create_struct(result4);
            wit_bindgen::rt::Resource::into_handle(result5) as i32
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:pulumi-wasm/output-interface@0.1.0#[constructor]output"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_constructor_output(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let result1 = OwnOutput::new(<_OutputImpl as GuestOutput>::new(Vec::from_raw_parts(arg0 as *mut _, len0, len0)));
            wit_bindgen::rt::Resource::into_handle(result1) as i32
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:pulumi-wasm/output-interface@0.1.0#[method]output.map"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_output_map(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg2 as usize;
            let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
            let result1 = <_OutputImpl as GuestOutput>::map(wit_bindgen::rt::Resource::<Output>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0));
            wit_bindgen::rt::Resource::into_handle(result1) as i32
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:pulumi-wasm/output-interface@0.1.0#[method]output.get"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_output_get(arg0: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_OutputImpl as GuestOutput>::get(wit_bindgen::rt::Resource::<Output>::lift_borrow(arg0 as u32 as usize));
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            match result0 {
              Some(e) => {
                *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                let vec2 = (e).into_boxed_slice();
                let ptr2 = vec2.as_ptr() as i32;
                let len2 = vec2.len() as i32;
                ::core::mem::forget(vec2);
                *((ptr1 + 8) as *mut i32) = len2;
                *((ptr1 + 4) as *mut i32) = ptr2;
              },
              None => {
                {
                  *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                }
              },
            };ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_component:pulumi-wasm/output-interface@0.1.0#[method]output.get"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_method_output_get(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => (),
                _ => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  let base3 = l1;
                  let len3 = l2;
                  wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:pulumi-wasm/output-interface@0.1.0#[method]output.duplicate"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_output_duplicate(arg0: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_OutputImpl as GuestOutput>::duplicate(wit_bindgen::rt::Resource::<Output>::lift_borrow(arg0 as u32 as usize));
            wit_bindgen::rt::Resource::into_handle(result0) as i32
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn create_struct(fields: wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,&Output,)>,) -> OwnOutput;
        }
        use super::super::super::super::super::Output as _OutputImpl;
        pub trait GuestOutput {
          fn new(value: wit_bindgen::rt::vec::Vec::<u8>,) -> Self;
          fn map(&self,function_name: wit_bindgen::rt::string::String,) -> OwnOutput;
          fn get(&self,) -> Option<wit_bindgen::rt::vec::Vec::<u8>>;
          fn duplicate(&self,) -> OwnOutput;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
      
      #[allow(clippy::all)]
      pub mod register_interface {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type OwnOutput = super::super::super::super::exports::component::pulumi_wasm::output_interface::OwnOutput;
        pub type Output = super::super::super::super::exports::component::pulumi_wasm::output_interface::Output;
        pub struct ObjectField<'a,> {
          /// name: list<u8>, //FIXME: String does not work
          pub object: &'a Output,
        }
        impl<'a,> ::core::fmt::Debug for ObjectField<'a,> {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("ObjectField").field("object", &self.object).finish()
          }
        }
        pub struct RegisterResourceRequest<'a,> {
          pub type_: wit_bindgen::rt::string::String,
          pub name: wit_bindgen::rt::string::String,
          pub object_names: wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>,
          pub object: wit_bindgen::rt::vec::Vec::<ObjectField<'a,>>,
        }
        impl<'a,> ::core::fmt::Debug for RegisterResourceRequest<'a,> {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("RegisterResourceRequest").field("type", &self.type_).field("name", &self.name).field("object-names", &self.object_names).field("object", &self.object).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:pulumi-wasm/register-interface@0.1.0#register"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_register(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let len1 = arg3 as usize;
            let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
            let base5 = arg4;
            let len5 = arg5;
            let mut result5 = Vec::with_capacity(len5 as usize);
            for i in 0..len5 {
              let base = base5 + i * 8;
              let e5 = {
                let l2 = *((base + 0) as *const i32);
                let l3 = *((base + 4) as *const i32);
                let len4 = l3 as usize;
                let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);
                
                wit_bindgen::rt::string_lift(bytes4)
              };
              result5.push(e5);
            }
            wit_bindgen::rt::dealloc(base5, (len5 as usize) * 8, 4);
            let base7 = arg6;
            let len7 = arg7;
            let mut result7 = Vec::with_capacity(len7 as usize);
            for i in 0..len7 {
              let base = base7 + i * 4;
              let e7 = {
                let l6 = *((base + 0) as *const i32);
                
                ObjectField{
                  object: wit_bindgen::rt::Resource::<Output>::lift_borrow(l6 as u32 as usize),
                }
              };
              result7.push(e7);
            }
            wit_bindgen::rt::dealloc(base7, (len7 as usize) * 4, 4);
            <_GuestImpl as Guest>::register(RegisterResourceRequest{
              type_: wit_bindgen::rt::string_lift(bytes0),
              name: wit_bindgen::rt::string_lift(bytes1),
              object_names: result5,
              object: result7,
            });
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn register(request: RegisterResourceRequest,);
        }
        
      }
      
      
      #[allow(clippy::all)]
      pub mod function_reverse_callback {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type OwnOutput = super::super::super::super::exports::component::pulumi_wasm::output_interface::OwnOutput;
        pub type Output = super::super::super::super::exports::component::pulumi_wasm::output_interface::Output;
        pub struct FunctionInvocationRequest {
          pub id: OwnOutput,
          pub function_id: wit_bindgen::rt::string::String,
          pub value: wit_bindgen::rt::vec::Vec::<u8>,
        }
        impl ::core::fmt::Debug for FunctionInvocationRequest {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("FunctionInvocationRequest").field("id", &self.id).field("function-id", &self.function_id).field("value", &self.value).finish()
          }
        }
        pub struct FunctionInvocationResult<'a,> {
          pub id: &'a Output,
          pub value: wit_bindgen::rt::vec::Vec::<u8>,
        }
        impl<'a,> ::core::fmt::Debug for FunctionInvocationResult<'a,> {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("FunctionInvocationResult").field("id", &self.id).field("value", &self.value).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:pulumi-wasm/function-reverse-callback@0.1.0#get-functions"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_functions(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let result1 = <_GuestImpl as Guest>::get_functions(wit_bindgen::rt::string_lift(bytes0));
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec6 = result1;
            let len6 = vec6.len() as i32;
            let layout6 = alloc::Layout::from_size_align_unchecked(vec6.len() * 20, 4);
            let result6 = if layout6.size() != 0
            {
              let ptr = alloc::alloc(layout6);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout6);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec6.into_iter().enumerate() {
              let base = result6 as i32 + (i as i32) * 20;
              {
                let FunctionInvocationRequest{ id:id3, function_id:function_id3, value:value3, } = e;
                *((base + 0) as *mut i32) = wit_bindgen::rt::Resource::into_handle(id3) as i32;
                let vec4 = (function_id3.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((base + 8) as *mut i32) = len4;
                *((base + 4) as *mut i32) = ptr4;
                let vec5 = (value3).into_boxed_slice();
                let ptr5 = vec5.as_ptr() as i32;
                let len5 = vec5.len() as i32;
                ::core::mem::forget(vec5);
                *((base + 16) as *mut i32) = len5;
                *((base + 12) as *mut i32) = ptr5;
              }
            }
            *((ptr2 + 4) as *mut i32) = len6;
            *((ptr2 + 0) as *mut i32) = result6 as i32;
            ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_component:pulumi-wasm/function-reverse-callback@0.1.0#get-functions"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_functions(arg0: i32,) {
              let l5 = *((arg0 + 0) as *const i32);
              let l6 = *((arg0 + 4) as *const i32);
              let base7 = l5;
              let len7 = l6;
              for i in 0..len7 {
                let base = base7 + i *20;
                {
                  let l0 = *((base + 4) as *const i32);
                  let l1 = *((base + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                  let l2 = *((base + 12) as *const i32);
                  let l3 = *((base + 16) as *const i32);
                  let base4 = l2;
                  let len4 = l3;
                  wit_bindgen::rt::dealloc(base4, (len4 as usize) * 1, 1);
                }
              }
              wit_bindgen::rt::dealloc(base7, (len7 as usize) * 20, 4);
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:pulumi-wasm/function-reverse-callback@0.1.0#set-functions"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_set_functions(arg0: i32,arg1: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let base4 = arg0;
            let len4 = arg1;
            let mut result4 = Vec::with_capacity(len4 as usize);
            for i in 0..len4 {
              let base = base4 + i * 12;
              let e4 = {
                let l0 = *((base + 0) as *const i32);
                let l1 = *((base + 4) as *const i32);
                let l2 = *((base + 8) as *const i32);
                let len3 = l2 as usize;
                
                FunctionInvocationResult{
                  id: wit_bindgen::rt::Resource::<Output>::lift_borrow(l0 as u32 as usize),
                  value: Vec::from_raw_parts(l1 as *mut _, len3, len3),
                }
              };
              result4.push(e4);
            }
            wit_bindgen::rt::dealloc(base4, (len4 as usize) * 12, 4);
            <_GuestImpl as Guest>::set_functions(result4);
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn get_functions(source: wit_bindgen::rt::string::String,) -> wit_bindgen::rt::vec::Vec::<FunctionInvocationRequest>;
          fn set_functions(results: wit_bindgen::rt::vec::Vec::<FunctionInvocationResult>,);
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 8]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:pulumi-wasm"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1018] = [0, 97, 115, 109, 13, 0, 1, 0, 0, 25, 22, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 4, 0, 7, 249, 6, 1, 65, 2, 1, 65, 9, 1, 66, 3, 1, 112, 125, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 0, 0, 0, 4, 0, 17, 114, 101, 103, 105, 115, 116, 101, 114, 45, 114, 101, 115, 111, 117, 114, 99, 101, 1, 1, 3, 1, 42, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 112, 117, 108, 117, 109, 105, 45, 119, 97, 115, 109, 47, 101, 120, 116, 101, 114, 110, 97, 108, 45, 119, 111, 114, 108, 100, 64, 48, 46, 49, 46, 48, 5, 0, 1, 66, 17, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 1, 1, 112, 125, 1, 105, 0, 1, 64, 1, 5, 118, 97, 108, 117, 101, 1, 0, 2, 4, 0, 19, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 111, 117, 116, 112, 117, 116, 1, 3, 1, 104, 0, 1, 64, 2, 4, 115, 101, 108, 102, 4, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 0, 2, 4, 0, 18, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 46, 109, 97, 112, 1, 5, 1, 107, 1, 1, 64, 1, 4, 115, 101, 108, 102, 4, 0, 6, 4, 0, 18, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 46, 103, 101, 116, 1, 7, 1, 64, 1, 4, 115, 101, 108, 102, 4, 0, 2, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 46, 100, 117, 112, 108, 105, 99, 97, 116, 101, 1, 8, 1, 111, 2, 115, 4, 1, 112, 9, 1, 64, 1, 6, 102, 105, 101, 108, 100, 115, 10, 0, 2, 4, 0, 13, 99, 114, 101, 97, 116, 101, 45, 115, 116, 114, 117, 99, 116, 1, 11, 4, 1, 44, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 112, 117, 108, 117, 109, 105, 45, 119, 97, 115, 109, 47, 111, 117, 116, 112, 117, 116, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 64, 48, 46, 49, 46, 48, 5, 1, 2, 3, 0, 1, 6, 111, 117, 116, 112, 117, 116, 1, 66, 11, 2, 3, 2, 1, 2, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 0, 1, 104, 1, 1, 114, 1, 6, 111, 98, 106, 101, 99, 116, 2, 4, 0, 12, 111, 98, 106, 101, 99, 116, 45, 102, 105, 101, 108, 100, 3, 0, 3, 1, 112, 115, 1, 112, 4, 1, 114, 4, 4, 116, 121, 112, 101, 115, 4, 110, 97, 109, 101, 115, 12, 111, 98, 106, 101, 99, 116, 45, 110, 97, 109, 101, 115, 5, 6, 111, 98, 106, 101, 99, 116, 6, 4, 0, 25, 114, 101, 103, 105, 115, 116, 101, 114, 45, 114, 101, 115, 111, 117, 114, 99, 101, 45, 114, 101, 113, 117, 101, 115, 116, 3, 0, 7, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 8, 1, 0, 4, 0, 8, 114, 101, 103, 105, 115, 116, 101, 114, 1, 9, 4, 1, 46, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 112, 117, 108, 117, 109, 105, 45, 119, 97, 115, 109, 47, 114, 101, 103, 105, 115, 116, 101, 114, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 64, 48, 46, 49, 46, 48, 5, 3, 1, 66, 15, 2, 3, 2, 1, 2, 4, 0, 6, 111, 117, 116, 112, 117, 116, 3, 0, 0, 1, 105, 1, 1, 112, 125, 1, 114, 3, 2, 105, 100, 2, 11, 102, 117, 110, 99, 116, 105, 111, 110, 45, 105, 100, 115, 5, 118, 97, 108, 117, 101, 3, 4, 0, 27, 102, 117, 110, 99, 116, 105, 111, 110, 45, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 45, 114, 101, 113, 117, 101, 115, 116, 3, 0, 4, 1, 104, 1, 1, 114, 2, 2, 105, 100, 6, 5, 118, 97, 108, 117, 101, 3, 4, 0, 26, 102, 117, 110, 99, 116, 105, 111, 110, 45, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 45, 114, 101, 115, 117, 108, 116, 3, 0, 7, 1, 112, 5, 1, 64, 1, 6, 115, 111, 117, 114, 99, 101, 115, 0, 9, 4, 0, 13, 103, 101, 116, 45, 102, 117, 110, 99, 116, 105, 111, 110, 115, 1, 10, 1, 112, 8, 1, 64, 1, 7, 114, 101, 115, 117, 108, 116, 115, 11, 1, 0, 4, 0, 13, 115, 101, 116, 45, 102, 117, 110, 99, 116, 105, 111, 110, 115, 1, 12, 4, 1, 53, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 112, 117, 108, 117, 109, 105, 45, 119, 97, 115, 109, 47, 102, 117, 110, 99, 116, 105, 111, 110, 45, 114, 101, 118, 101, 114, 115, 101, 45, 99, 97, 108, 108, 98, 97, 99, 107, 64, 48, 46, 49, 46, 48, 5, 4, 4, 1, 39, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 112, 117, 108, 117, 109, 105, 45, 119, 97, 115, 109, 47, 112, 117, 108, 117, 109, 105, 45, 119, 97, 115, 109, 64, 48, 46, 49, 46, 48, 4, 0, 11, 17, 1, 0, 11, 112, 117, 108, 117, 109, 105, 45, 119, 97, 115, 109, 3, 0, 0, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 50, 49, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 56, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
