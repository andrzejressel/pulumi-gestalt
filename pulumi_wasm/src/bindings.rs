// Generated by `wit-bindgen` 0.20.0. DO NOT EDIT!
// Options used:
pub mod component {
    pub mod pulumi_wasm {

        #[allow(clippy::all)]
        pub mod log {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            #[allow(unused_unsafe, clippy::all)]
            pub fn log(message: &str) {
                unsafe {
                    let vec0 = message;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:pulumi-wasm/log@0.1.0")]
                    extern "C" {
                        #[link_name = "log"]
                        fn wit_import(_: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0);
                }
            }
        }

        #[allow(clippy::all)]
        pub mod external_world {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            pub fn is_in_preview() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:pulumi-wasm/external-world@0.1.0")]
                    extern "C" {
                        #[link_name = "is-in-preview"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn register_resource(request: &[u8]) -> _rt::Vec<u8> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = request;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:pulumi-wasm/external-world@0.1.0")]
                    extern "C" {
                        #[link_name = "register-resource"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                }
            }
        }
    }
}
pub mod exports {
    pub mod component {
        pub mod pulumi_wasm {

            #[allow(clippy::all)]
            pub mod output_interface {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Output {
                    handle: _rt::Resource<Output>,
                }

                type _OutputRep<T> = Option<T>;

                impl Output {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Output`.
                    pub fn new<T: GuestOutput>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _OutputRep<T> = Some(val);
                        let ptr: *mut _OutputRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestOutput>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestOutput>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestOutput>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestOutput` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    fn as_ptr<T: GuestOutput>(&self) -> *mut _OutputRep<T> {
                        Output::type_guard::<T>();
                        unsafe { T::_resource_rep(self.handle()).cast() }
                    }
                }

                /// A borrowed version of [`Output`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct OutputBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Output>,
                }

                impl<'a> OutputBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestOutput>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _OutputRep<T> {
                        Output::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Output {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:pulumi-wasm/output-interface@0.1.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]output"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_describe_outputs_cabi<T: Guest>() -> *mut u8 {
                    let result0 = T::describe_outputs();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_describe_outputs<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_non_done_exists_cabi<T: Guest>() -> i32 {
                    let result0 = T::non_done_exists();
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_combine_outputs_cabi<T: Guest>() -> i32 {
                    let result0 = T::combine_outputs();
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_output_cabi<T: GuestOutput>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    let len0 = arg1;
                    let result1 =
                        Output::new(T::new(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0)));
                    (result1).take_handle() as i32
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_output_map_cabi<T: GuestOutput>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> i32 {
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::map(
                        OutputBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    (result1).take_handle() as i32
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_output_get_cabi<T: GuestOutput>(arg0: i32) -> *mut u8 {
                    let result0 = T::get(OutputBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec2 = (e).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1.add(8).cast::<usize>() = len2;
                            *ptr1.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_output_get<T: GuestOutput>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_output_get_field_cabi<T: GuestOutput>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> i32 {
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::get_field(
                        OutputBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    (result1).take_handle() as i32
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_output_get_type_cabi<T: GuestOutput>(
                    arg0: i32,
                ) -> *mut u8 {
                    let result0 = T::get_type(OutputBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_output_get_type<T: GuestOutput>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_output_duplicate_cabi<T: GuestOutput>(
                    arg0: i32,
                ) -> i32 {
                    let result0 = T::duplicate(OutputBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                pub trait Guest {
                    type Output: GuestOutput;
                    fn describe_outputs() -> _rt::String;
                    fn non_done_exists() -> bool;
                    fn combine_outputs() -> bool;
                }
                pub trait GuestOutput: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:pulumi-wasm/output-interface@0.1.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]output"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:pulumi-wasm/output-interface@0.1.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]output"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new(value: _rt::Vec<u8>) -> Self;
                    fn map(&self, function_name: _rt::String) -> Output;
                    fn get(&self) -> Option<_rt::Vec<u8>>;
                    fn get_field(&self, field: _rt::String) -> Output;
                    fn get_type(&self) -> _rt::String;
                    fn duplicate(&self) -> Output;
                }
                #[doc(hidden)]

                macro_rules! __export_component_pulumi_wasm_output_interface_0_1_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


    #[export_name = "component:pulumi-wasm/output-interface@0.1.0#describe-outputs"]
    unsafe extern "C" fn export_describe_outputs() -> *mut u8 {
      $($path_to_types)*::_export_describe_outputs_cabi::<$ty>()
    }

    #[export_name = "cabi_post_component:pulumi-wasm/output-interface@0.1.0#describe-outputs"]
    unsafe extern "C" fn _post_return_describe_outputs(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_describe_outputs::<$ty>(arg0)
    }

    #[export_name = "component:pulumi-wasm/output-interface@0.1.0#non-done-exists"]
    unsafe extern "C" fn export_non_done_exists() -> i32 {
      $($path_to_types)*::_export_non_done_exists_cabi::<$ty>()
    }

    #[export_name = "component:pulumi-wasm/output-interface@0.1.0#combine-outputs"]
    unsafe extern "C" fn export_combine_outputs() -> i32 {
      $($path_to_types)*::_export_combine_outputs_cabi::<$ty>()
    }

    #[export_name = "component:pulumi-wasm/output-interface@0.1.0#[constructor]output"]
    unsafe extern "C" fn export_constructor_output(arg0: *mut u8,arg1: usize,) -> i32 {
      $($path_to_types)*::_export_constructor_output_cabi::<<$ty as $($path_to_types)*::Guest>::Output>(arg0, arg1)
    }

    #[export_name = "component:pulumi-wasm/output-interface@0.1.0#[method]output.map"]
    unsafe extern "C" fn export_method_output_map(arg0: i32,arg1: *mut u8,arg2: usize,) -> i32 {
      $($path_to_types)*::_export_method_output_map_cabi::<<$ty as $($path_to_types)*::Guest>::Output>(arg0, arg1, arg2)
    }

    #[export_name = "component:pulumi-wasm/output-interface@0.1.0#[method]output.get"]
    unsafe extern "C" fn export_method_output_get(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_output_get_cabi::<<$ty as $($path_to_types)*::Guest>::Output>(arg0)
    }

    #[export_name = "cabi_post_component:pulumi-wasm/output-interface@0.1.0#[method]output.get"]
    unsafe extern "C" fn _post_return_method_output_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_output_get::<<$ty as $($path_to_types)*::Guest>::Output>(arg0)
    }

    #[export_name = "component:pulumi-wasm/output-interface@0.1.0#[method]output.get-field"]
    unsafe extern "C" fn export_method_output_get_field(arg0: i32,arg1: *mut u8,arg2: usize,) -> i32 {
      $($path_to_types)*::_export_method_output_get_field_cabi::<<$ty as $($path_to_types)*::Guest>::Output>(arg0, arg1, arg2)
    }

    #[export_name = "component:pulumi-wasm/output-interface@0.1.0#[method]output.get-type"]
    unsafe extern "C" fn export_method_output_get_type(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_output_get_type_cabi::<<$ty as $($path_to_types)*::Guest>::Output>(arg0)
    }

    #[export_name = "cabi_post_component:pulumi-wasm/output-interface@0.1.0#[method]output.get-type"]
    unsafe extern "C" fn _post_return_method_output_get_type(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_output_get_type::<<$ty as $($path_to_types)*::Guest>::Output>(arg0)
    }

    #[export_name = "component:pulumi-wasm/output-interface@0.1.0#[method]output.duplicate"]
    unsafe extern "C" fn export_method_output_duplicate(arg0: i32,) -> i32 {
      $($path_to_types)*::_export_method_output_duplicate_cabi::<<$ty as $($path_to_types)*::Guest>::Output>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_component_pulumi_wasm_output_interface_0_1_0_cabi;

                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }

            #[allow(clippy::all)]
            pub mod register_interface {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Output = super::super::super::super::exports::component::pulumi_wasm::output_interface::Output;
                pub type OutputBorrow<'a> = super::super::super::super::exports::component::pulumi_wasm::output_interface::OutputBorrow<'a>;
                pub struct ObjectField<'a> {
                    pub name: _rt::String,
                    pub value: OutputBorrow<'a>,
                }
                impl<'a> ::core::fmt::Debug for ObjectField<'a> {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ObjectField")
                            .field("name", &self.name)
                            .field("value", &self.value)
                            .finish()
                    }
                }
                pub struct RegisterResourceRequest<'a> {
                    pub type_: _rt::String,
                    pub name: _rt::String,
                    pub object: _rt::Vec<ObjectField<'a>>,
                }
                impl<'a> ::core::fmt::Debug for RegisterResourceRequest<'a> {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("RegisterResourceRequest")
                            .field("type", &self.type_)
                            .field("name", &self.name)
                            .field("object", &self.object)
                            .finish()
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_register_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> i32 {
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let base6 = arg4;
                    let len6 = arg5;
                    let mut result6 = _rt::Vec::with_capacity(len6);
                    for i in 0..len6 {
                        let base = base6.add(i * 12);
                        let e6 = {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base.add(4).cast::<usize>();
                            let len4 = l3;
                            let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                            let l5 = *base.add(8).cast::<i32>();

                            ObjectField {
                                name: _rt::string_lift(bytes4),
                                value: OutputBorrow::lift(l5 as u32 as usize),
                            }
                        };
                        result6.push(e6);
                    }
                    _rt::cabi_dealloc(base6, len6 * 12, 4);
                    let result7 = T::register(RegisterResourceRequest {
                        type_: _rt::string_lift(bytes0),
                        name: _rt::string_lift(bytes1),
                        object: result6,
                    });
                    (result7).take_handle() as i32
                }
                pub trait Guest {
                    fn register(request: RegisterResourceRequest<'_>) -> Output;
                }
                #[doc(hidden)]

                macro_rules! __export_component_pulumi_wasm_register_interface_0_1_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


    #[export_name = "component:pulumi-wasm/register-interface@0.1.0#register"]
    unsafe extern "C" fn export_register(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,) -> i32 {
      $($path_to_types)*::_export_register_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_component_pulumi_wasm_register_interface_0_1_0_cabi;
            }

            #[allow(clippy::all)]
            pub mod function_reverse_callback {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Output = super::super::super::super::exports::component::pulumi_wasm::output_interface::Output;
                pub type OutputBorrow<'a> = super::super::super::super::exports::component::pulumi_wasm::output_interface::OutputBorrow<'a>;
                pub struct FunctionInvocationRequest {
                    pub id: Output,
                    pub function_id: _rt::String,
                    pub value: _rt::Vec<u8>,
                }
                impl ::core::fmt::Debug for FunctionInvocationRequest {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("FunctionInvocationRequest")
                            .field("id", &self.id)
                            .field("function-id", &self.function_id)
                            .field("value", &self.value)
                            .finish()
                    }
                }
                pub struct FunctionInvocationResult<'a> {
                    pub id: OutputBorrow<'a>,
                    pub value: _rt::Vec<u8>,
                }
                impl<'a> ::core::fmt::Debug for FunctionInvocationResult<'a> {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("FunctionInvocationResult")
                            .field("id", &self.id)
                            .field("value", &self.value)
                            .finish()
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_functions_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::get_functions(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec6 = result1;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(vec6.len() * 20, 4);
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6.add(i * 20);
                        {
                            let FunctionInvocationRequest {
                                id: id3,
                                function_id: function_id3,
                                value: value3,
                            } = e;
                            *base.add(0).cast::<i32>() = (id3).take_handle() as i32;
                            let vec4 = (function_id3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base.add(8).cast::<usize>() = len4;
                            *base.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = (value3).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *base.add(16).cast::<usize>() = len5;
                            *base.add(12).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    *ptr2.add(4).cast::<usize>() = len6;
                    *ptr2.add(0).cast::<*mut u8>() = result6;
                    ptr2
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_functions<T: Guest>(arg0: *mut u8) {
                    let l5 = *arg0.add(0).cast::<*mut u8>();
                    let l6 = *arg0.add(4).cast::<usize>();
                    let base7 = l5;
                    let len7 = l6;
                    for i in 0..len7 {
                        let base = base7.add(i * 20);
                        {
                            let l0 = *base.add(4).cast::<*mut u8>();
                            let l1 = *base.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                            let l2 = *base.add(12).cast::<*mut u8>();
                            let l3 = *base.add(16).cast::<usize>();
                            let base4 = l2;
                            let len4 = l3;
                            _rt::cabi_dealloc(base4, len4 * 1, 1);
                        }
                    }
                    _rt::cabi_dealloc(base7, len7 * 20, 4);
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_set_functions_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
                    let base4 = arg0;
                    let len4 = arg1;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 12);
                        let e4 = {
                            let l0 = *base.add(0).cast::<i32>();
                            let l1 = *base.add(4).cast::<*mut u8>();
                            let l2 = *base.add(8).cast::<usize>();
                            let len3 = l2;

                            FunctionInvocationResult {
                                id: OutputBorrow::lift(l0 as u32 as usize),
                                value: _rt::Vec::from_raw_parts(l1.cast(), len3, len3),
                            }
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 12, 4);
                    T::set_functions(result4);
                }
                pub trait Guest {
                    fn get_functions(source: _rt::String) -> _rt::Vec<FunctionInvocationRequest>;
                    fn set_functions(results: _rt::Vec<FunctionInvocationResult<'_>>);
                }
                #[doc(hidden)]

                macro_rules! __export_component_pulumi_wasm_function_reverse_callback_0_1_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


    #[export_name = "component:pulumi-wasm/function-reverse-callback@0.1.0#get-functions"]
    unsafe extern "C" fn export_get_functions(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_get_functions_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "cabi_post_component:pulumi-wasm/function-reverse-callback@0.1.0#get-functions"]
    unsafe extern "C" fn _post_return_get_functions(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_get_functions::<$ty>(arg0)
    }

    #[export_name = "component:pulumi-wasm/function-reverse-callback@0.1.0#set-functions"]
    unsafe extern "C" fn export_set_functions(arg0: *mut u8,arg1: usize,) {
      $($path_to_types)*::_export_set_functions_cabi::<$ty>(arg0, arg1)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_component_pulumi_wasm_function_reverse_callback_0_1_0_cabi;

                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            }
        }
    }
}
mod _rt {
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            ::core::mem::transmute::<u8, bool>(val)
        }
    }
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_pulumi_wasm_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::component::pulumi_wasm::output_interface::__export_component_pulumi_wasm_output_interface_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::component::pulumi_wasm::output_interface);
  $($path_to_types_root)*::exports::component::pulumi_wasm::register_interface::__export_component_pulumi_wasm_register_interface_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::component::pulumi_wasm::register_interface);
  $($path_to_types_root)*::exports::component::pulumi_wasm::function_reverse_callback::__export_component_pulumi_wasm_function_reverse_callback_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::component::pulumi_wasm::function_reverse_callback);
  )
}
#[doc(inline)]
pub(crate) use __export_pulumi_wasm_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.20.0:pulumi-wasm:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1212] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xba\x08\x01A\x02\x01\
A\x0b\x01B\x02\x01@\x01\x07messages\x01\0\x04\0\x03log\x01\0\x03\x01\x1fcomponen\
t:pulumi-wasm/log@0.1.0\x05\0\x01B\x05\x01@\0\0\x7f\x04\0\x0dis-in-preview\x01\0\
\x01p}\x01@\x01\x07request\x01\0\x01\x04\0\x11register-resource\x01\x02\x03\x01*\
component:pulumi-wasm/external-world@0.1.0\x05\x01\x01B\x16\x04\0\x06output\x03\x01\
\x01p}\x01i\0\x01@\x01\x05value\x01\0\x02\x04\0\x13[constructor]output\x01\x03\x01\
h\0\x01@\x02\x04self\x04\x0dfunction-names\0\x02\x04\0\x12[method]output.map\x01\
\x05\x01k\x01\x01@\x01\x04self\x04\0\x06\x04\0\x12[method]output.get\x01\x07\x01\
@\x02\x04self\x04\x05fields\0\x02\x04\0\x18[method]output.get-field\x01\x08\x01@\
\x01\x04self\x04\0s\x04\0\x17[method]output.get-type\x01\x09\x01@\x01\x04self\x04\
\0\x02\x04\0\x18[method]output.duplicate\x01\x0a\x01@\0\0s\x04\0\x10describe-out\
puts\x01\x0b\x01@\0\0\x7f\x04\0\x0fnon-done-exists\x01\x0c\x04\0\x0fcombine-outp\
uts\x01\x0c\x04\x01,component:pulumi-wasm/output-interface@0.1.0\x05\x02\x02\x03\
\0\x02\x06output\x01B\x0b\x02\x03\x02\x01\x03\x04\0\x06output\x03\0\0\x01h\x01\x01\
r\x02\x04names\x05value\x02\x04\0\x0cobject-field\x03\0\x03\x01p\x04\x01r\x03\x04\
types\x04names\x06object\x05\x04\0\x19register-resource-request\x03\0\x06\x01i\x01\
\x01@\x01\x07request\x07\0\x08\x04\0\x08register\x01\x09\x04\x01.component:pulum\
i-wasm/register-interface@0.1.0\x05\x04\x01B\x0f\x02\x03\x02\x01\x03\x04\0\x06ou\
tput\x03\0\0\x01i\x01\x01p}\x01r\x03\x02id\x02\x0bfunction-ids\x05value\x03\x04\0\
\x1bfunction-invocation-request\x03\0\x04\x01h\x01\x01r\x02\x02id\x06\x05value\x03\
\x04\0\x1afunction-invocation-result\x03\0\x07\x01p\x05\x01@\x01\x06sources\0\x09\
\x04\0\x0dget-functions\x01\x0a\x01p\x08\x01@\x01\x07results\x0b\x01\0\x04\0\x0d\
set-functions\x01\x0c\x04\x015component:pulumi-wasm/function-reverse-callback@0.\
1.0\x05\x05\x04\x01'component:pulumi-wasm/pulumi-wasm@0.1.0\x04\0\x0b\x11\x01\0\x0b\
pulumi-wasm\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.201.0\x10wit-bindgen-rust\x060.20.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
