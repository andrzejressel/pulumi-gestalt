package pulumi:{{package.name}}@{{package.version}};

world main-world {
    import component:pulumi-wasm/output-interface@0.1.0;
    import register-interface;
{{#each package.interfaces}}
    export {{name}};
{{/each}}
}

world main-world-client {
    import output-interface;
    import register-interface;
    {{#each package.interfaces}}
    import {{name}};
    {{/each}}
}

interface output-interface {

    describe-outputs: func() -> string;
    non-done-exists: func() -> bool;

    resource output {
        constructor(value: list<u8>);
        map: func(function-name: string) -> output;
        get: func() -> option<list<u8>>;
        get-field: func(field: string) -> output;
        get-type: func() -> string;
        duplicate: func() -> output;
    }
}

interface register-interface {
    use output-interface.{output};

    record object-field {
        name: string,
        value: borrow<output>
    }

    record register-resource-request {
        %type: string,
        name: string,
        object: list<object-field>,
    }

    register: func(request: register-resource-request) -> output;
}

{{#each package.interfaces}}
interface {{name}} {

    use output-interface.{output};

    record args {
        {{#each arguments}}
        {{name}}: borrow<output>,
        {{/each}}
    }

    record res {
        {{#each results}}
        {{name}}: borrow<output>,
        {{/each}}
    }

    invoke: func(args: args) -> res;

}

{{/each}}