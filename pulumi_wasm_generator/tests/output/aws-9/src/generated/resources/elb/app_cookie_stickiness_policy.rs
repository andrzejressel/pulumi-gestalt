/// Provides an application cookie stickiness policy, which allows an ELB to wed its sticky cookie's expiration to a cookie generated by your application.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let foo = app_cookie_stickiness_policy::create(
///         "foo",
///         AppCookieStickinessPolicyArgs::builder()
///             .cookie_name("MyAppCookie")
///             .lb_port(80)
///             .load_balancer("${lb.name}")
///             .name("foo_policy")
///             .build_struct(),
///     );
///     let lb = load_balancer::create(
///         "lb",
///         LoadBalancerArgs::builder()
///             .availability_zones(vec!["us-east-1a",])
///             .listeners(
///                 vec![
///                     LoadBalancerListener::builder().instancePort(8000)
///                     .instanceProtocol("http").lbPort(80).lbProtocol("http")
///                     .build_struct(),
///                 ],
///             )
///             .name("test-lb")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import application cookie stickiness policies using the ELB name, port, and policy name separated by colons (`:`). For example:
///
/// ```sh
/// $ pulumi import aws:elb/appCookieStickinessPolicy:AppCookieStickinessPolicy example my-elb:80:my-policy
/// ```
pub mod app_cookie_stickiness_policy {
    #[derive(pulumi_wasm_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct AppCookieStickinessPolicyArgs {
        /// Application cookie whose lifetime the ELB's cookie should follow.
        #[builder(into)]
        pub cookie_name: pulumi_wasm_rust::InputOrOutput<String>,
        /// Load balancer port to which the policy
        /// should be applied. This must be an active listener on the load
        /// balancer.
        #[builder(into)]
        pub lb_port: pulumi_wasm_rust::InputOrOutput<i32>,
        /// Name of load balancer to which the policy
        /// should be attached.
        #[builder(into)]
        pub load_balancer: pulumi_wasm_rust::InputOrOutput<String>,
        /// Name of the stickiness policy.
        #[builder(into, default)]
        pub name: pulumi_wasm_rust::InputOrOutput<Option<String>>,
    }
    #[allow(dead_code)]
    pub struct AppCookieStickinessPolicyResult {
        /// Application cookie whose lifetime the ELB's cookie should follow.
        pub cookie_name: pulumi_wasm_rust::Output<String>,
        /// Load balancer port to which the policy
        /// should be applied. This must be an active listener on the load
        /// balancer.
        pub lb_port: pulumi_wasm_rust::Output<i32>,
        /// Name of load balancer to which the policy
        /// should be attached.
        pub load_balancer: pulumi_wasm_rust::Output<String>,
        /// Name of the stickiness policy.
        pub name: pulumi_wasm_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_wasm_rust::PulumiContext,
        name: &str,
        args: AppCookieStickinessPolicyArgs,
    ) -> AppCookieStickinessPolicyResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let cookie_name_binding = args.cookie_name.get_output(context).get_inner();
        let lb_port_binding = args.lb_port.get_output(context).get_inner();
        let load_balancer_binding = args.load_balancer.get_output(context).get_inner();
        let name_binding = args.name.get_output(context).get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "aws:elb/appCookieStickinessPolicy:AppCookieStickinessPolicy".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "cookieName".into(),
                    value: &cookie_name_binding,
                },
                register_interface::ObjectField {
                    name: "lbPort".into(),
                    value: &lb_port_binding,
                },
                register_interface::ObjectField {
                    name: "loadBalancer".into(),
                    value: &load_balancer_binding,
                },
                register_interface::ObjectField {
                    name: "name".into(),
                    value: &name_binding,
                },
            ]),
            results: Vec::from([
                register_interface::ResultField {
                    name: "cookieName".into(),
                },
                register_interface::ResultField {
                    name: "lbPort".into(),
                },
                register_interface::ResultField {
                    name: "loadBalancer".into(),
                },
                register_interface::ResultField {
                    name: "name".into(),
                },
            ]),
        };
        let o = register_interface::register(context.get_inner(), &request);
        let mut hashmap: HashMap<String, _> = o
            .fields
            .into_iter()
            .map(|f| (f.name, f.output))
            .collect();
        AppCookieStickinessPolicyResult {
            cookie_name: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("cookieName").unwrap(),
            ),
            lb_port: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("lbPort").unwrap(),
            ),
            load_balancer: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("loadBalancer").unwrap(),
            ),
            name: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("name").unwrap(),
            ),
        }
    }
}
