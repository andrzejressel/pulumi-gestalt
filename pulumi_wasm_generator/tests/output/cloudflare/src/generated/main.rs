/// Provides a Cloudflare Access Application resource. Access
/// Applications are used to restrict access to a whole application using an
/// authorisation gateway managed by Cloudflare.
///
/// > It's required that an `account_id` or `zone_id` is provided and in
///    most cases using either is fine. However, if you're using a scoped
///    access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com"
///    zone needs to use the `zone_id` argument.
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/accessApplication:AccessApplication example <account_id>/<application_id>
/// ```
///
pub mod access_application {
    include!("resources/access_application.rs");
}
/// Cloudflare Access can replace traditional SSH key models with
/// short-lived certificates issued to your users based on the token
/// generated by their Access login.
///
/// > It's required that an `account_id` or `zone_id` is provided and in
///    most cases using either is fine. However, if you're using a scoped
///    access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com"
///    zone needs to use the `zone_id` argument.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let anotherExample = access_ca_certificate::create(
///         "anotherExample",
///         AccessCaCertificateArgs::builder()
///             .application_id("fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let example = access_ca_certificate::create(
///         "example",
///         AccessCaCertificateArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .application_id("6cd6cea3-3ef2-4542-9aea-85a0bbcd5414")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Account level CA certificate import.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessCaCertificate:AccessCaCertificate example account/<account_id>/<application_id>
/// ```
///
/// Zone level CA certificate import.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessCaCertificate:AccessCaCertificate example account/<zone_id>/<application_id>
/// ```
///
pub mod access_ca_certificate {
    include!("resources/access_ca_certificate.rs");
}
/// Provides a resource to customize the pages your end users will see
/// when trying to reach applications behind Cloudflare Access.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = access_custom_page::create(
///         "example",
///         AccessCustomPageArgs::builder()
///             .custom_html("<html><body><h1>Forbidden</h1></body></html>")
///             .name("example")
///             .type_("forbidden")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod access_custom_page {
    include!("resources/access_custom_page.rs");
}
/// Provides a Cloudflare Access Group resource. Access Groups are used
/// in conjunction with Access Policies to restrict access to a
/// particular resource based on group membership.
///
/// > It's required that an `account_id` or `zone_id` is provided and in
///    most cases using either is fine. However, if you're using a scoped
///    access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com"
///    zone needs to use the `zone_id` argument.
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/accessGroup:AccessGroup example <account_id>/<group_id>
/// ```
///
pub mod access_group {
    include!("resources/access_group.rs");
}
/// Provides a Cloudflare Access Identity Provider resource. Identity
/// Providers are used as an authentication or authorisation source
/// within Access.
///
/// > It's required that an `account_id` or `zone_id` is provided and in
///    most cases using either is fine. However, if you're using a scoped
///    access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com"
///    zone needs to use the `zone_id` argument.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let githubOauth = access_identity_provider::create(
///         "githubOauth",
///         AccessIdentityProviderArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .configs(
///                 vec![
///                     AccessIdentityProviderConfig::builder().clientId("example")
///                     .clientSecret("secret_key").build_struct(),
///                 ],
///             )
///             .name("GitHub OAuth")
///             .type_("github")
///             .build_struct(),
///     );
///     let jumpcloudSaml = access_identity_provider::create(
///         "jumpcloudSaml",
///         AccessIdentityProviderArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .configs(
///                 vec![
///                     AccessIdentityProviderConfig::builder().attributes(vec!["email",
///                     "username",])
///                     .idpPublicCert("MIIDpDCCAoygAwIBAgIGAV2ka+55MA0GCSqGSIb3DQEBCwUAMIGSMQswCQ...GF/Q2/MHadws97cZg\nuTnQyuOqPuHbnN83d/2l1NSYKCbHt24o")
///                     .issuerUrl("jumpcloud").signRequest(false)
///                     .ssoTargetUrl("https://sso.myexample.jumpcloud.com/saml2/cloudflareaccess")
///                     .build_struct(),
///                 ],
///             )
///             .name("JumpCloud SAML")
///             .type_("saml")
///             .build_struct(),
///     );
///     let okta = access_identity_provider::create(
///         "okta",
///         AccessIdentityProviderArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .configs(
///                 vec![
///                     AccessIdentityProviderConfig::builder().apiToken("okta_api_token")
///                     .clientId("example").clientSecret("secret_key")
///                     .oktaAccount("https://example.com").build_struct(),
///                 ],
///             )
///             .name("Okta")
///             .type_("okta")
///             .build_struct(),
///     );
///     let pinLogin = access_identity_provider::create(
///         "pinLogin",
///         AccessIdentityProviderArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .name("PIN login")
///             .type_("onetimepin")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/accessIdentityProvider:AccessIdentityProvider example <account_id>/<identity_provider_id>
/// ```
///
pub mod access_identity_provider {
    include!("resources/access_identity_provider.rs");
}
/// Access Keys Configuration defines the rotation policy for the keys
/// that access will use to sign data.
pub mod access_keys_configuration {
    include!("resources/access_keys_configuration.rs");
}
/// Provides a Cloudflare Access Mutual TLS Certificate resource.
/// Mutual TLS authentication ensures that the traffic is secure and
/// trusted in both directions between a client and server and can be
///  used with Access to only allows requests from devices with a
///  corresponding client certificate.
///
/// > It's required that an `account_id` or `zone_id` is provided and in
///    most cases using either is fine. However, if you're using a scoped
///    access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com"
///    zone needs to use the `zone_id` argument.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let myCert = access_mutual_tls_certificate::create(
///         "myCert",
///         AccessMutualTlsCertificateArgs::builder()
///             .associated_hostnames(vec!["staging.example.com",])
///             .certificate("${caPem}")
///             .name("My Root Cert")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Account level import.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate example account/<account_id>/<mutual_tls_certificate_id>
/// ```
///
/// Zone level import.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate example zone/<zone_id>/<mutual_tls_certificate_id>
/// ```
///
pub mod access_mutual_tls_certificate {
    include!("resources/access_mutual_tls_certificate.rs");
}
/// Provides a Cloudflare Access Mutual TLS Certificate Settings resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = access_mutual_tls_hostname_settings::create(
///         "example",
///         AccessMutualTlsHostnameSettingsArgs::builder()
///             .settings(
///                 vec![
///                     AccessMutualTlsHostnameSettingsSetting::builder().chinaNetwork(false)
///                     .clientCertificateForwarding(true).hostname("example.com")
///                     .build_struct(),
///                 ],
///             )
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Account level mTLS hostname settings import.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings example account/<account_id>
/// ```
///
/// Zone level mTLS hostname settings import.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings example zone/<zone_id>
/// ```
///
pub mod access_mutual_tls_hostname_settings {
    include!("resources/access_mutual_tls_hostname_settings.rs");
}
/// A Zero Trust organization defines the user login experience.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = access_organization::create(
///         "example",
///         AccessOrganizationArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .auth_domain("example.cloudflareaccess.com")
///             .auto_redirect_to_identity(false)
///             .is_ui_read_only(false)
///             .login_designs(
///                 vec![
///                     AccessOrganizationLoginDesign::builder().backgroundColor("#ffffff")
///                     .footerText("My footer text").headerText("My header text")
///                     .logoPath("https://example.com/logo.png").textColor("#000000")
///                     .build_struct(),
///                 ],
///             )
///             .name("example.cloudflareaccess.com")
///             .user_seat_expiration_inactive_time("720h")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/accessOrganization:AccessOrganization example <account_id>
/// ```
///
pub mod access_organization {
    include!("resources/access_organization.rs");
}
/// Provides a Cloudflare Access Policy resource. Access Policies are
/// used in conjunction with Access Applications to restrict access to
/// a particular resource.
///
/// > It's required that an `account_id` or `zone_id` is provided and in most cases using either is fine.
///    However, if you're using a scoped access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com" zone needs to use the `zone_id` argument.
///    If 'application_id' is omitted, the policy created can be reused by multiple access applications.
///    Any cloudflare.AccessApplication resource can reference reusable policies through its `policies` argument.
///    To destroy a reusable policy and remove it from all applications' policies lists on the same apply, preemptively set the
///    lifecycle option `create_before_destroy` to true on the 'cloudflare_access_policy' resource.
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/accessPolicy:AccessPolicy example account/<account_id>/<application_id>/<policy_id>
/// ```
///
pub mod access_policy {
    include!("resources/access_policy.rs");
}
/// Provides a Cloudflare IP Firewall Access Rule resource. Access
/// control can be applied on basis of IP addresses, IP ranges, AS
/// numbers or countries.
///
/// ## Example Usage
///
/// ```yaml
/// configuration:
///   # Allowlist office's network IP ranges on all account zones (or other lists of
///   # resources).
///   myOffice:
///     type: list(string)
///     default:
///       - 192.0.2.0/24
///       - 198.51.100.0/24
///       - 2001:db8::/56
/// resources:
///   # Challenge requests coming from known Tor exit nodes.
///   torExitNodes:
///     type: cloudflare:AccessRule
///     name: tor_exit_nodes
///     properties:
///       zoneId: 0da42c8d2132a9ddaf714f9e7c920711
///       notes: Requests coming from known Tor exit nodes
///       mode: challenge
///       configuration:
///         target: country
///         value: T1
///   # Allowlist requests coming from Antarctica, but only for single zone.
///   antarctica:
///     type: cloudflare:AccessRule
///     properties:
///       zoneId: 0da42c8d2132a9ddaf714f9e7c920711
///       notes: Requests coming from Antarctica
///       mode: whitelist
///       configuration:
///         target: country
///         value: AQ
///   officeNetwork:
///     type: cloudflare:AccessRule
///     name: office_network
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       notes: Requests coming from office network
///       mode: whitelist
///       configuration:
///         target: ip_range
///         value:
///           fn::select:
///             - ${range.value}
///             - ${myOffice}
///     options: {}
/// ```
///
/// ## Import
///
/// User level access rule import.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessRule:AccessRule default user/<user_id>/<rule_id>
/// ```
///
/// Zone level access rule import.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessRule:AccessRule default zone/<zone_id>/<rule_id>
/// ```
///
/// Account level access rule import.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessRule:AccessRule default account/<account_id>/<rule_id>
/// ```
///
pub mod access_rule {
    include!("resources/access_rule.rs");
}
/// Access Service Tokens are used for service-to-service communication
/// when an application is behind Cloudflare Access.
///
/// ## Import
///
/// If you are importing an Access Service Token you will not have the
///
/// client_secret available in the state for use. The client_secret is only
///
/// available once, at creation. In most cases, it is better to just create a new
///
/// resource should you need to reference it in other resources.
///
/// ```sh
/// $ pulumi import cloudflare:index/accessServiceToken:AccessServiceToken example <account_id>/<service_token_id>
/// ```
///
pub mod access_service_token {
    include!("resources/access_service_token.rs");
}
/// Provides a resource to customize the pages your end users will see
/// when trying to reach applications behind Cloudflare Access.
pub mod access_tag {
    include!("resources/access_tag.rs");
}
/// Provides a Cloudflare Account resource. Account is the basic resource for
/// working with Cloudflare zones, teams and users.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = account::create(
///         "example",
///         AccountArgs::builder()
///             .enforce_twofactor(true)
///             .name("some-enterprise-account")
///             .type_("enterprise")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/account:Account example <account_id>
/// ```
///
pub mod account {
    include!("resources/account.rs");
}
/// Provides a resource which manages Cloudflare account members.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = account_member::create(
///         "example",
///         AccountMemberArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .email_address("user@example.com")
///             .role_ids(
///                 vec![
///                     "68b329da9893e34099c7d8ad5cb9c940",
///                     "d784fa8b6d98d27699781bd9a7cf19f0",
///                 ],
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/accountMember:AccountMember example <account_id>/<member_id>
/// ```
///
pub mod account_member {
    include!("resources/account_member.rs");
}
/// Provides the ability to manage IP addresses that can be used by DNS records when
/// they are proxied through Cloudflare.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = address_map::create(
///         "example",
///         AddressMapArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .default_sni("*.example.com")
///             .description("My address map")
///             .enabled(true)
///             .ips(
///                 vec![
///                     AddressMapIp::builder().ip("192.0.2.1").build_struct(),
///                     AddressMapIp::builder().ip("203.0.113.1").build_struct(),
///                 ],
///             )
///             .memberships(
///                 vec![
///                     AddressMapMembership::builder()
///                     .identifier("92f17202ed8bd63d69a66b86a49a8f6b").kind("account")
///                     .build_struct(), AddressMapMembership::builder()
///                     .identifier("023e105f4ecef8ad9ca31a8372d0c353").kind("zone")
///                     .build_struct(),
///                 ],
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/addressMap:AddressMap example <account_id>/<address_map_id>
/// ```
///
pub mod address_map {
    include!("resources/address_map.rs");
}
/// Provides a resource to manage API Shield configurations.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = api_shield::create(
///         "example",
///         ApiShieldArgs::builder()
///             .auth_id_characteristics(
///                 vec![
///                     ApiShieldAuthIdCharacteristic::builder().name("my-example-header").
///                     type ("header").build_struct(),
///                 ],
///             )
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod api_shield {
    include!("resources/api_shield.rs");
}
/// Provides a resource to manage an operation in API Shield Endpoint Management.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = api_shield_operation::create(
///         "example",
///         ApiShieldOperationArgs::builder()
///             .endpoint("/path")
///             .host("api.example.com")
///             .method("GET")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod api_shield_operation {
    include!("resources/api_shield_operation.rs");
}
/// Provides a resource to manage operation-level settings in API Shield Schema Validation 2.0.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = api_shield_operation::create(
///         "example",
///         ApiShieldOperationArgs::builder()
///             .endpoint("/path")
///             .host("api.example.com")
///             .method("GET")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let exampleApiShieldOperationSchemaValidationSettings = api_shield_operation_schema_validation_settings::create(
///         "exampleApiShieldOperationSchemaValidationSettings",
///         ApiShieldOperationSchemaValidationSettingsArgs::builder()
///             .mitigation_action("block")
///             .operation_id("${example.id}")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod api_shield_operation_schema_validation_settings {
    include!("resources/api_shield_operation_schema_validation_settings.rs");
}
/// Provides a resource to manage a schema in API Shield Schema Validation 2.0.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   petstoreSchema:
///     type: cloudflare:ApiShieldSchema
///     name: petstore_schema
///     properties:
///       zoneId: 0da42c8d2132a9ddaf714f9e7c920711
///       name: myschema
///       kind: openapi_v3
///       validationEnabled: true # optional, default false
///       source:
///         fn::invoke:
///           Function: std:file
///           Arguments:
///             input: ./schemas/petstore.json
///           Return: result
/// ```
pub mod api_shield_schema {
    include!("resources/api_shield_schema.rs");
}
/// Provides a resource to manage settings in API Shield Schema Validation 2.0.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = api_shield_schema_validation_settings::create(
///         "example",
///         ApiShieldSchemaValidationSettingsArgs::builder()
///             .validation_default_mitigation_action("log")
///             .validation_override_mitigation_action("none")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod api_shield_schema_validation_settings {
    include!("resources/api_shield_schema_validation_settings.rs");
}
/// Provides a resource which manages Cloudflare API tokens.
///
/// Read more about permission groups and their applicable scopes in the
/// [developer documentation](https://developers.cloudflare.com/api/tokens/create/permissions).
///
pub mod api_token {
    include!("resources/api_token.rs");
}
/// Cloudflare Argo controls the routing to your origin and tiered
/// caching options to speed up your website browsing experience.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = argo::create(
///         "example",
///         ArgoArgs::builder()
///             .smart_routing("on")
///             .tiered_caching("on")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/argo:Argo example <zone_id>
/// ```
///
pub mod argo {
    include!("resources/argo.rs");
}
/// Provides a Cloudflare Authenticated Origin Pulls resource. A `cloudflare.AuthenticatedOriginPulls`
/// resource is required to use Per-Zone or Per-Hostname Authenticated
/// Origin Pulls.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let myAop = authenticated_origin_pulls::create(
///         "myAop",
///         AuthenticatedOriginPullsArgs::builder()
///             .enabled(true)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let myPerHostnameAop = authenticated_origin_pulls::create(
///         "myPerHostnameAop",
///         AuthenticatedOriginPullsArgs::builder()
///             .authenticated_origin_pulls_certificate("${myPerHostnameAopCert.id}")
///             .enabled(true)
///             .hostname("aop.example.com")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let myPerHostnameAopCert = authenticated_origin_pulls_certificate::create(
///         "myPerHostnameAopCert",
///         AuthenticatedOriginPullsCertificateArgs::builder()
///             .certificate("-----INSERT CERTIFICATE-----")
///             .private_key("-----INSERT PRIVATE KEY-----")
///             .type_("per-hostname")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let myPerZoneAop = authenticated_origin_pulls::create(
///         "myPerZoneAop",
///         AuthenticatedOriginPullsArgs::builder()
///             .authenticated_origin_pulls_certificate("${myPerZoneAopCert.id}")
///             .enabled(true)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let myPerZoneAopCert = authenticated_origin_pulls_certificate::create(
///         "myPerZoneAopCert",
///         AuthenticatedOriginPullsCertificateArgs::builder()
///             .certificate("-----INSERT CERTIFICATE-----")
///             .private_key("-----INSERT PRIVATE KEY-----")
///             .type_("per-zone")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// global
///
/// ```sh
/// $ pulumi import cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls example <zone_id>
/// ```
///
/// per zone
///
/// ```sh
/// $ pulumi import cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls example <zone_id>/<certificate_id>
/// ```
///
/// per hostname
///
/// ```sh
/// $ pulumi import cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls example <zone_id>/<certificate_id>/<hostname>
/// ```
///
pub mod authenticated_origin_pulls {
    include!("resources/authenticated_origin_pulls.rs");
}
/// Provides a Cloudflare Authenticated Origin Pulls certificate
/// resource. An uploaded client certificate is required to use Per-Zone
///  or Per-Hostname Authenticated Origin Pulls.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let myPerHostnameAopCert = authenticated_origin_pulls_certificate::create(
///         "myPerHostnameAopCert",
///         AuthenticatedOriginPullsCertificateArgs::builder()
///             .certificate("-----INSERT CERTIFICATE-----")
///             .private_key("-----INSERT PRIVATE KEY-----")
///             .type_("per-hostname")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let myPerZoneAopCert = authenticated_origin_pulls_certificate::create(
///         "myPerZoneAopCert",
///         AuthenticatedOriginPullsCertificateArgs::builder()
///             .certificate("-----INSERT CERTIFICATE-----")
///             .private_key("-----INSERT PRIVATE KEY-----")
///             .type_("per-zone")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/authenticatedOriginPullsCertificate:AuthenticatedOriginPullsCertificate example <zone_id>/<certificate_type>/<certificate_id>
/// ```
///
pub mod authenticated_origin_pulls_certificate {
    include!("resources/authenticated_origin_pulls_certificate.rs");
}
/// Provides a resource to configure Bot Management.
///
/// Specifically, this resource can be used to manage:
///
/// - **Bot Fight Mode**
/// - **Super Bot Fight Mode**
/// - **Bot Management for Enterprise**
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = bot_management::create(
///         "example",
///         BotManagementArgs::builder()
///             .enable_js(true)
///             .optimize_wordpress(true)
///             .sbfm_definitely_automated("block")
///             .sbfm_likely_automated("managed_challenge")
///             .sbfm_static_resource_protection(false)
///             .sbfm_verified_bots("allow")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/botManagement:BotManagement example <zone_id>
/// ```
///
pub mod bot_management {
    include!("resources/bot_management.rs");
}
/// Provides the ability to manage Bring-Your-Own-IP prefixes (BYOIP)
/// which are used with or without Magic Transit.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = byo_ip_prefix::create(
///         "example",
///         ByoIpPrefixArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .advertisement("on")
///             .description("Example IP Prefix")
///             .prefix_id("d41d8cd98f00b204e9800998ecf8427e")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/byoIpPrefix:ByoIpPrefix example <account_id>/<prefix_id>
/// ```
///
pub mod byo_ip_prefix {
    include!("resources/byo_ip_prefix.rs");
}
/// ## Example Usage
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/certificatePack:CertificatePack example <zone_id>/<certificate_pack_id>
/// ```
///
/// While supported, importing isn't recommended and it is advised to replace the
///
/// certificate entirely instead.
///
pub mod certificate_pack {
    include!("resources/certificate_pack.rs");
}
/// The Cloud Connector Rules resource allows you to create and manage cloud connector rules for a zone.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: cloudflare:CloudConnectorRules
///     properties:
///       zoneId: 0da42c8d2132a9ddaf714f9e7c920711
///       rules:
///         - description: connect aws bucket
///           enabled: true
///           expression: http.uri
///           provider: aws_s3
///           parameters:
///             - host: mystorage.s3.ams.amazonaws.com
/// ```
pub mod cloud_connector_rules {
    include!("resources/cloud_connector_rules.rs");
}
/// Provides a Cloudflare custom hostname (also known as SSL for SaaS) resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = custom_hostname::create(
///         "example",
///         CustomHostnameArgs::builder()
///             .hostname("hostname.example.com")
///             .ssls(vec![CustomHostnameSsl::builder().method("txt").build_struct(),])
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/customHostname:CustomHostname example 1d5fdc9e88c8a8c4518b068cd94331fe/0d89c70d-ad9f-4843-b99f-6cc0252067e9
/// ```
///
pub mod custom_hostname {
    include!("resources/custom_hostname.rs");
}
/// Provides a Cloudflare custom hostname fallback origin resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = custom_hostname_fallback_origin::create(
///         "example",
///         CustomHostnameFallbackOriginArgs::builder()
///             .origin("fallback.example.com")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/customHostnameFallbackOrigin:CustomHostnameFallbackOrigin example <zone_id>/<fallback_hostname>
/// ```
///
pub mod custom_hostname_fallback_origin {
    include!("resources/custom_hostname_fallback_origin.rs");
}
/// Provides a resource which manages Cloudflare custom error pages.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = custom_pages::create(
///         "example",
///         CustomPagesArgs::builder()
///             .state("customized")
///             .type_("basic_challenge")
///             .url("https://example.com/challenge.html")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/customPages:CustomPages example <resource_level>/<resource_id>/<custom_page_type>
/// ```
///
pub mod custom_pages {
    include!("resources/custom_pages.rs");
}
/// Provides a Cloudflare custom SSL resource.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: cloudflare:CustomSsl
///     properties:
///       zoneId: 0da42c8d2132a9ddaf714f9e7c920711
///       customSslOptions:
///         certificate: '-----INSERT CERTIFICATE-----'
///         privateKey: '-----INSERT PRIVATE KEY-----'
///         bundleMethod: ubiquitous
///         geoRestrictions: us
///         type: legacy_custom
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/customSsl:CustomSsl example <zone_id>/<certificate_id>
/// ```
///
pub mod custom_ssl {
    include!("resources/custom_ssl.rs");
}
/// The [D1 Database](https://developers.cloudflare.com/d1/) resource allows you to manage Cloudflare D1 databases.
///
/// !> When a D1 Database is replaced all the data is lost. Please ensure you have a
///    backup of your data before replacing a D1 Database.
///
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = d_1_database::create(
///         "example",
///         D1DatabaseArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .name("terraform-database")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/d1Database:D1Database example <account id>/<database id>
/// ```
///
pub mod d_1_database {
    include!("resources/d_1_database.rs");
}
/// Provides a Cloudflare Device Dex Test resource. Device Dex Tests allow for building location-aware device settings policies.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = device_dex_test::create(
///         "example",
///         DeviceDexTestArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .data(
///                 DeviceDexTestData::builder()
///                     .host("https://example.com/home")
///                     .kind("http")
///                     .method("GET")
///                     .build_struct(),
///             )
///             .description("Send a HTTP GET request to the home endpoint every half hour.")
///             .enabled(true)
///             .interval("0h30m0s")
///             .name("GET homepage")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/deviceDexTest:DeviceDexTest example <account_id>/<device_dex_test_id>
/// ```
///
pub mod device_dex_test {
    include!("resources/device_dex_test.rs");
}
/// Provides a Cloudflare Device Managed Network resource. Device managed networks allow for building location-aware device settings policies.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let managedNetworks = device_managed_networks::create(
///         "managedNetworks",
///         DeviceManagedNetworksArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .config(
///                 DeviceManagedNetworksConfig::builder()
///                     .sha256(
///                         "b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c",
///                     )
///                     .tlsSockaddr("foobar:1234")
///                     .build_struct(),
///             )
///             .name("managed-network-1")
///             .type_("tls")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks example <account_id>/<device_managed_networks_id>
/// ```
///
pub mod device_managed_networks {
    include!("resources/device_managed_networks.rs");
}
/// Provides a Cloudflare device policy certificates resource. Device
/// policy certificate resources enable client device certificate
/// generation.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = device_policy_certificates::create(
///         "example",
///         DevicePolicyCertificatesArgs::builder()
///             .enabled(true)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/devicePolicyCertificates:DevicePolicyCertificates example <zone_id>
/// ```
///
pub mod device_policy_certificates {
    include!("resources/device_policy_certificates.rs");
}
/// Provides a Cloudflare Device Posture Integration resource. Device
/// posture integrations configure third-party data providers for device
/// posture rules.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = device_posture_integration::create(
///         "example",
///         DevicePostureIntegrationArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .configs(
///                 vec![
///                     DevicePostureIntegrationConfig::builder()
///                     .apiUrl("https://example.com/api")
///                     .authUrl("https://example.com/connect/token").clientId("client-id")
///                     .clientSecret("client-secret").build_struct(),
///                 ],
///             )
///             .interval("24h")
///             .name("Device posture integration")
///             .type_("workspace_one")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/devicePostureIntegration:DevicePostureIntegration example <account_id>/<device_posture_integration_id>
/// ```
///
pub mod device_posture_integration {
    include!("resources/device_posture_integration.rs");
}
/// Provides a Cloudflare Device Posture Rule resource. Device posture rules configure security policies for device posture checks.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let eaxmple = device_posture_rule::create(
///         "eaxmple",
///         DevicePostureRuleArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .description("Device posture rule for corporate devices.")
///             .expiration("24h")
///             .inputs(
///                 vec![
///                     DevicePostureRuleInput::builder().id("${corporateDevices.id}")
///                     .operator("<").osDistroName("ubuntu").osDistroRevision("1.0.0")
///                     .osVersionExtra("(a)").version("1.0.0").build_struct(),
///                 ],
///             )
///             .matches(
///                 vec![DevicePostureRuleMatch::builder().platform("linux").build_struct(),],
///             )
///             .name("Corporate devices posture rule")
///             .schedule("24h")
///             .type_("os_version")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/devicePostureRule:DevicePostureRule example <account_id>/<device_posture_rule_id>
/// ```
///
pub mod device_posture_rule {
    include!("resources/device_posture_rule.rs");
}
/// Provides a Cloudflare Device Settings Policy resource. Device policies configure settings applied to WARP devices.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let developerWarpPolicy = device_settings_policy::create(
///         "developerWarpPolicy",
///         DeviceSettingsPolicyArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .allow_mode_switch(true)
///             .allow_updates(true)
///             .allowed_to_leave(true)
///             .auto_connect(0)
///             .captive_portal(5)
///             .default(false)
///             .description("Developers WARP settings policy description")
///             .disable_auto_fallback(true)
///             .enabled(true)
///             .exclude_office_ips(false)
///             .match_("any(identity.groups.name[*] in {\"Developers\"})")
///             .name("Developers WARP settings policy")
///             .precedence(10)
///             .service_mode_v_2_mode("warp")
///             .service_mode_v_2_port(3000)
///             .support_url("https://cloudflare.com")
///             .switch_locked(true)
///             .tunnel_protocol("wireguard")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// For default device settings policies you must use "default" as the policy ID.
///
/// ```sh
/// $ pulumi import cloudflare:index/deviceSettingsPolicy:DeviceSettingsPolicy example <account_id>/<device_policy_id>
/// ```
///
pub mod device_settings_policy {
    include!("resources/device_settings_policy.rs");
}
/// Provides a Cloudflare DLP Profile resource. Data Loss Prevention profiles
/// are a set of entries that can be matched in HTTP bodies or files.
/// They are referenced in Zero Trust Gateway rules.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let creds = dlp_profile::create(
///         "creds",
///         DlpProfileArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .allowed_match_count(3)
///             .entries(
///                 vec![
///                     DlpProfileEntry::builder().enabled(true)
///                     .id("d8fcfc9c-773c-405e-8426-21ecbb67ba93")
///                     .name("Amazon AWS Access Key ID").build_struct(),
///                     DlpProfileEntry::builder().enabled(false)
///                     .id("2c0e33e1-71da-40c8-aad3-32e674ad3d96")
///                     .name("Amazon AWS Secret Access Key").build_struct(),
///                     DlpProfileEntry::builder().enabled(true)
///                     .id("4e92c006-3802-4dff-bbe1-8e1513b1c92a")
///                     .name("Microsoft Azure Client Secret").build_struct(),
///                     DlpProfileEntry::builder().enabled(false)
///                     .id("5c713294-2375-4904-abcf-e4a15be4d592").name("SSH Private Key")
///                     .build_struct(), DlpProfileEntry::builder().enabled(true)
///                     .id("6c6579e4-d832-42d5-905c-8e53340930f2")
///                     .name("Google GCP API Key").build_struct(),
///                 ],
///             )
///             .name("Credentials and Secrets")
///             .type_("predefined")
///             .build_struct(),
///     );
///     let exampleCustom = dlp_profile::create(
///         "exampleCustom",
///         DlpProfileArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .allowed_match_count(0)
///             .description("A profile with example entries")
///             .entries(
///                 vec![
///                     DlpProfileEntry::builder().enabled(true)
///                     .name("Matches visa credit cards")
///                     .pattern(DlpProfileEntryPattern::builder()
///                     .regex("4\\d{3}([-\\. ])?\\d{4}([-\\. ])?\\d{4}([-\\. ])?\\d{4}")
///                     .validation("luhn").build_struct()).build_struct(),
///                     DlpProfileEntry::builder().enabled(true)
///                     .name("Matches diners club card")
///                     .pattern(DlpProfileEntryPattern::builder()
///                     .regex("(?:0[0-5]|[68][0-9])[0-9]{11}").validation("luhn")
///                     .build_struct()).build_struct(),
///                 ],
///             )
///             .name("Example Custom Profile")
///             .type_("custom")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/dlpProfile:DlpProfile example <account_id>/<dlp_profile_id>
/// ```
///
pub mod dlp_profile {
    include!("resources/dlp_profile.rs");
}
/// The [Email Routing Address](https://developers.cloudflare.com/email-routing/setup/email-routing-addresses/#destination-addresses) resource allows you to manage Cloudflare Email Routing Destination Addresses.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = email_routing_address::create(
///         "example",
///         EmailRoutingAddressArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .email("user@example.com")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/emailRoutingAddress:EmailRoutingAddress example <account_id>/<email_routing_id>
/// ```
///
pub mod email_routing_address {
    include!("resources/email_routing_address.rs");
}
/// Provides a resource for managing Email Routing Addresses catch all behaviour.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = email_routing_catch_all::create(
///         "example",
///         EmailRoutingCatchAllArgs::builder()
///             .actions(
///                 vec![
///                     EmailRoutingCatchAllAction::builder(). type ("forward")
///                     .values(vec!["destinationaddress@example.net",]).build_struct(),
///                 ],
///             )
///             .enabled(true)
///             .matchers(
///                 vec![
///                     EmailRoutingCatchAllMatcher::builder(). type ("all").build_struct(),
///                 ],
///             )
///             .name("example catch all")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod email_routing_catch_all {
    include!("resources/email_routing_catch_all.rs");
}
/// The [Email Routing Rule](https://developers.cloudflare.com/email-routing/setup/email-routing-addresses/#email-rule-actions) resource allows you to create and manage email routing rules for a zone.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let main = email_routing_rule::create(
///         "main",
///         EmailRoutingRuleArgs::builder()
///             .actions(
///                 vec![
///                     EmailRoutingRuleAction::builder(). type ("forward")
///                     .values(vec!["destinationaddress@example.net",]).build_struct(),
///                 ],
///             )
///             .enabled(true)
///             .matchers(
///                 vec![
///                     EmailRoutingRuleMatcher::builder().field("to"). type ("literal")
///                     .value("test@example.com").build_struct(),
///                 ],
///             )
///             .name("terraform rule")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/emailRoutingRule:EmailRoutingRule example <zone_id>/<email_routing_rule_id>
/// ```
///
pub mod email_routing_rule {
    include!("resources/email_routing_rule.rs");
}
/// Provides a resource for managing Email Routing settings.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   myZone:
///     type: cloudflare:EmailRoutingSettings
///     name: my_zone
///     properties:
///       zoneId: 0da42c8d2132a9ddaf714f9e7c920711
///       enabled: 'true'
/// ```
pub mod email_routing_settings {
    include!("resources/email_routing_settings.rs");
}
/// Provides a Cloudflare Fallback Domain resource. Fallback domains are
/// used to ignore DNS requests to a given list of domains. These DNS
/// requests will be passed back to other DNS servers configured on
/// existing network interfaces on the device.
///
/// ## Import
///
/// Fallback Domains for default device policies must use "default" as the policy ID.
///
/// ```sh
/// $ pulumi import cloudflare:index/fallbackDomain:FallbackDomain example <account_id>/<policy_id>
/// ```
///
pub mod fallback_domain {
    include!("resources/fallback_domain.rs");
}
/// Filter expressions that can be referenced across multiple features,
/// e.g. Firewall Rules. See [what is a filter](https://developers.cloudflare.com/firewall/api/cf-filters/what-is-a-filter/)
/// for more details and available fields and operators.
///
/// > `cloudflare.Filter` is in a deprecation phase until January 15th, 2025.
///   During this time period, this resource is still fully
///   supported but you are strongly advised to move to the
///   `cloudflare.Ruleset` resource. Full details can be found in the
///   developer documentation.
///
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let wordpress = filter::create(
///         "wordpress",
///         FilterArgs::builder()
///             .description("Wordpress break-in attempts that are outside of the office")
///             .expression(
///                 "(http.request.uri.path ~ \".*wp-login.php\" or http.request.uri.path ~ \".*xmlrpc.php\") and ip.src ne 192.0.2.1",
///             )
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/filter:Filter example <zone_id>/<filter_id>
/// ```
///
pub mod filter {
    include!("resources/filter.rs");
}
/// Define Firewall rules using filter expressions for more control over
/// how traffic is matched to the rule. A filter expression permits
/// selecting traffic by multiple criteria allowing greater freedom in
/// rule creation.
///
/// Filter expressions needs to be created first before using Firewall
/// Rule.
///
/// > `cloudflare.FirewallRule` is in a deprecation phase until January 15th, 2025.
///   During this time period, this resource is still
///   fully supported but you are strongly advised  to move to the
///   `cloudflare.Ruleset` resource. Full details can be found in the
///   developer documentation.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let wordpress = filter::create(
///         "wordpress",
///         FilterArgs::builder()
///             .description("Wordpress break-in attempts that are outside of the office")
///             .expression(
///                 "(http.request.uri.path ~ \".*wp-login.php\" or http.request.uri.path ~ \".*xmlrpc.php\") and ip.src ne 192.0.2.1",
///             )
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let wordpressFirewallRule = firewall_rule::create(
///         "wordpressFirewallRule",
///         FirewallRuleArgs::builder()
///             .action("block")
///             .description("Block wordpress break-in attempts")
///             .filter_id("${wordpress.id}")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/firewallRule:FirewallRule example <zone_id>/<firewall_rule_id>
/// ```
///
pub mod firewall_rule {
    include!("resources/firewall_rule.rs");
}
/// Provides a resource, that manages GRE tunnels for Magic Transit.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = gre_tunnel::create(
///         "example",
///         GreTunnelArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .cloudflare_gre_endpoint("203.0.113.2")
///             .customer_gre_endpoint("203.0.113.1")
///             .description("Tunnel for ISP X")
///             .health_check_enabled(true)
///             .health_check_target("203.0.113.1")
///             .health_check_type("reply")
///             .interface_address("192.0.2.0/31")
///             .mtu(1476)
///             .name("GRE_1")
///             .ttl(64)
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/greTunnel:GreTunnel example <account_id>/<tunnel_id>
/// ```
///
pub mod gre_tunnel {
    include!("resources/gre_tunnel.rs");
}
/// Standalone Health Checks provide a way to monitor origin servers
/// without needing a Cloudflare Load Balancer.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let httpHealthCheck = healthcheck::create(
///         "httpHealthCheck",
///         HealthcheckArgs::builder()
///             .address("example.com")
///             .allow_insecure(false)
///             .check_regions(vec!["WEU", "EEU",])
///             .consecutive_fails(3)
///             .consecutive_successes(2)
///             .description("example http health check")
///             .expected_body("alive")
///             .expected_codes(vec!["2xx", "301",])
///             .follow_redirects(true)
///             .headers(
///                 vec![
///                     HealthcheckHeader::builder().header("Host")
///                     .values(vec!["example.com",]).build_struct(),
///                 ],
///             )
///             .interval(60)
///             .method("GET")
///             .name("http-health-check")
///             .path("/health")
///             .port(443)
///             .retries(2)
///             .suspended(false)
///             .timeout(10)
///             .type_("HTTPS")
///             .zone_id("${cloudflareZoneId}")
///             .build_struct(),
///     );
///     let tcpHealthCheck = healthcheck::create(
///         "tcpHealthCheck",
///         HealthcheckArgs::builder()
///             .address("example.com")
///             .check_regions(vec!["WEU", "EEU",])
///             .consecutive_fails(3)
///             .consecutive_successes(2)
///             .description("example tcp health check")
///             .interval(60)
///             .method("connection_established")
///             .name("tcp-health-check")
///             .port(22)
///             .retries(2)
///             .suspended(false)
///             .timeout(10)
///             .type_("TCP")
///             .zone_id("${cloudflareZoneId}")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Use the Zone ID and Healthcheck ID to import.
///
/// ```sh
/// $ pulumi import cloudflare:index/healthcheck:Healthcheck example <zone_id>/<healthcheck_id>
/// ```
///
pub mod healthcheck {
    include!("resources/healthcheck.rs");
}
/// Provides a Cloudflare per-hostname TLS setting resource. Used to set TLS settings for hostnames under the specified zone.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = hostname_tls_setting::create(
///         "example",
///         HostnameTlsSettingArgs::builder()
///             .hostname("sub.example.com")
///             .setting("min_tls_version")
///             .value("1.2")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/hostnameTlsSetting:HostnameTlsSetting example <zone_id>/<hostname>/<setting_name>
/// ```
///
pub mod hostname_tls_setting {
    include!("resources/hostname_tls_setting.rs");
}
/// Provides a Cloudflare per-hostname TLS setting resource, specifically for ciphers suites. Used to set ciphers suites for hostnames under the specified zone.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = hostname_tls_setting_ciphers::create(
///         "example",
///         HostnameTlsSettingCiphersArgs::builder()
///             .hostname("sub.example.com")
///             .values(vec!["ECDHE-RSA-AES128-GCM-SHA256",])
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/hostnameTlsSettingCiphers:HostnameTlsSettingCiphers example <zone_id>/<hostname>
/// ```
///
pub mod hostname_tls_setting_ciphers {
    include!("resources/hostname_tls_setting_ciphers.rs");
}
/// The [Hyperdrive Config](https://developers.cloudflare.com/hyperdrive/) resource allows you to manage Cloudflare Hyperdrive Configs.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let noDefaults = hyperdrive_config::create(
///         "noDefaults",
///         HyperdriveConfigArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .name("my-hyperdrive-config")
///             .origin(
///                 HyperdriveConfigOrigin::builder()
///                     .database("postgres")
///                     .host("my-database.example.com")
///                     .password("my-password")
///                     .port(5432)
///                     .scheme("postgres")
///                     .user("my-user")
///                     .build_struct(),
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/hyperdriveConfig:HyperdriveConfig example <account_id>/<hyperdrive_config_id>
/// ```
///
pub mod hyperdrive_config {
    include!("resources/hyperdrive_config.rs");
}
/// The [Infrastructure Access Target](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#4-add-a-target) resource allows you to configure Infrastructure Access Targets for an account.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = infrastructure_access_target::create(
///         "example",
///         InfrastructureAccessTargetArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .hostname("example-target")
///             .ip(
///                 InfrastructureAccessTargetIp::builder()
///                     .ipv4(
///                         InfrastructureAccessTargetIpIpv4::builder()
///                             .ipAddr("198.51.100.1")
///                             .virtualNetworkId("238dccd1-149b-463d-8228-560ab83a54fd")
///                             .build_struct(),
///                     )
///                     .ipv6(
///                         InfrastructureAccessTargetIpIpv6::builder()
///                             .ipAddr("2001:db8::")
///                             .virtualNetworkId("238dccd1-149b-463d-8228-560ab83a54fd")
///                             .build_struct(),
///                     )
///                     .build_struct(),
///             )
///             .build_struct(),
///     );
///     let ipv4OnlyExample = infrastructure_access_target::create(
///         "ipv4OnlyExample",
///         InfrastructureAccessTargetArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .hostname("example-ipv4-only")
///             .ip(
///                 InfrastructureAccessTargetIp::builder()
///                     .ipv4(
///                         InfrastructureAccessTargetIpIpv4::builder()
///                             .ipAddr("198.51.100.1")
///                             .virtualNetworkId("238dccd1-149b-463d-8228-560ab83a54fd")
///                             .build_struct(),
///                     )
///                     .build_struct(),
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/infrastructureAccessTarget:InfrastructureAccessTarget example <account_id>
/// ```
///
pub mod infrastructure_access_target {
    include!("resources/infrastructure_access_target.rs");
}
/// Provides a resource, that manages IPsec tunnels for Magic Transit.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = ipsec_tunnel::create(
///         "example",
///         IpsecTunnelArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .allow_null_cipher(false)
///             .cloudflare_endpoint("203.0.113.1")
///             .customer_endpoint("203.0.113.1")
///             .description("Tunnel for ISP X")
///             .health_check_enabled(true)
///             .health_check_target("203.0.113.1")
///             .health_check_type("reply")
///             .interface_address("192.0.2.0/31")
///             .name("IPsec_1")
///             .psk("asdf12341234")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/ipsecTunnel:IpsecTunnel example <account_id>/<tunnel_id>
/// ```
///
pub mod ipsec_tunnel {
    include!("resources/ipsec_tunnel.rs");
}
/// Provides a resource, that manages Keyless certificates.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = keyless_certificate::create(
///         "example",
///         KeylessCertificateArgs::builder()
///             .bundle_method("ubiquitous")
///             .certificate("-----INSERT CERTIFICATE-----")
///             .enabled(true)
///             .host("example.com")
///             .name("example.com Keyless SSL")
///             .port(24008)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/keylessCertificate:KeylessCertificate example <zone_id>/<keyless_certificate_id>
/// ```
///
pub mod keyless_certificate {
    include!("resources/keyless_certificate.rs");
}
/// ## Example Usage
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/list:List example <account_id>/<list_id>
/// ```
///
pub mod list {
    include!("resources/list.rs");
}
/// Provides individual list items (IPs, Redirects, ASNs, Hostnames) to be used in Edge Rules Engine
/// across all zones within the same account.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let exampleAsnItem = list_item::create(
///         "exampleAsnItem",
///         ListItemArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .asn(6789)
///             .comment("List Item Comment")
///             .list_id("${exampleAsnList.id}")
///             .build_struct(),
///     );
///     let exampleAsnList = list::create(
///         "exampleAsnList",
///         ListArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .description("example ASNs for a list")
///             .kind("asn")
///             .name("example_asn_list")
///             .build_struct(),
///     );
///     let exampleHostnameItem = list_item::create(
///         "exampleHostnameItem",
///         ListItemArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .comment("List Item Comment")
///             .hostname(
///                 ListItemHostname::builder().urlHostname("example.com").build_struct(),
///             )
///             .list_id("${exampleHostnameList.id}")
///             .build_struct(),
///     );
///     let exampleHostnameList = list::create(
///         "exampleHostnameList",
///         ListArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .description("example Hostnames for a list")
///             .kind("hostname")
///             .name("example_hostname_list")
///             .build_struct(),
///     );
///     let exampleIpItem = list_item::create(
///         "exampleIpItem",
///         ListItemArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .comment("List Item Comment")
///             .ip("192.0.2.0")
///             .list_id("${exampleIpList.id}")
///             .build_struct(),
///     );
///     let exampleIpList = list::create(
///         "exampleIpList",
///         ListArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .description("example IPs for a list")
///             .kind("ip")
///             .name("example_list")
///             .build_struct(),
///     );
///     let exampleRedirectItem = list_item::create(
///         "exampleRedirectItem",
///         ListItemArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .list_id("${exampleIpList.id}")
///             .redirect(
///                 ListItemRedirect::builder()
///                     .sourceUrl("https://source.tld/")
///                     .statusCode(302)
///                     .subpathMatching(true)
///                     .targetUrl("https://target.tld")
///                     .build_struct(),
///             )
///             .build_struct(),
///     );
///     let exampleRedirectList = list::create(
///         "exampleRedirectList",
///         ListArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .description("example Redirects for a list")
///             .kind("redirect")
///             .name("example_list")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/listItem:ListItem example <account_id>/<list_id>/<item_id>
/// ```
///
pub mod list_item {
    include!("resources/list_item.rs");
}
/// Provides a Cloudflare Load Balancer resource. This sits in front of
/// a number of defined pools of origins and provides various options
/// for geographically-aware load balancing. Note that the load balancing
/// feature must be enabled in your Cloudflare account before you can use
/// this resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = load_balancer::create(
///         "example",
///         LoadBalancerArgs::builder()
///             .country_pools(
///                 vec![
///                     LoadBalancerCountryPool::builder().country("US")
///                     .poolIds(vec!["${exampleLoadBalancerPool.id}",]).build_struct(),
///                 ],
///             )
///             .default_pool_ids(vec!["${exampleLoadBalancerPool.id}",])
///             .description("example load balancer using geo-balancing")
///             .fallback_pool_id("${exampleLoadBalancerPool.id}")
///             .name("example-load-balancer.example.com")
///             .pop_pools(
///                 vec![
///                     LoadBalancerPopPool::builder()
///                     .poolIds(vec!["${exampleLoadBalancerPool.id}",]).pop("LAX")
///                     .build_struct(),
///                 ],
///             )
///             .proxied(true)
///             .region_pools(
///                 vec![
///                     LoadBalancerRegionPool::builder()
///                     .poolIds(vec!["${exampleLoadBalancerPool.id}",]).region("WNAM")
///                     .build_struct(),
///                 ],
///             )
///             .rules(
///                 vec![
///                     LoadBalancerRule::builder()
///                     .condition("http.request.uri.path contains \"testing\"")
///                     .fixedResponse(LoadBalancerRuleFixedResponse::builder()
///                     .contentType("html").location("www.example.com").messageBody("hello")
///                     .statusCode(200).build_struct()).name("example rule").build_struct(),
///                 ],
///             )
///             .steering_policy("geo")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let exampleLoadBalancerPool = load_balancer_pool::create(
///         "exampleLoadBalancerPool",
///         LoadBalancerPoolArgs::builder()
///             .name("example-lb-pool")
///             .origins(
///                 vec![
///                     LoadBalancerPoolOrigin::builder().address("192.0.2.1").enabled(false)
///                     .name("example-1").build_struct(),
///                 ],
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/loadBalancer:LoadBalancer example <zone_id>/<load_balancer_id>
/// ```
///
pub mod load_balancer {
    include!("resources/load_balancer.rs");
}
/// If Cloudflare's Load Balancing to load-balance across multiple
/// origin servers or data centers, you configure one of these Monitors
/// to actively check the availability of those servers over HTTP(S) or
/// TCP.
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/loadBalancerMonitor:LoadBalancerMonitor example <account_id>/<load_balancer_monitor_id>
/// ```
///
pub mod load_balancer_monitor {
    include!("resources/load_balancer_monitor.rs");
}
/// Provides a Cloudflare Load Balancer pool resource. This provides a
/// pool of origins that can be used by a Cloudflare Load Balancer.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = load_balancer_pool::create(
///         "example",
///         LoadBalancerPoolArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .description("example load balancer pool")
///             .enabled(false)
///             .latitude(55)
///             .load_sheddings(
///                 vec![
///                     LoadBalancerPoolLoadShedding::builder().defaultPercent(55)
///                     .defaultPolicy("random").sessionPercent(12).sessionPolicy("hash")
///                     .build_struct(),
///                 ],
///             )
///             .longitude(-12)
///             .minimum_origins(1)
///             .name("example-pool")
///             .notification_email("someone@example.com")
///             .origin_steerings(
///                 vec![
///                     LoadBalancerPoolOriginSteering::builder().policy("random")
///                     .build_struct(),
///                 ],
///             )
///             .origins(
///                 vec![
///                     LoadBalancerPoolOrigin::builder().address("192.0.2.1").enabled(false)
///                     .headers(vec![LoadBalancerPoolOriginHeader::builder().header("Host")
///                     .values(vec!["example-1",]).build_struct(),]).name("example-1")
///                     .build_struct(), LoadBalancerPoolOrigin::builder()
///                     .address("192.0.2.2")
///                     .headers(vec![LoadBalancerPoolOriginHeader::builder().header("Host")
///                     .values(vec!["example-2",]).build_struct(),]).name("example-2")
///                     .build_struct(),
///                 ],
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/loadBalancerPool:LoadBalancerPool example <account_id>/<load_balancer_pool_id>
/// ```
///
pub mod load_balancer_pool {
    include!("resources/load_balancer_pool.rs");
}
/// Allows management of the Logpull Retention settings used to control whether or not to retain HTTP request logs.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: cloudflare:LogpullRetention
///     properties:
///       zoneId: 0da42c8d2132a9ddaf714f9e7c920711
///       enabled: 'true'
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/logpullRetention:LogpullRetention example <zone_id>
/// ```
///
pub mod logpull_retention {
    include!("resources/logpull_retention.rs");
}
/// ## Example Usage
///
/// ## Import
///
/// Import an account-scoped job.
///
/// ```sh
/// $ pulumi import cloudflare:index/logpushJob:LogpushJob example account/<account_id>/<job_id>
/// ```
///
/// Import a zone-scoped job.
///
/// ```sh
/// $ pulumi import cloudflare:index/logpushJob:LogpushJob example zone/<zone_id>/<job_id>
/// ```
///
pub mod logpush_job {
    include!("resources/logpush_job.rs");
}
/// Provides a resource which manages Cloudflare Logpush ownership
/// challenges to use in a Logpush Job. On it's own, doesn't do much
/// however this resource should be used in conjunction to create
/// Logpush jobs.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = logpush_ownership_challenge::create(
///         "example",
///         LogpushOwnershipChallengeArgs::builder()
///             .destination_conf("s3://my-bucket-path?region=us-west-2")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod logpush_ownership_challenge {
    include!("resources/logpush_ownership_challenge.rs");
}
/// Magic Firewall is a network-level firewall to protect networks that are onboarded to Cloudflare's Magic Transit. This resource
/// creates a root ruleset on the account level and contains one or more rules. Rules can be crafted in Wireshark syntax and
/// are evaluated in order, with the first rule having the highest priority.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: cloudflare:MagicFirewallRuleset
///     properties:
///       accountId: d41d8cd98f00b204e9800998ecf8427e
///       name: Magic Transit Ruleset
///       description: Global mitigations
///       rules:
///         - action: allow
///           expression: tcp.dstport in { 32768..65535 }
///           description: Allow TCP Ephemeral Ports
///           enabled: 'true'
///         - action: block
///           expression: ip.len >= 0
///           description: Block all
///           enabled: 'true'
/// ```
///
/// ## Import
///
/// An existing Magic Firewall Ruleset can be imported using the account ID and ruleset ID
///
/// ```sh
/// $ pulumi import cloudflare:index/magicFirewallRuleset:MagicFirewallRuleset example d41d8cd98f00b204e9800998ecf8427e/cb029e245cfdd66dc8d2e570d5dd3322
/// ```
pub mod magic_firewall_ruleset {
    include!("resources/magic_firewall_ruleset.rs");
}
/// Provides a resource, that manages GRE tunnels for Magic Transit.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = magic_wan_gre_tunnel::create(
///         "example",
///         MagicWanGreTunnelArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .cloudflare_gre_endpoint("203.0.113.2")
///             .customer_gre_endpoint("203.0.113.1")
///             .description("Tunnel for ISP X")
///             .health_check_enabled(true)
///             .health_check_target("203.0.113.1")
///             .health_check_type("reply")
///             .interface_address("192.0.2.0/31")
///             .mtu(1476)
///             .name("GRE_1")
///             .ttl(64)
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel example <account_id>/<tunnel_id>
/// ```
///
pub mod magic_wan_gre_tunnel {
    include!("resources/magic_wan_gre_tunnel.rs");
}
/// Provides a resource, that manages IPsec tunnels for Magic Transit.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = magic_wan_ipsec_tunnel::create(
///         "example",
///         MagicWanIpsecTunnelArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .allow_null_cipher(false)
///             .cloudflare_endpoint("203.0.113.1")
///             .customer_endpoint("203.0.113.1")
///             .description("Tunnel for ISP X")
///             .health_check_enabled(true)
///             .health_check_target("203.0.113.1")
///             .health_check_type("reply")
///             .interface_address("192.0.2.0/31")
///             .name("IPsec_1")
///             .psk("asdf12341234")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel example <account_id>/<tunnel_id>
/// ```
///
pub mod magic_wan_ipsec_tunnel {
    include!("resources/magic_wan_ipsec_tunnel.rs");
}
/// Provides a resource, that manages Cloudflare static routes for Magic
/// Transit or Magic WAN. Static routes are used to route traffic
/// through GRE tunnels.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = magic_wan_static_route::create(
///         "example",
///         MagicWanStaticRouteArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .colo_names(vec!["den01",])
///             .colo_regions(vec!["APAC",])
///             .description("New route for new prefix 192.0.2.0/24")
///             .nexthop("10.0.0.0")
///             .prefix("192.0.2.0/24")
///             .priority(100)
///             .weight(10)
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/magicWanStaticRoute:MagicWanStaticRoute example <account_id>/<static_route_id>
/// ```
///
pub mod magic_wan_static_route {
    include!("resources/magic_wan_static_route.rs");
}
/// The [Cloudflare Managed Headers](https://developers.cloudflare.com/rules/transform/managed-transforms/)
/// allows you to add or remove some predefined headers to one's
/// requests or origin responses.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = managed_headers::create(
///         "example",
///         ManagedHeadersArgs::builder()
///             .managed_request_headers(
///                 vec![
///                     ManagedHeadersManagedRequestHeader::builder().enabled(true)
///                     .id("add_true_client_ip_headers").build_struct(),
///                 ],
///             )
///             .managed_response_headers(
///                 vec![
///                     ManagedHeadersManagedResponseHeader::builder().enabled(true)
///                     .id("remove_x-powered-by_header").build_struct(),
///                 ],
///             )
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod managed_headers {
    include!("resources/managed_headers.rs");
}
/// Provides a Cloudflare mTLS certificate resource. These certificates may be used with mTLS enabled Cloudflare services.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = mtls_certificate::create(
///         "example",
///         MtlsCertificateArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .ca(true)
///             .certificates(
///                 "-----BEGIN CERTIFICATE-----\nMIIDmDCCAoCgAwIBAgIUKTOAZNj...i4JhqeoTewsxndhDDE\n-----END CERTIFICATE-----",
///             )
///             .name("example")
///             .private_key(
///                 "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQE...1IS3EnQRrz6WMYA=\n-----END PRIVATE KEY-----",
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/mtlsCertificate:MtlsCertificate example <account_id>/<mtls_certificate_id>
/// ```
///
pub mod mtls_certificate {
    include!("resources/mtls_certificate.rs");
}
/// Provides a resource, that manages a notification policy for
/// Cloudflare's products. The delivery mechanisms supported are email,
/// webhooks, and PagerDuty.
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/notificationPolicy:NotificationPolicy example <account_id>/<policy_id>
/// ```
///
pub mod notification_policy {
    include!("resources/notification_policy.rs");
}
/// Provides a resource, that manages a webhook destination. These destinations can be tied to the notification policies created for Cloudflare's products.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = notification_policy_webhooks::create(
///         "example",
///         NotificationPolicyWebhooksArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .name("Webhooks destination")
///             .secret("my-secret")
///             .url("https://example.com")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/notificationPolicyWebhooks:NotificationPolicyWebhooks example <account_id>/<notification_webhook_id>
/// ```
///
pub mod notification_policy_webhooks {
    include!("resources/notification_policy_webhooks.rs");
}
/// Provides a Cloudflare Observatory Scheduled Test resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = observatory_scheduled_test::create(
///         "example",
///         ObservatoryScheduledTestArgs::builder()
///             .frequency("WEEKLY")
///             .region("us-central1")
///             .url("example.com")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/observatoryScheduledTest:ObservatoryScheduledTest example <zone_id>:<url>:<region>
/// ```
///
pub mod observatory_scheduled_test {
    include!("resources/observatory_scheduled_test.rs");
}
/// Provides a Cloudflare Origin CA certificate used to protect traffic to your origin without involving a third party Certificate Authority.
///
/// > Since v3.32.0
///    all authentication schemes are supported for managing Origin CA certificates.
///    Versions prior to v3.32.0 will still need to use `api_user_service_key`.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: tls:privateKey
///     properties:
///       algorithm: RSA
///   exampleCertRequest:
///     type: tls:certRequest
///     name: example
///     properties:
///       privateKeyPem: ${example.privateKeyPem}
///       subject:
///         - commonName:
///           organization: Terraform Test
///   exampleOriginCaCertificate:
///     type: cloudflare:OriginCaCertificate
///     name: example
///     properties:
///       csr: ${exampleCertRequest.certRequestPem}
///       hostnames:
///         - example.com
///       requestType: origin-rsa
///       requestedValidity: 7
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/originCaCertificate:OriginCaCertificate example <certificate_id>
/// ```
///
pub mod origin_ca_certificate {
    include!("resources/origin_ca_certificate.rs");
}
/// Provides a Cloudflare page rule resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let foobar = page_rule::create(
///         "foobar",
///         PageRuleArgs::builder()
///             .actions(
///                 PageRuleActions::builder()
///                     .emailObfuscation("on")
///                     .minifies(
///                         vec![
///                             PageRuleActionsMinify::builder().css("on").html("off")
///                             .js("on").build_struct(),
///                         ],
///                     )
///                     .ssl("flexible")
///                     .build_struct(),
///             )
///             .priority(1)
///             .target("sub.${cloudflareZone}/page")
///             .zone_id("${cloudflareZoneId}")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Page rules can be imported using a composite ID formed of zone ID and page rule ID, e.g.
///
/// ```sh
/// $ pulumi import cloudflare:index/pageRule:PageRule default d41d8cd98f00b204e9800998ecf8427e/ch8374ftwdghsif43
/// ```
pub mod page_rule {
    include!("resources/page_rule.rs");
}
/// Provides a resource for managing Cloudflare Pages domains.
///
/// > A DNS record for the domain is not automatically created. You need to create
///    a `cloudflare.Record` resource for the domain you want to use.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   my-domain:
///     type: cloudflare:PagesDomain
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       projectName: my-example-project
///       domain: example.com
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/pagesDomain:PagesDomain example <account_id>/<project_name>/<domain-name>
/// ```
///
pub mod pages_domain {
    include!("resources/pages_domain.rs");
}
/// Provides a resource which manages Cloudflare Pages projects.
///
/// > If you are using a `source` block configuration, you must first have a
///    connected GitHub or GitLab account connected to Cloudflare. See the
///    [Getting Started with Pages] documentation on how to link your accounts.
///
/// ## Import
///
/// !> It is not possible to import a pages project with secret environment variables. If you have a secret environment variable, you must remove it from your project before importing it.
///
/// ```sh
/// $ pulumi import cloudflare:index/pagesProject:PagesProject example <account_id>/<project_name>
/// ```
///
pub mod pages_project {
    include!("resources/pages_project.rs");
}
/// Provides the ability to manage Cloudflare Workers Queue features.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = queue::create(
///         "example",
///         QueueArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .name("my-queue")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/queue:Queue example <account_id>/<queue_id>
/// ```
///
pub mod queue {
    include!("resources/queue.rs");
}
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = r_2_bucket::create(
///         "example",
///         R2BucketArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .location("enam")
///             .name("terraform-bucket")
///             .build_struct(),
///     );
/// }
/// ```
///
/// > Available location values can be found in the [R2 documentation](https://developers.cloudflare.com/r2/reference/data-location/#available-hints).
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/r2Bucket:R2Bucket default <account id>/<bucket name>
/// ```
///
pub mod r_2_bucket {
    include!("resources/r_2_bucket.rs");
}
/// Provides a Cloudflare rate limit resource for a given zone. This can
/// be used to limit the traffic you receive zone-wide, or matching more
/// specific types of requests/responses.
///
/// > `cloudflare.RateLimit` is in a deprecation phase until January 15th, 2025.
///   During this time period, this resource is still
///   fully supported but you are strongly advised to move to the
///   `cloudflare.Ruleset` resource. Full details can be found in the
///   developer documentation.
///
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: cloudflare:RateLimit
///     properties:
///       zoneId: 0da42c8d2132a9ddaf714f9e7c920711
///       threshold: 2000
///       period: 2
///       match:
///         request:
///           urlPattern: ${cloudflareZone}/*
///           schemes:
///             - HTTP
///             - HTTPS
///           methods:
///             - GET
///             - POST
///             - PUT
///             - DELETE
///             - PATCH
///             - HEAD
///         response:
///           statuses:
///             - 200
///             - 201
///             - 202
///             - 301
///             - 429
///           originTraffic: false
///           headers:
///             - name: Host
///               op: eq
///               value: localhost
///             - name: X-Example
///               op: ne
///               value: my-example
///       action:
///         mode: simulate
///         timeout: 43200
///         response:
///           contentType: text/plain
///           body: custom response body
///       correlate:
///         by: nat
///       disabled: false
///       description: example rate limit for a zone
///       bypassUrlPatterns:
///         - example.com/bypass1
///         - example.com/bypass2
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/rateLimit:RateLimit example <zone_id>/<rate_limit_id>
/// ```
///
pub mod rate_limit {
    include!("resources/rate_limit.rs");
}
/// Provides a Cloudflare record resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let _sipTls = record::create(
///         "_sipTls",
///         RecordArgs::builder()
///             .data(
///                 RecordData::builder()
///                     .name("terraform-srv")
///                     .port(443)
///                     .priority(0)
///                     .proto("_tls")
///                     .service("_sip")
///                     .target("example.com")
///                     .weight(0)
///                     .build_struct(),
///             )
///             .name("_sip._tls")
///             .type_("SRV")
///             .zone_id("${cloudflareZoneId}")
///             .build_struct(),
///     );
///     let example = record::create(
///         "example",
///         RecordArgs::builder()
///             .content("192.0.2.1")
///             .name("terraform")
///             .ttl(3600)
///             .type_("A")
///             .zone_id("${cloudflareZoneId}")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/record:Record example <zone_id>/<record_id>
/// ```
///
pub mod record {
    include!("resources/record.rs");
}
/// Provides a Data Localization Suite Regional Hostname.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = record::create(
///         "example",
///         RecordArgs::builder()
///             .content("192.0.2.1")
///             .name("example.com")
///             .ttl(3600)
///             .type_("A")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let exampleRegionalHostname = regional_hostname::create(
///         "exampleRegionalHostname",
///         RegionalHostnameArgs::builder()
///             .hostname("example.com")
///             .region_key("eu")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod regional_hostname {
    include!("resources/regional_hostname.rs");
}
/// Instructs Cloudflare to check a regional hub data center on the way to your upper tier.
/// This can help improve performance for smart and custom tiered cache topologies.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = regional_tiered_cache::create(
///         "example",
///         RegionalTieredCacheArgs::builder()
///             .value("on")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/regionalTieredCache:RegionalTieredCache example <zone_id>
/// ```
///
pub mod regional_tiered_cache {
    include!("resources/regional_tiered_cache.rs");
}
/// The [Risk Behavior](https://developers.cloudflare.com/cloudflare-one/insights/risk-score/) resource allows you to configure Cloudflare Risk Behaviors for an account.
pub mod risk_behavior {
    include!("resources/risk_behavior.rs");
}
/// The [Cloudflare Ruleset Engine](https://developers.cloudflare.com/firewall/cf-rulesets)
/// allows you to create and deploy rules and rulesets.
///
/// The engine syntax, inspired by the Wireshark Display Filter language, is the
/// same syntax used in custom Firewall Rules. Cloudflare uses the Ruleset Engine
/// in different products, allowing you to configure several products using the same
/// basic syntax.
///
/// ## Import
///
/// Import an account scoped Ruleset configuration.
///
/// ```sh
/// $ pulumi import cloudflare:index/ruleset:Ruleset example account/<account_id>/<ruleset_id>
/// ```
///
/// Import a zone scoped Ruleset configuration.
///
/// ```sh
/// $ pulumi import cloudflare:index/ruleset:Ruleset example zone/<zone_id>/<ruleset_id>
/// ```
///
pub mod ruleset {
    include!("resources/ruleset.rs");
}
/// Provides a Cloudflare Spectrum Application. You can extend the power
/// of Cloudflare's DDoS, TLS, and IP Firewall to your other TCP-based
/// services.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: cloudflare:SpectrumApplication
///     properties:
///       zoneId: 0da42c8d2132a9ddaf714f9e7c920711
///       protocol: tcp/22
///       trafficType: direct
///       dns:
///         type: CNAME
///         name: ssh.example.com
///       originDirects:
///         - tcp://192.0.2.1:22
///       edgeIps:
///         type: static
///         ips:
///           - 203.0.113.1
///           - 203.0.113.2
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/spectrumApplication:SpectrumApplication example <zone_id>/<spectrum_application_id>
/// ```
///
pub mod spectrum_application {
    include!("resources/spectrum_application.rs");
}
/// Provides a Cloudflare Split Tunnel resource. Split tunnels are used to either
/// include or exclude lists of routes from the WARP client's tunnel.
///
/// ## Import
///
/// Split Tunnels for default device policies must use "default" as the policy ID.
///
/// ```sh
/// $ pulumi import cloudflare:index/splitTunnel:SplitTunnel example <account_id>/<policy_id>/<mode>
/// ```
///
pub mod split_tunnel {
    include!("resources/split_tunnel.rs");
}
/// Provides a resource, that manages Cloudflare static routes for Magic
/// Transit or Magic WAN. Static routes are used to route traffic
/// through GRE tunnels.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = static_route::create(
///         "example",
///         StaticRouteArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .colo_names(vec!["den01",])
///             .colo_regions(vec!["APAC",])
///             .description("New route for new prefix 192.0.2.0/24")
///             .nexthop("10.0.0.0")
///             .prefix("192.0.2.0/24")
///             .priority(100)
///             .weight(10)
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/staticRoute:StaticRoute example <account_id>/<static_route_id>
/// ```
///
pub mod static_route {
    include!("resources/static_route.rs");
}
/// Provides a Cloudflare Teams Account resource. The Teams Account
/// resource defines configuration for secure web gateway.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = teams_account::create(
///         "example",
///         TeamsAccountArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .antivirus(
///                 TeamsAccountAntivirus::builder()
///                     .enabledDownloadPhase(true)
///                     .enabledUploadPhase(false)
///                     .failClosed(true)
///                     .notificationSettings(
///                         TeamsAccountAntivirusNotificationSettings::builder()
///                             .enabled(true)
///                             .message("you are blocked")
///                             .supportUrl("https://example.com/blocked")
///                             .build_struct(),
///                     )
///                     .build_struct(),
///             )
///             .block_page(
///                 TeamsAccountBlockPage::builder()
///                     .backgroundColor("#000000")
///                     .footerText("hello")
///                     .headerText("hello")
///                     .logoPath("https://example.com/logo.jpg")
///                     .build_struct(),
///             )
///             .body_scanning(
///                 TeamsAccountBodyScanning::builder().inspectionMode("deep").build_struct(),
///             )
///             .extended_email_matching(
///                 TeamsAccountExtendedEmailMatching::builder().enabled(true).build_struct(),
///             )
///             .fips(TeamsAccountFips::builder().tls(true).build_struct())
///             .logging(
///                 TeamsAccountLogging::builder()
///                     .redactPii(true)
///                     .settingsByRuleType(
///                         TeamsAccountLoggingSettingsByRuleType::builder()
///                             .dns(
///                                 TeamsAccountLoggingSettingsByRuleTypeDns::builder()
///                                     .logAll(false)
///                                     .logBlocks(true)
///                                     .build_struct(),
///                             )
///                             .http(
///                                 TeamsAccountLoggingSettingsByRuleTypeHttp::builder()
///                                     .logAll(true)
///                                     .logBlocks(true)
///                                     .build_struct(),
///                             )
///                             .l4(
///                                 TeamsAccountLoggingSettingsByRuleTypeL4::builder()
///                                     .logAll(false)
///                                     .logBlocks(true)
///                                     .build_struct(),
///                             )
///                             .build_struct(),
///                     )
///                     .build_struct(),
///             )
///             .protocol_detection_enabled(true)
///             .proxy(
///                 TeamsAccountProxy::builder()
///                     .disableForTime(3600)
///                     .rootCa(true)
///                     .tcp(true)
///                     .udp(true)
///                     .virtualIp(false)
///                     .build_struct(),
///             )
///             .tls_decrypt_enabled(true)
///             .url_browser_isolation_enabled(true)
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/teamsAccount:TeamsAccount example <account_id>
/// ```
///
pub mod teams_account {
    include!("resources/teams_account.rs");
}
/// Provides a Cloudflare Teams List resource. Teams lists are
/// referenced when creating secure web gateway policies or device
/// posture rules.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = teams_list::create(
///         "example",
///         TeamsListArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .description("Serial numbers for all corporate devices.")
///             .items(vec!["8GE8721REF", "5RE8543EGG", "1YE2880LNP",])
///             .name("Corporate devices")
///             .type_("SERIAL")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/teamsList:TeamsList example <account_id>/<teams_list_id>
/// ```
///
pub mod teams_list {
    include!("resources/teams_list.rs");
}
/// Provides a Cloudflare Teams Location resource. Teams Locations are
/// referenced when creating secure web gateway policies.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = teams_location::create(
///         "example",
///         TeamsLocationArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .client_default(true)
///             .ecs_support(false)
///             .name("office")
///             .networks(
///                 vec![
///                     TeamsLocationNetwork::builder().network("203.0.113.1/32")
///                     .build_struct(), TeamsLocationNetwork::builder()
///                     .network("203.0.113.2/32").build_struct(),
///                 ],
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/teamsLocation:TeamsLocation example <account_id>/<teams_location_id>
/// ```
///
pub mod teams_location {
    include!("resources/teams_location.rs");
}
/// Provides a Cloudflare Teams Proxy Endpoint resource. Teams Proxy
/// Endpoints are used for pointing proxy clients at Cloudflare Secure
/// Gateway.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = teams_proxy_endpoint::create(
///         "example",
///         TeamsProxyEndpointArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .ips(vec!["192.0.2.0/24",])
///             .name("office")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint example <account_id>/<proxy_endpoint_id>
/// ```
///
pub mod teams_proxy_endpoint {
    include!("resources/teams_proxy_endpoint.rs");
}
/// Provides a Cloudflare Teams rule resource. Teams rules comprise secure web gateway policies.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = teams_rule::create(
///         "example",
///         TeamsRuleArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .action("block")
///             .description("desc")
///             .filters(vec!["http",])
///             .name("office")
///             .precedence(1)
///             .rule_settings(
///                 TeamsRuleRuleSettings::builder()
///                     .blockPageEnabled(true)
///                     .blockPageReason("access not permitted")
///                     .build_struct(),
///             )
///             .traffic("http.request.uri == \"https://www.example.com/malicious\"")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/teamsRule:TeamsRule example <account_id>/<teams_rule_id>
/// ```
///
pub mod teams_rule {
    include!("resources/teams_rule.rs");
}
/// Provides a resource, that manages Cloudflare Tiered Cache settings.
/// This allows you to adjust topologies for your zone.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = tiered_cache::create(
///         "example",
///         TieredCacheArgs::builder()
///             .cache_type("smart")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod tiered_cache {
    include!("resources/tiered_cache.rs");
}
/// Provides a resource which manages Total TLS for a zone.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = total_tls::create(
///         "example",
///         TotalTlsArgs::builder()
///             .certificate_authority("lets_encrypt")
///             .enabled(true)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/totalTls:TotalTls example <zone_id>
/// ```
///
pub mod total_tls {
    include!("resources/total_tls.rs");
}
/// Tunnel exposes applications running on your local web server on any
/// network with an internet connection without manually adding DNS
/// records or configuring a firewall or router.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = tunnel::create(
///         "example",
///         TunnelArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .name("my-tunnel")
///             .secret("AQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIAQIDBAUGBwg=")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/tunnel:Tunnel example <account_id>/<tunnel_id>
/// ```
///
pub mod tunnel {
    include!("resources/tunnel.rs");
}
/// Provides a Cloudflare Tunnel configuration resource.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   exampleTunnel:
///     type: cloudflare:ZeroTrustTunnelCloudflared
///     name: example_tunnel
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       name: example_tunnel
///       secret: <32 character secret>
///   exampleConfig:
///     type: cloudflare:TunnelConfig
///     name: example_config
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       tunnelId: ${exampleTunnel.id}
///       config:
///         warpRouting:
///           enabled: true
///         originRequest:
///           connectTimeout: 1m0s
///           tlsTimeout: 1m0s
///           tcpKeepAlive: 1m0s
///           noHappyEyeballs: false
///           keepAliveConnections: 1024
///           keepAliveTimeout: 1m0s
///           httpHostHeader: baz
///           originServerName: foobar
///           caPool: /path/to/unsigned/ca/pool
///           noTlsVerify: false
///           disableChunkedEncoding: false
///           bastionMode: false
///           proxyAddress: 10.0.0.1
///           proxyPort: '8123'
///           proxyType: socks
///           ipRules:
///             - prefix: /web
///               ports:
///                 - 80
///                 - 443
///               allow: false
///         ingressRules:
///           - hostname: foo
///             path: /bar
///             service: http://10.0.0.2:8080
///             originRequest:
///               connectTimeout: 2m0s
///               access:
///                 required: true
///                 teamName: terraform
///                 audTags:
///                   - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
///           - service: https://10.0.0.3:8081
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/tunnelConfig:TunnelConfig example <account_id>/<tunnel_id>
/// ```
///
pub mod tunnel_config {
    include!("resources/tunnel_config.rs");
}
/// Provides a resource, that manages Cloudflare tunnel routes for Zero
/// Trust. Tunnel routes are used to direct IP traffic through
/// Cloudflare Tunnels.
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/tunnelRoute:TunnelRoute example <account_id>/<network_cidr>/<virtual_network_id>
/// ```
///
pub mod tunnel_route {
    include!("resources/tunnel_route.rs");
}
/// Provides a resource, that manages Cloudflare tunnel virtual networks
/// for Zero Trust. Tunnel virtual networks are used for segregation of
/// Tunnel IP Routes via Virtualized Networks to handle overlapping
/// private IPs in your origins.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = tunnel_virtual_network::create(
///         "example",
///         TunnelVirtualNetworkArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .comment("New tunnel virtual network for documentation")
///             .name("vnet-for-documentation")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/tunnelVirtualNetwork:TunnelVirtualNetwork example <account_id>/<vnet_id>
/// ```
///
pub mod tunnel_virtual_network {
    include!("resources/tunnel_virtual_network.rs");
}
/// The [Turnstile Widget](https://developers.cloudflare.com/turnstile/) resource allows you to manage Cloudflare Turnstile Widgets.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = turnstile_widget::create(
///         "example",
///         TurnstileWidgetArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .bot_fight_mode(false)
///             .domains(vec!["example.com",])
///             .mode("invisible")
///             .name("example widget")
///             .region("world")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/turnstileWidget:TurnstileWidget example <account_id>/<site_key>
/// ```
///
pub mod turnstile_widget {
    include!("resources/turnstile_widget.rs");
}
/// Provides a resource to manage URL Normalization Settings.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = url_normalization_settings::create(
///         "example",
///         UrlNormalizationSettingsArgs::builder()
///             .scope("incoming")
///             .type_("cloudflare")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod url_normalization_settings {
    include!("resources/url_normalization_settings.rs");
}
/// Provides a resource to manage User Agent Blocking Rules.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example1 = user_agent_blocking_rule::create(
///         "example1",
///         UserAgentBlockingRuleArgs::builder()
///             .configuration(
///                 UserAgentBlockingRuleConfiguration::builder()
///                     .target("ua")
///                     .value("Chrome")
///                     .build_struct(),
///             )
///             .description("My description 1")
///             .mode("js_challenge")
///             .paused(false)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let example2 = user_agent_blocking_rule::create(
///         "example2",
///         UserAgentBlockingRuleArgs::builder()
///             .configuration(
///                 UserAgentBlockingRuleConfiguration::builder()
///                     .target("ua")
///                     .value("Mozilla")
///                     .build_struct(),
///             )
///             .description("My description 22")
///             .mode("challenge")
///             .paused(true)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule example <zone_id>/<user_agent_blocking_rule_id>
/// ```
///
pub mod user_agent_blocking_rule {
    include!("resources/user_agent_blocking_rule.rs");
}
/// Provides a Cloudflare Waiting Room resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = waiting_room::create(
///         "example",
///         WaitingRoomArgs::builder()
///             .additional_routes(
///                 vec![
///                     WaitingRoomAdditionalRoute::builder().host("shop1.example.com")
///                     .path("/example-path").build_struct(),
///                     WaitingRoomAdditionalRoute::builder().host("shop2.example.com")
///                     .build_struct(),
///                 ],
///             )
///             .cookie_suffix("queue1")
///             .enabled_origin_commands(vec!["revoke",])
///             .host("foo.example.com")
///             .name("foo")
///             .new_users_per_minute(200)
///             .path("/")
///             .queueing_status_code(200)
///             .total_active_users(200)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Use the Zone ID and Waiting Room ID to import.
///
/// ```sh
/// $ pulumi import cloudflare:index/waitingRoom:WaitingRoom default <zone_id>/<waiting_room_id>
/// ```
///
pub mod waiting_room {
    include!("resources/waiting_room.rs");
}
/// Provides a Cloudflare Waiting Room Event resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = waiting_room_event::create(
///         "example",
///         WaitingRoomEventArgs::builder()
///             .event_end_time("2006-01-02T20:04:05Z")
///             .event_start_time("2006-01-02T15:04:05Z")
///             .name("foo")
///             .waiting_room_id("d41d8cd98f00b204e9800998ecf8427e")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Use the Zone ID, Waiting Room ID, and Event ID to import.
///
/// ```sh
/// $ pulumi import cloudflare:index/waitingRoomEvent:WaitingRoomEvent default <zone_id>/<waiting_room_id>/<waiting_room_event_id>
/// ```
///
pub mod waiting_room_event {
    include!("resources/waiting_room_event.rs");
}
/// Provides a Cloudflare Waiting Room Rules resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = waiting_room_rules::create(
///         "example",
///         WaitingRoomRulesArgs::builder()
///             .rules(
///                 vec![
///                     WaitingRoomRulesRule::builder().action("bypass_waiting_room")
///                     .description("bypass ip list")
///                     .expression("src.ip in {192.0.2.0 192.0.2.1}").status("enabled")
///                     .build_struct(), WaitingRoomRulesRule::builder()
///                     .action("bypass_waiting_room").description("bypass query string")
///                     .expression("http.request.uri.query contains \"bypass=true\"")
///                     .status("enabled").build_struct(),
///                 ],
///             )
///             .waiting_room_id("d41d8cd98f00b204e9800998ecf8427e")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/waitingRoomRules:WaitingRoomRules default <zone_id>/<waiting_room_id>
/// ```
///
pub mod waiting_room_rules {
    include!("resources/waiting_room_rules.rs");
}
/// Configure zone-wide settings for Cloudflare waiting rooms.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = waiting_room_settings::create(
///         "example",
///         WaitingRoomSettingsArgs::builder()
///             .search_engine_crawler_bypass(true)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/waitingRoomSettings:WaitingRoomSettings example <zone_id>
/// ```
///
pub mod waiting_room_settings {
    include!("resources/waiting_room_settings.rs");
}
/// Manages Web3 hostnames for IPFS and Ethereum gateways.
pub mod web_3_hostname {
    include!("resources/web_3_hostname.rs");
}
/// Provides a Cloudflare Web Analytics Rule resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = web_analytics_site::create(
///         "example",
///         WebAnalyticsSiteArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .auto_install(true)
///             .zone_tag("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let exampleWebAnalyticsRule = web_analytics_rule::create(
///         "exampleWebAnalyticsRule",
///         WebAnalyticsRuleArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .host("*")
///             .inclusive(false)
///             .is_paused(false)
///             .paths(vec!["/excluded",])
///             .ruleset_id("${example.rulesetId}")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/webAnalyticsRule:WebAnalyticsRule example <account_id>/<ruleset_id>/<rule_id>
/// ```
///
pub mod web_analytics_rule {
    include!("resources/web_analytics_rule.rs");
}
/// Provides a Cloudflare Web Analytics Site resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = web_analytics_site::create(
///         "example",
///         WebAnalyticsSiteArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .auto_install(true)
///             .zone_tag("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/webAnalyticsSite:WebAnalyticsSite example <account_id>/<site_tag>
/// ```
///
pub mod web_analytics_site {
    include!("resources/web_analytics_site.rs");
}
/// Worker Cron Triggers allow users to map a cron expression to a Worker script
/// using a `ScheduledEvent` listener that enables Workers to be executed on a
/// schedule. Worker Cron Triggers are ideal for running periodic jobs for
/// maintenance or calling third-party APIs to collect up-to-date data.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   exampleScript:
///     type: cloudflare:WorkersScript
///     name: example_script
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       name: example-script
///       content:
///         fn::invoke:
///           Function: std:file
///           Arguments:
///             input: path/to/my.js
///           Return: result
///   exampleTrigger:
///     type: cloudflare:WorkerCronTrigger
///     name: example_trigger
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       scriptName: ${exampleScript.name}
///       schedules:
///         - '*/5 * * * *'
///         - 10 7 * * mon-fri
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workerCronTrigger:WorkerCronTrigger example <account_id>/<script_name>
/// ```
///
pub mod worker_cron_trigger {
    include!("resources/worker_cron_trigger.rs");
}
/// Creates a Worker Custom Domain.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = worker_domain::create(
///         "example",
///         WorkerDomainArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .hostname("subdomain.example.com")
///             .service("my-service")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workerDomain:WorkerDomain example <account_id>/<worker_domain_id>
/// ```
///
pub mod worker_domain {
    include!("resources/worker_domain.rs");
}
/// Provides a Cloudflare worker route resource. A route will also require a `cloudflare.WorkerScript`.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let myRoute = worker_route::create(
///         "myRoute",
///         WorkerRouteArgs::builder()
///             .pattern("example.com/*")
///             .script_name("${myScript.name}")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let myScript = workers_script::create(
///         "myScript",
///         WorkersScriptArgs::builder().build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workerRoute:WorkerRoute example <zone_id>/<route_id>
/// ```
///
pub mod worker_route {
    include!("resources/worker_route.rs");
}
/// Provides a Cloudflare worker script resource. In order for a script to be active, you'll also need to setup a `cloudflare.WorkerRoute`.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   myNamespace:
///     type: cloudflare:WorkersKvNamespace
///     name: my_namespace
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       title: example
///   # Sets the script with the name "script_1"
///   myScript:
///     type: cloudflare:WorkerScript
///     name: my_script
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       name: script_1
///       content:
///         fn::invoke:
///           Function: std:file
///           Arguments:
///             input: script.js
///           Return: result
///       kvNamespaceBindings:
///         - name: MY_EXAMPLE_KV_NAMESPACE
///           namespaceId: ${myNamespace.id}
///       plainTextBindings:
///         - name: MY_EXAMPLE_PLAIN_TEXT
///           text: foobar
///       secretTextBindings:
///         - name: MY_EXAMPLE_SECRET_TEXT
///           text: ${secretFooValue}
///       webassemblyBindings:
///         - name: MY_EXAMPLE_WASM
///           module:
///             fn::invoke:
///               Function: std:filebase64
///               Arguments:
///                 input: example.wasm
///               Return: result
///       serviceBindings:
///         - name: MY_SERVICE_BINDING
///           service: MY_SERVICE
///           environment: production
///       r2BucketBindings:
///         - name: MY_BUCKET
///           bucketName: MY_BUCKET_NAME
///       analyticsEngineBindings:
///         - name: MY_DATASET
///           dataset: dataset1
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workerScript:WorkerScript example <account_id>/<script_name>
/// ```
///
pub mod worker_script {
    include!("resources/worker_script.rs");
}
/// Provides a Cloudflare Worker secret resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let mySecret = worker_secret::create(
///         "mySecret",
///         WorkerSecretArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .name("MY_EXAMPLE_SECRET_TEXT")
///             .script_name("script_1")
///             .secret_text("my_secret_value")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workerSecret:WorkerSecret example <account_id>/<script_name>/<secret_name>
/// ```
///
pub mod worker_secret {
    include!("resources/worker_secret.rs");
}
/// Worker Cron Triggers allow users to map a cron expression to a Worker script
/// using a `ScheduledEvent` listener that enables Workers to be executed on a
/// schedule. Worker Cron Triggers are ideal for running periodic jobs for
/// maintenance or calling third-party APIs to collect up-to-date data.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   exampleScript:
///     type: cloudflare:WorkersScript
///     name: example_script
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       name: example-script
///       content:
///         fn::invoke:
///           Function: std:file
///           Arguments:
///             input: path/to/my.js
///           Return: result
///   exampleTrigger:
///     type: cloudflare:WorkersCronTrigger
///     name: example_trigger
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       scriptName: ${exampleScript.name}
///       schedules:
///         - '*/5 * * * *'
///         - 10 7 * * mon-fri
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workersCronTrigger:WorkersCronTrigger example <account_id>/<script_name>
/// ```
///
pub mod workers_cron_trigger {
    include!("resources/workers_cron_trigger.rs");
}
/// Creates a Worker Custom Domain.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = workers_domain::create(
///         "example",
///         WorkersDomainArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .hostname("subdomain.example.com")
///             .service("my-service")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workersDomain:WorkersDomain example <account_id>/<worker_domain_id>
/// ```
///
pub mod workers_domain {
    include!("resources/workers_domain.rs");
}
/// The [Workers for Platforms](https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/) resource allows you
/// to manage Cloudflare Workers for Platforms dispatch namespaces.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: cloudflare:WorkersForPlatformsDispatchNamespace
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       name: example-namespace
///   customerWorker1:
///     type: cloudflare:WorkersScript
///     name: customer_worker_1
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       name: customer-worker-1
///       content:
///         fn::invoke:
///           Function: std:file
///           Arguments:
///             input: script.js
///           Return: result
///       dispatchNamespace: ${example.name}
///       tags:
///         - free
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workersForPlatformsDispatchNamespace:WorkersForPlatformsDispatchNamespace example <account_id>/<namespace_name>
/// ```
///
pub mod workers_for_platforms_dispatch_namespace {
    include!("resources/workers_for_platforms_dispatch_namespace.rs");
}
/// The [Workers for Platforms](https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/) resource allows you
/// to manage Cloudflare Workers for Platforms namespaces.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: cloudflare:WorkersForPlatformsNamespace
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       name: example-namespace
///   customerWorker1:
///     type: cloudflare:WorkersScript
///     name: customer_worker_1
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       name: customer-worker-1
///       content:
///         fn::invoke:
///           Function: std:file
///           Arguments:
///             input: script.js
///           Return: result
///       dispatchNamespace: ${example.name}
///       tags:
///         - free
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workersForPlatformsNamespace:WorkersForPlatformsNamespace example <account_id>/<namespace_name>
/// ```
///
pub mod workers_for_platforms_namespace {
    include!("resources/workers_for_platforms_namespace.rs");
}
/// Provides a resource to manage a Cloudflare Workers KV Pair.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = workers_kv::create(
///         "example",
///         WorkersKvArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .key("test-key")
///             .namespace_id("${exampleNs.id}")
///             .value("test value")
///             .build_struct(),
///     );
///     let exampleNs = workers_kv_namespace::create(
///         "exampleNs",
///         WorkersKvNamespaceArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .title("test-namespace")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workersKv:WorkersKv example <account_id>/<namespace_id>/<key_name>
/// ```
///
pub mod workers_kv {
    include!("resources/workers_kv.rs");
}
/// Provides the ability to manage Cloudflare Workers KV Namespace features.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = workers_kv_namespace::create(
///         "example",
///         WorkersKvNamespaceArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .title("test-namespace")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workersKvNamespace:WorkersKvNamespace example <account_id>/<namespace_id>
/// ```
///
pub mod workers_kv_namespace {
    include!("resources/workers_kv_namespace.rs");
}
/// Provides a Cloudflare worker route resource. A route will also require a `cloudflare.WorkerScript`.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let myRoute = workers_route::create(
///         "myRoute",
///         WorkersRouteArgs::builder()
///             .pattern("example.com/*")
///             .script_name("${myScript.name}")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let myScript = workers_script::create(
///         "myScript",
///         WorkersScriptArgs::builder().build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workersRoute:WorkersRoute example <zone_id>/<route_id>
/// ```
///
pub mod workers_route {
    include!("resources/workers_route.rs");
}
/// Provides a Cloudflare worker script resource. In order for a script to be active, you'll also need to setup a `cloudflare.WorkerRoute`.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   myNamespace:
///     type: cloudflare:WorkersKvNamespace
///     name: my_namespace
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       title: example
///   # Sets the script with the name "script_1"
///   myScript:
///     type: cloudflare:WorkersScript
///     name: my_script
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       name: script_1
///       content:
///         fn::invoke:
///           Function: std:file
///           Arguments:
///             input: script.js
///           Return: result
///       kvNamespaceBindings:
///         - name: MY_EXAMPLE_KV_NAMESPACE
///           namespaceId: ${myNamespace.id}
///       plainTextBindings:
///         - name: MY_EXAMPLE_PLAIN_TEXT
///           text: foobar
///       secretTextBindings:
///         - name: MY_EXAMPLE_SECRET_TEXT
///           text: ${secretFooValue}
///       webassemblyBindings:
///         - name: MY_EXAMPLE_WASM
///           module:
///             fn::invoke:
///               Function: std:filebase64
///               Arguments:
///                 input: example.wasm
///               Return: result
///       serviceBindings:
///         - name: MY_SERVICE_BINDING
///           service: MY_SERVICE
///           environment: production
///       r2BucketBindings:
///         - name: MY_BUCKET
///           bucketName: MY_BUCKET_NAME
///       analyticsEngineBindings:
///         - name: MY_DATASET
///           dataset: dataset1
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workersScript:WorkersScript example <account_id>/<script_name>
/// ```
///
pub mod workers_script {
    include!("resources/workers_script.rs");
}
/// Provides a Cloudflare Worker secret resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let mySecret = workers_secret::create(
///         "mySecret",
///         WorkersSecretArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .name("MY_EXAMPLE_SECRET_TEXT")
///             .script_name("script_1")
///             .secret_text("my_secret_value")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/workersSecret:WorkersSecret example <account_id>/<script_name>/<secret_name>
/// ```
///
pub mod workers_secret {
    include!("resources/workers_secret.rs");
}
/// Provides a Cloudflare Access Application resource. Access
/// Applications are used to restrict access to a whole application using an
/// authorisation gateway managed by Cloudflare.
///
/// > It's required that an `account_id` or `zone_id` is provided and in
///    most cases using either is fine. However, if you're using a scoped
///    access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com"
///    zone needs to use the `zone_id` argument.
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustAccessApplication:ZeroTrustAccessApplication example <account_id>/<application_id>
/// ```
///
pub mod zero_trust_access_application {
    include!("resources/zero_trust_access_application.rs");
}
/// Provides a resource to customize the pages your end users will see
/// when trying to reach applications behind Cloudflare Access.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_access_custom_page::create(
///         "example",
///         ZeroTrustAccessCustomPageArgs::builder()
///             .custom_html("<html><body><h1>Forbidden</h1></body></html>")
///             .name("example")
///             .type_("forbidden")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod zero_trust_access_custom_page {
    include!("resources/zero_trust_access_custom_page.rs");
}
/// Provides a Cloudflare Access Group resource. Access Groups are used
/// in conjunction with Access Policies to restrict access to a
/// particular resource based on group membership.
///
/// > It's required that an `account_id` or `zone_id` is provided and in
///    most cases using either is fine. However, if you're using a scoped
///    access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com"
///    zone needs to use the `zone_id` argument.
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustAccessGroup:ZeroTrustAccessGroup example <account_id>/<group_id>
/// ```
///
pub mod zero_trust_access_group {
    include!("resources/zero_trust_access_group.rs");
}
/// Provides a Cloudflare Access Identity Provider resource. Identity
/// Providers are used as an authentication or authorisation source
/// within Access.
///
/// > It's required that an `account_id` or `zone_id` is provided and in
///    most cases using either is fine. However, if you're using a scoped
///    access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com"
///    zone needs to use the `zone_id` argument.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let githubOauth = zero_trust_access_identity_provider::create(
///         "githubOauth",
///         ZeroTrustAccessIdentityProviderArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .configs(
///                 vec![
///                     ZeroTrustAccessIdentityProviderConfig::builder().clientId("example")
///                     .clientSecret("secret_key").build_struct(),
///                 ],
///             )
///             .name("GitHub OAuth")
///             .type_("github")
///             .build_struct(),
///     );
///     let jumpcloudSaml = zero_trust_access_identity_provider::create(
///         "jumpcloudSaml",
///         ZeroTrustAccessIdentityProviderArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .configs(
///                 vec![
///                     ZeroTrustAccessIdentityProviderConfig::builder()
///                     .attributes(vec!["email", "username",])
///                     .idpPublicCert("MIIDpDCCAoygAwIBAgIGAV2ka+55MA0GCSqGSIb3DQEBCwUAMIGSMQswCQ...GF/Q2/MHadws97cZg\nuTnQyuOqPuHbnN83d/2l1NSYKCbHt24o")
///                     .issuerUrl("jumpcloud").signRequest(false)
///                     .ssoTargetUrl("https://sso.myexample.jumpcloud.com/saml2/cloudflareaccess")
///                     .build_struct(),
///                 ],
///             )
///             .name("JumpCloud SAML")
///             .type_("saml")
///             .build_struct(),
///     );
///     let okta = zero_trust_access_identity_provider::create(
///         "okta",
///         ZeroTrustAccessIdentityProviderArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .configs(
///                 vec![
///                     ZeroTrustAccessIdentityProviderConfig::builder()
///                     .apiToken("okta_api_token").clientId("example")
///                     .clientSecret("secret_key").oktaAccount("https://example.com")
///                     .build_struct(),
///                 ],
///             )
///             .name("Okta")
///             .type_("okta")
///             .build_struct(),
///     );
///     let pinLogin = zero_trust_access_identity_provider::create(
///         "pinLogin",
///         ZeroTrustAccessIdentityProviderArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .name("PIN login")
///             .type_("onetimepin")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustAccessIdentityProvider:ZeroTrustAccessIdentityProvider example <account_id>/<identity_provider_id>
/// ```
///
pub mod zero_trust_access_identity_provider {
    include!("resources/zero_trust_access_identity_provider.rs");
}
/// Provides a Cloudflare Access Mutual TLS Certificate resource.
/// Mutual TLS authentication ensures that the traffic is secure and
/// trusted in both directions between a client and server and can be
///  used with Access to only allows requests from devices with a
///  corresponding client certificate.
///
/// > It's required that an `account_id` or `zone_id` is provided and in
///    most cases using either is fine. However, if you're using a scoped
///    access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com"
///    zone needs to use the `zone_id` argument.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let myCert = zero_trust_access_mtls_certificate::create(
///         "myCert",
///         ZeroTrustAccessMtlsCertificateArgs::builder()
///             .associated_hostnames(vec!["staging.example.com",])
///             .certificate("${caPem}")
///             .name("My Root Cert")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Account level import.
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate cloudflare_zero_sd -t_access_mtls_certificate.example account/<account_id>/<mutual_tls_certificate_id>
/// ```
///
/// Zone level import.
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate cloudflare_zero_sd -t_access_mtls_certificate.example zone/<zone_id>/<mutual_tls_certificate_id>
/// ```
///
pub mod zero_trust_access_mtls_certificate {
    include!("resources/zero_trust_access_mtls_certificate.rs");
}
/// Provides a Cloudflare Access Mutual TLS Certificate Settings resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_access_mtls_hostname_settings::create(
///         "example",
///         ZeroTrustAccessMtlsHostnameSettingsArgs::builder()
///             .settings(
///                 vec![
///                     ZeroTrustAccessMtlsHostnameSettingsSetting::builder()
///                     .chinaNetwork(false).clientCertificateForwarding(true)
///                     .hostname("example.com").build_struct(),
///                 ],
///             )
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Account level mTLS hostname settings import.
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustAccessMtlsHostnameSettings:ZeroTrustAccessMtlsHostnameSettings example account/<account_id>
/// ```
///
/// Zone level mTLS hostname settings import.
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustAccessMtlsHostnameSettings:ZeroTrustAccessMtlsHostnameSettings example zone/<zone_id>
/// ```
///
pub mod zero_trust_access_mtls_hostname_settings {
    include!("resources/zero_trust_access_mtls_hostname_settings.rs");
}
/// A Zero Trust organization defines the user login experience.
pub mod zero_trust_access_organization {
    include!("resources/zero_trust_access_organization.rs");
}
/// Provides a Cloudflare Access Policy resource. Access Policies are
/// used in conjunction with Access Applications to restrict access to
/// a particular resource.
///
/// > It's required that an `account_id` or `zone_id` is provided and in most cases using either is fine.
///    However, if you're using a scoped access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com" zone needs to use the `zone_id` argument.
///    If 'application_id' is omitted, the policy created can be reused by multiple access applications.
///    Any cloudflare.AccessApplication resource can reference reusable policies through its `policies` argument.
///    To destroy a reusable policy and remove it from all applications' policies lists on the same apply, preemptively set the
///    lifecycle option `create_before_destroy` to true on the 'cloudflare_access_policy' resource.
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustAccessPolicy:ZeroTrustAccessPolicy example account/<account_id>/<application_id>/<policy_id>
/// ```
///
pub mod zero_trust_access_policy {
    include!("resources/zero_trust_access_policy.rs");
}
/// Access Service Tokens are used for service-to-service communication
/// when an application is behind Cloudflare Access.
///
/// ## Import
///
/// If you are importing an Access Service Token you will not have the
///
/// client_secret available in the state for use. The client_secret is only
///
/// available once, at creation. In most cases, it is better to just create a new
///
/// resource should you need to reference it in other resources.
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustAccessServiceToken:ZeroTrustAccessServiceToken example <account_id>/<service_token_id>
/// ```
///
pub mod zero_trust_access_service_token {
    include!("resources/zero_trust_access_service_token.rs");
}
/// Cloudflare Access can replace traditional SSH key models with
/// short-lived certificates issued to your users based on the token
/// generated by their Access login.
///
/// > It's required that an `account_id` or `zone_id` is provided and in
///    most cases using either is fine. However, if you're using a scoped
///    access token, you must provide the argument that matches the token's
///    scope. For example, an access token that is scoped to the "example.com"
///    zone needs to use the `zone_id` argument.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let anotherExample = zero_trust_access_short_lived_certificate::create(
///         "anotherExample",
///         ZeroTrustAccessShortLivedCertificateArgs::builder()
///             .application_id("fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2")
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
///     let example = zero_trust_access_short_lived_certificate::create(
///         "example",
///         ZeroTrustAccessShortLivedCertificateArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .application_id("6cd6cea3-3ef2-4542-9aea-85a0bbcd5414")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Account level CA certificate import.
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustAccessShortLivedCertificate:ZeroTrustAccessShortLivedCertificate example account/<account_id>/<application_id>
/// ```
///
/// Zone level CA certificate import.
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustAccessShortLivedCertificate:ZeroTrustAccessShortLivedCertificate example account/<zone_id>/<application_id>
/// ```
///
pub mod zero_trust_access_short_lived_certificate {
    include!("resources/zero_trust_access_short_lived_certificate.rs");
}
/// Provides a resource to customize the pages your end users will see
/// when trying to reach applications behind Cloudflare Access.
pub mod zero_trust_access_tag {
    include!("resources/zero_trust_access_tag.rs");
}
/// Provides a Cloudflare device policy certificates resource. Device
/// policy certificate resources enable client device certificate
/// generation.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_device_certificates::create(
///         "example",
///         ZeroTrustDeviceCertificatesArgs::builder()
///             .enabled(true)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustDeviceCertificates:ZeroTrustDeviceCertificates example <zone_id>
/// ```
///
pub mod zero_trust_device_certificates {
    include!("resources/zero_trust_device_certificates.rs");
}
/// Provides a Cloudflare Device Managed Network resource. Device managed networks allow for building location-aware device settings policies.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let managedNetworks = zero_trust_device_managed_networks::create(
///         "managedNetworks",
///         ZeroTrustDeviceManagedNetworksArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .config(
///                 ZeroTrustDeviceManagedNetworksConfig::builder()
///                     .sha256(
///                         "b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c",
///                     )
///                     .tlsSockaddr("foobar:1234")
///                     .build_struct(),
///             )
///             .name("managed-network-1")
///             .type_("tls")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustDeviceManagedNetworks:ZeroTrustDeviceManagedNetworks example <account_id>/<device_managed_networks_id>
/// ```
///
pub mod zero_trust_device_managed_networks {
    include!("resources/zero_trust_device_managed_networks.rs");
}
/// Provides a Cloudflare Device Posture Integration resource. Device
/// posture integrations configure third-party data providers for device
/// posture rules.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_device_posture_integration::create(
///         "example",
///         ZeroTrustDevicePostureIntegrationArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .configs(
///                 vec![
///                     ZeroTrustDevicePostureIntegrationConfig::builder()
///                     .apiUrl("https://example.com/api")
///                     .authUrl("https://example.com/connect/token").clientId("client-id")
///                     .clientSecret("client-secret").build_struct(),
///                 ],
///             )
///             .interval("24h")
///             .name("Device posture integration")
///             .type_("workspace_one")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustDevicePostureIntegration:ZeroTrustDevicePostureIntegration example <account_id>/<device_posture_integration_id>
/// ```
///
pub mod zero_trust_device_posture_integration {
    include!("resources/zero_trust_device_posture_integration.rs");
}
/// Provides a Cloudflare Device Posture Rule resource. Device posture rules configure security policies for device posture checks.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let eaxmple = zero_trust_device_posture_rule::create(
///         "eaxmple",
///         ZeroTrustDevicePostureRuleArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .description("Device posture rule for corporate devices.")
///             .expiration("24h")
///             .inputs(
///                 vec![
///                     ZeroTrustDevicePostureRuleInput::builder()
///                     .id("${corporateDevices.id}").operator("<").osDistroName("ubuntu")
///                     .osDistroRevision("1.0.0").osVersionExtra("(a)").version("1.0.0")
///                     .build_struct(),
///                 ],
///             )
///             .matches(
///                 vec![
///                     ZeroTrustDevicePostureRuleMatch::builder().platform("linux")
///                     .build_struct(),
///                 ],
///             )
///             .name("Corporate devices posture rule")
///             .schedule("24h")
///             .type_("os_version")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustDevicePostureRule:ZeroTrustDevicePostureRule example <account_id>/<device_posture_rule_id>
/// ```
///
pub mod zero_trust_device_posture_rule {
    include!("resources/zero_trust_device_posture_rule.rs");
}
/// Provides a Cloudflare Device Settings Policy resource. Device policies configure settings applied to WARP devices.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let developerWarpPolicy = zero_trust_device_profiles::create(
///         "developerWarpPolicy",
///         ZeroTrustDeviceProfilesArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .allow_mode_switch(true)
///             .allow_updates(true)
///             .allowed_to_leave(true)
///             .auto_connect(0)
///             .captive_portal(5)
///             .default(false)
///             .description("Developers WARP settings policy description")
///             .disable_auto_fallback(true)
///             .enabled(true)
///             .exclude_office_ips(false)
///             .match_("any(identity.groups.name[*] in {\"Developers\"})")
///             .name("Developers WARP settings policy")
///             .precedence(10)
///             .service_mode_v_2_mode("warp")
///             .service_mode_v_2_port(3000)
///             .support_url("https://cloudflare.com")
///             .switch_locked(true)
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// For default device settings policies you must use "default" as the policy ID.
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustDeviceProfiles:ZeroTrustDeviceProfiles example <account_id>/<device_policy_id>
/// ```
///
pub mod zero_trust_device_profiles {
    include!("resources/zero_trust_device_profiles.rs");
}
/// Provides a Cloudflare Device Dex Test resource. Device Dex Tests allow for building location-aware device settings policies.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_dex_test::create(
///         "example",
///         ZeroTrustDexTestArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .data(
///                 ZeroTrustDexTestData::builder()
///                     .host("https://example.com/home")
///                     .kind("http")
///                     .method("GET")
///                     .build_struct(),
///             )
///             .description("Send a HTTP GET request to the home endpoint every half hour.")
///             .enabled(true)
///             .interval("0h30m0s")
///             .name("GET homepage")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustDexTest:ZeroTrustDexTest example <account_id>/<device_dex_test_id>
/// ```
///
pub mod zero_trust_dex_test {
    include!("resources/zero_trust_dex_test.rs");
}
/// Provides a Cloudflare DLP Profile resource. Data Loss Prevention profiles
/// are a set of entries that can be matched in HTTP bodies or files.
/// They are referenced in Zero Trust Gateway rules.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let creds = zero_trust_dlp_profile::create(
///         "creds",
///         ZeroTrustDlpProfileArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .allowed_match_count(3)
///             .entries(
///                 vec![
///                     ZeroTrustDlpProfileEntry::builder().enabled(true)
///                     .id("d8fcfc9c-773c-405e-8426-21ecbb67ba93")
///                     .name("Amazon AWS Access Key ID").build_struct(),
///                     ZeroTrustDlpProfileEntry::builder().enabled(false)
///                     .id("2c0e33e1-71da-40c8-aad3-32e674ad3d96")
///                     .name("Amazon AWS Secret Access Key").build_struct(),
///                     ZeroTrustDlpProfileEntry::builder().enabled(true)
///                     .id("4e92c006-3802-4dff-bbe1-8e1513b1c92a")
///                     .name("Microsoft Azure Client Secret").build_struct(),
///                     ZeroTrustDlpProfileEntry::builder().enabled(false)
///                     .id("5c713294-2375-4904-abcf-e4a15be4d592").name("SSH Private Key")
///                     .build_struct(), ZeroTrustDlpProfileEntry::builder().enabled(true)
///                     .id("6c6579e4-d832-42d5-905c-8e53340930f2")
///                     .name("Google GCP API Key").build_struct(),
///                 ],
///             )
///             .name("Credentials and Secrets")
///             .type_("predefined")
///             .build_struct(),
///     );
///     let exampleCustom = zero_trust_dlp_profile::create(
///         "exampleCustom",
///         ZeroTrustDlpProfileArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .allowed_match_count(0)
///             .description("A profile with example entries")
///             .entries(
///                 vec![
///                     ZeroTrustDlpProfileEntry::builder().enabled(true)
///                     .name("Matches visa credit cards")
///                     .pattern(ZeroTrustDlpProfileEntryPattern::builder()
///                     .regex("4\\d{3}([-\\. ])?\\d{4}([-\\. ])?\\d{4}([-\\. ])?\\d{4}")
///                     .validation("luhn").build_struct()).build_struct(),
///                     ZeroTrustDlpProfileEntry::builder().enabled(true)
///                     .name("Matches diners club card")
///                     .pattern(ZeroTrustDlpProfileEntryPattern::builder()
///                     .regex("(?:0[0-5]|[68][0-9])[0-9]{11}").validation("luhn")
///                     .build_struct()).build_struct(),
///                 ],
///             )
///             .name("Example Custom Profile")
///             .type_("custom")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustDlpProfile:ZeroTrustDlpProfile example <account_id>/<dlp_profile_id>
/// ```
///
pub mod zero_trust_dlp_profile {
    include!("resources/zero_trust_dlp_profile.rs");
}
/// Provides a Cloudflare Teams Location resource. Teams Locations are
/// referenced when creating secure web gateway policies.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_dns_location::create(
///         "example",
///         ZeroTrustDnsLocationArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .client_default(true)
///             .ecs_support(false)
///             .name("office")
///             .networks(
///                 vec![
///                     ZeroTrustDnsLocationNetwork::builder().network("203.0.113.1/32")
///                     .build_struct(), ZeroTrustDnsLocationNetwork::builder()
///                     .network("203.0.113.2/32").build_struct(),
///                 ],
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustDnsLocation:ZeroTrustDnsLocation example <account_id>/<teams_location_id>
/// ```
///
pub mod zero_trust_dns_location {
    include!("resources/zero_trust_dns_location.rs");
}
/// Provides a Cloudflare Teams Gateway Certificate resource. A Teams Certificate can
/// be specified for Gateway TLS interception and block pages.
pub mod zero_trust_gateway_certificate {
    include!("resources/zero_trust_gateway_certificate.rs");
}
/// Provides a Cloudflare Teams rule resource. Teams rules comprise secure web gateway policies.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_gateway_policy::create(
///         "example",
///         ZeroTrustGatewayPolicyArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .action("block")
///             .description("desc")
///             .filters(vec!["http",])
///             .name("office")
///             .precedence(1)
///             .rule_settings(
///                 ZeroTrustGatewayPolicyRuleSettings::builder()
///                     .blockPageEnabled(true)
///                     .blockPageReason("access not permitted")
///                     .build_struct(),
///             )
///             .traffic("http.request.uri == \"https://www.example.com/malicious\"")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustGatewayPolicy:ZeroTrustGatewayPolicy example <account_id>/<teams_rule_id>
/// ```
///
pub mod zero_trust_gateway_policy {
    include!("resources/zero_trust_gateway_policy.rs");
}
/// Provides a Cloudflare Teams Proxy Endpoint resource. Teams Proxy
/// Endpoints are used for pointing proxy clients at Cloudflare Secure
/// Gateway.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_gateway_proxy_endpoint::create(
///         "example",
///         ZeroTrustGatewayProxyEndpointArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .ips(vec!["192.0.2.0/24",])
///             .name("office")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustGatewayProxyEndpoint:ZeroTrustGatewayProxyEndpoint example <account_id>/<proxy_endpoint_id>
/// ```
///
pub mod zero_trust_gateway_proxy_endpoint {
    include!("resources/zero_trust_gateway_proxy_endpoint.rs");
}
/// Provides a Cloudflare Teams Account resource. The Teams Account
/// resource defines configuration for secure web gateway.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_gateway_settings::create(
///         "example",
///         ZeroTrustGatewaySettingsArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .antivirus(
///                 ZeroTrustGatewaySettingsAntivirus::builder()
///                     .enabledDownloadPhase(true)
///                     .enabledUploadPhase(false)
///                     .failClosed(true)
///                     .notificationSettings(
///                         ZeroTrustGatewaySettingsAntivirusNotificationSettings::builder()
///                             .enabled(true)
///                             .message("you are blocked")
///                             .supportUrl("https://example.com/blocked")
///                             .build_struct(),
///                     )
///                     .build_struct(),
///             )
///             .block_page(
///                 ZeroTrustGatewaySettingsBlockPage::builder()
///                     .backgroundColor("#000000")
///                     .footerText("hello")
///                     .headerText("hello")
///                     .logoPath("https://example.com/logo.jpg")
///                     .build_struct(),
///             )
///             .body_scanning(
///                 ZeroTrustGatewaySettingsBodyScanning::builder()
///                     .inspectionMode("deep")
///                     .build_struct(),
///             )
///             .extended_email_matching(
///                 ZeroTrustGatewaySettingsExtendedEmailMatching::builder()
///                     .enabled(true)
///                     .build_struct(),
///             )
///             .fips(ZeroTrustGatewaySettingsFips::builder().tls(true).build_struct())
///             .logging(
///                 ZeroTrustGatewaySettingsLogging::builder()
///                     .redactPii(true)
///                     .settingsByRuleType(
///                         ZeroTrustGatewaySettingsLoggingSettingsByRuleType::builder()
///                             .dns(
///                                 ZeroTrustGatewaySettingsLoggingSettingsByRuleTypeDns::builder()
///                                     .logAll(false)
///                                     .logBlocks(true)
///                                     .build_struct(),
///                             )
///                             .http(
///                                 ZeroTrustGatewaySettingsLoggingSettingsByRuleTypeHttp::builder()
///                                     .logAll(true)
///                                     .logBlocks(true)
///                                     .build_struct(),
///                             )
///                             .l4(
///                                 ZeroTrustGatewaySettingsLoggingSettingsByRuleTypeL4::builder()
///                                     .logAll(false)
///                                     .logBlocks(true)
///                                     .build_struct(),
///                             )
///                             .build_struct(),
///                     )
///                     .build_struct(),
///             )
///             .protocol_detection_enabled(true)
///             .proxy(
///                 ZeroTrustGatewaySettingsProxy::builder()
///                     .disableForTime(3600)
///                     .rootCa(true)
///                     .tcp(true)
///                     .udp(true)
///                     .virtualIp(false)
///                     .build_struct(),
///             )
///             .tls_decrypt_enabled(true)
///             .url_browser_isolation_enabled(true)
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustGatewaySettings:ZeroTrustGatewaySettings example <account_id>
/// ```
///
pub mod zero_trust_gateway_settings {
    include!("resources/zero_trust_gateway_settings.rs");
}
/// The [Infrastructure Access Target](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/ssh-infrastructure-access/#4-add-a-target) resource allows you to configure Infrastructure Access Targets for an account.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_infrastructure_access_target::create(
///         "example",
///         ZeroTrustInfrastructureAccessTargetArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .hostname("example-target")
///             .ip(
///                 ZeroTrustInfrastructureAccessTargetIp::builder()
///                     .ipv4(
///                         ZeroTrustInfrastructureAccessTargetIpIpv4::builder()
///                             .ipAddr("198.51.100.1")
///                             .virtualNetworkId("238dccd1-149b-463d-8228-560ab83a54fd")
///                             .build_struct(),
///                     )
///                     .ipv6(
///                         ZeroTrustInfrastructureAccessTargetIpIpv6::builder()
///                             .ipAddr("2001:db8::")
///                             .virtualNetworkId("238dccd1-149b-463d-8228-560ab83a54fd")
///                             .build_struct(),
///                     )
///                     .build_struct(),
///             )
///             .build_struct(),
///     );
///     let ipv4OnlyExample = zero_trust_infrastructure_access_target::create(
///         "ipv4OnlyExample",
///         ZeroTrustInfrastructureAccessTargetArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .hostname("example-ipv4-only")
///             .ip(
///                 ZeroTrustInfrastructureAccessTargetIp::builder()
///                     .ipv4(
///                         ZeroTrustInfrastructureAccessTargetIpIpv4::builder()
///                             .ipAddr("198.51.100.1")
///                             .virtualNetworkId("238dccd1-149b-463d-8228-560ab83a54fd")
///                             .build_struct(),
///                     )
///                     .build_struct(),
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustInfrastructureAccessTarget:ZeroTrustInfrastructureAccessTarget example <account_id>
/// ```
///
pub mod zero_trust_infrastructure_access_target {
    include!("resources/zero_trust_infrastructure_access_target.rs");
}
/// Access Keys Configuration defines the rotation policy for the keys
/// that access will use to sign data.
pub mod zero_trust_key_access_key_configuration {
    include!("resources/zero_trust_key_access_key_configuration.rs");
}
/// Provides a Cloudflare Teams List resource. Teams lists are
/// referenced when creating secure web gateway policies or device
/// posture rules.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_list::create(
///         "example",
///         ZeroTrustListArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .description("Serial numbers for all corporate devices.")
///             .items(vec!["8GE8721REF", "5RE8543EGG", "1YE2880LNP",])
///             .name("Corporate devices")
///             .type_("SERIAL")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustList:ZeroTrustList example <account_id>/<teams_list_id>
/// ```
///
pub mod zero_trust_list {
    include!("resources/zero_trust_list.rs");
}
/// Provides a Cloudflare Fallback Domain resource. Fallback domains are
/// used to ignore DNS requests to a given list of domains. These DNS
/// requests will be passed back to other DNS servers configured on
/// existing network interfaces on the device.
pub mod zero_trust_local_fallback_domain {
    include!("resources/zero_trust_local_fallback_domain.rs");
}
/// The [Risk Behavior](https://developers.cloudflare.com/cloudflare-one/insights/risk-score/) resource allows you to configure Cloudflare Risk Behaviors for an account.
pub mod zero_trust_risk_behavior {
    include!("resources/zero_trust_risk_behavior.rs");
}
/// The [Risk Score Integration](https://developers.cloudflare.com/cloudflare-one/insights/risk-score/#send-risk-score-to-okta) resource allows you to transmit changes in User Risk Score to a specified vendor such as Okta.
pub mod zero_trust_risk_score_integration {
    include!("resources/zero_trust_risk_score_integration.rs");
}
/// Provides a Cloudflare Split Tunnel resource. Split tunnels are used to either
/// include or exclude lists of routes from the WARP client's tunnel.
pub mod zero_trust_split_tunnel {
    include!("resources/zero_trust_split_tunnel.rs");
}
/// Tunnel exposes applications running on your local web server on any
/// network with an internet connection without manually adding DNS
/// records or configuring a firewall or router.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_tunnel_cloudflared::create(
///         "example",
///         ZeroTrustTunnelCloudflaredArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .name("my-tunnel")
///             .secret("AQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIAQIDBAUGBwg=")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustTunnelCloudflared:ZeroTrustTunnelCloudflared example <account_id>/<tunnel_id>
/// ```
///
pub mod zero_trust_tunnel_cloudflared {
    include!("resources/zero_trust_tunnel_cloudflared.rs");
}
/// Provides a Cloudflare Tunnel configuration resource.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   exampleTunnel:
///     type: cloudflare:ZeroTrustTunnelCloudflared
///     name: example_tunnel
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       name: example_tunnel
///       secret: <32 character secret>
///   exampleConfig:
///     type: cloudflare:ZeroTrustTunnelCloudflaredConfig
///     name: example_config
///     properties:
///       accountId: f037e56e89293a057740de681ac9abbe
///       tunnelId: ${exampleTunnel.id}
///       config:
///         warpRouting:
///           enabled: true
///         originRequest:
///           connectTimeout: 1m0s
///           tlsTimeout: 1m0s
///           tcpKeepAlive: 1m0s
///           noHappyEyeballs: false
///           keepAliveConnections: 1024
///           keepAliveTimeout: 1m0s
///           httpHostHeader: baz
///           originServerName: foobar
///           caPool: /path/to/unsigned/ca/pool
///           noTlsVerify: false
///           disableChunkedEncoding: false
///           bastionMode: false
///           proxyAddress: 10.0.0.1
///           proxyPort: '8123'
///           proxyType: socks
///           ipRules:
///             - prefix: /web
///               ports:
///                 - 80
///                 - 443
///               allow: false
///         ingressRules:
///           - hostname: foo
///             path: /bar
///             service: http://10.0.0.2:8080
///             originRequest:
///               connectTimeout: 2m0s
///               access:
///                 required: true
///                 teamName: terraform
///                 audTags:
///                   - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
///           - service: https://10.0.0.3:8081
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustTunnelCloudflaredConfig:ZeroTrustTunnelCloudflaredConfig example <account_id>/<tunnel_id>
/// ```
///
pub mod zero_trust_tunnel_cloudflared_config {
    include!("resources/zero_trust_tunnel_cloudflared_config.rs");
}
/// Provides a resource, that manages Cloudflare tunnel routes for Zero
/// Trust. Tunnel routes are used to direct IP traffic through
/// Cloudflare Tunnels.
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustTunnelRoute:ZeroTrustTunnelRoute example <account_id>/<network_cidr>/<virtual_network_id>
/// ```
///
pub mod zero_trust_tunnel_route {
    include!("resources/zero_trust_tunnel_route.rs");
}
/// Provides a resource, that manages Cloudflare tunnel virtual networks
/// for Zero Trust. Tunnel virtual networks are used for segregation of
/// Tunnel IP Routes via Virtualized Networks to handle overlapping
/// private IPs in your origins.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zero_trust_tunnel_virtual_network::create(
///         "example",
///         ZeroTrustTunnelVirtualNetworkArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .comment("New tunnel virtual network for documentation")
///             .name("vnet-for-documentation")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zeroTrustTunnelVirtualNetwork:ZeroTrustTunnelVirtualNetwork example <account_id>/<vnet_id>
/// ```
///
pub mod zero_trust_tunnel_virtual_network {
    include!("resources/zero_trust_tunnel_virtual_network.rs");
}
/// Provides a Cloudflare Zone resource. Zone is the basic resource for
/// working with Cloudflare and is roughly equivalent to a domain name
/// that the user purchases.
///
/// > If you are attempting to sign up a subdomain of a zone you must first have Subdomain Support entitlement for your account.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zone::create(
///         "example",
///         ZoneArgs::builder()
///             .account_id("f037e56e89293a057740de681ac9abbe")
///             .zone("example.com")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zone:Zone example <zone_id>
/// ```
///
pub mod zone {
    include!("resources/zone.rs");
}
/// Provides a Cloudflare Cache Reserve resource. Cache Reserve can
/// increase cache lifetimes by automatically storing all cacheable
/// files in Cloudflare's persistent object storage buckets.
///
/// Note: Using Cache Reserve without Tiered Cache is not recommended.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zone_cache_reserve::create(
///         "example",
///         ZoneCacheReserveArgs::builder()
///             .enabled(true)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zoneCacheReserve:ZoneCacheReserve example <zone_id>
/// ```
///
pub mod zone_cache_reserve {
    include!("resources/zone_cache_reserve.rs");
}
/// Provides a resource which customizes Cloudflare zone cache variants.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zone_cache_variants::create(
///         "example",
///         ZoneCacheVariantsArgs::builder()
///             .avifs(vec!["image/avif", "image/webp",])
///             .bmps(vec!["image/bmp", "image/webp",])
///             .gifs(vec!["image/gif", "image/webp",])
///             .jp_2_s(vec!["image/jp2", "image/webp",])
///             .jpegs(vec!["image/jpeg", "image/webp",])
///             .jpg_2_s(vec!["image/jpg2", "image/webp",])
///             .jpgs(vec!["image/jpg", "image/webp",])
///             .pngs(vec!["image/png", "image/webp",])
///             .tiffs(vec!["image/tiff", "image/webp",])
///             .tifs(vec!["image/tif", "image/webp",])
///             .webps(vec!["image/jpeg", "image/webp",])
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod zone_cache_variants {
    include!("resources/zone_cache_variants.rs");
}
/// Provides a Cloudflare resource to create and modify zone DNSSEC settings.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zone::create(
///         "example",
///         ZoneArgs::builder().zone("example.com").build_struct(),
///     );
///     let exampleZoneDnssec = zone_dnssec::create(
///         "exampleZoneDnssec",
///         ZoneDnssecArgs::builder().zone_id("${example.id}").build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zoneDnssec:ZoneDnssec example <zone_id>
/// ```
///
pub mod zone_dnssec {
    include!("resources/zone_dnssec.rs");
}
/// Provides a Cloudflare Zone Hold resource that prevents adding
/// the hostname to another account for use.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = zone_hold::create(
///         "example",
///         ZoneHoldArgs::builder()
///             .hold(true)
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zoneHold:ZoneHold example <zone_id>
/// ```
///
pub mod zone_hold {
    include!("resources/zone_hold.rs");
}
/// Provides a Cloudflare Zone Lockdown resource. Zone Lockdown allows
/// you to define one or more URLs (with wildcard matching on the domain
/// or path) that will only permit access if the request originates
/// from an IP address that matches a safelist of one or more IP
/// addresses and/or IP ranges.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   # Restrict access to these endpoints to requests from a known IP address range.
///   example:
///     type: cloudflare:ZoneLockdown
///     properties:
///       zoneId: 0da42c8d2132a9ddaf714f9e7c920711
///       paused: 'false'
///       description: Restrict access to these endpoints to requests from a known IP address range
///       urls:
///         - api.mysite.com/some/endpoint*
///       configurations:
///         - target: ip_range
///           value: 192.0.2.0/24
/// ```
///
/// ## Import
///
/// ```sh
/// $ pulumi import cloudflare:index/zoneLockdown:ZoneLockdown example <zone_id>/<lockdown_id>
/// ```
///
pub mod zone_lockdown {
    include!("resources/zone_lockdown.rs");
}
/// Provides a resource which customizes Cloudflare zone settings.
///
/// > You **should not** use this resource to manage every zone setting. This
///   resource is only intended to override those which you do not want the default.
///   Attempting to manage all settings will result in problems with the resource
///   applying in a consistent manner.
///
/// ## Plan-Dependent Settings
///
/// Note that some settings are only available on certain plans. Setting an argument
/// for a feature that is not available on the plan configured for the zone will
/// result in an error:
///
/// ```sh
/// Error: invalid zone setting "\<argument\>" (value: \<value\>) found - cannot be set as it is read only
/// ```
///
/// This is true even when setting the argument to its default value. These values
/// should either be omitted or set to `null` for zones with plans that don't
/// support the feature. See the [plan feature matrices](https://www.cloudflare.com/plans/) for details on
/// feature support by plan.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let test = zone_settings_override::create(
///         "test",
///         ZoneSettingsOverrideArgs::builder()
///             .settings(
///                 ZoneSettingsOverrideSettings::builder()
///                     .automaticHttpsRewrites("on")
///                     .brotli("on")
///                     .challengeTtl(2700)
///                     .minify(
///                         ZoneSettingsOverrideSettingsMinify::builder()
///                             .css("on")
///                             .html("off")
///                             .js("off")
///                             .build_struct(),
///                     )
///                     .mirage("on")
///                     .opportunisticEncryption("on")
///                     .securityHeader(
///                         ZoneSettingsOverrideSettingsSecurityHeader::builder()
///                             .enabled(true)
///                             .build_struct(),
///                     )
///                     .securityLevel("high")
///                     .waf("on")
///                     .build_struct(),
///             )
///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
///             .build_struct(),
///     );
/// }
/// ```
pub mod zone_settings_override {
    include!("resources/zone_settings_override.rs");
}
pub mod functions {
    /// Use this data source to lookup a single [Access Application](https://developers.cloudflare.com/cloudflare-one/applications/)
    ///
    pub mod get_access_application {
        include!("functions/get_access_application.rs");
    }
    /// Use this data source to lookup a single [Access Identity Provider](https://developers.cloudflare.com/cloudflare-one/identity/idp-integration) by name.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_access_identity_provider::invoke(
    ///         GetAccessIdentityProviderArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .name("Google SSO")
    ///             .build_struct(),
    ///     );
    ///     let exampleAccessApplication = access_application::create(
    ///         "exampleAccessApplication",
    ///         AccessApplicationArgs::builder()
    ///             .allowed_idps(vec!["${example.id}",])
    ///             .auto_redirect_to_identity(true)
    ///             .domain("name.example.com")
    ///             .name("name")
    ///             .session_duration("24h")
    ///             .type_("self_hosted")
    ///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_access_identity_provider {
        include!("functions/get_access_identity_provider.rs");
    }
    /// Use this data source to lookup [Account Roles](https://api.cloudflare.com/#account-roles-properties).
    ///
    /// ## Example Usage
    ///
    pub mod get_account_roles {
        include!("functions/get_account_roles.rs");
    }
    /// Data source for looking up Cloudflare Accounts.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_accounts::invoke(
    ///         GetAccountsArgs::builder().name("example account").build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_accounts {
        include!("functions/get_accounts.rs");
    }
    /// Use this data source to look up [API Token Permission Groups](https://developers.cloudflare.com/api/tokens/create/permissions).
    /// Commonly used as references within [`cloudflare_token`](https://www.terraform.io/docs/providers/cloudflare/r/api_token.html) resources.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let all = get_api_token_permission_groups::invoke(
    ///         GetApiTokenPermissionGroupsArgs::builder().build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_api_token_permission_groups {
        include!("functions/get_api_token_permission_groups.rs");
    }
    /// Use this data source to retrieve the DCV Delegation unique identifier for a zone.
    pub mod get_dcv_delegation {
        include!("functions/get_dcv_delegation.rs");
    }
    /// Use this data source to lookup a list of [Device Posture Rule](https://developers.cloudflare.com/cloudflare-one/identity/devices)
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_device_posture_rules::invoke(
    ///         GetDevicePostureRulesArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .name("check for /dev/random")
    ///             .type_("file")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_device_posture_rules {
        include!("functions/get_device_posture_rules.rs");
    }
    /// Use this data source to lookup [Devices](https://api.cloudflare.com/#devices-list-devices).
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_devices::invoke(
    ///         GetDevicesArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_devices {
        include!("functions/get_devices.rs");
    }
    /// Use this data source to retrieve all DLP datasets for an account.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_dlp_datasets::invoke(
    ///         GetDlpDatasetsArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_dlp_datasets {
        include!("functions/get_dlp_datasets.rs");
    }
    /// Use this data source to retrieve all Gateway application types for an account.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_gateway_app_types::invoke(
    ///         GetGatewayAppTypesArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_gateway_app_types {
        include!("functions/get_gateway_app_types.rs");
    }
    /// Use this data source to retrieve all Gateway categories for an account.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_gateway_categories::invoke(
    ///         GetGatewayCategoriesArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_gateway_categories {
        include!("functions/get_gateway_categories.rs");
    }
    /// Use this data source to retrieve all Infrastructure Access Targets.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_infrastructure_access_targets::invoke(
    ///         GetInfrastructureAccessTargetsArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .hostname_contains("example")
    ///             .ipv_4("198.51.100.1")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_infrastructure_access_targets {
        include!("functions/get_infrastructure_access_targets.rs");
    }
    /// Use this data source to get the [IP ranges](https://www.cloudflare.com/ips/) of Cloudflare network.
    ///
    /// ## Example Usage
    ///
    /// ```yaml
    /// resources:
    ///   example:
    ///     type: example:firewallResource
    ///     properties:
    ///       name: from-cloudflare
    ///       network: default
    ///       sourceRanges: ${cloudflare.ipv4CidrBlocks}
    ///       allow:
    ///         - ports: '443'
    ///           protocol: tcp
    /// variables:
    ///   cloudflare:
    ///     fn::invoke:
    ///       Function: cloudflare:getIpRanges
    ///       Arguments: {}
    /// ```
    pub mod get_ip_ranges {
        include!("functions/get_ip_ranges.rs");
    }
    /// Use this data source to lookup a [List](https://developers.cloudflare.com/api/operations/lists-get-lists).
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_list::invoke(
    ///         GetListArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .name("list_name")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_list {
        include!("functions/get_list.rs");
    }
    /// Use this data source to lookup [Lists](https://developers.cloudflare.com/api/operations/lists-get-lists).
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_lists::invoke(
    ///         GetListsArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_lists {
        include!("functions/get_lists.rs");
    }
    /// A datasource to find Load Balancer Pools.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_load_balancer_pools::invoke(
    ///         GetLoadBalancerPoolsArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .filter(
    ///                 GetLoadBalancerPoolsFilter::builder()
    ///                     .name("example-lb-pool")
    ///                     .build_struct(),
    ///             )
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_load_balancer_pools {
        include!("functions/get_load_balancer_pools.rs");
    }
    /// Use this data source to retrieve an existing origin ca certificate.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_origin_ca_certificate::invoke(
    ///         GetOriginCaCertificateArgs::builder().id("REPLACE_ME").build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_origin_ca_certificate {
        include!("functions/get_origin_ca_certificate.rs");
    }
    /// Use this data source to get the
    /// [Origin CA root certificate](https://developers.cloudflare.com/ssl/origin-configuration/origin-ca#4-required-for-some-add-cloudflare-origin-ca-root-certificates)
    /// for a given algorithm."
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_origin_ca_root_certificate::invoke(
    ///         GetOriginCaRootCertificateArgs::builder().algorithm("rsa").build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_origin_ca_root_certificate {
        include!("functions/get_origin_ca_root_certificate.rs");
    }
    /// Use this data source to lookup a single [DNS Record](https://api.cloudflare.com/#dns-records-for-a-zone-properties).
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_record::invoke(
    ///         GetRecordArgs::builder()
    ///             .hostname("example.com")
    ///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_record {
        include!("functions/get_record.rs");
    }
    /// Use this datasource to lookup Rulesets in an account or zone.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_rulesets::invoke(
    ///         GetRulesetsArgs::builder()
    ///             .filter(GetRulesetsFilter::builder().name(".*OWASP.*").build_struct())
    ///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_rulesets {
        include!("functions/get_rulesets.rs");
    }
    /// Use this datasource to lookup a tunnel in an account.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_tunnel::invoke(
    ///         GetTunnelArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .name("my-tunnel")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_tunnel {
        include!("functions/get_tunnel.rs");
    }
    /// Use this datasource to lookup a tunnel virtual network in an account.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_tunnel_virtual_network::invoke(
    ///         GetTunnelVirtualNetworkArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .name("example")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_tunnel_virtual_network {
        include!("functions/get_tunnel_virtual_network.rs");
    }
    /// Use this data source to retrieve information about the currently authenticated user.
    ///
    /// ## Example Usage
    ///
    /// ```yaml
    /// resources:
    ///   example:
    ///     type: cloudflare:ApiToken
    ///     properties:
    ///       name: Terraform Cloud (Terraform)
    ///       policies:
    ///         - permissionGroups:
    ///             - ${all.user"User Details Read"[%!s(MISSING)]}
    ///           resources:
    ///             com.cloudflare.api.user.${me.id}: '*'
    /// variables:
    ///   me:
    ///     fn::invoke:
    ///       Function: cloudflare:getUser
    ///       Arguments: {}
    ///   all:
    ///     fn::invoke:
    ///       Function: cloudflare:getApiTokenPermissionGroups
    ///       Arguments: {}
    /// ```
    pub mod get_user {
        include!("functions/get_user.rs");
    }
    /// Use this data source to lookup a single [Access Application](https://developers.cloudflare.com/cloudflare-one/applications/)
    pub mod get_zero_trust_access_application {
        include!("functions/get_zero_trust_access_application.rs");
    }
    /// Use this data source to lookup a single [Access Identity Provider](https://developers.cloudflare.com/cloudflare-one/identity/idp-integration) by name.
    pub mod get_zero_trust_access_identity_provider {
        include!("functions/get_zero_trust_access_identity_provider.rs");
    }
    /// Use this data source to retrieve all Infrastructure Access Targets.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_zero_trust_infrastructure_access_targets::invoke(
    ///         GetZeroTrustInfrastructureAccessTargetsArgs::builder()
    ///             .account_id("f037e56e89293a057740de681ac9abbe")
    ///             .hostname_contains("example")
    ///             .ipv_4("198.51.100.1")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_zero_trust_infrastructure_access_targets {
        include!("functions/get_zero_trust_infrastructure_access_targets.rs");
    }
    /// Use this datasource to lookup a tunnel in an account.
    pub mod get_zero_trust_tunnel_cloudflared {
        include!("functions/get_zero_trust_tunnel_cloudflared.rs");
    }
    /// Use this datasource to lookup a tunnel virtual network in an account.
    pub mod get_zero_trust_tunnel_virtual_network {
        include!("functions/get_zero_trust_tunnel_virtual_network.rs");
    }
    /// Use this data source to look up [zone](https://api.cloudflare.com/#zone-properties)
    /// info. This is the singular alternative to `cloudflare.getZones`.
    ///
    /// > **Note** Cloudflare zone names **are not unique**. It is possible for multiple
    /// accounts to have the same zone created but in different states. If you are
    /// using this setup, it is advised to use the `account_id` attribute on this
    /// resource or swap to `cloudflare.getZones` to further filter the results.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_zone::invoke(
    ///         GetZoneArgs::builder().name("example.com").build_struct(),
    ///     );
    ///     let exampleRecord = record::create(
    ///         "exampleRecord",
    ///         RecordArgs::builder()
    ///             .content("203.0.113.1")
    ///             .name("www")
    ///             .proxied(true)
    ///             .type_("A")
    ///             .zone_id("${example.id}")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_zone {
        include!("functions/get_zone.rs");
    }
    /// Provides a Cloudflare data source to look up Cache Reserve
    /// status for a given zone.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_zone_cache_reserve::invoke(
    ///         GetZoneCacheReserveArgs::builder()
    ///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_zone_cache_reserve {
        include!("functions/get_zone_cache_reserve.rs");
    }
    /// Use this data source to look up Zone DNSSEC settings.
    ///
    /// ## Example Usage
    ///
    /// ```ignore
    /// use pulumi_wasm_rust::Output;
    /// use pulumi_wasm_rust::{add_export, pulumi_main};
    /// #[pulumi_main]
    /// fn test_main() -> Result<(), Error> {
    ///     let example = get_zone_dnssec::invoke(
    ///         GetZoneDnssecArgs::builder()
    ///             .zone_id("0da42c8d2132a9ddaf714f9e7c920711")
    ///             .build_struct(),
    ///     );
    /// }
    /// ```
    pub mod get_zone_dnssec {
        include!("functions/get_zone_dnssec.rs");
    }
    /// Use this data source to look up Zone results for use in other resources.
    ///
    pub mod get_zones {
        include!("functions/get_zones.rs");
    }
}
pub mod types {
    include!("types/access_application_cors_header.rs");
    include!("types/access_application_footer_link.rs");
    include!("types/access_application_landing_page_design.rs");
    include!("types/access_application_saas_app.rs");
    include!("types/access_application_saas_app_custom_attribute.rs");
    include!("types/access_application_saas_app_custom_attribute_source.rs");
    include!("types/access_application_saas_app_custom_claim.rs");
    include!("types/access_application_saas_app_custom_claim_source.rs");
    include!("types/access_application_saas_app_hybrid_and_implicit_options.rs");
    include!("types/access_application_saas_app_refresh_token_option.rs");
    include!("types/access_application_scim_config.rs");
    include!("types/access_application_scim_config_authentication.rs");
    include!("types/access_application_scim_config_mapping.rs");
    include!("types/access_application_scim_config_mapping_operations.rs");
    include!("types/access_application_target_criteria.rs");
    include!("types/access_application_target_criteria_target_attribute.rs");
    include!("types/access_group_exclude.rs");
    include!("types/access_group_exclude_auth_context.rs");
    include!("types/access_group_exclude_azure.rs");
    include!("types/access_group_exclude_external_evaluation.rs");
    include!("types/access_group_exclude_github.rs");
    include!("types/access_group_exclude_gsuite.rs");
    include!("types/access_group_exclude_okta.rs");
    include!("types/access_group_exclude_saml.rs");
    include!("types/access_group_include.rs");
    include!("types/access_group_include_auth_context.rs");
    include!("types/access_group_include_azure.rs");
    include!("types/access_group_include_external_evaluation.rs");
    include!("types/access_group_include_github.rs");
    include!("types/access_group_include_gsuite.rs");
    include!("types/access_group_include_okta.rs");
    include!("types/access_group_include_saml.rs");
    include!("types/access_group_require.rs");
    include!("types/access_group_require_auth_context.rs");
    include!("types/access_group_require_azure.rs");
    include!("types/access_group_require_external_evaluation.rs");
    include!("types/access_group_require_github.rs");
    include!("types/access_group_require_gsuite.rs");
    include!("types/access_group_require_okta.rs");
    include!("types/access_group_require_saml.rs");
    include!("types/access_identity_provider_config.rs");
    include!("types/access_identity_provider_scim_config.rs");
    include!("types/access_mutual_tls_hostname_settings_setting.rs");
    include!("types/access_organization_custom_page.rs");
    include!("types/access_organization_login_design.rs");
    include!("types/access_policy_approval_group.rs");
    include!("types/access_policy_connection_rules.rs");
    include!("types/access_policy_connection_rules_ssh.rs");
    include!("types/access_policy_exclude.rs");
    include!("types/access_policy_exclude_auth_context.rs");
    include!("types/access_policy_exclude_azure.rs");
    include!("types/access_policy_exclude_external_evaluation.rs");
    include!("types/access_policy_exclude_github.rs");
    include!("types/access_policy_exclude_gsuite.rs");
    include!("types/access_policy_exclude_okta.rs");
    include!("types/access_policy_exclude_saml.rs");
    include!("types/access_policy_include.rs");
    include!("types/access_policy_include_auth_context.rs");
    include!("types/access_policy_include_azure.rs");
    include!("types/access_policy_include_external_evaluation.rs");
    include!("types/access_policy_include_github.rs");
    include!("types/access_policy_include_gsuite.rs");
    include!("types/access_policy_include_okta.rs");
    include!("types/access_policy_include_saml.rs");
    include!("types/access_policy_require.rs");
    include!("types/access_policy_require_auth_context.rs");
    include!("types/access_policy_require_azure.rs");
    include!("types/access_policy_require_external_evaluation.rs");
    include!("types/access_policy_require_github.rs");
    include!("types/access_policy_require_gsuite.rs");
    include!("types/access_policy_require_okta.rs");
    include!("types/access_policy_require_saml.rs");
    include!("types/access_rule_configuration.rs");
    include!("types/address_map_ip.rs");
    include!("types/address_map_membership.rs");
    include!("types/api_shield_auth_id_characteristic.rs");
    include!("types/api_token_condition.rs");
    include!("types/api_token_condition_request_ip.rs");
    include!("types/api_token_policy.rs");
    include!("types/certificate_pack_validation_error.rs");
    include!("types/certificate_pack_validation_record.rs");
    include!("types/cloud_connector_rules_rule.rs");
    include!("types/cloud_connector_rules_rule_parameters.rs");
    include!("types/custom_hostname_ssl.rs");
    include!("types/custom_hostname_ssl_setting.rs");
    include!("types/custom_hostname_ssl_validation_error.rs");
    include!("types/custom_hostname_ssl_validation_record.rs");
    include!("types/custom_ssl_custom_ssl_options.rs");
    include!("types/custom_ssl_custom_ssl_priority.rs");
    include!("types/device_dex_test_data.rs");
    include!("types/device_managed_networks_config.rs");
    include!("types/device_posture_integration_config.rs");
    include!("types/device_posture_rule_input.rs");
    include!("types/device_posture_rule_input_location.rs");
    include!("types/device_posture_rule_match.rs");
    include!("types/dlp_profile_context_awareness.rs");
    include!("types/dlp_profile_context_awareness_skip.rs");
    include!("types/dlp_profile_entry.rs");
    include!("types/dlp_profile_entry_pattern.rs");
    include!("types/email_routing_catch_all_action.rs");
    include!("types/email_routing_catch_all_matcher.rs");
    include!("types/email_routing_rule_action.rs");
    include!("types/email_routing_rule_matcher.rs");
    include!("types/fallback_domain_domain.rs");
    include!("types/healthcheck_header.rs");
    include!("types/hyperdrive_config_caching.rs");
    include!("types/hyperdrive_config_origin.rs");
    include!("types/infrastructure_access_target_ip.rs");
    include!("types/infrastructure_access_target_ip_ipv_4.rs");
    include!("types/infrastructure_access_target_ip_ipv_6.rs");
    include!("types/list_item.rs");
    include!("types/list_item_hostname.rs");
    include!("types/list_item_redirect.rs");
    include!("types/list_item_value.rs");
    include!("types/list_item_value_hostname.rs");
    include!("types/list_item_value_redirect.rs");
    include!("types/load_balancer_adaptive_routing.rs");
    include!("types/load_balancer_country_pool.rs");
    include!("types/load_balancer_location_strategy.rs");
    include!("types/load_balancer_monitor_header.rs");
    include!("types/load_balancer_pool_load_shedding.rs");
    include!("types/load_balancer_pool_origin.rs");
    include!("types/load_balancer_pool_origin_header.rs");
    include!("types/load_balancer_pool_origin_steering.rs");
    include!("types/load_balancer_pop_pool.rs");
    include!("types/load_balancer_random_steering.rs");
    include!("types/load_balancer_region_pool.rs");
    include!("types/load_balancer_rule.rs");
    include!("types/load_balancer_rule_fixed_response.rs");
    include!("types/load_balancer_rule_override.rs");
    include!("types/load_balancer_rule_override_adaptive_routing.rs");
    include!("types/load_balancer_rule_override_country_pool.rs");
    include!("types/load_balancer_rule_override_location_strategy.rs");
    include!("types/load_balancer_rule_override_pop_pool.rs");
    include!("types/load_balancer_rule_override_random_steering.rs");
    include!("types/load_balancer_rule_override_region_pool.rs");
    include!("types/load_balancer_rule_override_session_affinity_attribute.rs");
    include!("types/load_balancer_session_affinity_attribute.rs");
    include!("types/logpush_job_output_options.rs");
    include!("types/managed_headers_managed_request_header.rs");
    include!("types/managed_headers_managed_response_header.rs");
    include!("types/notification_policy_email_integration.rs");
    include!("types/notification_policy_filters.rs");
    include!("types/notification_policy_pagerduty_integration.rs");
    include!("types/notification_policy_webhooks_integration.rs");
    include!("types/page_rule_actions.rs");
    include!("types/page_rule_actions_cache_key_fields.rs");
    include!("types/page_rule_actions_cache_key_fields_cookie.rs");
    include!("types/page_rule_actions_cache_key_fields_header.rs");
    include!("types/page_rule_actions_cache_key_fields_host.rs");
    include!("types/page_rule_actions_cache_key_fields_query_string.rs");
    include!("types/page_rule_actions_cache_key_fields_user.rs");
    include!("types/page_rule_actions_cache_ttl_by_status.rs");
    include!("types/page_rule_actions_forwarding_url.rs");
    include!("types/page_rule_actions_minify.rs");
    include!("types/pages_project_build_config.rs");
    include!("types/pages_project_deployment_configs.rs");
    include!("types/pages_project_deployment_configs_preview.rs");
    include!("types/pages_project_deployment_configs_preview_placement.rs");
    include!("types/pages_project_deployment_configs_preview_service_binding.rs");
    include!("types/pages_project_deployment_configs_production.rs");
    include!("types/pages_project_deployment_configs_production_placement.rs");
    include!("types/pages_project_deployment_configs_production_service_binding.rs");
    include!("types/pages_project_source.rs");
    include!("types/pages_project_source_config.rs");
    include!("types/rate_limit_action.rs");
    include!("types/rate_limit_action_response.rs");
    include!("types/rate_limit_correlate.rs");
    include!("types/rate_limit_match.rs");
    include!("types/rate_limit_match_request.rs");
    include!("types/rate_limit_match_response.rs");
    include!("types/record_data.rs");
    include!("types/risk_behavior_behavior.rs");
    include!("types/ruleset_rule.rs");
    include!("types/ruleset_rule_action_parameters.rs");
    include!("types/ruleset_rule_action_parameters_algorithm.rs");
    include!("types/ruleset_rule_action_parameters_autominify.rs");
    include!("types/ruleset_rule_action_parameters_browser_ttl.rs");
    include!("types/ruleset_rule_action_parameters_cache_key.rs");
    include!("types/ruleset_rule_action_parameters_cache_key_custom_key.rs");
    include!("types/ruleset_rule_action_parameters_cache_key_custom_key_cookie.rs");
    include!("types/ruleset_rule_action_parameters_cache_key_custom_key_header.rs");
    include!("types/ruleset_rule_action_parameters_cache_key_custom_key_host.rs");
    include!(
        "types/ruleset_rule_action_parameters_cache_key_custom_key_query_string.rs"
    );
    include!("types/ruleset_rule_action_parameters_cache_key_custom_key_user.rs");
    include!("types/ruleset_rule_action_parameters_cache_reserve.rs");
    include!("types/ruleset_rule_action_parameters_edge_ttl.rs");
    include!("types/ruleset_rule_action_parameters_edge_ttl_status_code_ttl.rs");
    include!(
        "types/ruleset_rule_action_parameters_edge_ttl_status_code_ttl_status_code_range.rs"
    );
    include!("types/ruleset_rule_action_parameters_from_list.rs");
    include!("types/ruleset_rule_action_parameters_from_value.rs");
    include!("types/ruleset_rule_action_parameters_from_value_target_url.rs");
    include!("types/ruleset_rule_action_parameters_header.rs");
    include!("types/ruleset_rule_action_parameters_matched_data.rs");
    include!("types/ruleset_rule_action_parameters_origin.rs");
    include!("types/ruleset_rule_action_parameters_overrides.rs");
    include!("types/ruleset_rule_action_parameters_overrides_category.rs");
    include!("types/ruleset_rule_action_parameters_overrides_rule.rs");
    include!("types/ruleset_rule_action_parameters_response.rs");
    include!("types/ruleset_rule_action_parameters_serve_stale.rs");
    include!("types/ruleset_rule_action_parameters_sni.rs");
    include!("types/ruleset_rule_action_parameters_uri.rs");
    include!("types/ruleset_rule_action_parameters_uri_path.rs");
    include!("types/ruleset_rule_action_parameters_uri_query.rs");
    include!("types/ruleset_rule_exposed_credential_check.rs");
    include!("types/ruleset_rule_logging.rs");
    include!("types/ruleset_rule_ratelimit.rs");
    include!("types/spectrum_application_dns.rs");
    include!("types/spectrum_application_edge_ips.rs");
    include!("types/spectrum_application_origin_dns.rs");
    include!("types/spectrum_application_origin_port_range.rs");
    include!("types/split_tunnel_tunnel.rs");
    include!("types/teams_account_antivirus.rs");
    include!("types/teams_account_antivirus_notification_settings.rs");
    include!("types/teams_account_block_page.rs");
    include!("types/teams_account_body_scanning.rs");
    include!("types/teams_account_certificate.rs");
    include!("types/teams_account_custom_certificate.rs");
    include!("types/teams_account_extended_email_matching.rs");
    include!("types/teams_account_fips.rs");
    include!("types/teams_account_logging.rs");
    include!("types/teams_account_logging_settings_by_rule_type.rs");
    include!("types/teams_account_logging_settings_by_rule_type_dns.rs");
    include!("types/teams_account_logging_settings_by_rule_type_http.rs");
    include!("types/teams_account_logging_settings_by_rule_type_l_4.rs");
    include!("types/teams_account_payload_log.rs");
    include!("types/teams_account_proxy.rs");
    include!("types/teams_account_ssh_session_log.rs");
    include!("types/teams_list_items_with_description.rs");
    include!("types/teams_location_network.rs");
    include!("types/teams_rule_rule_settings.rs");
    include!("types/teams_rule_rule_settings_audit_ssh.rs");
    include!("types/teams_rule_rule_settings_biso_admin_controls.rs");
    include!("types/teams_rule_rule_settings_check_session.rs");
    include!("types/teams_rule_rule_settings_dns_resolvers.rs");
    include!("types/teams_rule_rule_settings_dns_resolvers_ipv_4.rs");
    include!("types/teams_rule_rule_settings_dns_resolvers_ipv_6.rs");
    include!("types/teams_rule_rule_settings_egress.rs");
    include!("types/teams_rule_rule_settings_l_4_override.rs");
    include!("types/teams_rule_rule_settings_notification_settings.rs");
    include!("types/teams_rule_rule_settings_payload_log.rs");
    include!("types/teams_rule_rule_settings_untrusted_cert.rs");
    include!("types/tunnel_config_config.rs");
    include!("types/tunnel_config_config_ingress_rule.rs");
    include!("types/tunnel_config_config_ingress_rule_origin_request.rs");
    include!("types/tunnel_config_config_ingress_rule_origin_request_access.rs");
    include!("types/tunnel_config_config_ingress_rule_origin_request_ip_rule.rs");
    include!("types/tunnel_config_config_origin_request.rs");
    include!("types/tunnel_config_config_origin_request_access.rs");
    include!("types/tunnel_config_config_origin_request_ip_rule.rs");
    include!("types/tunnel_config_config_warp_routing.rs");
    include!("types/user_agent_blocking_rule_configuration.rs");
    include!("types/waiting_room_additional_route.rs");
    include!("types/waiting_room_rules_rule.rs");
    include!("types/worker_script_analytics_engine_binding.rs");
    include!("types/worker_script_d_1_database_binding.rs");
    include!("types/worker_script_hyperdrive_config_binding.rs");
    include!("types/worker_script_kv_namespace_binding.rs");
    include!("types/worker_script_placement.rs");
    include!("types/worker_script_plain_text_binding.rs");
    include!("types/worker_script_queue_binding.rs");
    include!("types/worker_script_r_2_bucket_binding.rs");
    include!("types/worker_script_secret_text_binding.rs");
    include!("types/worker_script_service_binding.rs");
    include!("types/worker_script_webassembly_binding.rs");
    include!("types/workers_script_analytics_engine_binding.rs");
    include!("types/workers_script_d_1_database_binding.rs");
    include!("types/workers_script_hyperdrive_config_binding.rs");
    include!("types/workers_script_kv_namespace_binding.rs");
    include!("types/workers_script_placement.rs");
    include!("types/workers_script_plain_text_binding.rs");
    include!("types/workers_script_queue_binding.rs");
    include!("types/workers_script_r_2_bucket_binding.rs");
    include!("types/workers_script_secret_text_binding.rs");
    include!("types/workers_script_service_binding.rs");
    include!("types/workers_script_webassembly_binding.rs");
    include!("types/zero_trust_access_application_cors_header.rs");
    include!("types/zero_trust_access_application_footer_link.rs");
    include!("types/zero_trust_access_application_landing_page_design.rs");
    include!("types/zero_trust_access_application_saas_app.rs");
    include!("types/zero_trust_access_application_saas_app_custom_attribute.rs");
    include!("types/zero_trust_access_application_saas_app_custom_attribute_source.rs");
    include!("types/zero_trust_access_application_saas_app_custom_claim.rs");
    include!("types/zero_trust_access_application_saas_app_custom_claim_source.rs");
    include!(
        "types/zero_trust_access_application_saas_app_hybrid_and_implicit_options.rs"
    );
    include!("types/zero_trust_access_application_saas_app_refresh_token_option.rs");
    include!("types/zero_trust_access_application_scim_config.rs");
    include!("types/zero_trust_access_application_scim_config_authentication.rs");
    include!("types/zero_trust_access_application_scim_config_mapping.rs");
    include!("types/zero_trust_access_application_scim_config_mapping_operations.rs");
    include!("types/zero_trust_access_application_target_criteria.rs");
    include!("types/zero_trust_access_application_target_criteria_target_attribute.rs");
    include!("types/zero_trust_access_group_exclude.rs");
    include!("types/zero_trust_access_group_exclude_auth_context.rs");
    include!("types/zero_trust_access_group_exclude_azure.rs");
    include!("types/zero_trust_access_group_exclude_external_evaluation.rs");
    include!("types/zero_trust_access_group_exclude_github.rs");
    include!("types/zero_trust_access_group_exclude_gsuite.rs");
    include!("types/zero_trust_access_group_exclude_okta.rs");
    include!("types/zero_trust_access_group_exclude_saml.rs");
    include!("types/zero_trust_access_group_include.rs");
    include!("types/zero_trust_access_group_include_auth_context.rs");
    include!("types/zero_trust_access_group_include_azure.rs");
    include!("types/zero_trust_access_group_include_external_evaluation.rs");
    include!("types/zero_trust_access_group_include_github.rs");
    include!("types/zero_trust_access_group_include_gsuite.rs");
    include!("types/zero_trust_access_group_include_okta.rs");
    include!("types/zero_trust_access_group_include_saml.rs");
    include!("types/zero_trust_access_group_require.rs");
    include!("types/zero_trust_access_group_require_auth_context.rs");
    include!("types/zero_trust_access_group_require_azure.rs");
    include!("types/zero_trust_access_group_require_external_evaluation.rs");
    include!("types/zero_trust_access_group_require_github.rs");
    include!("types/zero_trust_access_group_require_gsuite.rs");
    include!("types/zero_trust_access_group_require_okta.rs");
    include!("types/zero_trust_access_group_require_saml.rs");
    include!("types/zero_trust_access_identity_provider_config.rs");
    include!("types/zero_trust_access_identity_provider_scim_config.rs");
    include!("types/zero_trust_access_mtls_hostname_settings_setting.rs");
    include!("types/zero_trust_access_organization_custom_page.rs");
    include!("types/zero_trust_access_organization_login_design.rs");
    include!("types/zero_trust_access_policy_approval_group.rs");
    include!("types/zero_trust_access_policy_connection_rules.rs");
    include!("types/zero_trust_access_policy_connection_rules_ssh.rs");
    include!("types/zero_trust_access_policy_exclude.rs");
    include!("types/zero_trust_access_policy_exclude_auth_context.rs");
    include!("types/zero_trust_access_policy_exclude_azure.rs");
    include!("types/zero_trust_access_policy_exclude_external_evaluation.rs");
    include!("types/zero_trust_access_policy_exclude_github.rs");
    include!("types/zero_trust_access_policy_exclude_gsuite.rs");
    include!("types/zero_trust_access_policy_exclude_okta.rs");
    include!("types/zero_trust_access_policy_exclude_saml.rs");
    include!("types/zero_trust_access_policy_include.rs");
    include!("types/zero_trust_access_policy_include_auth_context.rs");
    include!("types/zero_trust_access_policy_include_azure.rs");
    include!("types/zero_trust_access_policy_include_external_evaluation.rs");
    include!("types/zero_trust_access_policy_include_github.rs");
    include!("types/zero_trust_access_policy_include_gsuite.rs");
    include!("types/zero_trust_access_policy_include_okta.rs");
    include!("types/zero_trust_access_policy_include_saml.rs");
    include!("types/zero_trust_access_policy_require.rs");
    include!("types/zero_trust_access_policy_require_auth_context.rs");
    include!("types/zero_trust_access_policy_require_azure.rs");
    include!("types/zero_trust_access_policy_require_external_evaluation.rs");
    include!("types/zero_trust_access_policy_require_github.rs");
    include!("types/zero_trust_access_policy_require_gsuite.rs");
    include!("types/zero_trust_access_policy_require_okta.rs");
    include!("types/zero_trust_access_policy_require_saml.rs");
    include!("types/zero_trust_device_managed_networks_config.rs");
    include!("types/zero_trust_device_posture_integration_config.rs");
    include!("types/zero_trust_device_posture_rule_input.rs");
    include!("types/zero_trust_device_posture_rule_input_location.rs");
    include!("types/zero_trust_device_posture_rule_match.rs");
    include!("types/zero_trust_dex_test_data.rs");
    include!("types/zero_trust_dlp_profile_context_awareness.rs");
    include!("types/zero_trust_dlp_profile_context_awareness_skip.rs");
    include!("types/zero_trust_dlp_profile_entry.rs");
    include!("types/zero_trust_dlp_profile_entry_pattern.rs");
    include!("types/zero_trust_dns_location_network.rs");
    include!("types/zero_trust_gateway_policy_rule_settings.rs");
    include!("types/zero_trust_gateway_policy_rule_settings_audit_ssh.rs");
    include!("types/zero_trust_gateway_policy_rule_settings_biso_admin_controls.rs");
    include!("types/zero_trust_gateway_policy_rule_settings_check_session.rs");
    include!("types/zero_trust_gateway_policy_rule_settings_dns_resolvers.rs");
    include!("types/zero_trust_gateway_policy_rule_settings_dns_resolvers_ipv_4.rs");
    include!("types/zero_trust_gateway_policy_rule_settings_dns_resolvers_ipv_6.rs");
    include!("types/zero_trust_gateway_policy_rule_settings_egress.rs");
    include!("types/zero_trust_gateway_policy_rule_settings_l_4_override.rs");
    include!("types/zero_trust_gateway_policy_rule_settings_notification_settings.rs");
    include!("types/zero_trust_gateway_policy_rule_settings_payload_log.rs");
    include!("types/zero_trust_gateway_policy_rule_settings_untrusted_cert.rs");
    include!("types/zero_trust_gateway_settings_antivirus.rs");
    include!("types/zero_trust_gateway_settings_antivirus_notification_settings.rs");
    include!("types/zero_trust_gateway_settings_block_page.rs");
    include!("types/zero_trust_gateway_settings_body_scanning.rs");
    include!("types/zero_trust_gateway_settings_certificate.rs");
    include!("types/zero_trust_gateway_settings_custom_certificate.rs");
    include!("types/zero_trust_gateway_settings_extended_email_matching.rs");
    include!("types/zero_trust_gateway_settings_fips.rs");
    include!("types/zero_trust_gateway_settings_logging.rs");
    include!("types/zero_trust_gateway_settings_logging_settings_by_rule_type.rs");
    include!("types/zero_trust_gateway_settings_logging_settings_by_rule_type_dns.rs");
    include!("types/zero_trust_gateway_settings_logging_settings_by_rule_type_http.rs");
    include!("types/zero_trust_gateway_settings_logging_settings_by_rule_type_l_4.rs");
    include!("types/zero_trust_gateway_settings_payload_log.rs");
    include!("types/zero_trust_gateway_settings_proxy.rs");
    include!("types/zero_trust_gateway_settings_ssh_session_log.rs");
    include!("types/zero_trust_infrastructure_access_target_ip.rs");
    include!("types/zero_trust_infrastructure_access_target_ip_ipv_4.rs");
    include!("types/zero_trust_infrastructure_access_target_ip_ipv_6.rs");
    include!("types/zero_trust_list_items_with_description.rs");
    include!("types/zero_trust_local_fallback_domain_domain.rs");
    include!("types/zero_trust_risk_behavior_behavior.rs");
    include!("types/zero_trust_split_tunnel_tunnel.rs");
    include!("types/zero_trust_tunnel_cloudflared_config_config.rs");
    include!("types/zero_trust_tunnel_cloudflared_config_config_ingress_rule.rs");
    include!(
        "types/zero_trust_tunnel_cloudflared_config_config_ingress_rule_origin_request.rs"
    );
    include!(
        "types/zero_trust_tunnel_cloudflared_config_config_ingress_rule_origin_request_access.rs"
    );
    include!(
        "types/zero_trust_tunnel_cloudflared_config_config_ingress_rule_origin_request_ip_rule.rs"
    );
    include!("types/zero_trust_tunnel_cloudflared_config_config_origin_request.rs");
    include!(
        "types/zero_trust_tunnel_cloudflared_config_config_origin_request_access.rs"
    );
    include!(
        "types/zero_trust_tunnel_cloudflared_config_config_origin_request_ip_rule.rs"
    );
    include!("types/zero_trust_tunnel_cloudflared_config_config_warp_routing.rs");
    include!("types/zone_lockdown_configuration.rs");
    include!("types/zone_settings_override_initial_setting.rs");
    include!("types/zone_settings_override_initial_setting_minify.rs");
    include!("types/zone_settings_override_initial_setting_mobile_redirect.rs");
    include!("types/zone_settings_override_initial_setting_nel.rs");
    include!("types/zone_settings_override_initial_setting_security_header.rs");
    include!("types/zone_settings_override_settings.rs");
    include!("types/zone_settings_override_settings_minify.rs");
    include!("types/zone_settings_override_settings_mobile_redirect.rs");
    include!("types/zone_settings_override_settings_nel.rs");
    include!("types/zone_settings_override_settings_security_header.rs");
    include!("types/get_account_roles_role.rs");
    include!("types/get_accounts_account.rs");
    include!("types/get_device_posture_rules_rule.rs");
    include!("types/get_devices_device.rs");
    include!("types/get_dlp_datasets_dataset.rs");
    include!("types/get_gateway_app_types_app_type.rs");
    include!("types/get_gateway_categories_category.rs");
    include!("types/get_gateway_categories_category_subcategory.rs");
    include!("types/get_infrastructure_access_targets_target.rs");
    include!("types/get_infrastructure_access_targets_target_ip.rs");
    include!("types/get_infrastructure_access_targets_target_ip_ipv_4.rs");
    include!("types/get_infrastructure_access_targets_target_ip_ipv_6.rs");
    include!("types/get_lists_list.rs");
    include!("types/get_load_balancer_pools_filter.rs");
    include!("types/get_load_balancer_pools_pool.rs");
    include!("types/get_load_balancer_pools_pool_load_shedding.rs");
    include!("types/get_load_balancer_pools_pool_origin.rs");
    include!("types/get_load_balancer_pools_pool_origin_header.rs");
    include!("types/get_rulesets_filter.rs");
    include!("types/get_rulesets_ruleset.rs");
    include!("types/get_rulesets_ruleset_rule.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_autominify.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_browser_ttl.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_cache_key.rs");
    include!(
        "types/get_rulesets_ruleset_rule_action_parameters_cache_key_custom_key.rs"
    );
    include!(
        "types/get_rulesets_ruleset_rule_action_parameters_cache_key_custom_key_cookie.rs"
    );
    include!(
        "types/get_rulesets_ruleset_rule_action_parameters_cache_key_custom_key_header.rs"
    );
    include!(
        "types/get_rulesets_ruleset_rule_action_parameters_cache_key_custom_key_host.rs"
    );
    include!(
        "types/get_rulesets_ruleset_rule_action_parameters_cache_key_custom_key_query_string.rs"
    );
    include!(
        "types/get_rulesets_ruleset_rule_action_parameters_cache_key_custom_key_user.rs"
    );
    include!("types/get_rulesets_ruleset_rule_action_parameters_cache_reserve.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_edge_ttl.rs");
    include!(
        "types/get_rulesets_ruleset_rule_action_parameters_edge_ttl_status_code_ttl.rs"
    );
    include!(
        "types/get_rulesets_ruleset_rule_action_parameters_edge_ttl_status_code_ttl_status_code_range.rs"
    );
    include!("types/get_rulesets_ruleset_rule_action_parameters_from_list.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_from_value.rs");
    include!(
        "types/get_rulesets_ruleset_rule_action_parameters_from_value_target_url.rs"
    );
    include!("types/get_rulesets_ruleset_rule_action_parameters_header.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_matched_data.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_origin.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_overrides.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_overrides_category.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_overrides_rule.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_response.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_serve_stale.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_sni.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_uri.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_uri_path.rs");
    include!("types/get_rulesets_ruleset_rule_action_parameters_uri_query.rs");
    include!("types/get_rulesets_ruleset_rule_exposed_credential_check.rs");
    include!("types/get_rulesets_ruleset_rule_logging.rs");
    include!("types/get_rulesets_ruleset_rule_ratelimit.rs");
    include!("types/get_zero_trust_infrastructure_access_targets_target.rs");
    include!("types/get_zero_trust_infrastructure_access_targets_target_ip.rs");
    include!("types/get_zero_trust_infrastructure_access_targets_target_ip_ipv_4.rs");
    include!("types/get_zero_trust_infrastructure_access_targets_target_ip_ipv_6.rs");
    include!("types/get_zones_filter.rs");
    include!("types/get_zones_zone.rs");
}
#[doc(hidden)]
pub mod constants {}
mod bindings {
    wit_bindgen::generate!(
        { inline :
        r"package component:pulumi-wasm@0.0.0-DEV;

world world-cloudflare {
    import output-interface;
}

interface output-interface {

    resource output {
        constructor(value: string);
        map: func(function-name: string) -> output;
    }
    combine: func(outputs: list<borrow<output>>) -> output;
}


interface register-interface {
    use output-interface.{output};

    record object-field {
        name: string,
        value: borrow<output>
    }

    record result-field {
        name: string
    }

    record register-resource-result-field {
        name: string,
        output: output
    }

    record register-resource-request {
        %type: string,
        name: string,
        object: list<object-field>,
        results: list<result-field>
    }

    record register-resource-result {
        fields: list<register-resource-result-field>
    }

    register: func(request: register-resource-request) -> register-resource-result;

    record resource-invoke-result-field {
        name: string,
        output: output
    }

    record resource-invoke-request {
        token: string,
        object: list<object-field>,
        results: list<result-field>
    }

    record resource-invoke-result {
        fields: list<resource-invoke-result-field>
    }

    invoke: func(request: resource-invoke-request) -> resource-invoke-result;
}",
        with : { "component:pulumi-wasm/output-interface@0.0.0-DEV" :
        pulumi_wasm_wit::client_bindings::component::pulumi_wasm::output_interface } }
    );
}
