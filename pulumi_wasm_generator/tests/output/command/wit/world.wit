package pulumi:%command@0.9.2;

world main-world {
    import component:pulumi-wasm/output-interface@0.1.0;
    import component:pulumi-wasm/register-interface@0.1.0;
    export %command-local-command;
    export %command-remote-command;
    export %command-remote-copy-file;
}

world main-world-client {
    import component:pulumi-wasm/output-interface@0.1.0;
    import %command-local-command;
    import %command-remote-command;
    import %command-remote-copy-file;
}

interface output-interface {

    describe-outputs: func() -> string;
    non-done-exists: func() -> bool;

    resource output {
        constructor(value: list<u8>);
        map: func(function-name: string) -> output;
        get: func() -> option<list<u8>>;
        get-field: func(field: string) -> output;
        get-type: func() -> string;
        duplicate: func() -> output;
    }
}

interface register-interface {
    use output-interface.{output};

    record object-field {
        name: string,
        value: borrow<output>
    }

    record register-resource-request {
        %type: string,
        name: string,
        object: list<object-field>,
    }

    register: func(request: register-resource-request) -> output;
}

interface %command-local-command {

    use output-interface.{output};

    record args {
        %archive-paths: borrow<output>,
        %asset-paths: borrow<output>,
        %create: borrow<output>,
        %delete: borrow<output>,
        %dir: borrow<output>,
        %environment: borrow<output>,
        %interpreter: borrow<output>,
        %stdin: borrow<output>,
        %triggers: borrow<output>,
        %update: borrow<output>,
    }

    record res {
    }

    invoke: func(args: args) -> res;

}

interface %command-remote-command {

    use output-interface.{output};

    record args {
        %connection: borrow<output>,
        %create: borrow<output>,
        %delete: borrow<output>,
        %environment: borrow<output>,
        %stdin: borrow<output>,
        %triggers: borrow<output>,
        %update: borrow<output>,
    }

    record res {
    }

    invoke: func(args: args) -> res;

}

interface %command-remote-copy-file {

    use output-interface.{output};

    record args {
        %connection: borrow<output>,
        %local-path: borrow<output>,
        %remote-path: borrow<output>,
        %triggers: borrow<output>,
    }

    record res {
    }

    invoke: func(args: args) -> res;

}

