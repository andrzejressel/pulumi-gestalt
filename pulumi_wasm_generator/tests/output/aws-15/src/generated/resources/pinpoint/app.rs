/// Provides a Pinpoint App resource.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = app::create(
///         "example",
///         AppArgs::builder()
///             .limits(AppLimits::builder().maximumDuration(600).build_struct())
///             .name("test-app")
///             .quiet_time(
///                 AppQuietTime::builder().end("06:00").start("00:00").build_struct(),
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import Pinpoint App using the `application-id`. For example:
///
/// ```sh
/// $ pulumi import aws:pinpoint/app:App name application-id
/// ```
pub mod app {
    #[derive(pulumi_wasm_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct AppArgs {
        /// Specifies settings for invoking an AWS Lambda function that customizes a segment for a campaign
        #[builder(into, default)]
        pub campaign_hook: pulumi_wasm_rust::InputOrOutput<
            Option<super::super::types::pinpoint::AppCampaignHook>,
        >,
        /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
        #[builder(into, default)]
        pub limits: pulumi_wasm_rust::InputOrOutput<
            Option<super::super::types::pinpoint::AppLimits>,
        >,
        /// The application name. By default generated by Pulumi
        #[builder(into, default)]
        pub name: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// The name of the Pinpoint application. Conflicts with `name`
        #[builder(into, default)]
        pub name_prefix: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
        #[builder(into, default)]
        pub quiet_time: pulumi_wasm_rust::InputOrOutput<
            Option<super::super::types::pinpoint::AppQuietTime>,
        >,
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        #[builder(into, default)]
        pub tags: pulumi_wasm_rust::InputOrOutput<
            Option<std::collections::HashMap<String, String>>,
        >,
    }
    #[allow(dead_code)]
    pub struct AppResult {
        /// The Application ID of the Pinpoint App.
        pub application_id: pulumi_wasm_rust::Output<String>,
        /// Amazon Resource Name (ARN) of the PinPoint Application
        pub arn: pulumi_wasm_rust::Output<String>,
        /// Specifies settings for invoking an AWS Lambda function that customizes a segment for a campaign
        pub campaign_hook: pulumi_wasm_rust::Output<
            Option<super::super::types::pinpoint::AppCampaignHook>,
        >,
        /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own
        pub limits: pulumi_wasm_rust::Output<
            Option<super::super::types::pinpoint::AppLimits>,
        >,
        /// The application name. By default generated by Pulumi
        pub name: pulumi_wasm_rust::Output<String>,
        /// The name of the Pinpoint application. Conflicts with `name`
        pub name_prefix: pulumi_wasm_rust::Output<String>,
        /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own
        pub quiet_time: pulumi_wasm_rust::Output<
            Option<super::super::types::pinpoint::AppQuietTime>,
        >,
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        pub tags: pulumi_wasm_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        pub tags_all: pulumi_wasm_rust::Output<
            std::collections::HashMap<String, String>,
        >,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_wasm_rust::PulumiContext,
        name: &str,
        args: AppArgs,
    ) -> AppResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let campaign_hook_binding = args.campaign_hook.get_output(context).get_inner();
        let limits_binding = args.limits.get_output(context).get_inner();
        let name_binding = args.name.get_output(context).get_inner();
        let name_prefix_binding = args.name_prefix.get_output(context).get_inner();
        let quiet_time_binding = args.quiet_time.get_output(context).get_inner();
        let tags_binding = args.tags.get_output(context).get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "aws:pinpoint/app:App".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "campaignHook".into(),
                    value: &campaign_hook_binding,
                },
                register_interface::ObjectField {
                    name: "limits".into(),
                    value: &limits_binding,
                },
                register_interface::ObjectField {
                    name: "name".into(),
                    value: &name_binding,
                },
                register_interface::ObjectField {
                    name: "namePrefix".into(),
                    value: &name_prefix_binding,
                },
                register_interface::ObjectField {
                    name: "quietTime".into(),
                    value: &quiet_time_binding,
                },
                register_interface::ObjectField {
                    name: "tags".into(),
                    value: &tags_binding,
                },
            ]),
            results: Vec::from([
                register_interface::ResultField {
                    name: "applicationId".into(),
                },
                register_interface::ResultField {
                    name: "arn".into(),
                },
                register_interface::ResultField {
                    name: "campaignHook".into(),
                },
                register_interface::ResultField {
                    name: "limits".into(),
                },
                register_interface::ResultField {
                    name: "name".into(),
                },
                register_interface::ResultField {
                    name: "namePrefix".into(),
                },
                register_interface::ResultField {
                    name: "quietTime".into(),
                },
                register_interface::ResultField {
                    name: "tags".into(),
                },
                register_interface::ResultField {
                    name: "tagsAll".into(),
                },
            ]),
        };
        let o = register_interface::register(context.get_inner(), &request);
        let mut hashmap: HashMap<String, _> = o
            .fields
            .into_iter()
            .map(|f| (f.name, f.output))
            .collect();
        AppResult {
            application_id: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("applicationId").unwrap(),
            ),
            arn: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("arn").unwrap(),
            ),
            campaign_hook: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("campaignHook").unwrap(),
            ),
            limits: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("limits").unwrap(),
            ),
            name: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("name").unwrap(),
            ),
            name_prefix: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("namePrefix").unwrap(),
            ),
            quiet_time: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("quietTime").unwrap(),
            ),
            tags: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("tags").unwrap(),
            ),
            tags_all: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("tagsAll").unwrap(),
            ),
        }
    }
}
