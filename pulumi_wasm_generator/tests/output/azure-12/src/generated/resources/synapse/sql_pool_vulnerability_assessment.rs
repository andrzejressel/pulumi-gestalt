/// Manages the Vulnerability Assessment for a Synapse SQL Pool.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   example:
///     type: azure:core:ResourceGroup
///     properties:
///       name: example-resources
///       location: West Europe
///   exampleAccount:
///     type: azure:storage:Account
///     name: example
///     properties:
///       name: examplestorageacc
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       accountTier: Standard
///       accountReplicationType: LRS
///       accountKind: StorageV2
///       isHnsEnabled: 'true'
///   exampleContainer:
///     type: azure:storage:Container
///     name: example
///     properties:
///       name: example
///       storageAccountName: ${exampleAccount.name}
///   exampleDataLakeGen2Filesystem:
///     type: azure:storage:DataLakeGen2Filesystem
///     name: example
///     properties:
///       name: example
///       storageAccountId: ${exampleAccount.id}
///   exampleWorkspace:
///     type: azure:synapse:Workspace
///     name: example
///     properties:
///       name: example
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       storageDataLakeGen2FilesystemId: ${exampleDataLakeGen2Filesystem.id}
///       sqlAdministratorLogin: sqladminuser
///       sqlAdministratorLoginPassword: H@Sh1CoR3!
///       aadAdmin:
///         - login: AzureAD Admin
///           objectId: 00000000-0000-0000-0000-000000000000
///           tenantId: 00000000-0000-0000-0000-000000000000
///       identity:
///         type: SystemAssigned
///       tags:
///         Env: production
///   exampleSqlPool:
///     type: azure:synapse:SqlPool
///     name: example
///     properties:
///       name: examplesqlpool
///       synapseWorkspaceId: ${exampleWorkspace.id}
///       skuName: DW100c
///       createMode: Default
///   auditLogs:
///     type: azure:storage:Account
///     name: audit_logs
///     properties:
///       name: examplesa
///       resourceGroupName: ${example.name}
///       location: ${example.location}
///       accountTier: Standard
///       accountReplicationType: LRS
///   exampleSqlPoolSecurityAlertPolicy:
///     type: azure:synapse:SqlPoolSecurityAlertPolicy
///     name: example
///     properties:
///       sqlPoolId: ${exampleSqlPool.id}
///       policyState: Enabled
///       storageEndpoint: ${auditLogs.primaryBlobEndpoint}
///       storageAccountAccessKey: ${auditLogs.primaryAccessKey}
///       disabledAlerts:
///         - Sql_Injection
///         - Data_Exfiltration
///       retentionDays: 20
///   exampleSqlPoolVulnerabilityAssessment:
///     type: azure:synapse:SqlPoolVulnerabilityAssessment
///     name: example
///     properties:
///       sqlPoolSecurityAlertPolicyId: ${exampleSqlPoolSecurityAlertPolicy.id}
///       storageContainerPath: ${exampleAccount.primaryBlobEndpoint}${exampleContainer.name}/
///       storageAccountAccessKey: ${exampleAccount.primaryAccessKey}
///       recurringScans:
///         enabled: true
///         emails:
///           - email@example1.com
///           - email@example2.com
/// ```
///
/// ## Import
///
/// Synapse SQL Pool Vulnerability Assessment can be imported using the `resource id`, e.g.
///
/// ```sh
/// $ pulumi import azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/vulnerabilityAssessments/default
/// ```
///
pub mod sql_pool_vulnerability_assessment {
    #[derive(pulumi_wasm_rust::__private::bon::Builder, Clone)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct SqlPoolVulnerabilityAssessmentArgs {
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        #[builder(into, default)]
        pub recurring_scans: pulumi_wasm_rust::Output<
            Option<
                super::super::types::synapse::SqlPoolVulnerabilityAssessmentRecurringScans,
            >,
        >,
        /// The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        #[builder(into)]
        pub sql_pool_security_alert_policy_id: pulumi_wasm_rust::Output<String>,
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        #[builder(into, default)]
        pub storage_account_access_key: pulumi_wasm_rust::Output<Option<String>>,
        /// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        #[builder(into)]
        pub storage_container_path: pulumi_wasm_rust::Output<String>,
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        #[builder(into, default)]
        pub storage_container_sas_key: pulumi_wasm_rust::Output<Option<String>>,
    }
    #[allow(dead_code)]
    pub struct SqlPoolVulnerabilityAssessmentResult {
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        pub recurring_scans: pulumi_wasm_rust::Output<
            super::super::types::synapse::SqlPoolVulnerabilityAssessmentRecurringScans,
        >,
        /// The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        pub sql_pool_security_alert_policy_id: pulumi_wasm_rust::Output<String>,
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        pub storage_account_access_key: pulumi_wasm_rust::Output<Option<String>>,
        /// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
        pub storage_container_path: pulumi_wasm_rust::Output<String>,
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        pub storage_container_sas_key: pulumi_wasm_rust::Output<Option<String>>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        name: &str,
        args: SqlPoolVulnerabilityAssessmentArgs,
    ) -> SqlPoolVulnerabilityAssessmentResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let recurring_scans_binding = args.recurring_scans.get_inner();
        let sql_pool_security_alert_policy_id_binding = args
            .sql_pool_security_alert_policy_id
            .get_inner();
        let storage_account_access_key_binding = args
            .storage_account_access_key
            .get_inner();
        let storage_container_path_binding = args.storage_container_path.get_inner();
        let storage_container_sas_key_binding = args
            .storage_container_sas_key
            .get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment"
                .into(),
            name: name.to_string(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "recurringScans".into(),
                    value: &recurring_scans_binding,
                },
                register_interface::ObjectField {
                    name: "sqlPoolSecurityAlertPolicyId".into(),
                    value: &sql_pool_security_alert_policy_id_binding,
                },
                register_interface::ObjectField {
                    name: "storageAccountAccessKey".into(),
                    value: &storage_account_access_key_binding,
                },
                register_interface::ObjectField {
                    name: "storageContainerPath".into(),
                    value: &storage_container_path_binding,
                },
                register_interface::ObjectField {
                    name: "storageContainerSasKey".into(),
                    value: &storage_container_sas_key_binding,
                },
            ]),
            results: Vec::from([
                register_interface::ResultField {
                    name: "recurringScans".into(),
                },
                register_interface::ResultField {
                    name: "sqlPoolSecurityAlertPolicyId".into(),
                },
                register_interface::ResultField {
                    name: "storageAccountAccessKey".into(),
                },
                register_interface::ResultField {
                    name: "storageContainerPath".into(),
                },
                register_interface::ResultField {
                    name: "storageContainerSasKey".into(),
                },
            ]),
        };
        let o = register_interface::register(&request);
        let mut hashmap: HashMap<String, _> = o
            .fields
            .into_iter()
            .map(|f| (f.name, f.output))
            .collect();
        SqlPoolVulnerabilityAssessmentResult {
            recurring_scans: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("recurringScans").unwrap(),
            ),
            sql_pool_security_alert_policy_id: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("sqlPoolSecurityAlertPolicyId").unwrap(),
            ),
            storage_account_access_key: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("storageAccountAccessKey").unwrap(),
            ),
            storage_container_path: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("storageContainerPath").unwrap(),
            ),
            storage_container_sas_key: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("storageContainerSasKey").unwrap(),
            ),
        }
    }
}
