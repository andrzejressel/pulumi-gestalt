/// A representation of an ExternalAccountKey used for external account binding within ACME.
///
///
/// To get more information about ExternalAccountKey, see:
///
/// * [API documentation](https://cloud.google.com/certificate-manager/docs/reference/public-ca/rest/v1/projects.locations.externalAccountKeys/create)
/// * How-to Guides
///     * [Official Documentation](https://cloud.google.com/certificate-manager/docs/public-ca)
///     * [Request Certificate Using Public CA](https://cloud.google.com/certificate-manager/docs/public-ca-tutorial)
///     * [Request EAB key ID and HMAC](https://cloud.google.com/certificate-manager/docs/public-ca-tutorial#request-key-hmac)
///
/// > **Warning:** This resource is create-only and could not be read from the API.
/// On delete, the resource would be removed from the state.
/// You must use an EAB secret within 7 days of obtaining it.
/// The EAB secret is invalidated if you don't use it within 7 days.
/// The ACME account registered by using an EAB secret has no expiration.
///
///
///
/// ## Example Usage
///
/// ### Public Ca External Account Key
///
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let prod = ca_external_account_key::create(
///         "prod",
///         CaExternalAccountKeyArgs::builder().project("my-project-name").build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// This resource does not support import.
///
pub mod ca_external_account_key {
    #[derive(pulumi_wasm_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct CaExternalAccountKeyArgs {
        /// Location for the externalAccountKey. Currently only `global` is supported.
        #[builder(into, default)]
        pub location: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        #[builder(into, default)]
        pub project: pulumi_wasm_rust::InputOrOutput<Option<String>>,
    }
    #[allow(dead_code)]
    pub struct CaExternalAccountKeyResult {
        /// Base64-URL-encoded HS256 key. It is generated by the PublicCertificateAuthorityService
        /// when the ExternalAccountKey is created.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        pub b64_mac_key: pulumi_wasm_rust::Output<String>,
        /// It is generated by the PublicCertificateAuthorityService when the ExternalAccountKey is created.
        /// **Note**: This property is sensitive and will not be displayed in the plan.
        pub key_id: pulumi_wasm_rust::Output<String>,
        /// Location for the externalAccountKey. Currently only `global` is supported.
        pub location: pulumi_wasm_rust::Output<Option<String>>,
        /// Resource name. projects/{project}/locations/{location}/externalAccountKeys/{keyId}.
        pub name: pulumi_wasm_rust::Output<String>,
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        pub project: pulumi_wasm_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_wasm_rust::PulumiContext,
        name: &str,
        args: CaExternalAccountKeyArgs,
    ) -> CaExternalAccountKeyResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let location_binding = args.location.get_output(context).get_inner();
        let project_binding = args.project.get_output(context).get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "gcp:compute/caExternalAccountKey:CaExternalAccountKey".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "location".into(),
                    value: &location_binding,
                },
                register_interface::ObjectField {
                    name: "project".into(),
                    value: &project_binding,
                },
            ]),
            results: Vec::from([
                register_interface::ResultField {
                    name: "b64MacKey".into(),
                },
                register_interface::ResultField {
                    name: "keyId".into(),
                },
                register_interface::ResultField {
                    name: "location".into(),
                },
                register_interface::ResultField {
                    name: "name".into(),
                },
                register_interface::ResultField {
                    name: "project".into(),
                },
            ]),
        };
        let o = register_interface::register(context.get_inner(), &request);
        let mut hashmap: HashMap<String, _> = o
            .fields
            .into_iter()
            .map(|f| (f.name, f.output))
            .collect();
        CaExternalAccountKeyResult {
            b64_mac_key: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("b64MacKey").unwrap(),
            ),
            key_id: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("keyId").unwrap(),
            ),
            location: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("location").unwrap(),
            ),
            name: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("name").unwrap(),
            ),
            project: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("project").unwrap(),
            ),
        }
    }
}
