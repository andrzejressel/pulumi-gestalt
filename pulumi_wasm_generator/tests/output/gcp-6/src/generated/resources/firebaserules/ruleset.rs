/// For more information, see:
/// * [Get started with Firebase Security Rules](https://firebase.google.com/docs/rules/get-started)
/// ## Example Usage
///
/// ### Basic_ruleset
/// Creates a basic Firestore ruleset
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let primary = ruleset::create(
///         "primary",
///         RulesetArgs::builder()
///             .project("my-project-name")
///             .source(
///                 RulesetSource::builder()
///                     .files(
///                         vec![
///                             RulesetSourceFile::builder()
///                             .content("service cloud.firestore {match /databases/{database}/documents { match /{document=**} { allow read, write: if false; } } }")
///                             .fingerprint("").name("firestore.rules").build_struct(),
///                         ],
///                     )
///                     .language("")
///                     .build_struct(),
///             )
///             .build_struct(),
///     );
/// }
/// ```
/// ### Minimal_ruleset
/// Creates a minimal Firestore ruleset
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let primary = ruleset::create(
///         "primary",
///         RulesetArgs::builder()
///             .project("my-project-name")
///             .source(
///                 RulesetSource::builder()
///                     .files(
///                         vec![
///                             RulesetSourceFile::builder()
///                             .content("service cloud.firestore {match /databases/{database}/documents { match /{document=**} { allow read, write: if false; } } }")
///                             .name("firestore.rules").build_struct(),
///                         ],
///                     )
///                     .build_struct(),
///             )
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Ruleset can be imported using any of these accepted formats:
///
/// * `projects/{{project}}/rulesets/{{name}}`
///
/// * `{{project}}/{{name}}`
///
/// * `{{name}}`
///
/// When using the `pulumi import` command, Ruleset can be imported using one of the formats above. For example:
///
/// ```sh
/// $ pulumi import gcp:firebaserules/ruleset:Ruleset default projects/{{project}}/rulesets/{{name}}
/// ```
///
/// ```sh
/// $ pulumi import gcp:firebaserules/ruleset:Ruleset default {{project}}/{{name}}
/// ```
///
/// ```sh
/// $ pulumi import gcp:firebaserules/ruleset:Ruleset default {{name}}
/// ```
///
pub mod ruleset {
    #[derive(pulumi_wasm_rust::__private::bon::Builder, Clone)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct RulesetArgs {
        /// The project for the resource
        #[builder(into, default)]
        pub project: pulumi_wasm_rust::Output<Option<String>>,
        /// `Source` for the `Ruleset`.
        #[builder(into)]
        pub source: pulumi_wasm_rust::Output<
            super::super::types::firebaserules::RulesetSource,
        >,
    }
    #[allow(dead_code)]
    pub struct RulesetResult {
        /// Output only. Time the `Ruleset` was created.
        pub create_time: pulumi_wasm_rust::Output<String>,
        /// Output only. The metadata for this ruleset.
        pub metadatas: pulumi_wasm_rust::Output<
            Vec<super::super::types::firebaserules::RulesetMetadata>,
        >,
        /// Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`
        pub name: pulumi_wasm_rust::Output<String>,
        /// The project for the resource
        pub project: pulumi_wasm_rust::Output<String>,
        /// `Source` for the `Ruleset`.
        pub source: pulumi_wasm_rust::Output<
            super::super::types::firebaserules::RulesetSource,
        >,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(name: &str, args: RulesetArgs) -> RulesetResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let project_binding = args.project.get_inner();
        let source_binding = args.source.get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "gcp:firebaserules/ruleset:Ruleset".into(),
            name: name.to_string(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "project".into(),
                    value: &project_binding,
                },
                register_interface::ObjectField {
                    name: "source".into(),
                    value: &source_binding,
                },
            ]),
            results: Vec::from([
                register_interface::ResultField {
                    name: "createTime".into(),
                },
                register_interface::ResultField {
                    name: "metadatas".into(),
                },
                register_interface::ResultField {
                    name: "name".into(),
                },
                register_interface::ResultField {
                    name: "project".into(),
                },
                register_interface::ResultField {
                    name: "source".into(),
                },
            ]),
        };
        let o = register_interface::register(&request);
        let mut hashmap: HashMap<String, _> = o
            .fields
            .into_iter()
            .map(|f| (f.name, f.output))
            .collect();
        RulesetResult {
            create_time: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("createTime").unwrap(),
            ),
            metadatas: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("metadatas").unwrap(),
            ),
            name: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("name").unwrap(),
            ),
            project: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("project").unwrap(),
            ),
            source: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("source").unwrap(),
            ),
        }
    }
}
