/// Resource for managing an AWS Security Lake Data Lake.
///
/// > **NOTE:** The underlying `aws.securitylake.DataLake` must be configured before creating other Security Lake resources. Use a `depends_on` statement.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = data_lake::create(
///         "example",
///         DataLakeArgs::builder()
///             .configuration(
///                 DataLakeConfiguration::builder()
///                     .encryptionConfigurations(
///                         vec![
///                             DataLakeConfigurationEncryptionConfiguration::builder()
///                             .kmsKeyId("S3_MANAGED_KEY").build_struct(),
///                         ],
///                     )
///                     .lifecycleConfiguration(
///                         DataLakeConfigurationLifecycleConfiguration::builder()
///                             .expiration(
///                                 DataLakeConfigurationLifecycleConfigurationExpiration::builder()
///                                     .days(300)
///                                     .build_struct(),
///                             )
///                             .transitions(
///                                 vec![
///                                     DataLakeConfigurationLifecycleConfigurationTransition::builder()
///                                     .days(31).storageClass("STANDARD_IA").build_struct(),
///                                     DataLakeConfigurationLifecycleConfigurationTransition::builder()
///                                     .days(80).storageClass("ONEZONE_IA").build_struct(),
///                                 ],
///                             )
///                             .build_struct(),
///                     )
///                     .region("eu-west-1")
///                     .build_struct(),
///             )
///             .meta_store_manager_role_arn("${metaStoreManager.arn}")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ### Basic Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = data_lake::create(
///         "example",
///         DataLakeArgs::builder()
///             .configuration(
///                 DataLakeConfiguration::builder()
///                     .encryptionConfigurations(
///                         vec![
///                             DataLakeConfigurationEncryptionConfiguration::builder()
///                             .kmsKeyId("S3_MANAGED_KEY").build_struct(),
///                         ],
///                     )
///                     .region("eu-west-1")
///                     .build_struct(),
///             )
///             .meta_store_manager_role_arn("${metaStoreManager.arn}")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import Security Hub standards subscriptions using the standards subscription ARN. For example:
///
/// ```sh
/// $ pulumi import aws:securitylake/dataLake:DataLake example arn:aws:securitylake:eu-west-1:123456789012:data-lake/default
/// ```
pub mod data_lake {
    #[derive(pulumi_wasm_rust::__private::bon::Builder, Clone)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct DataLakeArgs {
        /// Specify the Region or Regions that will contribute data to the rollup region.
        #[builder(into, default)]
        pub configuration: pulumi_wasm_rust::Output<
            Option<super::super::types::securitylake::DataLakeConfiguration>,
        >,
        /// The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
        #[builder(into)]
        pub meta_store_manager_role_arn: pulumi_wasm_rust::Output<String>,
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        #[builder(into, default)]
        pub tags: pulumi_wasm_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        #[builder(into, default)]
        pub timeouts: pulumi_wasm_rust::Output<
            Option<super::super::types::securitylake::DataLakeTimeouts>,
        >,
    }
    #[allow(dead_code)]
    pub struct DataLakeResult {
        /// ARN of the Data Lake.
        pub arn: pulumi_wasm_rust::Output<String>,
        /// Specify the Region or Regions that will contribute data to the rollup region.
        pub configuration: pulumi_wasm_rust::Output<
            Option<super::super::types::securitylake::DataLakeConfiguration>,
        >,
        /// The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources.
        pub meta_store_manager_role_arn: pulumi_wasm_rust::Output<String>,
        /// The ARN for the Amazon Security Lake Amazon S3 bucket.
        pub s3_bucket_arn: pulumi_wasm_rust::Output<String>,
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        pub tags: pulumi_wasm_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        pub tags_all: pulumi_wasm_rust::Output<
            std::collections::HashMap<String, String>,
        >,
        pub timeouts: pulumi_wasm_rust::Output<
            Option<super::super::types::securitylake::DataLakeTimeouts>,
        >,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(name: &str, args: DataLakeArgs) -> DataLakeResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let configuration_binding = args.configuration.get_inner();
        let meta_store_manager_role_arn_binding = args
            .meta_store_manager_role_arn
            .get_inner();
        let tags_binding = args.tags.get_inner();
        let timeouts_binding = args.timeouts.get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "aws:securitylake/dataLake:DataLake".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "configuration".into(),
                    value: &configuration_binding,
                },
                register_interface::ObjectField {
                    name: "metaStoreManagerRoleArn".into(),
                    value: &meta_store_manager_role_arn_binding,
                },
                register_interface::ObjectField {
                    name: "tags".into(),
                    value: &tags_binding,
                },
                register_interface::ObjectField {
                    name: "timeouts".into(),
                    value: &timeouts_binding,
                },
            ]),
            results: Vec::from([
                register_interface::ResultField {
                    name: "arn".into(),
                },
                register_interface::ResultField {
                    name: "configuration".into(),
                },
                register_interface::ResultField {
                    name: "metaStoreManagerRoleArn".into(),
                },
                register_interface::ResultField {
                    name: "s3BucketArn".into(),
                },
                register_interface::ResultField {
                    name: "tags".into(),
                },
                register_interface::ResultField {
                    name: "tagsAll".into(),
                },
                register_interface::ResultField {
                    name: "timeouts".into(),
                },
            ]),
        };
        let o = register_interface::register(&request);
        let mut hashmap: HashMap<String, _> = o
            .fields
            .into_iter()
            .map(|f| (f.name, f.output))
            .collect();
        DataLakeResult {
            arn: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("arn").unwrap(),
            ),
            configuration: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("configuration").unwrap(),
            ),
            meta_store_manager_role_arn: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("metaStoreManagerRoleArn").unwrap(),
            ),
            s3_bucket_arn: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("s3BucketArn").unwrap(),
            ),
            tags: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("tags").unwrap(),
            ),
            tags_all: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("tagsAll").unwrap(),
            ),
            timeouts: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("timeouts").unwrap(),
            ),
        }
    }
}
