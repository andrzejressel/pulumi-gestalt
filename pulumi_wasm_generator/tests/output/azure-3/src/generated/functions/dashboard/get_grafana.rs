pub mod get_grafana {
    #[derive(pulumi_wasm_rust::__private::bon::Builder, Clone)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct GetGrafanaArgs {
        /// The managed identity of the grafana resource.
        #[builder(into, default)]
        pub identity: pulumi_wasm_rust::Output<
            Option<super::super::super::types::dashboard::GetGrafanaIdentity>,
        >,
        /// Name of the grafana dashboard.
        #[builder(into)]
        pub name: pulumi_wasm_rust::Output<String>,
        /// Name of the resource group where resource belongs to.
        #[builder(into)]
        pub resource_group_name: pulumi_wasm_rust::Output<String>,
    }
    #[allow(dead_code)]
    pub struct GetGrafanaResult {
        /// Whether the api key setting of the Grafana instance is enabled.
        pub api_key_enabled: pulumi_wasm_rust::Output<bool>,
        /// Scope for dns deterministic name hash calculation.
        pub auto_generated_domain_name_label_scope: pulumi_wasm_rust::Output<String>,
        /// Integrations for Azure Monitor Workspace.
        pub azure_monitor_workspace_integrations: pulumi_wasm_rust::Output<
            Vec<
                super::super::super::types::dashboard::GetGrafanaAzureMonitorWorkspaceIntegration,
            >,
        >,
        /// Whether the Grafana instance uses deterministic outbound IPs.
        pub deterministic_outbound_ip_enabled: pulumi_wasm_rust::Output<bool>,
        /// The endpoint of the Grafana instance.
        pub endpoint: pulumi_wasm_rust::Output<String>,
        /// Major version of Grafana instance.
        pub grafana_major_version: pulumi_wasm_rust::Output<String>,
        /// The full Grafana software semantic version deployed.
        pub grafana_version: pulumi_wasm_rust::Output<String>,
        /// The provider-assigned unique ID for this managed resource.
        pub id: pulumi_wasm_rust::Output<String>,
        /// The managed identity of the grafana resource.
        pub identity: pulumi_wasm_rust::Output<
            Option<super::super::super::types::dashboard::GetGrafanaIdentity>,
        >,
        /// Azure location where the resource exists.
        pub location: pulumi_wasm_rust::Output<String>,
        pub name: pulumi_wasm_rust::Output<String>,
        pub outbound_ips: pulumi_wasm_rust::Output<Vec<String>>,
        /// Whether or not public endpoint access is allowed for this server.
        pub public_network_access_enabled: pulumi_wasm_rust::Output<bool>,
        pub resource_group_name: pulumi_wasm_rust::Output<String>,
        /// The name of the SKU used for the Grafana instance.
        pub sku: pulumi_wasm_rust::Output<String>,
        /// A mapping of tags to assigned to the resource.
        pub tags: pulumi_wasm_rust::Output<std::collections::HashMap<String, String>>,
        /// The zone redundancy setting of the Grafana instance.
        pub zone_redundancy_enabled: pulumi_wasm_rust::Output<bool>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn invoke(args: GetGrafanaArgs) -> GetGrafanaResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let identity_binding = args.identity.get_inner();
        let name_binding = args.name.get_inner();
        let resource_group_name_binding = args.resource_group_name.get_inner();
        let request = register_interface::ResourceInvokeRequest {
            token: "azure:dashboard/getGrafana:getGrafana".into(),
            version: super::super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "identity".into(),
                    value: &identity_binding,
                },
                register_interface::ObjectField {
                    name: "name".into(),
                    value: &name_binding,
                },
                register_interface::ObjectField {
                    name: "resourceGroupName".into(),
                    value: &resource_group_name_binding,
                },
            ]),
            results: Vec::from([
                register_interface::ResultField {
                    name: "apiKeyEnabled".into(),
                },
                register_interface::ResultField {
                    name: "autoGeneratedDomainNameLabelScope".into(),
                },
                register_interface::ResultField {
                    name: "azureMonitorWorkspaceIntegrations".into(),
                },
                register_interface::ResultField {
                    name: "deterministicOutboundIpEnabled".into(),
                },
                register_interface::ResultField {
                    name: "endpoint".into(),
                },
                register_interface::ResultField {
                    name: "grafanaMajorVersion".into(),
                },
                register_interface::ResultField {
                    name: "grafanaVersion".into(),
                },
                register_interface::ResultField {
                    name: "id".into(),
                },
                register_interface::ResultField {
                    name: "identity".into(),
                },
                register_interface::ResultField {
                    name: "location".into(),
                },
                register_interface::ResultField {
                    name: "name".into(),
                },
                register_interface::ResultField {
                    name: "outboundIps".into(),
                },
                register_interface::ResultField {
                    name: "publicNetworkAccessEnabled".into(),
                },
                register_interface::ResultField {
                    name: "resourceGroupName".into(),
                },
                register_interface::ResultField {
                    name: "sku".into(),
                },
                register_interface::ResultField {
                    name: "tags".into(),
                },
                register_interface::ResultField {
                    name: "zoneRedundancyEnabled".into(),
                },
            ]),
        };
        let o = register_interface::invoke(&request);
        let mut hashmap: HashMap<String, _> = o
            .fields
            .into_iter()
            .map(|f| (f.name, f.output))
            .collect();
        GetGrafanaResult {
            api_key_enabled: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("apiKeyEnabled").unwrap(),
            ),
            auto_generated_domain_name_label_scope: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("autoGeneratedDomainNameLabelScope").unwrap(),
            ),
            azure_monitor_workspace_integrations: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("azureMonitorWorkspaceIntegrations").unwrap(),
            ),
            deterministic_outbound_ip_enabled: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("deterministicOutboundIpEnabled").unwrap(),
            ),
            endpoint: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("endpoint").unwrap(),
            ),
            grafana_major_version: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("grafanaMajorVersion").unwrap(),
            ),
            grafana_version: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("grafanaVersion").unwrap(),
            ),
            id: pulumi_wasm_rust::__private::into_domain(hashmap.remove("id").unwrap()),
            identity: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("identity").unwrap(),
            ),
            location: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("location").unwrap(),
            ),
            name: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("name").unwrap(),
            ),
            outbound_ips: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("outboundIps").unwrap(),
            ),
            public_network_access_enabled: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("publicNetworkAccessEnabled").unwrap(),
            ),
            resource_group_name: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("resourceGroupName").unwrap(),
            ),
            sku: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("sku").unwrap(),
            ),
            tags: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("tags").unwrap(),
            ),
            zone_redundancy_enabled: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("zoneRedundancyEnabled").unwrap(),
            ),
        }
    }
}
