/// The resource `random.RandomBytes` generates random bytes that are intended to be used as a secret, or key. Use this in preference to `random.RandomId` when the output is considered sensitive, and should not be displayed in the CLI.
///
/// ## Example Usage
///
/// ```yaml
/// resources:
///   jwtSecretRandomBytes:
///     type: random:RandomBytes
///     properties:
///       length: 64
///   jwtSecretSecret:
///     type: azure:keyvault:Secret
///     properties:
///       keyVaultId: some-azure-key-vault-id
///       value: ${jwtSecretRandomBytes.base64}
/// ```
///
/// ## Import
///
/// Random bytes can be imported by specifying the value as base64 string.
///
/// ```sh
///  $ pulumi import random:index/randomBytes:RandomBytes basic "8/fu3q+2DcgSJ19i0jZ5Cw=="
/// ```
///
///
pub mod random_bytes {
    #[derive(pulumi_wasm_rust::__private::bon::Builder, Clone)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct RandomBytesArgs {
        /// Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
        #[builder(into, default)]
        pub keepers: pulumi_wasm_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        /// The number of bytes requested. The minimum value for length is 1.
        #[builder(into)]
        pub length: pulumi_wasm_rust::Output<i32>,
    }
    #[allow(dead_code)]
    pub struct RandomBytesResult {
        /// The generated bytes presented in base64 string format.
        pub base64: pulumi_wasm_rust::Output<String>,
        /// The generated bytes presented in hex string format.
        pub hex: pulumi_wasm_rust::Output<String>,
        /// Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for more information.
        pub keepers: pulumi_wasm_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        /// The number of bytes requested. The minimum value for length is 1.
        pub length: pulumi_wasm_rust::Output<i32>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(name: &str, args: RandomBytesArgs) -> RandomBytesResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let keepers_binding = args.keepers.get_inner();
        let length_binding = args.length.get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "random:index/randomBytes:RandomBytes".into(),
            name: name.to_string(),
            version: super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "keepers".into(),
                    value: &keepers_binding,
                },
                register_interface::ObjectField {
                    name: "length".into(),
                    value: &length_binding,
                },
            ]),
            results: Vec::from([
                register_interface::ResultField {
                    name: "base64".into(),
                },
                register_interface::ResultField {
                    name: "hex".into(),
                },
                register_interface::ResultField {
                    name: "keepers".into(),
                },
                register_interface::ResultField {
                    name: "length".into(),
                },
            ]),
        };
        let o = register_interface::register(&request);
        let mut hashmap: HashMap<String, _> = o
            .fields
            .into_iter()
            .map(|f| (f.name, f.output))
            .collect();
        RandomBytesResult {
            base64: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("base64").unwrap(),
            ),
            hex: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("hex").unwrap(),
            ),
            keepers: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("keepers").unwrap(),
            ),
            length: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("length").unwrap(),
            ),
        }
    }
}
