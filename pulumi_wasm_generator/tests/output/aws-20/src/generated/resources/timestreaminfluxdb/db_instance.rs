/// Resource for managing an Amazon Timestream for InfluxDB database instance.
///
/// ## Example Usage
///
/// ### Basic Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = db_instance::create(
///         "example",
///         DbInstanceArgs::builder()
///             .allocated_storage(20)
///             .bucket("example-bucket-name")
///             .db_instance_type("db.influx.medium")
///             .name("example-db-instance")
///             .organization("organization")
///             .password("example-password")
///             .username("admin")
///             .vpc_security_group_ids(vec!["${exampleAwsSecurityGroup.id}",])
///             .vpc_subnet_ids(vec!["${exampleid}",])
///             .build_struct(),
///     );
/// }
/// ```
///
/// ### Usage with Prerequisite Resources
///
/// All Timestream for InfluxDB instances require a VPC, subnet, and security group. The following example shows how these prerequisite resources can be created and used with `aws.timestreaminfluxdb.DbInstance`.
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = vpc::create(
///         "example",
///         VpcArgs::builder().cidr_block("10.0.0.0/16").build_struct(),
///     );
///     let exampleDbInstance = db_instance::create(
///         "exampleDbInstance",
///         DbInstanceArgs::builder()
///             .allocated_storage(20)
///             .bucket("example-bucket-name")
///             .db_instance_type("db.influx.medium")
///             .name("example-db-instance")
///             .organization("organization")
///             .password("example-password")
///             .username("admin")
///             .vpc_security_group_ids(vec!["${exampleSecurityGroup.id}",])
///             .vpc_subnet_ids(vec!["${exampleSubnet.id}",])
///             .build_struct(),
///     );
///     let exampleSecurityGroup = security_group::create(
///         "exampleSecurityGroup",
///         SecurityGroupArgs::builder()
///             .name("example")
///             .vpc_id("${example.id}")
///             .build_struct(),
///     );
///     let exampleSubnet = subnet::create(
///         "exampleSubnet",
///         SubnetArgs::builder()
///             .cidr_block("10.0.1.0/24")
///             .vpc_id("${example.id}")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ### Usage with S3 Log Delivery Enabled
///
/// You can use an S3 bucket to store logs generated by your Timestream for InfluxDB instance. The following example shows what resources and arguments are required to configure an S3 bucket for logging, including the IAM policy that needs to be set in order to allow Timestream for InfluxDB to place logs in your S3 bucket. The configuration of the required VPC, security group, and subnet have been left out of the example for brevity.
///
/// ```yaml
/// resources:
///   exampleBucketV2:
///     type: aws:s3:BucketV2
///     name: example
///     properties:
///       bucket: example-s3-bucket
///   exampleBucketPolicy:
///     type: aws:s3:BucketPolicy
///     name: example
///     properties:
///       bucket: ${exampleBucketV2.id}
///       policy: ${example.json}
///   exampleDbInstance:
///     type: aws:timestreaminfluxdb:DbInstance
///     name: example
///     properties:
///       allocatedStorage: 20
///       bucket: example-bucket-name
///       dbInstanceType: db.influx.medium
///       username: admin
///       password: example-password
///       organization: organization
///       vpcSubnetIds:
///         - ${exampleAwsSubnet.id}
///       vpcSecurityGroupIds:
///         - ${exampleAwsSecurityGroup.id}
///       name: example-db-instance
///       logDeliveryConfiguration:
///         s3Configuration:
///           bucketName: ${exampleBucketV2.name}
///           enabled: true
/// variables:
///   example:
///     fn::invoke:
///       function: aws:iam:getPolicyDocument
///       arguments:
///         statements:
///           - actions:
///               - s3:PutObject
///             principals:
///               - type: Service
///                 identifiers:
///                   - timestream-influxdb.amazonaws.com
///             resources:
///               - ${exampleBucketV2.arn}/*
/// ```
///
/// ### Usage with MultiAZ Deployment
///
/// To use multi-region availability, at least two subnets must be created in different availability zones and used with your Timestream for InfluxDB instance.
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = db_instance::create(
///         "example",
///         DbInstanceArgs::builder()
///             .allocated_storage(20)
///             .bucket("example-bucket-name")
///             .db_instance_type("db.influx.medium")
///             .deployment_type("WITH_MULTIAZ_STANDBY")
///             .name("example-db-instance")
///             .organization("organization")
///             .password("example-password")
///             .username("admin")
///             .vpc_security_group_ids(vec!["${exampleAwsSecurityGroup.id}",])
///             .vpc_subnet_ids(vec!["${example1.id}", "${example2.id}",])
///             .build_struct(),
///     );
///     let example1 = subnet::create(
///         "example1",
///         SubnetArgs::builder()
///             .availability_zone("us-west-2a")
///             .cidr_block("10.0.1.0/24")
///             .vpc_id("${exampleAwsVpc.id}")
///             .build_struct(),
///     );
///     let example2 = subnet::create(
///         "example2",
///         SubnetArgs::builder()
///             .availability_zone("us-west-2b")
///             .cidr_block("10.0.2.0/24")
///             .vpc_id("${exampleAwsVpc.id}")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import Timestream for InfluxDB Db Instance using its identifier. For example:
///
/// ```sh
/// $ pulumi import aws:timestreaminfluxdb/dbInstance:DbInstance example 12345abcde
/// ```
pub mod db_instance {
    #[derive(pulumi_wasm_rust::__private::bon::Builder, Clone)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct DbInstanceArgs {
        /// Amount of storage in GiB (gibibytes). The minimum value is 20, the maximum value is 16384.
        #[builder(into)]
        pub allocated_storage: pulumi_wasm_rust::Output<i32>,
        /// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
        #[builder(into)]
        pub bucket: pulumi_wasm_rust::Output<String>,
        /// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`.
        #[builder(into)]
        pub db_instance_type: pulumi_wasm_rust::Output<String>,
        /// ID of the DB parameter group assigned to your DB instance. If added to an existing Timestream for InfluxDB instance or given a new value, will cause an in-place update to the instance. However, if an instance already has a value for `db_parameter_group_identifier`, removing `db_parameter_group_identifier` will cause the instance to be destroyed and recreated.
        #[builder(into, default)]
        pub db_parameter_group_identifier: pulumi_wasm_rust::Output<Option<String>>,
        /// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT1"`. If you use `"InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for `allocated_storage` is 400.
        #[builder(into, default)]
        pub db_storage_type: pulumi_wasm_rust::Output<Option<String>>,
        /// Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability. Valid options are: `"SINGLE_AZ"`, `"WITH_MULTIAZ_STANDBY"`.
        #[builder(into, default)]
        pub deployment_type: pulumi_wasm_rust::Output<Option<String>>,
        /// Configuration for sending InfluxDB engine logs to a specified S3 bucket.
        #[builder(into, default)]
        pub log_delivery_configuration: pulumi_wasm_rust::Output<
            Option<
                super::super::types::timestreaminfluxdb::DbInstanceLogDeliveryConfiguration,
            >,
        >,
        /// Name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
        #[builder(into, default)]
        pub name: pulumi_wasm_rust::Output<Option<String>>,
        /// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
        #[builder(into)]
        pub organization: pulumi_wasm_rust::Output<String>,
        /// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
        #[builder(into)]
        pub password: pulumi_wasm_rust::Output<String>,
        /// Configures the DB instance with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
        #[builder(into, default)]
        pub publicly_accessible: pulumi_wasm_rust::Output<Option<bool>>,
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        #[builder(into, default)]
        pub tags: pulumi_wasm_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        #[builder(into, default)]
        pub timeouts: pulumi_wasm_rust::Output<
            Option<super::super::types::timestreaminfluxdb::DbInstanceTimeouts>,
        >,
        /// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
        #[builder(into)]
        pub username: pulumi_wasm_rust::Output<String>,
        /// List of VPC security group IDs to associate with the DB instance.
        #[builder(into)]
        pub vpc_security_group_ids: pulumi_wasm_rust::Output<Vec<String>>,
        /// List of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
        ///
        /// The following arguments are optional:
        #[builder(into)]
        pub vpc_subnet_ids: pulumi_wasm_rust::Output<Vec<String>>,
    }
    #[allow(dead_code)]
    pub struct DbInstanceResult {
        /// Amount of storage in GiB (gibibytes). The minimum value is 20, the maximum value is 16384.
        pub allocated_storage: pulumi_wasm_rust::Output<i32>,
        /// ARN of the Timestream for InfluxDB Instance.
        pub arn: pulumi_wasm_rust::Output<String>,
        /// Availability Zone in which the DB instance resides.
        pub availability_zone: pulumi_wasm_rust::Output<String>,
        /// Name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a database and a retention period (the duration of time that each data point persists). A bucket belongs to an organization. Along with `organization`, `username`, and `password`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
        pub bucket: pulumi_wasm_rust::Output<String>,
        /// Timestream for InfluxDB DB instance type to run InfluxDB on. Valid options are: `"db.influx.medium"`, `"db.influx.large"`, `"db.influx.xlarge"`, `"db.influx.2xlarge"`, `"db.influx.4xlarge"`, `"db.influx.8xlarge"`, `"db.influx.12xlarge"`, and `"db.influx.16xlarge"`.
        pub db_instance_type: pulumi_wasm_rust::Output<String>,
        /// ID of the DB parameter group assigned to your DB instance. If added to an existing Timestream for InfluxDB instance or given a new value, will cause an in-place update to the instance. However, if an instance already has a value for `db_parameter_group_identifier`, removing `db_parameter_group_identifier` will cause the instance to be destroyed and recreated.
        pub db_parameter_group_identifier: pulumi_wasm_rust::Output<Option<String>>,
        /// Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx IO Included 12000 IOPS, Influx IO Included 16000 IOPS. Valid options are: `"InfluxIOIncludedT1"`, `"InfluxIOIncludedT2"`, and `"InfluxIOIncludedT1"`. If you use `"InfluxIOIncludedT2" or "InfluxIOIncludedT3", the minimum value for `allocated_storage` is 400.
        pub db_storage_type: pulumi_wasm_rust::Output<String>,
        /// Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability. Valid options are: `"SINGLE_AZ"`, `"WITH_MULTIAZ_STANDBY"`.
        pub deployment_type: pulumi_wasm_rust::Output<String>,
        /// Endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
        pub endpoint: pulumi_wasm_rust::Output<String>,
        /// ARN of the AWS Secrets Manager secret containing the initial InfluxDB authorization parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization, bucket, username, and password. This secret will be read by the `aws.timestreaminfluxdb.DbInstance` resource in order to support importing: deleting the secret or secret values can cause errors.
        pub influx_auth_parameters_secret_arn: pulumi_wasm_rust::Output<String>,
        /// Configuration for sending InfluxDB engine logs to a specified S3 bucket.
        pub log_delivery_configuration: pulumi_wasm_rust::Output<
            Option<
                super::super::types::timestreaminfluxdb::DbInstanceLogDeliveryConfiguration,
            >,
        >,
        /// Name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and per region. The argument must start with a letter, cannot contain consecutive hyphens (`-`) and cannot end with a hyphen.
        pub name: pulumi_wasm_rust::Output<String>,
        /// Name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for a group of users. Along with `bucket`, `username`, and `password`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
        pub organization: pulumi_wasm_rust::Output<String>,
        /// Password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `username`, and `organization`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
        pub password: pulumi_wasm_rust::Output<String>,
        /// Configures the DB instance with a public IP to facilitate access. Other resources, such as a VPC, a subnet, an internet gateway, and a route table with routes, are also required to enabled public access, in addition to this argument. See "Usage with Public Internet Access Enabled" for an example configuration with all required resources for public internet access.
        pub publicly_accessible: pulumi_wasm_rust::Output<bool>,
        /// Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.
        pub secondary_availability_zone: pulumi_wasm_rust::Output<String>,
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        pub tags: pulumi_wasm_rust::Output<
            Option<std::collections::HashMap<String, String>>,
        >,
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        pub tags_all: pulumi_wasm_rust::Output<
            std::collections::HashMap<String, String>,
        >,
        pub timeouts: pulumi_wasm_rust::Output<
            Option<super::super::types::timestreaminfluxdb::DbInstanceTimeouts>,
        >,
        /// Username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or contain two consecutive hyphens. This username will allow you to access the InfluxDB UI to perform various administrative tasks and also use the InfluxDB CLI to create an operator token. Along with `bucket`, `organization`, and `password`, this argument will be stored in the secret referred to by the `influx_auth_parameters_secret_arn` attribute.
        pub username: pulumi_wasm_rust::Output<String>,
        /// List of VPC security group IDs to associate with the DB instance.
        pub vpc_security_group_ids: pulumi_wasm_rust::Output<Vec<String>>,
        /// List of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different availability zones when deploying with a Multi-AZ standby.
        ///
        /// The following arguments are optional:
        pub vpc_subnet_ids: pulumi_wasm_rust::Output<Vec<String>>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(name: &str, args: DbInstanceArgs) -> DbInstanceResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let allocated_storage_binding = args.allocated_storage.get_inner();
        let bucket_binding = args.bucket.get_inner();
        let db_instance_type_binding = args.db_instance_type.get_inner();
        let db_parameter_group_identifier_binding = args
            .db_parameter_group_identifier
            .get_inner();
        let db_storage_type_binding = args.db_storage_type.get_inner();
        let deployment_type_binding = args.deployment_type.get_inner();
        let log_delivery_configuration_binding = args
            .log_delivery_configuration
            .get_inner();
        let name_binding = args.name.get_inner();
        let organization_binding = args.organization.get_inner();
        let password_binding = args.password.get_inner();
        let publicly_accessible_binding = args.publicly_accessible.get_inner();
        let tags_binding = args.tags.get_inner();
        let timeouts_binding = args.timeouts.get_inner();
        let username_binding = args.username.get_inner();
        let vpc_security_group_ids_binding = args.vpc_security_group_ids.get_inner();
        let vpc_subnet_ids_binding = args.vpc_subnet_ids.get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "aws:timestreaminfluxdb/dbInstance:DbInstance".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "allocatedStorage".into(),
                    value: &allocated_storage_binding,
                },
                register_interface::ObjectField {
                    name: "bucket".into(),
                    value: &bucket_binding,
                },
                register_interface::ObjectField {
                    name: "dbInstanceType".into(),
                    value: &db_instance_type_binding,
                },
                register_interface::ObjectField {
                    name: "dbParameterGroupIdentifier".into(),
                    value: &db_parameter_group_identifier_binding,
                },
                register_interface::ObjectField {
                    name: "dbStorageType".into(),
                    value: &db_storage_type_binding,
                },
                register_interface::ObjectField {
                    name: "deploymentType".into(),
                    value: &deployment_type_binding,
                },
                register_interface::ObjectField {
                    name: "logDeliveryConfiguration".into(),
                    value: &log_delivery_configuration_binding,
                },
                register_interface::ObjectField {
                    name: "name".into(),
                    value: &name_binding,
                },
                register_interface::ObjectField {
                    name: "organization".into(),
                    value: &organization_binding,
                },
                register_interface::ObjectField {
                    name: "password".into(),
                    value: &password_binding,
                },
                register_interface::ObjectField {
                    name: "publiclyAccessible".into(),
                    value: &publicly_accessible_binding,
                },
                register_interface::ObjectField {
                    name: "tags".into(),
                    value: &tags_binding,
                },
                register_interface::ObjectField {
                    name: "timeouts".into(),
                    value: &timeouts_binding,
                },
                register_interface::ObjectField {
                    name: "username".into(),
                    value: &username_binding,
                },
                register_interface::ObjectField {
                    name: "vpcSecurityGroupIds".into(),
                    value: &vpc_security_group_ids_binding,
                },
                register_interface::ObjectField {
                    name: "vpcSubnetIds".into(),
                    value: &vpc_subnet_ids_binding,
                },
            ]),
            results: Vec::from([
                register_interface::ResultField {
                    name: "allocatedStorage".into(),
                },
                register_interface::ResultField {
                    name: "arn".into(),
                },
                register_interface::ResultField {
                    name: "availabilityZone".into(),
                },
                register_interface::ResultField {
                    name: "bucket".into(),
                },
                register_interface::ResultField {
                    name: "dbInstanceType".into(),
                },
                register_interface::ResultField {
                    name: "dbParameterGroupIdentifier".into(),
                },
                register_interface::ResultField {
                    name: "dbStorageType".into(),
                },
                register_interface::ResultField {
                    name: "deploymentType".into(),
                },
                register_interface::ResultField {
                    name: "endpoint".into(),
                },
                register_interface::ResultField {
                    name: "influxAuthParametersSecretArn".into(),
                },
                register_interface::ResultField {
                    name: "logDeliveryConfiguration".into(),
                },
                register_interface::ResultField {
                    name: "name".into(),
                },
                register_interface::ResultField {
                    name: "organization".into(),
                },
                register_interface::ResultField {
                    name: "password".into(),
                },
                register_interface::ResultField {
                    name: "publiclyAccessible".into(),
                },
                register_interface::ResultField {
                    name: "secondaryAvailabilityZone".into(),
                },
                register_interface::ResultField {
                    name: "tags".into(),
                },
                register_interface::ResultField {
                    name: "tagsAll".into(),
                },
                register_interface::ResultField {
                    name: "timeouts".into(),
                },
                register_interface::ResultField {
                    name: "username".into(),
                },
                register_interface::ResultField {
                    name: "vpcSecurityGroupIds".into(),
                },
                register_interface::ResultField {
                    name: "vpcSubnetIds".into(),
                },
            ]),
        };
        let o = register_interface::register(&request);
        let mut hashmap: HashMap<String, _> = o
            .fields
            .into_iter()
            .map(|f| (f.name, f.output))
            .collect();
        DbInstanceResult {
            allocated_storage: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("allocatedStorage").unwrap(),
            ),
            arn: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("arn").unwrap(),
            ),
            availability_zone: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("availabilityZone").unwrap(),
            ),
            bucket: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("bucket").unwrap(),
            ),
            db_instance_type: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("dbInstanceType").unwrap(),
            ),
            db_parameter_group_identifier: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("dbParameterGroupIdentifier").unwrap(),
            ),
            db_storage_type: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("dbStorageType").unwrap(),
            ),
            deployment_type: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("deploymentType").unwrap(),
            ),
            endpoint: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("endpoint").unwrap(),
            ),
            influx_auth_parameters_secret_arn: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("influxAuthParametersSecretArn").unwrap(),
            ),
            log_delivery_configuration: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("logDeliveryConfiguration").unwrap(),
            ),
            name: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("name").unwrap(),
            ),
            organization: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("organization").unwrap(),
            ),
            password: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("password").unwrap(),
            ),
            publicly_accessible: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("publiclyAccessible").unwrap(),
            ),
            secondary_availability_zone: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("secondaryAvailabilityZone").unwrap(),
            ),
            tags: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("tags").unwrap(),
            ),
            tags_all: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("tagsAll").unwrap(),
            ),
            timeouts: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("timeouts").unwrap(),
            ),
            username: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("username").unwrap(),
            ),
            vpc_security_group_ids: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("vpcSecurityGroupIds").unwrap(),
            ),
            vpc_subnet_ids: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("vpcSubnetIds").unwrap(),
            ),
        }
    }
}
