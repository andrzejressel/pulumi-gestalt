/// Manages the Vulnerability Assessment for an MS Managed Instance.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let example = resource_group::create(
///         "example",
///         ResourceGroupArgs::builder()
///             .location("West Europe")
///             .name("example-resources")
///             .build_struct(),
///     );
///     let exampleAccount = account::create(
///         "exampleAccount",
///         AccountArgs::builder()
///             .account_replication_type("GRS")
///             .account_tier("Standard")
///             .location("${example.location}")
///             .name("accteststorageaccount")
///             .resource_group_name("${example.name}")
///             .build_struct(),
///     );
///     let exampleContainer = container::create(
///         "exampleContainer",
///         ContainerArgs::builder()
///             .container_access_type("private")
///             .name("accteststoragecontainer")
///             .storage_account_name("${exampleAccount.name}")
///             .build_struct(),
///     );
///     let exampleManagedInstance = managed_instance::create(
///         "exampleManagedInstance",
///         ManagedInstanceArgs::builder()
///             .administrator_login("missadministrator")
///             .administrator_login_password("NCC-1701-D")
///             .license_type("BasePrice")
///             .location("${example.location}")
///             .name("exampleinstance")
///             .resource_group_name("${example.name}")
///             .sku_name("GP_Gen5")
///             .storage_size_in_gb(32)
///             .subnet_id("${exampleSubnet.id}")
///             .vcores(4)
///             .build_struct(),
///     );
///     let exampleManagedInstanceSecurityAlertPolicy = managed_instance_security_alert_policy::create(
///         "exampleManagedInstanceSecurityAlertPolicy",
///         ManagedInstanceSecurityAlertPolicyArgs::builder()
///             .enabled(true)
///             .managed_instance_name("${test.name}")
///             .resource_group_name("${testAzurermResourceGroup.name}")
///             .retention_days(30)
///             .storage_account_access_key("${testAzurermStorageAccount.primaryAccessKey}")
///             .storage_endpoint("${testAzurermStorageAccount.primaryBlobEndpoint}")
///             .build_struct(),
///     );
///     let exampleManagedInstanceVulnerabilityAssessment = managed_instance_vulnerability_assessment::create(
///         "exampleManagedInstanceVulnerabilityAssessment",
///         ManagedInstanceVulnerabilityAssessmentArgs::builder()
///             .managed_instance_id("${exampleManagedInstance.id}")
///             .recurring_scans(
///                 ManagedInstanceVulnerabilityAssessmentRecurringScans::builder()
///                     .emailSubscriptionAdmins(true)
///                     .emails(vec!["email@example1.com", "email@example2.com",])
///                     .enabled(true)
///                     .build_struct(),
///             )
///             .storage_account_access_key("${exampleAccount.primaryAccessKey}")
///             .storage_container_path(
///                 "${exampleAccount.primaryBlobEndpoint}${exampleContainer.name}/",
///             )
///             .build_struct(),
///     );
///     let exampleSubnet = subnet::create(
///         "exampleSubnet",
///         SubnetArgs::builder()
///             .address_prefixes(vec!["10.0.2.0/24",])
///             .name("example")
///             .resource_group_name("${example.name}")
///             .virtual_network_name("${exampleVirtualNetwork.name}")
///             .build_struct(),
///     );
///     let exampleVirtualNetwork = virtual_network::create(
///         "exampleVirtualNetwork",
///         VirtualNetworkArgs::builder()
///             .address_spaces(vec!["10.0.0.0/16",])
///             .location("${example.location}")
///             .name("example")
///             .resource_group_name("${example.name}")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// The Vulnerability Assessment can be imported using the `resource id`, e.g.
///
/// ```sh
/// $ pulumi import azure:mssql/managedInstanceVulnerabilityAssessment:ManagedInstanceVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/managedInstances/instance1/vulnerabilityAssessments/Default
/// ```
///
pub mod managed_instance_vulnerability_assessment {
    #[derive(pulumi_wasm_rust::__private::bon::Builder, Clone)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct ManagedInstanceVulnerabilityAssessmentArgs {
        /// The id of the MS SQL Managed Instance. Changing this forces a new resource to be created.
        #[builder(into)]
        pub managed_instance_id: pulumi_wasm_rust::Output<String>,
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        #[builder(into, default)]
        pub recurring_scans: pulumi_wasm_rust::Output<
            Option<
                super::super::types::mssql::ManagedInstanceVulnerabilityAssessmentRecurringScans,
            >,
        >,
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        ///
        /// > **NOTE** The `storage_account_access_key` only applies if the storage account is not behind a virtual network or a firewall.
        #[builder(into, default)]
        pub storage_account_access_key: pulumi_wasm_rust::Output<Option<String>>,
        /// A blob storage container path to hold the scan results (e.g. <https://myStorage.blob.core.windows.net/VaScans/>).
        #[builder(into)]
        pub storage_container_path: pulumi_wasm_rust::Output<String>,
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        ///
        /// > **NOTE** The `storage_container_sas_key` only applies if the storage account is not behind a virtual network or a firewall.
        #[builder(into, default)]
        pub storage_container_sas_key: pulumi_wasm_rust::Output<Option<String>>,
    }
    #[allow(dead_code)]
    pub struct ManagedInstanceVulnerabilityAssessmentResult {
        /// The id of the MS SQL Managed Instance. Changing this forces a new resource to be created.
        pub managed_instance_id: pulumi_wasm_rust::Output<String>,
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        pub recurring_scans: pulumi_wasm_rust::Output<
            super::super::types::mssql::ManagedInstanceVulnerabilityAssessmentRecurringScans,
        >,
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        ///
        /// > **NOTE** The `storage_account_access_key` only applies if the storage account is not behind a virtual network or a firewall.
        pub storage_account_access_key: pulumi_wasm_rust::Output<Option<String>>,
        /// A blob storage container path to hold the scan results (e.g. <https://myStorage.blob.core.windows.net/VaScans/>).
        pub storage_container_path: pulumi_wasm_rust::Output<String>,
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        ///
        /// > **NOTE** The `storage_container_sas_key` only applies if the storage account is not behind a virtual network or a firewall.
        pub storage_container_sas_key: pulumi_wasm_rust::Output<Option<String>>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        name: &str,
        args: ManagedInstanceVulnerabilityAssessmentArgs,
    ) -> ManagedInstanceVulnerabilityAssessmentResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let managed_instance_id_binding = args.managed_instance_id.get_inner();
        let recurring_scans_binding = args.recurring_scans.get_inner();
        let storage_account_access_key_binding = args
            .storage_account_access_key
            .get_inner();
        let storage_container_path_binding = args.storage_container_path.get_inner();
        let storage_container_sas_key_binding = args
            .storage_container_sas_key
            .get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "azure:mssql/managedInstanceVulnerabilityAssessment:ManagedInstanceVulnerabilityAssessment"
                .into(),
            name: name.to_string(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "managedInstanceId".into(),
                    value: &managed_instance_id_binding,
                },
                register_interface::ObjectField {
                    name: "recurringScans".into(),
                    value: &recurring_scans_binding,
                },
                register_interface::ObjectField {
                    name: "storageAccountAccessKey".into(),
                    value: &storage_account_access_key_binding,
                },
                register_interface::ObjectField {
                    name: "storageContainerPath".into(),
                    value: &storage_container_path_binding,
                },
                register_interface::ObjectField {
                    name: "storageContainerSasKey".into(),
                    value: &storage_container_sas_key_binding,
                },
            ]),
            results: Vec::from([
                register_interface::ResultField {
                    name: "managedInstanceId".into(),
                },
                register_interface::ResultField {
                    name: "recurringScans".into(),
                },
                register_interface::ResultField {
                    name: "storageAccountAccessKey".into(),
                },
                register_interface::ResultField {
                    name: "storageContainerPath".into(),
                },
                register_interface::ResultField {
                    name: "storageContainerSasKey".into(),
                },
            ]),
        };
        let o = register_interface::register(&request);
        let mut hashmap: HashMap<String, _> = o
            .fields
            .into_iter()
            .map(|f| (f.name, f.output))
            .collect();
        ManagedInstanceVulnerabilityAssessmentResult {
            managed_instance_id: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("managedInstanceId").unwrap(),
            ),
            recurring_scans: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("recurringScans").unwrap(),
            ),
            storage_account_access_key: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("storageAccountAccessKey").unwrap(),
            ),
            storage_container_path: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("storageContainerPath").unwrap(),
            ),
            storage_container_sas_key: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("storageContainerSasKey").unwrap(),
            ),
        }
    }
}
