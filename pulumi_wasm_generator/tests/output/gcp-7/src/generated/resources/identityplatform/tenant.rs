/// Tenant configuration in a multi-tenant project.
///
/// You must enable the
/// [Google Identity Platform](https://console.cloud.google.com/marketplace/details/google-cloud-platform/customer-identity) in
/// the marketplace prior to using this resource.
///
/// You must [enable multi-tenancy](https://cloud.google.com/identity-platform/docs/multi-tenancy-quickstart) via
/// the Cloud Console prior to creating tenants.
///
///
///
/// ## Example Usage
///
/// ### Identity Platform Tenant Basic
///
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let tenant = tenant::create(
///         "tenant",
///         TenantArgs::builder()
///             .allow_password_signup(true)
///             .display_name("tenant")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Tenant can be imported using any of these accepted formats:
///
/// * `projects/{{project}}/tenants/{{name}}`
///
/// * `{{project}}/{{name}}`
///
/// * `{{name}}`
///
/// When using the `pulumi import` command, Tenant can be imported using one of the formats above. For example:
///
/// ```sh
/// $ pulumi import gcp:identityplatform/tenant:Tenant default projects/{{project}}/tenants/{{name}}
/// ```
///
/// ```sh
/// $ pulumi import gcp:identityplatform/tenant:Tenant default {{project}}/{{name}}
/// ```
///
/// ```sh
/// $ pulumi import gcp:identityplatform/tenant:Tenant default {{name}}
/// ```
///
pub mod tenant {
    #[derive(pulumi_wasm_rust::__private::bon::Builder, Clone)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct TenantArgs {
        /// Whether to allow email/password user authentication.
        #[builder(into, default)]
        pub allow_password_signup: pulumi_wasm_rust::Output<Option<bool>>,
        /// Whether authentication is disabled for the tenant. If true, the users under
        /// the disabled tenant are not allowed to sign-in. Admins of the disabled tenant
        /// are not able to manage its users.
        #[builder(into, default)]
        pub disable_auth: pulumi_wasm_rust::Output<Option<bool>>,
        /// Human friendly display name of the tenant.
        ///
        ///
        /// - - -
        #[builder(into)]
        pub display_name: pulumi_wasm_rust::Output<String>,
        /// Whether to enable email link user authentication.
        #[builder(into, default)]
        pub enable_email_link_signin: pulumi_wasm_rust::Output<Option<bool>>,
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        #[builder(into, default)]
        pub project: pulumi_wasm_rust::Output<Option<String>>,
    }
    #[allow(dead_code)]
    pub struct TenantResult {
        /// Whether to allow email/password user authentication.
        pub allow_password_signup: pulumi_wasm_rust::Output<Option<bool>>,
        /// Whether authentication is disabled for the tenant. If true, the users under
        /// the disabled tenant are not allowed to sign-in. Admins of the disabled tenant
        /// are not able to manage its users.
        pub disable_auth: pulumi_wasm_rust::Output<Option<bool>>,
        /// Human friendly display name of the tenant.
        ///
        ///
        /// - - -
        pub display_name: pulumi_wasm_rust::Output<String>,
        /// Whether to enable email link user authentication.
        pub enable_email_link_signin: pulumi_wasm_rust::Output<Option<bool>>,
        /// The name of the tenant that is generated by the server
        pub name: pulumi_wasm_rust::Output<String>,
        /// The ID of the project in which the resource belongs.
        /// If it is not provided, the provider project is used.
        pub project: pulumi_wasm_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(name: &str, args: TenantArgs) -> TenantResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let allow_password_signup_binding = args.allow_password_signup.get_inner();
        let disable_auth_binding = args.disable_auth.get_inner();
        let display_name_binding = args.display_name.get_inner();
        let enable_email_link_signin_binding = args.enable_email_link_signin.get_inner();
        let project_binding = args.project.get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "gcp:identityplatform/tenant:Tenant".into(),
            name: name.to_string(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "allowPasswordSignup".into(),
                    value: &allow_password_signup_binding,
                },
                register_interface::ObjectField {
                    name: "disableAuth".into(),
                    value: &disable_auth_binding,
                },
                register_interface::ObjectField {
                    name: "displayName".into(),
                    value: &display_name_binding,
                },
                register_interface::ObjectField {
                    name: "enableEmailLinkSignin".into(),
                    value: &enable_email_link_signin_binding,
                },
                register_interface::ObjectField {
                    name: "project".into(),
                    value: &project_binding,
                },
            ]),
            results: Vec::from([
                register_interface::ResultField {
                    name: "allowPasswordSignup".into(),
                },
                register_interface::ResultField {
                    name: "disableAuth".into(),
                },
                register_interface::ResultField {
                    name: "displayName".into(),
                },
                register_interface::ResultField {
                    name: "enableEmailLinkSignin".into(),
                },
                register_interface::ResultField {
                    name: "name".into(),
                },
                register_interface::ResultField {
                    name: "project".into(),
                },
            ]),
        };
        let o = register_interface::register(&request);
        let mut hashmap: HashMap<String, _> = o
            .fields
            .into_iter()
            .map(|f| (f.name, f.output))
            .collect();
        TenantResult {
            allow_password_signup: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("allowPasswordSignup").unwrap(),
            ),
            disable_auth: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("disableAuth").unwrap(),
            ),
            display_name: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("displayName").unwrap(),
            ),
            enable_email_link_signin: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("enableEmailLinkSignin").unwrap(),
            ),
            name: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("name").unwrap(),
            ),
            project: pulumi_wasm_rust::__private::into_domain(
                hashmap.remove("project").unwrap(),
            ),
        }
    }
}
