/// Provides an EventBridge event API Destination resource.
///
/// > **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
///
/// ## Example Usage
///
/// ```ignore
/// use pulumi_wasm_rust::Output;
/// use pulumi_wasm_rust::{add_export, pulumi_main};
/// #[pulumi_main]
/// fn test_main() -> Result<(), Error> {
///     let test = event_api_destination::create(
///         "test",
///         EventApiDestinationArgs::builder()
///             .connection_arn("${testAwsCloudwatchEventConnection.arn}")
///             .description("An API Destination")
///             .http_method("POST")
///             .invocation_endpoint("https://api.destination.com/endpoint")
///             .invocation_rate_limit_per_second(20)
///             .name("api-destination")
///             .build_struct(),
///     );
/// }
/// ```
///
/// ## Import
///
/// Using `pulumi import`, import EventBridge API Destinations using the `name`. For example:
///
/// ```sh
/// $ pulumi import aws:cloudwatch/eventApiDestination:EventApiDestination test api-destination
/// ```
pub mod event_api_destination {
    #[derive(pulumi_wasm_rust::__private::bon::Builder)]
    #[builder(finish_fn = build_struct)]
    #[allow(dead_code)]
    pub struct EventApiDestinationArgs {
        /// ARN of the EventBridge Connection to use for the API Destination.
        #[builder(into)]
        pub connection_arn: pulumi_wasm_rust::InputOrOutput<String>,
        /// The description of the new API Destination. Maximum of 512 characters.
        #[builder(into, default)]
        pub description: pulumi_wasm_rust::InputOrOutput<Option<String>>,
        /// Select the HTTP method used for the invocation endpoint, such as GET, POST, PUT, etc.
        #[builder(into)]
        pub http_method: pulumi_wasm_rust::InputOrOutput<String>,
        /// URL endpoint to invoke as a target. This could be a valid endpoint generated by a partner service. You can include "*" as path parameters wildcards to be set from the Target HttpParameters.
        #[builder(into)]
        pub invocation_endpoint: pulumi_wasm_rust::InputOrOutput<String>,
        /// Enter the maximum number of invocations per second to allow for this destination. Enter a value greater than 0 (default 300).
        #[builder(into, default)]
        pub invocation_rate_limit_per_second: pulumi_wasm_rust::InputOrOutput<
            Option<i32>,
        >,
        /// The name of the new API Destination. The name must be unique for your account. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
        #[builder(into, default)]
        pub name: pulumi_wasm_rust::InputOrOutput<Option<String>>,
    }
    #[allow(dead_code)]
    pub struct EventApiDestinationResult {
        /// The Amazon Resource Name (ARN) of the event API Destination.
        pub arn: pulumi_wasm_rust::Output<String>,
        /// ARN of the EventBridge Connection to use for the API Destination.
        pub connection_arn: pulumi_wasm_rust::Output<String>,
        /// The description of the new API Destination. Maximum of 512 characters.
        pub description: pulumi_wasm_rust::Output<Option<String>>,
        /// Select the HTTP method used for the invocation endpoint, such as GET, POST, PUT, etc.
        pub http_method: pulumi_wasm_rust::Output<String>,
        /// URL endpoint to invoke as a target. This could be a valid endpoint generated by a partner service. You can include "*" as path parameters wildcards to be set from the Target HttpParameters.
        pub invocation_endpoint: pulumi_wasm_rust::Output<String>,
        /// Enter the maximum number of invocations per second to allow for this destination. Enter a value greater than 0 (default 300).
        pub invocation_rate_limit_per_second: pulumi_wasm_rust::Output<Option<i32>>,
        /// The name of the new API Destination. The name must be unique for your account. Maximum of 64 characters consisting of numbers, lower/upper case letters, .,-,_.
        pub name: pulumi_wasm_rust::Output<String>,
    }
    ///
    /// Registers a new resource with the given unique name and arguments
    ///
    #[allow(non_snake_case, unused_imports, dead_code)]
    pub fn create(
        context: &pulumi_wasm_rust::PulumiContext,
        name: &str,
        args: EventApiDestinationArgs,
    ) -> EventApiDestinationResult {
        use pulumi_wasm_rust::__private::pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
        use std::collections::HashMap;
        let connection_arn_binding = args.connection_arn.get_output(context).get_inner();
        let description_binding = args.description.get_output(context).get_inner();
        let http_method_binding = args.http_method.get_output(context).get_inner();
        let invocation_endpoint_binding = args
            .invocation_endpoint
            .get_output(context)
            .get_inner();
        let invocation_rate_limit_per_second_binding = args
            .invocation_rate_limit_per_second
            .get_output(context)
            .get_inner();
        let name_binding = args.name.get_output(context).get_inner();
        let request = register_interface::RegisterResourceRequest {
            type_: "aws:cloudwatch/eventApiDestination:EventApiDestination".into(),
            name: name.to_string(),
            version: super::super::get_version(),
            object: Vec::from([
                register_interface::ObjectField {
                    name: "connectionArn".into(),
                    value: &connection_arn_binding,
                },
                register_interface::ObjectField {
                    name: "description".into(),
                    value: &description_binding,
                },
                register_interface::ObjectField {
                    name: "httpMethod".into(),
                    value: &http_method_binding,
                },
                register_interface::ObjectField {
                    name: "invocationEndpoint".into(),
                    value: &invocation_endpoint_binding,
                },
                register_interface::ObjectField {
                    name: "invocationRateLimitPerSecond".into(),
                    value: &invocation_rate_limit_per_second_binding,
                },
                register_interface::ObjectField {
                    name: "name".into(),
                    value: &name_binding,
                },
            ]),
        };
        let o = register_interface::register(context.get_inner(), &request);
        EventApiDestinationResult {
            arn: pulumi_wasm_rust::__private::into_domain(o.extract_field("arn")),
            connection_arn: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("connectionArn"),
            ),
            description: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("description"),
            ),
            http_method: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("httpMethod"),
            ),
            invocation_endpoint: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("invocationEndpoint"),
            ),
            invocation_rate_limit_per_second: pulumi_wasm_rust::__private::into_domain(
                o.extract_field("invocationRateLimitPerSecond"),
            ),
            name: pulumi_wasm_rust::__private::into_domain(o.extract_field("name")),
        }
    }
}
