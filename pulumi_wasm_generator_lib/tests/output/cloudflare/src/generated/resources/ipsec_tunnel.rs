#[derive(bon::Builder, Clone)]
#[builder(finish_fn = build_struct)]
pub struct IpsecTunnelArgs {
    /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
    #[builder(into, default)]
    pub account_id: pulumi_wasm_rust::Output<Option<String>>,
    /// Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
    #[builder(into, default)]
    pub allow_null_cipher: pulumi_wasm_rust::Output<Option<bool>>,
    /// IP address assigned to the Cloudflare side of the IPsec tunnel.
    #[builder(into)]
    pub cloudflare_endpoint: pulumi_wasm_rust::Output<String>,
    /// IP address assigned to the customer side of the IPsec tunnel.
    #[builder(into)]
    pub customer_endpoint: pulumi_wasm_rust::Output<String>,
    /// An optional description of the IPsec tunnel.
    #[builder(into, default)]
    pub description: pulumi_wasm_rust::Output<Option<String>>,
    /// `remote_id` in the form of a fqdn. This value is generated by cloudflare.
    #[builder(into, default)]
    pub fqdn_id: pulumi_wasm_rust::Output<Option<String>>,
    /// Specifies the direction for the health check. Available values: `unidirectional`, `bidirectional` Default: `unidirectional`.
    #[builder(into, default)]
    pub health_check_direction: pulumi_wasm_rust::Output<Option<String>>,
    /// Specifies if ICMP tunnel health checks are enabled. Default: `true`.
    #[builder(into, default)]
    pub health_check_enabled: pulumi_wasm_rust::Output<Option<bool>>,
    /// Specifies the ICMP rate for the health check. Available values: `low`, `mid`, `high` Default: `mid`.
    #[builder(into, default)]
    pub health_check_rate: pulumi_wasm_rust::Output<Option<String>>,
    /// The IP address of the customer endpoint that will receive tunnel health checks. Default: `<customer_gre_endpoint>`.
    #[builder(into, default)]
    pub health_check_target: pulumi_wasm_rust::Output<Option<String>>,
    /// Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
    #[builder(into, default)]
    pub health_check_type: pulumi_wasm_rust::Output<Option<String>>,
    /// `remote_id` as a hex string. This value is generated by cloudflare.
    #[builder(into, default)]
    pub hex_id: pulumi_wasm_rust::Output<Option<String>>,
    /// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
    #[builder(into)]
    pub interface_address: pulumi_wasm_rust::Output<String>,
    /// Name of the IPsec tunnel.
    #[builder(into)]
    pub name: pulumi_wasm_rust::Output<String>,
    /// Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
    #[builder(into, default)]
    pub psk: pulumi_wasm_rust::Output<Option<String>>,
    /// ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
    #[builder(into, default)]
    pub remote_id: pulumi_wasm_rust::Output<Option<String>>,
    /// Specifies if replay protection is enabled. Defaults to `false`.
    #[builder(into, default)]
    pub replay_protection: pulumi_wasm_rust::Output<Option<bool>>,
    /// `remote_id` in the form of an email address. This value is generated by cloudflare.
    #[builder(into, default)]
    pub user_id: pulumi_wasm_rust::Output<Option<String>>,
}
pub struct IpsecTunnelResult {
    /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
    pub account_id: pulumi_wasm_rust::Output<Option<String>>,
    /// Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
    pub allow_null_cipher: pulumi_wasm_rust::Output<Option<bool>>,
    /// IP address assigned to the Cloudflare side of the IPsec tunnel.
    pub cloudflare_endpoint: pulumi_wasm_rust::Output<String>,
    /// IP address assigned to the customer side of the IPsec tunnel.
    pub customer_endpoint: pulumi_wasm_rust::Output<String>,
    /// An optional description of the IPsec tunnel.
    pub description: pulumi_wasm_rust::Output<Option<String>>,
    /// `remote_id` in the form of a fqdn. This value is generated by cloudflare.
    pub fqdn_id: pulumi_wasm_rust::Output<String>,
    /// Specifies the direction for the health check. Available values: `unidirectional`, `bidirectional` Default: `unidirectional`.
    pub health_check_direction: pulumi_wasm_rust::Output<String>,
    /// Specifies if ICMP tunnel health checks are enabled. Default: `true`.
    pub health_check_enabled: pulumi_wasm_rust::Output<bool>,
    /// Specifies the ICMP rate for the health check. Available values: `low`, `mid`, `high` Default: `mid`.
    pub health_check_rate: pulumi_wasm_rust::Output<String>,
    /// The IP address of the customer endpoint that will receive tunnel health checks. Default: `<customer_gre_endpoint>`.
    pub health_check_target: pulumi_wasm_rust::Output<String>,
    /// Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
    pub health_check_type: pulumi_wasm_rust::Output<String>,
    /// `remote_id` as a hex string. This value is generated by cloudflare.
    pub hex_id: pulumi_wasm_rust::Output<String>,
    /// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
    pub interface_address: pulumi_wasm_rust::Output<String>,
    /// Name of the IPsec tunnel.
    pub name: pulumi_wasm_rust::Output<String>,
    /// Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
    pub psk: pulumi_wasm_rust::Output<String>,
    /// ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
    pub remote_id: pulumi_wasm_rust::Output<String>,
    /// Specifies if replay protection is enabled. Defaults to `false`.
    pub replay_protection: pulumi_wasm_rust::Output<Option<bool>>,
    /// `remote_id` in the form of an email address. This value is generated by cloudflare.
    pub user_id: pulumi_wasm_rust::Output<String>,
}
///
/// Registers a new resource with the given unique name and arguments
///
pub fn create(name: &str, args: IpsecTunnelArgs) -> IpsecTunnelResult {
    use pulumi_wasm_wit::client_bindings::component::pulumi_wasm::register_interface;
    use pulumi_wasm_wit::client_bindings::component::pulumi_wasm::output_interface::Output as WitOutput;
    use pulumi_wasm_rust::Output;
    use std::collections::HashMap;
    let account_id_binding = args.account_id.get_inner();
    let allow_null_cipher_binding = args.allow_null_cipher.get_inner();
    let cloudflare_endpoint_binding = args.cloudflare_endpoint.get_inner();
    let customer_endpoint_binding = args.customer_endpoint.get_inner();
    let description_binding = args.description.get_inner();
    let fqdn_id_binding = args.fqdn_id.get_inner();
    let health_check_direction_binding = args.health_check_direction.get_inner();
    let health_check_enabled_binding = args.health_check_enabled.get_inner();
    let health_check_rate_binding = args.health_check_rate.get_inner();
    let health_check_target_binding = args.health_check_target.get_inner();
    let health_check_type_binding = args.health_check_type.get_inner();
    let hex_id_binding = args.hex_id.get_inner();
    let interface_address_binding = args.interface_address.get_inner();
    let name_binding = args.name.get_inner();
    let psk_binding = args.psk.get_inner();
    let remote_id_binding = args.remote_id.get_inner();
    let replay_protection_binding = args.replay_protection.get_inner();
    let user_id_binding = args.user_id.get_inner();
    let request = register_interface::RegisterResourceRequest {
        type_: "cloudflare:index/ipsecTunnel:IpsecTunnel".into(),
        name: name.to_string(),
        object: Vec::from([
            register_interface::ObjectField {
                name: "accountId".into(),
                value: &account_id_binding,
            },
            register_interface::ObjectField {
                name: "allowNullCipher".into(),
                value: &allow_null_cipher_binding,
            },
            register_interface::ObjectField {
                name: "cloudflareEndpoint".into(),
                value: &cloudflare_endpoint_binding,
            },
            register_interface::ObjectField {
                name: "customerEndpoint".into(),
                value: &customer_endpoint_binding,
            },
            register_interface::ObjectField {
                name: "description".into(),
                value: &description_binding,
            },
            register_interface::ObjectField {
                name: "fqdnId".into(),
                value: &fqdn_id_binding,
            },
            register_interface::ObjectField {
                name: "healthCheckDirection".into(),
                value: &health_check_direction_binding,
            },
            register_interface::ObjectField {
                name: "healthCheckEnabled".into(),
                value: &health_check_enabled_binding,
            },
            register_interface::ObjectField {
                name: "healthCheckRate".into(),
                value: &health_check_rate_binding,
            },
            register_interface::ObjectField {
                name: "healthCheckTarget".into(),
                value: &health_check_target_binding,
            },
            register_interface::ObjectField {
                name: "healthCheckType".into(),
                value: &health_check_type_binding,
            },
            register_interface::ObjectField {
                name: "hexId".into(),
                value: &hex_id_binding,
            },
            register_interface::ObjectField {
                name: "interfaceAddress".into(),
                value: &interface_address_binding,
            },
            register_interface::ObjectField {
                name: "name".into(),
                value: &name_binding,
            },
            register_interface::ObjectField {
                name: "psk".into(),
                value: &psk_binding,
            },
            register_interface::ObjectField {
                name: "remoteId".into(),
                value: &remote_id_binding,
            },
            register_interface::ObjectField {
                name: "replayProtection".into(),
                value: &replay_protection_binding,
            },
            register_interface::ObjectField {
                name: "userId".into(),
                value: &user_id_binding,
            },
        ]),
        results: vec![
            register_interface::ResultField { name : "accountId".into() },
            register_interface::ResultField { name : "allowNullCipher".into() },
            register_interface::ResultField { name : "cloudflareEndpoint".into() },
            register_interface::ResultField { name : "customerEndpoint".into() },
            register_interface::ResultField { name : "description".into() },
            register_interface::ResultField { name : "fqdnId".into() },
            register_interface::ResultField { name : "healthCheckDirection".into() },
            register_interface::ResultField { name : "healthCheckEnabled".into() },
            register_interface::ResultField { name : "healthCheckRate".into() },
            register_interface::ResultField { name : "healthCheckTarget".into() },
            register_interface::ResultField { name : "healthCheckType".into() },
            register_interface::ResultField { name : "hexId".into() },
            register_interface::ResultField { name : "interfaceAddress".into() },
            register_interface::ResultField { name : "name".into() },
            register_interface::ResultField { name : "psk".into() },
            register_interface::ResultField { name : "remoteId".into() },
            register_interface::ResultField { name : "replayProtection".into() },
            register_interface::ResultField { name : "userId".into() },
        ],
    };
    fn into_domain<F: serde::Serialize>(output: WitOutput) -> Output<F> {
        unsafe { Output::<F>::new_from_handle(output) }
    }
    let o = register_interface::register(&request);
    let mut hashmap: HashMap<String, _> = o
        .fields
        .into_iter()
        .map(|f| (f.name, f.output))
        .collect();
    IpsecTunnelResult {
        account_id: into_domain(hashmap.remove("accountId").unwrap()),
        allow_null_cipher: into_domain(hashmap.remove("allowNullCipher").unwrap()),
        cloudflare_endpoint: into_domain(hashmap.remove("cloudflareEndpoint").unwrap()),
        customer_endpoint: into_domain(hashmap.remove("customerEndpoint").unwrap()),
        description: into_domain(hashmap.remove("description").unwrap()),
        fqdn_id: into_domain(hashmap.remove("fqdnId").unwrap()),
        health_check_direction: into_domain(
            hashmap.remove("healthCheckDirection").unwrap(),
        ),
        health_check_enabled: into_domain(hashmap.remove("healthCheckEnabled").unwrap()),
        health_check_rate: into_domain(hashmap.remove("healthCheckRate").unwrap()),
        health_check_target: into_domain(hashmap.remove("healthCheckTarget").unwrap()),
        health_check_type: into_domain(hashmap.remove("healthCheckType").unwrap()),
        hex_id: into_domain(hashmap.remove("hexId").unwrap()),
        interface_address: into_domain(hashmap.remove("interfaceAddress").unwrap()),
        name: into_domain(hashmap.remove("name").unwrap()),
        psk: into_domain(hashmap.remove("psk").unwrap()),
        remote_id: into_domain(hashmap.remove("remoteId").unwrap()),
        replay_protection: into_domain(hashmap.remove("replayProtection").unwrap()),
        user_id: into_domain(hashmap.remove("userId").unwrap()),
    }
}
