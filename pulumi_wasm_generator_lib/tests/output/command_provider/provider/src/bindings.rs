// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod component {
    #[allow(dead_code)]
    pub mod pulumi_wasm {
        #[allow(dead_code, clippy::all)]
        pub mod output_interface {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Output {
                handle: _rt::Resource<Output>,
            }

            impl Output {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Output {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]output"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Output {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(value: &[u8]) -> Self {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]output"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        Output::from_handle(ret as u32)
                    }
                }
            }
            impl Output {
                #[allow(unused_unsafe, clippy::all)]
                pub fn map(&self, function_name: &str) -> Output {
                    unsafe {
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]output.map"]
                            fn wit_import(_: i32, _: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                        Output::from_handle(ret as u32)
                    }
                }
            }
            impl Output {
                #[allow(unused_unsafe, clippy::all)]
                pub fn duplicate(&self) -> Output {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:pulumi-wasm/output-interface@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]output.duplicate"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Output::from_handle(ret as u32)
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod register_interface {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Output = super::super::super::component::pulumi_wasm::output_interface::Output;
            pub struct ObjectField<'a> {
                pub name: _rt::String,
                pub value: &'a Output,
            }
            impl<'a> ::core::fmt::Debug for ObjectField<'a> {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ObjectField")
                        .field("name", &self.name)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ResultField {
                pub name: _rt::String,
                pub schema: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for ResultField {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ResultField")
                        .field("name", &self.name)
                        .field("schema", &self.schema)
                        .finish()
                }
            }
            pub struct RegisterResourceResultField {
                pub name: _rt::String,
                pub output: Output,
            }
            impl ::core::fmt::Debug for RegisterResourceResultField {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("RegisterResourceResultField")
                        .field("name", &self.name)
                        .field("output", &self.output)
                        .finish()
                }
            }
            pub struct RegisterResourceRequest<'a> {
                pub type_: _rt::String,
                pub name: _rt::String,
                pub object: _rt::Vec<ObjectField<'a>>,
                pub results: _rt::Vec<ResultField>,
            }
            impl<'a> ::core::fmt::Debug for RegisterResourceRequest<'a> {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("RegisterResourceRequest")
                        .field("type", &self.type_)
                        .field("name", &self.name)
                        .field("object", &self.object)
                        .field("results", &self.results)
                        .finish()
                }
            }
            pub struct RegisterResourceResult {
                pub fields: _rt::Vec<RegisterResourceResultField>,
            }
            impl ::core::fmt::Debug for RegisterResourceResult {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("RegisterResourceResult")
                        .field("fields", &self.fields)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn register(request: &RegisterResourceRequest<'_>) -> RegisterResourceResult {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let RegisterResourceRequest {
                        type_: type_0,
                        name: name0,
                        object: object0,
                        results: results0,
                    } = request;
                    let vec1 = type_0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = name0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let vec5 = object0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 12, 4);
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5.add(i * 12);
                        {
                            let ObjectField {
                                name: name3,
                                value: value3,
                            } = e;
                            let vec4 = name3;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base.add(4).cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            *base.add(8).cast::<i32>() = (value3).handle() as i32;
                        }
                    }
                    let vec9 = results0;
                    let len9 = vec9.len();
                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(vec9.len() * 16, 4);
                    let result9 = if layout9.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout9);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec9.into_iter().enumerate() {
                        let base = result9.add(i * 16);
                        {
                            let ResultField {
                                name: name6,
                                schema: schema6,
                            } = e;
                            let vec7 = name6;
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            *base.add(4).cast::<usize>() = len7;
                            *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                            let vec8 = schema6;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            *base.add(12).cast::<usize>() = len8;
                            *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    }
                    let ptr10 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:pulumi-wasm/register-interface@0.1.0")]
                    extern "C" {
                        #[link_name = "register"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr1.cast_mut(),
                        len1,
                        ptr2.cast_mut(),
                        len2,
                        result5,
                        len5,
                        result9,
                        len9,
                        ptr10,
                    );
                    let l11 = *ptr10.add(0).cast::<*mut u8>();
                    let l12 = *ptr10.add(4).cast::<usize>();
                    let base17 = l11;
                    let len17 = l12;
                    let mut result17 = _rt::Vec::with_capacity(len17);
                    for i in 0..len17 {
                        let base = base17.add(i * 12);
                        let e17 = {
                            let l13 = *base.add(0).cast::<*mut u8>();
                            let l14 = *base.add(4).cast::<usize>();
                            let len15 = l14;
                            let bytes15 = _rt::Vec::from_raw_parts(l13.cast(), len15, len15);
                            let l16 = *base.add(8).cast::<i32>();

                            RegisterResourceResultField{
                name: _rt::string_lift(bytes15),
                output: super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(l16 as u32),
              }
                        };
                        result17.push(e17);
                    }
                    _rt::cabi_dealloc(base17, len17 * 12, 4);
                    if layout5.size() != 0 {
                        _rt::alloc::dealloc(result5.cast(), layout5);
                    }
                    if layout9.size() != 0 {
                        _rt::alloc::dealloc(result9.cast(), layout9);
                    }
                    RegisterResourceResult { fields: result17 }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod pulumi {
        #[allow(dead_code)]
        pub mod command {
            #[allow(dead_code, clippy::all)]
            pub mod local_command {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Output =
                    super::super::super::super::component::pulumi_wasm::output_interface::Output;
                pub struct Args<'a> {
                    pub archive_paths: &'a Output,
                    pub asset_paths: &'a Output,
                    pub create: &'a Output,
                    pub delete: &'a Output,
                    pub dir: &'a Output,
                    pub environment: &'a Output,
                    pub interpreter: &'a Output,
                    pub stdin: &'a Output,
                    pub triggers: &'a Output,
                    pub update: &'a Output,
                }
                impl<'a> ::core::fmt::Debug for Args<'a> {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Args")
                            .field("archive-paths", &self.archive_paths)
                            .field("asset-paths", &self.asset_paths)
                            .field("create", &self.create)
                            .field("delete", &self.delete)
                            .field("dir", &self.dir)
                            .field("environment", &self.environment)
                            .field("interpreter", &self.interpreter)
                            .field("stdin", &self.stdin)
                            .field("triggers", &self.triggers)
                            .field("update", &self.update)
                            .finish()
                    }
                }
                pub struct Res {
                    pub archive: Output,
                    pub archive_paths: Output,
                    pub asset_paths: Output,
                    pub assets: Output,
                    pub create: Output,
                    pub delete: Output,
                    pub dir: Output,
                    pub environment: Output,
                    pub interpreter: Output,
                    pub stderr: Output,
                    pub stdin: Output,
                    pub stdout: Output,
                    pub triggers: Output,
                    pub update: Output,
                }
                impl ::core::fmt::Debug for Res {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Res")
                            .field("archive", &self.archive)
                            .field("archive-paths", &self.archive_paths)
                            .field("asset-paths", &self.asset_paths)
                            .field("assets", &self.assets)
                            .field("create", &self.create)
                            .field("delete", &self.delete)
                            .field("dir", &self.dir)
                            .field("environment", &self.environment)
                            .field("interpreter", &self.interpreter)
                            .field("stderr", &self.stderr)
                            .field("stdin", &self.stdin)
                            .field("stdout", &self.stdout)
                            .field("triggers", &self.triggers)
                            .field("update", &self.update)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_invoke_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: i32,
                    arg10: i32,
                    arg11: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle1;
                    let handle2;
                    let handle3;
                    let handle4;
                    let handle5;
                    let handle6;
                    let handle7;
                    let handle8;
                    let handle9;
                    let handle10;
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result11 = T::invoke(
                        _rt::string_lift(bytes0),
                        Args {
                            archive_paths: {
                                handle1 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg2 as u32);
                                &handle1
                            },
                            asset_paths: {
                                handle2 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg3 as u32);
                                &handle2
                            },
                            create: {
                                handle3 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg4 as u32);
                                &handle3
                            },
                            delete: {
                                handle4 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg5 as u32);
                                &handle4
                            },
                            dir: {
                                handle5 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg6 as u32);
                                &handle5
                            },
                            environment: {
                                handle6 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg7 as u32);
                                &handle6
                            },
                            interpreter: {
                                handle7 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg8 as u32);
                                &handle7
                            },
                            stdin: {
                                handle8 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg9 as u32);
                                &handle8
                            },
                            triggers: {
                                handle9 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg10 as u32);
                                &handle9
                            },
                            update: {
                                handle10 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg11 as u32);
                                &handle10
                            },
                        },
                    );
                    let ptr12 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let Res {
                        archive: archive13,
                        archive_paths: archive_paths13,
                        asset_paths: asset_paths13,
                        assets: assets13,
                        create: create13,
                        delete: delete13,
                        dir: dir13,
                        environment: environment13,
                        interpreter: interpreter13,
                        stderr: stderr13,
                        stdin: stdin13,
                        stdout: stdout13,
                        triggers: triggers13,
                        update: update13,
                    } = result11;
                    *ptr12.add(0).cast::<i32>() = (archive13).take_handle() as i32;
                    *ptr12.add(4).cast::<i32>() = (archive_paths13).take_handle() as i32;
                    *ptr12.add(8).cast::<i32>() = (asset_paths13).take_handle() as i32;
                    *ptr12.add(12).cast::<i32>() = (assets13).take_handle() as i32;
                    *ptr12.add(16).cast::<i32>() = (create13).take_handle() as i32;
                    *ptr12.add(20).cast::<i32>() = (delete13).take_handle() as i32;
                    *ptr12.add(24).cast::<i32>() = (dir13).take_handle() as i32;
                    *ptr12.add(28).cast::<i32>() = (environment13).take_handle() as i32;
                    *ptr12.add(32).cast::<i32>() = (interpreter13).take_handle() as i32;
                    *ptr12.add(36).cast::<i32>() = (stderr13).take_handle() as i32;
                    *ptr12.add(40).cast::<i32>() = (stdin13).take_handle() as i32;
                    *ptr12.add(44).cast::<i32>() = (stdout13).take_handle() as i32;
                    *ptr12.add(48).cast::<i32>() = (triggers13).take_handle() as i32;
                    *ptr12.add(52).cast::<i32>() = (update13).take_handle() as i32;
                    ptr12
                }
                pub trait Guest {
                    fn invoke(name: _rt::String, args: Args<'_>) -> Res;
                }
                #[doc(hidden)]

                macro_rules! __export_pulumi_command_local_command_0_9_2_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "pulumi:command/local-command@0.9.2#invoke"]
          unsafe extern "C" fn export_invoke(arg0: *mut u8,arg1: usize,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: i32,arg9: i32,arg10: i32,arg11: i32,) -> *mut u8 {
            $($path_to_types)*::_export_invoke_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_pulumi_command_local_command_0_9_2_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 56]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 56]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod remote_command {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Output =
                    super::super::super::super::component::pulumi_wasm::output_interface::Output;
                pub struct Args<'a> {
                    pub connection: &'a Output,
                    pub create: &'a Output,
                    pub delete: &'a Output,
                    pub environment: &'a Output,
                    pub stdin: &'a Output,
                    pub triggers: &'a Output,
                    pub update: &'a Output,
                }
                impl<'a> ::core::fmt::Debug for Args<'a> {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Args")
                            .field("connection", &self.connection)
                            .field("create", &self.create)
                            .field("delete", &self.delete)
                            .field("environment", &self.environment)
                            .field("stdin", &self.stdin)
                            .field("triggers", &self.triggers)
                            .field("update", &self.update)
                            .finish()
                    }
                }
                pub struct Res {
                    pub connection: Output,
                    pub create: Output,
                    pub delete: Output,
                    pub environment: Output,
                    pub stderr: Output,
                    pub stdin: Output,
                    pub stdout: Output,
                    pub triggers: Output,
                    pub update: Output,
                }
                impl ::core::fmt::Debug for Res {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Res")
                            .field("connection", &self.connection)
                            .field("create", &self.create)
                            .field("delete", &self.delete)
                            .field("environment", &self.environment)
                            .field("stderr", &self.stderr)
                            .field("stdin", &self.stdin)
                            .field("stdout", &self.stdout)
                            .field("triggers", &self.triggers)
                            .field("update", &self.update)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_invoke_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle1;
                    let handle2;
                    let handle3;
                    let handle4;
                    let handle5;
                    let handle6;
                    let handle7;
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result8 = T::invoke(
                        _rt::string_lift(bytes0),
                        Args {
                            connection: {
                                handle1 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg2 as u32);
                                &handle1
                            },
                            create: {
                                handle2 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg3 as u32);
                                &handle2
                            },
                            delete: {
                                handle3 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg4 as u32);
                                &handle3
                            },
                            environment: {
                                handle4 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg5 as u32);
                                &handle4
                            },
                            stdin: {
                                handle5 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg6 as u32);
                                &handle5
                            },
                            triggers: {
                                handle6 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg7 as u32);
                                &handle6
                            },
                            update: {
                                handle7 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg8 as u32);
                                &handle7
                            },
                        },
                    );
                    let ptr9 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let Res {
                        connection: connection10,
                        create: create10,
                        delete: delete10,
                        environment: environment10,
                        stderr: stderr10,
                        stdin: stdin10,
                        stdout: stdout10,
                        triggers: triggers10,
                        update: update10,
                    } = result8;
                    *ptr9.add(0).cast::<i32>() = (connection10).take_handle() as i32;
                    *ptr9.add(4).cast::<i32>() = (create10).take_handle() as i32;
                    *ptr9.add(8).cast::<i32>() = (delete10).take_handle() as i32;
                    *ptr9.add(12).cast::<i32>() = (environment10).take_handle() as i32;
                    *ptr9.add(16).cast::<i32>() = (stderr10).take_handle() as i32;
                    *ptr9.add(20).cast::<i32>() = (stdin10).take_handle() as i32;
                    *ptr9.add(24).cast::<i32>() = (stdout10).take_handle() as i32;
                    *ptr9.add(28).cast::<i32>() = (triggers10).take_handle() as i32;
                    *ptr9.add(32).cast::<i32>() = (update10).take_handle() as i32;
                    ptr9
                }
                pub trait Guest {
                    fn invoke(name: _rt::String, args: Args<'_>) -> Res;
                }
                #[doc(hidden)]

                macro_rules! __export_pulumi_command_remote_command_0_9_2_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "pulumi:command/remote-command@0.9.2#invoke"]
        unsafe extern "C" fn export_invoke(arg0: *mut u8,arg1: usize,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: i32,) -> *mut u8 {
          $($path_to_types)*::_export_invoke_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
        }
      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_pulumi_command_remote_command_0_9_2_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 36]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 36]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod remote_copy_file {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Output =
                    super::super::super::super::component::pulumi_wasm::output_interface::Output;
                pub struct Args<'a> {
                    pub connection: &'a Output,
                    pub local_path: &'a Output,
                    pub remote_path: &'a Output,
                    pub triggers: &'a Output,
                }
                impl<'a> ::core::fmt::Debug for Args<'a> {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Args")
                            .field("connection", &self.connection)
                            .field("local-path", &self.local_path)
                            .field("remote-path", &self.remote_path)
                            .field("triggers", &self.triggers)
                            .finish()
                    }
                }
                pub struct Res {
                    pub connection: Output,
                    pub local_path: Output,
                    pub remote_path: Output,
                    pub triggers: Output,
                }
                impl ::core::fmt::Debug for Res {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Res")
                            .field("connection", &self.connection)
                            .field("local-path", &self.local_path)
                            .field("remote-path", &self.remote_path)
                            .field("triggers", &self.triggers)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_invoke_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: i32,
                    arg4: i32,
                    arg5: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle1;
                    let handle2;
                    let handle3;
                    let handle4;
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result5 = T::invoke(
                        _rt::string_lift(bytes0),
                        Args {
                            connection: {
                                handle1 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg2 as u32);
                                &handle1
                            },
                            local_path: {
                                handle2 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg3 as u32);
                                &handle2
                            },
                            remote_path: {
                                handle3 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg4 as u32);
                                &handle3
                            },
                            triggers: {
                                handle4 = super::super::super::super::component::pulumi_wasm::output_interface::Output::from_handle(arg5 as u32);
                                &handle4
                            },
                        },
                    );
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let Res {
                        connection: connection7,
                        local_path: local_path7,
                        remote_path: remote_path7,
                        triggers: triggers7,
                    } = result5;
                    *ptr6.add(0).cast::<i32>() = (connection7).take_handle() as i32;
                    *ptr6.add(4).cast::<i32>() = (local_path7).take_handle() as i32;
                    *ptr6.add(8).cast::<i32>() = (remote_path7).take_handle() as i32;
                    *ptr6.add(12).cast::<i32>() = (triggers7).take_handle() as i32;
                    ptr6
                }
                pub trait Guest {
                    fn invoke(name: _rt::String, args: Args<'_>) -> Res;
                }
                #[doc(hidden)]

                macro_rules! __export_pulumi_command_remote_copy_file_0_9_2_cabi{
    ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

      #[export_name = "pulumi:command/remote-copy-file@0.9.2#invoke"]
      unsafe extern "C" fn export_invoke(arg0: *mut u8,arg1: usize,arg2: i32,arg3: i32,arg4: i32,arg5: i32,) -> *mut u8 {
        $($path_to_types)*::_export_invoke_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
      }
    };);
  }
                #[doc(hidden)]
                pub(crate) use __export_pulumi_command_remote_copy_file_0_9_2_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_command_pulumi_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::pulumi::command::local_command::__export_pulumi_command_local_command_0_9_2_cabi!($ty with_types_in $($path_to_types_root)*::exports::pulumi::command::local_command);
  $($path_to_types_root)*::exports::pulumi::command::remote_command::__export_pulumi_command_remote_command_0_9_2_cabi!($ty with_types_in $($path_to_types_root)*::exports::pulumi::command::remote_command);
  $($path_to_types_root)*::exports::pulumi::command::remote_copy_file::__export_pulumi_command_remote_copy_file_0_9_2_cabi!($ty with_types_in $($path_to_types_root)*::exports::pulumi::command::remote_copy_file);
  )
}
#[doc(inline)]
pub(crate) use __export_command_pulumi_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:command-pulumi:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1562] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x95\x0b\x01A\x02\x01\
A\x0b\x01B\x0a\x04\0\x06output\x03\x01\x01p}\x01i\0\x01@\x01\x05value\x01\0\x02\x04\
\0\x13[constructor]output\x01\x03\x01h\0\x01@\x02\x04self\x04\x0dfunction-names\0\
\x02\x04\0\x12[method]output.map\x01\x05\x01@\x01\x04self\x04\0\x02\x04\0\x18[me\
thod]output.duplicate\x01\x06\x03\x01,component:pulumi-wasm/output-interface@0.1\
.0\x05\0\x02\x03\0\0\x06output\x01B\x14\x02\x03\x02\x01\x01\x04\0\x06output\x03\0\
\0\x01h\x01\x01r\x02\x04names\x05value\x02\x04\0\x0cobject-field\x03\0\x03\x01p}\
\x01r\x02\x04names\x06schema\x05\x04\0\x0cresult-field\x03\0\x06\x01i\x01\x01r\x02\
\x04names\x06output\x08\x04\0\x1eregister-resource-result-field\x03\0\x09\x01p\x04\
\x01p\x07\x01r\x04\x04types\x04names\x06object\x0b\x07results\x0c\x04\0\x19regis\
ter-resource-request\x03\0\x0d\x01p\x0a\x01r\x01\x06fields\x0f\x04\0\x18register\
-resource-result\x03\0\x10\x01@\x01\x07request\x0e\0\x11\x04\0\x08register\x01\x12\
\x03\x01.component:pulumi-wasm/register-interface@0.1.0\x05\x02\x01B\x0a\x02\x03\
\x02\x01\x01\x04\0\x06output\x03\0\0\x01h\x01\x01r\x0a\x0darchive-paths\x02\x0ba\
sset-paths\x02\x06create\x02\x06delete\x02\x03dir\x02\x0benvironment\x02\x0binte\
rpreter\x02\x05stdin\x02\x08triggers\x02\x06update\x02\x04\0\x04args\x03\0\x03\x01\
i\x01\x01r\x0e\x07archive\x05\x0darchive-paths\x05\x0basset-paths\x05\x06assets\x05\
\x06create\x05\x06delete\x05\x03dir\x05\x0benvironment\x05\x0binterpreter\x05\x06\
stderr\x05\x05stdin\x05\x06stdout\x05\x08triggers\x05\x06update\x05\x04\0\x03res\
\x03\0\x06\x01@\x02\x04names\x04args\x04\0\x07\x04\0\x06invoke\x01\x08\x04\x01\"\
pulumi:command/local-command@0.9.2\x05\x03\x01B\x0a\x02\x03\x02\x01\x01\x04\0\x06\
output\x03\0\0\x01h\x01\x01r\x07\x0aconnection\x02\x06create\x02\x06delete\x02\x0b\
environment\x02\x05stdin\x02\x08triggers\x02\x06update\x02\x04\0\x04args\x03\0\x03\
\x01i\x01\x01r\x09\x0aconnection\x05\x06create\x05\x06delete\x05\x0benvironment\x05\
\x06stderr\x05\x05stdin\x05\x06stdout\x05\x08triggers\x05\x06update\x05\x04\0\x03\
res\x03\0\x06\x01@\x02\x04names\x04args\x04\0\x07\x04\0\x06invoke\x01\x08\x04\x01\
#pulumi:command/remote-command@0.9.2\x05\x04\x01B\x0a\x02\x03\x02\x01\x01\x04\0\x06\
output\x03\0\0\x01h\x01\x01r\x04\x0aconnection\x02\x0alocal-path\x02\x0bremote-p\
ath\x02\x08triggers\x02\x04\0\x04args\x03\0\x03\x01i\x01\x01r\x04\x0aconnection\x05\
\x0alocal-path\x05\x0bremote-path\x05\x08triggers\x05\x04\0\x03res\x03\0\x06\x01\
@\x02\x04names\x04args\x04\0\x07\x04\0\x06invoke\x01\x08\x04\x01%pulumi:command/\
remote-copy-file@0.9.2\x05\x05\x04\x01#pulumi:command/command-pulumi@0.9.2\x04\0\
\x0b\x14\x01\0\x0ecommand-pulumi\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
