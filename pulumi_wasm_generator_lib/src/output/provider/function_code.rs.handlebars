use std::collections::HashMap;
use crate::bindings::exports::pulumi::{{interface.package_name}}::{{interface.name}};
use crate::bindings::component::pulumi_wasm::register_interface::{ObjectField, invoke, ResourceInvokeRequest, ResultField};
use crate::Component;

impl {{interface.name}}::Guest for Component {
    fn invoke(
{{#if interface.input_properties}}
        args: {{interface.name}}::Args
{{/if}}
    ){{#if interface.output_properties}} -> {{interface.name}}::Res{{/if}} {
        pulumi_wasm_common::setup_logger();
        let request = ResourceInvokeRequest {
            token: "{{interface.type}}".into(),
            object: vec![
                {{#each interface.input_properties}}
                ObjectField { name: "{{name}}".into(), value: args.{{arg_name}} },
                {{/each}}
            ],
            results: vec![
                {{#each interface.output_properties}}
                ResultField { name: "{{name}}".into() },
                {{/each}}
            ],
        };

        let o = invoke(&request);

        {{#if interface.output_properties}}
        let mut hashmap: HashMap<String, _> = o.fields.into_iter().map(|f| (f.name, f.output)).collect();

        {{interface.name}}::Res {
            {{#each interface.output_properties}}
            {{arg_name}}: hashmap.remove("{{name}}").unwrap(),
            {{/each}}
        }
        {{/if}}
    }
}
