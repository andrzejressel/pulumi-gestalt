{{#each enum.description_lines}}
    //! {{&this}}
{{/each}}

#[derive(Debug, PartialEq, Clone)]
pub enum {{enum.struct_name}} {
    {{#each enum.values as |value|}}
    {{#each value.description_lines}}
    /// {{&this}}
    {{/each}}
    {{value.name}},
    {{/each}}
}

impl serde::Serialize for {{enum.struct_name}} {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        let value = match self {
            {{#each enum.values as |value|}}
            {{@root.enum.struct_name}}::{{value.name}} => {{value.value}},
            {{/each}}
        };
        serializer.serialize_i64(value)
    }
}

impl<'de> serde::Deserialize<'de> for {{enum.struct_name}} {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let f = i64::deserialize(deserializer)?;
        match f {
            {{#each enum.values as |value|}}
            {{value.value}} => Ok({{@root.enum.struct_name}}::{{value.name}}),
            {{/each}}
            _ => Err(serde::de::Error::custom(format!("Invalid enum value: {}", f))),
        }
    }
}
