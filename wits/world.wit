package component:pulumi-wasm@0.1.0;

world pulumi-wasm {
    export output-interface;
    export register-interface;
    export function-reverse-callback;
    import log;

    import external-world;
}

world main {
    export pulumi-main;
    import external-world;
    import log;
}

world new-main {
    import pulumi-provider-random-interface;
    import output-interface;
    import function-reverse-callback;
    import log;
    export pulumi-main;
}

world pulumi-provider-random {
    import output-interface;
    import register-interface;

    export pulumi-provider-random-interface;
}

world logger {
    import log;
}

world pulumi-rust {
    import output-interface;
}

interface log {

    enum level {
        TRACE,
        DEBUG,
        INFO,
        WARN,
        ERROR
    }

    record content {
        level: level,
        target: string,
        args: string,
        module-path: option<string>,
        file: option<string>,
        line: option<u32>,
        key-values: list<tuple<string, string>>
    }

    log: func(content: content);
}

interface output-interface {

    describe-outputs: func() -> string;
    non-done-exists: func() -> bool;
    combine-outputs: func() -> bool;

    resource output {
        constructor(value: list<u8>);
        map: func(function-name: string) -> output;
        get: func() -> option<list<u8>>;
        get-field: func(field: string) -> output;
        get-type: func() -> string;
        duplicate: func() -> output;
    }
}

interface register-interface {
    use output-interface.{output};

    record object-field {
        name: string,
        value: borrow<output>
    }

    record register-resource-request {
        %type: string,
        name: string,
        object: list<object-field>,
    }

    register: func(request: register-resource-request) -> output;
}

interface external-world {
    is-in-preview: func() -> bool;
    register-resource: func(request: list<u8>) -> list<u8>;
}

interface pulumi-provider-random-interface {

    use output-interface.{output};

    variant either-u32 {
        literal(option<u32>),
        res(option<borrow<output>>),
    }

    record random-string-args {
        name: string,
        length: borrow<output>,
    }

    record random-string-result {
        %result: output
    }

    create-random-string: func(args: random-string-args) -> random-string-result;

    handle-functions: func();
}

interface pulumi-main {
    main: func();
}

interface function-reverse-callback {

    use output-interface.{output};

    record function-invocation-request {
        id: output,
        function-id: string,
        value: list<u8>,
    }
    record function-invocation-result {
        id: borrow<output>,
        value: list<u8>,
    }
    get-functions: func(source: string) -> list<function-invocation-request>;
    set-functions: func(results: list<function-invocation-result>);
}